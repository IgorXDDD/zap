
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20006500 	.word	0x20006500
   4:	00013a55 	.word	0x00013a55
   8:	0002a5d5 	.word	0x0002a5d5
   c:	00013a0d 	.word	0x00013a0d
  10:	00013a0d 	.word	0x00013a0d
  14:	00013a0d 	.word	0x00013a0d
  18:	00013a0d 	.word	0x00013a0d
	...
  2c:	000133d1 	.word	0x000133d1
  30:	00013a0d 	.word	0x00013a0d
  34:	00000000 	.word	0x00000000
  38:	00013379 	.word	0x00013379
  3c:	0001f2f1 	.word	0x0001f2f1

00000040 <_irq_vector_table>:
  40:	000134bd 0002ea29 000134bd 000134bd     .4..)....4...4..
  50:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  60:	0002e9f1 000134bd 000134bd 0002ea0f     .....4...4......
  70:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  80:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  90:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  a0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  b0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  c0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  d0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  e0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  f0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_FLASH_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_FLASH_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00b f9ae 	bl	b774 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000
     428:	2800      	cmp	r0, #0
     42a:	d019      	beq.n	460 <CONFIG_FLASH_SIZE+0x60>
     42c:	7803      	ldrb	r3, [r0, #0]
     42e:	4913      	ldr	r1, [pc, #76]	; (47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>)
     430:	4a13      	ldr	r2, [pc, #76]	; (480 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>)
     432:	b113      	cbz	r3, 43a <CONFIG_FLASH_SIZE+0x3a>
     434:	2b01      	cmp	r3, #1
     436:	d00e      	beq.n	456 <CONFIG_FLASH_SIZE+0x56>
     438:	e011      	b.n	45e <CONFIG_FLASH_SIZE+0x5e>
     43a:	7903      	ldrb	r3, [r0, #4]
     43c:	2b01      	cmp	r3, #1
     43e:	d000      	beq.n	442 <CONFIG_FLASH_SIZE+0x42>
     440:	b96b      	cbnz	r3, 45e <CONFIG_FLASH_SIZE+0x5e>
     442:	7943      	ldrb	r3, [r0, #5]
     444:	b10b      	cbz	r3, 44a <CONFIG_FLASH_SIZE+0x4a>
     446:	2b01      	cmp	r3, #1
     448:	d109      	bne.n	45e <CONFIG_FLASH_SIZE+0x5e>
     44a:	6883      	ldr	r3, [r0, #8]
     44c:	3b64      	subs	r3, #100	; 0x64
     44e:	428b      	cmp	r3, r1
     450:	d205      	bcs.n	45e <CONFIG_FLASH_SIZE+0x5e>
     452:	68c0      	ldr	r0, [r0, #12]
     454:	e00e      	b.n	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
     456:	7903      	ldrb	r3, [r0, #4]
     458:	2b01      	cmp	r3, #1
     45a:	d002      	beq.n	462 <CONFIG_FLASH_SIZE+0x62>
     45c:	b10b      	cbz	r3, 462 <CONFIG_FLASH_SIZE+0x62>
     45e:	2000      	movs	r0, #0
     460:	4770      	bx	lr
     462:	7943      	ldrb	r3, [r0, #5]
     464:	b10b      	cbz	r3, 46a <CONFIG_FLASH_SIZE+0x6a>
     466:	2b01      	cmp	r3, #1
     468:	d1f9      	bne.n	45e <CONFIG_FLASH_SIZE+0x5e>
     46a:	68c3      	ldr	r3, [r0, #12]
     46c:	3b64      	subs	r3, #100	; 0x64
     46e:	428b      	cmp	r3, r1
     470:	d2f5      	bcs.n	45e <CONFIG_FLASH_SIZE+0x5e>
     472:	6880      	ldr	r0, [r0, #8]
     474:	4290      	cmp	r0, r2
     476:	d8f2      	bhi.n	45e <CONFIG_FLASH_SIZE+0x5e>
     478:	2001      	movs	r0, #1
     47a:	4770      	bx	lr
     47c:	0001863d 	.word	0x0001863d
     480:	07a11fff 	.word	0x07a11fff
     484:	b510      	push	{r4, lr}
     486:	4c05      	ldr	r4, [pc, #20]	; (49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x28>)
     488:	6820      	ldr	r0, [r4, #0]
     48a:	b110      	cbz	r0, 492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     48c:	4780      	blx	r0
     48e:	2000      	movs	r0, #0
     490:	6020      	str	r0, [r4, #0]
     492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     496:	f001 bfdb 	b.w	2450 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     49a:	0000      	.short	0x0000
     49c:	20000008 	.word	0x20000008

000004a0 <mpsl_timeslot_session_open>:
     4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4a4:	460e      	mov	r6, r1
     4a6:	0005      	movs	r5, r0
     4a8:	d004      	beq.n	4b4 <mpsl_timeslot_session_open+0x14>
     4aa:	f000 f845 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     4ae:	4607      	mov	r7, r0
     4b0:	2400      	movs	r4, #0
     4b2:	e00a      	b.n	4ca <mpsl_timeslot_session_open+0x2a>
     4b4:	f06f 0015 	mvn.w	r0, #21
     4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4bc:	4620      	mov	r0, r4
     4be:	f000 f841 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4c2:	7880      	ldrb	r0, [r0, #2]
     4c4:	b138      	cbz	r0, 4d6 <mpsl_timeslot_session_open+0x36>
     4c6:	1c64      	adds	r4, r4, #1
     4c8:	b2e4      	uxtb	r4, r4
     4ca:	42bc      	cmp	r4, r7
     4cc:	d3f6      	bcc.n	4bc <mpsl_timeslot_session_open+0x1c>
     4ce:	bf00      	nop
     4d0:	f06f 000b 	mvn.w	r0, #11
     4d4:	e7f0      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     4d6:	4627      	mov	r7, r4
     4d8:	2cff      	cmp	r4, #255	; 0xff
     4da:	d0f9      	beq.n	4d0 <mpsl_timeslot_session_open+0x30>
     4dc:	4620      	mov	r0, r4
     4de:	f000 f831 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4e2:	4604      	mov	r4, r0
     4e4:	f00b fae1 	bl	baaa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x336>
     4e8:	7127      	strb	r7, [r4, #4]
     4ea:	4621      	mov	r1, r4
     4ec:	4807      	ldr	r0, [pc, #28]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4ee:	f001 ff87 	bl	2400 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     4f2:	70e0      	strb	r0, [r4, #3]
     4f4:	2820      	cmp	r0, #32
     4f6:	d005      	beq.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4f8:	2001      	movs	r0, #1
     4fa:	60a5      	str	r5, [r4, #8]
     4fc:	70a0      	strb	r0, [r4, #2]
     4fe:	7037      	strb	r7, [r6, #0]
     500:	2000      	movs	r0, #0
     502:	e7d9      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     504:	f06f 0022 	mvn.w	r0, #34	; 0x22
     508:	e7d6      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     50a:	0000      	.short	0x0000
     50c:	0000b81b 	.word	0x0000b81b

00000510 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     510:	b510      	push	{r4, lr}
     512:	0782      	lsls	r2, r0, #30
     514:	d002      	beq.n	51c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     516:	f06f 000d 	mvn.w	r0, #13
     51a:	bd10      	pop	{r4, pc}
     51c:	4a05      	ldr	r2, [pc, #20]	; (534 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     51e:	7011      	strb	r1, [r2, #0]
     520:	6050      	str	r0, [r2, #4]
     522:	b128      	cbz	r0, 530 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     524:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     528:	008a      	lsls	r2, r1, #2
     52a:	2100      	movs	r1, #0
     52c:	f00b fd43 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     530:	2000      	movs	r0, #0
     532:	bd10      	pop	{r4, pc}
     534:	2000000c 	.word	0x2000000c

00000538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     538:	4801      	ldr	r0, [pc, #4]	; (540 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     53a:	7800      	ldrb	r0, [r0, #0]
     53c:	4770      	bx	lr
     53e:	0000      	.short	0x0000
     540:	2000000c 	.word	0x2000000c

00000544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     544:	4905      	ldr	r1, [pc, #20]	; (55c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     546:	780a      	ldrb	r2, [r1, #0]
     548:	4290      	cmp	r0, r2
     54a:	d301      	bcc.n	550 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     54c:	2000      	movs	r0, #0
     54e:	4770      	bx	lr
     550:	6849      	ldr	r1, [r1, #4]
     552:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     556:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     55a:	4770      	bx	lr
     55c:	2000000c 	.word	0x2000000c
     560:	b570      	push	{r4, r5, r6, lr}
     562:	4605      	mov	r5, r0
     564:	2a20      	cmp	r2, #32
     566:	d027      	beq.n	5b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     568:	4819      	ldr	r0, [pc, #100]	; (5d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     56a:	4c1a      	ldr	r4, [pc, #104]	; (5d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     56c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     570:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     578:	2920      	cmp	r1, #32
     57a:	d022      	beq.n	5c2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     57c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     580:	7840      	ldrb	r0, [r0, #1]
     582:	784c      	ldrb	r4, [r1, #1]
     584:	7048      	strb	r0, [r1, #1]
     586:	4620      	mov	r0, r4
     588:	4601      	mov	r1, r0
     58a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     58e:	4291      	cmp	r1, r2
     590:	7005      	strb	r5, [r0, #0]
     592:	7840      	ldrb	r0, [r0, #1]
     594:	d1f8      	bne.n	588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     596:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     59a:	2a20      	cmp	r2, #32
     59c:	bf1a      	itte	ne
     59e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     5a2:	7054      	strbne	r4, [r2, #1]
     5a4:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     5a8:	2220      	movs	r2, #32
     5aa:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     5ae:	f88c 2001 	strb.w	r2, [ip, #1]
     5b2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	f240 217e 	movw	r1, #638	; 0x27e
     5bc:	2070      	movs	r0, #112	; 0x70
     5be:	f003 f969 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5c2:	f893 4020 	ldrb.w	r4, [r3, #32]
     5c6:	7840      	ldrb	r0, [r0, #1]
     5c8:	f883 0020 	strb.w	r0, [r3, #32]
     5cc:	e7db      	b.n	586 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     5ce:	0000      	.short	0x0000
     5d0:	20000e24 	.word	0x20000e24
     5d4:	20000ea4 	.word	0x20000ea4
     5d8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5dc:	b085      	sub	sp, #20
     5de:	4615      	mov	r5, r2
     5e0:	460c      	mov	r4, r1
     5e2:	f002 f8f5 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5e6:	4428      	add	r0, r5
     5e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5ec:	9002      	str	r0, [sp, #8]
     5ee:	6821      	ldr	r1, [r4, #0]
     5f0:	1a08      	subs	r0, r1, r0
     5f2:	0200      	lsls	r0, r0, #8
     5f4:	17c1      	asrs	r1, r0, #31
     5f6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5fa:	1200      	asrs	r0, r0, #8
     5fc:	2800      	cmp	r0, #0
     5fe:	f300 80d5 	bgt.w	7ac <__data_size+0x76>
     602:	48ac      	ldr	r0, [pc, #688]	; (8b4 <CONFIG_BT_RX_STACK_SIZE+0x1c>)
     604:	9f08      	ldr	r7, [sp, #32]
     606:	4eac      	ldr	r6, [pc, #688]	; (8b8 <CONFIG_BT_RX_STACK_SIZE+0x20>)
     608:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     60c:	9003      	str	r0, [sp, #12]
     60e:	f890 5020 	ldrb.w	r5, [r0, #32]
     612:	2020      	movs	r0, #32
     614:	46e9      	mov	r9, sp
     616:	f10d 0804 	add.w	r8, sp, #4
     61a:	f88d 0000 	strb.w	r0, [sp]
     61e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     622:	2d20      	cmp	r5, #32
     624:	bf18      	it	ne
     626:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     62a:	d025      	beq.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     62c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     630:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     634:	6822      	ldr	r2, [r4, #0]
     636:	68c1      	ldr	r1, [r0, #12]
     638:	1a51      	subs	r1, r2, r1
     63a:	0209      	lsls	r1, r1, #8
     63c:	17ca      	asrs	r2, r1, #31
     63e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     642:	3008      	adds	r0, #8
     644:	1209      	asrs	r1, r1, #8
     646:	d417      	bmi.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     648:	8961      	ldrh	r1, [r4, #10]
     64a:	b171      	cbz	r1, 66a <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     64c:	8941      	ldrh	r1, [r0, #10]
     64e:	b961      	cbnz	r1, 66a <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     650:	f000 fdba 	bl	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
     654:	f002 f8bc 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     658:	6821      	ldr	r1, [r4, #0]
     65a:	1a08      	subs	r0, r1, r0
     65c:	0200      	lsls	r0, r0, #8
     65e:	17c1      	asrs	r1, r0, #31
     660:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     664:	1200      	asrs	r0, r0, #8
     666:	2833      	cmp	r0, #51	; 0x33
     668:	db06      	blt.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     66a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     66e:	f889 5000 	strb.w	r5, [r9]
     672:	7845      	ldrb	r5, [r0, #1]
     674:	2d20      	cmp	r5, #32
     676:	d1d9      	bne.n	62c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     678:	f899 0000 	ldrb.w	r0, [r9]
     67c:	f888 0000 	strb.w	r0, [r8]
     680:	46a1      	mov	r9, r4
     682:	2d20      	cmp	r5, #32
     684:	bf1c      	itt	ne
     686:	488d      	ldrne	r0, [pc, #564]	; (8bc <CONFIG_BT_RX_STACK_SIZE+0x24>)
     688:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     68c:	f000 810e 	beq.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     690:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     694:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     698:	f8d9 2004 	ldr.w	r2, [r9, #4]
     69c:	f8da 1008 	ldr.w	r1, [sl, #8]
     6a0:	4648      	mov	r0, r9
     6a2:	1a89      	subs	r1, r1, r2
     6a4:	0209      	lsls	r1, r1, #8
     6a6:	17ca      	asrs	r2, r1, #31
     6a8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6ac:	f10a 0708 	add.w	r7, sl, #8
     6b0:	1209      	asrs	r1, r1, #8
     6b2:	d415      	bmi.n	6e0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe0>
     6b4:	8979      	ldrh	r1, [r7, #10]
     6b6:	2900      	cmp	r1, #0
     6b8:	f000 80f8 	beq.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     6bc:	8941      	ldrh	r1, [r0, #10]
     6be:	2900      	cmp	r1, #0
     6c0:	f040 80f4 	bne.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     6c4:	f000 fd80 	bl	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
     6c8:	f002 f882 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6cc:	6839      	ldr	r1, [r7, #0]
     6ce:	1a08      	subs	r0, r1, r0
     6d0:	0200      	lsls	r0, r0, #8
     6d2:	17c1      	asrs	r1, r0, #31
     6d4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6d8:	1200      	asrs	r0, r0, #8
     6da:	2833      	cmp	r0, #51	; 0x33
     6dc:	f280 80e6 	bge.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     6e0:	f888 5000 	strb.w	r5, [r8]
     6e4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     6e8:	f899 000c 	ldrb.w	r0, [r9, #12]
     6ec:	4281      	cmp	r1, r0
     6ee:	d906      	bls.n	6fe <CONFIG_BT_HCI_TX_STACK_SIZE+0xfe>
     6f0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6f4:	7845      	ldrb	r5, [r0, #1]
     6f6:	2d20      	cmp	r5, #32
     6f8:	d1ca      	bne.n	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     6fa:	f000 b8d7 	b.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     6fe:	f89d 0004 	ldrb.w	r0, [sp, #4]
     702:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     706:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     70a:	8a68      	ldrh	r0, [r5, #18]
     70c:	68ef      	ldr	r7, [r5, #12]
     70e:	2800      	cmp	r0, #0
     710:	d143      	bne.n	79a <__data_size+0x64>
     712:	8960      	ldrh	r0, [r4, #10]
     714:	b3e8      	cbz	r0, 792 <__data_size+0x5c>
     716:	68a8      	ldr	r0, [r5, #8]
     718:	f00b fa65 	bl	bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     71c:	8a69      	ldrh	r1, [r5, #18]
     71e:	7c2a      	ldrb	r2, [r5, #16]
     720:	4b67      	ldr	r3, [pc, #412]	; (8c0 <CONFIG_BT_RX_STACK_SIZE+0x28>)
     722:	4411      	add	r1, r2
     724:	1c49      	adds	r1, r1, #1
     726:	1842      	adds	r2, r0, r1
     728:	4298      	cmp	r0, r3
     72a:	d904      	bls.n	736 <__data_size>
     72c:	f240 6109 	movw	r1, #1545	; 0x609
     730:	2070      	movs	r0, #112	; 0x70
     732:	f003 f8af 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     736:	4863      	ldr	r0, [pc, #396]	; (8c4 <CONFIG_BT_RX_STACK_SIZE+0x2c>)
     738:	4281      	cmp	r1, r0
     73a:	dd04      	ble.n	746 <__data_size+0x10>
     73c:	f240 610a 	movw	r1, #1546	; 0x60a
     740:	2070      	movs	r0, #112	; 0x70
     742:	f003 f8a7 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     746:	4860      	ldr	r0, [pc, #384]	; (8c8 <CONFIG_BT_RX_STACK_SIZE+0x30>)
     748:	4281      	cmp	r1, r0
     74a:	da04      	bge.n	756 <__data_size+0x20>
     74c:	f240 610b 	movw	r1, #1547	; 0x60b
     750:	2070      	movs	r0, #112	; 0x70
     752:	f003 f89f 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     756:	485d      	ldr	r0, [pc, #372]	; (8cc <CONFIG_BT_RX_STACK_SIZE+0x34>)
     758:	4290      	cmp	r0, r2
     75a:	bfdc      	itt	le
     75c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     760:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     764:	dd05      	ble.n	772 <__data_size+0x3c>
     766:	2a00      	cmp	r2, #0
     768:	bfbc      	itt	lt
     76a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     76e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     772:	4610      	mov	r0, r2
     774:	f002 f82c 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     778:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     77c:	1a78      	subs	r0, r7, r1
     77e:	0200      	lsls	r0, r0, #8
     780:	17c2      	asrs	r2, r0, #31
     782:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     786:	1200      	asrs	r0, r0, #8
     788:	2833      	cmp	r0, #51	; 0x33
     78a:	bfb8      	it	lt
     78c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     790:	e000      	b.n	794 <__data_size+0x5e>
     792:	e002      	b.n	79a <__data_size+0x64>
     794:	bfb8      	it	lt
     796:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     79a:	9802      	ldr	r0, [sp, #8]
     79c:	1a38      	subs	r0, r7, r0
     79e:	0200      	lsls	r0, r0, #8
     7a0:	17c1      	asrs	r1, r0, #31
     7a2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     7a6:	1200      	asrs	r0, r0, #8
     7a8:	2800      	cmp	r0, #0
     7aa:	dd03      	ble.n	7b4 <__data_size+0x7e>
     7ac:	b009      	add	sp, #36	; 0x24
     7ae:	2000      	movs	r0, #0
     7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b4:	e9d4 1000 	ldrd	r1, r0, [r4]
     7b8:	1a40      	subs	r0, r0, r1
     7ba:	4438      	add	r0, r7
     7bc:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     7c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7c4:	e9c4 1000 	strd	r1, r0, [r4]
     7c8:	9803      	ldr	r0, [sp, #12]
     7ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
     7ce:	466f      	mov	r7, sp
     7d0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7d4:	2020      	movs	r0, #32
     7d6:	f10d 0a04 	add.w	sl, sp, #4
     7da:	f88d 0000 	strb.w	r0, [sp]
     7de:	2d20      	cmp	r5, #32
     7e0:	bf1c      	itt	ne
     7e2:	4836      	ldrne	r0, [pc, #216]	; (8bc <CONFIG_BT_RX_STACK_SIZE+0x24>)
     7e4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     7e8:	d025      	beq.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     7ea:	bf00      	nop
     7ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7f0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     7f4:	6822      	ldr	r2, [r4, #0]
     7f6:	68c1      	ldr	r1, [r0, #12]
     7f8:	1a51      	subs	r1, r2, r1
     7fa:	0209      	lsls	r1, r1, #8
     7fc:	17ca      	asrs	r2, r1, #31
     7fe:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     802:	3008      	adds	r0, #8
     804:	1209      	asrs	r1, r1, #8
     806:	d416      	bmi.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     808:	8961      	ldrh	r1, [r4, #10]
     80a:	b171      	cbz	r1, 82a <CONFIG_ISR_STACK_SIZE+0x2a>
     80c:	8941      	ldrh	r1, [r0, #10]
     80e:	b961      	cbnz	r1, 82a <CONFIG_ISR_STACK_SIZE+0x2a>
     810:	f000 fcda 	bl	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
     814:	f001 ffdc 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     818:	6821      	ldr	r1, [r4, #0]
     81a:	1a08      	subs	r0, r1, r0
     81c:	0200      	lsls	r0, r0, #8
     81e:	17c1      	asrs	r1, r0, #31
     820:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     824:	1200      	asrs	r0, r0, #8
     826:	2833      	cmp	r0, #51	; 0x33
     828:	db05      	blt.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     82a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     82e:	703d      	strb	r5, [r7, #0]
     830:	7845      	ldrb	r5, [r0, #1]
     832:	2d20      	cmp	r5, #32
     834:	d1da      	bne.n	7ec <__data_size+0xb6>
     836:	7838      	ldrb	r0, [r7, #0]
     838:	f88a 0000 	strb.w	r0, [sl]
     83c:	4627      	mov	r7, r4
     83e:	2d20      	cmp	r5, #32
     840:	bf1c      	itt	ne
     842:	481e      	ldrne	r0, [pc, #120]	; (8bc <CONFIG_BT_RX_STACK_SIZE+0x24>)
     844:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     848:	d030      	beq.n	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     84a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     84e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     852:	6879      	ldr	r1, [r7, #4]
     854:	f8d9 2008 	ldr.w	r2, [r9, #8]
     858:	4638      	mov	r0, r7
     85a:	1a51      	subs	r1, r2, r1
     85c:	0209      	lsls	r1, r1, #8
     85e:	17ca      	asrs	r2, r1, #31
     860:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     864:	f109 0808 	add.w	r8, r9, #8
     868:	1209      	asrs	r1, r1, #8
     86a:	d412      	bmi.n	892 <CONFIG_ISR_STACK_SIZE+0x92>
     86c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     870:	b1e1      	cbz	r1, 8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     872:	8941      	ldrh	r1, [r0, #10]
     874:	b9d1      	cbnz	r1, 8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     876:	f000 fca7 	bl	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
     87a:	f001 ffa9 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     87e:	f8d8 1000 	ldr.w	r1, [r8]
     882:	1a08      	subs	r0, r1, r0
     884:	0200      	lsls	r0, r0, #8
     886:	17c1      	asrs	r1, r0, #31
     888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     88c:	1200      	asrs	r0, r0, #8
     88e:	2833      	cmp	r0, #51	; 0x33
     890:	da0c      	bge.n	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     892:	f88a 5000 	strb.w	r5, [sl]
     896:	f899 0014 	ldrb.w	r0, [r9, #20]
     89a:	7b39      	ldrb	r1, [r7, #12]
     89c:	4288      	cmp	r0, r1
     89e:	f67f af2e 	bls.w	6fe <CONFIG_BT_HCI_TX_STACK_SIZE+0xfe>
     8a2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     8a6:	7845      	ldrb	r5, [r0, #1]
     8a8:	2d20      	cmp	r5, #32
     8aa:	d1ce      	bne.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
     8ac:	b009      	add	sp, #36	; 0x24
     8ae:	2001      	movs	r0, #1
     8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8b4:	20000ea4 	.word	0x20000ea4
     8b8:	20000b24 	.word	0x20000b24
     8bc:	20000e24 	.word	0x20000e24
     8c0:	1e847fff 	.word	0x1e847fff
     8c4:	07a12000 	.word	0x07a12000
     8c8:	f85ee000 	.word	0xf85ee000
     8cc:	1e848000 	.word	0x1e848000
     8d0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     8d4:	4604      	mov	r4, r0
     8d6:	483c      	ldr	r0, [pc, #240]	; (9c8 <CONFIG_BT_RX_STACK_SIZE+0x130>)
     8d8:	460e      	mov	r6, r1
     8da:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     8de:	4f3b      	ldr	r7, [pc, #236]	; (9cc <CONFIG_BT_RX_STACK_SIZE+0x134>)
     8e0:	f890 5020 	ldrb.w	r5, [r0, #32]
     8e4:	2020      	movs	r0, #32
     8e6:	4698      	mov	r8, r3
     8e8:	4692      	mov	sl, r2
     8ea:	7010      	strb	r0, [r2, #0]
     8ec:	f507 7940 	add.w	r9, r7, #768	; 0x300
     8f0:	2d20      	cmp	r5, #32
     8f2:	bf18      	it	ne
     8f4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     8f8:	d028      	beq.n	94c <CONFIG_BT_RX_STACK_SIZE+0xb4>
     8fa:	bf00      	nop
     8fc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     900:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     904:	f100 0108 	add.w	r1, r0, #8
     908:	68c0      	ldr	r0, [r0, #12]
     90a:	6822      	ldr	r2, [r4, #0]
     90c:	1a10      	subs	r0, r2, r0
     90e:	0200      	lsls	r0, r0, #8
     910:	17c2      	asrs	r2, r0, #31
     912:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     916:	1200      	asrs	r0, r0, #8
     918:	d418      	bmi.n	94c <CONFIG_BT_RX_STACK_SIZE+0xb4>
     91a:	8960      	ldrh	r0, [r4, #10]
     91c:	b178      	cbz	r0, 93e <CONFIG_BT_RX_STACK_SIZE+0xa6>
     91e:	8948      	ldrh	r0, [r1, #10]
     920:	b968      	cbnz	r0, 93e <CONFIG_BT_RX_STACK_SIZE+0xa6>
     922:	4608      	mov	r0, r1
     924:	f000 fc50 	bl	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
     928:	f001 ff52 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     92c:	6821      	ldr	r1, [r4, #0]
     92e:	1a08      	subs	r0, r1, r0
     930:	0200      	lsls	r0, r0, #8
     932:	17c1      	asrs	r1, r0, #31
     934:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     938:	1200      	asrs	r0, r0, #8
     93a:	2833      	cmp	r0, #51	; 0x33
     93c:	db06      	blt.n	94c <CONFIG_BT_RX_STACK_SIZE+0xb4>
     93e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     942:	f88a 5000 	strb.w	r5, [sl]
     946:	7845      	ldrb	r5, [r0, #1]
     948:	2d20      	cmp	r5, #32
     94a:	d1d7      	bne.n	8fc <CONFIG_BT_RX_STACK_SIZE+0x64>
     94c:	f89a 0000 	ldrb.w	r0, [sl]
     950:	f888 0000 	strb.w	r0, [r8]
     954:	2d20      	cmp	r5, #32
     956:	bf18      	it	ne
     958:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     95c:	d030      	beq.n	9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>
     95e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     962:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     966:	6861      	ldr	r1, [r4, #4]
     968:	f8d9 2008 	ldr.w	r2, [r9, #8]
     96c:	4620      	mov	r0, r4
     96e:	1a51      	subs	r1, r2, r1
     970:	0209      	lsls	r1, r1, #8
     972:	17ca      	asrs	r2, r1, #31
     974:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     978:	f109 0608 	add.w	r6, r9, #8
     97c:	1209      	asrs	r1, r1, #8
     97e:	d410      	bmi.n	9a2 <CONFIG_BT_RX_STACK_SIZE+0x10a>
     980:	8971      	ldrh	r1, [r6, #10]
     982:	b1e9      	cbz	r1, 9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>
     984:	8941      	ldrh	r1, [r0, #10]
     986:	b9d9      	cbnz	r1, 9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>
     988:	f000 fc1e 	bl	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
     98c:	f001 ff20 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     990:	6831      	ldr	r1, [r6, #0]
     992:	1a08      	subs	r0, r1, r0
     994:	0200      	lsls	r0, r0, #8
     996:	17c1      	asrs	r1, r0, #31
     998:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     99c:	1200      	asrs	r0, r0, #8
     99e:	2833      	cmp	r0, #51	; 0x33
     9a0:	da0e      	bge.n	9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>
     9a2:	f888 5000 	strb.w	r5, [r8]
     9a6:	f899 0014 	ldrb.w	r0, [r9, #20]
     9aa:	7b21      	ldrb	r1, [r4, #12]
     9ac:	4288      	cmp	r0, r1
     9ae:	d802      	bhi.n	9b6 <CONFIG_BT_RX_STACK_SIZE+0x11e>
     9b0:	2000      	movs	r0, #0
     9b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9b6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     9ba:	7845      	ldrb	r5, [r0, #1]
     9bc:	2d20      	cmp	r5, #32
     9be:	d1ce      	bne.n	95e <CONFIG_BT_RX_STACK_SIZE+0xc6>
     9c0:	2001      	movs	r0, #1
     9c2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9c6:	0000      	.short	0x0000
     9c8:	20000ea4 	.word	0x20000ea4
     9cc:	20000b24 	.word	0x20000b24
     9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9d4:	f04f 0800 	mov.w	r8, #0
     9d8:	b098      	sub	sp, #96	; 0x60
     9da:	4616      	mov	r6, r2
     9dc:	460d      	mov	r5, r1
     9de:	46c3      	mov	fp, r8
     9e0:	f002 f96e 	bl	2cc0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     9e4:	4604      	mov	r4, r0
     9e6:	2d01      	cmp	r5, #1
     9e8:	bf18      	it	ne
     9ea:	2d02      	cmpne	r5, #2
     9ec:	d005      	beq.n	9fa <CONFIG_BT_RX_STACK_SIZE+0x162>
     9ee:	f640 1194 	movw	r1, #2452	; 0x994
     9f2:	f04f 0070 	mov.w	r0, #112	; 0x70
     9f6:	f002 ff4d 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9fa:	49fd      	ldr	r1, [pc, #1012]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     9fc:	2001      	movs	r0, #1
     9fe:	6008      	str	r0, [r1, #0]
     a00:	49fc      	ldr	r1, [pc, #1008]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     a02:	6889      	ldr	r1, [r1, #8]
     a04:	6008      	str	r0, [r1, #0]
     a06:	2000      	movs	r0, #0
     a08:	900c      	str	r0, [sp, #48]	; 0x30
     a0a:	1e40      	subs	r0, r0, #1
     a0c:	900e      	str	r0, [sp, #56]	; 0x38
     a0e:	49fa      	ldr	r1, [pc, #1000]	; (df8 <CONFIG_BT_RX_STACK_SIZE+0x560>)
     a10:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     a14:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     a18:	3308      	adds	r3, #8
     a1a:	af0f      	add	r7, sp, #60	; 0x3c
     a1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a1e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a22:	a80f      	add	r0, sp, #60	; 0x3c
     a24:	f000 fbd0 	bl	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
     a28:	900d      	str	r0, [sp, #52]	; 0x34
     a2a:	48f3      	ldr	r0, [pc, #972]	; (df8 <CONFIG_BT_RX_STACK_SIZE+0x560>)
     a2c:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     a30:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     a34:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     a38:	f1b9 0f00 	cmp.w	r9, #0
     a3c:	bf14      	ite	ne
     a3e:	f04f 0a01 	movne.w	sl, #1
     a42:	f04f 0a00 	moveq.w	sl, #0
     a46:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a48:	9014      	str	r0, [sp, #80]	; 0x50
     a4a:	f1ba 0f00 	cmp.w	sl, #0
     a4e:	d009      	beq.n	a64 <CONFIG_BT_RX_STACK_SIZE+0x1cc>
     a50:	48ea      	ldr	r0, [pc, #936]	; (dfc <CONFIG_BT_RX_STACK_SIZE+0x564>)
     a52:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     a56:	b928      	cbnz	r0, a64 <CONFIG_BT_RX_STACK_SIZE+0x1cc>
     a58:	f002 feb8 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     a5c:	2800      	cmp	r0, #0
     a5e:	bf08      	it	eq
     a60:	2701      	moveq	r7, #1
     a62:	d000      	beq.n	a66 <CONFIG_BT_RX_STACK_SIZE+0x1ce>
     a64:	2700      	movs	r7, #0
     a66:	48e6      	ldr	r0, [pc, #920]	; (e00 <CONFIG_BT_RX_STACK_SIZE+0x568>)
     a68:	2200      	movs	r2, #0
     a6a:	9215      	str	r2, [sp, #84]	; 0x54
     a6c:	7800      	ldrb	r0, [r0, #0]
     a6e:	4616      	mov	r6, r2
     a70:	2801      	cmp	r0, #1
     a72:	bf18      	it	ne
     a74:	2803      	cmpne	r0, #3
     a76:	d140      	bne.n	afa <CONFIG_BT_RX_STACK_SIZE+0x262>
     a78:	48e1      	ldr	r0, [pc, #900]	; (e00 <CONFIG_BT_RX_STACK_SIZE+0x568>)
     a7a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     a7e:	eba8 0009 	sub.w	r0, r8, r9
     a82:	9015      	str	r0, [sp, #84]	; 0x54
     a84:	45c8      	cmp	r8, r9
     a86:	d938      	bls.n	afa <CONFIG_BT_RX_STACK_SIZE+0x262>
     a88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     a8a:	ea6f 0108 	mvn.w	r1, r8
     a8e:	f8df e374 	ldr.w	lr, [pc, #884]	; e04 <CONFIG_BT_RX_STACK_SIZE+0x56c>
     a92:	1858      	adds	r0, r3, r1
     a94:	f10d 0c0c 	add.w	ip, sp, #12
     a98:	aa17      	add	r2, sp, #92	; 0x5c
     a9a:	4573      	cmp	r3, lr
     a9c:	d904      	bls.n	aa8 <CONFIG_BT_RX_STACK_SIZE+0x210>
     a9e:	f240 6109 	movw	r1, #1545	; 0x609
     aa2:	2070      	movs	r0, #112	; 0x70
     aa4:	f002 fef6 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aa8:	4bd7      	ldr	r3, [pc, #860]	; (e08 <CONFIG_BT_RX_STACK_SIZE+0x570>)
     aaa:	4299      	cmp	r1, r3
     aac:	dd04      	ble.n	ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>
     aae:	f240 610a 	movw	r1, #1546	; 0x60a
     ab2:	2070      	movs	r0, #112	; 0x70
     ab4:	f002 feee 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ab8:	4bd4      	ldr	r3, [pc, #848]	; (e0c <CONFIG_BT_RX_STACK_SIZE+0x574>)
     aba:	4299      	cmp	r1, r3
     abc:	da04      	bge.n	ac8 <CONFIG_BT_RX_STACK_SIZE+0x230>
     abe:	f240 610b 	movw	r1, #1547	; 0x60b
     ac2:	2070      	movs	r0, #112	; 0x70
     ac4:	f002 fee6 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ac8:	49d1      	ldr	r1, [pc, #836]	; (e10 <CONFIG_BT_RX_STACK_SIZE+0x578>)
     aca:	4281      	cmp	r1, r0
     acc:	bfdc      	itt	le
     ace:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     ad2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     ad6:	dd05      	ble.n	ae4 <CONFIG_BT_RX_STACK_SIZE+0x24c>
     ad8:	2800      	cmp	r0, #0
     ada:	bfbc      	itt	lt
     adc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     ae0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     ae4:	4661      	mov	r1, ip
     ae6:	f001 fe8f 	bl	2808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     aea:	9803      	ldr	r0, [sp, #12]
     aec:	990f      	ldr	r1, [sp, #60]	; 0x3c
     aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     af2:	9003      	str	r0, [sp, #12]
     af4:	1a08      	subs	r0, r1, r0
     af6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     afa:	2f00      	cmp	r7, #0
     afc:	bf18      	it	ne
     afe:	2632      	movne	r6, #50	; 0x32
     b00:	d104      	bne.n	b0c <CONFIG_BT_RX_STACK_SIZE+0x274>
     b02:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b06:	2800      	cmp	r0, #0
     b08:	bf18      	it	ne
     b0a:	2602      	movne	r6, #2
     b0c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b10:	d008      	beq.n	b24 <CONFIG_BT_RX_STACK_SIZE+0x28c>
     b12:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b14:	1b00      	subs	r0, r0, r4
     b16:	0200      	lsls	r0, r0, #8
     b18:	17c1      	asrs	r1, r0, #31
     b1a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b1e:	1200      	asrs	r0, r0, #8
     b20:	2801      	cmp	r0, #1
     b22:	da02      	bge.n	b2a <CONFIG_BT_RX_STACK_SIZE+0x292>
     b24:	2104      	movs	r1, #4
     b26:	9818      	ldr	r0, [sp, #96]	; 0x60
     b28:	e00b      	b.n	b42 <CONFIG_BT_RX_STACK_SIZE+0x2aa>
     b2a:	b147      	cbz	r7, b3e <CONFIG_BT_RX_STACK_SIZE+0x2a6>
     b2c:	48b3      	ldr	r0, [pc, #716]	; (dfc <CONFIG_BT_RX_STACK_SIZE+0x564>)
     b2e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b32:	b120      	cbz	r0, b3e <CONFIG_BT_RX_STACK_SIZE+0x2a6>
     b34:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b38:	1c06      	adds	r6, r0, #0
     b3a:	bf18      	it	ne
     b3c:	2602      	movne	r6, #2
     b3e:	4620      	mov	r0, r4
     b40:	2101      	movs	r1, #1
     b42:	f1b9 0f00 	cmp.w	r9, #0
     b46:	d002      	beq.n	b4e <CONFIG_BT_RX_STACK_SIZE+0x2b6>
     b48:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b4a:	2b1e      	cmp	r3, #30
     b4c:	da02      	bge.n	b54 <CONFIG_BT_RX_STACK_SIZE+0x2bc>
     b4e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     b52:	b113      	cbz	r3, b5a <CONFIG_BT_RX_STACK_SIZE+0x2c2>
     b54:	f04f 0b01 	mov.w	fp, #1
     b58:	1e49      	subs	r1, r1, #1
     b5a:	198b      	adds	r3, r1, r6
     b5c:	49a8      	ldr	r1, [pc, #672]	; (e00 <CONFIG_BT_RX_STACK_SIZE+0x568>)
     b5e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     b62:	7809      	ldrb	r1, [r1, #0]
     b64:	9115      	str	r1, [sp, #84]	; 0x54
     b66:	990f      	ldr	r1, [sp, #60]	; 0x3c
     b68:	1a89      	subs	r1, r1, r2
     b6a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     b6e:	ebac 0100 	sub.w	r1, ip, r0
     b72:	0209      	lsls	r1, r1, #8
     b74:	17ce      	asrs	r6, r1, #31
     b76:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     b7a:	1209      	asrs	r1, r1, #8
     b7c:	4299      	cmp	r1, r3
     b7e:	db18      	blt.n	bb2 <CONFIG_BT_RX_STACK_SIZE+0x31a>
     b80:	2a00      	cmp	r2, #0
     b82:	bf18      	it	ne
     b84:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     b88:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     b8a:	9705      	str	r7, [sp, #20]
     b8c:	2700      	movs	r7, #0
     b8e:	f001 ff91 	bl	2ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b92:	1a30      	subs	r0, r6, r0
     b94:	0200      	lsls	r0, r0, #8
     b96:	17c1      	asrs	r1, r0, #31
     b98:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b9c:	1200      	asrs	r0, r0, #8
     b9e:	283e      	cmp	r0, #62	; 0x3e
     ba0:	da3f      	bge.n	c22 <CONFIG_BT_RX_STACK_SIZE+0x38a>
     ba2:	2d01      	cmp	r5, #1
     ba4:	d020      	beq.n	be8 <CONFIG_BT_RX_STACK_SIZE+0x350>
     ba6:	1e70      	subs	r0, r6, #1
     ba8:	9905      	ldr	r1, [sp, #20]
     baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bae:	b319      	cbz	r1, bf8 <CONFIG_BT_RX_STACK_SIZE+0x360>
     bb0:	e02d      	b.n	c0e <CONFIG_BT_RX_STACK_SIZE+0x376>
     bb2:	b182      	cbz	r2, bd6 <CONFIG_BT_RX_STACK_SIZE+0x33e>
     bb4:	f1be 0f00 	cmp.w	lr, #0
     bb8:	bf04      	itt	eq
     bba:	9915      	ldreq	r1, [sp, #84]	; 0x54
     bbc:	2903      	cmpeq	r1, #3
     bbe:	d00a      	beq.n	bd6 <CONFIG_BT_RX_STACK_SIZE+0x33e>
     bc0:	b927      	cbnz	r7, bcc <CONFIG_BT_RX_STACK_SIZE+0x334>
     bc2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     bc6:	2900      	cmp	r1, #0
     bc8:	bf18      	it	ne
     bca:	1e9b      	subne	r3, r3, #2
     bcc:	2200      	movs	r2, #0
     bce:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     bd2:	4690      	mov	r8, r2
     bd4:	e7c7      	b.n	b66 <CONFIG_BT_RX_STACK_SIZE+0x2ce>
     bd6:	bb07      	cbnz	r7, c1a <CONFIG_BT_RX_STACK_SIZE+0x382>
     bd8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     bdc:	b1e9      	cbz	r1, c1a <CONFIG_BT_RX_STACK_SIZE+0x382>
     bde:	2100      	movs	r1, #0
     be0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     be4:	1e9b      	subs	r3, r3, #2
     be6:	e7be      	b.n	b66 <CONFIG_BT_RX_STACK_SIZE+0x2ce>
     be8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bec:	d120      	bne.n	c30 <CONFIG_BT_RX_STACK_SIZE+0x398>
     bee:	f640 110d 	movw	r1, #2317	; 0x90d
     bf2:	2070      	movs	r0, #112	; 0x70
     bf4:	f002 fe4e 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bf8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bfc:	d007      	beq.n	c0e <CONFIG_BT_RX_STACK_SIZE+0x376>
     bfe:	1a21      	subs	r1, r4, r0
     c00:	0209      	lsls	r1, r1, #8
     c02:	17ca      	asrs	r2, r1, #31
     c04:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     c08:	1209      	asrs	r1, r1, #8
     c0a:	2904      	cmp	r1, #4
     c0c:	dd03      	ble.n	c16 <CONFIG_BT_RX_STACK_SIZE+0x37e>
     c0e:	4604      	mov	r4, r0
     c10:	f001 ff56 	bl	2ac0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c14:	e00c      	b.n	c30 <CONFIG_BT_RX_STACK_SIZE+0x398>
     c16:	2900      	cmp	r1, #0
     c18:	dd0a      	ble.n	c30 <CONFIG_BT_RX_STACK_SIZE+0x398>
     c1a:	b01b      	add	sp, #108	; 0x6c
     c1c:	2000      	movs	r0, #0
     c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c22:	1e70      	subs	r0, r6, #1
     c24:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c28:	4620      	mov	r0, r4
     c2a:	f001 ff49 	bl	2ac0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c2e:	4657      	mov	r7, sl
     c30:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c34:	d028      	beq.n	c88 <CONFIG_BT_RX_STACK_SIZE+0x3f0>
     c36:	980f      	ldr	r0, [sp, #60]	; 0x3c
     c38:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     c3c:	1b00      	subs	r0, r0, r4
     c3e:	f08b 0301 	eor.w	r3, fp, #1
     c42:	4a74      	ldr	r2, [pc, #464]	; (e14 <CONFIG_BT_RX_STACK_SIZE+0x57c>)
     c44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c48:	ebac 0c04 	sub.w	ip, ip, r4
     c4c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     c50:	4283      	cmp	r3, r0
     c52:	bf98      	it	ls
     c54:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     c58:	d2df      	bcs.n	c1a <CONFIG_BT_RX_STACK_SIZE+0x382>
     c5a:	4562      	cmp	r2, ip
     c5c:	d3dd      	bcc.n	c1a <CONFIG_BT_RX_STACK_SIZE+0x382>
     c5e:	4620      	mov	r0, r4
     c60:	f00a ffc1 	bl	bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     c64:	4967      	ldr	r1, [pc, #412]	; (e04 <CONFIG_BT_RX_STACK_SIZE+0x56c>)
     c66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     c68:	1c4b      	adds	r3, r1, #1
     c6a:	1a16      	subs	r6, r2, r0
     c6c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     c70:	bf24      	itt	cs
     c72:	eba0 0c02 	subcs.w	ip, r0, r2
     c76:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     c7a:	d310      	bcc.n	c9e <CONFIG_BT_RX_STACK_SIZE+0x406>
     c7c:	42b1      	cmp	r1, r6
     c7e:	d208      	bcs.n	c92 <CONFIG_BT_RX_STACK_SIZE+0x3fa>
     c80:	1a08      	subs	r0, r1, r0
     c82:	4410      	add	r0, r2
     c84:	1c46      	adds	r6, r0, #1
     c86:	e00a      	b.n	c9e <CONFIG_BT_RX_STACK_SIZE+0x406>
     c88:	f640 212c 	movw	r1, #2604	; 0xa2c
     c8c:	2070      	movs	r0, #112	; 0x70
     c8e:	f002 fe01 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c92:	4561      	cmp	r1, ip
     c94:	d22c      	bcs.n	cf0 <CONFIG_BT_RX_STACK_SIZE+0x458>
     c96:	1a89      	subs	r1, r1, r2
     c98:	4408      	add	r0, r1
     c9a:	1c40      	adds	r0, r0, #1
     c9c:	4246      	negs	r6, r0
     c9e:	4857      	ldr	r0, [pc, #348]	; (dfc <CONFIG_BT_RX_STACK_SIZE+0x564>)
     ca0:	7f80      	ldrb	r0, [r0, #30]
     ca2:	b350      	cbz	r0, cfa <CONFIG_BT_RX_STACK_SIZE+0x462>
     ca4:	4628      	mov	r0, r5
     ca6:	4645      	mov	r5, r8
     ca8:	f04f 0b00 	mov.w	fp, #0
     cac:	46d8      	mov	r8, fp
     cae:	2801      	cmp	r0, #1
     cb0:	d005      	beq.n	cbe <CONFIG_BT_RX_STACK_SIZE+0x426>
     cb2:	2002      	movs	r0, #2
     cb4:	f002 f94c 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cb8:	2001      	movs	r0, #1
     cba:	f002 f949 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cbe:	45a9      	cmp	r9, r5
     cc0:	d22c      	bcs.n	d1c <CONFIG_BT_RX_STACK_SIZE+0x484>
     cc2:	eba6 0105 	sub.w	r1, r6, r5
     cc6:	f04f 0301 	mov.w	r3, #1
     cca:	f04f 0203 	mov.w	r2, #3
     cce:	f04f 0002 	mov.w	r0, #2
     cd2:	f002 f875 	bl	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cd6:	2800      	cmp	r0, #0
     cd8:	bf08      	it	eq
     cda:	f04f 0801 	moveq.w	r8, #1
     cde:	f1b9 0f00 	cmp.w	r9, #0
     ce2:	d035      	beq.n	d50 <CONFIG_BT_RX_STACK_SIZE+0x4b8>
     ce4:	2301      	movs	r3, #1
     ce6:	eba6 0109 	sub.w	r1, r6, r9
     cea:	2203      	movs	r2, #3
     cec:	4618      	mov	r0, r3
     cee:	e023      	b.n	d38 <CONFIG_BT_RX_STACK_SIZE+0x4a0>
     cf0:	f640 310c 	movw	r1, #2828	; 0xb0c
     cf4:	2070      	movs	r0, #112	; 0x70
     cf6:	f002 fdcd 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cfa:	45c1      	cmp	r9, r8
     cfc:	bf34      	ite	cc
     cfe:	4640      	movcc	r0, r8
     d00:	4648      	movcs	r0, r9
     d02:	f1bb 0f00 	cmp.w	fp, #0
     d06:	bf14      	ite	ne
     d08:	2100      	movne	r1, #0
     d0a:	211e      	moveq	r1, #30
     d0c:	4408      	add	r0, r1
     d0e:	42b0      	cmp	r0, r6
     d10:	dbc8      	blt.n	ca4 <CONFIG_BT_RX_STACK_SIZE+0x40c>
     d12:	f640 213f 	movw	r1, #2623	; 0xa3f
     d16:	2070      	movs	r0, #112	; 0x70
     d18:	f002 fdbc 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d1c:	d910      	bls.n	d40 <CONFIG_BT_RX_STACK_SIZE+0x4a8>
     d1e:	2301      	movs	r3, #1
     d20:	eba6 0109 	sub.w	r1, r6, r9
     d24:	2203      	movs	r2, #3
     d26:	4618      	mov	r0, r3
     d28:	f002 f84a 	bl	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d2c:	b328      	cbz	r0, d7a <CONFIG_BT_RX_STACK_SIZE+0x4e2>
     d2e:	b17d      	cbz	r5, d50 <CONFIG_BT_RX_STACK_SIZE+0x4b8>
     d30:	1b71      	subs	r1, r6, r5
     d32:	2301      	movs	r3, #1
     d34:	2203      	movs	r2, #3
     d36:	2002      	movs	r0, #2
     d38:	f002 f842 	bl	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d3c:	b1e8      	cbz	r0, d7a <CONFIG_BT_RX_STACK_SIZE+0x4e2>
     d3e:	e007      	b.n	d50 <CONFIG_BT_RX_STACK_SIZE+0x4b8>
     d40:	ea55 0009 	orrs.w	r0, r5, r9
     d44:	d004      	beq.n	d50 <CONFIG_BT_RX_STACK_SIZE+0x4b8>
     d46:	f640 1177 	movw	r1, #2423	; 0x977
     d4a:	2070      	movs	r0, #112	; 0x70
     d4c:	f002 fda2 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d50:	2301      	movs	r3, #1
     d52:	2203      	movs	r2, #3
     d54:	4631      	mov	r1, r6
     d56:	2000      	movs	r0, #0
     d58:	f002 f832 	bl	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d5c:	b168      	cbz	r0, d7a <CONFIG_BT_RX_STACK_SIZE+0x4e2>
     d5e:	2501      	movs	r5, #1
     d60:	f1b8 0f00 	cmp.w	r8, #0
     d64:	d003      	beq.n	d6e <CONFIG_BT_RX_STACK_SIZE+0x4d6>
     d66:	9814      	ldr	r0, [sp, #80]	; 0x50
     d68:	900f      	str	r0, [sp, #60]	; 0x3c
     d6a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     d6e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; e18 <CONFIG_BT_RX_STACK_SIZE+0x580>
     d72:	f1ba 0f00 	cmp.w	sl, #0
     d76:	d10e      	bne.n	d96 <CONFIG_BT_RX_STACK_SIZE+0x4fe>
     d78:	e009      	b.n	d8e <CONFIG_BT_RX_STACK_SIZE+0x4f6>
     d7a:	2002      	movs	r0, #2
     d7c:	f002 f8e8 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d80:	2001      	movs	r0, #1
     d82:	f002 f8e5 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d86:	b01b      	add	sp, #108	; 0x6c
     d88:	2000      	movs	r0, #0
     d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d8e:	481b      	ldr	r0, [pc, #108]	; (dfc <CONFIG_BT_RX_STACK_SIZE+0x564>)
     d90:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     d94:	b100      	cbz	r0, d98 <CONFIG_BT_RX_STACK_SIZE+0x500>
     d96:	b34f      	cbz	r7, dec <CONFIG_BT_RX_STACK_SIZE+0x554>
     d98:	f8df a060 	ldr.w	sl, [pc, #96]	; dfc <CONFIG_BT_RX_STACK_SIZE+0x564>
     d9c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     da0:	b118      	cbz	r0, daa <CONFIG_BT_RX_STACK_SIZE+0x512>
     da2:	f002 fbbd 	bl	3520 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     da6:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     daa:	b307      	cbz	r7, dee <CONFIG_BT_RX_STACK_SIZE+0x556>
     dac:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     db0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     db4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     db8:	f8c8 0000 	str.w	r0, [r8]
     dbc:	2300      	movs	r3, #0
     dbe:	2203      	movs	r2, #3
     dc0:	2005      	movs	r0, #5
     dc2:	f001 fffd 	bl	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     dc6:	b368      	cbz	r0, e24 <CONFIG_BT_RX_STACK_SIZE+0x58c>
     dc8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     dcc:	2005      	movs	r0, #5
     dce:	f002 f99f 	bl	3110 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     dd2:	4912      	ldr	r1, [pc, #72]	; (e1c <CONFIG_BT_RX_STACK_SIZE+0x584>)
     dd4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     dd8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     ddc:	4910      	ldr	r1, [pc, #64]	; (e20 <CONFIG_BT_RX_STACK_SIZE+0x588>)
     dde:	12e0      	asrs	r0, r4, #11
     de0:	6008      	str	r0, [r1, #0]
     de2:	4c06      	ldr	r4, [pc, #24]	; (dfc <CONFIG_BT_RX_STACK_SIZE+0x564>)
     de4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     de8:	b3f0      	cbz	r0, e68 <CONFIG_BT_RX_STACK_SIZE+0x5d0>
     dea:	e05b      	b.n	ea4 <CONFIG_BT_RX_STACK_SIZE+0x60c>
     dec:	e01b      	b.n	e26 <CONFIG_BT_RX_STACK_SIZE+0x58e>
     dee:	e01f      	b.n	e30 <CONFIG_BT_RX_STACK_SIZE+0x598>
     df0:	40000508 	.word	0x40000508
     df4:	20000014 	.word	0x20000014
     df8:	20000b24 	.word	0x20000b24
     dfc:	20000ea4 	.word	0x20000ea4
     e00:	20000016 	.word	0x20000016
     e04:	1e847fff 	.word	0x1e847fff
     e08:	07a12000 	.word	0x07a12000
     e0c:	f85ee000 	.word	0xf85ee000
     e10:	1e848000 	.word	0x1e848000
     e14:	003fffff 	.word	0x003fffff
     e18:	4001f508 	.word	0x4001f508
     e1c:	4001f098 	.word	0x4001f098
     e20:	4001f504 	.word	0x4001f504
     e24:	e035      	b.n	e92 <CONFIG_BT_RX_STACK_SIZE+0x5fa>
     e26:	f8df a0b8 	ldr.w	sl, [pc, #184]	; ee0 <CONFIG_BT_RX_STACK_SIZE+0x648>
     e2a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e2e:	b358      	cbz	r0, e88 <CONFIG_BT_RX_STACK_SIZE+0x5f0>
     e30:	4c2b      	ldr	r4, [pc, #172]	; (ee0 <CONFIG_BT_RX_STACK_SIZE+0x648>)
     e32:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e36:	b150      	cbz	r0, e4e <CONFIG_BT_RX_STACK_SIZE+0x5b6>
     e38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e3c:	f8c8 0000 	str.w	r0, [r8]
     e40:	2005      	movs	r0, #5
     e42:	f002 f885 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     e46:	f002 fbd3 	bl	35f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     e4a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     e4e:	ac0c      	add	r4, sp, #48	; 0x30
     e50:	4824      	ldr	r0, [pc, #144]	; (ee4 <CONFIG_BT_RX_STACK_SIZE+0x64c>)
     e52:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e56:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     e5a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     e5e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     e62:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     e66:	e000      	b.n	e6a <CONFIG_BT_RX_STACK_SIZE+0x5d2>
     e68:	e018      	b.n	e9c <CONFIG_BT_RX_STACK_SIZE+0x604>
     e6a:	ac10      	add	r4, sp, #64	; 0x40
     e6c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e70:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     e74:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     e78:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     e7c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     e80:	b01b      	add	sp, #108	; 0x6c
     e82:	2001      	movs	r0, #1
     e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e88:	f002 fb66 	bl	3558 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e8c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     e90:	e78b      	b.n	daa <CONFIG_BT_RX_STACK_SIZE+0x512>
     e92:	f240 313e 	movw	r1, #830	; 0x33e
     e96:	2070      	movs	r0, #112	; 0x70
     e98:	f002 fcfc 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e9c:	f002 fb9a 	bl	35d4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     ea0:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     ea4:	eba6 0009 	sub.w	r0, r6, r9
     ea8:	f1a0 0119 	sub.w	r1, r0, #25
     eac:	2900      	cmp	r1, #0
     eae:	dc04      	bgt.n	eba <CONFIG_BT_RX_STACK_SIZE+0x622>
     eb0:	f640 2169 	movw	r1, #2665	; 0xa69
     eb4:	2070      	movs	r0, #112	; 0x70
     eb6:	f002 fced 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eba:	2203      	movs	r2, #3
     ebc:	2301      	movs	r3, #1
     ebe:	4610      	mov	r0, r2
     ec0:	f001 ff7e 	bl	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ec4:	b138      	cbz	r0, ed6 <CONFIG_BT_RX_STACK_SIZE+0x63e>
     ec6:	4808      	ldr	r0, [pc, #32]	; (ee8 <CONFIG_BT_RX_STACK_SIZE+0x650>)
     ec8:	6880      	ldr	r0, [r0, #8]
     eca:	f8c0 b000 	str.w	fp, [r0]
     ece:	4807      	ldr	r0, [pc, #28]	; (eec <CONFIG_BT_RX_STACK_SIZE+0x654>)
     ed0:	f8c0 b000 	str.w	fp, [r0]
     ed4:	e7bb      	b.n	e4e <CONFIG_BT_RX_STACK_SIZE+0x5b6>
     ed6:	f640 2174 	movw	r1, #2676	; 0xa74
     eda:	2070      	movs	r0, #112	; 0x70
     edc:	f002 fcda 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ee0:	20000ea4 	.word	0x20000ea4
     ee4:	20000b24 	.word	0x20000b24
     ee8:	20000014 	.word	0x20000014
     eec:	40000508 	.word	0x40000508
     ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ef4:	4606      	mov	r6, r0
     ef6:	b083      	sub	sp, #12
     ef8:	7808      	ldrb	r0, [r1, #0]
     efa:	7390      	strb	r0, [r2, #14]
     efc:	7acf      	ldrb	r7, [r1, #11]
     efe:	7357      	strb	r7, [r2, #13]
     f00:	7a88      	ldrb	r0, [r1, #10]
     f02:	7310      	strb	r0, [r2, #12]
     f04:	8908      	ldrh	r0, [r1, #8]
     f06:	4614      	mov	r4, r2
     f08:	8150      	strh	r0, [r2, #10]
     f0a:	460d      	mov	r5, r1
     f0c:	780a      	ldrb	r2, [r1, #0]
     f0e:	495f      	ldr	r1, [pc, #380]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
     f10:	4699      	mov	r9, r3
     f12:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     f16:	424b      	negs	r3, r1
     f18:	f1ac 0801 	sub.w	r8, ip, #1
     f1c:	b15a      	cbz	r2, f36 <CONFIG_BT_RX_STACK_SIZE+0x69e>
     f1e:	43c0      	mvns	r0, r0
     f20:	f8d5 8004 	ldr.w	r8, [r5, #4]
     f24:	f104 0208 	add.w	r2, r4, #8
     f28:	4288      	cmp	r0, r1
     f2a:	dd3d      	ble.n	fa8 <CONFIG_BT_RX_STACK_SIZE+0x710>
     f2c:	f240 610a 	movw	r1, #1546	; 0x60a
     f30:	2070      	movs	r0, #112	; 0x70
     f32:	f002 fcaf 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f36:	68ee      	ldr	r6, [r5, #12]
     f38:	686d      	ldr	r5, [r5, #4]
     f3a:	ea6f 0900 	mvn.w	r9, r0
     f3e:	f104 0208 	add.w	r2, r4, #8
     f42:	eb06 0009 	add.w	r0, r6, r9
     f46:	4546      	cmp	r6, r8
     f48:	d904      	bls.n	f54 <CONFIG_BT_RX_STACK_SIZE+0x6bc>
     f4a:	f240 6109 	movw	r1, #1545	; 0x609
     f4e:	2070      	movs	r0, #112	; 0x70
     f50:	f002 fca0 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f54:	4589      	cmp	r9, r1
     f56:	dce9      	bgt.n	f2c <CONFIG_BT_RX_STACK_SIZE+0x694>
     f58:	4599      	cmp	r9, r3
     f5a:	db28      	blt.n	fae <CONFIG_BT_RX_STACK_SIZE+0x716>
     f5c:	4584      	cmp	ip, r0
     f5e:	bfdc      	itt	le
     f60:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     f64:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     f68:	dd05      	ble.n	f76 <CONFIG_BT_RX_STACK_SIZE+0x6de>
     f6a:	2800      	cmp	r0, #0
     f6c:	bfbc      	itt	lt
     f6e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     f72:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     f76:	4621      	mov	r1, r4
     f78:	f001 fc46 	bl	2808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f7c:	6820      	ldr	r0, [r4, #0]
     f7e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f82:	1970      	adds	r0, r6, r5
     f84:	1c40      	adds	r0, r0, #1
     f86:	6021      	str	r1, [r4, #0]
     f88:	2f00      	cmp	r7, #0
     f8a:	bf08      	it	eq
     f8c:	307a      	addeq	r0, #122	; 0x7a
     f8e:	d003      	beq.n	f98 <CONFIG_BT_RX_STACK_SIZE+0x700>
     f90:	2f01      	cmp	r7, #1
     f92:	bf08      	it	eq
     f94:	3044      	addeq	r0, #68	; 0x44
     f96:	d12d      	bne.n	ff4 <CONFIG_BT_RX_STACK_SIZE+0x75c>
     f98:	f001 fc1a 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fa0:	6060      	str	r0, [r4, #4]
     fa2:	b003      	add	sp, #12
     fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     fa8:	4601      	mov	r1, r0
     faa:	4298      	cmp	r0, r3
     fac:	da04      	bge.n	fb8 <CONFIG_BT_RX_STACK_SIZE+0x720>
     fae:	f240 610b 	movw	r1, #1547	; 0x60b
     fb2:	2070      	movs	r0, #112	; 0x70
     fb4:	f002 fc6e 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fb8:	4584      	cmp	ip, r0
     fba:	bfdc      	itt	le
     fbc:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     fc0:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     fc4:	dd05      	ble.n	fd2 <CONFIG_BT_RX_STACK_SIZE+0x73a>
     fc6:	2800      	cmp	r0, #0
     fc8:	bfbc      	itt	lt
     fca:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     fce:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     fd2:	4621      	mov	r1, r4
     fd4:	f001 fc18 	bl	2808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fd8:	6820      	ldr	r0, [r4, #0]
     fda:	2f00      	cmp	r7, #0
     fdc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fe0:	f108 0001 	add.w	r0, r8, #1
     fe4:	6021      	str	r1, [r4, #0]
     fe6:	bf08      	it	eq
     fe8:	307a      	addeq	r0, #122	; 0x7a
     fea:	d008      	beq.n	ffe <CONFIG_BT_RX_STACK_SIZE+0x766>
     fec:	2f01      	cmp	r7, #1
     fee:	bf08      	it	eq
     ff0:	3044      	addeq	r0, #68	; 0x44
     ff2:	d004      	beq.n	ffe <CONFIG_BT_RX_STACK_SIZE+0x766>
     ff4:	f240 61b1 	movw	r1, #1713	; 0x6b1
     ff8:	2070      	movs	r0, #112	; 0x70
     ffa:	f002 fc4b 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ffe:	f001 fbe7 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1002:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1006:	6061      	str	r1, [r4, #4]
    1008:	8960      	ldrh	r0, [r4, #10]
    100a:	aa01      	add	r2, sp, #4
    100c:	4669      	mov	r1, sp
    100e:	f001 fbfb 	bl	2808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1012:	481f      	ldr	r0, [pc, #124]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1014:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1018:	2920      	cmp	r1, #32
    101a:	d023      	beq.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    101c:	6900      	ldr	r0, [r0, #16]
    101e:	1d40      	adds	r0, r0, #5
    1020:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1024:	e9d4 2100 	ldrd	r2, r1, [r4]
    1028:	1a89      	subs	r1, r1, r2
    102a:	6020      	str	r0, [r4, #0]
    102c:	4408      	add	r0, r1
    102e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1032:	6060      	str	r0, [r4, #4]
    1034:	464b      	mov	r3, r9
    1036:	4632      	mov	r2, r6
    1038:	4621      	mov	r1, r4
    103a:	68e8      	ldr	r0, [r5, #12]
    103c:	f7ff facc 	bl	5d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1040:	2800      	cmp	r0, #0
    1042:	bf1c      	itt	ne
    1044:	b003      	addne	sp, #12
    1046:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    104a:	e9d4 1000 	ldrd	r1, r0, [r4]
    104e:	1a40      	subs	r0, r0, r1
    1050:	4430      	add	r0, r6
    1052:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1056:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    105a:	e9c4 1000 	strd	r1, r0, [r4]
    105e:	b003      	add	sp, #12
    1060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1064:	8960      	ldrh	r0, [r4, #10]
    1066:	f106 0709 	add.w	r7, r6, #9
    106a:	b120      	cbz	r0, 1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    106c:	f002 fbae 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1070:	2800      	cmp	r0, #0
    1072:	bf08      	it	eq
    1074:	3732      	addeq	r7, #50	; 0x32
    1076:	4807      	ldr	r0, [pc, #28]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    1078:	7841      	ldrb	r1, [r0, #1]
    107a:	9800      	ldr	r0, [sp, #0]
    107c:	4281      	cmp	r1, r0
    107e:	bf84      	itt	hi
    1080:	1a08      	subhi	r0, r1, r0
    1082:	4407      	addhi	r7, r0
    1084:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1088:	e7cc      	b.n	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    108a:	0000      	.short	0x0000
    108c:	07a12000 	.word	0x07a12000
    1090:	20000ea4 	.word	0x20000ea4
    1094:	20000016 	.word	0x20000016
    1098:	b510      	push	{r4, lr}
    109a:	4c15      	ldr	r4, [pc, #84]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    109c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    10a0:	2820      	cmp	r0, #32
    10a2:	bf18      	it	ne
    10a4:	bd10      	popne	{r4, pc}
    10a6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    10aa:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    10ae:	f890 1020 	ldrb.w	r1, [r0, #32]
    10b2:	2920      	cmp	r1, #32
    10b4:	d017      	beq.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
    10b6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    10ba:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    10be:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    10c2:	785b      	ldrb	r3, [r3, #1]
    10c4:	f880 3020 	strb.w	r3, [r0, #32]
    10c8:	2301      	movs	r3, #1
    10ca:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    10ce:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    10d2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    10d6:	2002      	movs	r0, #2
    10d8:	f000 f8b0 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    10dc:	2000      	movs	r0, #0
    10de:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    10e2:	77a0      	strb	r0, [r4, #30]
    10e4:	bd10      	pop	{r4, pc}
    10e6:	f240 318b 	movw	r1, #907	; 0x38b
    10ea:	2070      	movs	r0, #112	; 0x70
    10ec:	f002 fbd2 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10f0:	20000ea4 	.word	0x20000ea4
    10f4:	20000e24 	.word	0x20000e24
    10f8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    10fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    1100:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1104:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1108:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    110c:	2c20      	cmp	r4, #32
    110e:	bf08      	it	eq
    1110:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1114:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    1118:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
    111c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1120:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1124:	2607      	movs	r6, #7
    1126:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    112a:	2801      	cmp	r0, #1
    112c:	d00e      	beq.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    112e:	2804      	cmp	r0, #4
    1130:	bf08      	it	eq
    1132:	2602      	moveq	r6, #2
    1134:	d00a      	beq.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    1136:	2805      	cmp	r0, #5
    1138:	bf0c      	ite	eq
    113a:	2603      	moveq	r6, #3
    113c:	2806      	cmpne	r0, #6
    113e:	d005      	beq.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    1140:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1144:	f04f 0070 	mov.w	r0, #112	; 0x70
    1148:	f002 fba4 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    114c:	f1bb 0f00 	cmp.w	fp, #0
    1150:	bf18      	it	ne
    1152:	f3af 8000 	nopne.w
    1156:	f3ef 8010 	mrs	r0, PRIMASK
    115a:	b672      	cpsid	i
    115c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1160:	784a      	ldrb	r2, [r1, #1]
    1162:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1166:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    116a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    116e:	42a2      	cmp	r2, r4
    1170:	bf04      	itt	eq
    1172:	2220      	moveq	r2, #32
    1174:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1178:	b1b8      	cbz	r0, 11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
    117a:	462a      	mov	r2, r5
    117c:	4621      	mov	r1, r4
    117e:	2001      	movs	r0, #1
    1180:	f000 f85c 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1184:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1188:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    118c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1190:	6840      	ldr	r0, [r0, #4]
    1192:	4631      	mov	r1, r6
    1194:	4790      	blx	r2
    1196:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    119a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    119e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    11a2:	2c20      	cmp	r4, #32
    11a4:	d1bc      	bne.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    11a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    11aa:	4806      	ldr	r0, [pc, #24]	; (11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>)
    11ac:	2800      	cmp	r0, #0
    11ae:	bf18      	it	ne
    11b0:	f3af 8000 	nopne.w
    11b4:	b662      	cpsie	i
    11b6:	e7e0      	b.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    11b8:	20000ea4 	.word	0x20000ea4
    11bc:	00000000 	.word	0x00000000
    11c0:	20000e24 	.word	0x20000e24
    11c4:	00000000 	.word	0x00000000
    11c8:	b510      	push	{r4, lr}
    11ca:	4604      	mov	r4, r0
    11cc:	6800      	ldr	r0, [r0, #0]
    11ce:	f00a fd0a 	bl	bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    11d2:	4602      	mov	r2, r0
    11d4:	8960      	ldrh	r0, [r4, #10]
    11d6:	7a21      	ldrb	r1, [r4, #8]
    11d8:	4b14      	ldr	r3, [pc, #80]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
    11da:	4408      	add	r0, r1
    11dc:	1c41      	adds	r1, r0, #1
    11de:	1850      	adds	r0, r2, r1
    11e0:	429a      	cmp	r2, r3
    11e2:	d904      	bls.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    11e4:	f240 6109 	movw	r1, #1545	; 0x609
    11e8:	2070      	movs	r0, #112	; 0x70
    11ea:	f002 fb53 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11ee:	4a10      	ldr	r2, [pc, #64]	; (1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
    11f0:	4291      	cmp	r1, r2
    11f2:	dd04      	ble.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
    11f4:	f240 610a 	movw	r1, #1546	; 0x60a
    11f8:	2070      	movs	r0, #112	; 0x70
    11fa:	f002 fb4b 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11fe:	4a0d      	ldr	r2, [pc, #52]	; (1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>)
    1200:	4291      	cmp	r1, r2
    1202:	da04      	bge.n	120e <CONFIG_FPROTECT_BLOCK_SIZE+0x20e>
    1204:	f240 610b 	movw	r1, #1547	; 0x60b
    1208:	2070      	movs	r0, #112	; 0x70
    120a:	f002 fb43 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    120e:	490a      	ldr	r1, [pc, #40]	; (1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>)
    1210:	4281      	cmp	r1, r0
    1212:	bfde      	ittt	le
    1214:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1218:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    121c:	bd10      	pople	{r4, pc}
    121e:	2800      	cmp	r0, #0
    1220:	bfbc      	itt	lt
    1222:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1226:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    122a:	bd10      	pop	{r4, pc}
    122c:	1e847fff 	.word	0x1e847fff
    1230:	07a12000 	.word	0x07a12000
    1234:	f85ee000 	.word	0xf85ee000
    1238:	1e848000 	.word	0x1e848000
    123c:	f8df c054 	ldr.w	ip, [pc, #84]	; 1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1240:	b510      	push	{r4, lr}
    1242:	2300      	movs	r3, #0
    1244:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1248:	2807      	cmp	r0, #7
    124a:	d21e      	bcs.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
    124c:	e8df f000 	tbb	[pc, r0]
    1250:	05050505 	.word	0x05050505
    1254:	00040404 	.word	0x00040404
    1258:	2301      	movs	r3, #1
    125a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    125e:	2b00      	cmp	r3, #0
    1260:	bf08      	it	eq
    1262:	bd10      	popeq	{r4, pc}
    1264:	480c      	ldr	r0, [pc, #48]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    1266:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    126a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    126e:	2820      	cmp	r0, #32
    1270:	bf0e      	itee	eq
    1272:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1276:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    127a:	7041      	strbne	r1, [r0, #1]
    127c:	2020      	movs	r0, #32
    127e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1282:	7058      	strb	r0, [r3, #1]
    1284:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1288:	bd10      	pop	{r4, pc}
    128a:	f44f 7115 	mov.w	r1, #596	; 0x254
    128e:	2070      	movs	r0, #112	; 0x70
    1290:	f002 fb00 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1294:	20000e24 	.word	0x20000e24
    1298:	20000ea4 	.word	0x20000ea4
    129c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12a0:	b083      	sub	sp, #12
    12a2:	485c      	ldr	r0, [pc, #368]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    12a4:	9904      	ldr	r1, [sp, #16]
    12a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    12aa:	9001      	str	r0, [sp, #4]
    12ac:	f890 4020 	ldrb.w	r4, [r0, #32]
    12b0:	9803      	ldr	r0, [sp, #12]
    12b2:	4625      	mov	r5, r4
    12b4:	2801      	cmp	r0, #1
    12b6:	bf18      	it	ne
    12b8:	2802      	cmpne	r0, #2
    12ba:	d005      	beq.n	12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>
    12bc:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    12c0:	f04f 0070 	mov.w	r0, #112	; 0x70
    12c4:	f002 fae6 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12c8:	2700      	movs	r7, #0
    12ca:	2d20      	cmp	r5, #32
    12cc:	d04a      	beq.n	1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>
    12ce:	4851      	ldr	r0, [pc, #324]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    12d0:	9100      	str	r1, [sp, #0]
    12d2:	2600      	movs	r6, #0
    12d4:	7f80      	ldrb	r0, [r0, #30]
    12d6:	2800      	cmp	r0, #0
    12d8:	bf08      	it	eq
    12da:	2602      	moveq	r6, #2
    12dc:	f001 fbea 	bl	2ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    12e0:	f8df a138 	ldr.w	sl, [pc, #312]	; 141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
    12e4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    12e8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    12ec:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>
    12f0:	688a      	ldr	r2, [r1, #8]
    12f2:	68c9      	ldr	r1, [r1, #12]
    12f4:	1a12      	subs	r2, r2, r0
    12f6:	1a09      	subs	r1, r1, r0
    12f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    12fc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1300:	4296      	cmp	r6, r2
    1302:	bf98      	it	ls
    1304:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    1308:	d201      	bcs.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    130a:	4589      	cmp	r9, r1
    130c:	d228      	bcs.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
    130e:	4a44      	ldr	r2, [pc, #272]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    1310:	9900      	ldr	r1, [sp, #0]
    1312:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1316:	4622      	mov	r2, r4
    1318:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    131c:	784c      	ldrb	r4, [r1, #1]
    131e:	2c20      	cmp	r4, #32
    1320:	d016      	beq.n	1350 <CONFIG_FPROTECT_BLOCK_SIZE+0x350>
    1322:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1326:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    132a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    132e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1332:	eba8 0800 	sub.w	r8, r8, r0
    1336:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    133a:	ebac 0100 	sub.w	r1, ip, r0
    133e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1342:	4546      	cmp	r6, r8
    1344:	bf98      	it	ls
    1346:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    134a:	d2e4      	bcs.n	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
    134c:	4589      	cmp	r9, r1
    134e:	d3e2      	bcc.n	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
    1350:	2a20      	cmp	r2, #32
    1352:	d005      	beq.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
    1354:	2120      	movs	r1, #32
    1356:	2004      	movs	r0, #4
    1358:	9b00      	ldr	r3, [sp, #0]
    135a:	f7ff f901 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    135e:	4604      	mov	r4, r0
    1360:	42ac      	cmp	r4, r5
    1362:	d115      	bne.n	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
    1364:	482f      	ldr	r0, [pc, #188]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
    1366:	2800      	cmp	r0, #0
    1368:	bf18      	it	ne
    136a:	f3af 8000 	nopne.w
    136e:	f001 fba1 	bl	2ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1372:	4c28      	ldr	r4, [pc, #160]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    1374:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1378:	2920      	cmp	r1, #32
    137a:	d00d      	beq.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
    137c:	68e1      	ldr	r1, [r4, #12]
    137e:	1c82      	adds	r2, r0, #2
    1380:	1a51      	subs	r1, r2, r1
    1382:	0209      	lsls	r1, r1, #8
    1384:	17ca      	asrs	r2, r1, #31
    1386:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    138a:	1209      	asrs	r1, r1, #8
    138c:	2900      	cmp	r1, #0
    138e:	dd03      	ble.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
    1390:	b005      	add	sp, #20
    1392:	2000      	movs	r0, #0
    1394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1398:	2d20      	cmp	r5, #32
    139a:	d00d      	beq.n	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    139c:	462a      	mov	r2, r5
    139e:	9903      	ldr	r1, [sp, #12]
    13a0:	f7ff fb16 	bl	9d0 <CONFIG_BT_RX_STACK_SIZE+0x138>
    13a4:	b358      	cbz	r0, 13fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76>
    13a6:	9801      	ldr	r0, [sp, #4]
    13a8:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    13ac:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    13b0:	b005      	add	sp, #20
    13b2:	2001      	movs	r0, #1
    13b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13b8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    13bc:	b118      	cbz	r0, 13c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e>
    13be:	f002 f8af 	bl	3520 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    13c2:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    13c6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    13ca:	b150      	cbz	r0, 13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
    13cc:	4916      	ldr	r1, [pc, #88]	; (1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>)
    13ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    13d2:	6008      	str	r0, [r1, #0]
    13d4:	2005      	movs	r0, #5
    13d6:	f001 fdbb 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13da:	f002 f909 	bl	35f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    13de:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    13e2:	2004      	movs	r0, #4
    13e4:	f001 fdb4 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13e8:	f001 fe1a 	bl	3020 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    13ec:	2020      	movs	r0, #32
    13ee:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    13f2:	480e      	ldr	r0, [pc, #56]	; (142c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4>)
    13f4:	6880      	ldr	r0, [r0, #8]
    13f6:	6007      	str	r7, [r0, #0]
    13f8:	480d      	ldr	r0, [pc, #52]	; (1430 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8>)
    13fa:	6007      	str	r7, [r0, #0]
    13fc:	e7d8      	b.n	13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
    13fe:	462a      	mov	r2, r5
    1400:	2120      	movs	r1, #32
    1402:	2004      	movs	r0, #4
    1404:	9b04      	ldr	r3, [sp, #16]
    1406:	f7ff f8ab 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    140a:	b005      	add	sp, #20
    140c:	2000      	movs	r0, #0
    140e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1412:	0000      	.short	0x0000
    1414:	20000ea4 	.word	0x20000ea4
    1418:	003fffff 	.word	0x003fffff
    141c:	20000b24 	.word	0x20000b24
    1420:	20000e24 	.word	0x20000e24
    1424:	00000000 	.word	0x00000000
    1428:	4001f508 	.word	0x4001f508
    142c:	20000014 	.word	0x20000014
    1430:	40000508 	.word	0x40000508

00001434 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1434:	4906      	ldr	r1, [pc, #24]	; (1450 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1436:	b510      	push	{r4, lr}
    1438:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    143c:	2a20      	cmp	r2, #32
    143e:	bf1c      	itt	ne
    1440:	7788      	strbne	r0, [r1, #30]
    1442:	bd10      	popne	{r4, pc}
    1444:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1448:	2070      	movs	r0, #112	; 0x70
    144a:	f002 fa23 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    144e:	0000      	.short	0x0000
    1450:	20000ea4 	.word	0x20000ea4

00001454 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1458:	4e5b      	ldr	r6, [pc, #364]	; (15c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    145a:	4681      	mov	r9, r0
    145c:	b085      	sub	sp, #20
    145e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1462:	468a      	mov	sl, r1
    1464:	2820      	cmp	r0, #32
    1466:	d04d      	beq.n	1504 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    1468:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    146c:	f106 040c 	add.w	r4, r6, #12
    1470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1474:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1478:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    147c:	2020      	movs	r0, #32
    147e:	f88d 0000 	strb.w	r0, [sp]
    1482:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1486:	aa03      	add	r2, sp, #12
    1488:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    148c:	a901      	add	r1, sp, #4
    148e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1492:	6930      	ldr	r0, [r6, #16]
    1494:	9002      	str	r0, [sp, #8]
    1496:	6830      	ldr	r0, [r6, #0]
    1498:	4448      	add	r0, r9
    149a:	f001 f9b5 	bl	2808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    149e:	68f8      	ldr	r0, [r7, #12]
    14a0:	9901      	ldr	r1, [sp, #4]
    14a2:	4a4a      	ldr	r2, [pc, #296]	; (15cc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    14a4:	4408      	add	r0, r1
    14a6:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    14aa:	4291      	cmp	r1, r2
    14ac:	d82f      	bhi.n	150e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14ae:	68b9      	ldr	r1, [r7, #8]
    14b0:	1a41      	subs	r1, r0, r1
    14b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    14b6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    14ba:	d228      	bcs.n	150e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14c0:	6060      	str	r0, [r4, #4]
    14c2:	4630      	mov	r0, r6
    14c4:	f884 a00c 	strb.w	sl, [r4, #12]
    14c8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    14cc:	46ea      	mov	sl, sp
    14ce:	2d20      	cmp	r5, #32
    14d0:	bf1c      	itt	ne
    14d2:	493f      	ldrne	r1, [pc, #252]	; (15d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    14d4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    14d8:	d03c      	beq.n	1554 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14da:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    14de:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    14e2:	6860      	ldr	r0, [r4, #4]
    14e4:	68ba      	ldr	r2, [r7, #8]
    14e6:	4621      	mov	r1, r4
    14e8:	1a10      	subs	r0, r2, r0
    14ea:	0200      	lsls	r0, r0, #8
    14ec:	17c2      	asrs	r2, r0, #31
    14ee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    14f2:	f107 0608 	add.w	r6, r7, #8
    14f6:	1200      	asrs	r0, r0, #8
    14f8:	d41b      	bmi.n	1532 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    14fa:	8970      	ldrh	r0, [r6, #10]
    14fc:	b350      	cbz	r0, 1554 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14fe:	8948      	ldrh	r0, [r1, #10]
    1500:	b148      	cbz	r0, 1516 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    1502:	e027      	b.n	1554 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1504:	f640 317b 	movw	r1, #2939	; 0xb7b
    1508:	2070      	movs	r0, #112	; 0x70
    150a:	f002 f9c3 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    150e:	b005      	add	sp, #20
    1510:	2001      	movs	r0, #1
    1512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1516:	4620      	mov	r0, r4
    1518:	f7ff fe56 	bl	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    151c:	f001 f958 	bl	27d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1520:	6831      	ldr	r1, [r6, #0]
    1522:	1a08      	subs	r0, r1, r0
    1524:	0200      	lsls	r0, r0, #8
    1526:	17c1      	asrs	r1, r0, #31
    1528:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    152c:	1200      	asrs	r0, r0, #8
    152e:	2833      	cmp	r0, #51	; 0x33
    1530:	da10      	bge.n	1554 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1532:	f88a 5000 	strb.w	r5, [sl]
    1536:	7d39      	ldrb	r1, [r7, #20]
    1538:	7b20      	ldrb	r0, [r4, #12]
    153a:	4281      	cmp	r1, r0
    153c:	d805      	bhi.n	154a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    153e:	9802      	ldr	r0, [sp, #8]
    1540:	6060      	str	r0, [r4, #4]
    1542:	b005      	add	sp, #20
    1544:	2002      	movs	r0, #2
    1546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    154a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    154e:	7845      	ldrb	r5, [r0, #1]
    1550:	2d20      	cmp	r5, #32
    1552:	d1c2      	bne.n	14da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1554:	2005      	movs	r0, #5
    1556:	f001 fcfb 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    155a:	4c1b      	ldr	r4, [pc, #108]	; (15c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    155c:	f04f 30ff 	mov.w	r0, #4294967295
    1560:	60a0      	str	r0, [r4, #8]
    1562:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1566:	f89d 2000 	ldrb.w	r2, [sp]
    156a:	2120      	movs	r1, #32
    156c:	2a20      	cmp	r2, #32
    156e:	bf13      	iteet	ne
    1570:	2005      	movne	r0, #5
    1572:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1576:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    157a:	f7fe fff1 	blne	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    157e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1582:	4913      	ldr	r1, [pc, #76]	; (15d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1584:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1588:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    158c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1590:	7048      	strb	r0, [r1, #1]
    1592:	6820      	ldr	r0, [r4, #0]
    1594:	4448      	add	r0, r9
    1596:	6020      	str	r0, [r4, #0]
    1598:	2001      	movs	r0, #1
    159a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    159e:	7e60      	ldrb	r0, [r4, #25]
    15a0:	2801      	cmp	r0, #1
    15a2:	d105      	bne.n	15b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    15a4:	6920      	ldr	r0, [r4, #16]
    15a6:	1e40      	subs	r0, r0, #1
    15a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15ac:	f001 fb22 	bl	2bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    15b0:	f89d 0000 	ldrb.w	r0, [sp]
    15b4:	2820      	cmp	r0, #32
    15b6:	d003      	beq.n	15c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    15b8:	4806      	ldr	r0, [pc, #24]	; (15d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    15ba:	7840      	ldrb	r0, [r0, #1]
    15bc:	f002 fa3a 	bl	3a34 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    15c0:	b005      	add	sp, #20
    15c2:	2000      	movs	r0, #0
    15c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15c8:	20000ea4 	.word	0x20000ea4
    15cc:	07a11f9c 	.word	0x07a11f9c
    15d0:	20000e24 	.word	0x20000e24
    15d4:	20000014 	.word	0x20000014

000015d8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    15d8:	4806      	ldr	r0, [pc, #24]	; (15f4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    15da:	b510      	push	{r4, lr}
    15dc:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    15e0:	2920      	cmp	r1, #32
    15e2:	bf1c      	itt	ne
    15e4:	7e00      	ldrbne	r0, [r0, #24]
    15e6:	bd10      	popne	{r4, pc}
    15e8:	f640 3174 	movw	r1, #2932	; 0xb74
    15ec:	2070      	movs	r0, #112	; 0x70
    15ee:	f002 f951 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f2:	0000      	.short	0x0000
    15f4:	20000ea4 	.word	0x20000ea4

000015f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    15f8:	4602      	mov	r2, r0
    15fa:	4b14      	ldr	r3, [pc, #80]	; (164c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    15fc:	b510      	push	{r4, lr}
    15fe:	4408      	add	r0, r1
    1600:	429a      	cmp	r2, r3
    1602:	d904      	bls.n	160e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1604:	f240 6109 	movw	r1, #1545	; 0x609
    1608:	2070      	movs	r0, #112	; 0x70
    160a:	f002 f943 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    160e:	4a10      	ldr	r2, [pc, #64]	; (1650 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1610:	4291      	cmp	r1, r2
    1612:	dd04      	ble.n	161e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1614:	f240 610a 	movw	r1, #1546	; 0x60a
    1618:	2070      	movs	r0, #112	; 0x70
    161a:	f002 f93b 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    161e:	4a0d      	ldr	r2, [pc, #52]	; (1654 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1620:	4291      	cmp	r1, r2
    1622:	da04      	bge.n	162e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1624:	f240 610b 	movw	r1, #1547	; 0x60b
    1628:	2070      	movs	r0, #112	; 0x70
    162a:	f002 f933 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    162e:	490a      	ldr	r1, [pc, #40]	; (1658 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1630:	4281      	cmp	r1, r0
    1632:	bfde      	ittt	le
    1634:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1638:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    163c:	bd10      	pople	{r4, pc}
    163e:	2800      	cmp	r0, #0
    1640:	bfbc      	itt	lt
    1642:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1646:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    164a:	bd10      	pop	{r4, pc}
    164c:	1e847fff 	.word	0x1e847fff
    1650:	07a12000 	.word	0x07a12000
    1654:	f85ee000 	.word	0xf85ee000
    1658:	1e848000 	.word	0x1e848000

0000165c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    165c:	4a10      	ldr	r2, [pc, #64]	; (16a0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    165e:	1a0b      	subs	r3, r1, r0
    1660:	f102 0c01 	add.w	ip, r2, #1
    1664:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1668:	bf3c      	itt	cc
    166a:	4618      	movcc	r0, r3
    166c:	4770      	bxcc	lr
    166e:	b510      	push	{r4, lr}
    1670:	1a44      	subs	r4, r0, r1
    1672:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1676:	bf3c      	itt	cc
    1678:	4618      	movcc	r0, r3
    167a:	bd10      	popcc	{r4, pc}
    167c:	429a      	cmp	r2, r3
    167e:	d203      	bcs.n	1688 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1680:	1a10      	subs	r0, r2, r0
    1682:	4408      	add	r0, r1
    1684:	1c40      	adds	r0, r0, #1
    1686:	bd10      	pop	{r4, pc}
    1688:	42a2      	cmp	r2, r4
    168a:	d204      	bcs.n	1696 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    168c:	1a51      	subs	r1, r2, r1
    168e:	4408      	add	r0, r1
    1690:	1c40      	adds	r0, r0, #1
    1692:	4240      	negs	r0, r0
    1694:	bd10      	pop	{r4, pc}
    1696:	f640 310c 	movw	r1, #2828	; 0xb0c
    169a:	2070      	movs	r0, #112	; 0x70
    169c:	f002 f8fa 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16a0:	1e847fff 	.word	0x1e847fff

000016a4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    16a4:	4907      	ldr	r1, [pc, #28]	; (16c4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    16a6:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    16aa:	4282      	cmp	r2, r0
    16ac:	bf04      	itt	eq
    16ae:	6848      	ldreq	r0, [r1, #4]
    16b0:	4770      	bxeq	lr
    16b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16b6:	4904      	ldr	r1, [pc, #16]	; (16c8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    16b8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    16bc:	3008      	adds	r0, #8
    16be:	f7ff bd83 	b.w	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    16c2:	0000      	.short	0x0000
    16c4:	20000ea4 	.word	0x20000ea4
    16c8:	20000b24 	.word	0x20000b24

000016cc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    16cc:	490e      	ldr	r1, [pc, #56]	; (1708 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    16ce:	b510      	push	{r4, lr}
    16d0:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16d4:	2820      	cmp	r0, #32
    16d6:	d012      	beq.n	16fe <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    16d8:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16dc:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    16e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16e4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    16e8:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    16ec:	6840      	ldr	r0, [r0, #4]
    16ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16f2:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    16f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    16fa:	2104      	movs	r1, #4
    16fc:	4710      	bx	r2
    16fe:	f640 01bc 	movw	r1, #2236	; 0x8bc
    1702:	2070      	movs	r0, #112	; 0x70
    1704:	f002 f8c6 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1708:	20000ea4 	.word	0x20000ea4

0000170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    170e:	4d6d      	ldr	r5, [pc, #436]	; (18c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1710:	496d      	ldr	r1, [pc, #436]	; (18c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1712:	2601      	movs	r6, #1
    1714:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1718:	2808      	cmp	r0, #8
    171a:	d273      	bcs.n	1804 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    171c:	e8df f000 	tbb	[pc, r0]
    1720:	af9d6704 	.word	0xaf9d6704
    1724:	b9b444cd 	.word	0xb9b444cd
    1728:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    172c:	b918      	cbnz	r0, 1736 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    172e:	f001 ff13 	bl	3558 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1732:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1736:	8ae0      	ldrh	r0, [r4, #22]
    1738:	b110      	cbz	r0, 1740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    173a:	f002 f847 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    173e:	b188      	cbz	r0, 1764 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1740:	f7ff fcaa 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1744:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    1748:	68a1      	ldr	r1, [r4, #8]
    174a:	f1b1 3fff 	cmp.w	r1, #4294967295
    174e:	d005      	beq.n	175c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1750:	2301      	movs	r3, #1
    1752:	2203      	movs	r2, #3
    1754:	2005      	movs	r0, #5
    1756:	f001 fb33 	bl	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    175a:	b140      	cbz	r0, 176e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    175c:	7e60      	ldrb	r0, [r4, #25]
    175e:	2801      	cmp	r0, #1
    1760:	d110      	bne.n	1784 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1762:	e009      	b.n	1778 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1764:	f44f 6107 	mov.w	r1, #2160	; 0x870
    1768:	2070      	movs	r0, #112	; 0x70
    176a:	f002 f893 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    176e:	f640 0175 	movw	r1, #2165	; 0x875
    1772:	2070      	movs	r0, #112	; 0x70
    1774:	f002 f88e 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1778:	6920      	ldr	r0, [r4, #16]
    177a:	1e40      	subs	r0, r0, #1
    177c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1780:	f001 fa38 	bl	2bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1784:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1788:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    178c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1790:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1794:	6840      	ldr	r0, [r0, #4]
    1796:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    179a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    179e:	b001      	add	sp, #4
    17a0:	2101      	movs	r1, #1
    17a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17a6:	4710      	bx	r2
    17a8:	f7ff fc76 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    17ac:	f04f 30ff 	mov.w	r0, #4294967295
    17b0:	60a0      	str	r0, [r4, #8]
    17b2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    17b6:	f88d 0000 	strb.w	r0, [sp]
    17ba:	f89d 0000 	ldrb.w	r0, [sp]
    17be:	b188      	cbz	r0, 17e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    17c0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17c4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17cc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17d0:	6840      	ldr	r0, [r0, #4]
    17d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17d6:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17da:	b001      	add	sp, #4
    17dc:	2106      	movs	r1, #6
    17de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17e2:	4710      	bx	r2
    17e4:	f640 0186 	movw	r1, #2182	; 0x886
    17e8:	2070      	movs	r0, #112	; 0x70
    17ea:	f002 f853 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17ee:	f7ff fc53 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    17f2:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    17f6:	f001 ffe9 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17fa:	b120      	cbz	r0, 1806 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    17fc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1800:	b130      	cbz	r0, 1810 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    1802:	e009      	b.n	1818 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1804:	e059      	b.n	18ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    1806:	f640 0196 	movw	r1, #2198	; 0x896
    180a:	2070      	movs	r0, #112	; 0x70
    180c:	f002 f842 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1810:	f001 fea2 	bl	3558 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1814:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1818:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    181c:	b158      	cbz	r0, 1836 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    181e:	492b      	ldr	r1, [pc, #172]	; (18cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1820:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1824:	6008      	str	r0, [r1, #0]
    1826:	2005      	movs	r0, #5
    1828:	f001 fb92 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    182c:	f001 fee0 	bl	35f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1830:	2000      	movs	r0, #0
    1832:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1836:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    183a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    183e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1842:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1846:	6840      	ldr	r0, [r0, #4]
    1848:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    184c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1850:	b001      	add	sp, #4
    1852:	2100      	movs	r1, #0
    1854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1858:	4710      	bx	r2
    185a:	f001 fc2b 	bl	30b4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    185e:	8ae0      	ldrh	r0, [r4, #22]
    1860:	b110      	cbz	r0, 1868 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1862:	f001 ffb3 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1866:	b128      	cbz	r0, 1874 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    1868:	4819      	ldr	r0, [pc, #100]	; (18d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    186a:	7800      	ldrb	r0, [r0, #0]
    186c:	2803      	cmp	r0, #3
    186e:	bf08      	it	eq
    1870:	7766      	strbeq	r6, [r4, #29]
    1872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1874:	f640 01a1 	movw	r1, #2209	; 0x8a1
    1878:	2070      	movs	r0, #112	; 0x70
    187a:	f002 f80b 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    187e:	4815      	ldr	r0, [pc, #84]	; (18d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1880:	6006      	str	r6, [r0, #0]
    1882:	6888      	ldr	r0, [r1, #8]
    1884:	6006      	str	r6, [r0, #0]
    1886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1888:	7808      	ldrb	r0, [r1, #0]
    188a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    188e:	f002 b8d1 	b.w	3a34 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1892:	f7ff fc01 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1896:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    189a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    189e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    18a2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    18a6:	6840      	ldr	r0, [r0, #4]
    18a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    18ac:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    18b0:	b001      	add	sp, #4
    18b2:	2105      	movs	r1, #5
    18b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    18b8:	4710      	bx	r2
    18ba:	f640 01b4 	movw	r1, #2228	; 0x8b4
    18be:	2070      	movs	r0, #112	; 0x70
    18c0:	f001 ffe8 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18c4:	20000b24 	.word	0x20000b24
    18c8:	20000014 	.word	0x20000014
    18cc:	4001f508 	.word	0x4001f508
    18d0:	20000016 	.word	0x20000016
    18d4:	40000508 	.word	0x40000508

000018d8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    18d8:	4803      	ldr	r0, [pc, #12]	; (18e8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    18da:	b510      	push	{r4, lr}
    18dc:	7840      	ldrb	r0, [r0, #1]
    18de:	f00a f982 	bl	bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    18e2:	b280      	uxth	r0, r0
    18e4:	bd10      	pop	{r4, pc}
    18e6:	0000      	.short	0x0000
    18e8:	20000016 	.word	0x20000016

000018ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    18ec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18f0:	4682      	mov	sl, r0
    18f2:	48dc      	ldr	r0, [pc, #880]	; (1c64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    18f4:	b08b      	sub	sp, #44	; 0x2c
    18f6:	6800      	ldr	r0, [r0, #0]
    18f8:	4ddb      	ldr	r5, [pc, #876]	; (1c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    18fa:	05c0      	lsls	r0, r0, #23
    18fc:	0dc0      	lsrs	r0, r0, #23
    18fe:	d00e      	beq.n	191e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1900:	3810      	subs	r0, #16
    1902:	b240      	sxtb	r0, r0
    1904:	2800      	cmp	r0, #0
    1906:	bfb8      	it	lt
    1908:	f000 000f 	andlt.w	r0, r0, #15
    190c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1910:	bfac      	ite	ge
    1912:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1916:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    191a:	0940      	lsrs	r0, r0, #5
    191c:	d00d      	beq.n	193a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    191e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1920:	f04f 0b00 	mov.w	fp, #0
    1924:	7800      	ldrb	r0, [r0, #0]
    1926:	2800      	cmp	r0, #0
    1928:	bf18      	it	ne
    192a:	2801      	cmpne	r0, #1
    192c:	d018      	beq.n	1960 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    192e:	f240 714f 	movw	r1, #1871	; 0x74f
    1932:	f04f 0070 	mov.w	r0, #112	; 0x70
    1936:	f001 ffad 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    193a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    193e:	f04f 0b01 	mov.w	fp, #1
    1942:	2820      	cmp	r0, #32
    1944:	d007      	beq.n	1956 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1946:	980c      	ldr	r0, [sp, #48]	; 0x30
    1948:	7800      	ldrb	r0, [r0, #0]
    194a:	b148      	cbz	r0, 1960 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    194c:	f240 714b 	movw	r1, #1867	; 0x74b
    1950:	2070      	movs	r0, #112	; 0x70
    1952:	f001 ff9f 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1956:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    195a:	2070      	movs	r0, #112	; 0x70
    195c:	f001 ff9a 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1960:	4cc2      	ldr	r4, [pc, #776]	; (1c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    1962:	b124      	cbz	r4, 196e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1964:	2100      	movs	r1, #0
    1966:	f240 7052 	movw	r0, #1874	; 0x752
    196a:	f3af 8000 	nop.w
    196e:	49c0      	ldr	r1, [pc, #768]	; (1c70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    1970:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    1974:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1978:	f04f 0801 	mov.w	r8, #1
    197c:	9000      	str	r0, [sp, #0]
    197e:	b124      	cbz	r4, 198a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1980:	2100      	movs	r1, #0
    1982:	f240 705a 	movw	r0, #1882	; 0x75a
    1986:	f3af 8000 	nop.w
    198a:	f1b8 0f00 	cmp.w	r8, #0
    198e:	d009      	beq.n	19a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1990:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1994:	f04f 0900 	mov.w	r9, #0
    1998:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    199c:	f1bb 0f00 	cmp.w	fp, #0
    19a0:	d007      	beq.n	19b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    19a2:	e032      	b.n	1a0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    19a4:	48b3      	ldr	r0, [pc, #716]	; (1c74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    19a6:	2800      	cmp	r0, #0
    19a8:	bf18      	it	ne
    19aa:	f3af 8000 	nopne.w
    19ae:	b662      	cpsie	i
    19b0:	e7ee      	b.n	1990 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    19b2:	4637      	mov	r7, r6
    19b4:	2001      	movs	r0, #1
    19b6:	ea20 0607 	bic.w	r6, r0, r7
    19ba:	48af      	ldr	r0, [pc, #700]	; (1c78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    19bc:	2240      	movs	r2, #64	; 0x40
    19be:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    19c2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    19c6:	f00a fa7c 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    19ca:	b124      	cbz	r4, 19d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    19cc:	2100      	movs	r1, #0
    19ce:	f240 50cd 	movw	r0, #1485	; 0x5cd
    19d2:	f3af 8000 	nop.w
    19d6:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    19da:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    19de:	6a09      	ldr	r1, [r1, #32]
    19e0:	6201      	str	r1, [r0, #32]
    19e2:	b124      	cbz	r4, 19ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    19e4:	2100      	movs	r1, #0
    19e6:	f240 50d1 	movw	r0, #1489	; 0x5d1
    19ea:	f3af 8000 	nop.w
    19ee:	b124      	cbz	r4, 19fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    19f0:	2100      	movs	r1, #0
    19f2:	f240 7064 	movw	r0, #1892	; 0x764
    19f6:	f3af 8000 	nop.w
    19fa:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    19fe:	f88d 0004 	strb.w	r0, [sp, #4]
    1a02:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1a06:	2800      	cmp	r0, #0
    1a08:	d1b9      	bne.n	197e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a0a:	b124      	cbz	r4, 1a16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    1a0c:	2100      	movs	r1, #0
    1a0e:	f240 706e 	movw	r0, #1902	; 0x76e
    1a12:	f3af 8000 	nop.w
    1a16:	f001 f84d 	bl	2ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a1a:	4680      	mov	r8, r0
    1a1c:	4633      	mov	r3, r6
    1a1e:	aa06      	add	r2, sp, #24
    1a20:	990c      	ldr	r1, [sp, #48]	; 0x30
    1a22:	f7ff fa65 	bl	ef0 <CONFIG_BT_RX_STACK_SIZE+0x658>
    1a26:	b124      	cbz	r4, 1a32 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    1a28:	2100      	movs	r1, #0
    1a2a:	f240 7075 	movw	r0, #1909	; 0x775
    1a2e:	f3af 8000 	nop.w
    1a32:	4991      	ldr	r1, [pc, #580]	; (1c78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1a34:	a806      	add	r0, sp, #24
    1a36:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    1a3a:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    1a3e:	2901      	cmp	r1, #1
    1a40:	bf18      	it	ne
    1a42:	2902      	cmpne	r1, #2
    1a44:	d13c      	bne.n	1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1a46:	9906      	ldr	r1, [sp, #24]
    1a48:	9b07      	ldr	r3, [sp, #28]
    1a4a:	eba1 0108 	sub.w	r1, r1, r8
    1a4e:	4a8b      	ldr	r2, [pc, #556]	; (1c7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    1a50:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1a54:	eba3 0308 	sub.w	r3, r3, r8
    1a58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1a5c:	2902      	cmp	r1, #2
    1a5e:	d371      	bcc.n	1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a60:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1a64:	d26e      	bcs.n	1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a66:	429a      	cmp	r2, r3
    1a68:	d36c      	bcc.n	1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a6a:	f04f 0901 	mov.w	r9, #1
    1a6e:	ab01      	add	r3, sp, #4
    1a70:	aa05      	add	r2, sp, #20
    1a72:	4631      	mov	r1, r6
    1a74:	f7fe ff2c 	bl	8d0 <CONFIG_BT_RX_STACK_SIZE+0x38>
    1a78:	2800      	cmp	r0, #0
    1a7a:	d06b      	beq.n	1b54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    1a7c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1a80:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1a84:	4633      	mov	r3, r6
    1a86:	428a      	cmp	r2, r1
    1a88:	d068      	beq.n	1b5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1a8a:	2005      	movs	r0, #5
    1a8c:	f7fe fd68 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a90:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1a94:	7048      	strb	r0, [r1, #1]
    1a96:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1a9a:	2820      	cmp	r0, #32
    1a9c:	bf03      	ittte	eq
    1a9e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1aa2:	f880 a020 	strbeq.w	sl, [r0, #32]
    1aa6:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1aaa:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1aae:	bf18      	it	ne
    1ab0:	f880 a001 	strbne.w	sl, [r0, #1]
    1ab4:	4632      	mov	r2, r6
    1ab6:	4651      	mov	r1, sl
    1ab8:	f05f 0003 	movs.w	r0, #3
    1abc:	f7ff fbbe 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1ac0:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1ac4:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1ac8:	f88d 0004 	strb.w	r0, [sp, #4]
    1acc:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1ad0:	b124      	cbz	r4, 1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1ad2:	2100      	movs	r1, #0
    1ad4:	f240 707c 	movw	r0, #1916	; 0x77c
    1ad8:	f3af 8000 	nop.w
    1adc:	4868      	ldr	r0, [pc, #416]	; (1c80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1ade:	2800      	cmp	r0, #0
    1ae0:	bf18      	it	ne
    1ae2:	f3af 8000 	nopne.w
    1ae6:	f3ef 8810 	mrs	r8, PRIMASK
    1aea:	b672      	cpsid	i
    1aec:	b124      	cbz	r4, 1af8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1aee:	2100      	movs	r1, #0
    1af0:	f240 7082 	movw	r0, #1922	; 0x782
    1af4:	f3af 8000 	nop.w
    1af8:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1afc:	f88d 0004 	strb.w	r0, [sp, #4]
    1b00:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1b04:	2800      	cmp	r0, #0
    1b06:	f47f af3a 	bne.w	197e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b0a:	b124      	cbz	r4, 1b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1b0c:	2100      	movs	r1, #0
    1b0e:	f240 708a 	movw	r0, #1930	; 0x78a
    1b12:	f3af 8000 	nop.w
    1b16:	f10d 0e18 	add.w	lr, sp, #24
    1b1a:	9800      	ldr	r0, [sp, #0]
    1b1c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1b20:	f100 0008 	add.w	r0, r0, #8
    1b24:	f1b9 0f00 	cmp.w	r9, #0
    1b28:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1b2c:	d044      	beq.n	1bb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1b2e:	b124      	cbz	r4, 1b3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1b30:	2100      	movs	r1, #0
    1b32:	f240 7097 	movw	r0, #1943	; 0x797
    1b36:	f3af 8000 	nop.w
    1b3a:	f1bb 0f00 	cmp.w	fp, #0
    1b3e:	d12c      	bne.n	1b9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b40:	e016      	b.n	1b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1b42:	e7ff      	b.n	1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1b44:	4632      	mov	r2, r6
    1b46:	4651      	mov	r1, sl
    1b48:	2004      	movs	r0, #4
    1b4a:	f7ff fb77 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1b4e:	f04f 0901 	mov.w	r9, #1
    1b52:	e7b5      	b.n	1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1b54:	4632      	mov	r2, r6
    1b56:	4651      	mov	r1, sl
    1b58:	2004      	movs	r0, #4
    1b5a:	e7af      	b.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1b5c:	2920      	cmp	r1, #32
    1b5e:	bf19      	ittee	ne
    1b60:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1b64:	7840      	ldrbne	r0, [r0, #1]
    1b66:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1b6a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1b6e:	e78f      	b.n	1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1b70:	b19f      	cbz	r7, 1b9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b72:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1b76:	2820      	cmp	r0, #32
    1b78:	d10f      	bne.n	1b9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b7a:	b124      	cbz	r4, 1b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1b7c:	2100      	movs	r1, #0
    1b7e:	f240 709c 	movw	r0, #1948	; 0x79c
    1b82:	f3af 8000 	nop.w
    1b86:	4631      	mov	r1, r6
    1b88:	2002      	movs	r0, #2
    1b8a:	f7ff fb87 	bl	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1b8e:	b920      	cbnz	r0, 1b9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b90:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b92:	7800      	ldrb	r0, [r0, #0]
    1b94:	b3f0      	cbz	r0, 1c14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1b96:	2801      	cmp	r0, #1
    1b98:	d04c      	beq.n	1c34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1b9a:	b124      	cbz	r4, 1ba6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1b9c:	2100      	movs	r1, #0
    1b9e:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1ba2:	f3af 8000 	nop.w
    1ba6:	f1bb 0f00 	cmp.w	fp, #0
    1baa:	bf18      	it	ne
    1bac:	2001      	movne	r0, #1
    1bae:	d04a      	beq.n	1c46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1bb0:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1bb4:	f04f 0901 	mov.w	r9, #1
    1bb8:	b124      	cbz	r4, 1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1bba:	2100      	movs	r1, #0
    1bbc:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1bc0:	f3af 8000 	nop.w
    1bc4:	f1b8 0f00 	cmp.w	r8, #0
    1bc8:	d045      	beq.n	1c56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1bca:	b124      	cbz	r4, 1bd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1bcc:	2100      	movs	r1, #0
    1bce:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1bd2:	f3af 8000 	nop.w
    1bd6:	f1b9 0f00 	cmp.w	r9, #0
    1bda:	d011      	beq.n	1c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1bdc:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1be0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1be4:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1be8:	2820      	cmp	r0, #32
    1bea:	d009      	beq.n	1c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1bec:	b124      	cbz	r4, 1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1bee:	2100      	movs	r1, #0
    1bf0:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1bf4:	f3af 8000 	nop.w
    1bf8:	4822      	ldr	r0, [pc, #136]	; (1c84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1bfa:	7840      	ldrb	r0, [r0, #1]
    1bfc:	f001 ff1a 	bl	3a34 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c00:	b124      	cbz	r4, 1c0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1c02:	2100      	movs	r1, #0
    1c04:	f240 70da 	movw	r0, #2010	; 0x7da
    1c08:	f3af 8000 	nop.w
    1c0c:	b00d      	add	sp, #52	; 0x34
    1c0e:	4648      	mov	r0, r9
    1c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c14:	e7ff      	b.n	1c16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1c16:	b124      	cbz	r4, 1c22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1c18:	2100      	movs	r1, #0
    1c1a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1c1e:	f3af 8000 	nop.w
    1c22:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1c26:	4651      	mov	r1, sl
    1c28:	2004      	movs	r0, #4
    1c2a:	f7ff fb07 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1c2e:	f04f 0901 	mov.w	r9, #1
    1c32:	e7c1      	b.n	1bb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1c34:	2c00      	cmp	r4, #0
    1c36:	f43f aea2 	beq.w	197e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c3a:	2100      	movs	r1, #0
    1c3c:	f240 70af 	movw	r0, #1967	; 0x7af
    1c40:	f3af 8000 	nop.w
    1c44:	e69b      	b.n	197e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c46:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1c4a:	2001      	movs	r0, #1
    1c4c:	ea20 0101 	bic.w	r1, r0, r1
    1c50:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1c54:	e7ac      	b.n	1bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1c56:	4807      	ldr	r0, [pc, #28]	; (1c74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1c58:	2800      	cmp	r0, #0
    1c5a:	bf18      	it	ne
    1c5c:	f3af 8000 	nopne.w
    1c60:	b662      	cpsie	i
    1c62:	e7b2      	b.n	1bca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1c64:	e000ed04 	.word	0xe000ed04
    1c68:	20000ea4 	.word	0x20000ea4
    1c6c:	00000000 	.word	0x00000000
    1c70:	20000b24 	.word	0x20000b24
    1c74:	00000000 	.word	0x00000000
    1c78:	20000e24 	.word	0x20000e24
    1c7c:	003fffff 	.word	0x003fffff
    1c80:	00000000 	.word	0x00000000
    1c84:	20000014 	.word	0x20000014

00001c88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1c88:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c8c:	48a5      	ldr	r0, [pc, #660]	; (1f24 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d8>)
    1c8e:	b08c      	sub	sp, #48	; 0x30
    1c90:	6800      	ldr	r0, [r0, #0]
    1c92:	05c0      	lsls	r0, r0, #23
    1c94:	0dc0      	lsrs	r0, r0, #23
    1c96:	d011      	beq.n	1cbc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1c98:	3810      	subs	r0, #16
    1c9a:	b240      	sxtb	r0, r0
    1c9c:	2800      	cmp	r0, #0
    1c9e:	bfb8      	it	lt
    1ca0:	f000 000f 	andlt.w	r0, r0, #15
    1ca4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1ca8:	bfac      	ite	ge
    1caa:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1cae:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1cb2:	0940      	lsrs	r0, r0, #5
    1cb4:	bf08      	it	eq
    1cb6:	f04f 0901 	moveq.w	r9, #1
    1cba:	d001      	beq.n	1cc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1cbc:	f04f 0900 	mov.w	r9, #0
    1cc0:	980c      	ldr	r0, [sp, #48]	; 0x30
    1cc2:	7800      	ldrb	r0, [r0, #0]
    1cc4:	2800      	cmp	r0, #0
    1cc6:	f04f 0000 	mov.w	r0, #0
    1cca:	bf1c      	itt	ne
    1ccc:	b00d      	addne	sp, #52	; 0x34
    1cce:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cd2:	f8df a254 	ldr.w	sl, [pc, #596]	; 1f28 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>
    1cd6:	4d95      	ldr	r5, [pc, #596]	; (1f2c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1cd8:	4c95      	ldr	r4, [pc, #596]	; (1f30 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>)
    1cda:	f04f 0b00 	mov.w	fp, #0
    1cde:	900b      	str	r0, [sp, #44]	; 0x2c
    1ce0:	b125      	cbz	r5, 1cec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1ce2:	2100      	movs	r1, #0
    1ce4:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1ce8:	f3af 8000 	nop.w
    1cec:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1cf0:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1cf4:	f04f 0800 	mov.w	r8, #0
    1cf8:	b125      	cbz	r5, 1d04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1cfa:	2100      	movs	r1, #0
    1cfc:	f240 605d 	movw	r0, #1629	; 0x65d
    1d00:	f3af 8000 	nop.w
    1d04:	f1b9 0f00 	cmp.w	r9, #0
    1d08:	d11d      	bne.n	1d46 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1d0a:	4637      	mov	r7, r6
    1d0c:	2001      	movs	r0, #1
    1d0e:	ea20 0607 	bic.w	r6, r0, r7
    1d12:	4888      	ldr	r0, [pc, #544]	; (1f34 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e8>)
    1d14:	2240      	movs	r2, #64	; 0x40
    1d16:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1d1a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1d1e:	f00a f8d0 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1d22:	b125      	cbz	r5, 1d2e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1d24:	2100      	movs	r1, #0
    1d26:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1d2a:	f3af 8000 	nop.w
    1d2e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1d32:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1d36:	6a09      	ldr	r1, [r1, #32]
    1d38:	6201      	str	r1, [r0, #32]
    1d3a:	b125      	cbz	r5, 1d46 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1d3c:	2100      	movs	r1, #0
    1d3e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1d42:	f3af 8000 	nop.w
    1d46:	b125      	cbz	r5, 1d52 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d48:	2100      	movs	r1, #0
    1d4a:	f240 6065 	movw	r0, #1637	; 0x665
    1d4e:	f3af 8000 	nop.w
    1d52:	f000 feaf 	bl	2ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1d56:	4607      	mov	r7, r0
    1d58:	4633      	mov	r3, r6
    1d5a:	466a      	mov	r2, sp
    1d5c:	990c      	ldr	r1, [sp, #48]	; 0x30
    1d5e:	f7ff f8c7 	bl	ef0 <CONFIG_BT_RX_STACK_SIZE+0x658>
    1d62:	b125      	cbz	r5, 1d6e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d64:	2100      	movs	r1, #0
    1d66:	f240 606b 	movw	r0, #1643	; 0x66b
    1d6a:	f3af 8000 	nop.w
    1d6e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1d72:	2820      	cmp	r0, #32
    1d74:	d014      	beq.n	1da0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1d76:	6920      	ldr	r0, [r4, #16]
    1d78:	9900      	ldr	r1, [sp, #0]
    1d7a:	1a09      	subs	r1, r1, r0
    1d7c:	0209      	lsls	r1, r1, #8
    1d7e:	17ca      	asrs	r2, r1, #31
    1d80:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d84:	1209      	asrs	r1, r1, #8
    1d86:	d50b      	bpl.n	1da0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1d88:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d8c:	1a89      	subs	r1, r1, r2
    1d8e:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d92:	4408      	add	r0, r1
    1d94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d98:	e9cd 2000 	strd	r2, r0, [sp]
    1d9c:	f04f 0801 	mov.w	r8, #1
    1da0:	b14d      	cbz	r5, 1db6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a>
    1da2:	2100      	movs	r1, #0
    1da4:	f240 6075 	movw	r0, #1653	; 0x675
    1da8:	f3af 8000 	nop.w
    1dac:	2100      	movs	r1, #0
    1dae:	f240 607b 	movw	r0, #1659	; 0x67b
    1db2:	f3af 8000 	nop.w
    1db6:	9800      	ldr	r0, [sp, #0]
    1db8:	9901      	ldr	r1, [sp, #4]
    1dba:	1bc0      	subs	r0, r0, r7
    1dbc:	1bc9      	subs	r1, r1, r7
    1dbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1dc6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1dca:	d205      	bcs.n	1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1dcc:	458a      	cmp	sl, r1
    1dce:	d303      	bcc.n	1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1dd0:	f1b9 0f00 	cmp.w	r9, #0
    1dd4:	d10c      	bne.n	1df0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1dd6:	e003      	b.n	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1dd8:	f1b9 0f00 	cmp.w	r9, #0
    1ddc:	d038      	beq.n	1e50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    1dde:	e094      	b.n	1f0a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1be>
    1de0:	4633      	mov	r3, r6
    1de2:	463a      	mov	r2, r7
    1de4:	4669      	mov	r1, sp
    1de6:	4854      	ldr	r0, [pc, #336]	; (1f38 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ec>)
    1de8:	f7fe fbf6 	bl	5d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1dec:	ea48 0800 	orr.w	r8, r8, r0
    1df0:	f1b8 0f00 	cmp.w	r8, #0
    1df4:	d022      	beq.n	1e3c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1df6:	9800      	ldr	r0, [sp, #0]
    1df8:	f009 fef5 	bl	bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1dfc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1e00:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e04:	4b4d      	ldr	r3, [pc, #308]	; (1f3c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>)
    1e06:	4411      	add	r1, r2
    1e08:	1c49      	adds	r1, r1, #1
    1e0a:	1842      	adds	r2, r0, r1
    1e0c:	4298      	cmp	r0, r3
    1e0e:	d841      	bhi.n	1e94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e10:	4849      	ldr	r0, [pc, #292]	; (1f38 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ec>)
    1e12:	4281      	cmp	r1, r0
    1e14:	dc5a      	bgt.n	1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>
    1e16:	4240      	negs	r0, r0
    1e18:	4281      	cmp	r1, r0
    1e1a:	db5f      	blt.n	1edc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>
    1e1c:	1c58      	adds	r0, r3, #1
    1e1e:	4290      	cmp	r0, r2
    1e20:	bfdc      	itt	le
    1e22:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1e26:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1e2a:	dd05      	ble.n	1e38 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e2c:	2a00      	cmp	r2, #0
    1e2e:	bfbc      	itt	lt
    1e30:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1e34:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1e38:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e3a:	60c2      	str	r2, [r0, #12]
    1e3c:	2001      	movs	r0, #1
    1e3e:	900b      	str	r0, [sp, #44]	; 0x2c
    1e40:	2d00      	cmp	r5, #0
    1e42:	d062      	beq.n	1f0a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1be>
    1e44:	2100      	movs	r1, #0
    1e46:	f240 608e 	movw	r0, #1678	; 0x68e
    1e4a:	f3af 8000 	nop.w
    1e4e:	e05c      	b.n	1f0a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1be>
    1e50:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e54:	aa08      	add	r2, sp, #32
    1e56:	a907      	add	r1, sp, #28
    1e58:	f000 fcd6 	bl	2808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e5c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1e60:	2820      	cmp	r0, #32
    1e62:	d01c      	beq.n	1e9e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x152>
    1e64:	6920      	ldr	r0, [r4, #16]
    1e66:	1d40      	adds	r0, r0, #5
    1e68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e6c:	e9dd 2100 	ldrd	r2, r1, [sp]
    1e70:	1a89      	subs	r1, r1, r2
    1e72:	4401      	add	r1, r0
    1e74:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e78:	e9cd 0100 	strd	r0, r1, [sp]
    1e7c:	f009 feb3 	bl	bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e80:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1e84:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e88:	4b2c      	ldr	r3, [pc, #176]	; (1f3c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>)
    1e8a:	4411      	add	r1, r2
    1e8c:	1c4a      	adds	r2, r1, #1
    1e8e:	1881      	adds	r1, r0, r2
    1e90:	4298      	cmp	r0, r3
    1e92:	d918      	bls.n	1ec6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17a>
    1e94:	f240 6109 	movw	r1, #1545	; 0x609
    1e98:	2070      	movs	r0, #112	; 0x70
    1e9a:	f001 fcfb 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e9e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1ea2:	f107 0609 	add.w	r6, r7, #9
    1ea6:	b120      	cbz	r0, 1eb2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x166>
    1ea8:	f001 fc90 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1eac:	2800      	cmp	r0, #0
    1eae:	bf08      	it	eq
    1eb0:	3632      	addeq	r6, #50	; 0x32
    1eb2:	4823      	ldr	r0, [pc, #140]	; (1f40 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f4>)
    1eb4:	7841      	ldrb	r1, [r0, #1]
    1eb6:	9807      	ldr	r0, [sp, #28]
    1eb8:	4281      	cmp	r1, r0
    1eba:	bf84      	itt	hi
    1ebc:	1a08      	subhi	r0, r1, r0
    1ebe:	4406      	addhi	r6, r0
    1ec0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1ec4:	e7d2      	b.n	1e6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>
    1ec6:	481c      	ldr	r0, [pc, #112]	; (1f38 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ec>)
    1ec8:	4282      	cmp	r2, r0
    1eca:	dd04      	ble.n	1ed6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18a>
    1ecc:	f240 610a 	movw	r1, #1546	; 0x60a
    1ed0:	2070      	movs	r0, #112	; 0x70
    1ed2:	f001 fcdf 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ed6:	481b      	ldr	r0, [pc, #108]	; (1f44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f8>)
    1ed8:	4282      	cmp	r2, r0
    1eda:	da04      	bge.n	1ee6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19a>
    1edc:	f240 610b 	movw	r1, #1547	; 0x60b
    1ee0:	2070      	movs	r0, #112	; 0x70
    1ee2:	f001 fcd7 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ee6:	4818      	ldr	r0, [pc, #96]	; (1f48 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fc>)
    1ee8:	4288      	cmp	r0, r1
    1eea:	bfdc      	itt	le
    1eec:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1ef0:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1ef4:	dd05      	ble.n	1f02 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b6>
    1ef6:	2900      	cmp	r1, #0
    1ef8:	bfbc      	itt	lt
    1efa:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1efe:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1f02:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f04:	60c1      	str	r1, [r0, #12]
    1f06:	2001      	movs	r0, #1
    1f08:	900b      	str	r0, [sp, #44]	; 0x2c
    1f0a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1f0e:	f88d 0010 	strb.w	r0, [sp, #16]
    1f12:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1f16:	2800      	cmp	r0, #0
    1f18:	f47f aee2 	bne.w	1ce0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1f1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1f1e:	b00d      	add	sp, #52	; 0x34
    1f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f24:	e000ed04 	.word	0xe000ed04
    1f28:	003fffff 	.word	0x003fffff
    1f2c:	00000000 	.word	0x00000000
    1f30:	20000ea4 	.word	0x20000ea4
    1f34:	20000e24 	.word	0x20000e24
    1f38:	07a12000 	.word	0x07a12000
    1f3c:	1e847fff 	.word	0x1e847fff
    1f40:	20000016 	.word	0x20000016
    1f44:	f85ee000 	.word	0xf85ee000
    1f48:	1e848000 	.word	0x1e848000

00001f4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1f4c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f50:	4d88      	ldr	r5, [pc, #544]	; (2174 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x174>)
    1f52:	b08c      	sub	sp, #48	; 0x30
    1f54:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1f58:	2000      	movs	r0, #0
    1f5a:	9009      	str	r0, [sp, #36]	; 0x24
    1f5c:	2001      	movs	r0, #1
    1f5e:	4c86      	ldr	r4, [pc, #536]	; (2178 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x178>)
    1f60:	f04f 0900 	mov.w	r9, #0
    1f64:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1f68:	4680      	mov	r8, r0
    1f6a:	9008      	str	r0, [sp, #32]
    1f6c:	b124      	cbz	r4, 1f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1f6e:	2100      	movs	r1, #0
    1f70:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1f74:	f3af 8000 	nop.w
    1f78:	9808      	ldr	r0, [sp, #32]
    1f7a:	2800      	cmp	r0, #0
    1f7c:	d037      	beq.n	1fee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1f7e:	bf00      	nop
    1f80:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1f84:	b124      	cbz	r4, 1f90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1f86:	2100      	movs	r1, #0
    1f88:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1f8c:	f3af 8000 	nop.w
    1f90:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1f94:	2240      	movs	r2, #64	; 0x40
    1f96:	ea28 060a 	bic.w	r6, r8, sl
    1f9a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f9e:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1fa2:	4683      	mov	fp, r0
    1fa4:	f009 ff8d 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1fa8:	b124      	cbz	r4, 1fb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1faa:	2100      	movs	r1, #0
    1fac:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1fb0:	f3af 8000 	nop.w
    1fb4:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1fb8:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1fbc:	9000      	str	r0, [sp, #0]
    1fbe:	6a09      	ldr	r1, [r1, #32]
    1fc0:	6201      	str	r1, [r0, #32]
    1fc2:	b124      	cbz	r4, 1fce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1fc4:	2100      	movs	r1, #0
    1fc6:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1fca:	f3af 8000 	nop.w
    1fce:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1fd2:	f88d 0008 	strb.w	r0, [sp, #8]
    1fd6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1fda:	b178      	cbz	r0, 1ffc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1fdc:	2c00      	cmp	r4, #0
    1fde:	bf1c      	itt	ne
    1fe0:	2100      	movne	r1, #0
    1fe2:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1fe6:	d0c1      	beq.n	1f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fe8:	f3af 8000 	nop.w
    1fec:	e7be      	b.n	1f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fee:	4863      	ldr	r0, [pc, #396]	; (217c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x17c>)
    1ff0:	2800      	cmp	r0, #0
    1ff2:	bf18      	it	ne
    1ff4:	f3af 8000 	nopne.w
    1ff8:	b662      	cpsie	i
    1ffa:	e7c1      	b.n	1f80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1ffc:	b124      	cbz	r4, 2008 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8>
    1ffe:	2100      	movs	r1, #0
    2000:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2004:	f3af 8000 	nop.w
    2008:	980c      	ldr	r0, [sp, #48]	; 0x30
    200a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    200e:	2803      	cmp	r0, #3
    2010:	d172      	bne.n	20f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf8>
    2012:	f8dd a000 	ldr.w	sl, [sp]
    2016:	f8cd a018 	str.w	sl, [sp, #24]
    201a:	990c      	ldr	r1, [sp, #48]	; 0x30
    201c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2020:	4288      	cmp	r0, r1
    2022:	bf14      	ite	ne
    2024:	f04f 0b00 	movne.w	fp, #0
    2028:	f04f 0b01 	moveq.w	fp, #1
    202c:	f10a 0c20 	add.w	ip, sl, #32
    2030:	4686      	mov	lr, r0
    2032:	2220      	movs	r2, #32
    2034:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2038:	e003      	b.n	2042 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x42>
    203a:	4602      	mov	r2, r0
    203c:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2040:	7840      	ldrb	r0, [r0, #1]
    2042:	4288      	cmp	r0, r1
    2044:	d002      	beq.n	204c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c>
    2046:	2820      	cmp	r0, #32
    2048:	d00a      	beq.n	2060 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x60>
    204a:	e7f6      	b.n	203a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a>
    204c:	2820      	cmp	r0, #32
    204e:	d007      	beq.n	2060 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x60>
    2050:	4586      	cmp	lr, r0
    2052:	d107      	bne.n	2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    2054:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2058:	7840      	ldrb	r0, [r0, #1]
    205a:	f88c 0000 	strb.w	r0, [ip]
    205e:	e007      	b.n	2070 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x70>
    2060:	4648      	mov	r0, r9
    2062:	e00c      	b.n	207e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e>
    2064:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2068:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    206c:	7840      	ldrb	r0, [r0, #1]
    206e:	7048      	strb	r0, [r1, #1]
    2070:	b124      	cbz	r4, 207c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7c>
    2072:	2100      	movs	r1, #0
    2074:	f240 5037 	movw	r0, #1335	; 0x537
    2078:	f3af 8000 	nop.w
    207c:	4640      	mov	r0, r8
    207e:	ea10 0f0b 	tst.w	r0, fp
    2082:	bf18      	it	ne
    2084:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2088:	2800      	cmp	r0, #0
    208a:	d052      	beq.n	2132 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x132>
    208c:	b124      	cbz	r4, 2098 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x98>
    208e:	2100      	movs	r1, #0
    2090:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2094:	f3af 8000 	nop.w
    2098:	4632      	mov	r2, r6
    209a:	2001      	movs	r0, #1
    209c:	990c      	ldr	r1, [sp, #48]	; 0x30
    209e:	f7ff f8cd 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    20a2:	9806      	ldr	r0, [sp, #24]
    20a4:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    20a8:	f88d 0008 	strb.w	r0, [sp, #8]
    20ac:	f89d a008 	ldrb.w	sl, [sp, #8]
    20b0:	b124      	cbz	r4, 20bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbc>
    20b2:	2100      	movs	r1, #0
    20b4:	f640 0008 	movw	r0, #2056	; 0x808
    20b8:	f3af 8000 	nop.w
    20bc:	4830      	ldr	r0, [pc, #192]	; (2180 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x180>)
    20be:	2800      	cmp	r0, #0
    20c0:	bf18      	it	ne
    20c2:	f3af 8000 	nopne.w
    20c6:	f3ef 8010 	mrs	r0, PRIMASK
    20ca:	b672      	cpsid	i
    20cc:	9008      	str	r0, [sp, #32]
    20ce:	b124      	cbz	r4, 20da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xda>
    20d0:	2100      	movs	r1, #0
    20d2:	f640 000d 	movw	r0, #2061	; 0x80d
    20d6:	f3af 8000 	nop.w
    20da:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    20de:	f88d 0008 	strb.w	r0, [sp, #8]
    20e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    20e6:	b140      	cbz	r0, 20fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xfa>
    20e8:	2c00      	cmp	r4, #0
    20ea:	bf1c      	itt	ne
    20ec:	2100      	movne	r1, #0
    20ee:	f640 0011 	movwne	r0, #2065	; 0x811
    20f2:	f43f af3b 	beq.w	1f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    20f6:	e777      	b.n	1fe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    20f8:	e01b      	b.n	2132 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x132>
    20fa:	f1ba 0f00 	cmp.w	sl, #0
    20fe:	d008      	beq.n	2112 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x112>
    2100:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2104:	2820      	cmp	r0, #32
    2106:	d104      	bne.n	2112 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x112>
    2108:	4631      	mov	r1, r6
    210a:	2002      	movs	r0, #2
    210c:	f7ff f8c6 	bl	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    2110:	b308      	cbz	r0, 2156 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x156>
    2112:	b124      	cbz	r4, 211e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x11e>
    2114:	2100      	movs	r1, #0
    2116:	f640 0025 	movw	r0, #2085	; 0x825
    211a:	f3af 8000 	nop.w
    211e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2122:	ea28 0000 	bic.w	r0, r8, r0
    2126:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    212a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    212e:	2001      	movs	r0, #1
    2130:	9009      	str	r0, [sp, #36]	; 0x24
    2132:	b124      	cbz	r4, 213e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13e>
    2134:	2100      	movs	r1, #0
    2136:	f640 002e 	movw	r0, #2094	; 0x82e
    213a:	f3af 8000 	nop.w
    213e:	9808      	ldr	r0, [sp, #32]
    2140:	b188      	cbz	r0, 2166 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x166>
    2142:	b124      	cbz	r4, 214e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14e>
    2144:	2100      	movs	r1, #0
    2146:	f640 0032 	movw	r0, #2098	; 0x832
    214a:	f3af 8000 	nop.w
    214e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2150:	b00d      	add	sp, #52	; 0x34
    2152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2156:	2c00      	cmp	r4, #0
    2158:	d0f1      	beq.n	213e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13e>
    215a:	2100      	movs	r1, #0
    215c:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2160:	f3af 8000 	nop.w
    2164:	e7e6      	b.n	2134 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x134>
    2166:	4805      	ldr	r0, [pc, #20]	; (217c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x17c>)
    2168:	2800      	cmp	r0, #0
    216a:	bf18      	it	ne
    216c:	f3af 8000 	nopne.w
    2170:	b662      	cpsie	i
    2172:	e7e6      	b.n	2142 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x142>
    2174:	20000ea4 	.word	0x20000ea4
	...

00002184 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2184:	2820      	cmp	r0, #32
    2186:	bf24      	itt	cs
    2188:	2000      	movcs	r0, #0
    218a:	4770      	bxcs	lr
    218c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2190:	4b03      	ldr	r3, [pc, #12]	; (21a0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2192:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    2196:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    219a:	6042      	str	r2, [r0, #4]
    219c:	2001      	movs	r0, #1
    219e:	4770      	bx	lr
    21a0:	20000b24 	.word	0x20000b24

000021a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    21a4:	b510      	push	{r4, lr}
    21a6:	2820      	cmp	r0, #32
    21a8:	d211      	bcs.n	21ce <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21aa:	490e      	ldr	r1, [pc, #56]	; (21e4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    21ac:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21b0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    21b4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    21b8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    21bc:	b13b      	cbz	r3, 21ce <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21be:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21c2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    21c6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    21ca:	2a01      	cmp	r2, #1
    21cc:	d001      	beq.n	21d2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    21ce:	2000      	movs	r0, #0
    21d0:	bd10      	pop	{r4, pc}
    21d2:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    21d6:	4601      	mov	r1, r0
    21d8:	2000      	movs	r0, #0
    21da:	f7ff f82f 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    21de:	2001      	movs	r0, #1
    21e0:	bd10      	pop	{r4, pc}
    21e2:	0000      	.short	0x0000
    21e4:	20000ea4 	.word	0x20000ea4

000021e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    21e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21ec:	4e80      	ldr	r6, [pc, #512]	; (23f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    21ee:	4680      	mov	r8, r0
    21f0:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    21f4:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    21f8:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    21fc:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2200:	2800      	cmp	r0, #0
    2202:	d068      	beq.n	22d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2204:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2208:	4d7a      	ldr	r5, [pc, #488]	; (23f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    220a:	b125      	cbz	r5, 2216 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    220c:	2100      	movs	r1, #0
    220e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2212:	f3af 8000 	nop.w
    2216:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    221a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    221e:	2801      	cmp	r0, #1
    2220:	d018      	beq.n	2254 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2222:	b2c0      	uxtb	r0, r0
    2224:	2804      	cmp	r0, #4
    2226:	bf1c      	itt	ne
    2228:	2805      	cmpne	r0, #5
    222a:	2806      	cmpne	r0, #6
    222c:	d058      	beq.n	22e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    222e:	b12d      	cbz	r5, 223c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2230:	f04f 0100 	mov.w	r1, #0
    2234:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2238:	f3af 8000 	nop.w
    223c:	f001 fc50 	bl	3ae0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2240:	b125      	cbz	r5, 224c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2242:	2100      	movs	r1, #0
    2244:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2248:	f3af 8000 	nop.w
    224c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2250:	2801      	cmp	r0, #1
    2252:	d1e6      	bne.n	2222 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2254:	2401      	movs	r4, #1
    2256:	b125      	cbz	r5, 2262 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2258:	2100      	movs	r1, #0
    225a:	f640 30d8 	movw	r0, #3032	; 0xbd8
    225e:	f3af 8000 	nop.w
    2262:	2c00      	cmp	r4, #0
    2264:	d042      	beq.n	22ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2266:	2000      	movs	r0, #0
    2268:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    226c:	b125      	cbz	r5, 2278 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    226e:	2100      	movs	r1, #0
    2270:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2274:	f3af 8000 	nop.w
    2278:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    227c:	2001      	movs	r0, #1
    227e:	ea20 090b 	bic.w	r9, r0, fp
    2282:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2286:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    228a:	2240      	movs	r2, #64	; 0x40
    228c:	f009 fe19 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2290:	b125      	cbz	r5, 229c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2292:	2100      	movs	r1, #0
    2294:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2298:	f3af 8000 	nop.w
    229c:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    22a0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    22a4:	6a00      	ldr	r0, [r0, #32]
    22a6:	f8ca 0020 	str.w	r0, [sl, #32]
    22aa:	b125      	cbz	r5, 22b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    22ac:	2100      	movs	r1, #0
    22ae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    22b2:	f3af 8000 	nop.w
    22b6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22ba:	f88d 0000 	strb.w	r0, [sp]
    22be:	f89d 0000 	ldrb.w	r0, [sp]
    22c2:	b1d0      	cbz	r0, 22fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    22c4:	2d00      	cmp	r5, #0
    22c6:	bf1c      	itt	ne
    22c8:	2100      	movne	r1, #0
    22ca:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    22ce:	d0c2      	beq.n	2256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22d0:	f3af 8000 	nop.w
    22d4:	e7bf      	b.n	2256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22d6:	f640 31b8 	movw	r1, #3000	; 0xbb8
    22da:	2070      	movs	r0, #112	; 0x70
    22dc:	f001 fada 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22e0:	464a      	mov	r2, r9
    22e2:	4641      	mov	r1, r8
    22e4:	2001      	movs	r0, #1
    22e6:	f7fe ffa9 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    22ea:	e7a9      	b.n	2240 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    22ec:	4842      	ldr	r0, [pc, #264]	; (23f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    22ee:	2800      	cmp	r0, #0
    22f0:	bf18      	it	ne
    22f2:	f3af 8000 	nopne.w
    22f6:	b662      	cpsie	i
    22f8:	e7b5      	b.n	2266 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    22fa:	b125      	cbz	r5, 2306 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    22fc:	2100      	movs	r1, #0
    22fe:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2302:	f3af 8000 	nop.w
    2306:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    230a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    230e:	4614      	mov	r4, r2
    2310:	f04f 0b20 	mov.w	fp, #32
    2314:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2318:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    231c:	e003      	b.n	2326 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    231e:	46a3      	mov	fp, r4
    2320:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2324:	785c      	ldrb	r4, [r3, #1]
    2326:	4544      	cmp	r4, r8
    2328:	d002      	beq.n	2330 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    232a:	2c20      	cmp	r4, #32
    232c:	d02b      	beq.n	2386 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    232e:	e7f6      	b.n	231e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2330:	2c20      	cmp	r4, #32
    2332:	d028      	beq.n	2386 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2334:	42a2      	cmp	r2, r4
    2336:	d104      	bne.n	2342 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2338:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    233c:	7840      	ldrb	r0, [r0, #1]
    233e:	7008      	strb	r0, [r1, #0]
    2340:	e005      	b.n	234e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2342:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2346:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    234a:	7849      	ldrb	r1, [r1, #1]
    234c:	7041      	strb	r1, [r0, #1]
    234e:	f1ba 0f00 	cmp.w	sl, #0
    2352:	d011      	beq.n	2378 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2354:	b125      	cbz	r5, 2360 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2356:	2100      	movs	r1, #0
    2358:	f240 502f 	movw	r0, #1327	; 0x52f
    235c:	f3af 8000 	nop.w
    2360:	f89a 0000 	ldrb.w	r0, [sl]
    2364:	42a0      	cmp	r0, r4
    2366:	d107      	bne.n	2378 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2368:	b125      	cbz	r5, 2374 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    236a:	2100      	movs	r1, #0
    236c:	f240 5032 	movw	r0, #1330	; 0x532
    2370:	f3af 8000 	nop.w
    2374:	f88a b000 	strb.w	fp, [sl]
    2378:	b15d      	cbz	r5, 2392 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    237a:	2100      	movs	r1, #0
    237c:	f240 5037 	movw	r0, #1335	; 0x537
    2380:	f3af 8000 	nop.w
    2384:	e000      	b.n	2388 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    2386:	b125      	cbz	r5, 2392 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2388:	2100      	movs	r1, #0
    238a:	f640 30eb 	movw	r0, #3051	; 0xbeb
    238e:	f3af 8000 	nop.w
    2392:	481a      	ldr	r0, [pc, #104]	; (23fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2394:	2800      	cmp	r0, #0
    2396:	bf18      	it	ne
    2398:	f3af 8000 	nopne.w
    239c:	f3ef 8410 	mrs	r4, PRIMASK
    23a0:	b672      	cpsid	i
    23a2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    23a6:	f88d 0000 	strb.w	r0, [sp]
    23aa:	f89d 0000 	ldrb.w	r0, [sp]
    23ae:	b138      	cbz	r0, 23c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    23b0:	2d00      	cmp	r5, #0
    23b2:	bf1c      	itt	ne
    23b4:	2100      	movne	r1, #0
    23b6:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    23ba:	f43f af4c 	beq.w	2256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    23be:	e787      	b.n	22d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    23c0:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    23c4:	2001      	movs	r0, #1
    23c6:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    23ca:	b154      	cbz	r4, 23e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    23cc:	2d00      	cmp	r5, #0
    23ce:	bf08      	it	eq
    23d0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23d4:	2100      	movs	r1, #0
    23d6:	f640 30fe 	movw	r0, #3070	; 0xbfe
    23da:	f3af 8000 	nop.w
    23de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23e2:	4805      	ldr	r0, [pc, #20]	; (23f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    23e4:	2800      	cmp	r0, #0
    23e6:	bf18      	it	ne
    23e8:	f3af 8000 	nopne.w
    23ec:	b662      	cpsie	i
    23ee:	e7ed      	b.n	23cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    23f0:	20000ea4 	.word	0x20000ea4
	...

00002400 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2400:	b570      	push	{r4, r5, r6, lr}
    2402:	460d      	mov	r5, r1
    2404:	4606      	mov	r6, r0
    2406:	f001 f9cf 	bl	37a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    240a:	480f      	ldr	r0, [pc, #60]	; (2448 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    240c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2410:	2400      	movs	r4, #0
    2412:	3880      	subs	r0, #128	; 0x80
    2414:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2418:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    241c:	b129      	cbz	r1, 242a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    241e:	1c61      	adds	r1, r4, #1
    2420:	b2cc      	uxtb	r4, r1
    2422:	2c20      	cmp	r4, #32
    2424:	d3f8      	bcc.n	2418 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2426:	2020      	movs	r0, #32
    2428:	bd70      	pop	{r4, r5, r6, pc}
    242a:	4808      	ldr	r0, [pc, #32]	; (244c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    242c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2430:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2434:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2438:	4621      	mov	r1, r4
    243a:	6045      	str	r5, [r0, #4]
    243c:	2001      	movs	r0, #1
    243e:	f7fe fefd 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    2442:	4620      	mov	r0, r4
    2444:	bd70      	pop	{r4, r5, r6, pc}
    2446:	0000      	.short	0x0000
    2448:	20000ea4 	.word	0x20000ea4
    244c:	20000b24 	.word	0x20000b24

00002450 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2454:	b083      	sub	sp, #12
    2456:	f000 fb2d 	bl	2ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    245a:	4605      	mov	r5, r0
    245c:	f000 fde0 	bl	3020 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2460:	4c67      	ldr	r4, [pc, #412]	; (2600 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2462:	68a0      	ldr	r0, [r4, #8]
    2464:	f1b0 3fff 	cmp.w	r0, #4294967295
    2468:	bf1c      	itt	ne
    246a:	f04f 30ff 	movne.w	r0, #4294967295
    246e:	60a0      	strne	r0, [r4, #8]
    2470:	7fa0      	ldrb	r0, [r4, #30]
    2472:	f8df b190 	ldr.w	fp, [pc, #400]	; 2604 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    2476:	b9a8      	cbnz	r0, 24a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2478:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    247c:	1a08      	subs	r0, r1, r0
    247e:	0200      	lsls	r0, r0, #8
    2480:	17c1      	asrs	r1, r0, #31
    2482:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2486:	1200      	asrs	r0, r0, #8
    2488:	f44f 710c 	mov.w	r1, #560	; 0x230
    248c:	f009 fbd8 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2490:	6921      	ldr	r1, [r4, #16]
    2492:	4408      	add	r0, r1
    2494:	1a28      	subs	r0, r5, r0
    2496:	0200      	lsls	r0, r0, #8
    2498:	17c1      	asrs	r1, r0, #31
    249a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    249e:	1200      	asrs	r0, r0, #8
    24a0:	0fc0      	lsrs	r0, r0, #31
    24a2:	d013      	beq.n	24cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    24a4:	7e60      	ldrb	r0, [r4, #25]
    24a6:	b328      	cbz	r0, 24f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    24a8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    24ac:	f88d 0000 	strb.w	r0, [sp]
    24b0:	f89d 0000 	ldrb.w	r0, [sp]
    24b4:	b1f0      	cbz	r0, 24f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    24b6:	f000 fc09 	bl	2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    24ba:	bf00      	nop
    24bc:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    24c0:	b1f0      	cbz	r0, 2500 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    24c2:	f240 4147 	movw	r1, #1095	; 0x447
    24c6:	2070      	movs	r0, #112	; 0x70
    24c8:	f001 f9e4 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24cc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24d0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24d8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    24dc:	6840      	ldr	r0, [r0, #4]
    24de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24e2:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    24e6:	2108      	movs	r1, #8
    24e8:	4790      	blx	r2
    24ea:	f44f 6186 	mov.w	r1, #1072	; 0x430
    24ee:	2070      	movs	r0, #112	; 0x70
    24f0:	f001 f9d0 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24f4:	1ce8      	adds	r0, r5, #3
    24f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24fa:	f000 fae1 	bl	2ac0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    24fe:	e7dd      	b.n	24bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2500:	f04f 0a01 	mov.w	sl, #1
    2504:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2508:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    250c:	2820      	cmp	r0, #32
    250e:	d024      	beq.n	255a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2510:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2514:	2020      	movs	r0, #32
    2516:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    251a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    251e:	2600      	movs	r6, #0
    2520:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2524:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2528:	4837      	ldr	r0, [pc, #220]	; (2608 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    252a:	6026      	str	r6, [r4, #0]
    252c:	7800      	ldrb	r0, [r0, #0]
    252e:	2802      	cmp	r0, #2
    2530:	bf16      	itet	ne
    2532:	2803      	cmpne	r0, #3
    2534:	2001      	moveq	r0, #1
    2536:	2000      	movne	r0, #0
    2538:	7720      	strb	r0, [r4, #28]
    253a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    253e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2542:	f899 0020 	ldrb.w	r0, [r9, #32]
    2546:	2820      	cmp	r0, #32
    2548:	d031      	beq.n	25ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    254a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    254e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2552:	7d81      	ldrb	r1, [r0, #22]
    2554:	2901      	cmp	r1, #1
    2556:	d005      	beq.n	2564 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2558:	e029      	b.n	25ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    255a:	f240 414a 	movw	r1, #1098	; 0x44a
    255e:	2070      	movs	r0, #112	; 0x70
    2560:	f001 f998 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2564:	46ab      	mov	fp, r5
    2566:	f100 0508 	add.w	r5, r0, #8
    256a:	8a40      	ldrh	r0, [r0, #18]
    256c:	aa01      	add	r2, sp, #4
    256e:	4669      	mov	r1, sp
    2570:	f000 f94a 	bl	2808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2574:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2578:	2820      	cmp	r0, #32
    257a:	d004      	beq.n	2586 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    257c:	6920      	ldr	r0, [r4, #16]
    257e:	1d40      	adds	r0, r0, #5
    2580:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2584:	e00b      	b.n	259e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2586:	8968      	ldrh	r0, [r5, #10]
    2588:	f10b 0b09 	add.w	fp, fp, #9
    258c:	b128      	cbz	r0, 259a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    258e:	f001 f91d 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2592:	2800      	cmp	r0, #0
    2594:	bf08      	it	eq
    2596:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    259a:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    259e:	e9d5 2100 	ldrd	r2, r1, [r5]
    25a2:	1a89      	subs	r1, r1, r2
    25a4:	6028      	str	r0, [r5, #0]
    25a6:	4408      	add	r0, r1
    25a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25ac:	6068      	str	r0, [r5, #4]
    25ae:	4639      	mov	r1, r7
    25b0:	2001      	movs	r0, #1
    25b2:	f7fe fe73 	bl	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    25b6:	2800      	cmp	r0, #0
    25b8:	d0f9      	beq.n	25ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    25ba:	4814      	ldr	r0, [pc, #80]	; (260c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    25bc:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    25c0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    25c4:	2802      	cmp	r0, #2
    25c6:	d104      	bne.n	25d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    25c8:	463a      	mov	r2, r7
    25ca:	4641      	mov	r1, r8
    25cc:	2006      	movs	r0, #6
    25ce:	f7fe fe35 	bl	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    25d2:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    25d6:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    25da:	2820      	cmp	r0, #32
    25dc:	d003      	beq.n	25e6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    25de:	480c      	ldr	r0, [pc, #48]	; (2610 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    25e0:	7840      	ldrb	r0, [r0, #1]
    25e2:	f001 fa27 	bl	3a34 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    25e6:	7f20      	ldrb	r0, [r4, #28]
    25e8:	2800      	cmp	r0, #0
    25ea:	bf04      	itt	eq
    25ec:	b003      	addeq	sp, #12
    25ee:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25f2:	f000 fd5f 	bl	30b4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    25f6:	7726      	strb	r6, [r4, #28]
    25f8:	7766      	strb	r6, [r4, #29]
    25fa:	b003      	add	sp, #12
    25fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2600:	20000ea4 	.word	0x20000ea4
    2604:	20000b24 	.word	0x20000b24
    2608:	20000016 	.word	0x20000016
    260c:	20000e24 	.word	0x20000e24
    2610:	20000014 	.word	0x20000014

00002614 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2614:	b510      	push	{r4, lr}
    2616:	4c32      	ldr	r4, [pc, #200]	; (26e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2618:	b082      	sub	sp, #8
    261a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    261e:	2920      	cmp	r1, #32
    2620:	d008      	beq.n	2634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2622:	68a1      	ldr	r1, [r4, #8]
    2624:	f1b1 3fff 	cmp.w	r1, #4294967295
    2628:	d009      	beq.n	263e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    262a:	f640 21e9 	movw	r1, #2793	; 0xae9
    262e:	2070      	movs	r0, #112	; 0x70
    2630:	f001 f930 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2634:	f640 21e8 	movw	r1, #2792	; 0xae8
    2638:	2070      	movs	r0, #112	; 0x70
    263a:	f001 f92b 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    263e:	6862      	ldr	r2, [r4, #4]
    2640:	4601      	mov	r1, r0
    2642:	4b28      	ldr	r3, [pc, #160]	; (26e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2644:	1850      	adds	r0, r2, r1
    2646:	429a      	cmp	r2, r3
    2648:	d904      	bls.n	2654 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    264a:	f240 6109 	movw	r1, #1545	; 0x609
    264e:	2070      	movs	r0, #112	; 0x70
    2650:	f001 f920 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2654:	4a24      	ldr	r2, [pc, #144]	; (26e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2656:	4291      	cmp	r1, r2
    2658:	dd04      	ble.n	2664 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    265a:	f240 610a 	movw	r1, #1546	; 0x60a
    265e:	2070      	movs	r0, #112	; 0x70
    2660:	f001 f918 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2664:	4a21      	ldr	r2, [pc, #132]	; (26ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2666:	4291      	cmp	r1, r2
    2668:	da04      	bge.n	2674 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    266a:	f240 610b 	movw	r1, #1547	; 0x60b
    266e:	2070      	movs	r0, #112	; 0x70
    2670:	f001 f910 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2674:	491e      	ldr	r1, [pc, #120]	; (26f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2676:	4281      	cmp	r1, r0
    2678:	bfdc      	itt	le
    267a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    267e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2682:	dd05      	ble.n	2690 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2684:	2800      	cmp	r0, #0
    2686:	bfbc      	itt	lt
    2688:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    268c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2690:	aa01      	add	r2, sp, #4
    2692:	4669      	mov	r1, sp
    2694:	f000 f8b8 	bl	2808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2698:	f89d 0004 	ldrb.w	r0, [sp, #4]
    269c:	280f      	cmp	r0, #15
    269e:	bf8c      	ite	hi
    26a0:	2001      	movhi	r0, #1
    26a2:	2000      	movls	r0, #0
    26a4:	9900      	ldr	r1, [sp, #0]
    26a6:	4408      	add	r0, r1
    26a8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    26ac:	60a1      	str	r1, [r4, #8]
    26ae:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    26b2:	f88d 0000 	strb.w	r0, [sp]
    26b6:	f89d 0000 	ldrb.w	r0, [sp]
    26ba:	2800      	cmp	r0, #0
    26bc:	bf04      	itt	eq
    26be:	b002      	addeq	sp, #8
    26c0:	bd10      	popeq	{r4, pc}
    26c2:	2301      	movs	r3, #1
    26c4:	2203      	movs	r2, #3
    26c6:	2005      	movs	r0, #5
    26c8:	f000 fb7a 	bl	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26cc:	2800      	cmp	r0, #0
    26ce:	bf1c      	itt	ne
    26d0:	b002      	addne	sp, #8
    26d2:	bd10      	popne	{r4, pc}
    26d4:	f640 21f1 	movw	r1, #2801	; 0xaf1
    26d8:	2070      	movs	r0, #112	; 0x70
    26da:	f001 f8db 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26de:	0000      	.short	0x0000
    26e0:	20000ea4 	.word	0x20000ea4
    26e4:	1e847fff 	.word	0x1e847fff
    26e8:	07a12000 	.word	0x07a12000
    26ec:	f85ee000 	.word	0xf85ee000
    26f0:	1e848000 	.word	0x1e848000

000026f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    26f4:	b570      	push	{r4, r5, r6, lr}
    26f6:	4c1e      	ldr	r4, [pc, #120]	; (2770 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    26f8:	2120      	movs	r1, #32
    26fa:	f884 1020 	strb.w	r1, [r4, #32]
    26fe:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2702:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2706:	2000      	movs	r0, #0
    2708:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    270c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2710:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2714:	1e42      	subs	r2, r0, #1
    2716:	60a2      	str	r2, [r4, #8]
    2718:	6020      	str	r0, [r4, #0]
    271a:	77a0      	strb	r0, [r4, #30]
    271c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2720:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2724:	7720      	strb	r0, [r4, #28]
    2726:	7760      	strb	r0, [r4, #29]
    2728:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    272c:	4911      	ldr	r1, [pc, #68]	; (2774 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    272e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2732:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2736:	7008      	strb	r0, [r1, #0]
    2738:	7048      	strb	r0, [r1, #1]
    273a:	8048      	strh	r0, [r1, #2]
    273c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2740:	2210      	movs	r2, #16
    2742:	7088      	strb	r0, [r1, #2]
    2744:	f801 0f04 	strb.w	r0, [r1, #4]!
    2748:	1e52      	subs	r2, r2, #1
    274a:	d1fa      	bne.n	2742 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    274c:	4d0a      	ldr	r5, [pc, #40]	; (2778 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    274e:	2601      	movs	r6, #1
    2750:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2754:	20ff      	movs	r0, #255	; 0xff
    2756:	7028      	strb	r0, [r5, #0]
    2758:	4808      	ldr	r0, [pc, #32]	; (277c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    275a:	f001 f94d 	bl	39f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    275e:	7068      	strb	r0, [r5, #1]
    2760:	f001 f9a8 	bl	3ab4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2764:	60a8      	str	r0, [r5, #8]
    2766:	f000 fced 	bl	3144 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    276a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    276e:	bd70      	pop	{r4, r5, r6, pc}
    2770:	20000ea4 	.word	0x20000ea4
    2774:	20000016 	.word	0x20000016
    2778:	20000014 	.word	0x20000014
    277c:	000010f9 	.word	0x000010f9

00002780 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2780:	b570      	push	{r4, r5, r6, lr}
    2782:	4604      	mov	r4, r0
    2784:	4615      	mov	r5, r2
    2786:	4608      	mov	r0, r1
    2788:	f009 fa2d 	bl	bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    278c:	4a0f      	ldr	r2, [pc, #60]	; (27cc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    278e:	1b01      	subs	r1, r0, r4
    2790:	1c53      	adds	r3, r2, #1
    2792:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    2796:	bf24      	itt	cs
    2798:	eba4 0c00 	subcs.w	ip, r4, r0
    279c:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    27a0:	d30b      	bcc.n	27ba <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    27a2:	428a      	cmp	r2, r1
    27a4:	d203      	bcs.n	27ae <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    27a6:	1b11      	subs	r1, r2, r4
    27a8:	4408      	add	r0, r1
    27aa:	1c41      	adds	r1, r0, #1
    27ac:	e005      	b.n	27ba <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    27ae:	4562      	cmp	r2, ip
    27b0:	d207      	bcs.n	27c2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    27b2:	1a10      	subs	r0, r2, r0
    27b4:	4420      	add	r0, r4
    27b6:	1c40      	adds	r0, r0, #1
    27b8:	4241      	negs	r1, r0
    27ba:	f101 000f 	add.w	r0, r1, #15
    27be:	1a28      	subs	r0, r5, r0
    27c0:	bd70      	pop	{r4, r5, r6, pc}
    27c2:	f640 310c 	movw	r1, #2828	; 0xb0c
    27c6:	2070      	movs	r0, #112	; 0x70
    27c8:	f001 f864 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27cc:	1e847fff 	.word	0x1e847fff

000027d0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    27d0:	0b41      	lsrs	r1, r0, #13
    27d2:	f248 6237 	movw	r2, #34359	; 0x8637
    27d6:	4351      	muls	r1, r2
    27d8:	0c0a      	lsrs	r2, r1, #16
    27da:	4b09      	ldr	r3, [pc, #36]	; (2800 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    27dc:	0251      	lsls	r1, r2, #9
    27de:	fb02 0203 	mla	r2, r2, r3, r0
    27e2:	4808      	ldr	r0, [pc, #32]	; (2804 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    27e4:	4350      	muls	r0, r2
    27e6:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    27ea:	306e      	adds	r0, #110	; 0x6e
    27ec:	0d40      	lsrs	r0, r0, #21
    27ee:	425b      	negs	r3, r3
    27f0:	fb10 f303 	smulbb	r3, r0, r3
    27f4:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    27f8:	bf88      	it	hi
    27fa:	1c49      	addhi	r1, r1, #1
    27fc:	4408      	add	r0, r1
    27fe:	4770      	bx	lr
    2800:	ffffc2f7 	.word	0xffffc2f7
    2804:	00010c6f 	.word	0x00010c6f

00002808 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2808:	0b43      	lsrs	r3, r0, #13
    280a:	f248 6c37 	movw	ip, #34359	; 0x8637
    280e:	fb03 f30c 	mul.w	r3, r3, ip
    2812:	b430      	push	{r4, r5}
    2814:	0c1b      	lsrs	r3, r3, #16
    2816:	f8df c044 	ldr.w	ip, [pc, #68]	; 285c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    281a:	025c      	lsls	r4, r3, #9
    281c:	fb03 030c 	mla	r3, r3, ip, r0
    2820:	480f      	ldr	r0, [pc, #60]	; (2860 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2822:	4358      	muls	r0, r3
    2824:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2828:	eb04 000c 	add.w	r0, r4, ip
    282c:	f643 5409 	movw	r4, #15625	; 0x3d09
    2830:	fb1c f404 	smulbb	r4, ip, r4
    2834:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2838:	f643 5508 	movw	r5, #15624	; 0x3d08
    283c:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2840:	442c      	add	r4, r5
    2842:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2846:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    284a:	bf84      	itt	hi
    284c:	f04f 0c00 	movhi.w	ip, #0
    2850:	1c40      	addhi	r0, r0, #1
    2852:	6008      	str	r0, [r1, #0]
    2854:	f882 c000 	strb.w	ip, [r2]
    2858:	bc30      	pop	{r4, r5}
    285a:	4770      	bx	lr
    285c:	ffffc2f7 	.word	0xffffc2f7
    2860:	00010c6f 	.word	0x00010c6f

00002864 <MPSL_IRQ_RTC0_Handler>:
    2864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2868:	4c38      	ldr	r4, [pc, #224]	; (294c <MPSL_IRQ_RTC0_Handler+0xe8>)
    286a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    286e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2950 <MPSL_IRQ_RTC0_Handler+0xec>
    2872:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2876:	f44f 6600 	mov.w	r6, #2048	; 0x800
    287a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    287e:	f04f 0500 	mov.w	r5, #0
    2882:	bf1c      	itt	ne
    2884:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2888:	2800      	cmpne	r0, #0
    288a:	d017      	beq.n	28bc <MPSL_IRQ_RTC0_Handler+0x58>
    288c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2890:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2894:	482f      	ldr	r0, [pc, #188]	; (2954 <MPSL_IRQ_RTC0_Handler+0xf0>)
    2896:	6800      	ldr	r0, [r0, #0]
    2898:	f8d8 1000 	ldr.w	r1, [r8]
    289c:	eba0 0001 	sub.w	r0, r0, r1
    28a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28a4:	2802      	cmp	r0, #2
    28a6:	d302      	bcc.n	28ae <MPSL_IRQ_RTC0_Handler+0x4a>
    28a8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28ac:	d306      	bcc.n	28bc <MPSL_IRQ_RTC0_Handler+0x58>
    28ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    28b2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28b6:	2004      	movs	r0, #4
    28b8:	f7fe ff28 	bl	170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28bc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28c0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    28c4:	bf1c      	itt	ne
    28c6:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    28ca:	2800      	cmpne	r0, #0
    28cc:	d017      	beq.n	28fe <MPSL_IRQ_RTC0_Handler+0x9a>
    28ce:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    28d2:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28d6:	4820      	ldr	r0, [pc, #128]	; (2958 <MPSL_IRQ_RTC0_Handler+0xf4>)
    28d8:	6800      	ldr	r0, [r0, #0]
    28da:	f8d8 1000 	ldr.w	r1, [r8]
    28de:	eba0 0001 	sub.w	r0, r0, r1
    28e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28e6:	2802      	cmp	r0, #2
    28e8:	d302      	bcc.n	28f0 <MPSL_IRQ_RTC0_Handler+0x8c>
    28ea:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28ee:	d306      	bcc.n	28fe <MPSL_IRQ_RTC0_Handler+0x9a>
    28f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    28f4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28f8:	2005      	movs	r0, #5
    28fa:	f7fe ff07 	bl	170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2902:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2906:	bf1a      	itte	ne
    2908:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    290c:	2800      	cmpne	r0, #0
    290e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2912:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2916:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    291a:	4810      	ldr	r0, [pc, #64]	; (295c <MPSL_IRQ_RTC0_Handler+0xf8>)
    291c:	6800      	ldr	r0, [r0, #0]
    291e:	f8d8 1000 	ldr.w	r1, [r8]
    2922:	eba0 0001 	sub.w	r0, r0, r1
    2926:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    292a:	2802      	cmp	r0, #2
    292c:	d304      	bcc.n	2938 <MPSL_IRQ_RTC0_Handler+0xd4>
    292e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2932:	bf38      	it	cc
    2934:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2938:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    293c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2944:	2006      	movs	r0, #6
    2946:	f7fe bee1 	b.w	170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    294a:	0000      	.short	0x0000
    294c:	4000b000 	.word	0x4000b000
    2950:	4000b504 	.word	0x4000b504
    2954:	4000b540 	.word	0x4000b540
    2958:	4000b544 	.word	0x4000b544
    295c:	4000b548 	.word	0x4000b548

00002960 <MPSL_IRQ_TIMER0_Handler>:
    2960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2964:	4d3a      	ldr	r5, [pc, #232]	; (2a50 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2966:	7828      	ldrb	r0, [r5, #0]
    2968:	2804      	cmp	r0, #4
    296a:	d06c      	beq.n	2a46 <MPSL_IRQ_TIMER0_Handler+0xe6>
    296c:	1ce8      	adds	r0, r5, #3
    296e:	2201      	movs	r2, #1
    2970:	7801      	ldrb	r1, [r0, #0]
    2972:	b159      	cbz	r1, 298c <MPSL_IRQ_TIMER0_Handler+0x2c>
    2974:	2901      	cmp	r1, #1
    2976:	bf08      	it	eq
    2978:	706a      	strbeq	r2, [r5, #1]
    297a:	d002      	beq.n	2982 <MPSL_IRQ_TIMER0_Handler+0x22>
    297c:	7869      	ldrb	r1, [r5, #1]
    297e:	2900      	cmp	r1, #0
    2980:	d05c      	beq.n	2a3c <MPSL_IRQ_TIMER0_Handler+0xdc>
    2982:	2102      	movs	r1, #2
    2984:	7001      	strb	r1, [r0, #0]
    2986:	7840      	ldrb	r0, [r0, #1]
    2988:	f000 fae2 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    298c:	4c31      	ldr	r4, [pc, #196]	; (2a54 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    298e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2992:	f04f 0800 	mov.w	r8, #0
    2996:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    299a:	f44f 7680 	mov.w	r6, #256	; 0x100
    299e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    29a2:	bf1c      	itt	ne
    29a4:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    29a8:	2800      	cmpne	r0, #0
    29aa:	d008      	beq.n	29be <MPSL_IRQ_TIMER0_Handler+0x5e>
    29ac:	f04f 0003 	mov.w	r0, #3
    29b0:	f000 face 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29b4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    29b8:	2003      	movs	r0, #3
    29ba:	f7fe fea7 	bl	170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29be:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29c2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    29c6:	bf1c      	itt	ne
    29c8:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    29cc:	2800      	cmpne	r0, #0
    29ce:	d008      	beq.n	29e2 <MPSL_IRQ_TIMER0_Handler+0x82>
    29d0:	f04f 0002 	mov.w	r0, #2
    29d4:	f000 fabc 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29d8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    29dc:	2002      	movs	r0, #2
    29de:	f7fe fe95 	bl	170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29e2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29e6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    29ea:	bf1c      	itt	ne
    29ec:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    29f0:	2800      	cmpne	r0, #0
    29f2:	d008      	beq.n	2a06 <MPSL_IRQ_TIMER0_Handler+0xa6>
    29f4:	f04f 0001 	mov.w	r0, #1
    29f8:	f000 faaa 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29fc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2a00:	2001      	movs	r0, #1
    2a02:	f7fe fe83 	bl	170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a06:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2a0a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2a0e:	bf1a      	itte	ne
    2a10:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2a14:	2800      	cmpne	r0, #0
    2a16:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a1a:	f04f 0000 	mov.w	r0, #0
    2a1e:	f000 fa97 	bl	2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a22:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2a26:	2004      	movs	r0, #4
    2a28:	7028      	strb	r0, [r5, #0]
    2a2a:	f8c5 8008 	str.w	r8, [r5, #8]
    2a2e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a36:	2000      	movs	r0, #0
    2a38:	f7fe be68 	b.w	170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a3c:	f44f 715a 	mov.w	r1, #872	; 0x368
    2a40:	206c      	movs	r0, #108	; 0x6c
    2a42:	f000 ff27 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a4a:	2007      	movs	r0, #7
    2a4c:	f7fe be5e 	b.w	170c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a50:	20000020 	.word	0x20000020
    2a54:	40008000 	.word	0x40008000
    2a58:	2201      	movs	r2, #1
    2a5a:	0213      	lsls	r3, r2, #8
    2a5c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2a60:	2000      	movs	r0, #0
    2a62:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2a66:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2a6a:	f3bf 8f4f 	dsb	sy
    2a6e:	f3bf 8f6f 	isb	sy
    2a72:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2a76:	490c      	ldr	r1, [pc, #48]	; (2aa8 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2a78:	604a      	str	r2, [r1, #4]
    2a7a:	1e43      	subs	r3, r0, #1
    2a7c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a80:	4b0a      	ldr	r3, [pc, #40]	; (2aac <MPSL_IRQ_TIMER0_Handler+0x14c>)
    2a82:	6018      	str	r0, [r3, #0]
    2a84:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2a88:	1d1b      	adds	r3, r3, #4
    2a8a:	6018      	str	r0, [r3, #0]
    2a8c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2a90:	1d1b      	adds	r3, r3, #4
    2a92:	6018      	str	r0, [r3, #0]
    2a94:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2a98:	1d1b      	adds	r3, r3, #4
    2a9a:	6018      	str	r0, [r3, #0]
    2a9c:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2aa0:	610a      	str	r2, [r1, #16]
    2aa2:	4903      	ldr	r1, [pc, #12]	; (2ab0 <MPSL_IRQ_TIMER0_Handler+0x150>)
    2aa4:	7048      	strb	r0, [r1, #1]
    2aa6:	4770      	bx	lr
    2aa8:	40008000 	.word	0x40008000
    2aac:	40008540 	.word	0x40008540
    2ab0:	20000020 	.word	0x20000020

00002ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2ab4:	4801      	ldr	r0, [pc, #4]	; (2abc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2ab6:	6800      	ldr	r0, [r0, #0]
    2ab8:	4770      	bx	lr
    2aba:	0000      	.short	0x0000
    2abc:	4000b504 	.word	0x4000b504

00002ac0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2ac0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2ac4:	4e41      	ldr	r6, [pc, #260]	; (2bcc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2ac6:	4604      	mov	r4, r0
    2ac8:	1ef7      	subs	r7, r6, #3
    2aca:	f896 c000 	ldrb.w	ip, [r6]
    2ace:	68f8      	ldr	r0, [r7, #12]
    2ad0:	f1bc 0f01 	cmp.w	ip, #1
    2ad4:	bf04      	itt	eq
    2ad6:	42a0      	cmpeq	r0, r4
    2ad8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2adc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2ae0:	4a3b      	ldr	r2, [pc, #236]	; (2bd0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2ae2:	6011      	str	r1, [r2, #0]
    2ae4:	493b      	ldr	r1, [pc, #236]	; (2bd4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2ae6:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2aea:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2aee:	4a3a      	ldr	r2, [pc, #232]	; (2bd8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2af0:	f04f 0500 	mov.w	r5, #0
    2af4:	f1bc 0f00 	cmp.w	ip, #0
    2af8:	d057      	beq.n	2baa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2afa:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2afe:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b02:	6015      	str	r5, [r2, #0]
    2b04:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2b08:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2b0c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2b10:	f04f 0801 	mov.w	r8, #1
    2b14:	2a00      	cmp	r2, #0
    2b16:	bf04      	itt	eq
    2b18:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2b1c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b24:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2b28:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b2c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2b30:	4a2a      	ldr	r2, [pc, #168]	; (2bdc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2b32:	f8d2 a000 	ldr.w	sl, [r2]
    2b36:	eba4 0a0a 	sub.w	sl, r4, sl
    2b3a:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2b3e:	f1bb 0f02 	cmp.w	fp, #2
    2b42:	d33c      	bcc.n	2bbe <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2b44:	f04f 0a02 	mov.w	sl, #2
    2b48:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2b4c:	d237      	bcs.n	2bbe <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2b4e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2b52:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2b56:	f1bc 0f00 	cmp.w	ip, #0
    2b5a:	d005      	beq.n	2b68 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2b5c:	6811      	ldr	r1, [r2, #0]
    2b5e:	1a41      	subs	r1, r0, r1
    2b60:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2b64:	2902      	cmp	r1, #2
    2b66:	d3f9      	bcc.n	2b5c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2b68:	f8c7 8008 	str.w	r8, [r7, #8]
    2b6c:	703d      	strb	r5, [r7, #0]
    2b6e:	f7ff ff73 	bl	2a58 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2b72:	481b      	ldr	r0, [pc, #108]	; (2be0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2b74:	6005      	str	r5, [r0, #0]
    2b76:	1d00      	adds	r0, r0, #4
    2b78:	f8c0 a000 	str.w	sl, [r0]
    2b7c:	4919      	ldr	r1, [pc, #100]	; (2be4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2b7e:	2004      	movs	r0, #4
    2b80:	6008      	str	r0, [r1, #0]
    2b82:	4919      	ldr	r1, [pc, #100]	; (2be8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2b84:	f8c1 800c 	str.w	r8, [r1, #12]
    2b88:	68ba      	ldr	r2, [r7, #8]
    2b8a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2b8e:	0181      	lsls	r1, r0, #6
    2b90:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2b94:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2b98:	4a14      	ldr	r2, [pc, #80]	; (2bec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2b9a:	0741      	lsls	r1, r0, #29
    2b9c:	6011      	str	r1, [r2, #0]
    2b9e:	60fc      	str	r4, [r7, #12]
    2ba0:	7070      	strb	r0, [r6, #1]
    2ba2:	f886 8000 	strb.w	r8, [r6]
    2ba6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2baa:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2bae:	4b10      	ldr	r3, [pc, #64]	; (2bf0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2bb0:	601d      	str	r5, [r3, #0]
    2bb2:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2bb6:	6015      	str	r5, [r2, #0]
    2bb8:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2bbc:	e7a4      	b.n	2b08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2bbe:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2bc2:	f240 11f1 	movw	r1, #497	; 0x1f1
    2bc6:	206c      	movs	r0, #108	; 0x6c
    2bc8:	f000 fe64 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bcc:	20000023 	.word	0x20000023
    2bd0:	4001f508 	.word	0x4001f508
    2bd4:	4000b000 	.word	0x4000b000
    2bd8:	4000b544 	.word	0x4000b544
    2bdc:	4000b504 	.word	0x4000b504
    2be0:	40008504 	.word	0x40008504
    2be4:	40008510 	.word	0x40008510
    2be8:	40008000 	.word	0x40008000
    2bec:	4001f504 	.word	0x4001f504
    2bf0:	4000b540 	.word	0x4000b540

00002bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bf8:	4c2b      	ldr	r4, [pc, #172]	; (2ca8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2bfa:	68e1      	ldr	r1, [r4, #12]
    2bfc:	4281      	cmp	r1, r0
    2bfe:	bf14      	ite	ne
    2c00:	2201      	movne	r2, #1
    2c02:	2200      	moveq	r2, #0
    2c04:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2cac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2c08:	f89c 7000 	ldrb.w	r7, [ip]
    2c0c:	2f02      	cmp	r7, #2
    2c0e:	d002      	beq.n	2c16 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2c10:	2a00      	cmp	r2, #0
    2c12:	d038      	beq.n	2c86 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2c14:	e003      	b.n	2c1e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2c16:	2a00      	cmp	r2, #0
    2c18:	bf08      	it	eq
    2c1a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c1e:	7862      	ldrb	r2, [r4, #1]
    2c20:	b382      	cbz	r2, 2c84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2c22:	4b23      	ldr	r3, [pc, #140]	; (2cb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c28:	601a      	str	r2, [r3, #0]
    2c2a:	4b22      	ldr	r3, [pc, #136]	; (2cb4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2c2c:	1395      	asrs	r5, r2, #14
    2c2e:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2c32:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2c36:	2600      	movs	r6, #0
    2c38:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2c3c:	4a1e      	ldr	r2, [pc, #120]	; (2cb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2c3e:	f8d2 8000 	ldr.w	r8, [r2]
    2c42:	eba0 0808 	sub.w	r8, r0, r8
    2c46:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2c4a:	f1b8 0f02 	cmp.w	r8, #2
    2c4e:	d324      	bcc.n	2c9a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2c50:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2c54:	d221      	bcs.n	2c9a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2c56:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2c5a:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2c5e:	b12f      	cbz	r7, 2c6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2c60:	6813      	ldr	r3, [r2, #0]
    2c62:	1acb      	subs	r3, r1, r3
    2c64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c68:	2b02      	cmp	r3, #2
    2c6a:	d3f9      	bcc.n	2c60 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2c6c:	4b13      	ldr	r3, [pc, #76]	; (2cbc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2c6e:	2102      	movs	r1, #2
    2c70:	074a      	lsls	r2, r1, #29
    2c72:	601a      	str	r2, [r3, #0]
    2c74:	60e0      	str	r0, [r4, #12]
    2c76:	2004      	movs	r0, #4
    2c78:	f88c 0001 	strb.w	r0, [ip, #1]
    2c7c:	f88c 1000 	strb.w	r1, [ip]
    2c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c84:	e004      	b.n	2c90 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2c86:	f240 11ff 	movw	r1, #511	; 0x1ff
    2c8a:	206c      	movs	r0, #108	; 0x6c
    2c8c:	f000 fe02 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c90:	f240 2103 	movw	r1, #515	; 0x203
    2c94:	206c      	movs	r0, #108	; 0x6c
    2c96:	f000 fdfd 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c9a:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2c9e:	f240 210f 	movw	r1, #527	; 0x20f
    2ca2:	206c      	movs	r0, #108	; 0x6c
    2ca4:	f000 fdf6 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ca8:	20000020 	.word	0x20000020
    2cac:	20000023 	.word	0x20000023
    2cb0:	4001f508 	.word	0x4001f508
    2cb4:	4000b000 	.word	0x4000b000
    2cb8:	4000b504 	.word	0x4000b504
    2cbc:	4001f504 	.word	0x4001f504

00002cc0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2cc0:	4801      	ldr	r0, [pc, #4]	; (2cc8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2cc2:	68c0      	ldr	r0, [r0, #12]
    2cc4:	4770      	bx	lr
    2cc6:	0000      	.short	0x0000
    2cc8:	20000020 	.word	0x20000020

00002ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cd0:	4833      	ldr	r0, [pc, #204]	; (2da0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2cd2:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2cd6:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2cda:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2da4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2cde:	4a32      	ldr	r2, [pc, #200]	; (2da8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2ce0:	2100      	movs	r1, #0
    2ce2:	f89c 3000 	ldrb.w	r3, [ip]
    2ce6:	b163      	cbz	r3, 2d02 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2ce8:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2cec:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2cf0:	6011      	str	r1, [r2, #0]
    2cf2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2cf6:	bf00      	nop
    2cf8:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2cfc:	2201      	movs	r2, #1
    2cfe:	b980      	cbnz	r0, 2d22 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2d00:	e009      	b.n	2d16 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2d02:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2d06:	4c29      	ldr	r4, [pc, #164]	; (2dac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2d08:	6021      	str	r1, [r4, #0]
    2d0a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2d0e:	6011      	str	r1, [r2, #0]
    2d10:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2d14:	e7f0      	b.n	2cf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2d16:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2d1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2d1e:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2d22:	2b02      	cmp	r3, #2
    2d24:	d004      	beq.n	2d30 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2d26:	f240 211b 	movw	r1, #539	; 0x21b
    2d2a:	206c      	movs	r0, #108	; 0x6c
    2d2c:	f000 fdb2 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d30:	4e1f      	ldr	r6, [pc, #124]	; (2db0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2d32:	6830      	ldr	r0, [r6, #0]
    2d34:	4c1f      	ldr	r4, [pc, #124]	; (2db4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2d36:	1cc0      	adds	r0, r0, #3
    2d38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d3c:	68e3      	ldr	r3, [r4, #12]
    2d3e:	4d1e      	ldr	r5, [pc, #120]	; (2db8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2d40:	4298      	cmp	r0, r3
    2d42:	d00b      	beq.n	2d5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2d44:	6837      	ldr	r7, [r6, #0]
    2d46:	1bdf      	subs	r7, r3, r7
    2d48:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2d4c:	2f04      	cmp	r7, #4
    2d4e:	d305      	bcc.n	2d5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2d50:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2d54:	d202      	bcs.n	2d5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2d56:	f7ff feb3 	bl	2ac0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2d5a:	e01b      	b.n	2d94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2d5c:	6830      	ldr	r0, [r6, #0]
    2d5e:	1a18      	subs	r0, r3, r0
    2d60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d64:	2802      	cmp	r0, #2
    2d66:	d313      	bcc.n	2d90 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2d68:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2d6c:	d210      	bcs.n	2d90 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2d6e:	4b13      	ldr	r3, [pc, #76]	; (2dbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2d70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2d74:	6018      	str	r0, [r3, #0]
    2d76:	60a2      	str	r2, [r4, #8]
    2d78:	7021      	strb	r1, [r4, #0]
    2d7a:	606a      	str	r2, [r5, #4]
    2d7c:	60ea      	str	r2, [r5, #12]
    2d7e:	0040      	lsls	r0, r0, #1
    2d80:	1f19      	subs	r1, r3, #4
    2d82:	6008      	str	r0, [r1, #0]
    2d84:	2004      	movs	r0, #4
    2d86:	f88c 0001 	strb.w	r0, [ip, #1]
    2d8a:	f88c 2000 	strb.w	r2, [ip]
    2d8e:	e001      	b.n	2d94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2d90:	60a2      	str	r2, [r4, #8]
    2d92:	7021      	strb	r1, [r4, #0]
    2d94:	68a0      	ldr	r0, [r4, #8]
    2d96:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d9e:	0000      	.short	0x0000
    2da0:	4000b000 	.word	0x4000b000
    2da4:	20000023 	.word	0x20000023
    2da8:	4000b544 	.word	0x4000b544
    2dac:	4000b540 	.word	0x4000b540
    2db0:	4000b504 	.word	0x4000b504
    2db4:	20000020 	.word	0x20000020
    2db8:	40008000 	.word	0x40008000
    2dbc:	4001f508 	.word	0x4001f508

00002dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2dc4:	f8df c174 	ldr.w	ip, [pc, #372]	; 2f3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2dc8:	2701      	movs	r7, #1
    2dca:	f04f 0800 	mov.w	r8, #0
    2dce:	f89c 5000 	ldrb.w	r5, [ip]
    2dd2:	f89c c001 	ldrb.w	ip, [ip, #1]
    2dd6:	2807      	cmp	r0, #7
    2dd8:	d27e      	bcs.n	2ed8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2dda:	e8df f000 	tbb	[pc, r0]
    2dde:	0404      	.short	0x0404
    2de0:	6a6a0404 	.word	0x6a6a0404
    2de4:	006a      	.short	0x006a
    2de6:	4c56      	ldr	r4, [pc, #344]	; (2f40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2de8:	68e6      	ldr	r6, [r4, #12]
    2dea:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2dee:	bf04      	itt	eq
    2df0:	7864      	ldrbeq	r4, [r4, #1]
    2df2:	2c00      	cmpeq	r4, #0
    2df4:	d002      	beq.n	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2df6:	2d02      	cmp	r5, #2
    2df8:	d005      	beq.n	2e06 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2dfa:	e03c      	b.n	2e76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2dfc:	f240 214e 	movw	r1, #590	; 0x24e
    2e00:	206c      	movs	r0, #108	; 0x6c
    2e02:	f000 fd47 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e06:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2e0a:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2e0e:	f1ac 0404 	sub.w	r4, ip, #4
    2e12:	0624      	lsls	r4, r4, #24
    2e14:	0da4      	lsrs	r4, r4, #22
    2e16:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2e1a:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2e1e:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2e22:	2400      	movs	r4, #0
    2e24:	2d01      	cmp	r5, #1
    2e26:	d002      	beq.n	2e2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2e28:	2d02      	cmp	r5, #2
    2e2a:	d011      	beq.n	2e50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2e2c:	e020      	b.n	2e70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e2e:	f1bc 0f04 	cmp.w	ip, #4
    2e32:	d205      	bcs.n	2e40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2e34:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2e38:	f1ba 0f00 	cmp.w	sl, #0
    2e3c:	d118      	bne.n	2e70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e3e:	e004      	b.n	2e4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2e40:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2e44:	f1ba 0f00 	cmp.w	sl, #0
    2e48:	d112      	bne.n	2e70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e4a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2e4e:	e00f      	b.n	2e70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e50:	f1bc 0f04 	cmp.w	ip, #4
    2e54:	d205      	bcs.n	2e62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2e56:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2e5a:	f1ba 0f00 	cmp.w	sl, #0
    2e5e:	d107      	bne.n	2e70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e60:	e004      	b.n	2e6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2e62:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2e66:	f1ba 0f00 	cmp.w	sl, #0
    2e6a:	d101      	bne.n	2e70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2e6c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2e70:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2e74:	d1d5      	bne.n	2e22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2e76:	4c33      	ldr	r4, [pc, #204]	; (2f44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2e78:	f100 0c10 	add.w	ip, r0, #16
    2e7c:	fa07 fc0c 	lsl.w	ip, r7, ip
    2e80:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2e84:	0080      	lsls	r0, r0, #2
    2e86:	4420      	add	r0, r4
    2e88:	b152      	cbz	r2, 2ea0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2e8a:	6407      	str	r7, [r0, #64]	; 0x40
    2e8c:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2e90:	1b8d      	subs	r5, r1, r6
    2e92:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e96:	42aa      	cmp	r2, r5
    2e98:	bf98      	it	ls
    2e9a:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e9e:	d243      	bcs.n	2f28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2ea0:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2ea4:	2b01      	cmp	r3, #1
    2ea6:	bf08      	it	eq
    2ea8:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2eac:	2001      	movs	r0, #1
    2eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2eb2:	b135      	cbz	r5, 2ec2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2eb4:	4584      	cmp	ip, r0
    2eb6:	d104      	bne.n	2ec2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2eb8:	f240 2171 	movw	r1, #625	; 0x271
    2ebc:	206c      	movs	r0, #108	; 0x6c
    2ebe:	f000 fce9 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ec2:	1f00      	subs	r0, r0, #4
    2ec4:	b2c0      	uxtb	r0, r0
    2ec6:	2b01      	cmp	r3, #1
    2ec8:	bf0c      	ite	eq
    2eca:	2401      	moveq	r4, #1
    2ecc:	2400      	movne	r4, #0
    2ece:	2803      	cmp	r0, #3
    2ed0:	d306      	bcc.n	2ee0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2ed2:	f240 114b 	movw	r1, #331	; 0x14b
    2ed6:	e000      	b.n	2eda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2ed8:	e02b      	b.n	2f32 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2eda:	206c      	movs	r0, #108	; 0x6c
    2edc:	f000 fcda 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ee0:	f8df c064 	ldr.w	ip, [pc, #100]	; 2f48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2ee4:	f100 0310 	add.w	r3, r0, #16
    2ee8:	fa07 f303 	lsl.w	r3, r7, r3
    2eec:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2ef0:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2ef4:	0080      	lsls	r0, r0, #2
    2ef6:	4460      	add	r0, ip
    2ef8:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2efc:	b14a      	cbz	r2, 2f12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2efe:	4d13      	ldr	r5, [pc, #76]	; (2f4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2f00:	682e      	ldr	r6, [r5, #0]
    2f02:	1b8d      	subs	r5, r1, r6
    2f04:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2f08:	42aa      	cmp	r2, r5
    2f0a:	bf98      	it	ls
    2f0c:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2f10:	d20a      	bcs.n	2f28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2f12:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2f16:	2c00      	cmp	r4, #0
    2f18:	bf18      	it	ne
    2f1a:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2f1e:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2f22:	2001      	movs	r0, #1
    2f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f28:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2f2c:	2000      	movs	r0, #0
    2f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f32:	f240 2176 	movw	r1, #630	; 0x276
    2f36:	206c      	movs	r0, #108	; 0x6c
    2f38:	f000 fcac 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f3c:	20000023 	.word	0x20000023
    2f40:	20000020 	.word	0x20000020
    2f44:	40008000 	.word	0x40008000
    2f48:	4000b000 	.word	0x4000b000
    2f4c:	4000b504 	.word	0x4000b504

00002f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f52:	2701      	movs	r7, #1
    2f54:	2400      	movs	r4, #0
    2f56:	2807      	cmp	r0, #7
    2f58:	d24c      	bcs.n	2ff4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2f5a:	e8df f000 	tbb	[pc, r0]
    2f5e:	0404      	.short	0x0404
    2f60:	16160404 	.word	0x16160404
    2f64:	0016      	.short	0x0016
    2f66:	4a26      	ldr	r2, [pc, #152]	; (3000 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2f68:	f100 0110 	add.w	r1, r0, #16
    2f6c:	fa07 f101 	lsl.w	r1, r7, r1
    2f70:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2f74:	0081      	lsls	r1, r0, #2
    2f76:	4411      	add	r1, r2
    2f78:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2f7c:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2f80:	4920      	ldr	r1, [pc, #128]	; (3004 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2f82:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2f86:	9000      	str	r0, [sp, #0]
    2f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f8a:	4d1f      	ldr	r5, [pc, #124]	; (3008 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2f8c:	1f01      	subs	r1, r0, #4
    2f8e:	b2ce      	uxtb	r6, r1
    2f90:	7829      	ldrb	r1, [r5, #0]
    2f92:	b179      	cbz	r1, 2fb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2f94:	786a      	ldrb	r2, [r5, #1]
    2f96:	4282      	cmp	r2, r0
    2f98:	d10c      	bne.n	2fb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2f9a:	4a1c      	ldr	r2, [pc, #112]	; (300c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2f9c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2fa0:	6010      	str	r0, [r2, #0]
    2fa2:	2901      	cmp	r1, #1
    2fa4:	bf08      	it	eq
    2fa6:	f7ff fd57 	bleq	2a58 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2faa:	702c      	strb	r4, [r5, #0]
    2fac:	4918      	ldr	r1, [pc, #96]	; (3010 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2fae:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2fb2:	60c8      	str	r0, [r1, #12]
    2fb4:	f106 0010 	add.w	r0, r6, #16
    2fb8:	fa07 f100 	lsl.w	r1, r7, r0
    2fbc:	4815      	ldr	r0, [pc, #84]	; (3014 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2fbe:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2fc2:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2fc6:	00b0      	lsls	r0, r6, #2
    2fc8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2fcc:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2fd0:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2fd4:	4a10      	ldr	r2, [pc, #64]	; (3018 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2fd6:	6812      	ldr	r2, [r2, #0]
    2fd8:	1a89      	subs	r1, r1, r2
    2fda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2fde:	2902      	cmp	r1, #2
    2fe0:	bf24      	itt	cs
    2fe2:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2fe6:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2fea:	480c      	ldr	r0, [pc, #48]	; (301c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2fec:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2ff0:	9000      	str	r0, [sp, #0]
    2ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ff4:	f240 21ef 	movw	r1, #751	; 0x2ef
    2ff8:	206c      	movs	r0, #108	; 0x6c
    2ffa:	f000 fc4b 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ffe:	0000      	.short	0x0000
    3000:	40008000 	.word	0x40008000
    3004:	40008140 	.word	0x40008140
    3008:	20000023 	.word	0x20000023
    300c:	4001f508 	.word	0x4001f508
    3010:	20000020 	.word	0x20000020
    3014:	4000b000 	.word	0x4000b000
    3018:	4000b504 	.word	0x4000b504
    301c:	4000b140 	.word	0x4000b140

00003020 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3020:	491e      	ldr	r1, [pc, #120]	; (309c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3022:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3026:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    302a:	481d      	ldr	r0, [pc, #116]	; (30a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    302c:	4a1d      	ldr	r2, [pc, #116]	; (30a4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    302e:	f890 c000 	ldrb.w	ip, [r0]
    3032:	2000      	movs	r0, #0
    3034:	f1bc 0f00 	cmp.w	ip, #0
    3038:	d00a      	beq.n	3050 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    303a:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    303e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3042:	6010      	str	r0, [r2, #0]
    3044:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3048:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    304c:	b981      	cbnz	r1, 3070 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    304e:	e009      	b.n	3064 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3050:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3054:	4b14      	ldr	r3, [pc, #80]	; (30a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3056:	6018      	str	r0, [r3, #0]
    3058:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    305c:	6010      	str	r0, [r2, #0]
    305e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3062:	e7f1      	b.n	3048 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3064:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3068:	f44f 6100 	mov.w	r1, #2048	; 0x800
    306c:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3070:	490e      	ldr	r1, [pc, #56]	; (30ac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3072:	f04f 32ff 	mov.w	r2, #4294967295
    3076:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    307a:	4a0d      	ldr	r2, [pc, #52]	; (30b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    307c:	6010      	str	r0, [r2, #0]
    307e:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3082:	1d12      	adds	r2, r2, #4
    3084:	6010      	str	r0, [r2, #0]
    3086:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    308a:	1d12      	adds	r2, r2, #4
    308c:	6010      	str	r0, [r2, #0]
    308e:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3092:	1d12      	adds	r2, r2, #4
    3094:	6010      	str	r0, [r2, #0]
    3096:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    309a:	4770      	bx	lr
    309c:	4000b000 	.word	0x4000b000
    30a0:	20000023 	.word	0x20000023
    30a4:	4000b544 	.word	0x4000b544
    30a8:	4000b540 	.word	0x4000b540
    30ac:	40008000 	.word	0x40008000
    30b0:	40008540 	.word	0x40008540

000030b4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    30b4:	4808      	ldr	r0, [pc, #32]	; (30d8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    30b6:	f990 0002 	ldrsb.w	r0, [r0, #2]
    30ba:	2800      	cmp	r0, #0
    30bc:	bfb8      	it	lt
    30be:	4770      	bxlt	lr
    30c0:	f000 011f 	and.w	r1, r0, #31
    30c4:	2201      	movs	r2, #1
    30c6:	fa02 f101 	lsl.w	r1, r2, r1
    30ca:	0940      	lsrs	r0, r0, #5
    30cc:	0080      	lsls	r0, r0, #2
    30ce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    30d2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    30d6:	4770      	bx	lr
    30d8:	20000020 	.word	0x20000020

000030dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    30dc:	b510      	push	{r4, lr}
    30de:	2807      	cmp	r0, #7
    30e0:	d20d      	bcs.n	30fe <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    30e2:	e8df f000 	tbb	[pc, r0]
    30e6:	0404      	.short	0x0404
    30e8:	06060404 	.word	0x06060404
    30ec:	0006      	.short	0x0006
    30ee:	4906      	ldr	r1, [pc, #24]	; (3108 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    30f0:	e002      	b.n	30f8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    30f2:	1f00      	subs	r0, r0, #4
    30f4:	4905      	ldr	r1, [pc, #20]	; (310c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    30f6:	b2c0      	uxtb	r0, r0
    30f8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    30fc:	bd10      	pop	{r4, pc}
    30fe:	f240 219a 	movw	r1, #666	; 0x29a
    3102:	206c      	movs	r0, #108	; 0x6c
    3104:	f000 fbc6 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3108:	40008140 	.word	0x40008140
    310c:	4000b140 	.word	0x4000b140

00003110 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3110:	b510      	push	{r4, lr}
    3112:	2807      	cmp	r0, #7
    3114:	d20d      	bcs.n	3132 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3116:	e8df f000 	tbb	[pc, r0]
    311a:	0404      	.short	0x0404
    311c:	06060404 	.word	0x06060404
    3120:	0006      	.short	0x0006
    3122:	4906      	ldr	r1, [pc, #24]	; (313c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3124:	e002      	b.n	312c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3126:	1f00      	subs	r0, r0, #4
    3128:	4905      	ldr	r1, [pc, #20]	; (3140 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    312a:	b2c0      	uxtb	r0, r0
    312c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3130:	bd10      	pop	{r4, pc}
    3132:	f240 219a 	movw	r1, #666	; 0x29a
    3136:	206c      	movs	r0, #108	; 0x6c
    3138:	f000 fbac 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    313c:	40008140 	.word	0x40008140
    3140:	4000b140 	.word	0x4000b140

00003144 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3144:	b570      	push	{r4, r5, r6, lr}
    3146:	4819      	ldr	r0, [pc, #100]	; (31ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    3148:	2400      	movs	r4, #0
    314a:	2104      	movs	r1, #4
    314c:	7004      	strb	r4, [r0, #0]
    314e:	1ec0      	subs	r0, r0, #3
    3150:	7001      	strb	r1, [r0, #0]
    3152:	0589      	lsls	r1, r1, #22
    3154:	60c1      	str	r1, [r0, #12]
    3156:	f7ff fc7f 	bl	2a58 <MPSL_IRQ_TIMER0_Handler+0xf8>
    315a:	2501      	movs	r5, #1
    315c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3160:	02eb      	lsls	r3, r5, #11
    3162:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3166:	f3bf 8f4f 	dsb	sy
    316a:	f3bf 8f6f 	isb	sy
    316e:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3172:	4a0f      	ldr	r2, [pc, #60]	; (31b0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    3174:	6055      	str	r5, [r2, #4]
    3176:	6095      	str	r5, [r2, #8]
    3178:	480e      	ldr	r0, [pc, #56]	; (31b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    317a:	6801      	ldr	r1, [r0, #0]
    317c:	2900      	cmp	r1, #0
    317e:	d1fc      	bne.n	317a <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    3180:	1e48      	subs	r0, r1, #1
    3182:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3186:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    318a:	480b      	ldr	r0, [pc, #44]	; (31b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    318c:	6004      	str	r4, [r0, #0]
    318e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3192:	1d00      	adds	r0, r0, #4
    3194:	6004      	str	r4, [r0, #0]
    3196:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    319a:	1d00      	adds	r0, r0, #4
    319c:	6004      	str	r4, [r0, #0]
    319e:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    31a2:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    31a6:	6015      	str	r5, [r2, #0]
    31a8:	bd70      	pop	{r4, r5, r6, pc}
    31aa:	0000      	.short	0x0000
    31ac:	20000023 	.word	0x20000023
    31b0:	4000b000 	.word	0x4000b000
    31b4:	4000b504 	.word	0x4000b504
    31b8:	4000b540 	.word	0x4000b540

000031bc <MPSL_IRQ_CLOCK_Handler>:
    31bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31c0:	4c16      	ldr	r4, [pc, #88]	; (321c <MPSL_IRQ_CLOCK_Handler+0x60>)
    31c2:	7a60      	ldrb	r0, [r4, #9]
    31c4:	2800      	cmp	r0, #0
    31c6:	d027      	beq.n	3218 <MPSL_IRQ_CLOCK_Handler+0x5c>
    31c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    31cc:	058d      	lsls	r5, r1, #22
    31ce:	4628      	mov	r0, r5
    31d0:	f008 fd5a 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31d4:	4680      	mov	r8, r0
    31d6:	f44f 7182 	mov.w	r1, #260	; 0x104
    31da:	4628      	mov	r0, r5
    31dc:	f008 fd54 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31e0:	2600      	movs	r6, #0
    31e2:	4607      	mov	r7, r0
    31e4:	f1b8 0f00 	cmp.w	r8, #0
    31e8:	d009      	beq.n	31fe <MPSL_IRQ_CLOCK_Handler+0x42>
    31ea:	2001      	movs	r0, #1
    31ec:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    31f0:	7920      	ldrb	r0, [r4, #4]
    31f2:	b120      	cbz	r0, 31fe <MPSL_IRQ_CLOCK_Handler+0x42>
    31f4:	7126      	strb	r6, [r4, #4]
    31f6:	69e0      	ldr	r0, [r4, #28]
    31f8:	b108      	cbz	r0, 31fe <MPSL_IRQ_CLOCK_Handler+0x42>
    31fa:	4780      	blx	r0
    31fc:	61e6      	str	r6, [r4, #28]
    31fe:	b137      	cbz	r7, 320e <MPSL_IRQ_CLOCK_Handler+0x52>
    3200:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3204:	2002      	movs	r0, #2
    3206:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    320a:	f000 fa8b 	bl	3724 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    320e:	4640      	mov	r0, r8
    3210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3214:	f000 b85a 	b.w	32cc <MPSL_IRQ_CLOCK_Handler+0x110>
    3218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    321c:	20000030 	.word	0x20000030
    3220:	b510      	push	{r4, lr}
    3222:	f008 fddb 	bl	bddc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3226:	b930      	cbnz	r0, 3236 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3228:	f008 fdf9 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    322c:	b918      	cbnz	r0, 3236 <MPSL_IRQ_CLOCK_Handler+0x7a>
    322e:	f008 fe2c 	bl	be8a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3232:	2800      	cmp	r0, #0
    3234:	d002      	beq.n	323c <MPSL_IRQ_CLOCK_Handler+0x80>
    3236:	4902      	ldr	r1, [pc, #8]	; (3240 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3238:	2002      	movs	r0, #2
    323a:	6008      	str	r0, [r1, #0]
    323c:	bd10      	pop	{r4, pc}
    323e:	0000      	.short	0x0000
    3240:	40000c34 	.word	0x40000c34
    3244:	b570      	push	{r4, r5, r6, lr}
    3246:	f000 f987 	bl	3558 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    324a:	f000 fabf 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    324e:	4c09      	ldr	r4, [pc, #36]	; (3274 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3250:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3254:	b130      	cbz	r0, 3264 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3256:	f7ff ffe3 	bl	3220 <MPSL_IRQ_CLOCK_Handler+0x64>
    325a:	2001      	movs	r0, #1
    325c:	6128      	str	r0, [r5, #16]
    325e:	2004      	movs	r0, #4
    3260:	72a0      	strb	r0, [r4, #10]
    3262:	e004      	b.n	326e <MPSL_IRQ_CLOCK_Handler+0xb2>
    3264:	2003      	movs	r0, #3
    3266:	72a0      	strb	r0, [r4, #10]
    3268:	2001      	movs	r0, #1
    326a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    326e:	2000      	movs	r0, #0
    3270:	71e0      	strb	r0, [r4, #7]
    3272:	bd70      	pop	{r4, r5, r6, pc}
    3274:	20000030 	.word	0x20000030
    3278:	b570      	push	{r4, r5, r6, lr}
    327a:	4c13      	ldr	r4, [pc, #76]	; (32c8 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    327c:	79a0      	ldrb	r0, [r4, #6]
    327e:	b1f0      	cbz	r0, 32be <MPSL_IRQ_CLOCK_Handler+0x102>
    3280:	2801      	cmp	r0, #1
    3282:	d003      	beq.n	328c <MPSL_IRQ_CLOCK_Handler+0xd0>
    3284:	79e1      	ldrb	r1, [r4, #7]
    3286:	1e40      	subs	r0, r0, #1
    3288:	4281      	cmp	r1, r0
    328a:	da18      	bge.n	32be <MPSL_IRQ_CLOCK_Handler+0x102>
    328c:	f000 fa9e 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3290:	4605      	mov	r5, r0
    3292:	f000 fb6f 	bl	3974 <mpsl_temperature_get>
    3296:	79a1      	ldrb	r1, [r4, #6]
    3298:	2901      	cmp	r1, #1
    329a:	d902      	bls.n	32a2 <MPSL_IRQ_CLOCK_Handler+0xe6>
    329c:	79e1      	ldrb	r1, [r4, #7]
    329e:	1c49      	adds	r1, r1, #1
    32a0:	71e1      	strb	r1, [r4, #7]
    32a2:	b10d      	cbz	r5, 32a8 <MPSL_IRQ_CLOCK_Handler+0xec>
    32a4:	6961      	ldr	r1, [r4, #20]
    32a6:	e000      	b.n	32aa <MPSL_IRQ_CLOCK_Handler+0xee>
    32a8:	6921      	ldr	r1, [r4, #16]
    32aa:	1a41      	subs	r1, r0, r1
    32ac:	2902      	cmp	r1, #2
    32ae:	da02      	bge.n	32b6 <MPSL_IRQ_CLOCK_Handler+0xfa>
    32b0:	f111 0f02 	cmn.w	r1, #2
    32b4:	dc07      	bgt.n	32c6 <MPSL_IRQ_CLOCK_Handler+0x10a>
    32b6:	b10d      	cbz	r5, 32bc <MPSL_IRQ_CLOCK_Handler+0x100>
    32b8:	6160      	str	r0, [r4, #20]
    32ba:	e000      	b.n	32be <MPSL_IRQ_CLOCK_Handler+0x102>
    32bc:	6120      	str	r0, [r4, #16]
    32be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    32c2:	f7ff bfbf 	b.w	3244 <MPSL_IRQ_CLOCK_Handler+0x88>
    32c6:	bd70      	pop	{r4, r5, r6, pc}
    32c8:	20000030 	.word	0x20000030
    32cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32d0:	4606      	mov	r6, r0
    32d2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    32d6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    32da:	4628      	mov	r0, r5
    32dc:	f008 fcd4 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32e0:	4680      	mov	r8, r0
    32e2:	f44f 7188 	mov.w	r1, #272	; 0x110
    32e6:	4628      	mov	r0, r5
    32e8:	f008 fcce 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32ec:	4c27      	ldr	r4, [pc, #156]	; (338c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32ee:	4682      	mov	sl, r0
    32f0:	7827      	ldrb	r7, [r4, #0]
    32f2:	f104 0008 	add.w	r0, r4, #8
    32f6:	f008 fd3b 	bl	bd70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    32fa:	b110      	cbz	r0, 3302 <MPSL_IRQ_CLOCK_Handler+0x146>
    32fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3300:	e016      	b.n	3330 <MPSL_IRQ_CLOCK_Handler+0x174>
    3302:	f04f 0901 	mov.w	r9, #1
    3306:	b146      	cbz	r6, 331a <MPSL_IRQ_CLOCK_Handler+0x15e>
    3308:	7aa0      	ldrb	r0, [r4, #10]
    330a:	2803      	cmp	r0, #3
    330c:	d105      	bne.n	331a <MPSL_IRQ_CLOCK_Handler+0x15e>
    330e:	2004      	movs	r0, #4
    3310:	72a0      	strb	r0, [r4, #10]
    3312:	f7ff ff85 	bl	3220 <MPSL_IRQ_CLOCK_Handler+0x64>
    3316:	f8c5 9010 	str.w	r9, [r5, #16]
    331a:	2600      	movs	r6, #0
    331c:	f1b8 0f00 	cmp.w	r8, #0
    3320:	d018      	beq.n	3354 <MPSL_IRQ_CLOCK_Handler+0x198>
    3322:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3326:	7aa0      	ldrb	r0, [r4, #10]
    3328:	2804      	cmp	r0, #4
    332a:	d004      	beq.n	3336 <MPSL_IRQ_CLOCK_Handler+0x17a>
    332c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3330:	206d      	movs	r0, #109	; 0x6d
    3332:	f000 faaf 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3336:	f008 fd51 	bl	bddc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    333a:	b928      	cbnz	r0, 3348 <MPSL_IRQ_CLOCK_Handler+0x18c>
    333c:	f008 fd6f 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3340:	b910      	cbnz	r0, 3348 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3342:	f008 fda2 	bl	be8a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3346:	b108      	cbz	r0, 334c <MPSL_IRQ_CLOCK_Handler+0x190>
    3348:	4811      	ldr	r0, [pc, #68]	; (3390 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    334a:	6006      	str	r6, [r0, #0]
    334c:	2002      	movs	r0, #2
    334e:	72a0      	strb	r0, [r4, #10]
    3350:	f000 f8e6 	bl	3520 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3354:	f1ba 0f00 	cmp.w	sl, #0
    3358:	d008      	beq.n	336c <MPSL_IRQ_CLOCK_Handler+0x1b0>
    335a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    335e:	7aa0      	ldrb	r0, [r4, #10]
    3360:	2802      	cmp	r0, #2
    3362:	d101      	bne.n	3368 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3364:	f7ff ff88 	bl	3278 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3368:	f8c5 9014 	str.w	r9, [r5, #20]
    336c:	b13f      	cbz	r7, 337e <MPSL_IRQ_CLOCK_Handler+0x1c2>
    336e:	7026      	strb	r6, [r4, #0]
    3370:	7aa0      	ldrb	r0, [r4, #10]
    3372:	2802      	cmp	r0, #2
    3374:	d101      	bne.n	337a <MPSL_IRQ_CLOCK_Handler+0x1be>
    3376:	f7ff ff65 	bl	3244 <MPSL_IRQ_CLOCK_Handler+0x88>
    337a:	f000 f8d1 	bl	3520 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    337e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3382:	4802      	ldr	r0, [pc, #8]	; (338c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3384:	3008      	adds	r0, #8
    3386:	f008 bd0a 	b.w	bd9e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    338a:	0000      	.short	0x0000
    338c:	20000030 	.word	0x20000030
    3390:	40000c34 	.word	0x40000c34
    3394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3398:	4c5c      	ldr	r4, [pc, #368]	; (350c <MPSL_IRQ_CLOCK_Handler+0x350>)
    339a:	f04f 0800 	mov.w	r8, #0
    339e:	4606      	mov	r6, r0
    33a0:	f8c4 8018 	str.w	r8, [r4, #24]
    33a4:	7843      	ldrb	r3, [r0, #1]
    33a6:	7882      	ldrb	r2, [r0, #2]
    33a8:	7800      	ldrb	r0, [r0, #0]
    33aa:	72e0      	strb	r0, [r4, #11]
    33ac:	7163      	strb	r3, [r4, #5]
    33ae:	2701      	movs	r7, #1
    33b0:	71a2      	strb	r2, [r4, #6]
    33b2:	07bd      	lsls	r5, r7, #30
    33b4:	f884 8007 	strb.w	r8, [r4, #7]
    33b8:	2805      	cmp	r0, #5
    33ba:	d224      	bcs.n	3406 <MPSL_IRQ_CLOCK_Handler+0x24a>
    33bc:	e8df f000 	tbb	[pc, r0]
    33c0:	1f05030f 	.word	0x1f05030f
    33c4:	0021      	.short	0x0021
    33c6:	61a7      	str	r7, [r4, #24]
    33c8:	e009      	b.n	33de <MPSL_IRQ_CLOCK_Handler+0x222>
    33ca:	f000 f8c5 	bl	3558 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    33ce:	2101      	movs	r1, #1
    33d0:	4628      	mov	r0, r5
    33d2:	f008 fc5e 	bl	bc92 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    33d6:	2800      	cmp	r0, #0
    33d8:	d0f9      	beq.n	33ce <MPSL_IRQ_CLOCK_Handler+0x212>
    33da:	2002      	movs	r0, #2
    33dc:	61a0      	str	r0, [r4, #24]
    33de:	f008 fc84 	bl	bcea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    33e2:	b1b0      	cbz	r0, 3412 <MPSL_IRQ_CLOCK_Handler+0x256>
    33e4:	f000 fa0c 	bl	3800 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    33e8:	7e21      	ldrb	r1, [r4, #24]
    33ea:	f001 0103 	and.w	r1, r1, #3
    33ee:	4288      	cmp	r0, r1
    33f0:	d10f      	bne.n	3412 <MPSL_IRQ_CLOCK_Handler+0x256>
    33f2:	79b0      	ldrb	r0, [r6, #6]
    33f4:	b150      	cbz	r0, 340c <MPSL_IRQ_CLOCK_Handler+0x250>
    33f6:	2002      	movs	r0, #2
    33f8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33fc:	e06a      	b.n	34d4 <MPSL_IRQ_CLOCK_Handler+0x318>
    33fe:	4844      	ldr	r0, [pc, #272]	; (3510 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3400:	e7ec      	b.n	33dc <MPSL_IRQ_CLOCK_Handler+0x220>
    3402:	4844      	ldr	r0, [pc, #272]	; (3514 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3404:	e7ea      	b.n	33dc <MPSL_IRQ_CLOCK_Handler+0x220>
    3406:	f44f 714c 	mov.w	r1, #816	; 0x330
    340a:	e049      	b.n	34a0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    340c:	f000 f9cc 	bl	37a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3410:	e060      	b.n	34d4 <MPSL_IRQ_CLOCK_Handler+0x318>
    3412:	60ef      	str	r7, [r5, #12]
    3414:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3418:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    341c:	69a0      	ldr	r0, [r4, #24]
    341e:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3422:	f008 fcc7 	bl	bdb4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3426:	b940      	cbnz	r0, 343a <MPSL_IRQ_CLOCK_Handler+0x27e>
    3428:	f008 fcce 	bl	bdc8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    342c:	b928      	cbnz	r0, 343a <MPSL_IRQ_CLOCK_Handler+0x27e>
    342e:	f008 fce2 	bl	bdf6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3432:	b910      	cbnz	r0, 343a <MPSL_IRQ_CLOCK_Handler+0x27e>
    3434:	f008 fcf3 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3438:	b138      	cbz	r0, 344a <MPSL_IRQ_CLOCK_Handler+0x28e>
    343a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    343e:	4836      	ldr	r0, [pc, #216]	; (3518 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3440:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3444:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3448:	6001      	str	r1, [r0, #0]
    344a:	f008 fcb3 	bl	bdb4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    344e:	b940      	cbnz	r0, 3462 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3450:	f008 fcba 	bl	bdc8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3454:	b928      	cbnz	r0, 3462 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3456:	f008 fcce 	bl	bdf6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    345a:	b910      	cbnz	r0, 3462 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    345c:	f008 fcdf 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3460:	b110      	cbz	r0, 3468 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3462:	482d      	ldr	r0, [pc, #180]	; (3518 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3464:	3010      	adds	r0, #16
    3466:	6007      	str	r7, [r0, #0]
    3468:	60af      	str	r7, [r5, #8]
    346a:	2002      	movs	r0, #2
    346c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3470:	79b0      	ldrb	r0, [r6, #6]
    3472:	bb78      	cbnz	r0, 34d4 <MPSL_IRQ_CLOCK_Handler+0x318>
    3474:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3478:	f010 0f02 	tst.w	r0, #2
    347c:	d00e      	beq.n	349c <MPSL_IRQ_CLOCK_Handler+0x2e0>
    347e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 351c <MPSL_IRQ_CLOCK_Handler+0x360>
    3482:	f8d9 1000 	ldr.w	r1, [r9]
    3486:	43c9      	mvns	r1, r1
    3488:	f341 1700 	sbfx	r7, r1, #4, #1
    348c:	f8d9 1000 	ldr.w	r1, [r9]
    3490:	f041 0110 	orr.w	r1, r1, #16
    3494:	f8c9 1000 	str.w	r1, [r9]
    3498:	1c7f      	adds	r7, r7, #1
    349a:	e007      	b.n	34ac <MPSL_IRQ_CLOCK_Handler+0x2f0>
    349c:	f240 21f1 	movw	r1, #753	; 0x2f1
    34a0:	206d      	movs	r0, #109	; 0x6d
    34a2:	f000 f9f7 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34a6:	bf00      	nop
    34a8:	f000 fb1a 	bl	3ae0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    34ac:	4651      	mov	r1, sl
    34ae:	4628      	mov	r0, r5
    34b0:	f008 fbea 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    34b4:	2800      	cmp	r0, #0
    34b6:	d0f7      	beq.n	34a8 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    34b8:	f000 f976 	bl	37a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    34bc:	b92f      	cbnz	r7, 34ca <MPSL_IRQ_CLOCK_Handler+0x30e>
    34be:	f8d9 1000 	ldr.w	r1, [r9]
    34c2:	f021 0110 	bic.w	r1, r1, #16
    34c6:	f8c9 1000 	str.w	r1, [r9]
    34ca:	2002      	movs	r0, #2
    34cc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    34d0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    34d4:	79a0      	ldrb	r0, [r4, #6]
    34d6:	b170      	cbz	r0, 34f6 <MPSL_IRQ_CLOCK_Handler+0x33a>
    34d8:	7830      	ldrb	r0, [r6, #0]
    34da:	b960      	cbnz	r0, 34f6 <MPSL_IRQ_CLOCK_Handler+0x33a>
    34dc:	f000 f976 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34e0:	4606      	mov	r6, r0
    34e2:	f000 fa47 	bl	3974 <mpsl_temperature_get>
    34e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    34ea:	b116      	cbz	r6, 34f2 <MPSL_IRQ_CLOCK_Handler+0x336>
    34ec:	e9c4 2004 	strd	r2, r0, [r4, #16]
    34f0:	e001      	b.n	34f6 <MPSL_IRQ_CLOCK_Handler+0x33a>
    34f2:	e9c4 0204 	strd	r0, r2, [r4, #16]
    34f6:	2101      	movs	r1, #1
    34f8:	4628      	mov	r0, r5
    34fa:	f008 fbca 	bl	bc92 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    34fe:	b108      	cbz	r0, 3504 <MPSL_IRQ_CLOCK_Handler+0x348>
    3500:	f000 f95e 	bl	37c0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3504:	f884 800a 	strb.w	r8, [r4, #10]
    3508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    350c:	20000030 	.word	0x20000030
    3510:	00020001 	.word	0x00020001
    3514:	00030001 	.word	0x00030001
    3518:	4000053c 	.word	0x4000053c
    351c:	e000ed10 	.word	0xe000ed10

00003520 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3520:	b510      	push	{r4, lr}
    3522:	f3ef 8410 	mrs	r4, PRIMASK
    3526:	b672      	cpsid	i
    3528:	480a      	ldr	r0, [pc, #40]	; (3554 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    352a:	7841      	ldrb	r1, [r0, #1]
    352c:	b129      	cbz	r1, 353a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    352e:	7841      	ldrb	r1, [r0, #1]
    3530:	1e49      	subs	r1, r1, #1
    3532:	7041      	strb	r1, [r0, #1]
    3534:	7841      	ldrb	r1, [r0, #1]
    3536:	b129      	cbz	r1, 3544 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3538:	e008      	b.n	354c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    353a:	f240 110d 	movw	r1, #269	; 0x10d
    353e:	206d      	movs	r0, #109	; 0x6d
    3540:	f000 f9a8 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3544:	7880      	ldrb	r0, [r0, #2]
    3546:	b908      	cbnz	r0, 354c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3548:	f000 f94e 	bl	37e8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    354c:	2c00      	cmp	r4, #0
    354e:	d100      	bne.n	3552 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3550:	b662      	cpsie	i
    3552:	bd10      	pop	{r4, pc}
    3554:	20000030 	.word	0x20000030

00003558 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3558:	b510      	push	{r4, lr}
    355a:	f3ef 8410 	mrs	r4, PRIMASK
    355e:	b672      	cpsid	i
    3560:	4806      	ldr	r0, [pc, #24]	; (357c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3562:	7841      	ldrb	r1, [r0, #1]
    3564:	1c49      	adds	r1, r1, #1
    3566:	7041      	strb	r1, [r0, #1]
    3568:	7840      	ldrb	r0, [r0, #1]
    356a:	2801      	cmp	r0, #1
    356c:	d101      	bne.n	3572 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    356e:	f008 fba7 	bl	bcc0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3572:	2c00      	cmp	r4, #0
    3574:	d100      	bne.n	3578 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3576:	b662      	cpsie	i
    3578:	bd10      	pop	{r4, pc}
    357a:	0000      	.short	0x0000
    357c:	20000030 	.word	0x20000030

00003580 <mpsl_clock_hfclk_release>:
    3580:	4805      	ldr	r0, [pc, #20]	; (3598 <mpsl_clock_hfclk_release+0x18>)
    3582:	b510      	push	{r4, lr}
    3584:	78c1      	ldrb	r1, [r0, #3]
    3586:	b121      	cbz	r1, 3592 <mpsl_clock_hfclk_release+0x12>
    3588:	2100      	movs	r1, #0
    358a:	7101      	strb	r1, [r0, #4]
    358c:	70c1      	strb	r1, [r0, #3]
    358e:	f7ff ffc7 	bl	3520 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3592:	2000      	movs	r0, #0
    3594:	bd10      	pop	{r4, pc}
    3596:	0000      	.short	0x0000
    3598:	20000030 	.word	0x20000030

0000359c <mpsl_clock_hfclk_request>:
    359c:	b570      	push	{r4, r5, r6, lr}
    359e:	4c0c      	ldr	r4, [pc, #48]	; (35d0 <mpsl_clock_hfclk_request+0x34>)
    35a0:	78e1      	ldrb	r1, [r4, #3]
    35a2:	b961      	cbnz	r1, 35be <mpsl_clock_hfclk_request+0x22>
    35a4:	2501      	movs	r5, #1
    35a6:	70e5      	strb	r5, [r4, #3]
    35a8:	61e0      	str	r0, [r4, #28]
    35aa:	f7ff ffd5 	bl	3558 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    35ae:	f000 f90d 	bl	37cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    35b2:	b130      	cbz	r0, 35c2 <mpsl_clock_hfclk_request+0x26>
    35b4:	69e0      	ldr	r0, [r4, #28]
    35b6:	b110      	cbz	r0, 35be <mpsl_clock_hfclk_request+0x22>
    35b8:	4780      	blx	r0
    35ba:	2000      	movs	r0, #0
    35bc:	61e0      	str	r0, [r4, #28]
    35be:	2000      	movs	r0, #0
    35c0:	bd70      	pop	{r4, r5, r6, pc}
    35c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    35c6:	7125      	strb	r5, [r4, #4]
    35c8:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    35cc:	e7f7      	b.n	35be <mpsl_clock_hfclk_request+0x22>
    35ce:	0000      	.short	0x0000
    35d0:	20000030 	.word	0x20000030

000035d4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    35d4:	f3ef 8010 	mrs	r0, PRIMASK
    35d8:	b672      	cpsid	i
    35da:	4904      	ldr	r1, [pc, #16]	; (35ec <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    35dc:	788a      	ldrb	r2, [r1, #2]
    35de:	1c52      	adds	r2, r2, #1
    35e0:	708a      	strb	r2, [r1, #2]
    35e2:	2800      	cmp	r0, #0
    35e4:	d100      	bne.n	35e8 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    35e6:	b662      	cpsie	i
    35e8:	4770      	bx	lr
    35ea:	0000      	.short	0x0000
    35ec:	20000030 	.word	0x20000030

000035f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    35f0:	b510      	push	{r4, lr}
    35f2:	f3ef 8410 	mrs	r4, PRIMASK
    35f6:	b672      	cpsid	i
    35f8:	480a      	ldr	r0, [pc, #40]	; (3624 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    35fa:	7881      	ldrb	r1, [r0, #2]
    35fc:	b129      	cbz	r1, 360a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    35fe:	7881      	ldrb	r1, [r0, #2]
    3600:	1e49      	subs	r1, r1, #1
    3602:	7081      	strb	r1, [r0, #2]
    3604:	7841      	ldrb	r1, [r0, #1]
    3606:	b129      	cbz	r1, 3614 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3608:	e008      	b.n	361c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    360a:	f240 1125 	movw	r1, #293	; 0x125
    360e:	206d      	movs	r0, #109	; 0x6d
    3610:	f000 f940 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3614:	7880      	ldrb	r0, [r0, #2]
    3616:	b908      	cbnz	r0, 361c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3618:	f000 f8e6 	bl	37e8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    361c:	2c00      	cmp	r4, #0
    361e:	d100      	bne.n	3622 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3620:	b662      	cpsie	i
    3622:	bd10      	pop	{r4, pc}
    3624:	20000030 	.word	0x20000030

00003628 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    362c:	0004      	movs	r4, r0
    362e:	f06f 0015 	mvn.w	r0, #21
    3632:	d03c      	beq.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3634:	7821      	ldrb	r1, [r4, #0]
    3636:	2904      	cmp	r1, #4
    3638:	d839      	bhi.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    363a:	2900      	cmp	r1, #0
    363c:	7861      	ldrb	r1, [r4, #1]
    363e:	d038      	beq.n	36b2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3640:	2900      	cmp	r1, #0
    3642:	d134      	bne.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3644:	78a1      	ldrb	r1, [r4, #2]
    3646:	2900      	cmp	r1, #0
    3648:	d131      	bne.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    364a:	2000      	movs	r0, #0
    364c:	f008 fae7 	bl	bc1e <MPSL_IRQ_RADIO_Handler+0x1e>
    3650:	2000      	movs	r0, #0
    3652:	f008 fad7 	bl	bc04 <MPSL_IRQ_RADIO_Handler+0x4>
    3656:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    365a:	f04f 31ff 	mov.w	r1, #4294967295
    365e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3662:	2600      	movs	r6, #0
    3664:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3668:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    366c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3670:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3674:	4f14      	ldr	r7, [pc, #80]	; (36c8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3676:	707e      	strb	r6, [r7, #1]
    3678:	88a0      	ldrh	r0, [r4, #4]
    367a:	81b8      	strh	r0, [r7, #12]
    367c:	f008 fb17 	bl	bcae <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3680:	2501      	movs	r5, #1
    3682:	b108      	cbz	r0, 3688 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3684:	70fd      	strb	r5, [r7, #3]
    3686:	707d      	strb	r5, [r7, #1]
    3688:	2101      	movs	r1, #1
    368a:	4640      	mov	r0, r8
    368c:	f008 fb01 	bl	bc92 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3690:	b108      	cbz	r0, 3696 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3692:	f000 f895 	bl	37c0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3696:	4620      	mov	r0, r4
    3698:	f7ff fe7c 	bl	3394 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    369c:	727d      	strb	r5, [r7, #9]
    369e:	2000      	movs	r0, #0
    36a0:	f008 fab0 	bl	bc04 <MPSL_IRQ_RADIO_Handler+0x4>
    36a4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    36a8:	4630      	mov	r0, r6
    36aa:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    36ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36b2:	2900      	cmp	r1, #0
    36b4:	d0fb      	beq.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36b6:	2920      	cmp	r1, #32
    36b8:	d8f9      	bhi.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36ba:	78a1      	ldrb	r1, [r4, #2]
    36bc:	2921      	cmp	r1, #33	; 0x21
    36be:	d8f6      	bhi.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36c0:	2901      	cmp	r1, #1
    36c2:	d1c2      	bne.n	364a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    36c4:	e7f3      	b.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36c6:	0000      	.short	0x0000
    36c8:	20000030 	.word	0x20000030

000036cc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    36cc:	4801      	ldr	r0, [pc, #4]	; (36d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    36ce:	8980      	ldrh	r0, [r0, #12]
    36d0:	4770      	bx	lr
    36d2:	0000      	.short	0x0000
    36d4:	20000030 	.word	0x20000030

000036d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    36d8:	b510      	push	{r4, lr}
    36da:	480d      	ldr	r0, [pc, #52]	; (3710 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36dc:	f008 fb48 	bl	bd70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    36e0:	490b      	ldr	r1, [pc, #44]	; (3710 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36e2:	3908      	subs	r1, #8
    36e4:	b148      	cbz	r0, 36fa <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    36e6:	2001      	movs	r0, #1
    36e8:	7008      	strb	r0, [r1, #0]
    36ea:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    36ee:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    36f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36f6:	f7ff bf2f 	b.w	3558 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    36fa:	7a88      	ldrb	r0, [r1, #10]
    36fc:	2802      	cmp	r0, #2
    36fe:	d101      	bne.n	3704 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3700:	f7ff fda0 	bl	3244 <MPSL_IRQ_CLOCK_Handler+0x88>
    3704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3708:	4801      	ldr	r0, [pc, #4]	; (3710 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    370a:	f008 bb48 	b.w	bd9e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    370e:	0000      	.short	0x0000
    3710:	20000038 	.word	0x20000038

00003714 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3714:	4802      	ldr	r0, [pc, #8]	; (3720 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3716:	7a80      	ldrb	r0, [r0, #10]
    3718:	2800      	cmp	r0, #0
    371a:	d000      	beq.n	371e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    371c:	2001      	movs	r0, #1
    371e:	4770      	bx	lr
    3720:	20000030 	.word	0x20000030

00003724 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3726:	4d1f      	ldr	r5, [pc, #124]	; (37a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3728:	7ae8      	ldrb	r0, [r5, #11]
    372a:	2800      	cmp	r0, #0
    372c:	d10f      	bne.n	374e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    372e:	7e28      	ldrb	r0, [r5, #24]
    3730:	f000 0003 	and.w	r0, r0, #3
    3734:	f008 fac9 	bl	bcca <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3738:	2800      	cmp	r0, #0
    373a:	d008      	beq.n	374e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    373c:	f3ef 8110 	mrs	r1, PRIMASK
    3740:	b672      	cpsid	i
    3742:	f7ff ffe7 	bl	3714 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3746:	b118      	cbz	r0, 3750 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3748:	2900      	cmp	r1, #0
    374a:	d100      	bne.n	374e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    374c:	b662      	cpsie	i
    374e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3750:	2601      	movs	r6, #1
    3752:	72ae      	strb	r6, [r5, #10]
    3754:	b901      	cbnz	r1, 3758 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3756:	b662      	cpsie	i
    3758:	2018      	movs	r0, #24
    375a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    375e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3762:	61a6      	str	r6, [r4, #24]
    3764:	f44f 7020 	mov.w	r0, #640	; 0x280
    3768:	f8ad 0000 	strh.w	r0, [sp]
    376c:	f8bd 0000 	ldrh.w	r0, [sp]
    3770:	1e41      	subs	r1, r0, #1
    3772:	f8ad 1000 	strh.w	r1, [sp]
    3776:	d2f9      	bcs.n	376c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3778:	2700      	movs	r7, #0
    377a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    377e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3782:	4808      	ldr	r0, [pc, #32]	; (37a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3784:	3008      	adds	r0, #8
    3786:	f008 fb06 	bl	bd96 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    378a:	702f      	strb	r7, [r5, #0]
    378c:	f7ff fd5a 	bl	3244 <MPSL_IRQ_CLOCK_Handler+0x88>
    3790:	6166      	str	r6, [r4, #20]
    3792:	7968      	ldrb	r0, [r5, #5]
    3794:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3798:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    379c:	2018      	movs	r0, #24
    379e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    37a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37a4:	20000030 	.word	0x20000030

000037a8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    37a8:	b510      	push	{r4, lr}
    37aa:	4c04      	ldr	r4, [pc, #16]	; (37bc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    37ac:	7e20      	ldrb	r0, [r4, #24]
    37ae:	f000 0003 	and.w	r0, r0, #3
    37b2:	f008 fa8a 	bl	bcca <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    37b6:	2800      	cmp	r0, #0
    37b8:	d0f8      	beq.n	37ac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    37ba:	bd10      	pop	{r4, pc}
    37bc:	20000030 	.word	0x20000030

000037c0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    37c0:	4901      	ldr	r1, [pc, #4]	; (37c8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    37c2:	2001      	movs	r0, #1
    37c4:	7008      	strb	r0, [r1, #0]
    37c6:	4770      	bx	lr
    37c8:	20000288 	.word	0x20000288

000037cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    37cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    37d0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    37d4:	b918      	cbnz	r0, 37de <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    37d6:	4803      	ldr	r0, [pc, #12]	; (37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    37d8:	7800      	ldrb	r0, [r0, #0]
    37da:	2800      	cmp	r0, #0
    37dc:	d000      	beq.n	37e0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    37de:	2001      	movs	r0, #1
    37e0:	4770      	bx	lr
    37e2:	0000      	.short	0x0000
    37e4:	20000288 	.word	0x20000288

000037e8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    37e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    37ec:	2101      	movs	r1, #1
    37ee:	6041      	str	r1, [r0, #4]
    37f0:	2100      	movs	r1, #0
    37f2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    37f6:	4801      	ldr	r0, [pc, #4]	; (37fc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    37f8:	7001      	strb	r1, [r0, #0]
    37fa:	4770      	bx	lr
    37fc:	20000288 	.word	0x20000288

00003800 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3800:	4802      	ldr	r0, [pc, #8]	; (380c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3802:	6800      	ldr	r0, [r0, #0]
    3804:	f000 0003 	and.w	r0, r0, #3
    3808:	4770      	bx	lr
    380a:	0000      	.short	0x0000
    380c:	4000041c 	.word	0x4000041c
    3810:	b510      	push	{r4, lr}
    3812:	b131      	cbz	r1, 3822 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3814:	2901      	cmp	r1, #1
    3816:	d007      	beq.n	3828 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3818:	f240 3102 	movw	r1, #770	; 0x302
    381c:	a005      	add	r0, pc, #20	; (adr r0, 3834 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    381e:	f000 f80f 	bl	3840 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3822:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3826:	e001      	b.n	382c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3828:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    382c:	f000 0001 	and.w	r0, r0, #1
    3830:	bd10      	pop	{r4, pc}
    3832:	0000      	.short	0x0000
    3834:	5f66726e 	.word	0x5f66726e
    3838:	636f6c63 	.word	0x636f6c63
    383c:	00682e6b 	.word	0x00682e6b

00003840 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3840:	4a02      	ldr	r2, [pc, #8]	; (384c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    3842:	6852      	ldr	r2, [r2, #4]
    3844:	b102      	cbz	r2, 3848 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3846:	4710      	bx	r2
    3848:	e7fe      	b.n	3848 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    384a:	0000      	.short	0x0000
    384c:	20000050 	.word	0x20000050
    3850:	4806      	ldr	r0, [pc, #24]	; (386c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    3852:	b510      	push	{r4, lr}
    3854:	2100      	movs	r1, #0
    3856:	6001      	str	r1, [r0, #0]
    3858:	2101      	movs	r1, #1
    385a:	6001      	str	r1, [r0, #0]
    385c:	4608      	mov	r0, r1
    385e:	f008 fa5b 	bl	bd18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3866:	2001      	movs	r0, #1
    3868:	f008 ba49 	b.w	bcfe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    386c:	40001ffc 	.word	0x40001ffc
    3870:	4807      	ldr	r0, [pc, #28]	; (3890 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    3872:	b510      	push	{r4, lr}
    3874:	2101      	movs	r1, #1
    3876:	6041      	str	r1, [r0, #4]
    3878:	1e89      	subs	r1, r1, #2
    387a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    387e:	200c      	movs	r0, #12
    3880:	f008 fa4a 	bl	bd18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3888:	200c      	movs	r0, #12
    388a:	f008 ba38 	b.w	bcfe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    388e:	0000      	.short	0x0000
    3890:	4000c000 	.word	0x4000c000

00003894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3894:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    3896:	4a10      	ldr	r2, [pc, #64]	; (38d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3898:	6855      	ldr	r5, [r2, #4]
    389a:	b1e5      	cbz	r5, 38d6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    389c:	2200      	movs	r2, #0
    389e:	4603      	mov	r3, r0
    38a0:	466e      	mov	r6, sp
    38a2:	240a      	movs	r4, #10
    38a4:	e003      	b.n	38ae <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    38a6:	fbb0 f0f4 	udiv	r0, r0, r4
    38aa:	1c52      	adds	r2, r2, #1
    38ac:	b2d2      	uxtb	r2, r2
    38ae:	2800      	cmp	r0, #0
    38b0:	d1f9      	bne.n	38a6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    38b2:	54b0      	strb	r0, [r6, r2]
    38b4:	e00a      	b.n	38cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    38b6:	bf00      	nop
    38b8:	fbb3 f0f4 	udiv	r0, r3, r4
    38bc:	fb04 3010 	mls	r0, r4, r0, r3
    38c0:	fbb3 f3f4 	udiv	r3, r3, r4
    38c4:	1e52      	subs	r2, r2, #1
    38c6:	b2d2      	uxtb	r2, r2
    38c8:	3030      	adds	r0, #48	; 0x30
    38ca:	54b0      	strb	r0, [r6, r2]
    38cc:	2a00      	cmp	r2, #0
    38ce:	d1f3      	bne.n	38b8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    38d0:	4630      	mov	r0, r6
    38d2:	47a8      	blx	r5
    38d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    38d6:	e7fe      	b.n	38d6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    38d8:	20000050 	.word	0x20000050

000038dc <mpsl_init>:
    38dc:	b570      	push	{r4, r5, r6, lr}
    38de:	4c17      	ldr	r4, [pc, #92]	; (393c <mpsl_init+0x60>)
    38e0:	4606      	mov	r6, r0
    38e2:	460d      	mov	r5, r1
    38e4:	7860      	ldrb	r0, [r4, #1]
    38e6:	b110      	cbz	r0, 38ee <mpsl_init+0x12>
    38e8:	f04f 30ff 	mov.w	r0, #4294967295
    38ec:	bd70      	pop	{r4, r5, r6, pc}
    38ee:	b906      	cbnz	r6, 38f2 <mpsl_init+0x16>
    38f0:	4e13      	ldr	r6, [pc, #76]	; (3940 <mpsl_init+0x64>)
    38f2:	6062      	str	r2, [r4, #4]
    38f4:	7025      	strb	r5, [r4, #0]
    38f6:	f7ff ffab 	bl	3850 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    38fa:	f7ff ffb9 	bl	3870 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    38fe:	4630      	mov	r0, r6
    3900:	f7ff fe92 	bl	3628 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3904:	0006      	movs	r6, r0
    3906:	d1f1      	bne.n	38ec <mpsl_init+0x10>
    3908:	f7fe fef4 	bl	26f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    390c:	f7ff ff0a 	bl	3724 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3910:	f008 f8d0 	bl	bab4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3914:	4628      	mov	r0, r5
    3916:	f008 f9f2 	bl	bcfe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    391a:	2001      	movs	r0, #1
    391c:	2d00      	cmp	r5, #0
    391e:	db09      	blt.n	3934 <mpsl_init+0x58>
    3920:	f005 011f 	and.w	r1, r5, #31
    3924:	fa00 f101 	lsl.w	r1, r0, r1
    3928:	096a      	lsrs	r2, r5, #5
    392a:	0092      	lsls	r2, r2, #2
    392c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3930:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3934:	7060      	strb	r0, [r4, #1]
    3936:	4630      	mov	r0, r6
    3938:	bd70      	pop	{r4, r5, r6, pc}
    393a:	0000      	.short	0x0000
    393c:	20000050 	.word	0x20000050
    3940:	0000bd3a 	.word	0x0000bd3a

00003944 <mpsl_is_initialized>:
    3944:	4801      	ldr	r0, [pc, #4]	; (394c <mpsl_is_initialized+0x8>)
    3946:	7840      	ldrb	r0, [r0, #1]
    3948:	4770      	bx	lr
    394a:	0000      	.short	0x0000
    394c:	20000050 	.word	0x20000050

00003950 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3950:	4807      	ldr	r0, [pc, #28]	; (3970 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3952:	f990 0000 	ldrsb.w	r0, [r0]
    3956:	2800      	cmp	r0, #0
    3958:	db09      	blt.n	396e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    395a:	f000 021f 	and.w	r2, r0, #31
    395e:	2101      	movs	r1, #1
    3960:	4091      	lsls	r1, r2
    3962:	0940      	lsrs	r0, r0, #5
    3964:	0080      	lsls	r0, r0, #2
    3966:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    396a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    396e:	4770      	bx	lr
    3970:	20000050 	.word	0x20000050

00003974 <mpsl_temperature_get>:
    3974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3978:	2601      	movs	r6, #1
    397a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    397e:	0331      	lsls	r1, r6, #12
    3980:	f04f 0800 	mov.w	r8, #0
    3984:	4640      	mov	r0, r8
    3986:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    398a:	f3bf 8f4f 	dsb	sy
    398e:	f3bf 8f6f 	isb	sy
    3992:	4c16      	ldr	r4, [pc, #88]	; (39ec <mpsl_temperature_get+0x78>)
    3994:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3998:	200c      	movs	r0, #12
    399a:	f008 f9dc 	bl	bd56 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    399e:	4d14      	ldr	r5, [pc, #80]	; (39f0 <mpsl_temperature_get+0x7c>)
    39a0:	6828      	ldr	r0, [r5, #0]
    39a2:	43c0      	mvns	r0, r0
    39a4:	f340 1700 	sbfx	r7, r0, #4, #1
    39a8:	6828      	ldr	r0, [r5, #0]
    39aa:	f040 0010 	orr.w	r0, r0, #16
    39ae:	6028      	str	r0, [r5, #0]
    39b0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    39b4:	6026      	str	r6, [r4, #0]
    39b6:	1c7f      	adds	r7, r7, #1
    39b8:	e002      	b.n	39c0 <mpsl_temperature_get+0x4c>
    39ba:	bf00      	nop
    39bc:	f000 f890 	bl	3ae0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    39c0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    39c4:	2800      	cmp	r0, #0
    39c6:	d0f9      	beq.n	39bc <mpsl_temperature_get+0x48>
    39c8:	b91f      	cbnz	r7, 39d2 <mpsl_temperature_get+0x5e>
    39ca:	6828      	ldr	r0, [r5, #0]
    39cc:	f020 0010 	bic.w	r0, r0, #16
    39d0:	6028      	str	r0, [r5, #0]
    39d2:	4808      	ldr	r0, [pc, #32]	; (39f4 <mpsl_temperature_get+0x80>)
    39d4:	6805      	ldr	r5, [r0, #0]
    39d6:	6066      	str	r6, [r4, #4]
    39d8:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    39dc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    39e0:	200c      	movs	r0, #12
    39e2:	f008 f9b8 	bl	bd56 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    39e6:	4628      	mov	r0, r5
    39e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39ec:	4000c000 	.word	0x4000c000
    39f0:	e000ed10 	.word	0xe000ed10
    39f4:	4000c508 	.word	0x4000c508

000039f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    39f8:	b510      	push	{r4, lr}
    39fa:	4602      	mov	r2, r0
    39fc:	2005      	movs	r0, #5
    39fe:	490c      	ldr	r1, [pc, #48]	; (3a30 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3a00:	e004      	b.n	3a0c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3a02:	bf00      	nop
    3a04:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3a08:	791b      	ldrb	r3, [r3, #4]
    3a0a:	b133      	cbz	r3, 3a1a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3a0c:	1e40      	subs	r0, r0, #1
    3a0e:	b2c0      	uxtb	r0, r0
    3a10:	d2f8      	bcs.n	3a04 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3a12:	214b      	movs	r1, #75	; 0x4b
    3a14:	2069      	movs	r0, #105	; 0x69
    3a16:	f7ff ff3d 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a1a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3a1e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3a22:	2200      	movs	r2, #0
    3a24:	714a      	strb	r2, [r1, #5]
    3a26:	718a      	strb	r2, [r1, #6]
    3a28:	2201      	movs	r2, #1
    3a2a:	710a      	strb	r2, [r1, #4]
    3a2c:	bd10      	pop	{r4, pc}
    3a2e:	0000      	.short	0x0000
    3a30:	20000ed8 	.word	0x20000ed8

00003a34 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3a34:	b510      	push	{r4, lr}
    3a36:	2805      	cmp	r0, #5
    3a38:	d301      	bcc.n	3a3e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3a3a:	215a      	movs	r1, #90	; 0x5a
    3a3c:	e006      	b.n	3a4c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3a3e:	490a      	ldr	r1, [pc, #40]	; (3a68 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3a40:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3a44:	7901      	ldrb	r1, [r0, #4]
    3a46:	2901      	cmp	r1, #1
    3a48:	d003      	beq.n	3a52 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3a4a:	215b      	movs	r1, #91	; 0x5b
    3a4c:	2069      	movs	r0, #105	; 0x69
    3a4e:	f7ff ff21 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a52:	7941      	ldrb	r1, [r0, #5]
    3a54:	7982      	ldrb	r2, [r0, #6]
    3a56:	1c49      	adds	r1, r1, #1
    3a58:	b2c9      	uxtb	r1, r1
    3a5a:	428a      	cmp	r2, r1
    3a5c:	d000      	beq.n	3a60 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3a5e:	7141      	strb	r1, [r0, #5]
    3a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3a64:	f7ff bf74 	b.w	3950 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3a68:	20000ed8 	.word	0x20000ed8

00003a6c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3a6c:	b570      	push	{r4, r5, r6, lr}
    3a6e:	2505      	movs	r5, #5
    3a70:	4e0e      	ldr	r6, [pc, #56]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a72:	4c0f      	ldr	r4, [pc, #60]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a74:	e016      	b.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3a76:	7821      	ldrb	r1, [r4, #0]
    3a78:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3a7c:	7902      	ldrb	r2, [r0, #4]
    3a7e:	2a01      	cmp	r2, #1
    3a80:	d108      	bne.n	3a94 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3a82:	7942      	ldrb	r2, [r0, #5]
    3a84:	7983      	ldrb	r3, [r0, #6]
    3a86:	429a      	cmp	r2, r3
    3a88:	d004      	beq.n	3a94 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3a8a:	7942      	ldrb	r2, [r0, #5]
    3a8c:	7182      	strb	r2, [r0, #6]
    3a8e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3a92:	4780      	blx	r0
    3a94:	7820      	ldrb	r0, [r4, #0]
    3a96:	1c40      	adds	r0, r0, #1
    3a98:	b2c0      	uxtb	r0, r0
    3a9a:	7020      	strb	r0, [r4, #0]
    3a9c:	2805      	cmp	r0, #5
    3a9e:	d301      	bcc.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3aa0:	2000      	movs	r0, #0
    3aa2:	7020      	strb	r0, [r4, #0]
    3aa4:	1e6d      	subs	r5, r5, #1
    3aa6:	b2ed      	uxtb	r5, r5
    3aa8:	d2e5      	bcs.n	3a76 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3aaa:	bd70      	pop	{r4, r5, r6, pc}
    3aac:	20000ed8 	.word	0x20000ed8
    3ab0:	20000289 	.word	0x20000289

00003ab4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3ab4:	b500      	push	{lr}
    3ab6:	f008 f97d 	bl	bdb4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3aba:	b940      	cbnz	r0, 3ace <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3abc:	f008 f984 	bl	bdc8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3ac0:	b928      	cbnz	r0, 3ace <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3ac2:	f008 f998 	bl	bdf6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3ac6:	b910      	cbnz	r0, 3ace <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3ac8:	f008 f9a9 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3acc:	b108      	cbz	r0, 3ad2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3ace:	4802      	ldr	r0, [pc, #8]	; (3ad8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3ad0:	bd00      	pop	{pc}
    3ad2:	4802      	ldr	r0, [pc, #8]	; (3adc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3ad4:	bd00      	pop	{pc}
    3ad6:	0000      	.short	0x0000
    3ad8:	4000050c 	.word	0x4000050c
    3adc:	4001e700 	.word	0x4001e700

00003ae0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3ae0:	b510      	push	{r4, lr}
    3ae2:	f008 f99c 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3ae6:	b330      	cbz	r0, 3b36 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3ae8:	f3ef 8010 	mrs	r0, PRIMASK
    3aec:	b1c8      	cbz	r0, 3b22 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3aee:	2100      	movs	r1, #0
    3af0:	b672      	cpsid	i
    3af2:	4812      	ldr	r0, [pc, #72]	; (3b3c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3af4:	6802      	ldr	r2, [r0, #0]
    3af6:	6803      	ldr	r3, [r0, #0]
    3af8:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3afc:	f043 0310 	orr.w	r3, r3, #16
    3b00:	6003      	str	r3, [r0, #0]
    3b02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3b06:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3b0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3b0e:	431c      	orrs	r4, r3
    3b10:	d000      	beq.n	3b14 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3b12:	bf40      	sev
    3b14:	bf20      	wfe
    3b16:	bf00      	nop
    3b18:	bf00      	nop
    3b1a:	bf00      	nop
    3b1c:	bf00      	nop
    3b1e:	b112      	cbz	r2, 3b26 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3b20:	e005      	b.n	3b2e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3b22:	2101      	movs	r1, #1
    3b24:	e7e4      	b.n	3af0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3b26:	6802      	ldr	r2, [r0, #0]
    3b28:	f022 0210 	bic.w	r2, r2, #16
    3b2c:	6002      	str	r2, [r0, #0]
    3b2e:	2900      	cmp	r1, #0
    3b30:	d000      	beq.n	3b34 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3b32:	b662      	cpsie	i
    3b34:	bd10      	pop	{r4, pc}
    3b36:	bf20      	wfe
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	0000      	.short	0x0000
    3b3c:	e000ed10 	.word	0xe000ed10

00003b40 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3b40:	0000c08f 0000c0ab 0000c099 0000c0a5     ................
    3b50:	0000c093 0000c08d 0000c08b 0000c0b1     ................
    3b60:	0000c09f 0000c085 0000c07d 0000c081     ........}.......
    3b70:	0000c077                                w...

00003b74 <mpsl_fem_disable>:
    3b74:	4801      	ldr	r0, [pc, #4]	; (3b7c <mpsl_fem_disable+0x8>)
    3b76:	6800      	ldr	r0, [r0, #0]
    3b78:	6800      	ldr	r0, [r0, #0]
    3b7a:	4700      	bx	r0
    3b7c:	20000058 	.word	0x20000058

00003b80 <mpsl_fem_lna_configuration_clear>:
    3b80:	4801      	ldr	r0, [pc, #4]	; (3b88 <mpsl_fem_lna_configuration_clear+0x8>)
    3b82:	6800      	ldr	r0, [r0, #0]
    3b84:	6900      	ldr	r0, [r0, #16]
    3b86:	4700      	bx	r0
    3b88:	20000058 	.word	0x20000058

00003b8c <mpsl_fem_lna_configuration_set>:
    3b8c:	4a01      	ldr	r2, [pc, #4]	; (3b94 <mpsl_fem_lna_configuration_set+0x8>)
    3b8e:	6812      	ldr	r2, [r2, #0]
    3b90:	6892      	ldr	r2, [r2, #8]
    3b92:	4710      	bx	r2
    3b94:	20000058 	.word	0x20000058

00003b98 <mpsl_fem_pa_configuration_clear>:
    3b98:	4801      	ldr	r0, [pc, #4]	; (3ba0 <mpsl_fem_pa_configuration_clear+0x8>)
    3b9a:	6800      	ldr	r0, [r0, #0]
    3b9c:	68c0      	ldr	r0, [r0, #12]
    3b9e:	4700      	bx	r0
    3ba0:	20000058 	.word	0x20000058

00003ba4 <mpsl_fem_pa_configuration_set>:
    3ba4:	4a01      	ldr	r2, [pc, #4]	; (3bac <mpsl_fem_pa_configuration_set+0x8>)
    3ba6:	6812      	ldr	r2, [r2, #0]
    3ba8:	6852      	ldr	r2, [r2, #4]
    3baa:	4710      	bx	r2
    3bac:	20000058 	.word	0x20000058

00003bb0 <mpsl_fem_pa_is_configured>:
    3bb0:	4901      	ldr	r1, [pc, #4]	; (3bb8 <mpsl_fem_pa_is_configured+0x8>)
    3bb2:	6809      	ldr	r1, [r1, #0]
    3bb4:	6a09      	ldr	r1, [r1, #32]
    3bb6:	4708      	bx	r1
    3bb8:	20000058 	.word	0x20000058

00003bbc <mpsl_fem_device_config_254_apply_get>:
    3bbc:	4801      	ldr	r0, [pc, #4]	; (3bc4 <mpsl_fem_device_config_254_apply_get+0x8>)
    3bbe:	7800      	ldrb	r0, [r0, #0]
    3bc0:	4770      	bx	lr
    3bc2:	0000      	.short	0x0000
    3bc4:	2000028a 	.word	0x2000028a
    3bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3bca:	4c17      	ldr	r4, [pc, #92]	; (3c28 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3bcc:	7a20      	ldrb	r0, [r4, #8]
    3bce:	2802      	cmp	r0, #2
    3bd0:	d200      	bcs.n	3bd4 <mpsl_fem_device_config_254_apply_get+0x18>
    3bd2:	2002      	movs	r0, #2
    3bd4:	f88d 0001 	strb.w	r0, [sp, #1]
    3bd8:	79e0      	ldrb	r0, [r4, #7]
    3bda:	2803      	cmp	r0, #3
    3bdc:	d200      	bcs.n	3be0 <mpsl_fem_device_config_254_apply_get+0x24>
    3bde:	2003      	movs	r0, #3
    3be0:	f88d 0000 	strb.w	r0, [sp]
    3be4:	79a0      	ldrb	r0, [r4, #6]
    3be6:	f8ad 0004 	strh.w	r0, [sp, #4]
    3bea:	7960      	ldrb	r0, [r4, #5]
    3bec:	f8ad 0002 	strh.w	r0, [sp, #2]
    3bf0:	4668      	mov	r0, sp
    3bf2:	f006 f95b 	bl	9eac <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3bf6:	b108      	cbz	r0, 3bfc <mpsl_fem_device_config_254_apply_get+0x40>
    3bf8:	2180      	movs	r1, #128	; 0x80
    3bfa:	e010      	b.n	3c1e <mpsl_fem_device_config_254_apply_get+0x62>
    3bfc:	68e0      	ldr	r0, [r4, #12]
    3bfe:	9002      	str	r0, [sp, #8]
    3c00:	a802      	add	r0, sp, #8
    3c02:	f006 f969 	bl	9ed8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3c06:	b108      	cbz	r0, 3c0c <mpsl_fem_device_config_254_apply_get+0x50>
    3c08:	2184      	movs	r1, #132	; 0x84
    3c0a:	e008      	b.n	3c1e <mpsl_fem_device_config_254_apply_get+0x62>
    3c0c:	4807      	ldr	r0, [pc, #28]	; (3c2c <mpsl_fem_device_config_254_apply_get+0x70>)
    3c0e:	6800      	ldr	r0, [r0, #0]
    3c10:	9003      	str	r0, [sp, #12]
    3c12:	a803      	add	r0, sp, #12
    3c14:	f00b faad 	bl	f172 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3c18:	2800      	cmp	r0, #0
    3c1a:	d003      	beq.n	3c24 <mpsl_fem_device_config_254_apply_get+0x68>
    3c1c:	2188      	movs	r1, #136	; 0x88
    3c1e:	2003      	movs	r0, #3
    3c20:	f000 f8e0 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c24:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3c26:	0000      	.short	0x0000
    3c28:	20000f00 	.word	0x20000f00
    3c2c:	00003ecc 	.word	0x00003ecc

00003c30 <sdc_build_revision_get>:
    3c30:	b510      	push	{r4, lr}
    3c32:	b128      	cbz	r0, 3c40 <sdc_build_revision_get+0x10>
    3c34:	2214      	movs	r2, #20
    3c36:	4904      	ldr	r1, [pc, #16]	; (3c48 <sdc_build_revision_get+0x18>)
    3c38:	f008 f943 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c3c:	2000      	movs	r0, #0
    3c3e:	bd10      	pop	{r4, pc}
    3c40:	f06f 0015 	mvn.w	r0, #21
    3c44:	bd10      	pop	{r4, pc}
    3c46:	0000      	.short	0x0000
    3c48:	00003ee8 	.word	0x00003ee8

00003c4c <sdc_cfg_set>:
    3c4c:	b570      	push	{r4, r5, r6, lr}
    3c4e:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    3c52:	bb78      	cbnz	r0, 3cb4 <sdc_cfg_set+0x68>
    3c54:	4c27      	ldr	r4, [pc, #156]	; (3cf4 <sdc_cfg_set+0xa8>)
    3c56:	7860      	ldrb	r0, [r4, #1]
    3c58:	b108      	cbz	r0, 3c5e <sdc_cfg_set+0x12>
    3c5a:	1198      	asrs	r0, r3, #6
    3c5c:	bd70      	pop	{r4, r5, r6, pc}
    3c5e:	b301      	cbz	r1, 3ca2 <sdc_cfg_set+0x56>
    3c60:	f06f 0515 	mvn.w	r5, #21
    3c64:	b33a      	cbz	r2, 3cb6 <sdc_cfg_set+0x6a>
    3c66:	4824      	ldr	r0, [pc, #144]	; (3cf8 <sdc_cfg_set+0xac>)
    3c68:	290b      	cmp	r1, #11
    3c6a:	d23d      	bcs.n	3ce8 <sdc_cfg_set+0x9c>
    3c6c:	e8df f001 	tbb	[pc, r1]
    3c70:	0c09063c 	.word	0x0c09063c
    3c74:	241a1310 	.word	0x241a1310
    3c78:	002d2716 	.word	0x002d2716
    3c7c:	7811      	ldrb	r1, [r2, #0]
    3c7e:	7001      	strb	r1, [r0, #0]
    3c80:	e027      	b.n	3cd2 <sdc_cfg_set+0x86>
    3c82:	7811      	ldrb	r1, [r2, #0]
    3c84:	7041      	strb	r1, [r0, #1]
    3c86:	e024      	b.n	3cd2 <sdc_cfg_set+0x86>
    3c88:	6811      	ldr	r1, [r2, #0]
    3c8a:	f8c0 1005 	str.w	r1, [r0, #5]
    3c8e:	e020      	b.n	3cd2 <sdc_cfg_set+0x86>
    3c90:	6811      	ldr	r1, [r2, #0]
    3c92:	60c1      	str	r1, [r0, #12]
    3c94:	e01d      	b.n	3cd2 <sdc_cfg_set+0x86>
    3c96:	7811      	ldrb	r1, [r2, #0]
    3c98:	7081      	strb	r1, [r0, #2]
    3c9a:	e01a      	b.n	3cd2 <sdc_cfg_set+0x86>
    3c9c:	7811      	ldrb	r1, [r2, #0]
    3c9e:	b949      	cbnz	r1, 3cb4 <sdc_cfg_set+0x68>
    3ca0:	70c1      	strb	r1, [r0, #3]
    3ca2:	e016      	b.n	3cd2 <sdc_cfg_set+0x86>
    3ca4:	78e1      	ldrb	r1, [r4, #3]
    3ca6:	b111      	cbz	r1, 3cae <sdc_cfg_set+0x62>
    3ca8:	7811      	ldrb	r1, [r2, #0]
    3caa:	2902      	cmp	r1, #2
    3cac:	d31c      	bcc.n	3ce8 <sdc_cfg_set+0x9c>
    3cae:	7811      	ldrb	r1, [r2, #0]
    3cb0:	7401      	strb	r1, [r0, #16]
    3cb2:	e00e      	b.n	3cd2 <sdc_cfg_set+0x86>
    3cb4:	e005      	b.n	3cc2 <sdc_cfg_set+0x76>
    3cb6:	e017      	b.n	3ce8 <sdc_cfg_set+0x9c>
    3cb8:	8811      	ldrh	r1, [r2, #0]
    3cba:	8241      	strh	r1, [r0, #18]
    3cbc:	e009      	b.n	3cd2 <sdc_cfg_set+0x86>
    3cbe:	7811      	ldrb	r1, [r2, #0]
    3cc0:	b109      	cbz	r1, 3cc6 <sdc_cfg_set+0x7a>
    3cc2:	4618      	mov	r0, r3
    3cc4:	bd70      	pop	{r4, r5, r6, pc}
    3cc6:	7101      	strb	r1, [r0, #4]
    3cc8:	e003      	b.n	3cd2 <sdc_cfg_set+0x86>
    3cca:	7811      	ldrb	r1, [r2, #0]
    3ccc:	2902      	cmp	r1, #2
    3cce:	d30b      	bcc.n	3ce8 <sdc_cfg_set+0x9c>
    3cd0:	7501      	strb	r1, [r0, #20]
    3cd2:	2201      	movs	r2, #1
    3cd4:	4908      	ldr	r1, [pc, #32]	; (3cf8 <sdc_cfg_set+0xac>)
    3cd6:	2000      	movs	r0, #0
    3cd8:	f008 f9ec 	bl	c0b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3cdc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3ce0:	db04      	blt.n	3cec <sdc_cfg_set+0xa0>
    3ce2:	f06f 000b 	mvn.w	r0, #11
    3ce6:	bd70      	pop	{r4, r5, r6, pc}
    3ce8:	4628      	mov	r0, r5
    3cea:	bd70      	pop	{r4, r5, r6, pc}
    3cec:	2101      	movs	r1, #1
    3cee:	70a1      	strb	r1, [r4, #2]
    3cf0:	bd70      	pop	{r4, r5, r6, pc}
    3cf2:	0000      	.short	0x0000
    3cf4:	2000005c 	.word	0x2000005c
    3cf8:	20000f00 	.word	0x20000f00

00003cfc <sdc_enable>:
    3cfc:	b570      	push	{r4, r5, r6, lr}
    3cfe:	460c      	mov	r4, r1
    3d00:	0005      	movs	r5, r0
    3d02:	d019      	beq.n	3d38 <sdc_enable+0x3c>
    3d04:	b1c4      	cbz	r4, 3d38 <sdc_enable+0x3c>
    3d06:	f000 f923 	bl	3f50 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3d0a:	b1c0      	cbz	r0, 3d3e <sdc_enable+0x42>
    3d0c:	4628      	mov	r0, r5
    3d0e:	f7ff fe73 	bl	39f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3d12:	4d0c      	ldr	r5, [pc, #48]	; (3d44 <sdc_enable+0x48>)
    3d14:	2200      	movs	r2, #0
    3d16:	490c      	ldr	r1, [pc, #48]	; (3d48 <sdc_enable+0x4c>)
    3d18:	7028      	strb	r0, [r5, #0]
    3d1a:	4620      	mov	r0, r4
    3d1c:	f008 f9ca 	bl	c0b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3d20:	f00b fe91 	bl	fa46 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3d24:	2100      	movs	r1, #0
    3d26:	7828      	ldrb	r0, [r5, #0]
    3d28:	f006 fb30 	bl	a38c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3d2c:	f7ff ff4c 	bl	3bc8 <mpsl_fem_device_config_254_apply_get+0xc>
    3d30:	2001      	movs	r0, #1
    3d32:	7068      	strb	r0, [r5, #1]
    3d34:	2000      	movs	r0, #0
    3d36:	bd70      	pop	{r4, r5, r6, pc}
    3d38:	f06f 0015 	mvn.w	r0, #21
    3d3c:	bd70      	pop	{r4, r5, r6, pc}
    3d3e:	f04f 30ff 	mov.w	r0, #4294967295
    3d42:	bd70      	pop	{r4, r5, r6, pc}
    3d44:	2000005c 	.word	0x2000005c
    3d48:	20000f00 	.word	0x20000f00

00003d4c <sdc_init>:
    3d4c:	b530      	push	{r4, r5, lr}
    3d4e:	b087      	sub	sp, #28
    3d50:	0005      	movs	r5, r0
    3d52:	d00c      	beq.n	3d6e <sdc_init+0x22>
    3d54:	f7ff fdf6 	bl	3944 <mpsl_is_initialized>
    3d58:	f04f 34ff 	mov.w	r4, #4294967295
    3d5c:	b120      	cbz	r0, 3d68 <sdc_init+0x1c>
    3d5e:	f7ff fcb5 	bl	36cc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3d62:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3d66:	d905      	bls.n	3d74 <sdc_init+0x28>
    3d68:	4620      	mov	r0, r4
    3d6a:	b007      	add	sp, #28
    3d6c:	bd30      	pop	{r4, r5, pc}
    3d6e:	f06f 0015 	mvn.w	r0, #21
    3d72:	e7fa      	b.n	3d6a <sdc_init+0x1e>
    3d74:	4c15      	ldr	r4, [pc, #84]	; (3dcc <sdc_init+0x80>)
    3d76:	4816      	ldr	r0, [pc, #88]	; (3dd0 <sdc_init+0x84>)
    3d78:	6065      	str	r5, [r4, #4]
    3d7a:	f000 f9f9 	bl	4170 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3d7e:	2000      	movs	r0, #0
    3d80:	7060      	strb	r0, [r4, #1]
    3d82:	70a0      	strb	r0, [r4, #2]
    3d84:	70e0      	strb	r0, [r4, #3]
    3d86:	4601      	mov	r1, r0
    3d88:	2218      	movs	r2, #24
    3d8a:	4668      	mov	r0, sp
    3d8c:	f008 f913 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d90:	2218      	movs	r2, #24
    3d92:	4910      	ldr	r1, [pc, #64]	; (3dd4 <sdc_init+0x88>)
    3d94:	4668      	mov	r0, sp
    3d96:	f008 f894 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d9a:	2218      	movs	r2, #24
    3d9c:	4669      	mov	r1, sp
    3d9e:	480e      	ldr	r0, [pc, #56]	; (3dd8 <sdc_init+0x8c>)
    3da0:	f008 f88f 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3da4:	f3ef 8410 	mrs	r4, PRIMASK
    3da8:	b672      	cpsid	i
    3daa:	480c      	ldr	r0, [pc, #48]	; (3ddc <sdc_init+0x90>)
    3dac:	f06f 010c 	mvn.w	r1, #12
    3db0:	f000 fdac 	bl	490c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3db4:	480a      	ldr	r0, [pc, #40]	; (3de0 <sdc_init+0x94>)
    3db6:	f000 fe6d 	bl	4a94 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3dba:	b118      	cbz	r0, 3dc4 <sdc_init+0x78>
    3dbc:	2196      	movs	r1, #150	; 0x96
    3dbe:	2003      	movs	r0, #3
    3dc0:	f000 f810 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dc4:	b904      	cbnz	r4, 3dc8 <sdc_init+0x7c>
    3dc6:	b662      	cpsie	i
    3dc8:	2000      	movs	r0, #0
    3dca:	e7ce      	b.n	3d6a <sdc_init+0x1e>
    3dcc:	2000005c 	.word	0x2000005c
    3dd0:	00003bc9 	.word	0x00003bc9
    3dd4:	00003ed0 	.word	0x00003ed0
    3dd8:	20000f00 	.word	0x20000f00
    3ddc:	4000c000 	.word	0x4000c000
    3de0:	00003f7d 	.word	0x00003f7d

00003de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3de4:	b50e      	push	{r1, r2, r3, lr}
    3de6:	b672      	cpsid	i
    3de8:	4a15      	ldr	r2, [pc, #84]	; (3e40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3dea:	6855      	ldr	r5, [r2, #4]
    3dec:	b1d5      	cbz	r5, 3e24 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3dee:	2200      	movs	r2, #0
    3df0:	4603      	mov	r3, r0
    3df2:	466e      	mov	r6, sp
    3df4:	240a      	movs	r4, #10
    3df6:	e003      	b.n	3e00 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3df8:	fbb0 f0f4 	udiv	r0, r0, r4
    3dfc:	1c52      	adds	r2, r2, #1
    3dfe:	b2d2      	uxtb	r2, r2
    3e00:	2800      	cmp	r0, #0
    3e02:	d1f9      	bne.n	3df8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3e04:	54b0      	strb	r0, [r6, r2]
    3e06:	e009      	b.n	3e1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3e08:	fbb3 f0f4 	udiv	r0, r3, r4
    3e0c:	fb04 3010 	mls	r0, r4, r0, r3
    3e10:	fbb3 f3f4 	udiv	r3, r3, r4
    3e14:	1e52      	subs	r2, r2, #1
    3e16:	b2d2      	uxtb	r2, r2
    3e18:	3030      	adds	r0, #48	; 0x30
    3e1a:	54b0      	strb	r0, [r6, r2]
    3e1c:	2a00      	cmp	r2, #0
    3e1e:	d1f3      	bne.n	3e08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3e20:	4630      	mov	r0, r6
    3e22:	47a8      	blx	r5
    3e24:	f3bf 8f4f 	dsb	sy
    3e28:	4806      	ldr	r0, [pc, #24]	; (3e44 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3e2a:	6801      	ldr	r1, [r0, #0]
    3e2c:	4a06      	ldr	r2, [pc, #24]	; (3e48 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3e2e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3e32:	4311      	orrs	r1, r2
    3e34:	6001      	str	r1, [r0, #0]
    3e36:	f3bf 8f4f 	dsb	sy
    3e3a:	bf00      	nop
    3e3c:	e7fd      	b.n	3e3a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3e3e:	0000      	.short	0x0000
    3e40:	2000005c 	.word	0x2000005c
    3e44:	e000ed0c 	.word	0xe000ed0c
    3e48:	05fa0004 	.word	0x05fa0004

00003e4c <sdc_support_adv>:
    3e4c:	4806      	ldr	r0, [pc, #24]	; (3e68 <sdc_support_adv+0x1c>)
    3e4e:	b510      	push	{r4, lr}
    3e50:	7881      	ldrb	r1, [r0, #2]
    3e52:	7840      	ldrb	r0, [r0, #1]
    3e54:	4301      	orrs	r1, r0
    3e56:	d002      	beq.n	3e5e <sdc_support_adv+0x12>
    3e58:	f04f 30ff 	mov.w	r0, #4294967295
    3e5c:	bd10      	pop	{r4, pc}
    3e5e:	f006 fab5 	bl	a3cc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3e62:	2000      	movs	r0, #0
    3e64:	bd10      	pop	{r4, pc}
    3e66:	0000      	.short	0x0000
    3e68:	2000005c 	.word	0x2000005c

00003e6c <sdc_support_dle>:
    3e6c:	4806      	ldr	r0, [pc, #24]	; (3e88 <sdc_support_dle+0x1c>)
    3e6e:	b510      	push	{r4, lr}
    3e70:	7881      	ldrb	r1, [r0, #2]
    3e72:	7840      	ldrb	r0, [r0, #1]
    3e74:	4301      	orrs	r1, r0
    3e76:	d002      	beq.n	3e7e <sdc_support_dle+0x12>
    3e78:	f04f 30ff 	mov.w	r0, #4294967295
    3e7c:	bd10      	pop	{r4, pc}
    3e7e:	f006 f843 	bl	9f08 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3e82:	2000      	movs	r0, #0
    3e84:	bd10      	pop	{r4, pc}
    3e86:	0000      	.short	0x0000
    3e88:	2000005c 	.word	0x2000005c

00003e8c <sdc_support_le_2m_phy>:
    3e8c:	4806      	ldr	r0, [pc, #24]	; (3ea8 <sdc_support_le_2m_phy+0x1c>)
    3e8e:	b510      	push	{r4, lr}
    3e90:	7881      	ldrb	r1, [r0, #2]
    3e92:	7840      	ldrb	r0, [r0, #1]
    3e94:	4301      	orrs	r1, r0
    3e96:	d002      	beq.n	3e9e <sdc_support_le_2m_phy+0x12>
    3e98:	f04f 30ff 	mov.w	r0, #4294967295
    3e9c:	bd10      	pop	{r4, pc}
    3e9e:	f00b fb38 	bl	f512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3ea2:	2000      	movs	r0, #0
    3ea4:	bd10      	pop	{r4, pc}
    3ea6:	0000      	.short	0x0000
    3ea8:	2000005c 	.word	0x2000005c

00003eac <sdc_support_slave>:
    3eac:	4806      	ldr	r0, [pc, #24]	; (3ec8 <sdc_support_slave+0x1c>)
    3eae:	b510      	push	{r4, lr}
    3eb0:	7881      	ldrb	r1, [r0, #2]
    3eb2:	7840      	ldrb	r0, [r0, #1]
    3eb4:	4301      	orrs	r1, r0
    3eb6:	d002      	beq.n	3ebe <sdc_support_slave+0x12>
    3eb8:	f04f 30ff 	mov.w	r0, #4294967295
    3ebc:	bd10      	pop	{r4, pc}
    3ebe:	f006 fa97 	bl	a3f0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3ec2:	2000      	movs	r0, #0
    3ec4:	bd10      	pop	{r4, pc}
    3ec6:	0000      	.short	0x0000
    3ec8:	2000005c 	.word	0x2000005c
    3ecc:	00000001 	.word	0x00000001
    3ed0:	00010101 	.word	0x00010101
    3ed4:	031b1b00 	.word	0x031b1b00
    3ed8:	00000002 	.word	0x00000002
    3edc:	00001d4c 	.word	0x00001d4c
    3ee0:	001f0003 	.word	0x001f0003
    3ee4:	00000000 	.word	0x00000000
    3ee8:	d64ec0df 	.word	0xd64ec0df
    3eec:	09667c1f 	.word	0x09667c1f
    3ef0:	a02bf50a 	.word	0xa02bf50a
    3ef4:	6443f298 	.word	0x6443f298
    3ef8:	2aa6c562 	.word	0x2aa6c562

00003efc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3efc:	4a05      	ldr	r2, [pc, #20]	; (3f14 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3efe:	b510      	push	{r4, lr}
    3f00:	6852      	ldr	r2, [r2, #4]
    3f02:	b112      	cbz	r2, 3f0a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f08:	4710      	bx	r2
    3f0a:	2183      	movs	r1, #131	; 0x83
    3f0c:	2004      	movs	r0, #4
    3f0e:	f7ff ff69 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f12:	0000      	.short	0x0000
    3f14:	20000f18 	.word	0x20000f18

00003f18 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3f18:	4a05      	ldr	r2, [pc, #20]	; (3f30 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3f1a:	b510      	push	{r4, lr}
    3f1c:	6812      	ldr	r2, [r2, #0]
    3f1e:	b112      	cbz	r2, 3f26 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f24:	4710      	bx	r2
    3f26:	217d      	movs	r1, #125	; 0x7d
    3f28:	2004      	movs	r0, #4
    3f2a:	f7ff ff5b 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f2e:	0000      	.short	0x0000
    3f30:	20000f18 	.word	0x20000f18

00003f34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3f34:	4a05      	ldr	r2, [pc, #20]	; (3f4c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3f36:	b510      	push	{r4, lr}
    3f38:	6892      	ldr	r2, [r2, #8]
    3f3a:	b112      	cbz	r2, 3f42 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f40:	4710      	bx	r2
    3f42:	2189      	movs	r1, #137	; 0x89
    3f44:	2004      	movs	r0, #4
    3f46:	f7ff ff4d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f4a:	0000      	.short	0x0000
    3f4c:	20000f18 	.word	0x20000f18

00003f50 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3f50:	4805      	ldr	r0, [pc, #20]	; (3f68 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3f52:	6801      	ldr	r1, [r0, #0]
    3f54:	b129      	cbz	r1, 3f62 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f56:	6841      	ldr	r1, [r0, #4]
    3f58:	b119      	cbz	r1, 3f62 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f5a:	6880      	ldr	r0, [r0, #8]
    3f5c:	b108      	cbz	r0, 3f62 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f5e:	2001      	movs	r0, #1
    3f60:	4770      	bx	lr
    3f62:	2000      	movs	r0, #0
    3f64:	4770      	bx	lr
    3f66:	0000      	.short	0x0000
    3f68:	20000f18 	.word	0x20000f18

00003f6c <sdc_rand_source_register>:
    3f6c:	4902      	ldr	r1, [pc, #8]	; (3f78 <sdc_rand_source_register+0xc>)
    3f6e:	c80d      	ldmia	r0, {r0, r2, r3}
    3f70:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3f74:	2000      	movs	r0, #0
    3f76:	4770      	bx	lr
    3f78:	20000f18 	.word	0x20000f18

00003f7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f7e:	4c12      	ldr	r4, [pc, #72]	; (3fc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3f80:	2600      	movs	r6, #0
    3f82:	6825      	ldr	r5, [r4, #0]
    3f84:	e011      	b.n	3faa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f86:	9800      	ldr	r0, [sp, #0]
    3f88:	2802      	cmp	r0, #2
    3f8a:	d002      	beq.n	3f92 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3f8c:	2803      	cmp	r0, #3
    3f8e:	d10c      	bne.n	3faa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f90:	e006      	b.n	3fa0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3f92:	6820      	ldr	r0, [r4, #0]
    3f94:	b110      	cbz	r0, 3f9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3f96:	2000      	movs	r0, #0
    3f98:	6026      	str	r6, [r4, #0]
    3f9a:	e005      	b.n	3fa8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3f9c:	2128      	movs	r1, #40	; 0x28
    3f9e:	e00c      	b.n	3fba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3fa0:	6820      	ldr	r0, [r4, #0]
    3fa2:	b168      	cbz	r0, 3fc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3fa4:	2001      	movs	r0, #1
    3fa6:	6026      	str	r6, [r4, #0]
    3fa8:	47a8      	blx	r5
    3faa:	4668      	mov	r0, sp
    3fac:	f000 fd44 	bl	4a38 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3fb0:	2800      	cmp	r0, #0
    3fb2:	d0e8      	beq.n	3f86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3fb4:	2805      	cmp	r0, #5
    3fb6:	d005      	beq.n	3fc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3fb8:	2135      	movs	r1, #53	; 0x35
    3fba:	2004      	movs	r0, #4
    3fbc:	f7ff ff12 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fc0:	212d      	movs	r1, #45	; 0x2d
    3fc2:	e7fa      	b.n	3fba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fc6:	0000      	.short	0x0000
    3fc8:	20000064 	.word	0x20000064
    3fcc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3fce:	4c1f      	ldr	r4, [pc, #124]	; (404c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    3fd0:	4605      	mov	r5, r0
    3fd2:	7820      	ldrb	r0, [r4, #0]
    3fd4:	b140      	cbz	r0, 3fe8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3fd6:	78a2      	ldrb	r2, [r4, #2]
    3fd8:	1c61      	adds	r1, r4, #1
    3fda:	4628      	mov	r0, r5
    3fdc:	1c92      	adds	r2, r2, #2
    3fde:	f007 ff70 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3fe2:	2000      	movs	r0, #0
    3fe4:	7020      	strb	r0, [r4, #0]
    3fe6:	e021      	b.n	402c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    3fe8:	4819      	ldr	r0, [pc, #100]	; (4050 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3fea:	f005 ffc5 	bl	9f78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3fee:	2800      	cmp	r0, #0
    3ff0:	d01d      	beq.n	402e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    3ff2:	4c17      	ldr	r4, [pc, #92]	; (4050 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3ff4:	7820      	ldrb	r0, [r4, #0]
    3ff6:	2811      	cmp	r0, #17
    3ff8:	d104      	bne.n	4004 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    3ffa:	210a      	movs	r1, #10
    3ffc:	203e      	movs	r0, #62	; 0x3e
    3ffe:	f008 f8fe 	bl	c1fe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4002:	b118      	cbz	r0, 400c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4004:	7820      	ldrb	r0, [r4, #0]
    4006:	2808      	cmp	r0, #8
    4008:	d005      	beq.n	4016 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    400a:	e009      	b.n	4020 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    400c:	4910      	ldr	r1, [pc, #64]	; (4050 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    400e:	4628      	mov	r0, r5
    4010:	f008 fafd 	bl	c60e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4014:	e00a      	b.n	402c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4016:	2105      	movs	r1, #5
    4018:	203e      	movs	r0, #62	; 0x3e
    401a:	f008 f8f0 	bl	c1fe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    401e:	b138      	cbz	r0, 4030 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4020:	490b      	ldr	r1, [pc, #44]	; (4050 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4022:	4628      	mov	r0, r5
    4024:	f008 f949 	bl	c2ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4028:	2800      	cmp	r0, #0
    402a:	d000      	beq.n	402e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    402c:	2001      	movs	r0, #1
    402e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4030:	88a0      	ldrh	r0, [r4, #4]
    4032:	f8ad 0000 	strh.w	r0, [sp]
    4036:	a901      	add	r1, sp, #4
    4038:	4668      	mov	r0, sp
    403a:	f008 fc02 	bl	c842 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    403e:	2800      	cmp	r0, #0
    4040:	d0f5      	beq.n	402e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4042:	219a      	movs	r1, #154	; 0x9a
    4044:	2008      	movs	r0, #8
    4046:	f7ff fecd 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    404a:	0000      	.short	0x0000
    404c:	200010b6 	.word	0x200010b6
    4050:	20000fb4 	.word	0x20000fb4
    4054:	b570      	push	{r4, r5, r6, lr}
    4056:	780a      	ldrb	r2, [r1, #0]
    4058:	7082      	strb	r2, [r0, #2]
    405a:	b33a      	cbz	r2, 40ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    405c:	2a01      	cmp	r2, #1
    405e:	d825      	bhi.n	40ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4060:	2313      	movs	r3, #19
    4062:	7003      	strb	r3, [r0, #0]
    4064:	2300      	movs	r3, #0
    4066:	e00a      	b.n	407e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4068:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    406c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4070:	78a6      	ldrb	r6, [r4, #2]
    4072:	70ee      	strb	r6, [r5, #3]
    4074:	8864      	ldrh	r4, [r4, #2]
    4076:	0a24      	lsrs	r4, r4, #8
    4078:	1c5b      	adds	r3, r3, #1
    407a:	712c      	strb	r4, [r5, #4]
    407c:	b2db      	uxtb	r3, r3
    407e:	4293      	cmp	r3, r2
    4080:	d3f2      	bcc.n	4068 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4082:	2300      	movs	r3, #0
    4084:	e00b      	b.n	409e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    4086:	bf00      	nop
    4088:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    408c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4090:	792e      	ldrb	r6, [r5, #4]
    4092:	7166      	strb	r6, [r4, #5]
    4094:	88ad      	ldrh	r5, [r5, #4]
    4096:	0a2d      	lsrs	r5, r5, #8
    4098:	1c5b      	adds	r3, r3, #1
    409a:	71a5      	strb	r5, [r4, #6]
    409c:	b2db      	uxtb	r3, r3
    409e:	4293      	cmp	r3, r2
    40a0:	d3f2      	bcc.n	4088 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    40a2:	2101      	movs	r1, #1
    40a4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    40a8:	b2c0      	uxtb	r0, r0
    40aa:	bd70      	pop	{r4, r5, r6, pc}
    40ac:	2000      	movs	r0, #0
    40ae:	bd70      	pop	{r4, r5, r6, pc}

000040b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    40b0:	2101      	movs	r1, #1
    40b2:	4a0c      	ldr	r2, [pc, #48]	; (40e4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    40b4:	2840      	cmp	r0, #64	; 0x40
    40b6:	d20c      	bcs.n	40d2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    40b8:	2820      	cmp	r0, #32
    40ba:	d803      	bhi.n	40c4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    40bc:	1e40      	subs	r0, r0, #1
    40be:	4081      	lsls	r1, r0
    40c0:	6810      	ldr	r0, [r2, #0]
    40c2:	e002      	b.n	40ca <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    40c4:	3821      	subs	r0, #33	; 0x21
    40c6:	4081      	lsls	r1, r0
    40c8:	6850      	ldr	r0, [r2, #4]
    40ca:	4201      	tst	r1, r0
    40cc:	d107      	bne.n	40de <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    40ce:	2000      	movs	r0, #0
    40d0:	4770      	bx	lr
    40d2:	28ff      	cmp	r0, #255	; 0xff
    40d4:	d003      	beq.n	40de <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    40d6:	3840      	subs	r0, #64	; 0x40
    40d8:	4081      	lsls	r1, r0
    40da:	6890      	ldr	r0, [r2, #8]
    40dc:	e7f5      	b.n	40ca <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    40de:	2001      	movs	r0, #1
    40e0:	4770      	bx	lr
    40e2:	0000      	.short	0x0000
    40e4:	20000068 	.word	0x20000068

000040e8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    40e8:	2101      	movs	r1, #1
    40ea:	1e40      	subs	r0, r0, #1
    40ec:	4081      	lsls	r1, r0
    40ee:	4804      	ldr	r0, [pc, #16]	; (4100 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    40f0:	68c0      	ldr	r0, [r0, #12]
    40f2:	4201      	tst	r1, r0
    40f4:	d001      	beq.n	40fa <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    40f6:	2001      	movs	r0, #1
    40f8:	4770      	bx	lr
    40fa:	2000      	movs	r0, #0
    40fc:	4770      	bx	lr
    40fe:	0000      	.short	0x0000
    4100:	20000068 	.word	0x20000068

00004104 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4104:	4901      	ldr	r1, [pc, #4]	; (410c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4106:	6800      	ldr	r0, [r0, #0]
    4108:	60c8      	str	r0, [r1, #12]
    410a:	4770      	bx	lr
    410c:	20000068 	.word	0x20000068

00004110 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4110:	4904      	ldr	r1, [pc, #16]	; (4124 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4112:	6802      	ldr	r2, [r0, #0]
    4114:	6840      	ldr	r0, [r0, #4]
    4116:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    411a:	600a      	str	r2, [r1, #0]
    411c:	4a02      	ldr	r2, [pc, #8]	; (4128 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    411e:	4310      	orrs	r0, r2
    4120:	6048      	str	r0, [r1, #4]
    4122:	4770      	bx	lr
    4124:	20000068 	.word	0x20000068
    4128:	024007f8 	.word	0x024007f8

0000412c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    412c:	4901      	ldr	r1, [pc, #4]	; (4134 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    412e:	6800      	ldr	r0, [r0, #0]
    4130:	6088      	str	r0, [r1, #8]
    4132:	4770      	bx	lr
    4134:	20000068 	.word	0x20000068

00004138 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4138:	4805      	ldr	r0, [pc, #20]	; (4150 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    413a:	f04f 31ff 	mov.w	r1, #4294967295
    413e:	6001      	str	r1, [r0, #0]
    4140:	0cc9      	lsrs	r1, r1, #19
    4142:	6041      	str	r1, [r0, #4]
    4144:	2100      	movs	r1, #0
    4146:	6081      	str	r1, [r0, #8]
    4148:	211f      	movs	r1, #31
    414a:	60c1      	str	r1, [r0, #12]
    414c:	4770      	bx	lr
    414e:	0000      	.short	0x0000
    4150:	20000068 	.word	0x20000068

00004154 <sdc_hci_cmd_cb_reset>:
    4154:	b510      	push	{r4, lr}
    4156:	f7ff ffef 	bl	4138 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    415a:	f00b f94e 	bl	f3fa <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    415e:	4604      	mov	r4, r0
    4160:	4802      	ldr	r0, [pc, #8]	; (416c <sdc_hci_cmd_cb_reset+0x18>)
    4162:	6800      	ldr	r0, [r0, #0]
    4164:	b100      	cbz	r0, 4168 <sdc_hci_cmd_cb_reset+0x14>
    4166:	4780      	blx	r0
    4168:	4620      	mov	r0, r4
    416a:	bd10      	pop	{r4, pc}
    416c:	20000078 	.word	0x20000078

00004170 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4170:	4901      	ldr	r1, [pc, #4]	; (4178 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4172:	6008      	str	r0, [r1, #0]
    4174:	4770      	bx	lr
    4176:	0000      	.short	0x0000
    4178:	20000078 	.word	0x20000078

0000417c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    417c:	2102      	movs	r1, #2
    417e:	8001      	strh	r1, [r0, #0]
    4180:	8041      	strh	r1, [r0, #2]
    4182:	2100      	movs	r1, #0
    4184:	7101      	strb	r1, [r0, #4]
    4186:	21df      	movs	r1, #223	; 0xdf
    4188:	7141      	strb	r1, [r0, #5]
    418a:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    418e:	80c1      	strh	r1, [r0, #6]
    4190:	4901      	ldr	r1, [pc, #4]	; (4198 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4192:	6081      	str	r1, [r0, #8]
    4194:	2000      	movs	r0, #0
    4196:	4770      	bx	lr
    4198:	667c1fd6 	.word	0x667c1fd6

0000419c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    419c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    419e:	4604      	mov	r4, r0
    41a0:	4669      	mov	r1, sp
    41a2:	f008 feac 	bl	cefe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    41a6:	b170      	cbz	r0, 41c6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    41a8:	f240 215a 	movw	r1, #602	; 0x25a
    41ac:	e008      	b.n	41c0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    41ae:	bf00      	nop
    41b0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    41b4:	4621      	mov	r1, r4
    41b6:	f000 f8ab 	bl	4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    41ba:	b120      	cbz	r0, 41c6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    41bc:	f240 215f 	movw	r1, #607	; 0x25f
    41c0:	2017      	movs	r0, #23
    41c2:	f7ff fe0f 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41c6:	4668      	mov	r0, sp
    41c8:	f000 f852 	bl	4270 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    41cc:	2800      	cmp	r0, #0
    41ce:	d0ef      	beq.n	41b0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    41d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000041d4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    41d4:	b510      	push	{r4, lr}
    41d6:	2802      	cmp	r0, #2
    41d8:	d304      	bcc.n	41e4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    41da:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    41de:	2017      	movs	r0, #23
    41e0:	f7ff fe00 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41e4:	4901      	ldr	r1, [pc, #4]	; (41ec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    41e6:	5c08      	ldrb	r0, [r1, r0]
    41e8:	bd10      	pop	{r4, pc}
    41ea:	0000      	.short	0x0000
    41ec:	20000f24 	.word	0x20000f24

000041f0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    41f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41f2:	0005      	movs	r5, r0
    41f4:	9500      	str	r5, [sp, #0]
    41f6:	d010      	beq.n	421a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    41f8:	2600      	movs	r6, #0
    41fa:	7808      	ldrb	r0, [r1, #0]
    41fc:	7849      	ldrb	r1, [r1, #1]
    41fe:	4604      	mov	r4, r0
    4200:	42a1      	cmp	r1, r4
    4202:	d900      	bls.n	4206 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4204:	460c      	mov	r4, r1
    4206:	1cea      	adds	r2, r5, #3
    4208:	f022 0203 	bic.w	r2, r2, #3
    420c:	42aa      	cmp	r2, r5
    420e:	d006      	beq.n	421e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    4210:	f240 1179 	movw	r1, #377	; 0x179
    4214:	2017      	movs	r0, #23
    4216:	f7ff fde5 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    421a:	2601      	movs	r6, #1
    421c:	e7ed      	b.n	41fa <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    421e:	4f13      	ldr	r7, [pc, #76]	; (426c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4220:	7038      	strb	r0, [r7, #0]
    4222:	7079      	strb	r1, [r7, #1]
    4224:	4631      	mov	r1, r6
    4226:	4668      	mov	r0, sp
    4228:	f000 f8ee 	bl	4408 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    422c:	2100      	movs	r1, #0
    422e:	460b      	mov	r3, r1
    4230:	9800      	ldr	r0, [sp, #0]
    4232:	1cc0      	adds	r0, r0, #3
    4234:	f020 0003 	bic.w	r0, r0, #3
    4238:	9000      	str	r0, [sp, #0]
    423a:	b96e      	cbnz	r6, 4258 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    423c:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4240:	60d0      	str	r0, [r2, #12]
    4242:	2000      	movs	r0, #0
    4244:	e006      	b.n	4254 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4246:	bf00      	nop
    4248:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    424c:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4250:	1c40      	adds	r0, r0, #1
    4252:	b2c0      	uxtb	r0, r0
    4254:	42a0      	cmp	r0, r4
    4256:	d3f7      	bcc.n	4248 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4258:	9800      	ldr	r0, [sp, #0]
    425a:	1c49      	adds	r1, r1, #1
    425c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4260:	b2c9      	uxtb	r1, r1
    4262:	9000      	str	r0, [sp, #0]
    4264:	2902      	cmp	r1, #2
    4266:	d3e3      	bcc.n	4230 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    4268:	1b40      	subs	r0, r0, r5
    426a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    426c:	20000f24 	.word	0x20000f24

00004270 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4270:	b570      	push	{r4, r5, r6, lr}
    4272:	4604      	mov	r4, r0
    4274:	f008 ffb7 	bl	d1e6 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4278:	b108      	cbz	r0, 427e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    427a:	2010      	movs	r0, #16
    427c:	bd70      	pop	{r4, r5, r6, pc}
    427e:	7825      	ldrb	r5, [r4, #0]
    4280:	f000 f8fe 	bl	4480 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4284:	4602      	mov	r2, r0
    4286:	480c      	ldr	r0, [pc, #48]	; (42b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4288:	8861      	ldrh	r1, [r4, #2]
    428a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    428e:	e00e      	b.n	42ae <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4290:	68c3      	ldr	r3, [r0, #12]
    4292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4296:	b143      	cbz	r3, 42aa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4298:	1c4a      	adds	r2, r1, #1
    429a:	8062      	strh	r2, [r4, #2]
    429c:	80a1      	strh	r1, [r4, #4]
    429e:	68c0      	ldr	r0, [r0, #12]
    42a0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    42a4:	60a0      	str	r0, [r4, #8]
    42a6:	2000      	movs	r0, #0
    42a8:	bd70      	pop	{r4, r5, r6, pc}
    42aa:	1c49      	adds	r1, r1, #1
    42ac:	b289      	uxth	r1, r1
    42ae:	4291      	cmp	r1, r2
    42b0:	d3ee      	bcc.n	4290 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    42b2:	8061      	strh	r1, [r4, #2]
    42b4:	2005      	movs	r0, #5
    42b6:	bd70      	pop	{r4, r5, r6, pc}
    42b8:	20000f24 	.word	0x20000f24

000042bc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    42bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42c0:	b121      	cbz	r1, 42cc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    42c2:	2901      	cmp	r1, #1
    42c4:	d002      	beq.n	42cc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    42c6:	2000      	movs	r0, #0
    42c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42cc:	4c0f      	ldr	r4, [pc, #60]	; (430c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    42ce:	2700      	movs	r7, #0
    42d0:	463b      	mov	r3, r7
    42d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    42d6:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    42da:	f814 c001 	ldrb.w	ip, [r4, r1]
    42de:	e00a      	b.n	42f6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    42e0:	19dc      	adds	r4, r3, r7
    42e2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    42e6:	b2a4      	uxth	r4, r4
    42e8:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    42ec:	f1be 0f00 	cmp.w	lr, #0
    42f0:	d004      	beq.n	42fc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    42f2:	1c5b      	adds	r3, r3, #1
    42f4:	b29b      	uxth	r3, r3
    42f6:	459c      	cmp	ip, r3
    42f8:	d8f2      	bhi.n	42e0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    42fa:	4634      	mov	r4, r6
    42fc:	8004      	strh	r4, [r0, #0]
    42fe:	4620      	mov	r0, r4
    4300:	42b4      	cmp	r4, r6
    4302:	d0e0      	beq.n	42c6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4308:	f000 b834 	b.w	4374 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    430c:	20000f24 	.word	0x20000f24

00004310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4314:	4606      	mov	r6, r0
    4316:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    431a:	460c      	mov	r4, r1
    431c:	f243 0702 	movw	r7, #12290	; 0x3002
    4320:	38ff      	subs	r0, #255	; 0xff
    4322:	d020      	beq.n	4366 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4324:	2c02      	cmp	r4, #2
    4326:	d302      	bcc.n	432e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4328:	2007      	movs	r0, #7
    432a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    432e:	4630      	mov	r0, r6
    4330:	f000 f85a 	bl	43e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4334:	0005      	movs	r5, r0
    4336:	d016      	beq.n	4366 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4338:	480c      	ldr	r0, [pc, #48]	; (436c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    433a:	4629      	mov	r1, r5
    433c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4340:	4630      	mov	r0, r6
    4342:	4790      	blx	r2
    4344:	480a      	ldr	r0, [pc, #40]	; (4370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4346:	2100      	movs	r1, #0
    4348:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    434c:	68f8      	ldr	r0, [r7, #12]
    434e:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4352:	4620      	mov	r0, r4
    4354:	f000 f88a 	bl	446c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4358:	4602      	mov	r2, r0
    435a:	4629      	mov	r1, r5
    435c:	6878      	ldr	r0, [r7, #4]
    435e:	f008 fdad 	bl	cebc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4362:	2000      	movs	r0, #0
    4364:	e7e1      	b.n	432a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4366:	4638      	mov	r0, r7
    4368:	e7df      	b.n	432a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    436a:	0000      	.short	0x0000
    436c:	000044a0 	.word	0x000044a0
    4370:	20000f24 	.word	0x20000f24
    4374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4378:	4690      	mov	r8, r2
    437a:	460d      	mov	r5, r1
    437c:	4607      	mov	r7, r0
    437e:	f008 fdcf 	bl	cf20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4382:	b148      	cbz	r0, 4398 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4384:	4816      	ldr	r0, [pc, #88]	; (43e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4386:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    438a:	68f0      	ldr	r0, [r6, #12]
    438c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4390:	b128      	cbz	r0, 439e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4392:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4396:	e015      	b.n	43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4398:	f240 1139 	movw	r1, #313	; 0x139
    439c:	e012      	b.n	43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    439e:	6870      	ldr	r0, [r6, #4]
    43a0:	2800      	cmp	r0, #0
    43a2:	d01a      	beq.n	43da <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    43a4:	4628      	mov	r0, r5
    43a6:	f000 f861 	bl	446c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    43aa:	4601      	mov	r1, r0
    43ac:	6870      	ldr	r0, [r6, #4]
    43ae:	f008 fd37 	bl	ce20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    43b2:	0004      	movs	r4, r0
    43b4:	d010      	beq.n	43d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    43b6:	68f0      	ldr	r0, [r6, #12]
    43b8:	2d02      	cmp	r5, #2
    43ba:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    43be:	d304      	bcc.n	43ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    43c0:	f240 1145 	movw	r1, #325	; 0x145
    43c4:	2017      	movs	r0, #23
    43c6:	f7ff fd0d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43ca:	4806      	ldr	r0, [pc, #24]	; (43e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    43cc:	4642      	mov	r2, r8
    43ce:	4621      	mov	r1, r4
    43d0:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    43d4:	4638      	mov	r0, r7
    43d6:	4798      	blx	r3
    43d8:	4620      	mov	r0, r4
    43da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43de:	0000      	.short	0x0000
    43e0:	20000f24 	.word	0x20000f24
    43e4:	00004498 	.word	0x00004498
    43e8:	b570      	push	{r4, r5, r6, lr}
    43ea:	460c      	mov	r4, r1
    43ec:	4605      	mov	r5, r0
    43ee:	f008 fd97 	bl	cf20 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    43f2:	2800      	cmp	r0, #0
    43f4:	d005      	beq.n	4402 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    43f6:	4803      	ldr	r0, [pc, #12]	; (4404 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    43f8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    43fc:	68c0      	ldr	r0, [r0, #12]
    43fe:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4402:	bd70      	pop	{r4, r5, r6, pc}
    4404:	20000f24 	.word	0x20000f24
    4408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    440c:	4e16      	ldr	r6, [pc, #88]	; (4468 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    440e:	4688      	mov	r8, r1
    4410:	4605      	mov	r5, r0
    4412:	2400      	movs	r4, #0
    4414:	6828      	ldr	r0, [r5, #0]
    4416:	1cc0      	adds	r0, r0, #3
    4418:	f020 0003 	bic.w	r0, r0, #3
    441c:	6028      	str	r0, [r5, #0]
    441e:	4620      	mov	r0, r4
    4420:	f000 f824 	bl	446c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4424:	5d31      	ldrb	r1, [r6, r4]
    4426:	4348      	muls	r0, r1
    4428:	f1b8 0f00 	cmp.w	r8, #0
    442c:	d001      	beq.n	4432 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    442e:	2200      	movs	r2, #0
    4430:	e000      	b.n	4434 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4432:	682a      	ldr	r2, [r5, #0]
    4434:	4601      	mov	r1, r0
    4436:	9200      	str	r2, [sp, #0]
    4438:	b132      	cbz	r2, 4448 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    443a:	2700      	movs	r7, #0
    443c:	ea4f 000d 	mov.w	r0, sp
    4440:	f008 fd1b 	bl	ce7a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4444:	b11f      	cbz	r7, 444e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4446:	e006      	b.n	4456 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4448:	2701      	movs	r7, #1
    444a:	2000      	movs	r0, #0
    444c:	e7f8      	b.n	4440 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    444e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4452:	9a00      	ldr	r2, [sp, #0]
    4454:	604a      	str	r2, [r1, #4]
    4456:	6829      	ldr	r1, [r5, #0]
    4458:	1c64      	adds	r4, r4, #1
    445a:	4408      	add	r0, r1
    445c:	b2e4      	uxtb	r4, r4
    445e:	6028      	str	r0, [r5, #0]
    4460:	2c02      	cmp	r4, #2
    4462:	d3d7      	bcc.n	4414 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4468:	20000f24 	.word	0x20000f24
    446c:	4903      	ldr	r1, [pc, #12]	; (447c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    446e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4472:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4476:	1cc0      	adds	r0, r0, #3
    4478:	4008      	ands	r0, r1
    447a:	4770      	bx	lr
    447c:	00004494 	.word	0x00004494
    4480:	4903      	ldr	r1, [pc, #12]	; (4490 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    4482:	7808      	ldrb	r0, [r1, #0]
    4484:	7849      	ldrb	r1, [r1, #1]
    4486:	4288      	cmp	r0, r1
    4488:	d200      	bcs.n	448c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    448a:	4608      	mov	r0, r1
    448c:	4770      	bx	lr
    448e:	0000      	.short	0x0000
    4490:	20000f24 	.word	0x20000f24
    4494:	00d40218 	.word	0x00d40218
    4498:	0000cf35 	.word	0x0000cf35
    449c:	0000cf35 	.word	0x0000cf35
    44a0:	0000e9dd 	.word	0x0000e9dd
    44a4:	0000de55 	.word	0x0000de55

000044a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    44a8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44ac:	4c26      	ldr	r4, [pc, #152]	; (4548 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    44ae:	4680      	mov	r8, r0
    44b0:	b081      	sub	sp, #4
    44b2:	6820      	ldr	r0, [r4, #0]
    44b4:	469a      	mov	sl, r3
    44b6:	4693      	mov	fp, r2
    44b8:	b158      	cbz	r0, 44d2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    44ba:	7a02      	ldrb	r2, [r0, #8]
    44bc:	4542      	cmp	r2, r8
    44be:	d903      	bls.n	44c8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    44c0:	6841      	ldr	r1, [r0, #4]
    44c2:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    44c6:	b140      	cbz	r0, 44da <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    44c8:	f243 0002 	movw	r0, #12290	; 0x3002
    44cc:	b005      	add	sp, #20
    44ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44d2:	21a5      	movs	r1, #165	; 0xa5
    44d4:	2018      	movs	r0, #24
    44d6:	f7ff fc85 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44da:	4619      	mov	r1, r3
    44dc:	9802      	ldr	r0, [sp, #8]
    44de:	f008 fd41 	bl	cf64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    44e2:	b286      	uxth	r6, r0
    44e4:	4658      	mov	r0, fp
    44e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    44e8:	f008 fd33 	bl	cf52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    44ec:	b285      	uxth	r5, r0
    44ee:	1970      	adds	r0, r6, r5
    44f0:	1d00      	adds	r0, r0, #4
    44f2:	b287      	uxth	r7, r0
    44f4:	6820      	ldr	r0, [r4, #0]
    44f6:	46a1      	mov	r9, r4
    44f8:	4639      	mov	r1, r7
    44fa:	6800      	ldr	r0, [r0, #0]
    44fc:	f008 fc90 	bl	ce20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4500:	0004      	movs	r4, r0
    4502:	d01f      	beq.n	4544 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4504:	8067      	strh	r7, [r4, #2]
    4506:	8025      	strh	r5, [r4, #0]
    4508:	4629      	mov	r1, r5
    450a:	1d20      	adds	r0, r4, #4
    450c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    450e:	4607      	mov	r7, r0
    4510:	465a      	mov	r2, fp
    4512:	2301      	movs	r3, #1
    4514:	9500      	str	r5, [sp, #0]
    4516:	f008 fbe3 	bl	cce0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    451a:	8820      	ldrh	r0, [r4, #0]
    451c:	4631      	mov	r1, r6
    451e:	4438      	add	r0, r7
    4520:	2301      	movs	r3, #1
    4522:	9a02      	ldr	r2, [sp, #8]
    4524:	f8cd a000 	str.w	sl, [sp]
    4528:	f008 fbda 	bl	cce0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    452c:	8820      	ldrh	r0, [r4, #0]
    452e:	19c1      	adds	r1, r0, r7
    4530:	4638      	mov	r0, r7
    4532:	f008 fc06 	bl	cd42 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4536:	f8d9 0000 	ldr.w	r0, [r9]
    453a:	6841      	ldr	r1, [r0, #4]
    453c:	2000      	movs	r0, #0
    453e:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4542:	e7c3      	b.n	44cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4544:	2004      	movs	r0, #4
    4546:	e7c1      	b.n	44cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4548:	2000007c 	.word	0x2000007c

0000454c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    454c:	b570      	push	{r4, r5, r6, lr}
    454e:	4c14      	ldr	r4, [pc, #80]	; (45a0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4550:	6823      	ldr	r3, [r4, #0]
    4552:	b18b      	cbz	r3, 4578 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4554:	7a19      	ldrb	r1, [r3, #8]
    4556:	4281      	cmp	r1, r0
    4558:	d912      	bls.n	4580 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    455a:	685a      	ldr	r2, [r3, #4]
    455c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4560:	b171      	cbz	r1, 4580 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4562:	2500      	movs	r5, #0
    4564:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4568:	884a      	ldrh	r2, [r1, #2]
    456a:	6818      	ldr	r0, [r3, #0]
    456c:	f008 fca6 	bl	cebc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4570:	6821      	ldr	r1, [r4, #0]
    4572:	2000      	movs	r0, #0
    4574:	7a0a      	ldrb	r2, [r1, #8]
    4576:	e00c      	b.n	4592 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4578:	21c8      	movs	r1, #200	; 0xc8
    457a:	2018      	movs	r0, #24
    457c:	f7ff fc32 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4580:	f243 0002 	movw	r0, #12290	; 0x3002
    4584:	bd70      	pop	{r4, r5, r6, pc}
    4586:	684b      	ldr	r3, [r1, #4]
    4588:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    458c:	b933      	cbnz	r3, 459c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    458e:	1c40      	adds	r0, r0, #1
    4590:	b2c0      	uxtb	r0, r0
    4592:	4282      	cmp	r2, r0
    4594:	d8f7      	bhi.n	4586 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4596:	6808      	ldr	r0, [r1, #0]
    4598:	f008 fc85 	bl	cea6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    459c:	2000      	movs	r0, #0
    459e:	bd70      	pop	{r4, r5, r6, pc}
    45a0:	2000007c 	.word	0x2000007c

000045a4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    45a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45a8:	460d      	mov	r5, r1
    45aa:	0004      	movs	r4, r0
    45ac:	4690      	mov	r8, r2
    45ae:	f04f 0600 	mov.w	r6, #0
    45b2:	d009      	beq.n	45c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    45b4:	2700      	movs	r7, #0
    45b6:	1ce0      	adds	r0, r4, #3
    45b8:	f020 0003 	bic.w	r0, r0, #3
    45bc:	42a0      	cmp	r0, r4
    45be:	d005      	beq.n	45cc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    45c0:	2186      	movs	r1, #134	; 0x86
    45c2:	2018      	movs	r0, #24
    45c4:	f7ff fc0e 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45c8:	2701      	movs	r7, #1
    45ca:	e7f4      	b.n	45b6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    45cc:	b1cd      	cbz	r5, 4602 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    45ce:	4611      	mov	r1, r2
    45d0:	2000      	movs	r0, #0
    45d2:	f008 fc52 	bl	ce7a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    45d6:	300c      	adds	r0, #12
    45d8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    45dc:	b98f      	cbnz	r7, 4602 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    45de:	4f0a      	ldr	r7, [pc, #40]	; (4608 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    45e0:	f104 000c 	add.w	r0, r4, #12
    45e4:	00aa      	lsls	r2, r5, #2
    45e6:	603c      	str	r4, [r7, #0]
    45e8:	7225      	strb	r5, [r4, #8]
    45ea:	6060      	str	r0, [r4, #4]
    45ec:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    45f0:	6020      	str	r0, [r4, #0]
    45f2:	2100      	movs	r1, #0
    45f4:	6860      	ldr	r0, [r4, #4]
    45f6:	f007 fcde 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    45fa:	4641      	mov	r1, r8
    45fc:	6838      	ldr	r0, [r7, #0]
    45fe:	f008 fc3c 	bl	ce7a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4602:	4630      	mov	r0, r6
    4604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4608:	2000007c 	.word	0x2000007c

0000460c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    460c:	b570      	push	{r4, r5, r6, lr}
    460e:	4d08      	ldr	r5, [pc, #32]	; (4630 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4610:	6828      	ldr	r0, [r5, #0]
    4612:	2800      	cmp	r0, #0
    4614:	d00a      	beq.n	462c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4616:	2400      	movs	r4, #0
    4618:	e004      	b.n	4624 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    461a:	4620      	mov	r0, r4
    461c:	f7ff ff96 	bl	454c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4620:	1c64      	adds	r4, r4, #1
    4622:	b2e4      	uxtb	r4, r4
    4624:	6828      	ldr	r0, [r5, #0]
    4626:	7a00      	ldrb	r0, [r0, #8]
    4628:	42a0      	cmp	r0, r4
    462a:	d8f6      	bhi.n	461a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    462c:	bd70      	pop	{r4, r5, r6, pc}
    462e:	0000      	.short	0x0000
    4630:	2000007c 	.word	0x2000007c

00004634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4634:	4909      	ldr	r1, [pc, #36]	; (465c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4636:	b510      	push	{r4, lr}
    4638:	4602      	mov	r2, r0
    463a:	6809      	ldr	r1, [r1, #0]
    463c:	2000      	movs	r0, #0
    463e:	b149      	cbz	r1, 4654 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4640:	7a0b      	ldrb	r3, [r1, #8]
    4642:	4293      	cmp	r3, r2
    4644:	d905      	bls.n	4652 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4646:	6849      	ldr	r1, [r1, #4]
    4648:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    464c:	2900      	cmp	r1, #0
    464e:	d000      	beq.n	4652 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4650:	1d08      	adds	r0, r1, #4
    4652:	bd10      	pop	{r4, pc}
    4654:	21ee      	movs	r1, #238	; 0xee
    4656:	2018      	movs	r0, #24
    4658:	f7ff fbc4 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    465c:	2000007c 	.word	0x2000007c

00004660 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4660:	490a      	ldr	r1, [pc, #40]	; (468c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4662:	b510      	push	{r4, lr}
    4664:	4602      	mov	r2, r0
    4666:	6809      	ldr	r1, [r1, #0]
    4668:	2000      	movs	r0, #0
    466a:	b159      	cbz	r1, 4684 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    466c:	7a0b      	ldrb	r3, [r1, #8]
    466e:	4293      	cmp	r3, r2
    4670:	d907      	bls.n	4682 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4672:	6849      	ldr	r1, [r1, #4]
    4674:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4678:	2900      	cmp	r1, #0
    467a:	d002      	beq.n	4682 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    467c:	f831 0b04 	ldrh.w	r0, [r1], #4
    4680:	4408      	add	r0, r1
    4682:	bd10      	pop	{r4, pc}
    4684:	21fc      	movs	r1, #252	; 0xfc
    4686:	2018      	movs	r0, #24
    4688:	f7ff fbac 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    468c:	2000007c 	.word	0x2000007c
    4690:	b570      	push	{r4, r5, r6, lr}
    4692:	4b1e      	ldr	r3, [pc, #120]	; (470c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4694:	6845      	ldr	r5, [r0, #4]
    4696:	4604      	mov	r4, r0
    4698:	2200      	movs	r2, #0
    469a:	b1a1      	cbz	r1, 46c6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    469c:	2001      	movs	r0, #1
    469e:	7060      	strb	r0, [r4, #1]
    46a0:	8858      	ldrh	r0, [r3, #2]
    46a2:	0881      	lsrs	r1, r0, #2
    46a4:	f05f 0000 	movs.w	r0, #0
    46a8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    46ac:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    46b0:	831a      	strh	r2, [r3, #24]
    46b2:	8419      	strh	r1, [r3, #32]
    46b4:	fb00 5301 	mla	r3, r0, r1, r5
    46b8:	6073      	str	r3, [r6, #4]
    46ba:	1823      	adds	r3, r4, r0
    46bc:	1c40      	adds	r0, r0, #1
    46be:	751a      	strb	r2, [r3, #20]
    46c0:	2804      	cmp	r0, #4
    46c2:	d3f1      	bcc.n	46a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    46c4:	bd70      	pop	{r4, r5, r6, pc}
    46c6:	7062      	strb	r2, [r4, #1]
    46c8:	f05f 0000 	movs.w	r0, #0
    46cc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    46d0:	830a      	strh	r2, [r1, #24]
    46d2:	840a      	strh	r2, [r1, #32]
    46d4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    46d8:	604a      	str	r2, [r1, #4]
    46da:	1821      	adds	r1, r4, r0
    46dc:	1c40      	adds	r0, r0, #1
    46de:	750a      	strb	r2, [r1, #20]
    46e0:	2804      	cmp	r0, #4
    46e2:	d3f3      	bcc.n	46cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    46e4:	8858      	ldrh	r0, [r3, #2]
    46e6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    46ea:	d201      	bcs.n	46f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    46ec:	0846      	lsrs	r6, r0, #1
    46ee:	e000      	b.n	46f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    46f0:	26ff      	movs	r6, #255	; 0xff
    46f2:	f008 fcaa 	bl	d04a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    46f6:	6065      	str	r5, [r4, #4]
    46f8:	8420      	strh	r0, [r4, #32]
    46fa:	1829      	adds	r1, r5, r0
    46fc:	60a1      	str	r1, [r4, #8]
    46fe:	8466      	strh	r6, [r4, #34]	; 0x22
    4700:	60e5      	str	r5, [r4, #12]
    4702:	84a0      	strh	r0, [r4, #36]	; 0x24
    4704:	6121      	str	r1, [r4, #16]
    4706:	84e6      	strh	r6, [r4, #38]	; 0x26
    4708:	bd70      	pop	{r4, r5, r6, pc}
    470a:	0000      	.short	0x0000
    470c:	20000080 	.word	0x20000080

00004710 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4714:	b170      	cbz	r0, 4734 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    4716:	2500      	movs	r5, #0
    4718:	4411      	add	r1, r2
    471a:	b2cc      	uxtb	r4, r1
    471c:	4e24      	ldr	r6, [pc, #144]	; (47b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    471e:	1cc1      	adds	r1, r0, #3
    4720:	2700      	movs	r7, #0
    4722:	f021 0103 	bic.w	r1, r1, #3
    4726:	7034      	strb	r4, [r6, #0]
    4728:	4281      	cmp	r1, r0
    472a:	d005      	beq.n	4738 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    472c:	214e      	movs	r1, #78	; 0x4e
    472e:	2009      	movs	r0, #9
    4730:	f7ff fb58 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4734:	2501      	movs	r5, #1
    4736:	e7ef      	b.n	4718 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4738:	2b1f      	cmp	r3, #31
    473a:	d804      	bhi.n	4746 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    473c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4740:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4744:	e009      	b.n	475a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    4746:	0059      	lsls	r1, r3, #1
    4748:	2bff      	cmp	r3, #255	; 0xff
    474a:	d90b      	bls.n	4764 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    474c:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4750:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4754:	d200      	bcs.n	4758 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    4756:	4611      	mov	r1, r2
    4758:	b289      	uxth	r1, r1
    475a:	1cc9      	adds	r1, r1, #3
    475c:	f021 0303 	bic.w	r3, r1, #3
    4760:	b135      	cbz	r5, 4770 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    4762:	e007      	b.n	4774 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    4764:	227c      	movs	r2, #124	; 0x7c
    4766:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    476a:	d3f5      	bcc.n	4758 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    476c:	217c      	movs	r1, #124	; 0x7c
    476e:	e7f3      	b.n	4758 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    4770:	6070      	str	r0, [r6, #4]
    4772:	8073      	strh	r3, [r6, #2]
    4774:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    4778:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    477c:	2100      	movs	r1, #0
    477e:	6876      	ldr	r6, [r6, #4]
    4780:	f04f 0c01 	mov.w	ip, #1
    4784:	e00d      	b.n	47a2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    4786:	b94d      	cbnz	r5, 479c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    4788:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    478c:	eb00 0e02 	add.w	lr, r0, r2
    4790:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4794:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    4798:	f8c7 e004 	str.w	lr, [r7, #4]
    479c:	1c49      	adds	r1, r1, #1
    479e:	441a      	add	r2, r3
    47a0:	b2c9      	uxtb	r1, r1
    47a2:	42a1      	cmp	r1, r4
    47a4:	d3ef      	bcc.n	4786 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    47a6:	1dd2      	adds	r2, r2, #7
    47a8:	f022 0007 	bic.w	r0, r2, #7
    47ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47b0:	20000080 	.word	0x20000080

000047b4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    47b4:	b570      	push	{r4, r5, r6, lr}
    47b6:	4a10      	ldr	r2, [pc, #64]	; (47f8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    47b8:	2000      	movs	r0, #0
    47ba:	6851      	ldr	r1, [r2, #4]
    47bc:	7812      	ldrb	r2, [r2, #0]
    47be:	e014      	b.n	47ea <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    47c0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    47c4:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    47c8:	b16b      	cbz	r3, 47e6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    47ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    47ce:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    47d2:	d00c      	beq.n	47ee <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    47d4:	2500      	movs	r5, #0
    47d6:	70a5      	strb	r5, [r4, #2]
    47d8:	2101      	movs	r1, #1
    47da:	4620      	mov	r0, r4
    47dc:	f7ff ff58 	bl	4690 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    47e0:	7025      	strb	r5, [r4, #0]
    47e2:	4620      	mov	r0, r4
    47e4:	bd70      	pop	{r4, r5, r6, pc}
    47e6:	1c40      	adds	r0, r0, #1
    47e8:	b2c0      	uxtb	r0, r0
    47ea:	4290      	cmp	r0, r2
    47ec:	d3e8      	bcc.n	47c0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    47ee:	21a9      	movs	r1, #169	; 0xa9
    47f0:	2009      	movs	r0, #9
    47f2:	f7ff faf7 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47f6:	0000      	.short	0x0000
    47f8:	20000080 	.word	0x20000080

000047fc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    47fc:	4804      	ldr	r0, [pc, #16]	; (4810 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    47fe:	b510      	push	{r4, lr}
    4800:	8840      	ldrh	r0, [r0, #2]
    4802:	0884      	lsrs	r4, r0, #2
    4804:	f008 fc21 	bl	d04a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    4808:	4284      	cmp	r4, r0
    480a:	d300      	bcc.n	480e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    480c:	4620      	mov	r0, r4
    480e:	bd10      	pop	{r4, pc}
    4810:	20000080 	.word	0x20000080
    4814:	4909      	ldr	r1, [pc, #36]	; (483c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    4816:	b510      	push	{r4, lr}
    4818:	4807      	ldr	r0, [pc, #28]	; (4838 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    481a:	6008      	str	r0, [r1, #0]
    481c:	4b08      	ldr	r3, [pc, #32]	; (4840 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    481e:	2011      	movs	r0, #17
    4820:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4824:	2200      	movs	r2, #0
    4826:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    482a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    482e:	1c40      	adds	r0, r0, #1
    4830:	b2c0      	uxtb	r0, r0
    4832:	2814      	cmp	r0, #20
    4834:	d3f4      	bcc.n	4820 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    4836:	bd10      	pop	{r4, pc}
    4838:	fffe0000 	.word	0xfffe0000
    483c:	4001f508 	.word	0x4001f508
    4840:	4001f000 	.word	0x4001f000
    4844:	b570      	push	{r4, r5, r6, lr}
    4846:	2420      	movs	r4, #32
    4848:	2100      	movs	r1, #0
    484a:	2301      	movs	r3, #1
    484c:	fa20 f201 	lsr.w	r2, r0, r1
    4850:	07d2      	lsls	r2, r2, #31
    4852:	d020      	beq.n	4896 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    4854:	b24a      	sxtb	r2, r1
    4856:	2a00      	cmp	r2, #0
    4858:	db10      	blt.n	487c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    485a:	bf00      	nop
    485c:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4860:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4864:	f002 051f 	and.w	r5, r2, #31
    4868:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    486c:	fa03 f505 	lsl.w	r5, r3, r5
    4870:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4874:	f3bf 8f4f 	dsb	sy
    4878:	f3bf 8f6f 	isb	sy
    487c:	db0b      	blt.n	4896 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    487e:	f002 051f 	and.w	r5, r2, #31
    4882:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4886:	ea4f 0282 	mov.w	r2, r2, lsl #2
    488a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    488e:	fa03 f505 	lsl.w	r5, r3, r5
    4892:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4896:	f101 0101 	add.w	r1, r1, #1
    489a:	42a1      	cmp	r1, r4
    489c:	d3d6      	bcc.n	484c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    489e:	bd70      	pop	{r4, r5, r6, pc}
    48a0:	b570      	push	{r4, r5, r6, lr}
    48a2:	0042      	lsls	r2, r0, #1
    48a4:	f04f 0100 	mov.w	r1, #0
    48a8:	d501      	bpl.n	48ae <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    48aa:	4a14      	ldr	r2, [pc, #80]	; (48fc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    48ac:	6011      	str	r1, [r2, #0]
    48ae:	f3c0 3280 	ubfx	r2, r0, #14, #1
    48b2:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    48b6:	429a      	cmp	r2, r3
    48b8:	d003      	beq.n	48c2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    48ba:	2166      	movs	r1, #102	; 0x66
    48bc:	201b      	movs	r0, #27
    48be:	f7ff fa91 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48c2:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    48c6:	d014      	beq.n	48f2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    48c8:	4a0d      	ldr	r2, [pc, #52]	; (4900 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    48ca:	2001      	movs	r0, #1
    48cc:	6050      	str	r0, [r2, #4]
    48ce:	1e83      	subs	r3, r0, #2
    48d0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    48d4:	4a0b      	ldr	r2, [pc, #44]	; (4904 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    48d6:	6090      	str	r0, [r2, #8]
    48d8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    48dc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    48e0:	4c09      	ldr	r4, [pc, #36]	; (4908 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    48e2:	6021      	str	r1, [r4, #0]
    48e4:	1d25      	adds	r5, r4, #4
    48e6:	6028      	str	r0, [r5, #0]
    48e8:	6090      	str	r0, [r2, #8]
    48ea:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    48ee:	6021      	str	r1, [r4, #0]
    48f0:	6028      	str	r0, [r5, #0]
    48f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    48f6:	f7ff bf8d 	b.w	4814 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    48fa:	0000      	.short	0x0000
    48fc:	4001e504 	.word	0x4001e504
    4900:	4000e000 	.word	0x4000e000
    4904:	4000f000 	.word	0x4000f000
    4908:	4000f500 	.word	0x4000f500

0000490c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    490c:	b570      	push	{r4, r5, r6, lr}
    490e:	4c0a      	ldr	r4, [pc, #40]	; (4938 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4910:	460d      	mov	r5, r1
    4912:	6020      	str	r0, [r4, #0]
    4914:	f7ff ffc4 	bl	48a0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    4918:	6820      	ldr	r0, [r4, #0]
    491a:	f7ff ff93 	bl	4844 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    491e:	f000 f877 	bl	4a10 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4922:	f7ff ff77 	bl	4814 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4926:	f008 fc53 	bl	d1d0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    492a:	4628      	mov	r0, r5
    492c:	f000 f8aa 	bl	4a84 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4934:	f000 b8c2 	b.w	4abc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4938:	20000088 	.word	0x20000088

0000493c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    493c:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4940:	4e2f      	ldr	r6, [pc, #188]	; (4a00 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    4942:	4683      	mov	fp, r0
    4944:	6830      	ldr	r0, [r6, #0]
    4946:	9001      	str	r0, [sp, #4]
    4948:	2701      	movs	r7, #1
    494a:	482e      	ldr	r0, [pc, #184]	; (4a04 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    494c:	f007 fa10 	bl	bd70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4950:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4a04 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    4954:	b920      	cbnz	r0, 4960 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4956:	2700      	movs	r7, #0
    4958:	f108 0001 	add.w	r0, r8, #1
    495c:	f007 fa1f 	bl	bd9e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4960:	4c29      	ldr	r4, [pc, #164]	; (4a08 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    4962:	2500      	movs	r5, #0
    4964:	f04f 0903 	mov.w	r9, #3
    4968:	2001      	movs	r0, #1
    496a:	6060      	str	r0, [r4, #4]
    496c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4970:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4974:	f8c6 b000 	str.w	fp, [r6]
    4978:	6020      	str	r0, [r4, #0]
    497a:	f8df a090 	ldr.w	sl, [pc, #144]	; 4a0c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    497e:	e017      	b.n	49b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4980:	f8da 0000 	ldr.w	r0, [sl]
    4984:	06c0      	lsls	r0, r0, #27
    4986:	d513      	bpl.n	49b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4988:	200e      	movs	r0, #14
    498a:	f008 fc12 	bl	d1b2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    498e:	f3ef 8010 	mrs	r0, PRIMASK
    4992:	9000      	str	r0, [sp, #0]
    4994:	b672      	cpsid	i
    4996:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    499a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    499e:	b920      	cbnz	r0, 49aa <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    49a0:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    49a4:	b908      	cbnz	r0, 49aa <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    49a6:	f7ff f89b 	bl	3ae0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    49aa:	9800      	ldr	r0, [sp, #0]
    49ac:	b900      	cbnz	r0, 49b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    49ae:	b662      	cpsie	i
    49b0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    49b4:	b918      	cbnz	r0, 49be <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    49b6:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    49ba:	2800      	cmp	r0, #0
    49bc:	d0e0      	beq.n	4980 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    49be:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    49c2:	2800      	cmp	r0, #0
    49c4:	d1d0      	bne.n	4968 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    49c6:	b137      	cbz	r7, 49d6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    49c8:	9801      	ldr	r0, [sp, #4]
    49ca:	6030      	str	r0, [r6, #0]
    49cc:	f108 0001 	add.w	r0, r8, #1
    49d0:	f007 f9ce 	bl	bd70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    49d4:	e011      	b.n	49fa <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    49d6:	f108 0001 	add.w	r0, r8, #1
    49da:	f007 f9c9 	bl	bd70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    49de:	2800      	cmp	r0, #0
    49e0:	d1ba      	bne.n	4958 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    49e2:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    49e6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    49ea:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    49ee:	200e      	movs	r0, #14
    49f0:	f008 fbdf 	bl	d1b2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    49f4:	4803      	ldr	r0, [pc, #12]	; (4a04 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    49f6:	f007 f9d2 	bl	bd9e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    49fa:	2000      	movs	r0, #0
    49fc:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4a00:	4000e504 	.word	0x4000e504
    4a04:	2000028b 	.word	0x2000028b
    4a08:	4000e000 	.word	0x4000e000
    4a0c:	e000ed10 	.word	0xe000ed10

00004a10 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4a10:	b510      	push	{r4, lr}
    4a12:	4808      	ldr	r0, [pc, #32]	; (4a34 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a14:	f007 f9bf 	bl	bd96 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a18:	b108      	cbz	r0, 4a1e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4a1a:	2124      	movs	r1, #36	; 0x24
    4a1c:	e006      	b.n	4a2c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4a1e:	4805      	ldr	r0, [pc, #20]	; (4a34 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a20:	1c40      	adds	r0, r0, #1
    4a22:	f007 f9b8 	bl	bd96 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a26:	2800      	cmp	r0, #0
    4a28:	d003      	beq.n	4a32 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4a2a:	2128      	movs	r1, #40	; 0x28
    4a2c:	201d      	movs	r0, #29
    4a2e:	f7ff f9d9 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a32:	bd10      	pop	{r4, pc}
    4a34:	2000028b 	.word	0x2000028b

00004a38 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4a38:	b570      	push	{r4, r5, r6, lr}
    4a3a:	4911      	ldr	r1, [pc, #68]	; (4a80 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4a3c:	680a      	ldr	r2, [r1, #0]
    4a3e:	b1ea      	cbz	r2, 4a7c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4a40:	2300      	movs	r3, #0
    4a42:	461d      	mov	r5, r3
    4a44:	2401      	movs	r4, #1
    4a46:	684a      	ldr	r2, [r1, #4]
    4a48:	1c52      	adds	r2, r2, #1
    4a4a:	604a      	str	r2, [r1, #4]
    4a4c:	2a09      	cmp	r2, #9
    4a4e:	d300      	bcc.n	4a52 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4a50:	604d      	str	r5, [r1, #4]
    4a52:	790e      	ldrb	r6, [r1, #4]
    4a54:	fa04 f206 	lsl.w	r2, r4, r6
    4a58:	680e      	ldr	r6, [r1, #0]
    4a5a:	4216      	tst	r6, r2
    4a5c:	d00b      	beq.n	4a76 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4a5e:	f3ef 8310 	mrs	r3, PRIMASK
    4a62:	b672      	cpsid	i
    4a64:	680c      	ldr	r4, [r1, #0]
    4a66:	4394      	bics	r4, r2
    4a68:	600c      	str	r4, [r1, #0]
    4a6a:	b903      	cbnz	r3, 4a6e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4a6c:	b662      	cpsie	i
    4a6e:	6849      	ldr	r1, [r1, #4]
    4a70:	6001      	str	r1, [r0, #0]
    4a72:	2000      	movs	r0, #0
    4a74:	bd70      	pop	{r4, r5, r6, pc}
    4a76:	1c5b      	adds	r3, r3, #1
    4a78:	2b09      	cmp	r3, #9
    4a7a:	d3e4      	bcc.n	4a46 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4a7c:	2005      	movs	r0, #5
    4a7e:	bd70      	pop	{r4, r5, r6, pc}
    4a80:	2000008c 	.word	0x2000008c

00004a84 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4a84:	4802      	ldr	r0, [pc, #8]	; (4a90 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4a86:	2100      	movs	r1, #0
    4a88:	6001      	str	r1, [r0, #0]
    4a8a:	6041      	str	r1, [r0, #4]
    4a8c:	4770      	bx	lr
    4a8e:	0000      	.short	0x0000
    4a90:	2000008c 	.word	0x2000008c

00004a94 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4a94:	b510      	push	{r4, lr}
    4a96:	4c08      	ldr	r4, [pc, #32]	; (4ab8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4a98:	7861      	ldrb	r1, [r4, #1]
    4a9a:	b109      	cbz	r1, 4aa0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4a9c:	200f      	movs	r0, #15
    4a9e:	bd10      	pop	{r4, pc}
    4aa0:	f7fe ffaa 	bl	39f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4aa4:	7020      	strb	r0, [r4, #0]
    4aa6:	28ff      	cmp	r0, #255	; 0xff
    4aa8:	d001      	beq.n	4aae <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4aaa:	2000      	movs	r0, #0
    4aac:	bd10      	pop	{r4, pc}
    4aae:	2176      	movs	r1, #118	; 0x76
    4ab0:	201f      	movs	r0, #31
    4ab2:	f7ff f997 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ab6:	0000      	.short	0x0000
    4ab8:	20000094 	.word	0x20000094

00004abc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4abc:	4901      	ldr	r1, [pc, #4]	; (4ac4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4abe:	2000      	movs	r0, #0
    4ac0:	7048      	strb	r0, [r1, #1]
    4ac2:	4770      	bx	lr
    4ac4:	20000094 	.word	0x20000094

00004ac8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4ac8:	4806      	ldr	r0, [pc, #24]	; (4ae4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4aca:	4a07      	ldr	r2, [pc, #28]	; (4ae8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4acc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4ace:	8852      	ldrh	r2, [r2, #2]
    4ad0:	4291      	cmp	r1, r2
    4ad2:	d104      	bne.n	4ade <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4ad4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4ad8:	b108      	cbz	r0, 4ade <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4ada:	2000      	movs	r0, #0
    4adc:	4770      	bx	lr
    4ade:	2001      	movs	r0, #1
    4ae0:	4770      	bx	lr
    4ae2:	0000      	.short	0x0000
    4ae4:	200011b8 	.word	0x200011b8
    4ae8:	20000278 	.word	0x20000278

00004aec <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4aec:	4901      	ldr	r1, [pc, #4]	; (4af4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4aee:	8048      	strh	r0, [r1, #2]
    4af0:	4770      	bx	lr
    4af2:	0000      	.short	0x0000
    4af4:	20000278 	.word	0x20000278

00004af8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4af8:	4808      	ldr	r0, [pc, #32]	; (4b1c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4afa:	4a09      	ldr	r2, [pc, #36]	; (4b20 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4afc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4afe:	8852      	ldrh	r2, [r2, #2]
    4b00:	4291      	cmp	r1, r2
    4b02:	d109      	bne.n	4b18 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4b04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4b08:	8481      	strh	r1, [r0, #36]	; 0x24
    4b0a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4b0e:	b119      	cbz	r1, 4b18 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4b10:	2100      	movs	r1, #0
    4b12:	7001      	strb	r1, [r0, #0]
    4b14:	2001      	movs	r0, #1
    4b16:	4770      	bx	lr
    4b18:	2000      	movs	r0, #0
    4b1a:	4770      	bx	lr
    4b1c:	200011b8 	.word	0x200011b8
    4b20:	20000278 	.word	0x20000278

00004b24 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4b24:	4807      	ldr	r0, [pc, #28]	; (4b44 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4b26:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4b2a:	2901      	cmp	r1, #1
    4b2c:	d007      	beq.n	4b3e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4b2e:	2101      	movs	r1, #1
    4b30:	7001      	strb	r1, [r0, #0]
    4b32:	4805      	ldr	r0, [pc, #20]	; (4b48 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4b34:	4903      	ldr	r1, [pc, #12]	; (4b44 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4b36:	8800      	ldrh	r0, [r0, #0]
    4b38:	8488      	strh	r0, [r1, #36]	; 0x24
    4b3a:	2001      	movs	r0, #1
    4b3c:	4770      	bx	lr
    4b3e:	2000      	movs	r0, #0
    4b40:	4770      	bx	lr
    4b42:	0000      	.short	0x0000
    4b44:	200011b8 	.word	0x200011b8
    4b48:	20000278 	.word	0x20000278

00004b4c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4b4c:	4906      	ldr	r1, [pc, #24]	; (4b68 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4b4e:	4b07      	ldr	r3, [pc, #28]	; (4b6c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4b50:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4b52:	885b      	ldrh	r3, [r3, #2]
    4b54:	429a      	cmp	r2, r3
    4b56:	d105      	bne.n	4b64 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4b58:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4b5c:	b112      	cbz	r2, 4b64 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4b5e:	6001      	str	r1, [r0, #0]
    4b60:	2001      	movs	r0, #1
    4b62:	4770      	bx	lr
    4b64:	2000      	movs	r0, #0
    4b66:	4770      	bx	lr
    4b68:	200011b8 	.word	0x200011b8
    4b6c:	20000278 	.word	0x20000278

00004b70 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4b70:	4909      	ldr	r1, [pc, #36]	; (4b98 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4b72:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4b74:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4b78:	3bff      	subs	r3, #255	; 0xff
    4b7a:	d002      	beq.n	4b82 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4b7c:	2100      	movs	r1, #0
    4b7e:	6001      	str	r1, [r0, #0]
    4b80:	e007      	b.n	4b92 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4b82:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4b86:	4904      	ldr	r1, [pc, #16]	; (4b98 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4b88:	2a01      	cmp	r2, #1
    4b8a:	d002      	beq.n	4b92 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4b8c:	6001      	str	r1, [r0, #0]
    4b8e:	2001      	movs	r0, #1
    4b90:	4770      	bx	lr
    4b92:	2000      	movs	r0, #0
    4b94:	4770      	bx	lr
    4b96:	0000      	.short	0x0000
    4b98:	200011b8 	.word	0x200011b8

00004b9c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4b9c:	4901      	ldr	r1, [pc, #4]	; (4ba4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4b9e:	8008      	strh	r0, [r1, #0]
    4ba0:	4770      	bx	lr
    4ba2:	0000      	.short	0x0000
    4ba4:	20000278 	.word	0x20000278

00004ba8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4ba8:	4905      	ldr	r1, [pc, #20]	; (4bc0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4baa:	2000      	movs	r0, #0
    4bac:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4bb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4bb4:	8488      	strh	r0, [r1, #36]	; 0x24
    4bb6:	4903      	ldr	r1, [pc, #12]	; (4bc4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4bb8:	8008      	strh	r0, [r1, #0]
    4bba:	8048      	strh	r0, [r1, #2]
    4bbc:	4770      	bx	lr
    4bbe:	0000      	.short	0x0000
    4bc0:	200011b8 	.word	0x200011b8
    4bc4:	20000278 	.word	0x20000278
    4bc8:	4905      	ldr	r1, [pc, #20]	; (4be0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4bca:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4bcc:	4282      	cmp	r2, r0
    4bce:	d105      	bne.n	4bdc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4bd0:	2000      	movs	r0, #0
    4bd2:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4bd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4bda:	8488      	strh	r0, [r1, #36]	; 0x24
    4bdc:	4770      	bx	lr
    4bde:	0000      	.short	0x0000
    4be0:	200011b8 	.word	0x200011b8

00004be4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4be4:	4a0a      	ldr	r2, [pc, #40]	; (4c10 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4be6:	b110      	cbz	r0, 4bee <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4be8:	2801      	cmp	r0, #1
    4bea:	d007      	beq.n	4bfc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4bec:	e00e      	b.n	4c0c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4bee:	7850      	ldrb	r0, [r2, #1]
    4bf0:	b160      	cbz	r0, 4c0c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4bf2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4bf6:	6008      	str	r0, [r1, #0]
    4bf8:	88d0      	ldrh	r0, [r2, #6]
    4bfa:	e004      	b.n	4c06 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4bfc:	7810      	ldrb	r0, [r2, #0]
    4bfe:	b128      	cbz	r0, 4c0c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c00:	6890      	ldr	r0, [r2, #8]
    4c02:	6008      	str	r0, [r1, #0]
    4c04:	8990      	ldrh	r0, [r2, #12]
    4c06:	8088      	strh	r0, [r1, #4]
    4c08:	2001      	movs	r0, #1
    4c0a:	4770      	bx	lr
    4c0c:	2000      	movs	r0, #0
    4c0e:	4770      	bx	lr
    4c10:	2000028d 	.word	0x2000028d

00004c14 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4c14:	4a08      	ldr	r2, [pc, #32]	; (4c38 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4c16:	2301      	movs	r3, #1
    4c18:	b138      	cbz	r0, 4c2a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4c1a:	2801      	cmp	r0, #1
    4c1c:	d104      	bne.n	4c28 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4c1e:	7013      	strb	r3, [r2, #0]
    4c20:	6808      	ldr	r0, [r1, #0]
    4c22:	6090      	str	r0, [r2, #8]
    4c24:	8888      	ldrh	r0, [r1, #4]
    4c26:	8190      	strh	r0, [r2, #12]
    4c28:	4770      	bx	lr
    4c2a:	7053      	strb	r3, [r2, #1]
    4c2c:	6808      	ldr	r0, [r1, #0]
    4c2e:	f8c2 0002 	str.w	r0, [r2, #2]
    4c32:	8888      	ldrh	r0, [r1, #4]
    4c34:	80d0      	strh	r0, [r2, #6]
    4c36:	4770      	bx	lr
    4c38:	2000028d 	.word	0x2000028d

00004c3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4c3c:	4906      	ldr	r1, [pc, #24]	; (4c58 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4c3e:	b110      	cbz	r0, 4c46 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4c40:	2801      	cmp	r0, #1
    4c42:	d002      	beq.n	4c4a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4c44:	e005      	b.n	4c52 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4c46:	7848      	ldrb	r0, [r1, #1]
    4c48:	e000      	b.n	4c4c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4c4a:	7808      	ldrb	r0, [r1, #0]
    4c4c:	b108      	cbz	r0, 4c52 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4c4e:	2001      	movs	r0, #1
    4c50:	4770      	bx	lr
    4c52:	2000      	movs	r0, #0
    4c54:	4770      	bx	lr
    4c56:	0000      	.short	0x0000
    4c58:	2000028d 	.word	0x2000028d

00004c5c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4c5c:	4901      	ldr	r1, [pc, #4]	; (4c64 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4c5e:	7448      	strb	r0, [r1, #17]
    4c60:	4770      	bx	lr
    4c62:	0000      	.short	0x0000
    4c64:	20000b12 	.word	0x20000b12

00004c68 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4c68:	4801      	ldr	r0, [pc, #4]	; (4c70 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4c6a:	78c0      	ldrb	r0, [r0, #3]
    4c6c:	4770      	bx	lr
    4c6e:	0000      	.short	0x0000
    4c70:	200000b0 	.word	0x200000b0

00004c74 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4c74:	4801      	ldr	r0, [pc, #4]	; (4c7c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4c76:	7900      	ldrb	r0, [r0, #4]
    4c78:	4770      	bx	lr
    4c7a:	0000      	.short	0x0000
    4c7c:	200000b0 	.word	0x200000b0

00004c80 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4c80:	b578      	push	{r3, r4, r5, r6, lr}
    4c82:	4913      	ldr	r1, [pc, #76]	; (4cd0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4c84:	7c4a      	ldrb	r2, [r1, #17]
    4c86:	b30a      	cbz	r2, 4ccc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4c88:	7c0a      	ldrb	r2, [r1, #16]
    4c8a:	f88d 2000 	strb.w	r2, [sp]
    4c8e:	9a00      	ldr	r2, [sp, #0]
    4c90:	9200      	str	r2, [sp, #0]
    4c92:	f89d 2000 	ldrb.w	r2, [sp]
    4c96:	b1ca      	cbz	r2, 4ccc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4c98:	2300      	movs	r3, #0
    4c9a:	f101 0210 	add.w	r2, r1, #16
    4c9e:	241a      	movs	r4, #26
    4ca0:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4ca4:	7c0e      	ldrb	r6, [r1, #16]
    4ca6:	f88d 6000 	strb.w	r6, [sp]
    4caa:	9e00      	ldr	r6, [sp, #0]
    4cac:	9600      	str	r6, [sp, #0]
    4cae:	f89d 6000 	ldrb.w	r6, [sp]
    4cb2:	b14e      	cbz	r6, 4cc8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4cb4:	7013      	strb	r3, [r2, #0]
    4cb6:	7043      	strb	r3, [r0, #1]
    4cb8:	7004      	strb	r4, [r0, #0]
    4cba:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4cbe:	6046      	str	r6, [r0, #4]
    4cc0:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4cc4:	6086      	str	r6, [r0, #8]
    4cc6:	e7ed      	b.n	4ca4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4cc8:	2001      	movs	r0, #1
    4cca:	bd78      	pop	{r3, r4, r5, r6, pc}
    4ccc:	2000      	movs	r0, #0
    4cce:	bd78      	pop	{r3, r4, r5, r6, pc}
    4cd0:	20000b12 	.word	0x20000b12

00004cd4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4cd4:	b510      	push	{r4, lr}
    4cd6:	4604      	mov	r4, r0
    4cd8:	f000 f95c 	bl	4f94 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4cdc:	b118      	cbz	r0, 4ce6 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4cde:	21bd      	movs	r1, #189	; 0xbd
    4ce0:	2027      	movs	r0, #39	; 0x27
    4ce2:	f7ff f87f 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ce6:	4803      	ldr	r0, [pc, #12]	; (4cf4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4ce8:	2101      	movs	r1, #1
    4cea:	f008 fe39 	bl	d960 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4cee:	4802      	ldr	r0, [pc, #8]	; (4cf8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4cf0:	62c4      	str	r4, [r0, #44]	; 0x2c
    4cf2:	bd10      	pop	{r4, pc}
    4cf4:	20000af0 	.word	0x20000af0
    4cf8:	200000b0 	.word	0x200000b0

00004cfc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4cfc:	4901      	ldr	r1, [pc, #4]	; (4d04 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4cfe:	2001      	movs	r0, #1
    4d00:	7188      	strb	r0, [r1, #6]
    4d02:	4770      	bx	lr
    4d04:	200000b0 	.word	0x200000b0

00004d08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d0c:	4d62      	ldr	r5, [pc, #392]	; (4e98 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    4d0e:	9c08      	ldr	r4, [sp, #32]
    4d10:	782e      	ldrb	r6, [r5, #0]
    4d12:	2e00      	cmp	r6, #0
    4d14:	d16b      	bne.n	4dee <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d16:	2a00      	cmp	r2, #0
    4d18:	d069      	beq.n	4dee <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d067      	beq.n	4dee <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d1e:	2c00      	cmp	r4, #0
    4d20:	d065      	beq.n	4dee <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d22:	f105 0614 	add.w	r6, r5, #20
    4d26:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4d2a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4d2e:	2700      	movs	r7, #0
    4d30:	71af      	strb	r7, [r5, #6]
    4d32:	716f      	strb	r7, [r5, #5]
    4d34:	70ef      	strb	r7, [r5, #3]
    4d36:	70af      	strb	r7, [r5, #2]
    4d38:	712f      	strb	r7, [r5, #4]
    4d3a:	81af      	strh	r7, [r5, #12]
    4d3c:	81ef      	strh	r7, [r5, #14]
    4d3e:	f000 f961 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d42:	4606      	mov	r6, r0
    4d44:	f000 f958 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4d48:	4604      	mov	r4, r0
    4d4a:	f006 f84b 	bl	ade4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4d4e:	f005 fcf3 	bl	a738 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4d52:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4d56:	f006 f8cf 	bl	aef8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4d5a:	f104 0018 	add.w	r0, r4, #24
    4d5e:	f006 f9a5 	bl	b0ac <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4d62:	6920      	ldr	r0, [r4, #16]
    4d64:	f006 f998 	bl	b098 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4d68:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4d6c:	f006 f9b8 	bl	b0e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4d70:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4d74:	6840      	ldr	r0, [r0, #4]
    4d76:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    4d7a:	b108      	cbz	r0, 4d80 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4d7c:	f005 ff8c 	bl	ac98 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4d80:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4d84:	2001      	movs	r0, #1
    4d86:	f005 feb7 	bl	aaf8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4d8a:	2800      	cmp	r0, #0
    4d8c:	d07c      	beq.n	4e88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>
    4d8e:	4843      	ldr	r0, [pc, #268]	; (4e9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>)
    4d90:	f005 ff2e 	bl	abf0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4d94:	8820      	ldrh	r0, [r4, #0]
    4d96:	f7ff fc63 	bl	4660 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4d9a:	6328      	str	r0, [r5, #48]	; 0x30
    4d9c:	8820      	ldrh	r0, [r4, #0]
    4d9e:	f7ff fc49 	bl	4634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4da2:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4da6:	6368      	str	r0, [r5, #52]	; 0x34
    4da8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 4ea0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>
    4dac:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4db0:	f109 0808 	add.w	r8, r9, #8
    4db4:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4db8:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4dba:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4dbe:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4dc0:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4dc4:	f000 f990 	bl	50e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4dc8:	4601      	mov	r1, r0
    4dca:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4dcc:	46ba      	mov	sl, r7
    4dce:	f008 fb5f 	bl	d490 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4dd2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4dd4:	4281      	cmp	r1, r0
    4dd6:	d200      	bcs.n	4dda <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    4dd8:	4608      	mov	r0, r1
    4dda:	7228      	strb	r0, [r5, #8]
    4ddc:	46a8      	mov	r8, r5
    4dde:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4de2:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4de4:	7cf7      	ldrb	r7, [r6, #19]
    4de6:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4de8:	2908      	cmp	r1, #8
    4dea:	d104      	bne.n	4df6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    4dec:	e002      	b.n	4df4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4dee:	f44f 718a 	mov.w	r1, #276	; 0x114
    4df2:	e04d      	b.n	4e90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>
    4df4:	2104      	movs	r1, #4
    4df6:	f008 fb4b 	bl	d490 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4dfa:	b90f      	cbnz	r7, 4e00 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    4dfc:	1d00      	adds	r0, r0, #4
    4dfe:	b280      	uxth	r0, r0
    4e00:	4285      	cmp	r5, r0
    4e02:	d200      	bcs.n	4e06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4e04:	4628      	mov	r0, r5
    4e06:	b2c5      	uxtb	r5, r0
    4e08:	f888 5009 	strb.w	r5, [r8, #9]
    4e0c:	7cf1      	ldrb	r1, [r6, #19]
    4e0e:	b109      	cbz	r1, 4e14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    4e10:	2204      	movs	r2, #4
    4e12:	e000      	b.n	4e16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10e>
    4e14:	2200      	movs	r2, #0
    4e16:	442a      	add	r2, r5
    4e18:	b2d2      	uxtb	r2, r2
    4e1a:	f888 2007 	strb.w	r2, [r8, #7]
    4e1e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    4e22:	1d00      	adds	r0, r0, #4
    4e24:	4290      	cmp	r0, r2
    4e26:	d202      	bcs.n	4e2e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    4e28:	f240 119f 	movw	r1, #415	; 0x19f
    4e2c:	e030      	b.n	4e90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>
    4e2e:	4657      	mov	r7, sl
    4e30:	b1a1      	cbz	r1, 4e5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x154>
    4e32:	481b      	ldr	r0, [pc, #108]	; (4ea0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    4e34:	2101      	movs	r1, #1
    4e36:	3008      	adds	r0, #8
    4e38:	7601      	strb	r1, [r0, #24]
    4e3a:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    4e3e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    4e42:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4e46:	f008 fa29 	bl	d29c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    4e4a:	4915      	ldr	r1, [pc, #84]	; (4ea0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    4e4c:	4603      	mov	r3, r0
    4e4e:	462a      	mov	r2, r5
    4e50:	3108      	adds	r1, #8
    4e52:	2001      	movs	r0, #1
    4e54:	f005 fcba 	bl	a7cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4e58:	f005 fcee 	bl	a838 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4e5c:	2001      	movs	r0, #1
    4e5e:	f000 fb73 	bl	5548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    4e62:	4810      	ldr	r0, [pc, #64]	; (4ea4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    4e64:	6800      	ldr	r0, [r0, #0]
    4e66:	2803      	cmp	r0, #3
    4e68:	d010      	beq.n	4e8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>
    4e6a:	280b      	cmp	r0, #11
    4e6c:	d00e      	beq.n	4e8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>
    4e6e:	4648      	mov	r0, r9
    4e70:	f840 7f52 	str.w	r7, [r0, #82]!
    4e74:	6047      	str	r7, [r0, #4]
    4e76:	480a      	ldr	r0, [pc, #40]	; (4ea0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    4e78:	88b1      	ldrh	r1, [r6, #4]
    4e7a:	3052      	adds	r0, #82	; 0x52
    4e7c:	8041      	strh	r1, [r0, #2]
    4e7e:	8821      	ldrh	r1, [r4, #0]
    4e80:	8001      	strh	r1, [r0, #0]
    4e82:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4e86:	7101      	strb	r1, [r0, #4]
    4e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e8c:	f240 11c7 	movw	r1, #455	; 0x1c7
    4e90:	2027      	movs	r0, #39	; 0x27
    4e92:	f7fe ffa7 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e96:	0000      	.short	0x0000
    4e98:	200000b0 	.word	0x200000b0
    4e9c:	0000574c 	.word	0x0000574c
    4ea0:	20000ac0 	.word	0x20000ac0
    4ea4:	40001550 	.word	0x40001550

00004ea8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4eac:	4605      	mov	r5, r0
    4eae:	f000 f8a9 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4eb2:	4e33      	ldr	r6, [pc, #204]	; (4f80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4eb4:	4604      	mov	r4, r0
    4eb6:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4eb8:	7847      	ldrb	r7, [r0, #1]
    4eba:	b10d      	cbz	r5, 4ec0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4ebc:	2d01      	cmp	r5, #1
    4ebe:	d103      	bne.n	4ec8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4ec0:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4ec2:	f007 f974 	bl	c1ae <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4ec6:	7070      	strb	r0, [r6, #1]
    4ec8:	7870      	ldrb	r0, [r6, #1]
    4eca:	f04f 0800 	mov.w	r8, #0
    4ece:	f04f 0901 	mov.w	r9, #1
    4ed2:	b150      	cbz	r0, 4eea <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4ed4:	2801      	cmp	r0, #1
    4ed6:	d01a      	beq.n	4f0e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4ed8:	2802      	cmp	r0, #2
    4eda:	d034      	beq.n	4f46 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4edc:	2803      	cmp	r0, #3
    4ede:	d048      	beq.n	4f72 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4ee0:	f240 4114 	movw	r1, #1044	; 0x414
    4ee4:	2027      	movs	r0, #39	; 0x27
    4ee6:	f7fe ff7d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eea:	2d01      	cmp	r5, #1
    4eec:	d032      	beq.n	4f54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4eee:	f000 f8e7 	bl	50c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4ef2:	4639      	mov	r1, r7
    4ef4:	2201      	movs	r2, #1
    4ef6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4ef8:	f007 fd7c 	bl	c9f4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4efc:	e028      	b.n	4f50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4efe:	bf00      	nop
    4f00:	f884 8008 	strb.w	r8, [r4, #8]
    4f04:	e031      	b.n	4f6a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4f06:	bf00      	nop
    4f08:	f884 9008 	strb.w	r9, [r4, #8]
    4f0c:	e02d      	b.n	4f6a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4f0e:	2d01      	cmp	r5, #1
    4f10:	d008      	beq.n	4f24 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4f12:	f000 f8d5 	bl	50c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4f16:	4639      	mov	r1, r7
    4f18:	2200      	movs	r2, #0
    4f1a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4f1c:	f007 fd6a 	bl	c9f4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4f20:	2d02      	cmp	r5, #2
    4f22:	d00b      	beq.n	4f3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f24:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4f28:	1c40      	adds	r0, r0, #1
    4f2a:	f141 0100 	adc.w	r1, r1, #0
    4f2e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4f32:	7a20      	ldrb	r0, [r4, #8]
    4f34:	2801      	cmp	r0, #1
    4f36:	d003      	beq.n	4f40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4f38:	f884 9008 	strb.w	r9, [r4, #8]
    4f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f40:	f884 8008 	strb.w	r8, [r4, #8]
    4f44:	e7fa      	b.n	4f3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f46:	2d01      	cmp	r5, #1
    4f48:	d004      	beq.n	4f54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4f4a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4f4c:	f007 ff63 	bl	ce16 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4f50:	2d02      	cmp	r5, #2
    4f52:	d0f3      	beq.n	4f3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f54:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4f58:	1c40      	adds	r0, r0, #1
    4f5a:	f141 0100 	adc.w	r1, r1, #0
    4f5e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4f62:	7a20      	ldrb	r0, [r4, #8]
    4f64:	2801      	cmp	r0, #1
    4f66:	d1cf      	bne.n	4f08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4f68:	e7ca      	b.n	4f00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4f6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f6e:	f004 bf03 	b.w	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4f72:	2d01      	cmp	r5, #1
    4f74:	d0e2      	beq.n	4f3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f76:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4f78:	f007 ff4d 	bl	ce16 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4f7c:	e7f5      	b.n	4f6a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4f7e:	0000      	.short	0x0000
    4f80:	200000b0 	.word	0x200000b0

00004f84 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4f84:	4802      	ldr	r0, [pc, #8]	; (4f90 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4f86:	89c0      	ldrh	r0, [r0, #14]
    4f88:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4f8c:	4770      	bx	lr
    4f8e:	0000      	.short	0x0000
    4f90:	200000b0 	.word	0x200000b0

00004f94 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4f94:	4804      	ldr	r0, [pc, #16]	; (4fa8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4f96:	7800      	ldrb	r0, [r0, #0]
    4f98:	b108      	cbz	r0, 4f9e <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4f9a:	200c      	movs	r0, #12
    4f9c:	4770      	bx	lr
    4f9e:	4903      	ldr	r1, [pc, #12]	; (4fac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4fa0:	2000      	movs	r0, #0
    4fa2:	7448      	strb	r0, [r1, #17]
    4fa4:	4770      	bx	lr
    4fa6:	0000      	.short	0x0000
    4fa8:	200000b0 	.word	0x200000b0
    4fac:	20000b12 	.word	0x20000b12

00004fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4fb0:	480c      	ldr	r0, [pc, #48]	; (4fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4fb2:	b510      	push	{r4, lr}
    4fb4:	7801      	ldrb	r1, [r0, #0]
    4fb6:	b149      	cbz	r1, 4fcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4fb8:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4fbc:	7800      	ldrb	r0, [r0, #0]
    4fbe:	2802      	cmp	r0, #2
    4fc0:	d008      	beq.n	4fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4fc2:	f240 11e3 	movw	r1, #483	; 0x1e3
    4fc6:	2027      	movs	r0, #39	; 0x27
    4fc8:	f7fe ff0c 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fd0:	f000 b9d8 	b.w	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    4fd4:	6848      	ldr	r0, [r1, #4]
    4fd6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    4fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fde:	f005 be0f 	b.w	ac00 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4fe2:	0000      	.short	0x0000
    4fe4:	200000b0 	.word	0x200000b0
    4fe8:	4a02      	ldr	r2, [pc, #8]	; (4ff4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4fea:	8993      	ldrh	r3, [r2, #12]
    4fec:	4303      	orrs	r3, r0
    4fee:	8193      	strh	r3, [r2, #12]
    4ff0:	6952      	ldr	r2, [r2, #20]
    4ff2:	4710      	bx	r2
    4ff4:	200000b0 	.word	0x200000b0
    4ff8:	4801      	ldr	r0, [pc, #4]	; (5000 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4ffa:	6840      	ldr	r0, [r0, #4]
    4ffc:	4770      	bx	lr
    4ffe:	0000      	.short	0x0000
    5000:	200000e8 	.word	0x200000e8
    5004:	4801      	ldr	r0, [pc, #4]	; (500c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5006:	6840      	ldr	r0, [r0, #4]
    5008:	3070      	adds	r0, #112	; 0x70
    500a:	4770      	bx	lr
    500c:	200000e8 	.word	0x200000e8
    5010:	4a01      	ldr	r2, [pc, #4]	; (5018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5012:	2100      	movs	r1, #0
    5014:	6952      	ldr	r2, [r2, #20]
    5016:	4710      	bx	r2
    5018:	200000b0 	.word	0x200000b0
    501c:	b570      	push	{r4, r5, r6, lr}
    501e:	f7ff fff1 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5022:	4604      	mov	r4, r0
    5024:	f7ff ffe8 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5028:	4605      	mov	r5, r0
    502a:	4621      	mov	r1, r4
    502c:	f008 fab3 	bl	d596 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5030:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5034:	2901      	cmp	r1, #1
    5036:	d114      	bne.n	5062 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5038:	2800      	cmp	r0, #0
    503a:	d012      	beq.n	5062 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    503c:	4809      	ldr	r0, [pc, #36]	; (5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    503e:	6842      	ldr	r2, [r0, #4]
    5040:	8828      	ldrh	r0, [r5, #0]
    5042:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    5046:	7a60      	ldrb	r0, [r4, #9]
    5048:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    504c:	7aa0      	ldrb	r0, [r4, #10]
    504e:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    5052:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    5056:	2001      	movs	r0, #1
    5058:	7010      	strb	r0, [r2, #0]
    505a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    505e:	f004 be8b 	b.w	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5062:	bd70      	pop	{r4, r5, r6, pc}
    5064:	200000e8 	.word	0x200000e8
    5068:	b570      	push	{r4, r5, r6, lr}
    506a:	4605      	mov	r5, r0
    506c:	2901      	cmp	r1, #1
    506e:	d818      	bhi.n	50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5070:	4c12      	ldr	r4, [pc, #72]	; (50bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    5072:	69a1      	ldr	r1, [r4, #24]
    5074:	4788      	blx	r1
    5076:	b1a0      	cbz	r0, 50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5078:	7960      	ldrb	r0, [r4, #5]
    507a:	b990      	cbnz	r0, 50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    507c:	b9e5      	cbnz	r5, 50b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    507e:	f104 0010 	add.w	r0, r4, #16
    5082:	7801      	ldrb	r1, [r0, #0]
    5084:	06c8      	lsls	r0, r1, #27
    5086:	d405      	bmi.n	5094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5088:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    508a:	7800      	ldrb	r0, [r0, #0]
    508c:	06c0      	lsls	r0, r0, #27
    508e:	d401      	bmi.n	5094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5090:	2001      	movs	r0, #1
    5092:	e000      	b.n	5096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    5094:	2000      	movs	r0, #0
    5096:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5098:	b92a      	cbnz	r2, 50a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    509a:	8962      	ldrh	r2, [r4, #10]
    509c:	b11a      	cbz	r2, 50a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    509e:	06c9      	lsls	r1, r1, #27
    50a0:	d401      	bmi.n	50a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    50a2:	2001      	movs	r0, #1
    50a4:	bd70      	pop	{r4, r5, r6, pc}
    50a6:	89a1      	ldrh	r1, [r4, #12]
    50a8:	078a      	lsls	r2, r1, #30
    50aa:	d503      	bpl.n	50b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    50ac:	6a22      	ldr	r2, [r4, #32]
    50ae:	78d2      	ldrb	r2, [r2, #3]
    50b0:	2a02      	cmp	r2, #2
    50b2:	d001      	beq.n	50b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    50b4:	4308      	orrs	r0, r1
    50b6:	d1f4      	bne.n	50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    50b8:	2000      	movs	r0, #0
    50ba:	bd70      	pop	{r4, r5, r6, pc}
    50bc:	200000b0 	.word	0x200000b0
    50c0:	b510      	push	{r4, lr}
    50c2:	4c08      	ldr	r4, [pc, #32]	; (50e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    50c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50c6:	b138      	cbz	r0, 50d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    50c8:	8962      	ldrh	r2, [r4, #10]
    50ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
    50cc:	1cd2      	adds	r2, r2, #3
    50ce:	f006 fef8 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    50d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50d4:	6260      	str	r0, [r4, #36]	; 0x24
    50d6:	bd10      	pop	{r4, pc}
    50d8:	f240 415a 	movw	r1, #1114	; 0x45a
    50dc:	2027      	movs	r0, #39	; 0x27
    50de:	f7fe fe81 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50e2:	0000      	.short	0x0000
    50e4:	200000b0 	.word	0x200000b0
    50e8:	b510      	push	{r4, lr}
    50ea:	f7ff ff85 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    50ee:	4604      	mov	r4, r0
    50f0:	f7ff ff88 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    50f4:	4601      	mov	r1, r0
    50f6:	7b42      	ldrb	r2, [r0, #13]
    50f8:	4815      	ldr	r0, [pc, #84]	; (5150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    50fa:	2a24      	cmp	r2, #36	; 0x24
    50fc:	d00e      	beq.n	511c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    50fe:	7b89      	ldrb	r1, [r1, #14]
    5100:	2924      	cmp	r1, #36	; 0x24
    5102:	d00b      	beq.n	511c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5104:	2a1f      	cmp	r2, #31
    5106:	d00d      	beq.n	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5108:	2a20      	cmp	r2, #32
    510a:	d00b      	beq.n	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    510c:	2922      	cmp	r1, #34	; 0x22
    510e:	d00f      	beq.n	5130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5110:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5114:	2804      	cmp	r0, #4
    5116:	d100      	bne.n	511a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5118:	2008      	movs	r0, #8
    511a:	bd10      	pop	{r4, pc}
    511c:	6840      	ldr	r0, [r0, #4]
    511e:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    5122:	e00e      	b.n	5142 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    5124:	2922      	cmp	r1, #34	; 0x22
    5126:	d003      	beq.n	5130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5128:	6840      	ldr	r0, [r0, #4]
    512a:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    512e:	e005      	b.n	513c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5130:	6841      	ldr	r1, [r0, #4]
    5132:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    5136:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    513a:	4008      	ands	r0, r1
    513c:	f008 f8a4 	bl	d288 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5140:	4601      	mov	r1, r0
    5142:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    514a:	f008 b8b5 	b.w	d2b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    514e:	0000      	.short	0x0000
    5150:	200000e8 	.word	0x200000e8
    5154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5158:	4688      	mov	r8, r1
    515a:	4607      	mov	r7, r0
    515c:	f7ff ff52 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5160:	4c57      	ldr	r4, [pc, #348]	; (52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    5162:	2600      	movs	r6, #0
    5164:	4605      	mov	r5, r0
    5166:	f88d 6000 	strb.w	r6, [sp]
    516a:	7820      	ldrb	r0, [r4, #0]
    516c:	2802      	cmp	r0, #2
    516e:	d004      	beq.n	517a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    5170:	f240 41b9 	movw	r1, #1209	; 0x4b9
    5174:	2027      	movs	r0, #39	; 0x27
    5176:	f7fe fe35 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    517a:	7ba0      	ldrb	r0, [r4, #14]
    517c:	0640      	lsls	r0, r0, #25
    517e:	d406      	bmi.n	518e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    5180:	2040      	movs	r0, #64	; 0x40
    5182:	f7ff ff45 	bl	5010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5186:	89e0      	ldrh	r0, [r4, #14]
    5188:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    518c:	81e0      	strh	r0, [r4, #14]
    518e:	7ce8      	ldrb	r0, [r5, #19]
    5190:	b3c7      	cbz	r7, 5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    5192:	f005 fb81 	bl	a898 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5196:	f005 fb65 	bl	a864 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    519a:	b968      	cbnz	r0, 51b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    519c:	7ce8      	ldrb	r0, [r5, #19]
    519e:	b158      	cbz	r0, 51b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51a2:	7841      	ldrb	r1, [r0, #1]
    51a4:	b141      	cbz	r1, 51b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51a6:	7800      	ldrb	r0, [r0, #0]
    51a8:	7a29      	ldrb	r1, [r5, #8]
    51aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    51ae:	4288      	cmp	r0, r1
    51b0:	d102      	bne.n	51b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51b2:	2001      	movs	r0, #1
    51b4:	70a0      	strb	r0, [r4, #2]
    51b6:	e063      	b.n	5280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    51b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51ba:	7841      	ldrb	r1, [r0, #1]
    51bc:	8161      	strh	r1, [r4, #10]
    51be:	b121      	cbz	r1, 51ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    51c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    51c2:	f007 fdf5 	bl	cdb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    51c6:	62a0      	str	r0, [r4, #40]	; 0x28
    51c8:	e000      	b.n	51cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    51ca:	62a6      	str	r6, [r4, #40]	; 0x28
    51cc:	89e0      	ldrh	r0, [r4, #14]
    51ce:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    51d2:	81e0      	strh	r0, [r4, #14]
    51d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51d6:	79e9      	ldrb	r1, [r5, #7]
    51d8:	7800      	ldrb	r0, [r0, #0]
    51da:	f3c0 0080 	ubfx	r0, r0, #2, #1
    51de:	4288      	cmp	r0, r1
    51e0:	d005      	beq.n	51ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    51e2:	f000 f963 	bl	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    51e6:	89e0      	ldrh	r0, [r4, #14]
    51e8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    51ec:	81e0      	strh	r0, [r4, #14]
    51ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51f0:	7a29      	ldrb	r1, [r5, #8]
    51f2:	7800      	ldrb	r0, [r0, #0]
    51f4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    51f8:	4288      	cmp	r0, r1
    51fa:	d10e      	bne.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    51fc:	4668      	mov	r0, sp
    51fe:	f000 f917 	bl	5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    5202:	e00a      	b.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5204:	e7ff      	b.n	5206 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    5206:	b108      	cbz	r0, 520c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5208:	f005 fb40 	bl	a88c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    520c:	78e0      	ldrb	r0, [r4, #3]
    520e:	1c40      	adds	r0, r0, #1
    5210:	70e0      	strb	r0, [r4, #3]
    5212:	89e0      	ldrh	r0, [r4, #14]
    5214:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5218:	81e0      	strh	r0, [r4, #14]
    521a:	7ca8      	ldrb	r0, [r5, #18]
    521c:	b198      	cbz	r0, 5246 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    521e:	f7ff feeb 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5222:	4928      	ldr	r1, [pc, #160]	; (52c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5224:	760e      	strb	r6, [r1, #24]
    5226:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    522a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    522e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5232:	f008 f833 	bl	d29c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5236:	4603      	mov	r3, r0
    5238:	22fb      	movs	r2, #251	; 0xfb
    523a:	4922      	ldr	r1, [pc, #136]	; (52c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    523c:	2000      	movs	r0, #0
    523e:	f005 fac5 	bl	a7cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5242:	f005 faf9 	bl	a838 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5246:	4d1f      	ldr	r5, [pc, #124]	; (52c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5248:	354a      	adds	r5, #74	; 0x4a
    524a:	f1b8 0f00 	cmp.w	r8, #0
    524e:	d104      	bne.n	525a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    5250:	78e1      	ldrb	r1, [r4, #3]
    5252:	2001      	movs	r0, #1
    5254:	f7ff ff08 	bl	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5258:	b1b0      	cbz	r0, 5288 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    525a:	f005 fefb 	bl	b054 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    525e:	f89d 0000 	ldrb.w	r0, [sp]
    5262:	b110      	cbz	r0, 526a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5264:	2000      	movs	r0, #0
    5266:	f7ff fe1f 	bl	4ea8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    526a:	b137      	cbz	r7, 527a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    526c:	70e6      	strb	r6, [r4, #3]
    526e:	7968      	ldrb	r0, [r5, #5]
    5270:	1c40      	adds	r0, r0, #1
    5272:	7168      	strb	r0, [r5, #5]
    5274:	f7ff fed2 	bl	501c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5278:	e002      	b.n	5280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    527a:	79a8      	ldrb	r0, [r5, #6]
    527c:	1c40      	adds	r0, r0, #1
    527e:	71a8      	strb	r0, [r5, #6]
    5280:	f000 f880 	bl	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5288:	f89d 0000 	ldrb.w	r0, [sp]
    528c:	b110      	cbz	r0, 5294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    528e:	2001      	movs	r0, #1
    5290:	f7ff fe0a 	bl	4ea8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5294:	2000      	movs	r0, #0
    5296:	f000 f995 	bl	55c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    529a:	f89d 0000 	ldrb.w	r0, [sp]
    529e:	b110      	cbz	r0, 52a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    52a0:	2002      	movs	r0, #2
    52a2:	f7ff fe01 	bl	4ea8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    52a6:	b137      	cbz	r7, 52b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    52a8:	70e6      	strb	r6, [r4, #3]
    52aa:	7968      	ldrb	r0, [r5, #5]
    52ac:	1c40      	adds	r0, r0, #1
    52ae:	7168      	strb	r0, [r5, #5]
    52b0:	f7ff feb4 	bl	501c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52b4:	e7e6      	b.n	5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    52b6:	79a8      	ldrb	r0, [r5, #6]
    52b8:	1c40      	adds	r0, r0, #1
    52ba:	71a8      	strb	r0, [r5, #6]
    52bc:	e7e2      	b.n	5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    52be:	0000      	.short	0x0000
    52c0:	200000b0 	.word	0x200000b0
    52c4:	20000ac8 	.word	0x20000ac8
    52c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52cc:	460f      	mov	r7, r1
    52ce:	4680      	mov	r8, r0
    52d0:	f7ff fe98 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    52d4:	4d29      	ldr	r5, [pc, #164]	; (537c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    52d6:	4604      	mov	r4, r0
    52d8:	7828      	ldrb	r0, [r5, #0]
    52da:	2801      	cmp	r0, #1
    52dc:	d004      	beq.n	52e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    52de:	f240 4169 	movw	r1, #1129	; 0x469
    52e2:	2027      	movs	r0, #39	; 0x27
    52e4:	f7fe fd7e 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52e8:	7861      	ldrb	r1, [r4, #1]
    52ea:	2000      	movs	r0, #0
    52ec:	2601      	movs	r6, #1
    52ee:	b129      	cbz	r1, 52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    52f0:	7060      	strb	r0, [r4, #1]
    52f2:	2100      	movs	r1, #0
    52f4:	2004      	movs	r0, #4
    52f6:	f7ff fe77 	bl	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52fa:	70e6      	strb	r6, [r4, #3]
    52fc:	6a29      	ldr	r1, [r5, #32]
    52fe:	7808      	ldrb	r0, [r1, #0]
    5300:	43c0      	mvns	r0, r0
    5302:	0780      	lsls	r0, r0, #30
    5304:	d109      	bne.n	531a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    5306:	79a0      	ldrb	r0, [r4, #6]
    5308:	bb88      	cbnz	r0, 536e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    530a:	2002      	movs	r0, #2
    530c:	f7ff fe6c 	bl	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5310:	6a28      	ldr	r0, [r5, #32]
    5312:	7800      	ldrb	r0, [r0, #0]
    5314:	43c0      	mvns	r0, r0
    5316:	0780      	lsls	r0, r0, #30
    5318:	d029      	beq.n	536e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    531a:	6a28      	ldr	r0, [r5, #32]
    531c:	7840      	ldrb	r0, [r0, #1]
    531e:	b110      	cbz	r0, 5326 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    5320:	2002      	movs	r0, #2
    5322:	71a0      	strb	r0, [r4, #6]
    5324:	e000      	b.n	5328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    5326:	71a6      	strb	r6, [r4, #6]
    5328:	7ce0      	ldrb	r0, [r4, #19]
    532a:	b1a0      	cbz	r0, 5356 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    532c:	f7ff fe64 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5330:	4913      	ldr	r1, [pc, #76]	; (5380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    5332:	7a6d      	ldrb	r5, [r5, #9]
    5334:	760e      	strb	r6, [r1, #24]
    5336:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    533a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    533e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5342:	f007 ffab 	bl	d29c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5346:	4603      	mov	r3, r0
    5348:	462a      	mov	r2, r5
    534a:	490d      	ldr	r1, [pc, #52]	; (5380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    534c:	2001      	movs	r0, #1
    534e:	f005 fa3d 	bl	a7cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5352:	f005 fa71 	bl	a838 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5356:	ea37 0708 	bics.w	r7, r7, r8
    535a:	d004      	beq.n	5366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    535c:	2100      	movs	r1, #0
    535e:	4608      	mov	r0, r1
    5360:	f7ff fe82 	bl	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5364:	b128      	cbz	r0, 5372 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    5366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    536a:	f000 b80b 	b.w	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    536e:	2003      	movs	r0, #3
    5370:	e7d7      	b.n	5322 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    5372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5376:	2000      	movs	r0, #0
    5378:	f000 b8e6 	b.w	5548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    537c:	200000b0 	.word	0x200000b0
    5380:	20000ac8 	.word	0x20000ac8
    5384:	b510      	push	{r4, lr}
    5386:	f005 fb23 	bl	a9d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    538a:	f005 f9d5 	bl	a738 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    538e:	4c0d      	ldr	r4, [pc, #52]	; (53c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    5390:	89e0      	ldrh	r0, [r4, #14]
    5392:	f7ff fe3d 	bl	5010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5396:	69e2      	ldr	r2, [r4, #28]
    5398:	7961      	ldrb	r1, [r4, #5]
    539a:	78a0      	ldrb	r0, [r4, #2]
    539c:	4790      	blx	r2
    539e:	480a      	ldr	r0, [pc, #40]	; (53c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    53a0:	7c40      	ldrb	r0, [r0, #17]
    53a2:	b158      	cbz	r0, 53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    53a4:	4808      	ldr	r0, [pc, #32]	; (53c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    53a6:	3852      	subs	r0, #82	; 0x52
    53a8:	f850 1f52 	ldr.w	r1, [r0, #82]!
    53ac:	6081      	str	r1, [r0, #8]
    53ae:	6841      	ldr	r1, [r0, #4]
    53b0:	60c1      	str	r1, [r0, #12]
    53b2:	4805      	ldr	r0, [pc, #20]	; (53c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    53b4:	2101      	movs	r1, #1
    53b6:	7401      	strb	r1, [r0, #16]
    53b8:	f004 fcde 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    53bc:	2000      	movs	r0, #0
    53be:	7020      	strb	r0, [r4, #0]
    53c0:	bd10      	pop	{r4, pc}
    53c2:	0000      	.short	0x0000
    53c4:	200000b0 	.word	0x200000b0
    53c8:	20000b12 	.word	0x20000b12
    53cc:	4808      	ldr	r0, [pc, #32]	; (53f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    53ce:	b510      	push	{r4, lr}
    53d0:	7800      	ldrb	r0, [r0, #0]
    53d2:	2802      	cmp	r0, #2
    53d4:	d004      	beq.n	53e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    53d6:	f240 2117 	movw	r1, #535	; 0x217
    53da:	2027      	movs	r0, #39	; 0x27
    53dc:	f7fe fd02 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53e0:	4904      	ldr	r1, [pc, #16]	; (53f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    53e2:	2001      	movs	r0, #1
    53e4:	71c8      	strb	r0, [r1, #7]
    53e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    53ea:	f7ff bfcb 	b.w	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    53ee:	0000      	.short	0x0000
    53f0:	200000b0 	.word	0x200000b0
    53f4:	20000b12 	.word	0x20000b12
    53f8:	b430      	push	{r4, r5}
    53fa:	4b0c      	ldr	r3, [pc, #48]	; (542c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    53fc:	b942      	cbnz	r2, 5410 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    53fe:	79da      	ldrb	r2, [r3, #7]
    5400:	2aff      	cmp	r2, #255	; 0xff
    5402:	d105      	bne.n	5410 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    5404:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5408:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    540c:	42a2      	cmp	r2, r4
    540e:	d00b      	beq.n	5428 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    5410:	b131      	cbz	r1, 5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    5412:	79da      	ldrb	r2, [r3, #7]
    5414:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5418:	bc30      	pop	{r4, r5}
    541a:	4610      	mov	r0, r2
    541c:	f005 be4e 	b.w	b0bc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5420:	22ff      	movs	r2, #255	; 0xff
    5422:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5426:	e7f7      	b.n	5418 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    5428:	bc30      	pop	{r4, r5}
    542a:	4770      	bx	lr
    542c:	200000b0 	.word	0x200000b0
    5430:	b570      	push	{r4, r5, r6, lr}
    5432:	4606      	mov	r6, r0
    5434:	f7ff fde6 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5438:	4a1b      	ldr	r2, [pc, #108]	; (54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    543a:	4604      	mov	r4, r0
    543c:	2501      	movs	r5, #1
    543e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5440:	7808      	ldrb	r0, [r1, #0]
    5442:	f000 0003 	and.w	r0, r0, #3
    5446:	2801      	cmp	r0, #1
    5448:	d00c      	beq.n	5464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    544a:	2802      	cmp	r0, #2
    544c:	d00a      	beq.n	5464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    544e:	2803      	cmp	r0, #3
    5450:	d121      	bne.n	5496 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    5452:	7065      	strb	r5, [r4, #1]
    5454:	89d0      	ldrh	r0, [r2, #14]
    5456:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    545a:	81d0      	strh	r0, [r2, #14]
    545c:	2001      	movs	r0, #1
    545e:	f7ff fdc3 	bl	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5462:	e018      	b.n	5496 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    5464:	7848      	ldrb	r0, [r1, #1]
    5466:	b1b0      	cbz	r0, 5496 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    5468:	89d1      	ldrh	r1, [r2, #14]
    546a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    546e:	81d1      	strh	r1, [r2, #14]
    5470:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5472:	2900      	cmp	r1, #0
    5474:	d009      	beq.n	548a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    5476:	28fb      	cmp	r0, #251	; 0xfb
    5478:	d808      	bhi.n	548c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    547a:	7990      	ldrb	r0, [r2, #6]
    547c:	b120      	cbz	r0, 5488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    547e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5482:	2020      	movs	r0, #32
    5484:	f7ff bdc4 	b.w	5010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5488:	7035      	strb	r5, [r6, #0]
    548a:	bd70      	pop	{r4, r5, r6, pc}
    548c:	7950      	ldrb	r0, [r2, #5]
    548e:	f040 0010 	orr.w	r0, r0, #16
    5492:	7150      	strb	r0, [r2, #5]
    5494:	bd70      	pop	{r4, r5, r6, pc}
    5496:	7a20      	ldrb	r0, [r4, #8]
    5498:	2801      	cmp	r0, #1
    549a:	d001      	beq.n	54a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    549c:	7225      	strb	r5, [r4, #8]
    549e:	bd70      	pop	{r4, r5, r6, pc}
    54a0:	2000      	movs	r0, #0
    54a2:	7220      	strb	r0, [r4, #8]
    54a4:	bd70      	pop	{r4, r5, r6, pc}
    54a6:	0000      	.short	0x0000
    54a8:	200000b0 	.word	0x200000b0
    54ac:	b570      	push	{r4, r5, r6, lr}
    54ae:	f7ff fda9 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    54b2:	4604      	mov	r4, r0
    54b4:	7980      	ldrb	r0, [r0, #6]
    54b6:	2800      	cmp	r0, #0
    54b8:	d02e      	beq.n	5518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    54ba:	2802      	cmp	r0, #2
    54bc:	d10d      	bne.n	54da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    54be:	481c      	ldr	r0, [pc, #112]	; (5530 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    54c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
    54c2:	f007 fa70 	bl	c9a6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    54c6:	b340      	cbz	r0, 551a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    54c8:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    54cc:	1c40      	adds	r0, r0, #1
    54ce:	f141 0100 	adc.w	r1, r1, #0
    54d2:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    54d6:	f004 fc4f 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    54da:	2500      	movs	r5, #0
    54dc:	71a5      	strb	r5, [r4, #6]
    54de:	78e0      	ldrb	r0, [r4, #3]
    54e0:	b120      	cbz	r0, 54ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    54e2:	70e5      	strb	r5, [r4, #3]
    54e4:	2100      	movs	r1, #0
    54e6:	2010      	movs	r0, #16
    54e8:	f7ff fd7e 	bl	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    54ec:	78a0      	ldrb	r0, [r4, #2]
    54ee:	b170      	cbz	r0, 550e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    54f0:	70a5      	strb	r5, [r4, #2]
    54f2:	f7ff fb01 	bl	4af8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    54f6:	b198      	cbz	r0, 5520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    54f8:	2100      	movs	r1, #0
    54fa:	2008      	movs	r0, #8
    54fc:	f7ff fd74 	bl	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5500:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5504:	1c40      	adds	r0, r0, #1
    5506:	f141 0100 	adc.w	r1, r1, #0
    550a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    550e:	79e0      	ldrb	r0, [r4, #7]
    5510:	2801      	cmp	r0, #1
    5512:	d00a      	beq.n	552a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    5514:	2001      	movs	r0, #1
    5516:	71e0      	strb	r0, [r4, #7]
    5518:	bd70      	pop	{r4, r5, r6, pc}
    551a:	f240 31af 	movw	r1, #943	; 0x3af
    551e:	e001      	b.n	5524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    5520:	f240 31c7 	movw	r1, #967	; 0x3c7
    5524:	2027      	movs	r0, #39	; 0x27
    5526:	f7fe fc5d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    552a:	71e5      	strb	r5, [r4, #7]
    552c:	bd70      	pop	{r4, r5, r6, pc}
    552e:	0000      	.short	0x0000
    5530:	200000b0 	.word	0x200000b0
    5534:	4803      	ldr	r0, [pc, #12]	; (5544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    5536:	7800      	ldrb	r0, [r0, #0]
    5538:	2800      	cmp	r0, #0
    553a:	d001      	beq.n	5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    553c:	f7ff bf22 	b.w	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5540:	4770      	bx	lr
    5542:	0000      	.short	0x0000
    5544:	200000b0 	.word	0x200000b0
    5548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    554c:	4606      	mov	r6, r0
    554e:	f7ff fd53 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5552:	4680      	mov	r8, r0
    5554:	f7ff fd56 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5558:	4c17      	ldr	r4, [pc, #92]	; (55b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    555a:	4605      	mov	r5, r0
    555c:	4632      	mov	r2, r6
    555e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5560:	6260      	str	r0, [r4, #36]	; 0x24
    5562:	2101      	movs	r1, #1
    5564:	4640      	mov	r0, r8
    5566:	f7ff ff47 	bl	53f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    556a:	7ce8      	ldrb	r0, [r5, #19]
    556c:	2700      	movs	r7, #0
    556e:	b180      	cbz	r0, 5592 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    5570:	4812      	ldr	r0, [pc, #72]	; (55bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    5572:	f005 fcc7 	bl	af04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5576:	4812      	ldr	r0, [pc, #72]	; (55c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    5578:	2101      	movs	r1, #1
    557a:	7601      	strb	r1, [r0, #24]
    557c:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5580:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5584:	490d      	ldr	r1, [pc, #52]	; (55bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    5586:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5588:	f005 f8a8 	bl	a6dc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    558c:	f005 f8ba 	bl	a704 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    5590:	e004      	b.n	559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    5592:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5594:	f005 fcb6 	bl	af04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5598:	f005 f8ce 	bl	a738 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    559c:	b916      	cbnz	r6, 55a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    559e:	4638      	mov	r0, r7
    55a0:	f005 fb52 	bl	ac48 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    55a4:	2100      	movs	r1, #0
    55a6:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    55aa:	4608      	mov	r0, r1
    55ac:	f005 fd34 	bl	b018 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    55b0:	2002      	movs	r0, #2
    55b2:	7020      	strb	r0, [r4, #0]
    55b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55b8:	200000b0 	.word	0x200000b0
    55bc:	200009c0 	.word	0x200009c0
    55c0:	20000ac8 	.word	0x20000ac8
    55c4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    55c8:	4604      	mov	r4, r0
    55ca:	f7ff fd1b 	bl	5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    55ce:	4605      	mov	r5, r0
    55d0:	f7ff fd12 	bl	4ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    55d4:	4606      	mov	r6, r0
    55d6:	f8df 9168 	ldr.w	r9, [pc, #360]	; 5740 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    55da:	4622      	mov	r2, r4
    55dc:	2100      	movs	r1, #0
    55de:	f7ff ff0b 	bl	53f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    55e2:	79a8      	ldrb	r0, [r5, #6]
    55e4:	2701      	movs	r7, #1
    55e6:	f04f 0800 	mov.w	r8, #0
    55ea:	f1a9 0420 	sub.w	r4, r9, #32
    55ee:	b140      	cbz	r0, 5602 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    55f0:	2801      	cmp	r0, #1
    55f2:	d01f      	beq.n	5634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    55f4:	2802      	cmp	r0, #2
    55f6:	d030      	beq.n	565a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    55f8:	2803      	cmp	r0, #3
    55fa:	d03c      	beq.n	5676 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    55fc:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    5600:	e058      	b.n	56b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5602:	7a20      	ldrb	r0, [r4, #8]
    5604:	2150      	movs	r1, #80	; 0x50
    5606:	f8ad 0004 	strh.w	r0, [sp, #4]
    560a:	5388      	strh	r0, [r1, r6]
    560c:	4648      	mov	r0, r9
    560e:	f7ff fa9d 	bl	4b4c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5612:	b128      	cbz	r0, 5620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    5614:	2080      	movs	r0, #128	; 0x80
    5616:	6a21      	ldr	r1, [r4, #32]
    5618:	f7ff fce6 	bl	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    561c:	70af      	strb	r7, [r5, #2]
    561e:	e02e      	b.n	567e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5620:	466a      	mov	r2, sp
    5622:	a901      	add	r1, sp, #4
    5624:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5626:	f007 fe51 	bl	d2cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    562a:	6220      	str	r0, [r4, #32]
    562c:	b110      	cbz	r0, 5634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    562e:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    5632:	b111      	cbz	r1, 563a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    5634:	4843      	ldr	r0, [pc, #268]	; (5744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    5636:	6220      	str	r0, [r4, #32]
    5638:	e021      	b.n	567e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    563a:	f89d 1000 	ldrb.w	r1, [sp]
    563e:	b931      	cbnz	r1, 564e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    5640:	f8a0 8000 	strh.w	r8, [r0]
    5644:	f880 8002 	strb.w	r8, [r0, #2]
    5648:	2101      	movs	r1, #1
    564a:	f008 f989 	bl	d960 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    564e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5652:	6a20      	ldr	r0, [r4, #32]
    5654:	f008 f948 	bl	d8e8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5658:	e011      	b.n	567e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    565a:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    565e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5662:	466a      	mov	r2, sp
    5664:	a901      	add	r1, sp, #4
    5666:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5668:	f007 fe30 	bl	d2cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    566c:	6220      	str	r0, [r4, #32]
    566e:	b930      	cbnz	r0, 567e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5670:	f240 21a5 	movw	r1, #677	; 0x2a5
    5674:	e01e      	b.n	56b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5676:	4648      	mov	r0, r9
    5678:	f7ff fa68 	bl	4b4c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    567c:	b1c0      	cbz	r0, 56b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    567e:	6a20      	ldr	r0, [r4, #32]
    5680:	2308      	movs	r3, #8
    5682:	7801      	ldrb	r1, [r0, #0]
    5684:	f021 0108 	bic.w	r1, r1, #8
    5688:	7001      	strb	r1, [r0, #0]
    568a:	79ea      	ldrb	r2, [r5, #7]
    568c:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5690:	4311      	orrs	r1, r2
    5692:	f021 0104 	bic.w	r1, r1, #4
    5696:	7001      	strb	r1, [r0, #0]
    5698:	7a2a      	ldrb	r2, [r5, #8]
    569a:	2304      	movs	r3, #4
    569c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    56a0:	4311      	orrs	r1, r2
    56a2:	f021 0110 	bic.w	r1, r1, #16
    56a6:	7001      	strb	r1, [r0, #0]
    56a8:	43c9      	mvns	r1, r1
    56aa:	0789      	lsls	r1, r1, #30
    56ac:	d005      	beq.n	56ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    56ae:	e007      	b.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    56b0:	f240 21ae 	movw	r1, #686	; 0x2ae
    56b4:	2027      	movs	r0, #39	; 0x27
    56b6:	f7fe fb95 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56ba:	78c0      	ldrb	r0, [r0, #3]
    56bc:	2802      	cmp	r0, #2
    56be:	d00f      	beq.n	56e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    56c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    56c2:	f007 fa98 	bl	cbf6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    56c6:	b108      	cbz	r0, 56cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    56c8:	2101      	movs	r1, #1
    56ca:	e00a      	b.n	56e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    56cc:	6a20      	ldr	r0, [r4, #32]
    56ce:	7800      	ldrb	r0, [r0, #0]
    56d0:	43c0      	mvns	r0, r0
    56d2:	0780      	lsls	r0, r0, #30
    56d4:	d004      	beq.n	56e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    56d6:	f7ff f9f7 	bl	4ac8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    56da:	f080 0101 	eor.w	r1, r0, #1
    56de:	e000      	b.n	56e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    56e0:	2100      	movs	r1, #0
    56e2:	6a20      	ldr	r0, [r4, #32]
    56e4:	7802      	ldrb	r2, [r0, #0]
    56e6:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    56ea:	7001      	strb	r1, [r0, #0]
    56ec:	7ca9      	ldrb	r1, [r5, #18]
    56ee:	b199      	cbz	r1, 5718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    56f0:	7841      	ldrb	r1, [r0, #1]
    56f2:	b189      	cbz	r1, 5718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    56f4:	4814      	ldr	r0, [pc, #80]	; (5748 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    56f6:	f005 fc05 	bl	af04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    56fa:	4812      	ldr	r0, [pc, #72]	; (5744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    56fc:	3828      	subs	r0, #40	; 0x28
    56fe:	f880 8018 	strb.w	r8, [r0, #24]
    5702:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    5706:	e9c0 1204 	strd	r1, r2, [r0, #16]
    570a:	480f      	ldr	r0, [pc, #60]	; (5748 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    570c:	6a21      	ldr	r1, [r4, #32]
    570e:	f004 ffe5 	bl	a6dc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5712:	f005 f82f 	bl	a774 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5716:	e003      	b.n	5720 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    5718:	f005 fbf4 	bl	af04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    571c:	f005 f80c 	bl	a738 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5720:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5724:	2101      	movs	r1, #1
    5726:	2000      	movs	r0, #0
    5728:	f005 fc76 	bl	b018 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    572c:	7127      	strb	r7, [r4, #4]
    572e:	6a20      	ldr	r0, [r4, #32]
    5730:	8801      	ldrh	r1, [r0, #0]
    5732:	8221      	strh	r1, [r4, #16]
    5734:	7880      	ldrb	r0, [r0, #2]
    5736:	74a0      	strb	r0, [r4, #18]
    5738:	7027      	strb	r7, [r4, #0]
    573a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    573e:	0000      	.short	0x0000
    5740:	200000d0 	.word	0x200000d0
    5744:	20000af0 	.word	0x20000af0
    5748:	200009c0 	.word	0x200009c0
    574c:	000053cd 	.word	0x000053cd
    5750:	00005155 	.word	0x00005155
    5754:	000052c9 	.word	0x000052c9
    5758:	00005535 	.word	0x00005535

0000575c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    575c:	4800      	ldr	r0, [pc, #0]	; (5760 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    575e:	4770      	bx	lr
    5760:	200013b1 	.word	0x200013b1

00005764 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5764:	4904      	ldr	r1, [pc, #16]	; (5778 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5766:	788a      	ldrb	r2, [r1, #2]
    5768:	4282      	cmp	r2, r0
    576a:	d903      	bls.n	5774 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    576c:	4408      	add	r0, r1
    576e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5772:	4770      	bx	lr
    5774:	2000      	movs	r0, #0
    5776:	4770      	bx	lr
    5778:	200011de 	.word	0x200011de

0000577c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    577c:	4904      	ldr	r1, [pc, #16]	; (5790 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    577e:	788a      	ldrb	r2, [r1, #2]
    5780:	4282      	cmp	r2, r0
    5782:	d903      	bls.n	578c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5784:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5788:	3083      	adds	r0, #131	; 0x83
    578a:	4770      	bx	lr
    578c:	2000      	movs	r0, #0
    578e:	4770      	bx	lr
    5790:	200011de 	.word	0x200011de

00005794 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5794:	4a05      	ldr	r2, [pc, #20]	; (57ac <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5796:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    579a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    579e:	6802      	ldr	r2, [r0, #0]
    57a0:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    57a4:	8880      	ldrh	r0, [r0, #4]
    57a6:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    57aa:	4770      	bx	lr
    57ac:	200011de 	.word	0x200011de

000057b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    57b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57b4:	460e      	mov	r6, r1
    57b6:	4607      	mov	r7, r0
    57b8:	4615      	mov	r5, r2
    57ba:	2106      	movs	r1, #6
    57bc:	4630      	mov	r0, r6
    57be:	f007 ff74 	bl	d6aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57c2:	4c0d      	ldr	r4, [pc, #52]	; (57f8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    57c4:	b160      	cbz	r0, 57e0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    57c6:	2000      	movs	r0, #0
    57c8:	e004      	b.n	57d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    57ca:	1821      	adds	r1, r4, r0
    57cc:	1c40      	adds	r0, r0, #1
    57ce:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    57d2:	b2c0      	uxtb	r0, r0
    57d4:	78a1      	ldrb	r1, [r4, #2]
    57d6:	4281      	cmp	r1, r0
    57d8:	d8f7      	bhi.n	57ca <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    57da:	2001      	movs	r0, #1
    57dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57e0:	4631      	mov	r1, r6
    57e2:	4638      	mov	r0, r7
    57e4:	f007 fd81 	bl	d2ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    57e8:	2808      	cmp	r0, #8
    57ea:	d003      	beq.n	57f4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    57ec:	4420      	add	r0, r4
    57ee:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    57f2:	e7f2      	b.n	57da <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    57f4:	2000      	movs	r0, #0
    57f6:	e7f1      	b.n	57dc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    57f8:	200011de 	.word	0x200011de

000057fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    57fc:	4904      	ldr	r1, [pc, #16]	; (5810 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    57fe:	788a      	ldrb	r2, [r1, #2]
    5800:	4282      	cmp	r2, r0
    5802:	d903      	bls.n	580c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5804:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5808:	1cc0      	adds	r0, r0, #3
    580a:	4770      	bx	lr
    580c:	2000      	movs	r0, #0
    580e:	4770      	bx	lr
    5810:	200011de 	.word	0x200011de

00005814 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5814:	b510      	push	{r4, lr}
    5816:	f240 12d3 	movw	r2, #467	; 0x1d3
    581a:	2100      	movs	r1, #0
    581c:	4808      	ldr	r0, [pc, #32]	; (5840 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    581e:	f006 fbca 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5822:	2208      	movs	r2, #8
    5824:	21ff      	movs	r1, #255	; 0xff
    5826:	4807      	ldr	r0, [pc, #28]	; (5844 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5828:	f006 fbc5 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    582c:	4805      	ldr	r0, [pc, #20]	; (5844 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    582e:	2100      	movs	r1, #0
    5830:	1f00      	subs	r0, r0, #4
    5832:	7001      	strb	r1, [r0, #0]
    5834:	7041      	strb	r1, [r0, #1]
    5836:	f44f 7161 	mov.w	r1, #900	; 0x384
    583a:	8041      	strh	r1, [r0, #2]
    583c:	bd10      	pop	{r4, pc}
    583e:	0000      	.short	0x0000
    5840:	200011de 	.word	0x200011de
    5844:	20000280 	.word	0x20000280

00005848 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5848:	4901      	ldr	r1, [pc, #4]	; (5850 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    584a:	7008      	strb	r0, [r1, #0]
    584c:	4770      	bx	lr
    584e:	0000      	.short	0x0000
    5850:	2000027c 	.word	0x2000027c

00005854 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5854:	4801      	ldr	r0, [pc, #4]	; (585c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5856:	7800      	ldrb	r0, [r0, #0]
    5858:	4770      	bx	lr
    585a:	0000      	.short	0x0000
    585c:	2000027c 	.word	0x2000027c

00005860 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5860:	4b0b      	ldr	r3, [pc, #44]	; (5890 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5862:	b510      	push	{r4, lr}
    5864:	789c      	ldrb	r4, [r3, #2]
    5866:	4284      	cmp	r4, r0
    5868:	d90f      	bls.n	588a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    586a:	4418      	add	r0, r3
    586c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5870:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5874:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5878:	700b      	strb	r3, [r1, #0]
    587a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    587e:	6011      	str	r1, [r2, #0]
    5880:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5884:	8090      	strh	r0, [r2, #4]
    5886:	2001      	movs	r0, #1
    5888:	bd10      	pop	{r4, pc}
    588a:	2000      	movs	r0, #0
    588c:	bd10      	pop	{r4, pc}
    588e:	0000      	.short	0x0000
    5890:	200011de 	.word	0x200011de

00005894 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5894:	4907      	ldr	r1, [pc, #28]	; (58b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5896:	788a      	ldrb	r2, [r1, #2]
    5898:	4282      	cmp	r2, r0
    589a:	d909      	bls.n	58b0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    589c:	4408      	add	r0, r1
    589e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    58a2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    58a6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    58aa:	f000 0001 	and.w	r0, r0, #1
    58ae:	4770      	bx	lr
    58b0:	2000      	movs	r0, #0
    58b2:	4770      	bx	lr
    58b4:	200011de 	.word	0x200011de

000058b8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    58b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58bc:	4698      	mov	r8, r3
    58be:	4691      	mov	r9, r2
    58c0:	460c      	mov	r4, r1
    58c2:	4605      	mov	r5, r0
    58c4:	f000 f936 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    58c8:	4606      	mov	r6, r0
    58ca:	2810      	cmp	r0, #16
    58cc:	d006      	beq.n	58dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    58ce:	f000 f901 	bl	5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    58d2:	2810      	cmp	r0, #16
    58d4:	d002      	beq.n	58dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    58d6:	2012      	movs	r0, #18
    58d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58dc:	4f18      	ldr	r7, [pc, #96]	; (5940 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    58de:	78b8      	ldrb	r0, [r7, #2]
    58e0:	2808      	cmp	r0, #8
    58e2:	d22a      	bcs.n	593a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    58e4:	2e10      	cmp	r6, #16
    58e6:	d105      	bne.n	58f4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    58e8:	2200      	movs	r2, #0
    58ea:	4621      	mov	r1, r4
    58ec:	4628      	mov	r0, r5
    58ee:	f000 f905 	bl	5afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    58f2:	4606      	mov	r6, r0
    58f4:	78bc      	ldrb	r4, [r7, #2]
    58f6:	2210      	movs	r2, #16
    58f8:	1c60      	adds	r0, r4, #1
    58fa:	70b8      	strb	r0, [r7, #2]
    58fc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5900:	1ce8      	adds	r0, r5, #3
    5902:	4649      	mov	r1, r9
    5904:	f007 fe3a 	bl	d57c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5908:	f105 0083 	add.w	r0, r5, #131	; 0x83
    590c:	2210      	movs	r2, #16
    590e:	4641      	mov	r1, r8
    5910:	f007 fe34 	bl	d57c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5914:	2110      	movs	r1, #16
    5916:	4640      	mov	r0, r8
    5918:	f007 fec7 	bl	d6aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    591c:	443c      	add	r4, r7
    591e:	2110      	movs	r1, #16
    5920:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5924:	4648      	mov	r0, r9
    5926:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    592a:	f007 febe 	bl	d6aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    592e:	77e0      	strb	r0, [r4, #31]
    5930:	f804 6c29 	strb.w	r6, [r4, #-41]
    5934:	2000      	movs	r0, #0
    5936:	73e0      	strb	r0, [r4, #15]
    5938:	e7ce      	b.n	58d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    593a:	2007      	movs	r0, #7
    593c:	e7cc      	b.n	58d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    593e:	0000      	.short	0x0000
    5940:	200011de 	.word	0x200011de

00005944 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5944:	4806      	ldr	r0, [pc, #24]	; (5960 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5946:	b510      	push	{r4, lr}
    5948:	7880      	ldrb	r0, [r0, #2]
    594a:	1e40      	subs	r0, r0, #1
    594c:	b244      	sxtb	r4, r0
    594e:	e004      	b.n	595a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5950:	b2e0      	uxtb	r0, r4
    5952:	f000 f937 	bl	5bc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5956:	1e64      	subs	r4, r4, #1
    5958:	b264      	sxtb	r4, r4
    595a:	2c00      	cmp	r4, #0
    595c:	daf8      	bge.n	5950 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    595e:	bd10      	pop	{r4, pc}
    5960:	200011de 	.word	0x200011de

00005964 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5964:	4801      	ldr	r0, [pc, #4]	; (596c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5966:	8840      	ldrh	r0, [r0, #2]
    5968:	4770      	bx	lr
    596a:	0000      	.short	0x0000
    596c:	2000027c 	.word	0x2000027c

00005970 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5970:	b138      	cbz	r0, 5982 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5972:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5976:	4288      	cmp	r0, r1
    5978:	d803      	bhi.n	5982 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    597a:	4903      	ldr	r1, [pc, #12]	; (5988 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    597c:	8048      	strh	r0, [r1, #2]
    597e:	2001      	movs	r0, #1
    5980:	4770      	bx	lr
    5982:	2000      	movs	r0, #0
    5984:	4770      	bx	lr
    5986:	0000      	.short	0x0000
    5988:	2000027c 	.word	0x2000027c

0000598c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    598c:	4905      	ldr	r1, [pc, #20]	; (59a4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    598e:	788a      	ldrb	r2, [r1, #2]
    5990:	4282      	cmp	r2, r0
    5992:	d903      	bls.n	599c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5994:	4408      	add	r0, r1
    5996:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    599a:	b108      	cbz	r0, 59a0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    599c:	2000      	movs	r0, #0
    599e:	4770      	bx	lr
    59a0:	2001      	movs	r0, #1
    59a2:	4770      	bx	lr
    59a4:	200011de 	.word	0x200011de

000059a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    59a8:	b570      	push	{r4, r5, r6, lr}
    59aa:	460d      	mov	r5, r1
    59ac:	4606      	mov	r6, r0
    59ae:	f000 f8c1 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    59b2:	4c10      	ldr	r4, [pc, #64]	; (59f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    59b4:	2810      	cmp	r0, #16
    59b6:	d007      	beq.n	59c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    59b8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    59bc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    59c0:	07c9      	lsls	r1, r1, #31
    59c2:	d001      	beq.n	59c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    59c4:	2001      	movs	r0, #1
    59c6:	bd70      	pop	{r4, r5, r6, pc}
    59c8:	7861      	ldrb	r1, [r4, #1]
    59ca:	2908      	cmp	r1, #8
    59cc:	d210      	bcs.n	59f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    59ce:	2810      	cmp	r0, #16
    59d0:	d008      	beq.n	59e4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    59d2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    59d6:	2101      	movs	r1, #1
    59d8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    59dc:	7860      	ldrb	r0, [r4, #1]
    59de:	1c40      	adds	r0, r0, #1
    59e0:	7060      	strb	r0, [r4, #1]
    59e2:	e7ef      	b.n	59c4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    59e4:	2201      	movs	r2, #1
    59e6:	4629      	mov	r1, r5
    59e8:	4630      	mov	r0, r6
    59ea:	f000 f887 	bl	5afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    59ee:	e7f5      	b.n	59dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    59f0:	2000      	movs	r0, #0
    59f2:	bd70      	pop	{r4, r5, r6, pc}
    59f4:	200011de 	.word	0x200011de

000059f8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    59f8:	b570      	push	{r4, r5, r6, lr}
    59fa:	4d0b      	ldr	r5, [pc, #44]	; (5a28 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    59fc:	7828      	ldrb	r0, [r5, #0]
    59fe:	1e40      	subs	r0, r0, #1
    5a00:	b244      	sxtb	r4, r0
    5a02:	e00a      	b.n	5a1a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5a04:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a08:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a0c:	07c0      	lsls	r0, r0, #31
    5a0e:	d002      	beq.n	5a16 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5a10:	b2e0      	uxtb	r0, r4
    5a12:	f000 f91f 	bl	5c54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5a16:	1e64      	subs	r4, r4, #1
    5a18:	b264      	sxtb	r4, r4
    5a1a:	2c00      	cmp	r4, #0
    5a1c:	daf2      	bge.n	5a04 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5a1e:	4903      	ldr	r1, [pc, #12]	; (5a2c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5a20:	2000      	movs	r0, #0
    5a22:	7048      	strb	r0, [r1, #1]
    5a24:	bd70      	pop	{r4, r5, r6, pc}
    5a26:	0000      	.short	0x0000
    5a28:	200011de 	.word	0x200011de
    5a2c:	2000027c 	.word	0x2000027c

00005a30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a34:	2400      	movs	r4, #0
    5a36:	4625      	mov	r5, r4
    5a38:	4e18      	ldr	r6, [pc, #96]	; (5a9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5a3a:	e029      	b.n	5a90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5a3c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5a40:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5a44:	07c0      	lsls	r0, r0, #31
    5a46:	d021      	beq.n	5a8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5a48:	4628      	mov	r0, r5
    5a4a:	f000 f843 	bl	5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a4e:	4603      	mov	r3, r0
    5a50:	f7ff fed4 	bl	57fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5a54:	4601      	mov	r1, r0
    5a56:	2000      	movs	r0, #0
    5a58:	2b10      	cmp	r3, #16
    5a5a:	d009      	beq.n	5a70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5a5c:	18f2      	adds	r2, r6, r3
    5a5e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5a62:	f1bc 0f01 	cmp.w	ip, #1
    5a66:	d002      	beq.n	5a6e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5a68:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5a6c:	b102      	cbz	r2, 5a70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5a6e:	2001      	movs	r0, #1
    5a70:	1e40      	subs	r0, r0, #1
    5a72:	4201      	tst	r1, r0
    5a74:	d10a      	bne.n	5a8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5a76:	480a      	ldr	r0, [pc, #40]	; (5aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5a78:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5a7c:	5503      	strb	r3, [r0, r4]
    5a7e:	4620      	mov	r0, r4
    5a80:	1c64      	adds	r4, r4, #1
    5a82:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5a86:	b2e4      	uxtb	r4, r4
    5a88:	f005 fbe6 	bl	b258 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5a8c:	1c6d      	adds	r5, r5, #1
    5a8e:	b2ed      	uxtb	r5, r5
    5a90:	7830      	ldrb	r0, [r6, #0]
    5a92:	42a8      	cmp	r0, r5
    5a94:	d8d2      	bhi.n	5a3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a9a:	0000      	.short	0x0000
    5a9c:	200011de 	.word	0x200011de
    5aa0:	20000280 	.word	0x20000280
    5aa4:	4602      	mov	r2, r0
    5aa6:	4809      	ldr	r0, [pc, #36]	; (5acc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5aa8:	b510      	push	{r4, lr}
    5aaa:	7800      	ldrb	r0, [r0, #0]
    5aac:	460b      	mov	r3, r1
    5aae:	b158      	cbz	r0, 5ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5ab0:	4807      	ldr	r0, [pc, #28]	; (5ad0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5ab2:	7881      	ldrb	r1, [r0, #2]
    5ab4:	b141      	cbz	r1, 5ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5ab6:	b10b      	cbz	r3, 5abc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5ab8:	1cc0      	adds	r0, r0, #3
    5aba:	e001      	b.n	5ac0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5abc:	4804      	ldr	r0, [pc, #16]	; (5ad0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5abe:	3083      	adds	r0, #131	; 0x83
    5ac0:	f004 fd2e 	bl	a520 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5ac4:	2001      	movs	r0, #1
    5ac6:	bd10      	pop	{r4, pc}
    5ac8:	2000      	movs	r0, #0
    5aca:	bd10      	pop	{r4, pc}
    5acc:	2000027c 	.word	0x2000027c
    5ad0:	200011de 	.word	0x200011de
    5ad4:	4908      	ldr	r1, [pc, #32]	; (5af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5ad6:	b510      	push	{r4, lr}
    5ad8:	4603      	mov	r3, r0
    5ada:	2000      	movs	r0, #0
    5adc:	788a      	ldrb	r2, [r1, #2]
    5ade:	e006      	b.n	5aee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5ae0:	180c      	adds	r4, r1, r0
    5ae2:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5ae6:	429c      	cmp	r4, r3
    5ae8:	d004      	beq.n	5af4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5aea:	1c40      	adds	r0, r0, #1
    5aec:	b2c0      	uxtb	r0, r0
    5aee:	4282      	cmp	r2, r0
    5af0:	d8f6      	bhi.n	5ae0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5af2:	2010      	movs	r0, #16
    5af4:	bd10      	pop	{r4, pc}
    5af6:	0000      	.short	0x0000
    5af8:	200011de 	.word	0x200011de
    5afc:	b570      	push	{r4, r5, r6, lr}
    5afe:	4b0c      	ldr	r3, [pc, #48]	; (5b30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5b00:	4604      	mov	r4, r0
    5b02:	7818      	ldrb	r0, [r3, #0]
    5b04:	1c45      	adds	r5, r0, #1
    5b06:	701d      	strb	r5, [r3, #0]
    5b08:	2810      	cmp	r0, #16
    5b0a:	d303      	bcc.n	5b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5b0c:	2146      	movs	r1, #70	; 0x46
    5b0e:	2028      	movs	r0, #40	; 0x28
    5b10:	f7fe f968 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b14:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5b18:	680d      	ldr	r5, [r1, #0]
    5b1a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5b1e:	8889      	ldrh	r1, [r1, #4]
    5b20:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5b24:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5b28:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5b2c:	bd70      	pop	{r4, r5, r6, pc}
    5b2e:	0000      	.short	0x0000
    5b30:	200011de 	.word	0x200011de
    5b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b38:	460f      	mov	r7, r1
    5b3a:	4606      	mov	r6, r0
    5b3c:	2400      	movs	r4, #0
    5b3e:	4d0d      	ldr	r5, [pc, #52]	; (5b74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5b40:	e00f      	b.n	5b62 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5b42:	bf00      	nop
    5b44:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5b48:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5b4c:	42b1      	cmp	r1, r6
    5b4e:	d106      	bne.n	5b5e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5b50:	2206      	movs	r2, #6
    5b52:	4639      	mov	r1, r7
    5b54:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5b58:	f006 f9a1 	bl	be9e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5b5c:	b138      	cbz	r0, 5b6e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5b5e:	1c64      	adds	r4, r4, #1
    5b60:	b2e4      	uxtb	r4, r4
    5b62:	7828      	ldrb	r0, [r5, #0]
    5b64:	42a0      	cmp	r0, r4
    5b66:	d8ed      	bhi.n	5b44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5b68:	2010      	movs	r0, #16
    5b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b6e:	4620      	mov	r0, r4
    5b70:	e7fb      	b.n	5b6a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5b72:	0000      	.short	0x0000
    5b74:	200011de 	.word	0x200011de
    5b78:	b570      	push	{r4, r5, r6, lr}
    5b7a:	4605      	mov	r5, r0
    5b7c:	f7ff ffaa 	bl	5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5b80:	2810      	cmp	r0, #16
    5b82:	d11c      	bne.n	5bbe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5b84:	4c0e      	ldr	r4, [pc, #56]	; (5bc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5b86:	7820      	ldrb	r0, [r4, #0]
    5b88:	1e40      	subs	r0, r0, #1
    5b8a:	b2c0      	uxtb	r0, r0
    5b8c:	7020      	strb	r0, [r4, #0]
    5b8e:	42a8      	cmp	r0, r5
    5b90:	d015      	beq.n	5bbe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5b92:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5b96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5b9a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5b9e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5ba2:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5ba6:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5baa:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5bae:	7820      	ldrb	r0, [r4, #0]
    5bb0:	f7ff ff90 	bl	5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bb4:	2810      	cmp	r0, #16
    5bb6:	d002      	beq.n	5bbe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bb8:	4420      	add	r0, r4
    5bba:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5bbe:	bd70      	pop	{r4, r5, r6, pc}
    5bc0:	200011de 	.word	0x200011de
    5bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bc8:	4c21      	ldr	r4, [pc, #132]	; (5c50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5bca:	4606      	mov	r6, r0
    5bcc:	19a7      	adds	r7, r4, r6
    5bce:	78a0      	ldrb	r0, [r4, #2]
    5bd0:	1e40      	subs	r0, r0, #1
    5bd2:	b2c5      	uxtb	r5, r0
    5bd4:	70a5      	strb	r5, [r4, #2]
    5bd6:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5bda:	42ae      	cmp	r6, r5
    5bdc:	d02a      	beq.n	5c34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5bde:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5be2:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5be6:	f10a 0103 	add.w	r1, sl, #3
    5bea:	f109 0003 	add.w	r0, r9, #3
    5bee:	2210      	movs	r2, #16
    5bf0:	f006 f967 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5bf4:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5bf8:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5bfc:	2210      	movs	r2, #16
    5bfe:	f006 f960 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c02:	1960      	adds	r0, r4, r5
    5c04:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5c08:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5c0c:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5c10:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5c14:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5c18:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5c1c:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5c20:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5c24:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5c28:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5c2c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5c30:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5c34:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5c38:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5c3c:	07c0      	lsls	r0, r0, #31
    5c3e:	d104      	bne.n	5c4a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5c40:	4640      	mov	r0, r8
    5c42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c46:	f7ff bf97 	b.w	5b78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c4e:	0000      	.short	0x0000
    5c50:	200011de 	.word	0x200011de
    5c54:	4905      	ldr	r1, [pc, #20]	; (5c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5c56:	784a      	ldrb	r2, [r1, #1]
    5c58:	1e52      	subs	r2, r2, #1
    5c5a:	704a      	strb	r2, [r1, #1]
    5c5c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5c60:	2200      	movs	r2, #0
    5c62:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5c66:	f7ff bf87 	b.w	5b78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5c6a:	0000      	.short	0x0000
    5c6c:	200011de 	.word	0x200011de

00005c70 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c74:	4604      	mov	r4, r0
    5c76:	f100 0570 	add.w	r5, r0, #112	; 0x70
    5c7a:	f04f 0901 	mov.w	r9, #1
    5c7e:	b171      	cbz	r1, 5c9e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    5c80:	f104 0786 	add.w	r7, r4, #134	; 0x86
    5c84:	1e7e      	subs	r6, r7, #1
    5c86:	2901      	cmp	r1, #1
    5c88:	d021      	beq.n	5cce <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    5c8a:	2902      	cmp	r1, #2
    5c8c:	d046      	beq.n	5d1c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    5c8e:	2903      	cmp	r1, #3
    5c90:	d11b      	bne.n	5cca <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5c92:	4639      	mov	r1, r7
    5c94:	4630      	mov	r0, r6
    5c96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c9a:	f007 bd36 	b.w	d70a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5c9e:	f44f 7206 	mov.w	r2, #536	; 0x218
    5ca2:	2100      	movs	r1, #0
    5ca4:	f006 f987 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5ca8:	f004 fc10 	bl	a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5cac:	f644 112b 	movw	r1, #18731	; 0x492b
    5cb0:	4008      	ands	r0, r1
    5cb2:	f885 9015 	strb.w	r9, [r5, #21]
    5cb6:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5cba:	0a00      	lsrs	r0, r0, #8
    5cbc:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5cc0:	20fe      	movs	r0, #254	; 0xfe
    5cc2:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5cc6:	207f      	movs	r0, #127	; 0x7f
    5cc8:	7268      	strb	r0, [r5, #9]
    5cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cce:	f04f 0800 	mov.w	r8, #0
    5cd2:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    5cd6:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    5cda:	68e1      	ldr	r1, [r4, #12]
    5cdc:	4814      	ldr	r0, [pc, #80]	; (5d30 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5cde:	460a      	mov	r2, r1
    5ce0:	4408      	add	r0, r1
    5ce2:	fbb0 f0f1 	udiv	r0, r0, r1
    5ce6:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    5cea:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5cee:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    5cf2:	8ae3      	ldrh	r3, [r4, #22]
    5cf4:	4628      	mov	r0, r5
    5cf6:	f000 f81d 	bl	5d34 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5cfa:	4639      	mov	r1, r7
    5cfc:	4630      	mov	r0, r6
    5cfe:	f007 fd04 	bl	d70a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5d02:	f006 f8a8 	bl	be56 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5d06:	b118      	cbz	r0, 5d10 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5d08:	6920      	ldr	r0, [r4, #16]
    5d0a:	f000 fb39 	bl	6380 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    5d0e:	b110      	cbz	r0, 5d16 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5d10:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    5d14:	e7d9      	b.n	5cca <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5d16:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    5d1a:	e7d6      	b.n	5cca <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5d1c:	68c1      	ldr	r1, [r0, #12]
    5d1e:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    5d22:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    5d26:	4628      	mov	r0, r5
    5d28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d2c:	f000 b802 	b.w	5d34 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5d30:	01c9c37f 	.word	0x01c9c37f
    5d34:	b530      	push	{r4, r5, lr}
    5d36:	2400      	movs	r4, #0
    5d38:	8684      	strh	r4, [r0, #52]	; 0x34
    5d3a:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5d3c:	4d13      	ldr	r5, [pc, #76]	; (5d8c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5d3e:	434c      	muls	r4, r1
    5d40:	fbb4 f4f2 	udiv	r4, r4, r2
    5d44:	8704      	strh	r4, [r0, #56]	; 0x38
    5d46:	f242 7410 	movw	r4, #10000	; 0x2710
    5d4a:	4363      	muls	r3, r4
    5d4c:	fbb3 f3f2 	udiv	r3, r3, r2
    5d50:	1c5b      	adds	r3, r3, #1
    5d52:	b29b      	uxth	r3, r3
    5d54:	fb03 f402 	mul.w	r4, r3, r2
    5d58:	86c3      	strh	r3, [r0, #54]	; 0x36
    5d5a:	42ac      	cmp	r4, r5
    5d5c:	d901      	bls.n	5d62 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5d5e:	1e5b      	subs	r3, r3, #1
    5d60:	86c3      	strh	r3, [r0, #54]	; 0x36
    5d62:	4b0b      	ldr	r3, [pc, #44]	; (5d90 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5d64:	f240 2471 	movw	r4, #625	; 0x271
    5d68:	fbb3 f3f2 	udiv	r3, r3, r2
    5d6c:	1c5b      	adds	r3, r3, #1
    5d6e:	8783      	strh	r3, [r0, #60]	; 0x3c
    5d70:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5d72:	4363      	muls	r3, r4
    5d74:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5d78:	1e5b      	subs	r3, r3, #1
    5d7a:	fbb3 f3f2 	udiv	r3, r3, r2
    5d7e:	62c3      	str	r3, [r0, #44]	; 0x2c
    5d80:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5d82:	434b      	muls	r3, r1
    5d84:	fbb3 f1f2 	udiv	r1, r3, r2
    5d88:	6281      	str	r1, [r0, #40]	; 0x28
    5d8a:	bd30      	pop	{r4, r5, pc}
    5d8c:	01e84800 	.word	0x01e84800
    5d90:	02625a00 	.word	0x02625a00

00005d94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5d94:	b570      	push	{r4, r5, r6, lr}
    5d96:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5d9a:	b28b      	uxth	r3, r1
    5d9c:	7ac5      	ldrb	r5, [r0, #11]
    5d9e:	ea83 0102 	eor.w	r1, r3, r2
    5da2:	2200      	movs	r2, #0
    5da4:	b2cc      	uxtb	r4, r1
    5da6:	0a09      	lsrs	r1, r1, #8
    5da8:	fa94 f4a4 	rbit	r4, r4
    5dac:	fa91 f1a1 	rbit	r1, r1
    5db0:	0e24      	lsrs	r4, r4, #24
    5db2:	0e09      	lsrs	r1, r1, #24
    5db4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5db8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5dbc:	1c52      	adds	r2, r2, #1
    5dbe:	4419      	add	r1, r3
    5dc0:	b2d2      	uxtb	r2, r2
    5dc2:	b289      	uxth	r1, r1
    5dc4:	2a03      	cmp	r2, #3
    5dc6:	d3ed      	bcc.n	5da4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5dc8:	4059      	eors	r1, r3
    5dca:	2225      	movs	r2, #37	; 0x25
    5dcc:	fbb1 f3f2 	udiv	r3, r1, r2
    5dd0:	fb02 1213 	mls	r2, r2, r3, r1
    5dd4:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5dd8:	f002 0607 	and.w	r6, r2, #7
    5ddc:	785b      	ldrb	r3, [r3, #1]
    5dde:	2401      	movs	r4, #1
    5de0:	fa04 f606 	lsl.w	r6, r4, r6
    5de4:	4233      	tst	r3, r6
    5de6:	d001      	beq.n	5dec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5de8:	4610      	mov	r0, r2
    5dea:	bd70      	pop	{r4, r5, r6, pc}
    5dec:	434d      	muls	r5, r1
    5dee:	0c29      	lsrs	r1, r5, #16
    5df0:	1c49      	adds	r1, r1, #1
    5df2:	b2c9      	uxtb	r1, r1
    5df4:	2200      	movs	r2, #0
    5df6:	1885      	adds	r5, r0, r2
    5df8:	79ab      	ldrb	r3, [r5, #6]
    5dfa:	428b      	cmp	r3, r1
    5dfc:	d312      	bcc.n	5e24 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5dfe:	f895 5001 	ldrb.w	r5, [r5, #1]
    5e02:	2300      	movs	r3, #0
    5e04:	fa04 f603 	lsl.w	r6, r4, r3
    5e08:	4235      	tst	r5, r6
    5e0a:	d001      	beq.n	5e10 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5e0c:	1e49      	subs	r1, r1, #1
    5e0e:	b2c9      	uxtb	r1, r1
    5e10:	b121      	cbz	r1, 5e1c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5e12:	1c5b      	adds	r3, r3, #1
    5e14:	b2db      	uxtb	r3, r3
    5e16:	2b08      	cmp	r3, #8
    5e18:	d3f4      	bcc.n	5e04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5e1a:	e005      	b.n	5e28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5e1c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5e20:	b2c0      	uxtb	r0, r0
    5e22:	bd70      	pop	{r4, r5, r6, pc}
    5e24:	1ac9      	subs	r1, r1, r3
    5e26:	b2c9      	uxtb	r1, r1
    5e28:	1c52      	adds	r2, r2, #1
    5e2a:	b2d2      	uxtb	r2, r2
    5e2c:	2a05      	cmp	r2, #5
    5e2e:	d3e2      	bcc.n	5df6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5e30:	f240 110d 	movw	r1, #269	; 0x10d
    5e34:	2046      	movs	r0, #70	; 0x46
    5e36:	f7fd ffd5 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e3a:	0000      	movs	r0, r0
    5e3c:	b570      	push	{r4, r5, r6, lr}
    5e3e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5e42:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5e46:	2401      	movs	r4, #1
    5e48:	fb03 2101 	mla	r1, r3, r1, r2
    5e4c:	2225      	movs	r2, #37	; 0x25
    5e4e:	fbb1 f3f2 	udiv	r3, r1, r2
    5e52:	fb02 1113 	mls	r1, r2, r3, r1
    5e56:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5e5a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5e5e:	f001 0307 	and.w	r3, r1, #7
    5e62:	7d92      	ldrb	r2, [r2, #22]
    5e64:	fa04 f303 	lsl.w	r3, r4, r3
    5e68:	421a      	tst	r2, r3
    5e6a:	d003      	beq.n	5e74 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5e6c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5e70:	2000      	movs	r0, #0
    5e72:	bd70      	pop	{r4, r5, r6, pc}
    5e74:	f890 2020 	ldrb.w	r2, [r0, #32]
    5e78:	fbb1 f3f2 	udiv	r3, r1, r2
    5e7c:	fb02 1113 	mls	r1, r2, r3, r1
    5e80:	1c49      	adds	r1, r1, #1
    5e82:	b2c9      	uxtb	r1, r1
    5e84:	2300      	movs	r3, #0
    5e86:	18c5      	adds	r5, r0, r3
    5e88:	7eea      	ldrb	r2, [r5, #27]
    5e8a:	428a      	cmp	r2, r1
    5e8c:	d311      	bcc.n	5eb2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5e8e:	f895 5016 	ldrb.w	r5, [r5, #22]
    5e92:	2200      	movs	r2, #0
    5e94:	fa04 f602 	lsl.w	r6, r4, r2
    5e98:	4235      	tst	r5, r6
    5e9a:	d001      	beq.n	5ea0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5e9c:	1e49      	subs	r1, r1, #1
    5e9e:	b2c9      	uxtb	r1, r1
    5ea0:	b121      	cbz	r1, 5eac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5ea2:	1c52      	adds	r2, r2, #1
    5ea4:	b2d2      	uxtb	r2, r2
    5ea6:	2a08      	cmp	r2, #8
    5ea8:	d3f4      	bcc.n	5e94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5eaa:	e004      	b.n	5eb6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5eac:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5eb0:	e7dc      	b.n	5e6c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5eb2:	1a89      	subs	r1, r1, r2
    5eb4:	b2c9      	uxtb	r1, r1
    5eb6:	1c5b      	adds	r3, r3, #1
    5eb8:	b2db      	uxtb	r3, r3
    5eba:	2b05      	cmp	r3, #5
    5ebc:	d3e3      	bcc.n	5e86 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5ebe:	201f      	movs	r0, #31
    5ec0:	bd70      	pop	{r4, r5, r6, pc}
	...

00005ec4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5ec4:	7841      	ldrb	r1, [r0, #1]
    5ec6:	b141      	cbz	r1, 5eda <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5ec8:	78c0      	ldrb	r0, [r0, #3]
    5eca:	2819      	cmp	r0, #25
    5ecc:	d203      	bcs.n	5ed6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5ece:	4a04      	ldr	r2, [pc, #16]	; (5ee0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5ed0:	5c10      	ldrb	r0, [r2, r0]
    5ed2:	4288      	cmp	r0, r1
    5ed4:	d101      	bne.n	5eda <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5ed6:	2001      	movs	r0, #1
    5ed8:	4770      	bx	lr
    5eda:	2000      	movs	r0, #0
    5edc:	4770      	bx	lr
    5ede:	0000      	.short	0x0000
    5ee0:	0000fca0 	.word	0x0000fca0

00005ee4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5ee4:	b50c      	push	{r2, r3, lr}
    5ee6:	a20b      	add	r2, pc, #44	; (adr r2, 5f14 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5ee8:	e9d2 1200 	ldrd	r1, r2, [r2]
    5eec:	e9cd 1200 	strd	r1, r2, [sp]
    5ef0:	7901      	ldrb	r1, [r0, #4]
    5ef2:	7940      	ldrb	r0, [r0, #5]
    5ef4:	f001 0207 	and.w	r2, r1, #7
    5ef8:	4669      	mov	r1, sp
    5efa:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5efe:	2a01      	cmp	r2, #1
    5f00:	d804      	bhi.n	5f0c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5f02:	f000 0007 	and.w	r0, r0, #7
    5f06:	5c08      	ldrb	r0, [r1, r0]
    5f08:	2801      	cmp	r0, #1
    5f0a:	d901      	bls.n	5f10 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5f0c:	2000      	movs	r0, #0
    5f0e:	bd0c      	pop	{r2, r3, pc}
    5f10:	2001      	movs	r0, #1
    5f12:	bd0c      	pop	{r2, r3, pc}
    5f14:	02010100 	.word	0x02010100
    5f18:	03020201 	.word	0x03020201

00005f1c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5f1c:	b510      	push	{r4, lr}
    5f1e:	2201      	movs	r2, #1
    5f20:	70c1      	strb	r1, [r0, #3]
    5f22:	2919      	cmp	r1, #25
    5f24:	d202      	bcs.n	5f2c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5f26:	4a06      	ldr	r2, [pc, #24]	; (5f40 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5f28:	5c52      	ldrb	r2, [r2, r1]
    5f2a:	e006      	b.n	5f3a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f2c:	29ff      	cmp	r1, #255	; 0xff
    5f2e:	d004      	beq.n	5f3a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f30:	f240 31d5 	movw	r1, #981	; 0x3d5
    5f34:	202a      	movs	r0, #42	; 0x2a
    5f36:	f7fd ff55 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f3a:	7042      	strb	r2, [r0, #1]
    5f3c:	bd10      	pop	{r4, pc}
    5f3e:	0000      	.short	0x0000
    5f40:	0000fca0 	.word	0x0000fca0

00005f44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f48:	ea5f 0900 	movs.w	r9, r0
    5f4c:	d006      	beq.n	5f5c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5f4e:	4d21      	ldr	r5, [pc, #132]	; (5fd4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5f50:	f105 0010 	add.w	r0, r5, #16
    5f54:	7b69      	ldrb	r1, [r5, #13]
    5f56:	4682      	mov	sl, r0
    5f58:	b119      	cbz	r1, 5f62 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5f5a:	e00b      	b.n	5f74 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5f5c:	f240 3193 	movw	r1, #915	; 0x393
    5f60:	e005      	b.n	5f6e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5f62:	2100      	movs	r1, #0
    5f64:	f007 fdd1 	bl	db0a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5f68:	b120      	cbz	r0, 5f74 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5f6a:	f240 3196 	movw	r1, #918	; 0x396
    5f6e:	202b      	movs	r0, #43	; 0x2b
    5f70:	f7fd ff38 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f74:	8a2e      	ldrh	r6, [r5, #16]
    5f76:	2000      	movs	r0, #0
    5f78:	f7fe f92c 	bl	41d4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5f7c:	4f16      	ldr	r7, [pc, #88]	; (5fd8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5f7e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5fdc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5f82:	4604      	mov	r4, r0
    5f84:	6838      	ldr	r0, [r7, #0]
    5f86:	b158      	cbz	r0, 5fa0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5f88:	8a28      	ldrh	r0, [r5, #16]
    5f8a:	42a0      	cmp	r0, r4
    5f8c:	d308      	bcc.n	5fa0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5f8e:	1b00      	subs	r0, r0, r4
    5f90:	b2c0      	uxtb	r0, r0
    5f92:	2101      	movs	r1, #1
    5f94:	f006 ffa9 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5f98:	b148      	cbz	r0, 5fae <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5f9a:	4649      	mov	r1, r9
    5f9c:	683a      	ldr	r2, [r7, #0]
    5f9e:	e004      	b.n	5faa <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5fa0:	f8d8 2000 	ldr.w	r2, [r8]
    5fa4:	b11a      	cbz	r2, 5fae <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5fa6:	8a28      	ldrh	r0, [r5, #16]
    5fa8:	4649      	mov	r1, r9
    5faa:	4790      	blx	r2
    5fac:	b968      	cbnz	r0, 5fca <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5fae:	2100      	movs	r1, #0
    5fb0:	4650      	mov	r0, sl
    5fb2:	f007 fdaa 	bl	db0a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5fb6:	b910      	cbnz	r0, 5fbe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5fb8:	8a28      	ldrh	r0, [r5, #16]
    5fba:	42b0      	cmp	r0, r6
    5fbc:	d1e2      	bne.n	5f84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5fbe:	4808      	ldr	r0, [pc, #32]	; (5fe0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5fc0:	6801      	ldr	r1, [r0, #0]
    5fc2:	b129      	cbz	r1, 5fd0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5fc4:	4648      	mov	r0, r9
    5fc6:	4788      	blx	r1
    5fc8:	b110      	cbz	r0, 5fd0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5fca:	2001      	movs	r0, #1
    5fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fd0:	2000      	movs	r0, #0
    5fd2:	e7fb      	b.n	5fcc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5fd4:	20000f38 	.word	0x20000f38
    5fd8:	2000022c 	.word	0x2000022c
    5fdc:	20000230 	.word	0x20000230
    5fe0:	20000238 	.word	0x20000238

00005fe4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5fe4:	b570      	push	{r4, r5, r6, lr}
    5fe6:	0005      	movs	r5, r0
    5fe8:	460c      	mov	r4, r1
    5fea:	d02e      	beq.n	604a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5fec:	4818      	ldr	r0, [pc, #96]	; (6050 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5fee:	6802      	ldr	r2, [r0, #0]
    5ff0:	b35a      	cbz	r2, 604a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5ff2:	4628      	mov	r0, r5
    5ff4:	4790      	blx	r2
    5ff6:	b340      	cbz	r0, 604a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5ff8:	7820      	ldrb	r0, [r4, #0]
    5ffa:	2811      	cmp	r0, #17
    5ffc:	d002      	beq.n	6004 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5ffe:	2814      	cmp	r0, #20
    6000:	d003      	beq.n	600a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    6002:	e020      	b.n	6046 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6004:	7920      	ldrb	r0, [r4, #4]
    6006:	b1f0      	cbz	r0, 6046 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6008:	e00a      	b.n	6020 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    600a:	7920      	ldrb	r0, [r4, #4]
    600c:	b120      	cbz	r0, 6018 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    600e:	4628      	mov	r0, r5
    6010:	f007 ff84 	bl	df1c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6014:	b120      	cbz	r0, 6020 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    6016:	e016      	b.n	6046 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6018:	490e      	ldr	r1, [pc, #56]	; (6054 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    601a:	2000      	movs	r0, #0
    601c:	7348      	strb	r0, [r1, #13]
    601e:	e012      	b.n	6046 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6020:	88e4      	ldrh	r4, [r4, #6]
    6022:	2100      	movs	r1, #0
    6024:	4620      	mov	r0, r4
    6026:	f006 ff60 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    602a:	b160      	cbz	r0, 6046 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    602c:	8800      	ldrh	r0, [r0, #0]
    602e:	f007 f8df 	bl	d1f0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6032:	2100      	movs	r1, #0
    6034:	4620      	mov	r0, r4
    6036:	f7fe f96b 	bl	4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    603a:	b120      	cbz	r0, 6046 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    603c:	f44f 719a 	mov.w	r1, #308	; 0x134
    6040:	202b      	movs	r0, #43	; 0x2b
    6042:	f7fd fecf 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6046:	2001      	movs	r0, #1
    6048:	bd70      	pop	{r4, r5, r6, pc}
    604a:	2000      	movs	r0, #0
    604c:	bd70      	pop	{r4, r5, r6, pc}
    604e:	0000      	.short	0x0000
    6050:	20000228 	.word	0x20000228
    6054:	20000f38 	.word	0x20000f38

00006058 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6058:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    605c:	b087      	sub	sp, #28
    605e:	460c      	mov	r4, r1
    6060:	a902      	add	r1, sp, #8
    6062:	9807      	ldr	r0, [sp, #28]
    6064:	f007 f984 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6068:	2800      	cmp	r0, #0
    606a:	d17d      	bne.n	6168 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    606c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6190 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    6070:	f04f 0a01 	mov.w	sl, #1
    6074:	4680      	mov	r8, r0
    6076:	9803      	ldr	r0, [sp, #12]
    6078:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    607c:	2800      	cmp	r0, #0
    607e:	d00c      	beq.n	609a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6080:	f8d9 2000 	ldr.w	r2, [r9]
    6084:	b162      	cbz	r2, 60a0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6086:	4621      	mov	r1, r4
    6088:	9807      	ldr	r0, [sp, #28]
    608a:	4790      	blx	r2
    608c:	b140      	cbz	r0, 60a0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    608e:	4620      	mov	r0, r4
    6090:	f000 f91a 	bl	62c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    6094:	2800      	cmp	r0, #0
    6096:	d1ee      	bne.n	6076 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    6098:	2001      	movs	r0, #1
    609a:	b009      	add	sp, #36	; 0x24
    609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60a0:	9d03      	ldr	r5, [sp, #12]
    60a2:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    60a6:	3570      	adds	r5, #112	; 0x70
    60a8:	b950      	cbnz	r0, 60c0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    60aa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    60ae:	f88d 0004 	strb.w	r0, [sp, #4]
    60b2:	9801      	ldr	r0, [sp, #4]
    60b4:	9001      	str	r0, [sp, #4]
    60b6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    60ba:	b108      	cbz	r0, 60c0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    60bc:	2001      	movs	r0, #1
    60be:	e000      	b.n	60c2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    60c0:	2000      	movs	r0, #0
    60c2:	4683      	mov	fp, r0
    60c4:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    60c8:	b1c0      	cbz	r0, 60fc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    60ca:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    60ce:	0780      	lsls	r0, r0, #30
    60d0:	d514      	bpl.n	60fc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    60d2:	f884 8001 	strb.w	r8, [r4, #1]
    60d6:	f884 a000 	strb.w	sl, [r4]
    60da:	f884 8004 	strb.w	r8, [r4, #4]
    60de:	9907      	ldr	r1, [sp, #28]
    60e0:	f8a4 1005 	strh.w	r1, [r4, #5]
    60e4:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    60e8:	71e1      	strb	r1, [r4, #7]
    60ea:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    60ee:	8121      	strh	r1, [r4, #8]
    60f0:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    60f4:	8161      	strh	r1, [r4, #10]
    60f6:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    60fa:	e7c8      	b.n	608e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    60fc:	9807      	ldr	r0, [sp, #28]
    60fe:	f7fe faaf 	bl	4660 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6102:	0007      	movs	r7, r0
    6104:	d00d      	beq.n	6122 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    6106:	f006 fd09 	bl	cb1c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    610a:	0006      	movs	r6, r0
    610c:	d015      	beq.n	613a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    610e:	f884 8001 	strb.w	r8, [r4, #1]
    6112:	200d      	movs	r0, #13
    6114:	7020      	strb	r0, [r4, #0]
    6116:	9807      	ldr	r0, [sp, #28]
    6118:	80e0      	strh	r0, [r4, #6]
    611a:	8126      	strh	r6, [r4, #8]
    611c:	f884 a004 	strb.w	sl, [r4, #4]
    6120:	e007      	b.n	6132 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    6122:	f240 213a 	movw	r1, #570	; 0x23a
    6126:	e02d      	b.n	6184 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    6128:	2100      	movs	r1, #0
    612a:	4638      	mov	r0, r7
    612c:	460a      	mov	r2, r1
    612e:	f006 fe0b 	bl	cd48 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6132:	1e76      	subs	r6, r6, #1
    6134:	b2b6      	uxth	r6, r6
    6136:	d2f7      	bcs.n	6128 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    6138:	e7a9      	b.n	608e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    613a:	9807      	ldr	r0, [sp, #28]
    613c:	f7fe fa7a 	bl	4634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6140:	b1f0      	cbz	r0, 6180 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    6142:	f1bb 0f00 	cmp.w	fp, #0
    6146:	d020      	beq.n	618a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6148:	f006 fc1d 	bl	c986 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    614c:	b160      	cbz	r0, 6168 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    614e:	9807      	ldr	r0, [sp, #28]
    6150:	f007 f84e 	bl	d1f0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6154:	2100      	movs	r1, #0
    6156:	9807      	ldr	r0, [sp, #28]
    6158:	f7fe f8da 	bl	4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    615c:	f884 8001 	strb.w	r8, [r4, #1]
    6160:	210a      	movs	r1, #10
    6162:	4640      	mov	r0, r8
    6164:	7021      	strb	r1, [r4, #0]
    6166:	e000      	b.n	616a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6168:	e00f      	b.n	618a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    616a:	f884 8004 	strb.w	r8, [r4, #4]
    616e:	9907      	ldr	r1, [sp, #28]
    6170:	f8a4 1005 	strh.w	r1, [r4, #5]
    6174:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6178:	71e1      	strb	r1, [r4, #7]
    617a:	3524      	adds	r5, #36	; 0x24
    617c:	7028      	strb	r0, [r5, #0]
    617e:	e786      	b.n	608e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6180:	f44f 7116 	mov.w	r1, #600	; 0x258
    6184:	202b      	movs	r0, #43	; 0x2b
    6186:	f7fd fe2d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    618a:	2000      	movs	r0, #0
    618c:	e785      	b.n	609a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    618e:	0000      	.short	0x0000
    6190:	20000234 	.word	0x20000234

00006194 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6198:	4c12      	ldr	r4, [pc, #72]	; (61e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    619a:	4607      	mov	r7, r0
    619c:	460e      	mov	r6, r1
    619e:	7de0      	ldrb	r0, [r4, #23]
    61a0:	b110      	cbz	r0, 61a8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    61a2:	8b20      	ldrh	r0, [r4, #24]
    61a4:	2800      	cmp	r0, #0
    61a6:	d012      	beq.n	61ce <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    61a8:	480e      	ldr	r0, [pc, #56]	; (61e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    61aa:	300e      	adds	r0, #14
    61ac:	4680      	mov	r8, r0
    61ae:	f007 fc56 	bl	da5e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    61b2:	b9a8      	cbnz	r0, 61e0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    61b4:	89e5      	ldrh	r5, [r4, #14]
    61b6:	89e0      	ldrh	r0, [r4, #14]
    61b8:	4632      	mov	r2, r6
    61ba:	4639      	mov	r1, r7
    61bc:	f007 fc5e 	bl	da7c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    61c0:	b138      	cbz	r0, 61d2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    61c2:	7de0      	ldrb	r0, [r4, #23]
    61c4:	b110      	cbz	r0, 61cc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    61c6:	8b20      	ldrh	r0, [r4, #24]
    61c8:	1e40      	subs	r0, r0, #1
    61ca:	8320      	strh	r0, [r4, #24]
    61cc:	2001      	movs	r0, #1
    61ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61d2:	4640      	mov	r0, r8
    61d4:	f007 fc43 	bl	da5e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    61d8:	b910      	cbnz	r0, 61e0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    61da:	89e0      	ldrh	r0, [r4, #14]
    61dc:	42a8      	cmp	r0, r5
    61de:	d1ea      	bne.n	61b6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    61e0:	2000      	movs	r0, #0
    61e2:	e7f4      	b.n	61ce <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    61e4:	20000f38 	.word	0x20000f38

000061e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    61e8:	b510      	push	{r4, lr}
    61ea:	7901      	ldrb	r1, [r0, #4]
    61ec:	b119      	cbz	r1, 61f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    61ee:	2901      	cmp	r1, #1
    61f0:	d006      	beq.n	6200 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    61f2:	2000      	movs	r0, #0
    61f4:	bd10      	pop	{r4, pc}
    61f6:	8842      	ldrh	r2, [r0, #2]
    61f8:	6883      	ldr	r3, [r0, #8]
    61fa:	8800      	ldrh	r0, [r0, #0]
    61fc:	2102      	movs	r1, #2
    61fe:	e003      	b.n	6208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6200:	8842      	ldrh	r2, [r0, #2]
    6202:	6883      	ldr	r3, [r0, #8]
    6204:	8800      	ldrh	r0, [r0, #0]
    6206:	2101      	movs	r1, #1
    6208:	f000 f808 	bl	621c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    620c:	b910      	cbnz	r0, 6214 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    620e:	4902      	ldr	r1, [pc, #8]	; (6218 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6210:	2001      	movs	r0, #1
    6212:	7008      	strb	r0, [r1, #0]
    6214:	2001      	movs	r0, #1
    6216:	bd10      	pop	{r4, pc}
    6218:	20000f38 	.word	0x20000f38
    621c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6220:	468a      	mov	sl, r1
    6222:	4699      	mov	r9, r3
    6224:	4615      	mov	r5, r2
    6226:	4604      	mov	r4, r0
    6228:	a901      	add	r1, sp, #4
    622a:	f007 f8a1 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    622e:	bbe0      	cbnz	r0, 62aa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6230:	9f02      	ldr	r7, [sp, #8]
    6232:	f04f 0800 	mov.w	r8, #0
    6236:	3770      	adds	r7, #112	; 0x70
    6238:	b18d      	cbz	r5, 625e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    623a:	4620      	mov	r0, r4
    623c:	f7fe fa10 	bl	4660 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6240:	0004      	movs	r4, r0
    6242:	d00f      	beq.n	6264 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    6244:	4629      	mov	r1, r5
    6246:	f006 fca8 	bl	cb9a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    624a:	0006      	movs	r6, r0
    624c:	d003      	beq.n	6256 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    624e:	481d      	ldr	r0, [pc, #116]	; (62c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6250:	8880      	ldrh	r0, [r0, #4]
    6252:	42a8      	cmp	r0, r5
    6254:	d208      	bcs.n	6268 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6256:	2000      	movs	r0, #0
    6258:	b004      	add	sp, #16
    625a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    625e:	2001      	movs	r0, #1
    6260:	7538      	strb	r0, [r7, #20]
    6262:	e029      	b.n	62b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6264:	2189      	movs	r1, #137	; 0x89
    6266:	e02a      	b.n	62be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    6268:	4620      	mov	r0, r4
    626a:	4631      	mov	r1, r6
    626c:	aa03      	add	r2, sp, #12
    626e:	f006 fc8d 	bl	cb8c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6272:	9803      	ldr	r0, [sp, #12]
    6274:	f8a0 8000 	strh.w	r8, [r0]
    6278:	f880 8002 	strb.w	r8, [r0, #2]
    627c:	7d39      	ldrb	r1, [r7, #20]
    627e:	b109      	cbz	r1, 6284 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    6280:	f04f 0a02 	mov.w	sl, #2
    6284:	4651      	mov	r1, sl
    6286:	f007 fb6b 	bl	d960 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    628a:	4631      	mov	r1, r6
    628c:	2603      	movs	r6, #3
    628e:	4620      	mov	r0, r4
    6290:	464a      	mov	r2, r9
    6292:	462b      	mov	r3, r5
    6294:	9600      	str	r6, [sp, #0]
    6296:	f006 fb5f 	bl	c958 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    629a:	4620      	mov	r0, r4
    629c:	4629      	mov	r1, r5
    629e:	f006 fc19 	bl	cad4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    62a2:	b158      	cbz	r0, 62bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    62a4:	4644      	mov	r4, r8
    62a6:	a801      	add	r0, sp, #4
    62a8:	e000      	b.n	62ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    62aa:	e005      	b.n	62b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    62ac:	f007 fbda 	bl	da64 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    62b0:	9802      	ldr	r0, [sp, #8]
    62b2:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    62b6:	753c      	strb	r4, [r7, #20]
    62b8:	2001      	movs	r0, #1
    62ba:	e7cd      	b.n	6258 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    62bc:	219f      	movs	r1, #159	; 0x9f
    62be:	202b      	movs	r0, #43	; 0x2b
    62c0:	f7fd fd90 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62c4:	20000f38 	.word	0x20000f38
    62c8:	b510      	push	{r4, lr}
    62ca:	492c      	ldr	r1, [pc, #176]	; (637c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    62cc:	b086      	sub	sp, #24
    62ce:	7d8a      	ldrb	r2, [r1, #22]
    62d0:	7801      	ldrb	r1, [r0, #0]
    62d2:	07d3      	lsls	r3, r2, #31
    62d4:	d101      	bne.n	62da <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    62d6:	2919      	cmp	r1, #25
    62d8:	d004      	beq.n	62e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    62da:	2918      	cmp	r1, #24
    62dc:	d01e      	beq.n	631c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    62de:	2912      	cmp	r1, #18
    62e0:	d045      	beq.n	636e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    62e2:	e049      	b.n	6378 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    62e4:	8880      	ldrh	r0, [r0, #4]
    62e6:	f8ad 0000 	strh.w	r0, [sp]
    62ea:	a902      	add	r1, sp, #8
    62ec:	f007 f840 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    62f0:	b108      	cbz	r0, 62f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    62f2:	2158      	movs	r1, #88	; 0x58
    62f4:	e035      	b.n	6362 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    62f6:	9803      	ldr	r0, [sp, #12]
    62f8:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    62fc:	f88d 1002 	strb.w	r1, [sp, #2]
    6300:	7841      	ldrb	r1, [r0, #1]
    6302:	f88d 1003 	strb.w	r1, [sp, #3]
    6306:	8840      	ldrh	r0, [r0, #2]
    6308:	f8ad 0004 	strh.w	r0, [sp, #4]
    630c:	2102      	movs	r1, #2
    630e:	4668      	mov	r0, sp
    6310:	f009 f89a 	bl	f448 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6314:	b340      	cbz	r0, 6368 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6316:	f240 114d 	movw	r1, #333	; 0x14d
    631a:	e022      	b.n	6362 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    631c:	0791      	lsls	r1, r2, #30
    631e:	d42b      	bmi.n	6378 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6320:	8884      	ldrh	r4, [r0, #4]
    6322:	a903      	add	r1, sp, #12
    6324:	4620      	mov	r0, r4
    6326:	f008 feae 	bl	f086 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    632a:	b110      	cbz	r0, 6332 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    632c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6330:	e017      	b.n	6362 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6332:	f8ad 4000 	strh.w	r4, [sp]
    6336:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    633a:	f8ad 0002 	strh.w	r0, [sp, #2]
    633e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6342:	f8ad 0004 	strh.w	r0, [sp, #4]
    6346:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    634a:	f8ad 0006 	strh.w	r0, [sp, #6]
    634e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6352:	f8ad 0008 	strh.w	r0, [sp, #8]
    6356:	4668      	mov	r0, sp
    6358:	f008 ff13 	bl	f182 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    635c:	b120      	cbz	r0, 6368 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    635e:	f240 115d 	movw	r1, #349	; 0x15d
    6362:	202b      	movs	r0, #43	; 0x2b
    6364:	f7fd fd3e 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6368:	2001      	movs	r0, #1
    636a:	b006      	add	sp, #24
    636c:	bd10      	pop	{r4, pc}
    636e:	0751      	lsls	r1, r2, #29
    6370:	d402      	bmi.n	6378 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6372:	7b80      	ldrb	r0, [r0, #14]
    6374:	07c0      	lsls	r0, r0, #31
    6376:	d0f7      	beq.n	6368 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6378:	2000      	movs	r0, #0
    637a:	e7f6      	b.n	636a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    637c:	20000f38 	.word	0x20000f38

00006380 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    6380:	b5f0      	push	{r4, r5, r6, r7, lr}
    6382:	f06f 021f 	mvn.w	r2, #31
    6386:	0c01      	lsrs	r1, r0, #16
    6388:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    638c:	251f      	movs	r5, #31
    638e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6392:	3854      	subs	r0, #84	; 0x54
    6394:	d00d      	beq.n	63b2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6396:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    639a:	3855      	subs	r0, #85	; 0x55
    639c:	d009      	beq.n	63b2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    639e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    63a2:	38aa      	subs	r0, #170	; 0xaa
    63a4:	d005      	beq.n	63b2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63a6:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    63aa:	38aa      	subs	r0, #170	; 0xaa
    63ac:	d001      	beq.n	63b2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63ae:	2001      	movs	r0, #1
    63b0:	e000      	b.n	63b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    63b2:	2000      	movs	r0, #0
    63b4:	2200      	movs	r2, #0
    63b6:	4613      	mov	r3, r2
    63b8:	ea4f 0402 	mov.w	r4, r2
    63bc:	ea82 0701 	eor.w	r7, r2, r1
    63c0:	43ff      	mvns	r7, r7
    63c2:	431f      	orrs	r7, r3
    63c4:	1c7f      	adds	r7, r7, #1
    63c6:	d00f      	beq.n	63e8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    63c8:	f006 0701 	and.w	r7, r6, #1
    63cc:	0852      	lsrs	r2, r2, #1
    63ce:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    63d2:	f005 0701 	and.w	r7, r5, #1
    63d6:	085b      	lsrs	r3, r3, #1
    63d8:	0876      	lsrs	r6, r6, #1
    63da:	086d      	lsrs	r5, r5, #1
    63dc:	1c64      	adds	r4, r4, #1
    63de:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    63e2:	2c16      	cmp	r4, #22
    63e4:	d3ea      	bcc.n	63bc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    63e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63e8:	2000      	movs	r0, #0
    63ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000063ec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    63ec:	b570      	push	{r4, r5, r6, lr}
    63ee:	4604      	mov	r4, r0
    63f0:	7c00      	ldrb	r0, [r0, #16]
    63f2:	b300      	cbz	r0, 6436 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    63f4:	2802      	cmp	r0, #2
    63f6:	d01e      	beq.n	6436 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    63f8:	f05f 0001 	movs.w	r0, #1
    63fc:	f104 0149 	add.w	r1, r4, #73	; 0x49
    6400:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    6404:	460d      	mov	r5, r1
    6406:	b1c0      	cbz	r0, 643a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6408:	7de0      	ldrb	r0, [r4, #23]
    640a:	b1f0      	cbz	r0, 644a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    640c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6410:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    6414:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6418:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    641c:	7c20      	ldrb	r0, [r4, #16]
    641e:	f007 fce0 	bl	dde2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    6422:	7620      	strb	r0, [r4, #24]
    6424:	2008      	movs	r0, #8
    6426:	7660      	strb	r0, [r4, #25]
    6428:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    642c:	4629      	mov	r1, r5
    642e:	f007 fcc4 	bl	ddba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6432:	b9a8      	cbnz	r0, 6460 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6434:	e00e      	b.n	6454 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    6436:	2000      	movs	r0, #0
    6438:	e7e0      	b.n	63fc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    643a:	2000      	movs	r0, #0
    643c:	f7fe fbd2 	bl	4be4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6440:	2800      	cmp	r0, #0
    6442:	d1eb      	bne.n	641c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6444:	f240 41aa 	movw	r1, #1194	; 0x4aa
    6448:	e001      	b.n	644e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    644a:	f240 41ae 	movw	r1, #1198	; 0x4ae
    644e:	202d      	movs	r0, #45	; 0x2d
    6450:	f7fd fcc8 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6454:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6458:	4629      	mov	r1, r5
    645a:	f007 fcb7 	bl	ddcc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    645e:	b100      	cbz	r0, 6462 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6460:	2001      	movs	r0, #1
    6462:	76a0      	strb	r0, [r4, #26]
    6464:	7e20      	ldrb	r0, [r4, #24]
    6466:	b910      	cbnz	r0, 646e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    6468:	78a0      	ldrb	r0, [r4, #2]
    646a:	0740      	lsls	r0, r0, #29
    646c:	d506      	bpl.n	647c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    646e:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6472:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6476:	f006 ff38 	bl	d2ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    647a:	7660      	strb	r0, [r4, #25]
    647c:	2500      	movs	r5, #0
    647e:	6425      	str	r5, [r4, #64]	; 0x40
    6480:	f005 fbaa 	bl	bbd8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6484:	6460      	str	r0, [r4, #68]	; 0x44
    6486:	2100      	movs	r1, #0
    6488:	4620      	mov	r0, r4
    648a:	f007 fdc9 	bl	e020 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    648e:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6492:	78a0      	ldrb	r0, [r4, #2]
    6494:	0740      	lsls	r0, r0, #29
    6496:	d508      	bpl.n	64aa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6498:	7e20      	ldrb	r0, [r4, #24]
    649a:	2800      	cmp	r0, #0
    649c:	d005      	beq.n	64aa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    649e:	4620      	mov	r0, r4
    64a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    64a4:	2100      	movs	r1, #0
    64a6:	f000 bdff 	b.w	70a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    64aa:	bd70      	pop	{r4, r5, r6, pc}

000064ac <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    64ac:	b508      	push	{r3, lr}
    64ae:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    64b2:	f88d 2000 	strb.w	r2, [sp]
    64b6:	9a00      	ldr	r2, [sp, #0]
    64b8:	9200      	str	r2, [sp, #0]
    64ba:	f89d 3000 	ldrb.w	r3, [sp]
    64be:	2200      	movs	r2, #0
    64c0:	b163      	cbz	r3, 64dc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    64c2:	704a      	strb	r2, [r1, #1]
    64c4:	2317      	movs	r3, #23
    64c6:	700b      	strb	r3, [r1, #0]
    64c8:	f850 3f95 	ldr.w	r3, [r0, #149]!
    64cc:	604b      	str	r3, [r1, #4]
    64ce:	6843      	ldr	r3, [r0, #4]
    64d0:	608b      	str	r3, [r1, #8]
    64d2:	7a03      	ldrb	r3, [r0, #8]
    64d4:	730b      	strb	r3, [r1, #12]
    64d6:	f800 2c01 	strb.w	r2, [r0, #-1]
    64da:	e03b      	b.n	6554 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    64dc:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    64e0:	f88d 3000 	strb.w	r3, [sp]
    64e4:	9b00      	ldr	r3, [sp, #0]
    64e6:	9300      	str	r3, [sp, #0]
    64e8:	f89d 3000 	ldrb.w	r3, [sp]
    64ec:	b143      	cbz	r3, 6500 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    64ee:	704a      	strb	r2, [r1, #1]
    64f0:	2305      	movs	r3, #5
    64f2:	700b      	strb	r3, [r1, #0]
    64f4:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    64f8:	604b      	str	r3, [r1, #4]
    64fa:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    64fe:	e029      	b.n	6554 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6500:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6504:	f88d 3000 	strb.w	r3, [sp]
    6508:	9b00      	ldr	r3, [sp, #0]
    650a:	9300      	str	r3, [sp, #0]
    650c:	f89d 3000 	ldrb.w	r3, [sp]
    6510:	b11b      	cbz	r3, 651a <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    6512:	bf00      	nop
    6514:	f007 fd5b 	bl	dfce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    6518:	e01c      	b.n	6554 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    651a:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    651e:	f88d 3000 	strb.w	r3, [sp]
    6522:	9b00      	ldr	r3, [sp, #0]
    6524:	9300      	str	r3, [sp, #0]
    6526:	f89d 3000 	ldrb.w	r3, [sp]
    652a:	b1ab      	cbz	r3, 6558 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    652c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6530:	f88d 3000 	strb.w	r3, [sp]
    6534:	9b00      	ldr	r3, [sp, #0]
    6536:	9300      	str	r3, [sp, #0]
    6538:	f89d 3000 	ldrb.w	r3, [sp]
    653c:	2b00      	cmp	r3, #0
    653e:	d1e9      	bne.n	6514 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6540:	704a      	strb	r2, [r1, #1]
    6542:	2314      	movs	r3, #20
    6544:	700b      	strb	r3, [r1, #0]
    6546:	f850 3f88 	ldr.w	r3, [r0, #136]!
    654a:	604b      	str	r3, [r1, #4]
    654c:	8883      	ldrh	r3, [r0, #4]
    654e:	810b      	strh	r3, [r1, #8]
    6550:	f800 2c02 	strb.w	r2, [r0, #-2]
    6554:	2001      	movs	r0, #1
    6556:	bd08      	pop	{r3, pc}
    6558:	2000      	movs	r0, #0
    655a:	bd08      	pop	{r3, pc}

0000655c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    655c:	b530      	push	{r4, r5, lr}
    655e:	460c      	mov	r4, r1
    6560:	b08d      	sub	sp, #52	; 0x34
    6562:	4605      	mov	r5, r0
    6564:	4601      	mov	r1, r0
    6566:	2220      	movs	r2, #32
    6568:	a802      	add	r0, sp, #8
    656a:	f005 fcaa 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    656e:	a80a      	add	r0, sp, #40	; 0x28
    6570:	f007 fe03 	bl	e17a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6574:	7aa0      	ldrb	r0, [r4, #10]
    6576:	f88d 0018 	strb.w	r0, [sp, #24]
    657a:	7820      	ldrb	r0, [r4, #0]
    657c:	f88d 0008 	strb.w	r0, [sp, #8]
    6580:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6584:	f8ad 0000 	strh.w	r0, [sp]
    6588:	f89d 0000 	ldrb.w	r0, [sp]
    658c:	f000 0101 	and.w	r1, r0, #1
    6590:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6594:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6598:	f3c0 0280 	ubfx	r2, r0, #2, #1
    659c:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    65a0:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    65a4:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    65a8:	f3c0 1200 	ubfx	r2, r0, #4, #1
    65ac:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    65b0:	f3c0 1240 	ubfx	r2, r0, #5, #1
    65b4:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    65b8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    65bc:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    65c0:	f8ad 000a 	strh.w	r0, [sp, #10]
    65c4:	7d20      	ldrb	r0, [r4, #20]
    65c6:	2801      	cmp	r0, #1
    65c8:	d006      	beq.n	65d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    65ca:	2802      	cmp	r0, #2
    65cc:	d004      	beq.n	65d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    65ce:	f240 2175 	movw	r1, #629	; 0x275
    65d2:	2006      	movs	r0, #6
    65d4:	f7fd fc06 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65d8:	f88d 000c 	strb.w	r0, [sp, #12]
    65dc:	7a61      	ldrb	r1, [r4, #9]
    65de:	a80a      	add	r0, sp, #40	; 0x28
    65e0:	f007 fdb2 	bl	e148 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    65e4:	7d20      	ldrb	r0, [r4, #20]
    65e6:	2101      	movs	r1, #1
    65e8:	2802      	cmp	r0, #2
    65ea:	d102      	bne.n	65f2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    65ec:	7d60      	ldrb	r0, [r4, #21]
    65ee:	1c40      	adds	r0, r0, #1
    65f0:	b2c1      	uxtb	r1, r0
    65f2:	7ea0      	ldrb	r0, [r4, #26]
    65f4:	1c40      	adds	r0, r0, #1
    65f6:	b2c2      	uxtb	r2, r0
    65f8:	a80a      	add	r0, sp, #40	; 0x28
    65fa:	f007 fd6c 	bl	e0d6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    65fe:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6602:	0700      	lsls	r0, r0, #28
    6604:	d501      	bpl.n	660a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6606:	2000      	movs	r0, #0
    6608:	e020      	b.n	664c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    660a:	a80a      	add	r0, sp, #40	; 0x28
    660c:	f007 fd75 	bl	e0fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6610:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6614:	2228      	movs	r2, #40	; 0x28
    6616:	f000 fded 	bl	71f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    661a:	f240 2171 	movw	r1, #625	; 0x271
    661e:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    6622:	fbb0 f0f1 	udiv	r0, r0, r1
    6626:	4348      	muls	r0, r1
    6628:	f8d4 1002 	ldr.w	r1, [r4, #2]
    662c:	f240 2371 	movw	r3, #625	; 0x271
    6630:	0a0a      	lsrs	r2, r1, #8
    6632:	f240 2171 	movw	r1, #625	; 0x271
    6636:	434a      	muls	r2, r1
    6638:	f8d4 1005 	ldr.w	r1, [r4, #5]
    663c:	0a09      	lsrs	r1, r1, #8
    663e:	4359      	muls	r1, r3
    6640:	4290      	cmp	r0, r2
    6642:	d801      	bhi.n	6648 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    6644:	9204      	str	r2, [sp, #16]
    6646:	e004      	b.n	6652 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6648:	4288      	cmp	r0, r1
    664a:	d801      	bhi.n	6650 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    664c:	9004      	str	r0, [sp, #16]
    664e:	e000      	b.n	6652 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6650:	9104      	str	r1, [sp, #16]
    6652:	7ca0      	ldrb	r0, [r4, #18]
    6654:	f88d 0017 	strb.w	r0, [sp, #23]
    6658:	7e20      	ldrb	r0, [r4, #24]
    665a:	2801      	cmp	r0, #1
    665c:	d000      	beq.n	6660 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    665e:	2000      	movs	r0, #0
    6660:	f88d 0014 	strb.w	r0, [sp, #20]
    6664:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    6666:	f006 fcfe 	bl	d066 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    666a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    666c:	f006 fd9e 	bl	d1ac <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    6670:	2220      	movs	r2, #32
    6672:	a902      	add	r1, sp, #8
    6674:	4628      	mov	r0, r5
    6676:	f005 fc24 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    667a:	980a      	ldr	r0, [sp, #40]	; 0x28
    667c:	6228      	str	r0, [r5, #32]
    667e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    6682:	84a8      	strh	r0, [r5, #36]	; 0x24
    6684:	7ae0      	ldrb	r0, [r4, #11]
    6686:	b168      	cbz	r0, 66a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6688:	2802      	cmp	r0, #2
    668a:	d00b      	beq.n	66a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    668c:	f05f 0001 	movs.w	r0, #1
    6690:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    6694:	68e0      	ldr	r0, [r4, #12]
    6696:	6528      	str	r0, [r5, #80]	; 0x50
    6698:	8a20      	ldrh	r0, [r4, #16]
    669a:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    669e:	b00d      	add	sp, #52	; 0x34
    66a0:	2000      	movs	r0, #0
    66a2:	bd30      	pop	{r4, r5, pc}
    66a4:	2000      	movs	r0, #0
    66a6:	e7f3      	b.n	6690 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

000066a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    66a8:	4a0a      	ldr	r2, [pc, #40]	; (66d4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    66aa:	b510      	push	{r4, lr}
    66ac:	2100      	movs	r1, #0
    66ae:	7011      	strb	r1, [r2, #0]
    66b0:	4c09      	ldr	r4, [pc, #36]	; (66d8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    66b2:	6060      	str	r0, [r4, #4]
    66b4:	f000 f822 	bl	66fc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    66b8:	b110      	cbz	r0, 66c0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    66ba:	f240 312a 	movw	r1, #810	; 0x32a
    66be:	e004      	b.n	66ca <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    66c0:	68a0      	ldr	r0, [r4, #8]
    66c2:	2800      	cmp	r0, #0
    66c4:	d104      	bne.n	66d0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    66c6:	f240 312d 	movw	r1, #813	; 0x32d
    66ca:	202d      	movs	r0, #45	; 0x2d
    66cc:	f7fd fb8a 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66d0:	bd10      	pop	{r4, pc}
    66d2:	0000      	.short	0x0000
    66d4:	20000f54 	.word	0x20000f54
    66d8:	200000f0 	.word	0x200000f0

000066dc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    66dc:	4902      	ldr	r1, [pc, #8]	; (66e8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    66de:	4801      	ldr	r0, [pc, #4]	; (66e4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    66e0:	6088      	str	r0, [r1, #8]
    66e2:	4770      	bx	lr
    66e4:	000071dc 	.word	0x000071dc
    66e8:	200000f0 	.word	0x200000f0

000066ec <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    66ec:	4902      	ldr	r1, [pc, #8]	; (66f8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    66ee:	6008      	str	r0, [r1, #0]
    66f0:	6889      	ldr	r1, [r1, #8]
    66f2:	6809      	ldr	r1, [r1, #0]
    66f4:	4708      	bx	r1
    66f6:	0000      	.short	0x0000
    66f8:	200000f0 	.word	0x200000f0

000066fc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    66fc:	4808      	ldr	r0, [pc, #32]	; (6720 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    66fe:	b510      	push	{r4, lr}
    6700:	7800      	ldrb	r0, [r0, #0]
    6702:	b110      	cbz	r0, 670a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6704:	240c      	movs	r4, #12
    6706:	4620      	mov	r0, r4
    6708:	bd10      	pop	{r4, pc}
    670a:	2400      	movs	r4, #0
    670c:	2218      	movs	r2, #24
    670e:	4621      	mov	r1, r4
    6710:	4803      	ldr	r0, [pc, #12]	; (6720 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6712:	f005 fc50 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6716:	f004 f937 	bl	a988 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    671a:	f003 ff19 	bl	a550 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    671e:	e7f2      	b.n	6706 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    6720:	20000f54 	.word	0x20000f54

00006724 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6724:	4904      	ldr	r1, [pc, #16]	; (6738 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6726:	b510      	push	{r4, lr}
    6728:	7809      	ldrb	r1, [r1, #0]
    672a:	2901      	cmp	r1, #1
    672c:	d101      	bne.n	6732 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    672e:	f000 fb83 	bl	6e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    6732:	2000      	movs	r0, #0
    6734:	bd10      	pop	{r4, pc}
    6736:	0000      	.short	0x0000
    6738:	20000f54 	.word	0x20000f54

0000673c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    673c:	4902      	ldr	r1, [pc, #8]	; (6748 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    673e:	4801      	ldr	r0, [pc, #4]	; (6744 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6740:	6008      	str	r0, [r1, #0]
    6742:	4770      	bx	lr
    6744:	00006f85 	.word	0x00006f85
    6748:	200000fc 	.word	0x200000fc
    674c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6750:	000f      	movs	r7, r1
    6752:	4604      	mov	r4, r0
    6754:	d023      	beq.n	679e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6756:	f104 0020 	add.w	r0, r4, #32
    675a:	4605      	mov	r5, r0
    675c:	f007 fcf6 	bl	e14c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6760:	b9b0      	cbnz	r0, 6790 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6762:	78a0      	ldrb	r0, [r4, #2]
    6764:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6768:	b350      	cbz	r0, 67c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    676a:	4628      	mov	r0, r5
    676c:	f007 fcc5 	bl	e0fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6770:	4606      	mov	r6, r0
    6772:	4628      	mov	r0, r5
    6774:	f007 fcea 	bl	e14c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6778:	1a30      	subs	r0, r6, r0
    677a:	b2c0      	uxtb	r0, r0
    677c:	f007 fd3b 	bl	e1f6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6780:	4601      	mov	r1, r0
    6782:	4835      	ldr	r0, [pc, #212]	; (6858 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6784:	6842      	ldr	r2, [r0, #4]
    6786:	4411      	add	r1, r2
    6788:	6041      	str	r1, [r0, #4]
    678a:	4628      	mov	r0, r5
    678c:	f007 fcfc 	bl	e188 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6790:	4628      	mov	r0, r5
    6792:	f007 fcbe 	bl	e112 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6796:	4601      	mov	r1, r0
    6798:	4620      	mov	r0, r4
    679a:	f007 fc7d 	bl	e098 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    679e:	4d2f      	ldr	r5, [pc, #188]	; (685c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    67a0:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    67a4:	2100      	movs	r1, #0
    67a6:	6868      	ldr	r0, [r5, #4]
    67a8:	8001      	strh	r1, [r0, #0]
    67aa:	f007 fc8b 	bl	e0c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    67ae:	8860      	ldrh	r0, [r4, #2]
    67b0:	2813      	cmp	r0, #19
    67b2:	d013      	beq.n	67dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    67b4:	dc09      	bgt.n	67ca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    67b6:	2810      	cmp	r0, #16
    67b8:	d036      	beq.n	6828 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    67ba:	2812      	cmp	r0, #18
    67bc:	d109      	bne.n	67d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    67be:	e031      	b.n	6824 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    67c0:	4620      	mov	r0, r4
    67c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67c6:	f000 bb37 	b.w	6e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    67ca:	2815      	cmp	r0, #21
    67cc:	d00f      	beq.n	67ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    67ce:	281d      	cmp	r0, #29
    67d0:	d00d      	beq.n	67ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    67d2:	f240 6171 	movw	r1, #1649	; 0x671
    67d6:	202d      	movs	r0, #45	; 0x2d
    67d8:	f7fd fb04 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67dc:	2100      	movs	r1, #0
    67de:	6868      	ldr	r0, [r5, #4]
    67e0:	f007 f8f6 	bl	d9d0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    67e4:	2101      	movs	r1, #1
    67e6:	6868      	ldr	r0, [r5, #4]
    67e8:	f007 fc6c 	bl	e0c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    67ec:	e020      	b.n	6830 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    67ee:	2101      	movs	r1, #1
    67f0:	6868      	ldr	r0, [r5, #4]
    67f2:	f007 f8ed 	bl	d9d0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    67f6:	2101      	movs	r1, #1
    67f8:	6868      	ldr	r0, [r5, #4]
    67fa:	f007 fc63 	bl	e0c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    67fe:	b136      	cbz	r6, 680e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6800:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6804:	6868      	ldr	r0, [r5, #4]
    6806:	f007 f8fe 	bl	da06 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    680a:	2101      	movs	r1, #1
    680c:	e006      	b.n	681c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    680e:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6812:	6868      	ldr	r0, [r5, #4]
    6814:	f007 f8f7 	bl	da06 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6818:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    681c:	6868      	ldr	r0, [r5, #4]
    681e:	f007 f8f8 	bl	da12 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6822:	e005      	b.n	6830 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6824:	2106      	movs	r1, #6
    6826:	e000      	b.n	682a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6828:	2102      	movs	r1, #2
    682a:	6868      	ldr	r0, [r5, #4]
    682c:	f007 f8d0 	bl	d9d0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6830:	4620      	mov	r0, r4
    6832:	f000 fcaf 	bl	7194 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    6836:	8860      	ldrh	r0, [r4, #2]
    6838:	281d      	cmp	r0, #29
    683a:	d006      	beq.n	684a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    683c:	2815      	cmp	r0, #21
    683e:	d004      	beq.n	684a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6840:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    6842:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6844:	6868      	ldr	r0, [r5, #4]
    6846:	f007 f8b3 	bl	d9b0 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    684a:	4639      	mov	r1, r7
    684c:	4620      	mov	r0, r4
    684e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6852:	f000 b9e7 	b.w	6c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    6856:	0000      	.short	0x0000
    6858:	20000f54 	.word	0x20000f54
    685c:	200000f0 	.word	0x200000f0
    6860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6864:	4d2e      	ldr	r5, [pc, #184]	; (6920 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    6866:	4607      	mov	r7, r0
    6868:	7828      	ldrb	r0, [r5, #0]
    686a:	2802      	cmp	r0, #2
    686c:	d005      	beq.n	687a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    686e:	7828      	ldrb	r0, [r5, #0]
    6870:	2803      	cmp	r0, #3
    6872:	d002      	beq.n	687a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6874:	f44f 6150 	mov.w	r1, #3328	; 0xd00
    6878:	e029      	b.n	68ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    687a:	4c2a      	ldr	r4, [pc, #168]	; (6924 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    687c:	6820      	ldr	r0, [r4, #0]
    687e:	7b01      	ldrb	r1, [r0, #12]
    6880:	b109      	cbz	r1, 6886 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6882:	f007 fc14 	bl	e0ae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    6886:	6860      	ldr	r0, [r4, #4]
    6888:	f04f 0800 	mov.w	r8, #0
    688c:	7802      	ldrb	r2, [r0, #0]
    688e:	f002 060f 	and.w	r6, r2, #15
    6892:	b357      	cbz	r7, 68ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6894:	6821      	ldr	r1, [r4, #0]
    6896:	f101 0349 	add.w	r3, r1, #73	; 0x49
    689a:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    689e:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    68a2:	d122      	bne.n	68ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    68a4:	2206      	movs	r2, #6
    68a6:	4619      	mov	r1, r3
    68a8:	3009      	adds	r0, #9
    68aa:	f005 faf8 	bl	be9e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    68ae:	b9e0      	cbnz	r0, 68ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    68b0:	4641      	mov	r1, r8
    68b2:	6860      	ldr	r0, [r4, #4]
    68b4:	f007 f86c 	bl	d990 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    68b8:	b1b8      	cbz	r0, 68ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    68ba:	782a      	ldrb	r2, [r5, #0]
    68bc:	6820      	ldr	r0, [r4, #0]
    68be:	4631      	mov	r1, r6
    68c0:	2a02      	cmp	r2, #2
    68c2:	d007      	beq.n	68d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    68c4:	782a      	ldrb	r2, [r5, #0]
    68c6:	2a03      	cmp	r2, #3
    68c8:	d004      	beq.n	68d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    68ca:	f640 41d9 	movw	r1, #3289	; 0xcd9
    68ce:	202d      	movs	r0, #45	; 0x2d
    68d0:	f7fd fa88 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68d4:	68a2      	ldr	r2, [r4, #8]
    68d6:	782b      	ldrb	r3, [r5, #0]
    68d8:	6952      	ldr	r2, [r2, #20]
    68da:	f06f 0607 	mvn.w	r6, #7
    68de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    68e2:	58d2      	ldr	r2, [r2, r3]
    68e4:	4790      	blx	r2
    68e6:	4606      	mov	r6, r0
    68e8:	e000      	b.n	68ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    68ea:	2601      	movs	r6, #1
    68ec:	7ba8      	ldrb	r0, [r5, #14]
    68ee:	b118      	cbz	r0, 68f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    68f0:	f004 f84a 	bl	a988 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    68f4:	f003 fe2c 	bl	a550 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    68f8:	2e00      	cmp	r6, #0
    68fa:	d00f      	beq.n	691c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    68fc:	6820      	ldr	r0, [r4, #0]
    68fe:	f007 fc90 	bl	e222 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6902:	b130      	cbz	r0, 6912 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    6904:	f004 f864 	bl	a9d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6908:	68a0      	ldr	r0, [r4, #8]
    690a:	6880      	ldr	r0, [r0, #8]
    690c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6910:	4700      	bx	r0
    6912:	6820      	ldr	r0, [r4, #0]
    6914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6918:	f000 ba8e 	b.w	6e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6920:	20000f54 	.word	0x20000f54
    6924:	200000f0 	.word	0x200000f0
    6928:	b510      	push	{r4, lr}
    692a:	2903      	cmp	r1, #3
    692c:	d002      	beq.n	6934 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    692e:	2905      	cmp	r1, #5
    6930:	d10a      	bne.n	6948 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6932:	e002      	b.n	693a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    6934:	f000 fb7e 	bl	7034 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    6938:	e003      	b.n	6942 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    693a:	4904      	ldr	r1, [pc, #16]	; (694c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    693c:	6809      	ldr	r1, [r1, #0]
    693e:	b109      	cbz	r1, 6944 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6940:	4788      	blx	r1
    6942:	b108      	cbz	r0, 6948 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6944:	2000      	movs	r0, #0
    6946:	bd10      	pop	{r4, pc}
    6948:	2001      	movs	r0, #1
    694a:	bd10      	pop	{r4, pc}
    694c:	200000fc 	.word	0x200000fc
    6950:	4a09      	ldr	r2, [pc, #36]	; (6978 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    6952:	0003      	movs	r3, r0
    6954:	6810      	ldr	r0, [r2, #0]
    6956:	d001      	beq.n	695c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6958:	f000 ba6e 	b.w	6e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    695c:	2900      	cmp	r1, #0
    695e:	d009      	beq.n	6974 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    6960:	6891      	ldr	r1, [r2, #8]
    6962:	4a06      	ldr	r2, [pc, #24]	; (697c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    6964:	6909      	ldr	r1, [r1, #16]
    6966:	7812      	ldrb	r2, [r2, #0]
    6968:	f06f 030f 	mvn.w	r3, #15
    696c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6970:	5889      	ldr	r1, [r1, r2]
    6972:	4708      	bx	r1
    6974:	4770      	bx	lr
    6976:	0000      	.short	0x0000
    6978:	200000f0 	.word	0x200000f0
    697c:	20000f54 	.word	0x20000f54
    6980:	b570      	push	{r4, r5, r6, lr}
    6982:	4604      	mov	r4, r0
    6984:	8840      	ldrh	r0, [r0, #2]
    6986:	2810      	cmp	r0, #16
    6988:	d019      	beq.n	69be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    698a:	4d10      	ldr	r5, [pc, #64]	; (69cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    698c:	7ba8      	ldrb	r0, [r5, #14]
    698e:	b120      	cbz	r0, 699a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    6990:	f003 fdfe 	bl	a590 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6994:	2040      	movs	r0, #64	; 0x40
    6996:	f004 f807 	bl	a9a8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    699a:	480d      	ldr	r0, [pc, #52]	; (69d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    699c:	6840      	ldr	r0, [r0, #4]
    699e:	f004 fab1 	bl	af04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69a2:	78a0      	ldrb	r0, [r4, #2]
    69a4:	0740      	lsls	r0, r0, #29
    69a6:	d404      	bmi.n	69b2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    69a8:	2100      	movs	r1, #0
    69aa:	7922      	ldrb	r2, [r4, #4]
    69ac:	4608      	mov	r0, r1
    69ae:	f004 fb33 	bl	b018 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    69b2:	2000      	movs	r0, #0
    69b4:	f004 f948 	bl	ac48 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    69b8:	2002      	movs	r0, #2
    69ba:	7028      	strb	r0, [r5, #0]
    69bc:	bd70      	pop	{r4, r5, r6, pc}
    69be:	4620      	mov	r0, r4
    69c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    69c4:	2101      	movs	r1, #1
    69c6:	f7ff bec1 	b.w	674c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    69ca:	0000      	.short	0x0000
    69cc:	20000f54 	.word	0x20000f54
    69d0:	200000f0 	.word	0x200000f0
    69d4:	b510      	push	{r4, lr}
    69d6:	4c12      	ldr	r4, [pc, #72]	; (6a20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    69d8:	6820      	ldr	r0, [r4, #0]
    69da:	f000 f825 	bl	6a28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    69de:	6820      	ldr	r0, [r4, #0]
    69e0:	f007 fc1f 	bl	e222 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    69e4:	2800      	cmp	r0, #0
    69e6:	6820      	ldr	r0, [r4, #0]
    69e8:	d00b      	beq.n	6a02 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    69ea:	490e      	ldr	r1, [pc, #56]	; (6a24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    69ec:	780a      	ldrb	r2, [r1, #0]
    69ee:	2a02      	cmp	r2, #2
    69f0:	d00b      	beq.n	6a0a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    69f2:	780a      	ldrb	r2, [r1, #0]
    69f4:	2a03      	cmp	r2, #3
    69f6:	d008      	beq.n	6a0a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    69f8:	f640 4107 	movw	r1, #3079	; 0xc07
    69fc:	202d      	movs	r0, #45	; 0x2d
    69fe:	f7fd f9f1 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6a06:	f000 ba17 	b.w	6e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    6a0a:	68a2      	ldr	r2, [r4, #8]
    6a0c:	7809      	ldrb	r1, [r1, #0]
    6a0e:	68d2      	ldr	r2, [r2, #12]
    6a10:	f06f 0307 	mvn.w	r3, #7
    6a14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6a18:	5851      	ldr	r1, [r2, r1]
    6a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6a1e:	4708      	bx	r1
    6a20:	200000f0 	.word	0x200000f0
    6a24:	20000f54 	.word	0x20000f54
    6a28:	b510      	push	{r4, lr}
    6a2a:	7b01      	ldrb	r1, [r0, #12]
    6a2c:	b109      	cbz	r1, 6a32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    6a2e:	f007 fb3e 	bl	e0ae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    6a32:	4805      	ldr	r0, [pc, #20]	; (6a48 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    6a34:	7b80      	ldrb	r0, [r0, #14]
    6a36:	2800      	cmp	r0, #0
    6a38:	d005      	beq.n	6a46 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    6a3a:	f003 ffa5 	bl	a988 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6a42:	f003 bd85 	b.w	a550 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a46:	bd10      	pop	{r4, pc}
    6a48:	20000f54 	.word	0x20000f54

00006a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a50:	4d59      	ldr	r5, [pc, #356]	; (6bb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    6a52:	4604      	mov	r4, r0
    6a54:	b088      	sub	sp, #32
    6a56:	7828      	ldrb	r0, [r5, #0]
    6a58:	bbf0      	cbnz	r0, 6ad8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    6a5a:	7820      	ldrb	r0, [r4, #0]
    6a5c:	28ff      	cmp	r0, #255	; 0xff
    6a5e:	d03c      	beq.n	6ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6a60:	2600      	movs	r6, #0
    6a62:	81ae      	strh	r6, [r5, #12]
    6a64:	606e      	str	r6, [r5, #4]
    6a66:	706e      	strb	r6, [r5, #1]
    6a68:	70ae      	strb	r6, [r5, #2]
    6a6a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    6a6e:	4b53      	ldr	r3, [pc, #332]	; (6bbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    6a70:	f8df 814c 	ldr.w	r8, [pc, #332]	; 6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>
    6a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6a76:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6a7a:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6a7e:	6840      	ldr	r0, [r0, #4]
    6a80:	9003      	str	r0, [sp, #12]
    6a82:	4668      	mov	r0, sp
    6a84:	f004 f8b4 	bl	abf0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6a88:	f004 f9ac 	bl	ade4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6a8c:	f004 fc0c 	bl	b2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    6a90:	f003 ff7a 	bl	a988 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a94:	f003 fd5c 	bl	a550 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a98:	484a      	ldr	r0, [pc, #296]	; (6bc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    6a9a:	f004 fafd 	bl	b098 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6a9e:	4847      	ldr	r0, [pc, #284]	; (6bbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    6aa0:	1f00      	subs	r0, r0, #4
    6aa2:	f004 fb03 	bl	b0ac <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6aa6:	f104 0020 	add.w	r0, r4, #32
    6aaa:	4607      	mov	r7, r0
    6aac:	f007 fb6c 	bl	e188 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6ab0:	4638      	mov	r0, r7
    6ab2:	f007 fb2e 	bl	e112 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6ab6:	4601      	mov	r1, r0
    6ab8:	4620      	mov	r0, r4
    6aba:	f007 faed 	bl	e098 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6abe:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6ac2:	f004 fa19 	bl	aef8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6ac6:	7921      	ldrb	r1, [r4, #4]
    6ac8:	2000      	movs	r0, #0
    6aca:	f004 f815 	bl	aaf8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6ace:	60a8      	str	r0, [r5, #8]
    6ad0:	b138      	cbz	r0, 6ae2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    6ad2:	7ea0      	ldrb	r0, [r4, #26]
    6ad4:	b968      	cbnz	r0, 6af2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6ad6:	e007      	b.n	6ae8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    6ad8:	e7ff      	b.n	6ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6ada:	200c      	movs	r0, #12
    6adc:	b008      	add	sp, #32
    6ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ae2:	2001      	movs	r0, #1
    6ae4:	7028      	strb	r0, [r5, #0]
    6ae6:	e064      	b.n	6bb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    6ae8:	7e20      	ldrb	r0, [r4, #24]
    6aea:	b910      	cbnz	r0, 6af2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6aec:	78a0      	ldrb	r0, [r4, #2]
    6aee:	0740      	lsls	r0, r0, #29
    6af0:	d52b      	bpl.n	6b4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    6af2:	f005 f871 	bl	bbd8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6af6:	4682      	mov	sl, r0
    6af8:	4651      	mov	r1, sl
    6afa:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6afc:	f7fa fdae 	bl	165c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6b00:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 6bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    6b04:	4607      	mov	r7, r0
    6b06:	fb90 f1f9 	sdiv	r1, r0, r9
    6b0a:	fb09 7011 	mls	r0, r9, r1, r7
    6b0e:	4241      	negs	r1, r0
    6b10:	4650      	mov	r0, sl
    6b12:	f7fa fd71 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6b16:	6460      	str	r0, [r4, #68]	; 0x44
    6b18:	fb97 f0f9 	sdiv	r0, r7, r9
    6b1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6b1e:	4408      	add	r0, r1
    6b20:	6420      	str	r0, [r4, #64]	; 0x40
    6b22:	f7fe ff1f 	bl	5964 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6b26:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6b28:	4288      	cmp	r0, r1
    6b2a:	d80e      	bhi.n	6b4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    6b2c:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    6b30:	2101      	movs	r1, #1
    6b32:	4620      	mov	r0, r4
    6b34:	f007 fa74 	bl	e020 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6b38:	78a0      	ldrb	r0, [r4, #2]
    6b3a:	0740      	lsls	r0, r0, #29
    6b3c:	d505      	bpl.n	6b4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    6b3e:	7e20      	ldrb	r0, [r4, #24]
    6b40:	b118      	cbz	r0, 6b4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    6b42:	2101      	movs	r1, #1
    6b44:	4620      	mov	r0, r4
    6b46:	f000 faaf 	bl	70a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6b4a:	f104 0130 	add.w	r1, r4, #48	; 0x30
    6b4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6b50:	f006 fafb 	bl	d14a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    6b54:	f104 0138 	add.w	r1, r4, #56	; 0x38
    6b58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6b5a:	f006 faf9 	bl	d150 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    6b5e:	f7fe ff67 	bl	5a30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6b62:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6b66:	1cc0      	adds	r0, r0, #3
    6b68:	f006 fbb2 	bl	d2d0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6b6c:	73a8      	strb	r0, [r5, #14]
    6b6e:	78a0      	ldrb	r0, [r4, #2]
    6b70:	07c0      	lsls	r0, r0, #31
    6b72:	d01e      	beq.n	6bb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    6b74:	a904      	add	r1, sp, #16
    6b76:	2000      	movs	r0, #0
    6b78:	f006 f9c1 	bl	cefe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    6b7c:	b120      	cbz	r0, 6b88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    6b7e:	f640 11ce 	movw	r1, #2510	; 0x9ce
    6b82:	202d      	movs	r0, #45	; 0x2d
    6b84:	f7fd f92e 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b88:	20ff      	movs	r0, #255	; 0xff
    6b8a:	73e8      	strb	r0, [r5, #15]
    6b8c:	e00c      	b.n	6ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>
    6b8e:	9806      	ldr	r0, [sp, #24]
    6b90:	69e1      	ldr	r1, [r4, #28]
    6b92:	4281      	cmp	r1, r0
    6b94:	d008      	beq.n	6ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>
    6b96:	7881      	ldrb	r1, [r0, #2]
    6b98:	73e9      	strb	r1, [r5, #15]
    6b9a:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6b9e:	6129      	str	r1, [r5, #16]
    6ba0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6ba4:	82a8      	strh	r0, [r5, #20]
    6ba6:	e004      	b.n	6bb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    6ba8:	a804      	add	r0, sp, #16
    6baa:	f7fd fb61 	bl	4270 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6bae:	2800      	cmp	r0, #0
    6bb0:	d0ed      	beq.n	6b8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    6bb2:	2000      	movs	r0, #0
    6bb4:	e792      	b.n	6adc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    6bb6:	0000      	.short	0x0000
    6bb8:	20000f54 	.word	0x20000f54
    6bbc:	000071bc 	.word	0x000071bc
    6bc0:	200000f0 	.word	0x200000f0
    6bc4:	8e89bed6 	.word	0x8e89bed6
    6bc8:	000f4240 	.word	0x000f4240
    6bcc:	b510      	push	{r4, lr}
    6bce:	4604      	mov	r4, r0
    6bd0:	f7ff ff3c 	bl	6a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6bd4:	2800      	cmp	r0, #0
    6bd6:	d108      	bne.n	6bea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    6bd8:	4804      	ldr	r0, [pc, #16]	; (6bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    6bda:	7800      	ldrb	r0, [r0, #0]
    6bdc:	2801      	cmp	r0, #1
    6bde:	d003      	beq.n	6be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    6be0:	2100      	movs	r1, #0
    6be2:	4620      	mov	r0, r4
    6be4:	f7ff fdb2 	bl	674c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6be8:	2000      	movs	r0, #0
    6bea:	bd10      	pop	{r4, pc}
    6bec:	20000f54 	.word	0x20000f54
    6bf0:	480a      	ldr	r0, [pc, #40]	; (6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    6bf2:	b510      	push	{r4, lr}
    6bf4:	490a      	ldr	r1, [pc, #40]	; (6c20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    6bf6:	6804      	ldr	r4, [r0, #0]
    6bf8:	7808      	ldrb	r0, [r1, #0]
    6bfa:	2800      	cmp	r0, #0
    6bfc:	d00d      	beq.n	6c1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    6bfe:	7808      	ldrb	r0, [r1, #0]
    6c00:	2802      	cmp	r0, #2
    6c02:	d002      	beq.n	6c0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    6c04:	7808      	ldrb	r0, [r1, #0]
    6c06:	2803      	cmp	r0, #3
    6c08:	d102      	bne.n	6c10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    6c0a:	4620      	mov	r0, r4
    6c0c:	f7ff ff0c 	bl	6a28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6c10:	4620      	mov	r0, r4
    6c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6c16:	f000 b90f 	b.w	6e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    6c1a:	bd10      	pop	{r4, pc}
    6c1c:	200000f0 	.word	0x200000f0
    6c20:	20000f54 	.word	0x20000f54
    6c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c28:	4604      	mov	r4, r0
    6c2a:	4827      	ldr	r0, [pc, #156]	; (6cc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    6c2c:	460d      	mov	r5, r1
    6c2e:	6840      	ldr	r0, [r0, #4]
    6c30:	f004 f968 	bl	af04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c34:	4e25      	ldr	r6, [pc, #148]	; (6ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    6c36:	2004      	movs	r0, #4
    6c38:	7030      	strb	r0, [r6, #0]
    6c3a:	b325      	cbz	r5, 6c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6c3c:	8860      	ldrh	r0, [r4, #2]
    6c3e:	2810      	cmp	r0, #16
    6c40:	d02a      	beq.n	6c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    6c42:	f104 0020 	add.w	r0, r4, #32
    6c46:	4680      	mov	r8, r0
    6c48:	68b5      	ldr	r5, [r6, #8]
    6c4a:	f007 fa56 	bl	e0fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6c4e:	4607      	mov	r7, r0
    6c50:	4640      	mov	r0, r8
    6c52:	f007 fa7b 	bl	e14c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6c56:	1a38      	subs	r0, r7, r0
    6c58:	1e40      	subs	r0, r0, #1
    6c5a:	b2c0      	uxtb	r0, r0
    6c5c:	8861      	ldrh	r1, [r4, #2]
    6c5e:	2228      	movs	r2, #40	; 0x28
    6c60:	f000 fae8 	bl	7234 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6c64:	4405      	add	r5, r0
    6c66:	78a0      	ldrb	r0, [r4, #2]
    6c68:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6c6c:	b130      	cbz	r0, 6c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    6c6e:	6870      	ldr	r0, [r6, #4]
    6c70:	4405      	add	r5, r0
    6c72:	f007 fac4 	bl	e1fe <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    6c76:	4428      	add	r0, r5
    6c78:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    6c7c:	7922      	ldrb	r2, [r4, #4]
    6c7e:	4629      	mov	r1, r5
    6c80:	2000      	movs	r0, #0
    6c82:	f004 f94d 	bl	af20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6c86:	8860      	ldrh	r0, [r4, #2]
    6c88:	2813      	cmp	r0, #19
    6c8a:	d013      	beq.n	6cb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6c8c:	dc09      	bgt.n	6ca2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    6c8e:	2810      	cmp	r0, #16
    6c90:	d017      	beq.n	6cc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    6c92:	2812      	cmp	r0, #18
    6c94:	d109      	bne.n	6caa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    6c96:	e00d      	b.n	6cb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6c98:	7921      	ldrb	r1, [r4, #4]
    6c9a:	2000      	movs	r0, #0
    6c9c:	f003 fee0 	bl	aa60 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6ca0:	e7f1      	b.n	6c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6ca2:	2815      	cmp	r0, #21
    6ca4:	d006      	beq.n	6cb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6ca6:	281d      	cmp	r0, #29
    6ca8:	d004      	beq.n	6cb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6caa:	f640 518e 	movw	r1, #3470	; 0xd8e
    6cae:	202d      	movs	r0, #45	; 0x2d
    6cb0:	f7fd f898 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cb4:	7922      	ldrb	r2, [r4, #4]
    6cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6cba:	2101      	movs	r1, #1
    6cbc:	2000      	movs	r0, #0
    6cbe:	f004 b9ab 	b.w	b018 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cc6:	0000      	.short	0x0000
    6cc8:	200000f0 	.word	0x200000f0
    6ccc:	20000f54 	.word	0x20000f54
    6cd0:	b510      	push	{r4, lr}
    6cd2:	4604      	mov	r4, r0
    6cd4:	7800      	ldrb	r0, [r0, #0]
    6cd6:	460b      	mov	r3, r1
    6cd8:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    6cdc:	29ff      	cmp	r1, #255	; 0xff
    6cde:	d010      	beq.n	6d02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    6ce0:	f104 0297 	add.w	r2, r4, #151	; 0x97
    6ce4:	1e51      	subs	r1, r2, #1
    6ce6:	4618      	mov	r0, r3
    6ce8:	f7fe fdba 	bl	5860 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6cec:	b130      	cbz	r0, 6cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    6cee:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    6cf2:	f040 0002 	orr.w	r0, r0, #2
    6cf6:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    6cfa:	e011      	b.n	6d20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    6cfc:	f640 71c5 	movw	r1, #4037	; 0xfc5
    6d00:	e020      	b.n	6d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>
    6d02:	4812      	ldr	r0, [pc, #72]	; (6d4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    6d04:	6840      	ldr	r0, [r0, #4]
    6d06:	7801      	ldrb	r1, [r0, #0]
    6d08:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6d0c:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    6d10:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6d14:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    6d18:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6d1c:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    6d20:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6d24:	287f      	cmp	r0, #127	; 0x7f
    6d26:	d00b      	beq.n	6d40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    6d28:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    6d2c:	207f      	movs	r0, #127	; 0x7f
    6d2e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6d32:	347e      	adds	r4, #126	; 0x7e
    6d34:	2001      	movs	r0, #1
    6d36:	75a0      	strb	r0, [r4, #22]
    6d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d3c:	f003 b81c 	b.w	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6d40:	f44f 6164 	mov.w	r1, #3648	; 0xe40
    6d44:	202d      	movs	r0, #45	; 0x2d
    6d46:	f7fd f84d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d4a:	0000      	.short	0x0000
    6d4c:	200000f0 	.word	0x200000f0
    6d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d54:	4690      	mov	r8, r2
    6d56:	460e      	mov	r6, r1
    6d58:	4604      	mov	r4, r0
    6d5a:	2903      	cmp	r1, #3
    6d5c:	d004      	beq.n	6d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    6d5e:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6d62:	b108      	cbz	r0, 6d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    6d64:	2001      	movs	r0, #1
    6d66:	e000      	b.n	6d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    6d68:	2000      	movs	r0, #0
    6d6a:	4681      	mov	r9, r0
    6d6c:	f003 fe2a 	bl	a9c4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6d70:	4605      	mov	r5, r0
    6d72:	2e03      	cmp	r6, #3
    6d74:	d003      	beq.n	6d7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    6d76:	2701      	movs	r7, #1
    6d78:	2e05      	cmp	r6, #5
    6d7a:	d005      	beq.n	6d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    6d7c:	e008      	b.n	6d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    6d7e:	78a0      	ldrb	r0, [r4, #2]
    6d80:	2702      	movs	r7, #2
    6d82:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6d86:	e001      	b.n	6d8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    6d88:	78a0      	ldrb	r0, [r4, #2]
    6d8a:	07c0      	lsls	r0, r0, #31
    6d8c:	2800      	cmp	r0, #0
    6d8e:	d04a      	beq.n	6e26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6d90:	f1b9 0f00 	cmp.w	r9, #0
    6d94:	d146      	bne.n	6e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6d96:	4826      	ldr	r0, [pc, #152]	; (6e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    6d98:	7b80      	ldrb	r0, [r0, #14]
    6d9a:	b140      	cbz	r0, 6dae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    6d9c:	f006 fa9b 	bl	d2d6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6da0:	f888 0000 	strb.w	r0, [r8]
    6da4:	28ff      	cmp	r0, #255	; 0xff
    6da6:	d002      	beq.n	6dae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    6da8:	f7fe fd74 	bl	5894 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6dac:	4305      	orrs	r5, r0
    6dae:	4e21      	ldr	r6, [pc, #132]	; (6e34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    6db0:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    6db4:	6870      	ldr	r0, [r6, #4]
    6db6:	7801      	ldrb	r1, [r0, #0]
    6db8:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6dbc:	4291      	cmp	r1, r2
    6dbe:	d106      	bne.n	6dce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    6dc0:	2206      	movs	r2, #6
    6dc2:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6dc6:	1cc0      	adds	r0, r0, #3
    6dc8:	f005 f869 	bl	be9e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6dcc:	b130      	cbz	r0, 6ddc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    6dce:	2000      	movs	r0, #0
    6dd0:	f898 1000 	ldrb.w	r1, [r8]
    6dd4:	29ff      	cmp	r1, #255	; 0xff
    6dd6:	d007      	beq.n	6de8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6dd8:	b9a8      	cbnz	r0, 6e06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6dda:	e001      	b.n	6de0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    6ddc:	2001      	movs	r0, #1
    6dde:	e7f7      	b.n	6dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6de0:	7e60      	ldrb	r0, [r4, #25]
    6de2:	4288      	cmp	r0, r1
    6de4:	d00f      	beq.n	6e06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6de6:	e008      	b.n	6dfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    6de8:	b138      	cbz	r0, 6dfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    6dea:	6871      	ldr	r1, [r6, #4]
    6dec:	f811 0b03 	ldrb.w	r0, [r1], #3
    6df0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6df4:	f007 f8d2 	bl	df9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6df8:	b128      	cbz	r0, 6e06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6dfa:	2000      	movs	r0, #0
    6dfc:	78a1      	ldrb	r1, [r4, #2]
    6dfe:	0749      	lsls	r1, r1, #29
    6e00:	d503      	bpl.n	6e0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    6e02:	b990      	cbnz	r0, 6e2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    6e04:	e00e      	b.n	6e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6e06:	2001      	movs	r0, #1
    6e08:	e7f8      	b.n	6dfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b0>
    6e0a:	b975      	cbnz	r5, 6e2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    6e0c:	7be0      	ldrb	r0, [r4, #15]
    6e0e:	b108      	cbz	r0, 6e14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    6e10:	42b8      	cmp	r0, r7
    6e12:	d107      	bne.n	6e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6e14:	6871      	ldr	r1, [r6, #4]
    6e16:	f811 0b03 	ldrb.w	r0, [r1], #3
    6e1a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6e1e:	f007 f8bd 	bl	df9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6e22:	b110      	cbz	r0, 6e2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    6e24:	2000      	movs	r0, #0
    6e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e2a:	2001      	movs	r0, #1
    6e2c:	e7fb      	b.n	6e26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6e2e:	0000      	.short	0x0000
    6e30:	20000f54 	.word	0x20000f54
    6e34:	200000f0 	.word	0x200000f0
    6e38:	b570      	push	{r4, r5, r6, lr}
    6e3a:	4604      	mov	r4, r0
    6e3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6e3e:	4d13      	ldr	r5, [pc, #76]	; (6e8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>)
    6e40:	1c40      	adds	r0, r0, #1
    6e42:	62a0      	str	r0, [r4, #40]	; 0x28
    6e44:	7ba8      	ldrb	r0, [r5, #14]
    6e46:	2600      	movs	r6, #0
    6e48:	b120      	cbz	r0, 6e54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    6e4a:	f003 fd9d 	bl	a988 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6e4e:	f003 fb7f 	bl	a550 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6e52:	73ae      	strb	r6, [r5, #14]
    6e54:	702e      	strb	r6, [r5, #0]
    6e56:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6e5a:	b108      	cbz	r0, 6e60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6e5c:	2101      	movs	r1, #1
    6e5e:	e00f      	b.n	6e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    6e60:	7b60      	ldrb	r0, [r4, #13]
    6e62:	b160      	cbz	r0, 6e7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x432>
    6e64:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6e66:	4288      	cmp	r0, r1
    6e68:	d809      	bhi.n	6e7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x432>
    6e6a:	2101      	movs	r1, #1
    6e6c:	4620      	mov	r0, r4
    6e6e:	f007 f9ed 	bl	e24c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6e72:	78a0      	ldrb	r0, [r4, #2]
    6e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e78:	07c0      	lsls	r0, r0, #31
    6e7a:	f002 bf7d 	b.w	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6e7e:	2100      	movs	r1, #0
    6e80:	4620      	mov	r0, r4
    6e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e86:	f007 b9e1 	b.w	e24c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6e8a:	0000      	.short	0x0000
    6e8c:	20000f54 	.word	0x20000f54
    6e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e94:	4604      	mov	r4, r0
    6e96:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6e9a:	4617      	mov	r7, r2
    6e9c:	460d      	mov	r5, r1
    6e9e:	f88d 0000 	strb.w	r0, [sp]
    6ea2:	9800      	ldr	r0, [sp, #0]
    6ea4:	9000      	str	r0, [sp, #0]
    6ea6:	f89d 0000 	ldrb.w	r0, [sp]
    6eaa:	b110      	cbz	r0, 6eb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x466>
    6eac:	f640 413b 	movw	r1, #3131	; 0xc3b
    6eb0:	e054      	b.n	6f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x510>
    6eb2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    6eb6:	8828      	ldrh	r0, [r5, #0]
    6eb8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d15d      	bne.n	6f7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>
    6ec0:	68e8      	ldr	r0, [r5, #12]
    6ec2:	f006 fa66 	bl	d392 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6ec6:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    6eca:	8aa8      	ldrh	r0, [r5, #20]
    6ecc:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    6ed0:	8ae8      	ldrh	r0, [r5, #22]
    6ed2:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    6ed6:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    6eda:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    6ede:	7e21      	ldrb	r1, [r4, #24]
    6ee0:	f104 0849 	add.w	r8, r4, #73	; 0x49
    6ee4:	2600      	movs	r6, #0
    6ee6:	b129      	cbz	r1, 6ef4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    6ee8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6eec:	4641      	mov	r1, r8
    6eee:	f006 ff6d 	bl	ddcc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6ef2:	b940      	cbnz	r0, 6f06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    6ef4:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6ef8:	b170      	cbz	r0, 6f18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    6efa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6efe:	4641      	mov	r1, r8
    6f00:	f006 ff5b 	bl	ddba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6f04:	b140      	cbz	r0, 6f18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    6f06:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6f0a:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    6f0e:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6f12:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    6f16:	e003      	b.n	6f20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d4>
    6f18:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    6f1c:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    6f20:	4817      	ldr	r0, [pc, #92]	; (6f80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x534>)
    6f22:	2fff      	cmp	r7, #255	; 0xff
    6f24:	6840      	ldr	r0, [r0, #4]
    6f26:	7801      	ldrb	r1, [r0, #0]
    6f28:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6f2c:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    6f30:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6f34:	d015      	beq.n	6f62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x516>
    6f36:	67a1      	str	r1, [r4, #120]	; 0x78
    6f38:	8880      	ldrh	r0, [r0, #4]
    6f3a:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    6f3e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    6f42:	1e51      	subs	r1, r2, #1
    6f44:	4638      	mov	r0, r7
    6f46:	f7fe fc8b 	bl	5860 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6f4a:	b128      	cbz	r0, 6f58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    6f4c:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    6f50:	f040 0002 	orr.w	r0, r0, #2
    6f54:	7020      	strb	r0, [r4, #0]
    6f56:	e00a      	b.n	6f6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x522>
    6f58:	f640 415c 	movw	r1, #3164	; 0xc5c
    6f5c:	202d      	movs	r0, #45	; 0x2d
    6f5e:	f7fc ff41 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f62:	f844 1f6c 	str.w	r1, [r4, #108]!
    6f66:	8880      	ldrh	r0, [r0, #4]
    6f68:	80a0      	strh	r0, [r4, #4]
    6f6a:	60e6      	str	r6, [r4, #12]
    6f6c:	8226      	strh	r6, [r4, #16]
    6f6e:	8828      	ldrh	r0, [r5, #0]
    6f70:	f7fd fb60 	bl	4634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6f74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6f78:	f005 be9e 	b.w	ccb8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f80:	200000f0 	.word	0x200000f0
    6f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6f88:	4604      	mov	r4, r0
    6f8a:	20ff      	movs	r0, #255	; 0xff
    6f8c:	f88d 0000 	strb.w	r0, [sp]
    6f90:	2601      	movs	r6, #1
    6f92:	466a      	mov	r2, sp
    6f94:	2105      	movs	r1, #5
    6f96:	4620      	mov	r0, r4
    6f98:	f7ff feda 	bl	6d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    6f9c:	b3f0      	cbz	r0, 701c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d0>
    6f9e:	4d23      	ldr	r5, [pc, #140]	; (702c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    6fa0:	4f23      	ldr	r7, [pc, #140]	; (7030 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    6fa2:	46b0      	mov	r8, r6
    6fa4:	6868      	ldr	r0, [r5, #4]
    6fa6:	7bfa      	ldrb	r2, [r7, #15]
    6fa8:	f04f 0900 	mov.w	r9, #0
    6fac:	7801      	ldrb	r1, [r0, #0]
    6fae:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6fb2:	4291      	cmp	r1, r2
    6fb4:	d106      	bne.n	6fc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    6fb6:	2206      	movs	r2, #6
    6fb8:	f107 0110 	add.w	r1, r7, #16
    6fbc:	1cc0      	adds	r0, r0, #3
    6fbe:	f004 ff6e 	bl	be9e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6fc2:	b358      	cbz	r0, 701c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d0>
    6fc4:	686a      	ldr	r2, [r5, #4]
    6fc6:	69e0      	ldr	r0, [r4, #28]
    6fc8:	7812      	ldrb	r2, [r2, #0]
    6fca:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    6fce:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6fd2:	4011      	ands	r1, r2
    6fd4:	7001      	strb	r1, [r0, #0]
    6fd6:	2201      	movs	r2, #1
    6fd8:	4620      	mov	r0, r4
    6fda:	69e1      	ldr	r1, [r4, #28]
    6fdc:	f000 f892 	bl	7104 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    6fe0:	2300      	movs	r3, #0
    6fe2:	f89d 2000 	ldrb.w	r2, [sp]
    6fe6:	4620      	mov	r0, r4
    6fe8:	69e1      	ldr	r1, [r4, #28]
    6fea:	f7ff ff51 	bl	6e90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    6fee:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    6ff2:	f002 fec1 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6ff6:	f887 9000 	strb.w	r9, [r7]
    6ffa:	2105      	movs	r1, #5
    6ffc:	69e0      	ldr	r0, [r4, #28]
    6ffe:	f000 fa1d 	bl	743c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    7002:	6868      	ldr	r0, [r5, #4]
    7004:	69e1      	ldr	r1, [r4, #28]
    7006:	f8d0 2003 	ldr.w	r2, [r0, #3]
    700a:	f841 2f03 	str.w	r2, [r1, #3]!
    700e:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7012:	808a      	strh	r2, [r1, #4]
    7014:	7800      	ldrb	r0, [r0, #0]
    7016:	f3c0 1080 	ubfx	r0, r0, #6, #1
    701a:	e000      	b.n	701e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d2>
    701c:	e002      	b.n	7024 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    701e:	69e1      	ldr	r1, [r4, #28]
    7020:	7088      	strb	r0, [r1, #2]
    7022:	e000      	b.n	7026 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5da>
    7024:	2600      	movs	r6, #0
    7026:	4630      	mov	r0, r6
    7028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    702c:	200000f0 	.word	0x200000f0
    7030:	20000f54 	.word	0x20000f54
    7034:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7036:	4604      	mov	r4, r0
    7038:	20ff      	movs	r0, #255	; 0xff
    703a:	f88d 0000 	strb.w	r0, [sp]
    703e:	2501      	movs	r5, #1
    7040:	466a      	mov	r2, sp
    7042:	2103      	movs	r1, #3
    7044:	4620      	mov	r0, r4
    7046:	f7ff fe83 	bl	6d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    704a:	b328      	cbz	r0, 7098 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    704c:	7b20      	ldrb	r0, [r4, #12]
    704e:	b168      	cbz	r0, 706c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7050:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    7054:	f88d 0004 	strb.w	r0, [sp, #4]
    7058:	9801      	ldr	r0, [sp, #4]
    705a:	9001      	str	r0, [sp, #4]
    705c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7060:	b920      	cbnz	r0, 706c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7062:	f89d 1000 	ldrb.w	r1, [sp]
    7066:	4620      	mov	r0, r4
    7068:	f7ff fe32 	bl	6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    706c:	4e0c      	ldr	r6, [pc, #48]	; (70a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    706e:	2100      	movs	r1, #0
    7070:	6870      	ldr	r0, [r6, #4]
    7072:	8001      	strh	r1, [r0, #0]
    7074:	2104      	movs	r1, #4
    7076:	f006 fcab 	bl	d9d0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    707a:	4620      	mov	r0, r4
    707c:	f000 f88a 	bl	7194 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    7080:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    7082:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7084:	6870      	ldr	r0, [r6, #4]
    7086:	f006 fcda 	bl	da3e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    708a:	4906      	ldr	r1, [pc, #24]	; (70a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    708c:	2005      	movs	r0, #5
    708e:	7008      	strb	r0, [r1, #0]
    7090:	6870      	ldr	r0, [r6, #4]
    7092:	f003 ff37 	bl	af04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7096:	e000      	b.n	709a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    7098:	2500      	movs	r5, #0
    709a:	4628      	mov	r0, r5
    709c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    709e:	0000      	.short	0x0000
    70a0:	200000f0 	.word	0x200000f0
    70a4:	20000f54 	.word	0x20000f54
    70a8:	b570      	push	{r4, r5, r6, lr}
    70aa:	4604      	mov	r4, r0
    70ac:	460e      	mov	r6, r1
    70ae:	7e40      	ldrb	r0, [r0, #25]
    70b0:	f7fe fba4 	bl	57fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    70b4:	0005      	movs	r5, r0
    70b6:	d019      	beq.n	70ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    70b8:	2110      	movs	r1, #16
    70ba:	f006 faf6 	bl	d6aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    70be:	2800      	cmp	r0, #0
    70c0:	d114      	bne.n	70ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    70c2:	2001      	movs	r0, #1
    70c4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    70c8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    70cc:	4632      	mov	r2, r6
    70ce:	460c      	mov	r4, r1
    70d0:	4628      	mov	r0, r5
    70d2:	f006 f8a2 	bl	d21a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    70d6:	4621      	mov	r1, r4
    70d8:	4c05      	ldr	r4, [pc, #20]	; (70f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    70da:	6860      	ldr	r0, [r4, #4]
    70dc:	f006 fc93 	bl	da06 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    70e0:	6860      	ldr	r0, [r4, #4]
    70e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70e6:	2101      	movs	r1, #1
    70e8:	f006 bc93 	b.w	da12 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    70ec:	bd70      	pop	{r4, r5, r6, pc}
    70ee:	0000      	.short	0x0000
    70f0:	200000f0 	.word	0x200000f0
    70f4:	4802      	ldr	r0, [pc, #8]	; (7100 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    70f6:	2101      	movs	r1, #1
    70f8:	6800      	ldr	r0, [r0, #0]
    70fa:	f7ff bb27 	b.w	674c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    70fe:	0000      	.short	0x0000
    7100:	200000f0 	.word	0x200000f0
    7104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7108:	4e21      	ldr	r6, [pc, #132]	; (7190 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>)
    710a:	4680      	mov	r8, r0
    710c:	460c      	mov	r4, r1
    710e:	6870      	ldr	r0, [r6, #4]
    7110:	4615      	mov	r5, r2
    7112:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7116:	6121      	str	r1, [r4, #16]
    7118:	8881      	ldrh	r1, [r0, #4]
    711a:	8321      	strh	r1, [r4, #24]
    711c:	7981      	ldrb	r1, [r0, #6]
    711e:	76a1      	strb	r1, [r4, #26]
    7120:	8940      	ldrh	r0, [r0, #10]
    7122:	f006 f932 	bl	d38a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7126:	4607      	mov	r7, r0
    7128:	60e0      	str	r0, [r4, #12]
    712a:	6870      	ldr	r0, [r6, #4]
    712c:	4639      	mov	r1, r7
    712e:	7d80      	ldrb	r0, [r0, #22]
    7130:	f006 fab6 	bl	d6a0 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7134:	83a0      	strh	r0, [r4, #28]
    7136:	6870      	ldr	r0, [r6, #4]
    7138:	4639      	mov	r1, r7
    713a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    713e:	f006 faab 	bl	d698 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7142:	6220      	str	r0, [r4, #32]
    7144:	6870      	ldr	r0, [r6, #4]
    7146:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    714a:	82a1      	strh	r1, [r4, #20]
    714c:	8841      	ldrh	r1, [r0, #2]
    714e:	82e1      	strh	r1, [r4, #22]
    7150:	6841      	ldr	r1, [r0, #4]
    7152:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    7156:	7a01      	ldrb	r1, [r0, #8]
    7158:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    715c:	7a41      	ldrb	r1, [r0, #9]
    715e:	f001 011f 	and.w	r1, r1, #31
    7162:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    7166:	7a40      	ldrb	r0, [r0, #9]
    7168:	0940      	lsrs	r0, r0, #5
    716a:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    716e:	f104 0062 	add.w	r0, r4, #98	; 0x62
    7172:	7205      	strb	r5, [r0, #8]
    7174:	7245      	strb	r5, [r0, #9]
    7176:	2101      	movs	r1, #1
    7178:	7281      	strb	r1, [r0, #10]
    717a:	2100      	movs	r1, #0
    717c:	3836      	subs	r0, #54	; 0x36
    717e:	f006 fd9d 	bl	dcbc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7182:	f898 000e 	ldrb.w	r0, [r8, #14]
    7186:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    718e:	0000      	.short	0x0000
    7190:	200000f0 	.word	0x200000f0
    7194:	b570      	push	{r4, r5, r6, lr}
    7196:	4d07      	ldr	r5, [pc, #28]	; (71b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
    7198:	4604      	mov	r4, r0
    719a:	f100 0149 	add.w	r1, r0, #73	; 0x49
    719e:	6868      	ldr	r0, [r5, #4]
    71a0:	f006 fc3e 	bl	da20 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    71a4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    71a8:	6868      	ldr	r0, [r5, #4]
    71aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71ae:	f006 bc3d 	b.w	da2c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    71b2:	0000      	.short	0x0000
    71b4:	200000f0 	.word	0x200000f0
    71b8:	00555555 	.word	0x00555555
    71bc:	000069d5 	.word	0x000069d5
    71c0:	00006861 	.word	0x00006861
    71c4:	00006951 	.word	0x00006951
    71c8:	00000000 	.word	0x00000000
    71cc:	00006929 	.word	0x00006929
    71d0:	00006981 	.word	0x00006981
    71d4:	0000dfc3 	.word	0x0000dfc3
    71d8:	0000dfc9 	.word	0x0000dfc9
    71dc:	00006bcd 	.word	0x00006bcd
    71e0:	00006bf1 	.word	0x00006bf1
    71e4:	000070f5 	.word	0x000070f5
    71e8:	000071d8 	.word	0x000071d8
    71ec:	000071d0 	.word	0x000071d0
    71f0:	000071cc 	.word	0x000071cc

000071f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    71f4:	b510      	push	{r4, lr}
    71f6:	1e42      	subs	r2, r0, #1
    71f8:	2a02      	cmp	r2, #2
    71fa:	d901      	bls.n	7200 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    71fc:	21ca      	movs	r1, #202	; 0xca
    71fe:	e009      	b.n	7214 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7200:	1e40      	subs	r0, r0, #1
    7202:	2910      	cmp	r1, #16
    7204:	d009      	beq.n	721a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7206:	2912      	cmp	r1, #18
    7208:	d00c      	beq.n	7224 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    720a:	2913      	cmp	r1, #19
    720c:	d00a      	beq.n	7224 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    720e:	2915      	cmp	r1, #21
    7210:	d005      	beq.n	721e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7212:	21d8      	movs	r1, #216	; 0xd8
    7214:	202f      	movs	r0, #47	; 0x2f
    7216:	f7fc fde5 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    721a:	4905      	ldr	r1, [pc, #20]	; (7230 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    721c:	e004      	b.n	7228 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    721e:	4904      	ldr	r1, [pc, #16]	; (7230 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7220:	1d89      	adds	r1, r1, #6
    7222:	e001      	b.n	7228 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7224:	4902      	ldr	r1, [pc, #8]	; (7230 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7226:	1f89      	subs	r1, r1, #6
    7228:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    722c:	bd10      	pop	{r4, pc}
    722e:	0000      	.short	0x0000
    7230:	0000e216 	.word	0x0000e216

00007234 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7234:	1e42      	subs	r2, r0, #1
    7236:	b510      	push	{r4, lr}
    7238:	b2d2      	uxtb	r2, r2
    723a:	2a01      	cmp	r2, #1
    723c:	d903      	bls.n	7246 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    723e:	291d      	cmp	r1, #29
    7240:	d001      	beq.n	7246 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7242:	21ee      	movs	r1, #238	; 0xee
    7244:	e00d      	b.n	7262 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7246:	2913      	cmp	r1, #19
    7248:	d013      	beq.n	7272 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    724a:	dc04      	bgt.n	7256 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    724c:	2910      	cmp	r1, #16
    724e:	d00b      	beq.n	7268 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7250:	2912      	cmp	r1, #18
    7252:	d104      	bne.n	725e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7254:	e00d      	b.n	7272 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7256:	2915      	cmp	r1, #21
    7258:	d008      	beq.n	726c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    725a:	291d      	cmp	r1, #29
    725c:	d00e      	beq.n	727c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    725e:	f44f 7181 	mov.w	r1, #258	; 0x102
    7262:	202f      	movs	r0, #47	; 0x2f
    7264:	f7fc fdbe 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7268:	4807      	ldr	r0, [pc, #28]	; (7288 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    726a:	e004      	b.n	7276 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    726c:	4806      	ldr	r0, [pc, #24]	; (7288 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    726e:	3008      	adds	r0, #8
    7270:	e001      	b.n	7276 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7272:	4805      	ldr	r0, [pc, #20]	; (7288 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7274:	1d00      	adds	r0, r0, #4
    7276:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    727a:	bd10      	pop	{r4, pc}
    727c:	f240 315a 	movw	r1, #858	; 0x35a
    7280:	fb10 f001 	smulbb	r0, r0, r1
    7284:	bd10      	pop	{r4, pc}
    7286:	0000      	.short	0x0000
    7288:	0000e204 	.word	0x0000e204

0000728c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7290:	4604      	mov	r4, r0
    7292:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    7296:	4615      	mov	r5, r2
    7298:	460f      	mov	r7, r1
    729a:	2800      	cmp	r0, #0
    729c:	d15b      	bne.n	7356 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xca>
    729e:	4621      	mov	r1, r4
    72a0:	4843      	ldr	r0, [pc, #268]	; (73b0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x124>)
    72a2:	f7fb f8ad 	bl	2400 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    72a6:	4606      	mov	r6, r0
    72a8:	2820      	cmp	r0, #32
    72aa:	d054      	beq.n	7356 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xca>
    72ac:	2234      	movs	r2, #52	; 0x34
    72ae:	2100      	movs	r1, #0
    72b0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    72b4:	f004 fe7f 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    72b8:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    72bc:	2601      	movs	r6, #1
    72be:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    72c2:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    72c6:	b15f      	cbz	r7, 72e0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    72c8:	2101      	movs	r1, #1
    72ca:	f507 7092 	add.w	r0, r7, #292	; 0x124
    72ce:	f7fc fe31 	bl	3f34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    72d2:	f897 0124 	ldrb.w	r0, [r7, #292]	; 0x124
    72d6:	f000 0007 	and.w	r0, r0, #7
    72da:	1c40      	adds	r0, r0, #1
    72dc:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    72e0:	4620      	mov	r0, r4
    72e2:	f007 f978 	bl	e5d6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    72e6:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    72ea:	2003      	movs	r0, #3
    72ec:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    72f0:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    72f4:	2700      	movs	r7, #0
    72f6:	f804 7fb8 	strb.w	r7, [r4, #184]!
    72fa:	f7fa faed 	bl	18d8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    72fe:	8921      	ldrh	r1, [r4, #8]
    7300:	3cb8      	subs	r4, #184	; 0xb8
    7302:	4288      	cmp	r0, r1
    7304:	d800      	bhi.n	7308 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    7306:	4608      	mov	r0, r1
    7308:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    730c:	fa1f f880 	uxth.w	r8, r0
    7310:	4620      	mov	r0, r4
    7312:	f006 fe03 	bl	df1c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7316:	b308      	cbz	r0, 735c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    7318:	f008 fb7b 	bl	fa12 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    731c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7320:	b281      	uxth	r1, r0
    7322:	4628      	mov	r0, r5
    7324:	f004 fc8c 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7328:	4428      	add	r0, r5
    732a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    732e:	34a4      	adds	r4, #164	; 0xa4
    7330:	f004 fc52 	bl	bbd8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7334:	4641      	mov	r1, r8
    7336:	f7fa f95f 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    733a:	6220      	str	r0, [r4, #32]
    733c:	f804 7c03 	strb.w	r7, [r4, #-3]
    7340:	7126      	strb	r6, [r4, #4]
    7342:	2001      	movs	r0, #1
    7344:	f006 ff57 	bl	e1f6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7348:	f500 7084 	add.w	r0, r0, #264	; 0x108
    734c:	1a28      	subs	r0, r5, r0
    734e:	62a7      	str	r7, [r4, #40]	; 0x28
    7350:	60a0      	str	r0, [r4, #8]
    7352:	3ca4      	subs	r4, #164	; 0xa4
    7354:	e017      	b.n	7386 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfa>
    7356:	200c      	movs	r0, #12
    7358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    735c:	4620      	mov	r0, r4
    735e:	f007 f88d 	bl	e47c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    7362:	f844 0fbc 	str.w	r0, [r4, #188]!
    7366:	f804 6c1b 	strb.w	r6, [r4, #-27]
    736a:	f004 fc35 	bl	bbd8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    736e:	4606      	mov	r6, r0
    7370:	2000      	movs	r0, #0
    7372:	f007 f9dc 	bl	e72e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x434>
    7376:	eb00 0108 	add.w	r1, r0, r8
    737a:	4630      	mov	r0, r6
    737c:	f7fa f93c 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7380:	6125      	str	r5, [r4, #16]
    7382:	60a0      	str	r0, [r4, #8]
    7384:	3cbc      	subs	r4, #188	; 0xbc
    7386:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    738a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    738e:	f007 f920 	bl	e5d2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7392:	b138      	cbz	r0, 73a4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x118>
    7394:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    7398:	2100      	movs	r1, #0
    739a:	4620      	mov	r0, r4
    739c:	f006 fde0 	bl	df60 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    73a0:	2000      	movs	r0, #0
    73a2:	e7d9      	b.n	7358 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xcc>
    73a4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    73a8:	2030      	movs	r0, #48	; 0x30
    73aa:	f7fc fd1b 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73ae:	0000      	.short	0x0000
    73b0:	00007aad 	.word	0x00007aad

000073b4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    73b4:	4803      	ldr	r0, [pc, #12]	; (73c4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x10>)
    73b6:	2100      	movs	r1, #0
    73b8:	7001      	strb	r1, [r0, #0]
    73ba:	2201      	movs	r2, #1
    73bc:	7082      	strb	r2, [r0, #2]
    73be:	7041      	strb	r1, [r0, #1]
    73c0:	f006 bf84 	b.w	e2cc <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    73c4:	20000100 	.word	0x20000100

000073c8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    73c8:	4901      	ldr	r1, [pc, #4]	; (73d0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    73ca:	7008      	strb	r0, [r1, #0]
    73cc:	4770      	bx	lr
    73ce:	0000      	.short	0x0000
    73d0:	20000100 	.word	0x20000100

000073d4 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    73d4:	4905      	ldr	r1, [pc, #20]	; (73ec <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    73d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    73da:	fbb1 f1f2 	udiv	r1, r1, r2
    73de:	b510      	push	{r4, lr}
    73e0:	f501 7123 	add.w	r1, r1, #652	; 0x28c
    73e4:	f006 fc83 	bl	dcee <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    73e8:	b280      	uxth	r0, r0
    73ea:	bd10      	pop	{r4, pc}
    73ec:	0001527d 	.word	0x0001527d

000073f0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    73f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73f4:	4c10      	ldr	r4, [pc, #64]	; (7438 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    73f6:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    73fa:	f003 fc8d 	bl	ad18 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    73fe:	4606      	mov	r6, r0
    7400:	7820      	ldrb	r0, [r4, #0]
    7402:	b128      	cbz	r0, 7410 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7404:	4632      	mov	r2, r6
    7406:	4639      	mov	r1, r7
    7408:	4628      	mov	r0, r5
    740a:	f005 ffc8 	bl	d39e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    740e:	4605      	mov	r5, r0
    7410:	6860      	ldr	r0, [r4, #4]
    7412:	4285      	cmp	r5, r0
    7414:	d005      	beq.n	7422 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7416:	68e1      	ldr	r1, [r4, #12]
    7418:	1a28      	subs	r0, r5, r0
    741a:	4408      	add	r0, r1
    741c:	60e0      	str	r0, [r4, #12]
    741e:	f7fb f8f9 	bl	2614 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7422:	6065      	str	r5, [r4, #4]
    7424:	42ae      	cmp	r6, r5
    7426:	d801      	bhi.n	742c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7428:	7860      	ldrb	r0, [r4, #1]
    742a:	b110      	cbz	r0, 7432 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    742c:	2000      	movs	r0, #0
    742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7432:	2001      	movs	r0, #1
    7434:	e7fb      	b.n	742e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7436:	0000      	.short	0x0000
    7438:	20000100 	.word	0x20000100

0000743c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    743c:	b570      	push	{r4, r5, r6, lr}
    743e:	4c22      	ldr	r4, [pc, #136]	; (74c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    7440:	4605      	mov	r5, r0
    7442:	2906      	cmp	r1, #6
    7444:	d23c      	bcs.n	74c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    7446:	e8df f001 	tbb	[pc, r1]
    744a:	0b05      	.short	0x0b05
    744c:	250f0e03 	.word	0x250f0e03
    7450:	2100      	movs	r1, #0
    7452:	e000      	b.n	7456 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    7454:	2101      	movs	r1, #1
    7456:	4628      	mov	r0, r5
    7458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    745c:	f000 b8ec 	b.w	7638 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1fc>
    7460:	2003      	movs	r0, #3
    7462:	f885 0134 	strb.w	r0, [r5, #308]	; 0x134
    7466:	bd70      	pop	{r4, r5, r6, pc}
    7468:	f003 fc8a 	bl	ad80 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    746c:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
    7470:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    7474:	f008 fb66 	bl	fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7478:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
    747c:	1a08      	subs	r0, r1, r0
    747e:	6861      	ldr	r1, [r4, #4]
    7480:	4401      	add	r1, r0
    7482:	6061      	str	r1, [r4, #4]
    7484:	68a1      	ldr	r1, [r4, #8]
    7486:	4408      	add	r0, r1
    7488:	60a0      	str	r0, [r4, #8]
    748a:	4628      	mov	r0, r5
    748c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7490:	f007 b832 	b.w	e4f8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1fe>
    7494:	f003 fc40 	bl	ad18 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7498:	4601      	mov	r1, r0
    749a:	2200      	movs	r2, #0
    749c:	69a0      	ldr	r0, [r4, #24]
    749e:	f007 f8fc 	bl	e69a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3a0>
    74a2:	69a0      	ldr	r0, [r4, #24]
    74a4:	4909      	ldr	r1, [pc, #36]	; (74cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    74a6:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    74aa:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
    74ae:	f7fa fe69 	bl	2184 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    74b2:	2800      	cmp	r0, #0
    74b4:	d1d7      	bne.n	7466 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    74b6:	f240 7161 	movw	r1, #1889	; 0x761
    74ba:	2030      	movs	r0, #48	; 0x30
    74bc:	f7fc fc92 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74c0:	f44f 61ef 	mov.w	r1, #1912	; 0x778
    74c4:	e7f9      	b.n	74ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    74c6:	0000      	.short	0x0000
    74c8:	20000100 	.word	0x20000100
    74cc:	0000e759 	.word	0x0000e759
    74d0:	b510      	push	{r4, lr}
    74d2:	280c      	cmp	r0, #12
    74d4:	d304      	bcc.n	74e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    74d6:	f240 3103 	movw	r1, #771	; 0x303
    74da:	2006      	movs	r0, #6
    74dc:	f7fc fc82 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74e0:	4901      	ldr	r1, [pc, #4]	; (74e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    74e2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    74e6:	bd10      	pop	{r4, pc}
    74e8:	0000e952 	.word	0x0000e952
    74ec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    74ee:	4c18      	ldr	r4, [pc, #96]	; (7550 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    74f0:	2001      	movs	r0, #1
    74f2:	7060      	strb	r0, [r4, #1]
    74f4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    74f8:	e00b      	b.n	7512 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    74fa:	2100      	movs	r1, #0
    74fc:	f005 fcf5 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7500:	0006      	movs	r6, r0
    7502:	d010      	beq.n	7526 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    7504:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    7508:	f7fa fe6e 	bl	21e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    750c:	4630      	mov	r0, r6
    750e:	f007 f8b7 	bl	e680 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    7512:	4669      	mov	r1, sp
    7514:	2000      	movs	r0, #0
    7516:	f005 fcf2 	bl	cefe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    751a:	b180      	cbz	r0, 753e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    751c:	f44f 7187 	mov.w	r1, #270	; 0x10e
    7520:	2030      	movs	r0, #48	; 0x30
    7522:	f7fc fc5f 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7526:	f44f 7197 	mov.w	r1, #302	; 0x12e
    752a:	e7f9      	b.n	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    752c:	9802      	ldr	r0, [sp, #8]
    752e:	b130      	cbz	r0, 753e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7530:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    7534:	b119      	cbz	r1, 753e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7536:	8800      	ldrh	r0, [r0, #0]
    7538:	42a8      	cmp	r0, r5
    753a:	d1de      	bne.n	74fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    753c:	e004      	b.n	7548 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    753e:	4668      	mov	r0, sp
    7540:	f7fc fe96 	bl	4270 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7544:	2800      	cmp	r0, #0
    7546:	d0f1      	beq.n	752c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    7548:	2000      	movs	r0, #0
    754a:	7060      	strb	r0, [r4, #1]
    754c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    754e:	0000      	.short	0x0000
    7550:	20000100 	.word	0x20000100
    7554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7558:	4604      	mov	r4, r0
    755a:	4836      	ldr	r0, [pc, #216]	; (7634 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f8>)
    755c:	461e      	mov	r6, r3
    755e:	4690      	mov	r8, r2
    7560:	7880      	ldrb	r0, [r0, #2]
    7562:	4689      	mov	r9, r1
    7564:	2500      	movs	r5, #0
    7566:	b368      	cbz	r0, 75c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7568:	f7fc f8d4 	bl	3714 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    756c:	b350      	cbz	r0, 75c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    756e:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    7572:	2802      	cmp	r0, #2
    7574:	d326      	bcc.n	75c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7576:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    757a:	2802      	cmp	r0, #2
    757c:	d022      	beq.n	75c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    757e:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    7582:	b9f8      	cbnz	r0, 75c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7584:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    7588:	f7ff ffa2 	bl	74d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    758c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7590:	b281      	uxth	r1, r0
    7592:	8031      	strh	r1, [r6, #0]
    7594:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7598:	2700      	movs	r7, #0
    759a:	2801      	cmp	r0, #1
    759c:	d015      	beq.n	75ca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18e>
    759e:	68e0      	ldr	r0, [r4, #12]
    75a0:	f004 fb4e 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    75a4:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    75a8:	b280      	uxth	r0, r0
    75aa:	4442      	add	r2, r8
    75ac:	eba2 0109 	sub.w	r1, r2, r9
    75b0:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    75b4:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    75b8:	1a82      	subs	r2, r0, r2
    75ba:	fb01 7502 	mla	r5, r1, r2, r7
    75be:	2001      	movs	r0, #1
    75c0:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    75c4:	4628      	mov	r0, r5
    75c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75ca:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    75ce:	2803      	cmp	r0, #3
    75d0:	d02c      	beq.n	762c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f0>
    75d2:	2101      	movs	r1, #1
    75d4:	2000      	movs	r0, #0
    75d6:	f005 ff9c 	bl	d512 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    75da:	6a21      	ldr	r1, [r4, #32]
    75dc:	1847      	adds	r7, r0, r1
    75de:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    75e2:	8831      	ldrh	r1, [r6, #0]
    75e4:	34d0      	adds	r4, #208	; 0xd0
    75e6:	f004 fb2b 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    75ea:	6da2      	ldr	r2, [r4, #88]	; 0x58
    75ec:	6e21      	ldr	r1, [r4, #96]	; 0x60
    75ee:	1a82      	subs	r2, r0, r2
    75f0:	fb01 5502 	mla	r5, r1, r2, r5
    75f4:	65a0      	str	r0, [r4, #88]	; 0x58
    75f6:	8831      	ldrh	r1, [r6, #0]
    75f8:	4638      	mov	r0, r7
    75fa:	f004 fb21 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    75fe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7600:	66a0      	str	r0, [r4, #104]	; 0x68
    7602:	1a41      	subs	r1, r0, r1
    7604:	440d      	add	r5, r1
    7606:	8831      	ldrh	r1, [r6, #0]
    7608:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    760c:	f004 fb18 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7610:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    7612:	4442      	add	r2, r8
    7614:	eba2 0109 	sub.w	r1, r2, r9
    7618:	6e22      	ldr	r2, [r4, #96]	; 0x60
    761a:	1a89      	subs	r1, r1, r2
    761c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    761e:	1e49      	subs	r1, r1, #1
    7620:	1a82      	subs	r2, r0, r2
    7622:	fb01 5502 	mla	r5, r1, r2, r5
    7626:	66e0      	str	r0, [r4, #108]	; 0x6c
    7628:	3cd0      	subs	r4, #208	; 0xd0
    762a:	e7c8      	b.n	75be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x182>
    762c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7630:	e7d3      	b.n	75da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19e>
    7632:	0000      	.short	0x0000
    7634:	20000100 	.word	0x20000100
    7638:	b538      	push	{r3, r4, r5, lr}
    763a:	2500      	movs	r5, #0
    763c:	4604      	mov	r4, r0
    763e:	2901      	cmp	r1, #1
    7640:	d102      	bne.n	7648 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x20c>
    7642:	4811      	ldr	r0, [pc, #68]	; (7688 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24c>)
    7644:	7840      	ldrb	r0, [r0, #1]
    7646:	b178      	cbz	r0, 7668 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22c>
    7648:	2004      	movs	r0, #4
    764a:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    764e:	bf00      	nop
    7650:	f006 ff4b 	bl	e4ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    7654:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    7658:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    765c:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    7660:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    7664:	77e5      	strb	r5, [r4, #31]
    7666:	bd38      	pop	{r3, r4, r5, pc}
    7668:	9500      	str	r5, [sp, #0]
    766a:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    766e:	2301      	movs	r3, #1
    7670:	2200      	movs	r2, #0
    7672:	4620      	mov	r0, r4
    7674:	f000 f80a 	bl	768c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    7678:	2800      	cmp	r0, #0
    767a:	d0e9      	beq.n	7650 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x214>
    767c:	f240 61d4 	movw	r1, #1748	; 0x6d4
    7680:	2030      	movs	r0, #48	; 0x30
    7682:	f7fc fbaf 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7686:	0000      	.short	0x0000
    7688:	20000100 	.word	0x20000100
    768c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7690:	4604      	mov	r4, r0
    7692:	b085      	sub	sp, #20
    7694:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    7698:	469a      	mov	sl, r3
    769a:	e9cd 3000 	strd	r3, r0, [sp]
    769e:	460f      	mov	r7, r1
    76a0:	f008 f9b7 	bl	fa12 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    76a4:	4605      	mov	r5, r0
    76a6:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    76aa:	f7ff ff11 	bl	74d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    76ae:	4428      	add	r0, r5
    76b0:	f8ad 0008 	strh.w	r0, [sp, #8]
    76b4:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    76b8:	280d      	cmp	r0, #13
    76ba:	d004      	beq.n	76c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x28a>
    76bc:	2000      	movs	r0, #0
    76be:	9003      	str	r0, [sp, #12]
    76c0:	9807      	ldr	r0, [sp, #28]
    76c2:	b110      	cbz	r0, 76ca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x28e>
    76c4:	e02e      	b.n	7724 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    76c6:	2001      	movs	r0, #1
    76c8:	e7f9      	b.n	76be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x282>
    76ca:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    76ce:	2803      	cmp	r0, #3
    76d0:	d128      	bne.n	7724 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    76d2:	9803      	ldr	r0, [sp, #12]
    76d4:	b330      	cbz	r0, 7724 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    76d6:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    76da:	42b8      	cmp	r0, r7
    76dc:	d122      	bne.n	7724 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    76de:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    76e2:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    76e6:	68e0      	ldr	r0, [r4, #12]
    76e8:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    76ec:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    76f0:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    76f4:	4408      	add	r0, r1
    76f6:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    76fa:	4620      	mov	r0, r4
    76fc:	f007 f93f 	bl	e97e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7700:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    7704:	6220      	str	r0, [r4, #32]
    7706:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    770a:	83a0      	strh	r0, [r4, #28]
    770c:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    7710:	60e0      	str	r0, [r4, #12]
    7712:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    7716:	82a0      	strh	r0, [r4, #20]
    7718:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    771c:	82e0      	strh	r0, [r4, #22]
    771e:	2002      	movs	r0, #2
    7720:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7724:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7728:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    772c:	1a38      	subs	r0, r7, r0
    772e:	fa0f f980 	sxth.w	r9, r0
    7732:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    7736:	1a38      	subs	r0, r7, r0
    7738:	fa0f f880 	sxth.w	r8, r0
    773c:	f1b8 0f00 	cmp.w	r8, #0
    7740:	da06      	bge.n	7750 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    7742:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    7746:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    774a:	2001      	movs	r0, #1
    774c:	46c8      	mov	r8, r9
    774e:	9000      	str	r0, [sp, #0]
    7750:	ab02      	add	r3, sp, #8
    7752:	464a      	mov	r2, r9
    7754:	4641      	mov	r1, r8
    7756:	4620      	mov	r0, r4
    7758:	f7ff fefc 	bl	7554 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    775c:	9004      	str	r0, [sp, #16]
    775e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7762:	f8df b344 	ldr.w	fp, [pc, #836]	; 7aa8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>
    7766:	b140      	cbz	r0, 777a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x33e>
    7768:	2801      	cmp	r0, #1
    776a:	d07d      	beq.n	7868 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x42c>
    776c:	2802      	cmp	r0, #2
    776e:	d052      	beq.n	7816 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3da>
    7770:	2803      	cmp	r0, #3
    7772:	d07a      	beq.n	786a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x42e>
    7774:	f240 5157 	movw	r1, #1367	; 0x557
    7778:	e192      	b.n	7aa0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    777a:	2101      	movs	r1, #1
    777c:	2000      	movs	r0, #0
    777e:	f005 fec8 	bl	d512 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7782:	4606      	mov	r6, r0
    7784:	6a20      	ldr	r0, [r4, #32]
    7786:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    778a:	4430      	add	r0, r6
    778c:	f004 fa58 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7790:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    7794:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7798:	68e0      	ldr	r0, [r4, #12]
    779a:	f004 fa51 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    779e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    77a2:	a901      	add	r1, sp, #4
    77a4:	4668      	mov	r0, sp
    77a6:	f003 fa1b 	bl	abe0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    77aa:	e9dd 1200 	ldrd	r1, r2, [sp]
    77ae:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    77b2:	f7fa ffe5 	bl	2780 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    77b6:	4681      	mov	r9, r0
    77b8:	4620      	mov	r0, r4
    77ba:	f006 fe88 	bl	e4ce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    77be:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    77c2:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    77c6:	f008 f9cb 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    77ca:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    77ce:	4401      	add	r1, r0
    77d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    77d4:	fbb1 f0f0 	udiv	r0, r1, r0
    77d8:	6a21      	ldr	r1, [r4, #32]
    77da:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    77de:	4431      	add	r1, r6
    77e0:	1a08      	subs	r0, r1, r0
    77e2:	1a81      	subs	r1, r0, r2
    77e4:	4441      	add	r1, r8
    77e6:	3920      	subs	r1, #32
    77e8:	eba1 0609 	sub.w	r6, r1, r9
    77ec:	0050      	lsls	r0, r2, #1
    77ee:	8ba1      	ldrh	r1, [r4, #28]
    77f0:	3060      	adds	r0, #96	; 0x60
    77f2:	4401      	add	r1, r0
    77f4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    77f8:	f006 fed9 	bl	e5ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    77fc:	3022      	adds	r0, #34	; 0x22
    77fe:	f8cb 0010 	str.w	r0, [fp, #16]
    7802:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    7806:	4659      	mov	r1, fp
    7808:	1a30      	subs	r0, r6, r0
    780a:	f5b0 7fd8 	cmp.w	r0, #432	; 0x1b0
    780e:	d259      	bcs.n	78c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x488>
    7810:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
    7814:	e144      	b.n	7aa0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    7816:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    781a:	6a20      	ldr	r0, [r4, #32]
    781c:	4408      	add	r0, r1
    781e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7822:	f004 fa0d 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7826:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    782a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    782e:	68e0      	ldr	r0, [r4, #12]
    7830:	f004 fa06 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7834:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    7838:	4620      	mov	r0, r4
    783a:	f006 fe48 	bl	e4ce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    783e:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    7842:	bb10      	cbnz	r0, 788a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x44e>
    7844:	f1ba 0f00 	cmp.w	sl, #0
    7848:	d01f      	beq.n	788a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x44e>
    784a:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    784e:	4640      	mov	r0, r8
    7850:	f008 f986 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7854:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7858:	4401      	add	r1, r0
    785a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    785e:	fbb1 f0f0 	udiv	r0, r1, r0
    7862:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    7866:	e001      	b.n	786c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    7868:	e02d      	b.n	78c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48a>
    786a:	e049      	b.n	7900 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4c4>
    786c:	4408      	add	r0, r1
    786e:	6a22      	ldr	r2, [r4, #32]
    7870:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    7874:	4411      	add	r1, r2
    7876:	1a0e      	subs	r6, r1, r0
    7878:	4640      	mov	r0, r8
    787a:	f008 f963 	bl	fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    787e:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    7882:	1a08      	subs	r0, r1, r0
    7884:	4406      	add	r6, r0
    7886:	3e20      	subs	r6, #32
    7888:	e006      	b.n	7898 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45c>
    788a:	6a21      	ldr	r1, [r4, #32]
    788c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7890:	4408      	add	r0, r1
    7892:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    7896:	1a46      	subs	r6, r0, r1
    7898:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    789c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    78a0:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    78a4:	fb01 0002 	mla	r0, r1, r2, r0
    78a8:	0040      	lsls	r0, r0, #1
    78aa:	8ba1      	ldrh	r1, [r4, #28]
    78ac:	3060      	adds	r0, #96	; 0x60
    78ae:	4401      	add	r1, r0
    78b0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    78b4:	f006 fe7b 	bl	e5ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    78b8:	f8cb 0010 	str.w	r0, [fp, #16]
    78bc:	2001      	movs	r0, #1
    78be:	4659      	mov	r1, fp
    78c0:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    78c4:	e062      	b.n	798c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x550>
    78c6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    78ca:	68e0      	ldr	r0, [r4, #12]
    78cc:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    78d0:	1a46      	subs	r6, r0, r1
    78d2:	eb02 0009 	add.w	r0, r2, r9
    78d6:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    78da:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    78de:	1a80      	subs	r0, r0, r2
    78e0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    78e4:	1e40      	subs	r0, r0, #1
    78e6:	fb0c 3202 	mla	r2, ip, r2, r3
    78ea:	fb00 2001 	mla	r0, r0, r1, r2
    78ee:	0040      	lsls	r0, r0, #1
    78f0:	8ba1      	ldrh	r1, [r4, #28]
    78f2:	3060      	adds	r0, #96	; 0x60
    78f4:	4401      	add	r1, r0
    78f6:	fb06 f608 	mul.w	r6, r6, r8
    78fa:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    78fe:	e040      	b.n	7982 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x546>
    7900:	68e0      	ldr	r0, [r4, #12]
    7902:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7906:	fb00 f008 	mul.w	r0, r0, r8
    790a:	fb08 0611 	mls	r6, r8, r1, r0
    790e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    7912:	2824      	cmp	r0, #36	; 0x24
    7914:	d003      	beq.n	791e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4e2>
    7916:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    791a:	2824      	cmp	r0, #36	; 0x24
    791c:	d109      	bne.n	7932 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    791e:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    7922:	1a38      	subs	r0, r7, r0
    7924:	b200      	sxth	r0, r0
    7926:	2800      	cmp	r0, #0
    7928:	db03      	blt.n	7932 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    792a:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    792e:	b100      	cbz	r0, 7932 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    7930:	9001      	str	r0, [sp, #4]
    7932:	9800      	ldr	r0, [sp, #0]
    7934:	b1d8      	cbz	r0, 796e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x532>
    7936:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    793a:	b9c0      	cbnz	r0, 796e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x532>
    793c:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    7940:	2800      	cmp	r0, #0
    7942:	d07c      	beq.n	7a3e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x602>
    7944:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7948:	f008 f90a 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    794c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7950:	4401      	add	r1, r0
    7952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7956:	fbb1 f0f0 	udiv	r0, r1, r0
    795a:	1a36      	subs	r6, r6, r0
    795c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7960:	f008 f8f0 	bl	fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7964:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    7968:	1a08      	subs	r0, r1, r0
    796a:	4406      	add	r6, r0
    796c:	3e20      	subs	r6, #32
    796e:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    7972:	eb01 0009 	add.w	r0, r1, r9
    7976:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    797a:	4348      	muls	r0, r1
    797c:	0041      	lsls	r1, r0, #1
    797e:	3160      	adds	r1, #96	; 0x60
    7980:	9801      	ldr	r0, [sp, #4]
    7982:	f006 fe14 	bl	e5ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    7986:	4659      	mov	r1, fp
    7988:	f8cb 0010 	str.w	r0, [fp, #16]
    798c:	9804      	ldr	r0, [sp, #16]
    798e:	6909      	ldr	r1, [r1, #16]
    7990:	1a33      	subs	r3, r6, r0
    7992:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    7996:	68e0      	ldr	r0, [r4, #12]
    7998:	1b80      	subs	r0, r0, r6
    799a:	f2a0 203e 	subw	r0, r0, #574	; 0x23e
    799e:	f8cb 0014 	str.w	r0, [fp, #20]
    79a2:	4281      	cmp	r1, r0
    79a4:	d800      	bhi.n	79a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x56c>
    79a6:	4608      	mov	r0, r1
    79a8:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    79ac:	2000      	movs	r0, #0
    79ae:	7028      	strb	r0, [r5, #0]
    79b0:	2064      	movs	r0, #100	; 0x64
    79b2:	8128      	strh	r0, [r5, #8]
    79b4:	4619      	mov	r1, r3
    79b6:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    79ba:	f7f9 fe1d 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    79be:	60e8      	str	r0, [r5, #12]
    79c0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    79c4:	f006 f964 	bl	dc90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    79c8:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    79cc:	4408      	add	r0, r1
    79ce:	6068      	str	r0, [r5, #4]
    79d0:	68e8      	ldr	r0, [r5, #12]
    79d2:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    79d6:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    79da:	2001      	movs	r0, #1
    79dc:	72a8      	strb	r0, [r5, #10]
    79de:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    79e2:	1bc9      	subs	r1, r1, r7
    79e4:	b209      	sxth	r1, r1
    79e6:	2900      	cmp	r1, #0
    79e8:	dd01      	ble.n	79ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5b2>
    79ea:	2103      	movs	r1, #3
    79ec:	72a9      	strb	r1, [r5, #10]
    79ee:	9903      	ldr	r1, [sp, #12]
    79f0:	b331      	cbz	r1, 7a40 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x604>
    79f2:	f1ba 0f00 	cmp.w	sl, #0
    79f6:	d026      	beq.n	7a46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    79f8:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    79fc:	b392      	cbz	r2, 7a64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x628>
    79fe:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    7a02:	bf00      	nop
    7a04:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    7a08:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    7a0c:	1c49      	adds	r1, r1, #1
    7a0e:	434b      	muls	r3, r1
    7a10:	4293      	cmp	r3, r2
    7a12:	d218      	bcs.n	7a46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    7a14:	7aa9      	ldrb	r1, [r5, #10]
    7a16:	1e49      	subs	r1, r1, #1
    7a18:	2900      	cmp	r1, #0
    7a1a:	dd14      	ble.n	7a46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    7a1c:	72a8      	strb	r0, [r5, #10]
    7a1e:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    7a22:	2101      	movs	r1, #1
    7a24:	1c40      	adds	r0, r0, #1
    7a26:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    7a2a:	f504 7092 	add.w	r0, r4, #292	; 0x124
    7a2e:	f7fc fa65 	bl	3efc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    7a32:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
    7a36:	f000 0007 	and.w	r0, r0, #7
    7a3a:	1c40      	adds	r0, r0, #1
    7a3c:	e001      	b.n	7a42 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x606>
    7a3e:	e012      	b.n	7a66 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x62a>
    7a40:	e014      	b.n	7a6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    7a42:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    7a46:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    7a4a:	4629      	mov	r1, r5
    7a4c:	f006 fdc1 	bl	e5d2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7a50:	b320      	cbz	r0, 7a9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x660>
    7a52:	9807      	ldr	r0, [sp, #28]
    7a54:	f080 0001 	eor.w	r0, r0, #1
    7a58:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    7a5c:	2000      	movs	r0, #0
    7a5e:	b009      	add	sp, #36	; 0x24
    7a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a64:	e018      	b.n	7a98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x65c>
    7a66:	f240 5142 	movw	r1, #1346	; 0x542
    7a6a:	e019      	b.n	7aa0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    7a6c:	f1ba 0f00 	cmp.w	sl, #0
    7a70:	d1c2      	bne.n	79f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5bc>
    7a72:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7a76:	2800      	cmp	r0, #0
    7a78:	d0e5      	beq.n	7a46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    7a7a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7a7e:	68e0      	ldr	r0, [r4, #12]
    7a80:	1a41      	subs	r1, r0, r1
    7a82:	4628      	mov	r0, r5
    7a84:	f005 fd57 	bl	d536 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7a88:	0400      	lsls	r0, r0, #16
    7a8a:	0c00      	lsrs	r0, r0, #16
    7a8c:	d0db      	beq.n	7a46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    7a8e:	9912      	ldr	r1, [sp, #72]	; 0x48
    7a90:	b101      	cbz	r1, 7a94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x658>
    7a92:	8008      	strh	r0, [r1, #0]
    7a94:	2001      	movs	r0, #1
    7a96:	e7e2      	b.n	7a5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x622>
    7a98:	2100      	movs	r1, #0
    7a9a:	e7b3      	b.n	7a04 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5c8>
    7a9c:	f240 51a2 	movw	r1, #1442	; 0x5a2
    7aa0:	2030      	movs	r0, #48	; 0x30
    7aa2:	f7fc f99f 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aa6:	0000      	.short	0x0000
    7aa8:	20000100 	.word	0x20000100
    7aac:	b570      	push	{r4, r5, r6, lr}
    7aae:	b140      	cbz	r0, 7ac2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x686>
    7ab0:	2909      	cmp	r1, #9
    7ab2:	d24a      	bcs.n	7b4a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70e>
    7ab4:	e8df f001 	tbb	[pc, r1]
    7ab8:	3d3d1707 	.word	0x3d3d1707
    7abc:	412b4939 	.word	0x412b4939
    7ac0:	0045      	.short	0x0045
    7ac2:	21d3      	movs	r1, #211	; 0xd3
    7ac4:	e03e      	b.n	7b44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    7ac6:	4922      	ldr	r1, [pc, #136]	; (7b50 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x714>)
    7ac8:	4604      	mov	r4, r0
    7aca:	6188      	str	r0, [r1, #24]
    7acc:	f7fe fe0e 	bl	66ec <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    7ad0:	b110      	cbz	r0, 7ad8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x69c>
    7ad2:	f240 217f 	movw	r1, #639	; 0x27f
    7ad6:	e035      	b.n	7b44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    7ad8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    7adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ae0:	38f7      	subs	r0, #247	; 0xf7
    7ae2:	f7fa bd97 	b.w	2614 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7ae6:	4605      	mov	r5, r0
    7ae8:	f006 fa18 	bl	df1c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7aec:	b9a8      	cbnz	r0, 7b1a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6de>
    7aee:	4628      	mov	r0, r5
    7af0:	f006 fcc4 	bl	e47c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    7af4:	4604      	mov	r4, r0
    7af6:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    7afa:	42a0      	cmp	r0, r4
    7afc:	d20b      	bcs.n	7b16 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6da>
    7afe:	1a20      	subs	r0, r4, r0
    7b00:	2104      	movs	r1, #4
    7b02:	f7f9 fca7 	bl	1454 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    7b06:	b130      	cbz	r0, 7b16 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6da>
    7b08:	4628      	mov	r0, r5
    7b0a:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    7b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b12:	f006 b9d8 	b.w	dec6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    7b16:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    7b1a:	4628      	mov	r0, r5
    7b1c:	f7fe fe02 	bl	6724 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    7b20:	2800      	cmp	r0, #0
    7b22:	d014      	beq.n	7b4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x712>
    7b24:	f240 21b3 	movw	r1, #691	; 0x2b3
    7b28:	e00c      	b.n	7b44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    7b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b2e:	f003 badd 	b.w	b0ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b36:	f006 bc3d 	b.w	e3b4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b3e:	f006 bc94 	b.w	e46a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    7b42:	21f5      	movs	r1, #245	; 0xf5
    7b44:	2030      	movs	r0, #48	; 0x30
    7b46:	f7fc f94d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b4a:	21f9      	movs	r1, #249	; 0xf9
    7b4c:	e7fa      	b.n	7b44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    7b4e:	bd70      	pop	{r4, r5, r6, pc}
    7b50:	20000100 	.word	0x20000100
    7b54:	b570      	push	{r4, r5, r6, lr}
    7b56:	4604      	mov	r4, r0
    7b58:	f7f9 febe 	bl	18d8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7b5c:	2864      	cmp	r0, #100	; 0x64
    7b5e:	d901      	bls.n	7b64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x728>
    7b60:	4605      	mov	r5, r0
    7b62:	e000      	b.n	7b66 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x72a>
    7b64:	2564      	movs	r5, #100	; 0x64
    7b66:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7b6a:	2128      	movs	r1, #40	; 0x28
    7b6c:	f006 fc20 	bl	e3b0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7b70:	4428      	add	r0, r5
    7b72:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7b76:	f500 700e 	add.w	r0, r0, #568	; 0x238
    7b7a:	180e      	adds	r6, r1, r0
    7b7c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7b80:	2128      	movs	r1, #40	; 0x28
    7b82:	f006 fc15 	bl	e3b0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7b86:	f500 7227 	add.w	r2, r0, #668	; 0x29c
    7b8a:	4620      	mov	r0, r4
    7b8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7b8e:	f006 f81e 	bl	dbce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7b92:	4605      	mov	r5, r0
    7b94:	4632      	mov	r2, r6
    7b96:	4620      	mov	r0, r4
    7b98:	68e1      	ldr	r1, [r4, #12]
    7b9a:	f006 f818 	bl	dbce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7b9e:	4907      	ldr	r1, [pc, #28]	; (7bbc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x780>)
    7ba0:	4285      	cmp	r5, r0
    7ba2:	6088      	str	r0, [r1, #8]
    7ba4:	d200      	bcs.n	7ba8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x76c>
    7ba6:	4628      	mov	r0, r5
    7ba8:	6048      	str	r0, [r1, #4]
    7baa:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7bae:	f2a0 1065 	subw	r0, r0, #357	; 0x165
    7bb2:	60c8      	str	r0, [r1, #12]
    7bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bb8:	f7fa bd2c 	b.w	2614 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7bbc:	20000100 	.word	0x20000100

00007bc0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7bc0:	4806      	ldr	r0, [pc, #24]	; (7bdc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7bc2:	4905      	ldr	r1, [pc, #20]	; (7bd8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7bc4:	6501      	str	r1, [r0, #80]	; 0x50
    7bc6:	4906      	ldr	r1, [pc, #24]	; (7be0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7bc8:	6541      	str	r1, [r0, #84]	; 0x54
    7bca:	4807      	ldr	r0, [pc, #28]	; (7be8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7bcc:	4905      	ldr	r1, [pc, #20]	; (7be4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7bce:	6501      	str	r1, [r0, #80]	; 0x50
    7bd0:	4906      	ldr	r1, [pc, #24]	; (7bec <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7bd2:	6541      	str	r1, [r0, #84]	; 0x54
    7bd4:	4770      	bx	lr
    7bd6:	0000      	.short	0x0000
    7bd8:	00009121 	.word	0x00009121
    7bdc:	20000130 	.word	0x20000130
    7be0:	000091fd 	.word	0x000091fd
    7be4:	00009859 	.word	0x00009859
    7be8:	20000194 	.word	0x20000194
    7bec:	00009889 	.word	0x00009889

00007bf0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bf2:	460d      	mov	r5, r1
    7bf4:	4607      	mov	r7, r0
    7bf6:	2100      	movs	r1, #0
    7bf8:	f005 f977 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7bfc:	1e04      	subs	r4, r0, #0
    7bfe:	d04f      	beq.n	7ca0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7c00:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    7c04:	2800      	cmp	r0, #0
    7c06:	d04b      	beq.n	7ca0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7c08:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7c0c:	f88d 0000 	strb.w	r0, [sp]
    7c10:	9800      	ldr	r0, [sp, #0]
    7c12:	9000      	str	r0, [sp, #0]
    7c14:	f89d 0000 	ldrb.w	r0, [sp]
    7c18:	2600      	movs	r6, #0
    7c1a:	b1d8      	cbz	r0, 7c54 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7c1c:	706e      	strb	r6, [r5, #1]
    7c1e:	2007      	movs	r0, #7
    7c20:	7028      	strb	r0, [r5, #0]
    7c22:	e00b      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7c24:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    7c28:	84a6      	strh	r6, [r4, #36]	; 0x24
    7c2a:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    7c2e:	6068      	str	r0, [r5, #4]
    7c30:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    7c34:	60a8      	str	r0, [r5, #8]
    7c36:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    7c3a:	81a8      	strh	r0, [r5, #12]
    7c3c:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7c40:	f88d 0000 	strb.w	r0, [sp]
    7c44:	9800      	ldr	r0, [sp, #0]
    7c46:	9000      	str	r0, [sp, #0]
    7c48:	f89d 0000 	ldrb.w	r0, [sp]
    7c4c:	2800      	cmp	r0, #0
    7c4e:	d1e9      	bne.n	7c24 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7c50:	712e      	strb	r6, [r5, #4]
    7c52:	e10b      	b.n	7e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c54:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7c58:	b3a0      	cbz	r0, 7cc4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7c5a:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7c5e:	280b      	cmp	r0, #11
    7c60:	d016      	beq.n	7c90 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7c62:	280c      	cmp	r0, #12
    7c64:	d004      	beq.n	7c70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7c66:	f640 21e9 	movw	r1, #2793	; 0xae9
    7c6a:	2031      	movs	r0, #49	; 0x31
    7c6c:	f7fc f8ba 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c70:	8820      	ldrh	r0, [r4, #0]
    7c72:	f7fc fcdf 	bl	4634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7c76:	4607      	mov	r7, r0
    7c78:	f004 fffd 	bl	cc76 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7c7c:	b978      	cbnz	r0, 7c9e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7c7e:	706e      	strb	r6, [r5, #1]
    7c80:	200c      	movs	r0, #12
    7c82:	7028      	strb	r0, [r5, #0]
    7c84:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7c88:	7128      	strb	r0, [r5, #4]
    7c8a:	8820      	ldrh	r0, [r4, #0]
    7c8c:	80e8      	strh	r0, [r5, #6]
    7c8e:	e013      	b.n	7cb8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7c90:	8820      	ldrh	r0, [r4, #0]
    7c92:	f7fc fccf 	bl	4634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7c96:	4607      	mov	r7, r0
    7c98:	f004 ffed 	bl	cc76 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7c9c:	b108      	cbz	r0, 7ca2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7c9e:	2000      	movs	r0, #0
    7ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ca2:	706e      	strb	r6, [r5, #1]
    7ca4:	200b      	movs	r0, #11
    7ca6:	7028      	strb	r0, [r5, #0]
    7ca8:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7cac:	7128      	strb	r0, [r5, #4]
    7cae:	8820      	ldrh	r0, [r4, #0]
    7cb0:	80e8      	strh	r0, [r5, #6]
    7cb2:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    7cb6:	7228      	strb	r0, [r5, #8]
    7cb8:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    7cbc:	4638      	mov	r0, r7
    7cbe:	f004 fff5 	bl	ccac <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7cc2:	e0d3      	b.n	7e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7cc4:	e7ff      	b.n	7cc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7cc6:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7cca:	f88d 0000 	strb.w	r0, [sp]
    7cce:	9800      	ldr	r0, [sp, #0]
    7cd0:	9000      	str	r0, [sp, #0]
    7cd2:	f89d 0000 	ldrb.w	r0, [sp]
    7cd6:	b130      	cbz	r0, 7ce6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7cd8:	706e      	strb	r6, [r5, #1]
    7cda:	200e      	movs	r0, #14
    7cdc:	7028      	strb	r0, [r5, #0]
    7cde:	80af      	strh	r7, [r5, #4]
    7ce0:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7ce4:	e0c2      	b.n	7e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7ce6:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    7cea:	f88d 0000 	strb.w	r0, [sp]
    7cee:	9800      	ldr	r0, [sp, #0]
    7cf0:	9000      	str	r0, [sp, #0]
    7cf2:	f89d 0000 	ldrb.w	r0, [sp]
    7cf6:	b198      	cbz	r0, 7d20 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7cf8:	706e      	strb	r6, [r5, #1]
    7cfa:	2008      	movs	r0, #8
    7cfc:	7028      	strb	r0, [r5, #0]
    7cfe:	8820      	ldrh	r0, [r4, #0]
    7d00:	80a8      	strh	r0, [r5, #4]
    7d02:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    7d06:	f8c5 1006 	str.w	r1, [r5, #6]
    7d0a:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    7d0e:	f8c5 100a 	str.w	r1, [r5, #10]
    7d12:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    7d16:	81e8      	strh	r0, [r5, #14]
    7d18:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    7d1c:	7026      	strb	r6, [r4, #0]
    7d1e:	e0a5      	b.n	7e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d20:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7d24:	f88d 0000 	strb.w	r0, [sp]
    7d28:	9800      	ldr	r0, [sp, #0]
    7d2a:	9000      	str	r0, [sp, #0]
    7d2c:	f89d 0000 	ldrb.w	r0, [sp]
    7d30:	b1a0      	cbz	r0, 7d5c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7d32:	706e      	strb	r6, [r5, #1]
    7d34:	2016      	movs	r0, #22
    7d36:	7028      	strb	r0, [r5, #0]
    7d38:	e005      	b.n	7d46 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7d3a:	bf00      	nop
    7d3c:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7d40:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7d44:	6068      	str	r0, [r5, #4]
    7d46:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7d4a:	f88d 0000 	strb.w	r0, [sp]
    7d4e:	9800      	ldr	r0, [sp, #0]
    7d50:	9000      	str	r0, [sp, #0]
    7d52:	f89d 0000 	ldrb.w	r0, [sp]
    7d56:	2800      	cmp	r0, #0
    7d58:	d1f0      	bne.n	7d3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7d5a:	e087      	b.n	7e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d5c:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    7d60:	f88d 0000 	strb.w	r0, [sp]
    7d64:	9800      	ldr	r0, [sp, #0]
    7d66:	9000      	str	r0, [sp, #0]
    7d68:	f89d 0000 	ldrb.w	r0, [sp]
    7d6c:	b170      	cbz	r0, 7d8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7d6e:	706e      	strb	r6, [r5, #1]
    7d70:	2006      	movs	r0, #6
    7d72:	7028      	strb	r0, [r5, #0]
    7d74:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7d78:	6068      	str	r0, [r5, #4]
    7d7a:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    7d7e:	60a8      	str	r0, [r5, #8]
    7d80:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    7d84:	60e8      	str	r0, [r5, #12]
    7d86:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    7d8a:	e03a      	b.n	7e02 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7d8c:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7d90:	f88d 0000 	strb.w	r0, [sp]
    7d94:	9800      	ldr	r0, [sp, #0]
    7d96:	9000      	str	r0, [sp, #0]
    7d98:	f89d 0000 	ldrb.w	r0, [sp]
    7d9c:	b1d0      	cbz	r0, 7dd4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7d9e:	706e      	strb	r6, [r5, #1]
    7da0:	2012      	movs	r0, #18
    7da2:	7028      	strb	r0, [r5, #0]
    7da4:	e00b      	b.n	7dbe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7da6:	bf00      	nop
    7da8:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    7dac:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7db0:	6068      	str	r0, [r5, #4]
    7db2:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    7db6:	60a8      	str	r0, [r5, #8]
    7db8:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    7dbc:	60e8      	str	r0, [r5, #12]
    7dbe:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7dc2:	f88d 0000 	strb.w	r0, [sp]
    7dc6:	9800      	ldr	r0, [sp, #0]
    7dc8:	9000      	str	r0, [sp, #0]
    7dca:	f89d 0000 	ldrb.w	r0, [sp]
    7dce:	2800      	cmp	r0, #0
    7dd0:	d1ea      	bne.n	7da8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7dd2:	e04b      	b.n	7e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7dd4:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    7dd8:	f88d 0000 	strb.w	r0, [sp]
    7ddc:	9800      	ldr	r0, [sp, #0]
    7dde:	9000      	str	r0, [sp, #0]
    7de0:	f89d 0000 	ldrb.w	r0, [sp]
    7de4:	b180      	cbz	r0, 7e08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7de6:	706e      	strb	r6, [r5, #1]
    7de8:	2018      	movs	r0, #24
    7dea:	7028      	strb	r0, [r5, #0]
    7dec:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    7df0:	6068      	str	r0, [r5, #4]
    7df2:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7df6:	60a8      	str	r0, [r5, #8]
    7df8:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    7dfc:	81a8      	strh	r0, [r5, #12]
    7dfe:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    7e02:	f804 6c02 	strb.w	r6, [r4, #-2]
    7e06:	e031      	b.n	7e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e08:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    7e0c:	f88d 0000 	strb.w	r0, [sp]
    7e10:	9800      	ldr	r0, [sp, #0]
    7e12:	9000      	str	r0, [sp, #0]
    7e14:	f89d 0000 	ldrb.w	r0, [sp]
    7e18:	b138      	cbz	r0, 7e2a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7e1a:	2019      	movs	r0, #25
    7e1c:	7028      	strb	r0, [r5, #0]
    7e1e:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    7e22:	6068      	str	r0, [r5, #4]
    7e24:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    7e28:	e020      	b.n	7e6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e2a:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7e2e:	f88d 0000 	strb.w	r0, [sp]
    7e32:	9800      	ldr	r0, [sp, #0]
    7e34:	9000      	str	r0, [sp, #0]
    7e36:	f89d 0000 	ldrb.w	r0, [sp]
    7e3a:	2800      	cmp	r0, #0
    7e3c:	f43f af30 	beq.w	7ca0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7e40:	706e      	strb	r6, [r5, #1]
    7e42:	2013      	movs	r0, #19
    7e44:	7028      	strb	r0, [r5, #0]
    7e46:	e007      	b.n	7e58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7e48:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    7e4c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7e50:	6068      	str	r0, [r5, #4]
    7e52:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    7e56:	8128      	strh	r0, [r5, #8]
    7e58:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7e5c:	f88d 0000 	strb.w	r0, [sp]
    7e60:	9800      	ldr	r0, [sp, #0]
    7e62:	9000      	str	r0, [sp, #0]
    7e64:	f89d 0000 	ldrb.w	r0, [sp]
    7e68:	2800      	cmp	r0, #0
    7e6a:	d1ed      	bne.n	7e48 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7e6c:	2001      	movs	r0, #1
    7e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007e70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7e70:	481b      	ldr	r0, [pc, #108]	; (7ee0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7e72:	491a      	ldr	r1, [pc, #104]	; (7edc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7e74:	6081      	str	r1, [r0, #8]
    7e76:	491b      	ldr	r1, [pc, #108]	; (7ee4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7e78:	6041      	str	r1, [r0, #4]
    7e7a:	491b      	ldr	r1, [pc, #108]	; (7ee8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7e7c:	6001      	str	r1, [r0, #0]
    7e7e:	491b      	ldr	r1, [pc, #108]	; (7eec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7e80:	6281      	str	r1, [r0, #40]	; 0x28
    7e82:	491b      	ldr	r1, [pc, #108]	; (7ef0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7e84:	62c1      	str	r1, [r0, #44]	; 0x2c
    7e86:	491b      	ldr	r1, [pc, #108]	; (7ef4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7e88:	60c1      	str	r1, [r0, #12]
    7e8a:	491b      	ldr	r1, [pc, #108]	; (7ef8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7e8c:	6181      	str	r1, [r0, #24]
    7e8e:	491b      	ldr	r1, [pc, #108]	; (7efc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7e90:	6301      	str	r1, [r0, #48]	; 0x30
    7e92:	491b      	ldr	r1, [pc, #108]	; (7f00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7e94:	6201      	str	r1, [r0, #32]
    7e96:	491b      	ldr	r1, [pc, #108]	; (7f04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7e98:	64c1      	str	r1, [r0, #76]	; 0x4c
    7e9a:	491b      	ldr	r1, [pc, #108]	; (7f08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7e9c:	6481      	str	r1, [r0, #72]	; 0x48
    7e9e:	491b      	ldr	r1, [pc, #108]	; (7f0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7ea0:	6441      	str	r1, [r0, #68]	; 0x44
    7ea2:	491b      	ldr	r1, [pc, #108]	; (7f10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7ea4:	6341      	str	r1, [r0, #52]	; 0x34
    7ea6:	491b      	ldr	r1, [pc, #108]	; (7f14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7ea8:	61c1      	str	r1, [r0, #28]
    7eaa:	481c      	ldr	r0, [pc, #112]	; (7f1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7eac:	491a      	ldr	r1, [pc, #104]	; (7f18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7eae:	6081      	str	r1, [r0, #8]
    7eb0:	491b      	ldr	r1, [pc, #108]	; (7f20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7eb2:	61c1      	str	r1, [r0, #28]
    7eb4:	491b      	ldr	r1, [pc, #108]	; (7f24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7eb6:	6241      	str	r1, [r0, #36]	; 0x24
    7eb8:	491b      	ldr	r1, [pc, #108]	; (7f28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7eba:	62c1      	str	r1, [r0, #44]	; 0x2c
    7ebc:	491b      	ldr	r1, [pc, #108]	; (7f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7ebe:	6101      	str	r1, [r0, #16]
    7ec0:	491b      	ldr	r1, [pc, #108]	; (7f30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7ec2:	6141      	str	r1, [r0, #20]
    7ec4:	491b      	ldr	r1, [pc, #108]	; (7f34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7ec6:	6441      	str	r1, [r0, #68]	; 0x44
    7ec8:	6341      	str	r1, [r0, #52]	; 0x34
    7eca:	491b      	ldr	r1, [pc, #108]	; (7f38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7ecc:	6181      	str	r1, [r0, #24]
    7ece:	491b      	ldr	r1, [pc, #108]	; (7f3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7ed0:	6301      	str	r1, [r0, #48]	; 0x30
    7ed2:	491b      	ldr	r1, [pc, #108]	; (7f40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7ed4:	6481      	str	r1, [r0, #72]	; 0x48
    7ed6:	491b      	ldr	r1, [pc, #108]	; (7f44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7ed8:	64c1      	str	r1, [r0, #76]	; 0x4c
    7eda:	4770      	bx	lr
    7edc:	000095ad 	.word	0x000095ad
    7ee0:	20000130 	.word	0x20000130
    7ee4:	00008ee9 	.word	0x00008ee9
    7ee8:	00008f45 	.word	0x00008f45
    7eec:	000092c5 	.word	0x000092c5
    7ef0:	00009309 	.word	0x00009309
    7ef4:	00008ff1 	.word	0x00008ff1
    7ef8:	00009585 	.word	0x00009585
    7efc:	000096c9 	.word	0x000096c9
    7f00:	0000909d 	.word	0x0000909d
    7f04:	00009299 	.word	0x00009299
    7f08:	0000926d 	.word	0x0000926d
    7f0c:	00009545 	.word	0x00009545
    7f10:	00009575 	.word	0x00009575
    7f14:	000095e1 	.word	0x000095e1
    7f18:	00009a41 	.word	0x00009a41
    7f1c:	20000194 	.word	0x20000194
    7f20:	00009a69 	.word	0x00009a69
    7f24:	00009829 	.word	0x00009829
    7f28:	00009901 	.word	0x00009901
    7f2c:	000097fd 	.word	0x000097fd
    7f30:	000099a9 	.word	0x000099a9
    7f34:	00009985 	.word	0x00009985
    7f38:	000099cd 	.word	0x000099cd
    7f3c:	00009ac1 	.word	0x00009ac1
    7f40:	000098b9 	.word	0x000098b9
    7f44:	000098e9 	.word	0x000098e9

00007f48 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7f48:	4806      	ldr	r0, [pc, #24]	; (7f64 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7f4a:	4905      	ldr	r1, [pc, #20]	; (7f60 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7f4c:	6581      	str	r1, [r0, #88]	; 0x58
    7f4e:	4906      	ldr	r1, [pc, #24]	; (7f68 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7f50:	6601      	str	r1, [r0, #96]	; 0x60
    7f52:	4807      	ldr	r0, [pc, #28]	; (7f70 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7f54:	4905      	ldr	r1, [pc, #20]	; (7f6c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7f56:	6581      	str	r1, [r0, #88]	; 0x58
    7f58:	4906      	ldr	r1, [pc, #24]	; (7f74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7f5a:	65c1      	str	r1, [r0, #92]	; 0x5c
    7f5c:	4770      	bx	lr
    7f5e:	0000      	.short	0x0000
    7f60:	00009329 	.word	0x00009329
    7f64:	20000130 	.word	0x20000130
    7f68:	00009401 	.word	0x00009401
    7f6c:	0000992d 	.word	0x0000992d
    7f70:	20000194 	.word	0x20000194
    7f74:	0000995d 	.word	0x0000995d

00007f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f7c:	2601      	movs	r6, #1
    7f7e:	4c7c      	ldr	r4, [pc, #496]	; (8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>)
    7f80:	2500      	movs	r5, #0
    7f82:	f366 0107 	bfi	r1, r6, #0, #8
    7f86:	8065      	strh	r5, [r4, #2]
    7f88:	7065      	strb	r5, [r4, #1]
    7f8a:	7025      	strb	r5, [r4, #0]
    7f8c:	60a0      	str	r0, [r4, #8]
    7f8e:	4689      	mov	r9, r1
    7f90:	4680      	mov	r8, r0
    7f92:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    7f96:	8800      	ldrh	r0, [r0, #0]
    7f98:	f7fc fb62 	bl	4660 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7f9c:	b180      	cbz	r0, 7fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    7f9e:	68a0      	ldr	r0, [r4, #8]
    7fa0:	8800      	ldrh	r0, [r0, #0]
    7fa2:	f7fc fdfb 	bl	4b9c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7fa6:	68a0      	ldr	r0, [r4, #8]
    7fa8:	8800      	ldrh	r0, [r0, #0]
    7faa:	f7fc fd9f 	bl	4aec <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    7fae:	68a0      	ldr	r0, [r4, #8]
    7fb0:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    7fb4:	b1c9      	cbz	r1, 7fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7fb6:	3070      	adds	r0, #112	; 0x70
    7fb8:	f006 fd25 	bl	ea06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7fbc:	b118      	cbz	r0, 7fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    7fbe:	e014      	b.n	7fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7fc0:	f640 31c4 	movw	r1, #3012	; 0xbc4
    7fc4:	e06b      	b.n	809e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e>
    7fc6:	68a0      	ldr	r0, [r4, #8]
    7fc8:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    7fcc:	f88d 1000 	strb.w	r1, [sp]
    7fd0:	9900      	ldr	r1, [sp, #0]
    7fd2:	9100      	str	r1, [sp, #0]
    7fd4:	f89d 1000 	ldrb.w	r1, [sp]
    7fd8:	b139      	cbz	r1, 7fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7fda:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    7fde:	2301      	movs	r3, #1
    7fe0:	4619      	mov	r1, r3
    7fe2:	3070      	adds	r0, #112	; 0x70
    7fe4:	f005 f9ee 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7fe8:	b180      	cbz	r0, 800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    7fea:	68a0      	ldr	r0, [r4, #8]
    7fec:	3070      	adds	r0, #112	; 0x70
    7fee:	f006 fd0a 	bl	ea06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7ff2:	b128      	cbz	r0, 8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    7ff4:	68a0      	ldr	r0, [r4, #8]
    7ff6:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    7ffa:	bf00      	nop
    7ffc:	f000 fbb0 	bl	8760 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x760>
    8000:	68a0      	ldr	r0, [r4, #8]
    8002:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    8006:	b189      	cbz	r1, 802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    8008:	80a5      	strh	r5, [r4, #4]
    800a:	e01e      	b.n	804a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    800c:	68a0      	ldr	r0, [r4, #8]
    800e:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    8012:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    8016:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    801a:	2100      	movs	r1, #0
    801c:	2002      	movs	r0, #2
    801e:	f000 fe41 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8022:	68a0      	ldr	r0, [r4, #8]
    8024:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    8028:	2002      	movs	r0, #2
    802a:	e7e7      	b.n	7ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    802c:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    8030:	f88d 1000 	strb.w	r1, [sp]
    8034:	9900      	ldr	r1, [sp, #0]
    8036:	9100      	str	r1, [sp, #0]
    8038:	f89d 1000 	ldrb.w	r1, [sp]
    803c:	b919      	cbnz	r1, 8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    803e:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    8040:	8a82      	ldrh	r2, [r0, #20]
    8042:	4291      	cmp	r1, r2
    8044:	d800      	bhi.n	8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    8046:	8a81      	ldrh	r1, [r0, #20]
    8048:	80a1      	strh	r1, [r4, #4]
    804a:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    804e:	1e49      	subs	r1, r1, #1
    8050:	b28f      	uxth	r7, r1
    8052:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8056:	4439      	add	r1, r7
    8058:	f820 195c 	strh.w	r1, [r0], #-92
    805c:	8801      	ldrh	r1, [r0, #0]
    805e:	4439      	add	r1, r7
    8060:	8001      	strh	r1, [r0, #0]
    8062:	f001 fd5b 	bl	9b1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b1c>
    8066:	b120      	cbz	r0, 8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    8068:	68a0      	ldr	r0, [r4, #8]
    806a:	f850 1f98 	ldr.w	r1, [r0, #152]!
    806e:	4439      	add	r1, r7
    8070:	6001      	str	r1, [r0, #0]
    8072:	68a1      	ldr	r1, [r4, #8]
    8074:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    8078:	2801      	cmp	r0, #1
    807a:	d802      	bhi.n	8082 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82>
    807c:	1c40      	adds	r0, r0, #1
    807e:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    8082:	b10f      	cbz	r7, 8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    8084:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    8088:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    808c:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    8090:	f101 0070 	add.w	r0, r1, #112	; 0x70
    8094:	f005 fb18 	bl	d6c8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8098:	b120      	cbz	r0, 80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    809a:	f640 4108 	movw	r1, #3080	; 0xc08
    809e:	2031      	movs	r0, #49	; 0x31
    80a0:	f7fb fea0 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80a4:	68a0      	ldr	r0, [r4, #8]
    80a6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    80aa:	290b      	cmp	r1, #11
    80ac:	d001      	beq.n	80b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2>
    80ae:	290c      	cmp	r1, #12
    80b0:	d118      	bne.n	80e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
    80b2:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    80b6:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    80ba:	1ad2      	subs	r2, r2, r3
    80bc:	b212      	sxth	r2, r2
    80be:	2a00      	cmp	r2, #0
    80c0:	db10      	blt.n	80e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
    80c2:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    80c6:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    80ca:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    80ce:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    80d2:	2103      	movs	r1, #3
    80d4:	f7fd fdcc 	bl	5c70 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    80d8:	68a0      	ldr	r0, [r4, #8]
    80da:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    80de:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    80e2:	e026      	b.n	8132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    80e4:	2924      	cmp	r1, #36	; 0x24
    80e6:	d111      	bne.n	810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    80e8:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    80ec:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    80f0:	1a89      	subs	r1, r1, r2
    80f2:	b209      	sxth	r1, r1
    80f4:	2900      	cmp	r1, #0
    80f6:	db09      	blt.n	810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    80f8:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    80fc:	f000 fe82 	bl	8e04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe04>
    8100:	2800      	cmp	r0, #0
    8102:	68a0      	ldr	r0, [r4, #8]
    8104:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    8108:	d029      	beq.n	815e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e>
    810a:	e012      	b.n	8132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    810c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8110:	2924      	cmp	r1, #36	; 0x24
    8112:	d001      	beq.n	8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>
    8114:	2925      	cmp	r1, #37	; 0x25
    8116:	d10c      	bne.n	8132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    8118:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    811c:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8120:	1a89      	subs	r1, r1, r2
    8122:	b209      	sxth	r1, r1
    8124:	2900      	cmp	r1, #0
    8126:	db04      	blt.n	8132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    8128:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    812c:	f000 fe6a 	bl	8e04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe04>
    8130:	b1a8      	cbz	r0, 815e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e>
    8132:	4810      	ldr	r0, [pc, #64]	; (8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>)
    8134:	9000      	str	r0, [sp, #0]
    8136:	4b10      	ldr	r3, [pc, #64]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    8138:	4a10      	ldr	r2, [pc, #64]	; (817c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>)
    813a:	4641      	mov	r1, r8
    813c:	4648      	mov	r0, r9
    813e:	f7fc fde3 	bl	4d08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8142:	68a0      	ldr	r0, [r4, #8]
    8144:	2301      	movs	r3, #1
    8146:	2105      	movs	r1, #5
    8148:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    814c:	3070      	adds	r0, #112	; 0x70
    814e:	f005 f939 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8152:	2800      	cmp	r0, #0
    8154:	d009      	beq.n	816a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a>
    8156:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    815a:	f7fc bdcf 	b.w	4cfc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    815e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8162:	2100      	movs	r1, #0
    8164:	4608      	mov	r0, r1
    8166:	f000 bbd5 	b.w	8914 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x914>
    816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    816e:	0000      	.short	0x0000
    8170:	2000011c 	.word	0x2000011c
    8174:	00008915 	.word	0x00008915
    8178:	00008419 	.word	0x00008419
    817c:	00008d51 	.word	0x00008d51
    8180:	b570      	push	{r4, r5, r6, lr}
    8182:	4c0f      	ldr	r4, [pc, #60]	; (81c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>)
    8184:	68a5      	ldr	r5, [r4, #8]
    8186:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    818a:	2920      	cmp	r1, #32
    818c:	d002      	beq.n	8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    818e:	2926      	cmp	r1, #38	; 0x26
    8190:	d003      	beq.n	819a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a>
    8192:	e011      	b.n	81b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b8>
    8194:	f000 fe84 	bl	8ea0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea0>
    8198:	e008      	b.n	81ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac>
    819a:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    819e:	2301      	movs	r3, #1
    81a0:	210b      	movs	r1, #11
    81a2:	f105 0070 	add.w	r0, r5, #112	; 0x70
    81a6:	f005 f90d 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    81aa:	b138      	cbz	r0, 81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    81ac:	68a1      	ldr	r1, [r4, #8]
    81ae:	2000      	movs	r0, #0
    81b0:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    81b4:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    81b8:	2000      	movs	r0, #0
    81ba:	bd70      	pop	{r4, r5, r6, pc}
    81bc:	202a      	movs	r0, #42	; 0x2a
    81be:	e7e9      	b.n	8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    81c0:	2000011c 	.word	0x2000011c
    81c4:	4804      	ldr	r0, [pc, #16]	; (81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>)
    81c6:	2100      	movs	r1, #0
    81c8:	6880      	ldr	r0, [r0, #8]
    81ca:	f820 1fb0 	strh.w	r1, [r0, #176]!
    81ce:	7881      	ldrb	r1, [r0, #2]
    81d0:	1c49      	adds	r1, r1, #1
    81d2:	7081      	strb	r1, [r0, #2]
    81d4:	4770      	bx	lr
    81d6:	0000      	.short	0x0000
    81d8:	2000011c 	.word	0x2000011c
    81dc:	4807      	ldr	r0, [pc, #28]	; (81fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>)
    81de:	b510      	push	{r4, lr}
    81e0:	6881      	ldr	r1, [r0, #8]
    81e2:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    81e6:	1e40      	subs	r0, r0, #1
    81e8:	b240      	sxtb	r0, r0
    81ea:	7008      	strb	r0, [r1, #0]
    81ec:	2800      	cmp	r0, #0
    81ee:	da04      	bge.n	81fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fa>
    81f0:	f44f 71c9 	mov.w	r1, #402	; 0x192
    81f4:	2031      	movs	r0, #49	; 0x31
    81f6:	f7fb fdf5 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81fa:	bd10      	pop	{r4, pc}
    81fc:	2000011c 	.word	0x2000011c
    8200:	491a      	ldr	r1, [pc, #104]	; (826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>)
    8202:	b508      	push	{r3, lr}
    8204:	6889      	ldr	r1, [r1, #8]
    8206:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    820a:	b1b8      	cbz	r0, 823c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>
    820c:	2a10      	cmp	r2, #16
    820e:	d006      	beq.n	821e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21e>
    8210:	2a14      	cmp	r2, #20
    8212:	d007      	beq.n	8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>
    8214:	2a15      	cmp	r2, #21
    8216:	d008      	beq.n	822a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22a>
    8218:	2a1b      	cmp	r2, #27
    821a:	d122      	bne.n	8262 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x262>
    821c:	e008      	b.n	8230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>
    821e:	2101      	movs	r1, #1
    8220:	200b      	movs	r0, #11
    8222:	e007      	b.n	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    8224:	f001 faac 	bl	9780 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1780>
    8228:	e006      	b.n	8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    822a:	f000 fd59 	bl	8ce0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce0>
    822e:	e003      	b.n	8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    8230:	2101      	movs	r1, #1
    8232:	2006      	movs	r0, #6
    8234:	f000 fd36 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8238:	2001      	movs	r0, #1
    823a:	bd08      	pop	{r3, pc}
    823c:	2a21      	cmp	r2, #33	; 0x21
    823e:	d110      	bne.n	8262 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x262>
    8240:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8244:	2802      	cmp	r0, #2
    8246:	d00e      	beq.n	8266 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x266>
    8248:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    824c:	2801      	cmp	r0, #1
    824e:	d108      	bne.n	8262 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x262>
    8250:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    8254:	f88d 0000 	strb.w	r0, [sp]
    8258:	9800      	ldr	r0, [sp, #0]
    825a:	9000      	str	r0, [sp, #0]
    825c:	f89d 0000 	ldrb.w	r0, [sp]
    8260:	b108      	cbz	r0, 8266 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x266>
    8262:	2000      	movs	r0, #0
    8264:	bd08      	pop	{r3, pc}
    8266:	2101      	movs	r1, #1
    8268:	2017      	movs	r0, #23
    826a:	e7e3      	b.n	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    826c:	2000011c 	.word	0x2000011c
    8270:	b538      	push	{r3, r4, r5, lr}
    8272:	2800      	cmp	r0, #0
    8274:	d16b      	bne.n	834e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34e>
    8276:	4c37      	ldr	r4, [pc, #220]	; (8354 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x354>)
    8278:	68a0      	ldr	r0, [r4, #8]
    827a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    827e:	07ca      	lsls	r2, r1, #31
    8280:	d002      	beq.n	8288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x288>
    8282:	2101      	movs	r1, #1
    8284:	2009      	movs	r0, #9
    8286:	e05b      	b.n	8340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    8288:	078a      	lsls	r2, r1, #30
    828a:	d50a      	bpl.n	82a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a2>
    828c:	2101      	movs	r1, #1
    828e:	200c      	movs	r0, #12
    8290:	f000 fd08 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8294:	68a0      	ldr	r0, [r4, #8]
    8296:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    829a:	f041 0101 	orr.w	r1, r1, #1
    829e:	7001      	strb	r1, [r0, #0]
    82a0:	e050      	b.n	8344 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x344>
    82a2:	074a      	lsls	r2, r1, #29
    82a4:	d502      	bpl.n	82ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ac>
    82a6:	2101      	movs	r1, #1
    82a8:	2013      	movs	r0, #19
    82aa:	e049      	b.n	8340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    82ac:	070a      	lsls	r2, r1, #28
    82ae:	d505      	bpl.n	82bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2bc>
    82b0:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    82b4:	7141      	strb	r1, [r0, #5]
    82b6:	2101      	movs	r1, #1
    82b8:	2007      	movs	r0, #7
    82ba:	e041      	b.n	8340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    82bc:	f011 0f30 	tst.w	r1, #48	; 0x30
    82c0:	d045      	beq.n	834e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34e>
    82c2:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    82c6:	f88d 1000 	strb.w	r1, [sp]
    82ca:	9900      	ldr	r1, [sp, #0]
    82cc:	9100      	str	r1, [sp, #0]
    82ce:	f89d 1000 	ldrb.w	r1, [sp]
    82d2:	bbc9      	cbnz	r1, 8348 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x348>
    82d4:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    82d8:	f88d 1000 	strb.w	r1, [sp]
    82dc:	9900      	ldr	r1, [sp, #0]
    82de:	9100      	str	r1, [sp, #0]
    82e0:	f89d 1000 	ldrb.w	r1, [sp]
    82e4:	b1c9      	cbz	r1, 831a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x31a>
    82e6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    82ea:	2924      	cmp	r1, #36	; 0x24
    82ec:	d02d      	beq.n	834a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34a>
    82ee:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    82f2:	2924      	cmp	r1, #36	; 0x24
    82f4:	d029      	beq.n	834a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34a>
    82f6:	2300      	movs	r3, #0
    82f8:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    82fc:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8300:	f005 fc57 	bl	dbb2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8304:	68a0      	ldr	r0, [r4, #8]
    8306:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    830a:	f021 0120 	bic.w	r1, r1, #32
    830e:	f041 0110 	orr.w	r1, r1, #16
    8312:	7001      	strb	r1, [r0, #0]
    8314:	2100      	movs	r1, #0
    8316:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    831a:	68a0      	ldr	r0, [r4, #8]
    831c:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8320:	06c9      	lsls	r1, r1, #27
    8322:	d514      	bpl.n	834e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34e>
    8324:	f005 fc60 	bl	dbe8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8328:	f000 f910 	bl	854c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54c>
    832c:	68a1      	ldr	r1, [r4, #8]
    832e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8332:	8bc2      	ldrh	r2, [r0, #30]
    8334:	f821 2fee 	strh.w	r2, [r1, #238]!
    8338:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    833a:	8048      	strh	r0, [r1, #2]
    833c:	2101      	movs	r1, #1
    833e:	2015      	movs	r0, #21
    8340:	f000 fcb0 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8344:	2001      	movs	r0, #1
    8346:	bd38      	pop	{r3, r4, r5, pc}
    8348:	e001      	b.n	834e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34e>
    834a:	2301      	movs	r3, #1
    834c:	e7d4      	b.n	82f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f8>
    834e:	2000      	movs	r0, #0
    8350:	e7f9      	b.n	8346 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x346>
    8352:	0000      	.short	0x0000
    8354:	2000011c 	.word	0x2000011c
    8358:	b570      	push	{r4, r5, r6, lr}
    835a:	460d      	mov	r5, r1
    835c:	4606      	mov	r6, r0
    835e:	f005 fa9f 	bl	d8a0 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8362:	4604      	mov	r4, r0
    8364:	4630      	mov	r0, r6
    8366:	f005 faa7 	bl	d8b8 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    836a:	4629      	mov	r1, r5
    836c:	f000 f81e 	bl	83ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ac>
    8370:	b1b8      	cbz	r0, 83a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a2>
    8372:	4620      	mov	r0, r4
    8374:	f005 f8bf 	bl	d4f6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8378:	0001      	movs	r1, r0
    837a:	d00d      	beq.n	8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>
    837c:	480a      	ldr	r0, [pc, #40]	; (83a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a8>)
    837e:	6880      	ldr	r0, [r0, #8]
    8380:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8384:	428a      	cmp	r2, r1
    8386:	d007      	beq.n	8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>
    8388:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    838c:	2901      	cmp	r1, #1
    838e:	d005      	beq.n	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    8390:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8394:	4220      	tst	r0, r4
    8396:	d004      	beq.n	83a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a2>
    8398:	2001      	movs	r0, #1
    839a:	bd70      	pop	{r4, r5, r6, pc}
    839c:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    83a0:	e7f8      	b.n	8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    83a2:	2000      	movs	r0, #0
    83a4:	bd70      	pop	{r4, r5, r6, pc}
    83a6:	0000      	.short	0x0000
    83a8:	2000011c 	.word	0x2000011c
    83ac:	b570      	push	{r4, r5, r6, lr}
    83ae:	460d      	mov	r5, r1
    83b0:	4604      	mov	r4, r0
    83b2:	f005 f8a0 	bl	d4f6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    83b6:	b350      	cbz	r0, 840e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    83b8:	4916      	ldr	r1, [pc, #88]	; (8414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x414>)
    83ba:	6889      	ldr	r1, [r1, #8]
    83bc:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    83c0:	4282      	cmp	r2, r0
    83c2:	d024      	beq.n	840e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    83c4:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    83c8:	2b01      	cmp	r3, #1
    83ca:	d005      	beq.n	83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    83cc:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    83d0:	4223      	tst	r3, r4
    83d2:	d013      	beq.n	83fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fc>
    83d4:	b11d      	cbz	r5, 83de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3de>
    83d6:	e01a      	b.n	840e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    83d8:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    83dc:	e7f8      	b.n	83d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d0>
    83de:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    83e2:	4221      	tst	r1, r4
    83e4:	d113      	bne.n	840e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    83e6:	b15a      	cbz	r2, 8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83e8:	2a04      	cmp	r2, #4
    83ea:	d00e      	beq.n	840a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40a>
    83ec:	2804      	cmp	r0, #4
    83ee:	d00c      	beq.n	840a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40a>
    83f0:	2a08      	cmp	r2, #8
    83f2:	d00a      	beq.n	840a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40a>
    83f4:	2808      	cmp	r0, #8
    83f6:	d008      	beq.n	840a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40a>
    83f8:	4282      	cmp	r2, r0
    83fa:	d908      	bls.n	840e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    83fc:	2000      	movs	r0, #0
    83fe:	bd70      	pop	{r4, r5, r6, pc}
    8400:	f240 1155 	movw	r1, #341	; 0x155
    8404:	2006      	movs	r0, #6
    8406:	f7fb fced 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    840a:	4282      	cmp	r2, r0
    840c:	d3f6      	bcc.n	83fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fc>
    840e:	2001      	movs	r0, #1
    8410:	bd70      	pop	{r4, r5, r6, pc}
    8412:	0000      	.short	0x0000
    8414:	2000011c 	.word	0x2000011c
    8418:	490c      	ldr	r1, [pc, #48]	; (844c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44c>)
    841a:	4602      	mov	r2, r0
    841c:	7848      	ldrb	r0, [r1, #1]
    841e:	b998      	cbnz	r0, 8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    8420:	4608      	mov	r0, r1
    8422:	6880      	ldr	r0, [r0, #8]
    8424:	b142      	cbz	r2, 8438 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x438>
    8426:	7889      	ldrb	r1, [r1, #2]
    8428:	0709      	lsls	r1, r1, #28
    842a:	d503      	bpl.n	8434 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x434>
    842c:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    8430:	2808      	cmp	r0, #8
    8432:	d009      	beq.n	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    8434:	2001      	movs	r0, #1
    8436:	4770      	bx	lr
    8438:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    843c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    843e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    8440:	428a      	cmp	r2, r1
    8442:	d801      	bhi.n	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    8444:	f7fe bfd4 	b.w	73f0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8448:	2000      	movs	r0, #0
    844a:	4770      	bx	lr
    844c:	2000011c 	.word	0x2000011c
    8450:	b538      	push	{r3, r4, r5, lr}
    8452:	4c3d      	ldr	r4, [pc, #244]	; (8548 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x548>)
    8454:	4605      	mov	r5, r0
    8456:	68a0      	ldr	r0, [r4, #8]
    8458:	3070      	adds	r0, #112	; 0x70
    845a:	f006 fad4 	bl	ea06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    845e:	2800      	cmp	r0, #0
    8460:	d170      	bne.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    8462:	2d00      	cmp	r5, #0
    8464:	d16e      	bne.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    8466:	68a0      	ldr	r0, [r4, #8]
    8468:	2301      	movs	r3, #1
    846a:	4619      	mov	r1, r3
    846c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8470:	3070      	adds	r0, #112	; 0x70
    8472:	f004 ffa7 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8476:	2800      	cmp	r0, #0
    8478:	d164      	bne.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    847a:	68a0      	ldr	r0, [r4, #8]
    847c:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8480:	f88d 1000 	strb.w	r1, [sp]
    8484:	9900      	ldr	r1, [sp, #0]
    8486:	9100      	str	r1, [sp, #0]
    8488:	f89d 1000 	ldrb.w	r1, [sp]
    848c:	b149      	cbz	r1, 84a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a2>
    848e:	2100      	movs	r1, #0
    8490:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    8494:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    8498:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    849c:	2100      	movs	r1, #0
    849e:	2002      	movs	r0, #2
    84a0:	e045      	b.n	852e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52e>
    84a2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    84a6:	2301      	movs	r3, #1
    84a8:	2104      	movs	r1, #4
    84aa:	3070      	adds	r0, #112	; 0x70
    84ac:	f004 ff8a 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84b0:	4605      	mov	r5, r0
    84b2:	f7ff fedd 	bl	8270 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x270>
    84b6:	2800      	cmp	r0, #0
    84b8:	d144      	bne.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    84ba:	4628      	mov	r0, r5
    84bc:	f7ff fea0 	bl	8200 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x200>
    84c0:	2800      	cmp	r0, #0
    84c2:	d13f      	bne.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    84c4:	68a0      	ldr	r0, [r4, #8]
    84c6:	2301      	movs	r3, #1
    84c8:	2100      	movs	r1, #0
    84ca:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    84ce:	3070      	adds	r0, #112	; 0x70
    84d0:	f004 ff78 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84d4:	b178      	cbz	r0, 84f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f6>
    84d6:	68a0      	ldr	r0, [r4, #8]
    84d8:	2301      	movs	r3, #1
    84da:	2104      	movs	r1, #4
    84dc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    84e0:	3070      	adds	r0, #112	; 0x70
    84e2:	f004 ff6f 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84e6:	b930      	cbnz	r0, 84f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f6>
    84e8:	68a0      	ldr	r0, [r4, #8]
    84ea:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    84ee:	b110      	cbz	r0, 84f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f6>
    84f0:	2100      	movs	r1, #0
    84f2:	2012      	movs	r0, #18
    84f4:	e01b      	b.n	852e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52e>
    84f6:	68a0      	ldr	r0, [r4, #8]
    84f8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    84fc:	290a      	cmp	r1, #10
    84fe:	d01a      	beq.n	8536 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x536>
    8500:	2d00      	cmp	r5, #0
    8502:	d11f      	bne.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    8504:	f000 fb1a 	bl	8b3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb3c>
    8508:	2800      	cmp	r0, #0
    850a:	d11b      	bne.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    850c:	68a0      	ldr	r0, [r4, #8]
    850e:	2301      	movs	r3, #1
    8510:	2100      	movs	r1, #0
    8512:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8516:	3070      	adds	r0, #112	; 0x70
    8518:	f004 ff54 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    851c:	2800      	cmp	r0, #0
    851e:	d011      	beq.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    8520:	68a0      	ldr	r0, [r4, #8]
    8522:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    8526:	2800      	cmp	r0, #0
    8528:	d00c      	beq.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    852a:	2100      	movs	r1, #0
    852c:	20ff      	movs	r0, #255	; 0xff
    852e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8532:	f000 bbb7 	b.w	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8536:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    853a:	7101      	strb	r1, [r0, #4]
    853c:	2100      	movs	r1, #0
    853e:	2007      	movs	r0, #7
    8540:	e7f5      	b.n	852e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52e>
    8542:	e7ff      	b.n	8544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x544>
    8544:	bd38      	pop	{r3, r4, r5, pc}
    8546:	0000      	.short	0x0000
    8548:	2000011c 	.word	0x2000011c
    854c:	480a      	ldr	r0, [pc, #40]	; (8578 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x578>)
    854e:	b510      	push	{r4, lr}
    8550:	6881      	ldr	r1, [r0, #8]
    8552:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    8556:	2801      	cmp	r0, #1
    8558:	d009      	beq.n	856e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56e>
    855a:	8808      	ldrh	r0, [r1, #0]
    855c:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    8560:	312c      	adds	r1, #44	; 0x2c
    8562:	f005 fb02 	bl	db6a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    856a:	f001 bc05 	b.w	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    856e:	2002      	movs	r0, #2
    8570:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8574:	bd10      	pop	{r4, pc}
    8576:	0000      	.short	0x0000
    8578:	2000011c 	.word	0x2000011c
    857c:	b570      	push	{r4, r5, r6, lr}
    857e:	4c25      	ldr	r4, [pc, #148]	; (8614 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x614>)
    8580:	0005      	movs	r5, r0
    8582:	d12f      	bne.n	85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    8584:	f000 f8a4 	bl	86d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d0>
    8588:	f000 f848 	bl	861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    858c:	0005      	movs	r5, r0
    858e:	d129      	bne.n	85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    8590:	8860      	ldrh	r0, [r4, #2]
    8592:	0741      	lsls	r1, r0, #29
    8594:	d506      	bpl.n	85a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>
    8596:	68a1      	ldr	r1, [r4, #8]
    8598:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    859c:	2907      	cmp	r1, #7
    859e:	d101      	bne.n	85a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>
    85a0:	2101      	movs	r1, #1
    85a2:	7021      	strb	r1, [r4, #0]
    85a4:	0780      	lsls	r0, r0, #30
    85a6:	d512      	bpl.n	85ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ce>
    85a8:	68e0      	ldr	r0, [r4, #12]
    85aa:	78c0      	ldrb	r0, [r0, #3]
    85ac:	2819      	cmp	r0, #25
    85ae:	d205      	bcs.n	85bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5bc>
    85b0:	4919      	ldr	r1, [pc, #100]	; (8618 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x618>)
    85b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    85b6:	b109      	cbz	r1, 85bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5bc>
    85b8:	4788      	blx	r1
    85ba:	e008      	b.n	85ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ce>
    85bc:	28ff      	cmp	r0, #255	; 0xff
    85be:	d004      	beq.n	85ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ca>
    85c0:	f240 714d 	movw	r1, #1869	; 0x74d
    85c4:	2031      	movs	r0, #49	; 0x31
    85c6:	f7fb fc0d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ca:	f001 f90b 	bl	97e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e4>
    85ce:	78a0      	ldrb	r0, [r4, #2]
    85d0:	06c0      	lsls	r0, r0, #27
    85d2:	d507      	bpl.n	85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    85d4:	68a0      	ldr	r0, [r4, #8]
    85d6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    85da:	290b      	cmp	r1, #11
    85dc:	d102      	bne.n	85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    85de:	210c      	movs	r1, #12
    85e0:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    85e4:	7860      	ldrb	r0, [r4, #1]
    85e6:	0700      	lsls	r0, r0, #28
    85e8:	d511      	bpl.n	860e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60e>
    85ea:	68a0      	ldr	r0, [r4, #8]
    85ec:	2301      	movs	r3, #1
    85ee:	2105      	movs	r1, #5
    85f0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    85f4:	3070      	adds	r0, #112	; 0x70
    85f6:	f004 fee5 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    85fa:	b128      	cbz	r0, 8608 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x608>
    85fc:	68a1      	ldr	r1, [r4, #8]
    85fe:	2508      	movs	r5, #8
    8600:	2000      	movs	r0, #0
    8602:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    8606:	e002      	b.n	860e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60e>
    8608:	2000      	movs	r0, #0
    860a:	f7fc fc4d 	bl	4ea8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    860e:	4628      	mov	r0, r5
    8610:	bd70      	pop	{r4, r5, r6, pc}
    8612:	0000      	.short	0x0000
    8614:	2000011c 	.word	0x2000011c
    8618:	20000194 	.word	0x20000194
    861c:	b570      	push	{r4, r5, r6, lr}
    861e:	4c2a      	ldr	r4, [pc, #168]	; (86c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c8>)
    8620:	2000      	movs	r0, #0
    8622:	78a1      	ldrb	r1, [r4, #2]
    8624:	07c9      	lsls	r1, r1, #31
    8626:	d015      	beq.n	8654 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x654>
    8628:	6920      	ldr	r0, [r4, #16]
    862a:	2301      	movs	r3, #1
    862c:	2105      	movs	r1, #5
    862e:	78c5      	ldrb	r5, [r0, #3]
    8630:	68a0      	ldr	r0, [r4, #8]
    8632:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8636:	3070      	adds	r0, #112	; 0x70
    8638:	f004 fec4 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    863c:	b158      	cbz	r0, 8656 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x656>
    863e:	1ead      	subs	r5, r5, #2
    8640:	2d0a      	cmp	r5, #10
    8642:	d206      	bcs.n	8652 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x652>
    8644:	e8df f005 	tbb	[pc, r5]
    8648:	05050707 	.word	0x05050707
    864c:	05050707 	.word	0x05050707
    8650:	0707      	.short	0x0707
    8652:	2008      	movs	r0, #8
    8654:	bd70      	pop	{r4, r5, r6, pc}
    8656:	6920      	ldr	r0, [r4, #16]
    8658:	f7fd fc34 	bl	5ec4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    865c:	b138      	cbz	r0, 866e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66e>
    865e:	6920      	ldr	r0, [r4, #16]
    8660:	78c5      	ldrb	r5, [r0, #3]
    8662:	b145      	cbz	r5, 8676 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x676>
    8664:	2d01      	cmp	r5, #1
    8666:	d006      	beq.n	8676 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x676>
    8668:	2d16      	cmp	r5, #22
    866a:	d118      	bne.n	869e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69e>
    866c:	e003      	b.n	8676 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x676>
    866e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8672:	f000 bd3d 	b.w	90f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f0>
    8676:	68a0      	ldr	r0, [r4, #8]
    8678:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    867c:	f004 fef0 	bl	d460 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8680:	b168      	cbz	r0, 869e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69e>
    8682:	68a1      	ldr	r1, [r4, #8]
    8684:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    8688:	281f      	cmp	r0, #31
    868a:	d008      	beq.n	869e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69e>
    868c:	2820      	cmp	r0, #32
    868e:	d003      	beq.n	8698 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x698>
    8690:	2d16      	cmp	r5, #22
    8692:	d00c      	beq.n	86ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ae>
    8694:	2002      	movs	r0, #2
    8696:	bd70      	pop	{r4, r5, r6, pc}
    8698:	2026      	movs	r0, #38	; 0x26
    869a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    869e:	2d19      	cmp	r5, #25
    86a0:	d207      	bcs.n	86b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b2>
    86a2:	480a      	ldr	r0, [pc, #40]	; (86cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6cc>)
    86a4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    86a8:	b118      	cbz	r0, 86b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b2>
    86aa:	4780      	blx	r0
    86ac:	e003      	b.n	86b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b6>
    86ae:	2020      	movs	r0, #32
    86b0:	bd70      	pop	{r4, r5, r6, pc}
    86b2:	f000 fd1d 	bl	90f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f0>
    86b6:	68a2      	ldr	r2, [r4, #8]
    86b8:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    86bc:	1c49      	adds	r1, r1, #1
    86be:	f143 0300 	adc.w	r3, r3, #0
    86c2:	e9c2 1300 	strd	r1, r3, [r2]
    86c6:	bd70      	pop	{r4, r5, r6, pc}
    86c8:	2000011c 	.word	0x2000011c
    86cc:	20000130 	.word	0x20000130
    86d0:	b570      	push	{r4, r5, r6, lr}
    86d2:	4c22      	ldr	r4, [pc, #136]	; (875c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x75c>)
    86d4:	78a0      	ldrb	r0, [r4, #2]
    86d6:	0700      	lsls	r0, r0, #28
    86d8:	d53e      	bpl.n	8758 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x758>
    86da:	68a0      	ldr	r0, [r4, #8]
    86dc:	3070      	adds	r0, #112	; 0x70
    86de:	f006 f992 	bl	ea06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    86e2:	b148      	cbz	r0, 86f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f8>
    86e4:	68a0      	ldr	r0, [r4, #8]
    86e6:	21fe      	movs	r1, #254	; 0xfe
    86e8:	2500      	movs	r5, #0
    86ea:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    86ee:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    86f2:	2919      	cmp	r1, #25
    86f4:	d10c      	bne.n	8710 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x710>
    86f6:	e004      	b.n	8702 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x702>
    86f8:	f240 7157 	movw	r1, #1879	; 0x757
    86fc:	2031      	movs	r0, #49	; 0x31
    86fe:	f7fb fb71 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8702:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    8706:	f7ff fd69 	bl	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    870a:	68a0      	ldr	r0, [r4, #8]
    870c:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8710:	68a0      	ldr	r0, [r4, #8]
    8712:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8716:	291f      	cmp	r1, #31
    8718:	d002      	beq.n	8720 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x720>
    871a:	2927      	cmp	r1, #39	; 0x27
    871c:	d113      	bne.n	8746 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x746>
    871e:	e00b      	b.n	8738 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x738>
    8720:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8724:	f004 fe9c 	bl	d460 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8728:	b108      	cbz	r0, 872e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72e>
    872a:	2026      	movs	r0, #38	; 0x26
    872c:	e000      	b.n	8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>
    872e:	2020      	movs	r0, #32
    8730:	68a1      	ldr	r1, [r4, #8]
    8732:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8736:	e006      	b.n	8746 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x746>
    8738:	2101      	movs	r1, #1
    873a:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    873e:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8742:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    8746:	68a0      	ldr	r0, [r4, #8]
    8748:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    874c:	2908      	cmp	r1, #8
    874e:	d103      	bne.n	8758 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x758>
    8750:	2102      	movs	r1, #2
    8752:	7021      	strb	r1, [r4, #0]
    8754:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    8758:	bd70      	pop	{r4, r5, r6, pc}
    875a:	0000      	.short	0x0000
    875c:	2000011c 	.word	0x2000011c
    8760:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8762:	4605      	mov	r5, r0
    8764:	4668      	mov	r0, sp
    8766:	f7fc fa03 	bl	4b70 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    876a:	b318      	cbz	r0, 87b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b4>
    876c:	2222      	movs	r2, #34	; 0x22
    876e:	2100      	movs	r1, #0
    8770:	9800      	ldr	r0, [sp, #0]
    8772:	f003 fc20 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8776:	2103      	movs	r1, #3
    8778:	9800      	ldr	r0, [sp, #0]
    877a:	f005 f8f1 	bl	d960 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    877e:	9800      	ldr	r0, [sp, #0]
    8780:	7801      	ldrb	r1, [r0, #0]
    8782:	f021 0110 	bic.w	r1, r1, #16
    8786:	7001      	strb	r1, [r0, #0]
    8788:	4629      	mov	r1, r5
    878a:	f7fd fbc7 	bl	5f1c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    878e:	2100      	movs	r1, #0
    8790:	4c5f      	ldr	r4, [pc, #380]	; (8910 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x910>)
    8792:	f644 162f 	movw	r6, #18735	; 0x492f
    8796:	2d0e      	cmp	r5, #14
    8798:	d07e      	beq.n	8898 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x898>
    879a:	dc0e      	bgt.n	87ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ba>
    879c:	f1a5 0502 	sub.w	r5, r5, #2
    87a0:	2d0c      	cmp	r5, #12
    87a2:	d21c      	bcs.n	87de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7de>
    87a4:	e8df f005 	tbb	[pc, r5]
    87a8:	aa491b1e 	.word	0xaa491b1e
    87ac:	551b1eaa 	.word	0x551b1eaa
    87b0:	3034aa1b 	.word	0x3034aa1b
    87b4:	f640 1182 	movw	r1, #2434	; 0x982
    87b8:	e0a6      	b.n	8908 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x908>
    87ba:	2d15      	cmp	r5, #21
    87bc:	d05c      	beq.n	8878 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x878>
    87be:	dc08      	bgt.n	87d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d2>
    87c0:	2d11      	cmp	r5, #17
    87c2:	d014      	beq.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    87c4:	2d12      	cmp	r5, #18
    87c6:	d01e      	beq.n	8806 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x806>
    87c8:	2d13      	cmp	r5, #19
    87ca:	d01c      	beq.n	8806 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x806>
    87cc:	2d14      	cmp	r5, #20
    87ce:	d106      	bne.n	87de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7de>
    87d0:	e052      	b.n	8878 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x878>
    87d2:	2d16      	cmp	r5, #22
    87d4:	d027      	beq.n	8826 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x826>
    87d6:	2d17      	cmp	r5, #23
    87d8:	d069      	beq.n	88ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8ae>
    87da:	2dff      	cmp	r5, #255	; 0xff
    87dc:	d072      	beq.n	88c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c4>
    87de:	f640 11f8 	movw	r1, #2552	; 0x9f8
    87e2:	e091      	b.n	8908 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x908>
    87e4:	68a1      	ldr	r1, [r4, #8]
    87e6:	9800      	ldr	r0, [sp, #0]
    87e8:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    87ec:	e00e      	b.n	880c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80c>
    87ee:	68a0      	ldr	r0, [r4, #8]
    87f0:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    87f4:	9800      	ldr	r0, [sp, #0]
    87f6:	f005 f88f 	bl	d918 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    87fa:	68a0      	ldr	r0, [r4, #8]
    87fc:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    8800:	9800      	ldr	r0, [sp, #0]
    8802:	f005 f88b 	bl	d91c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    8806:	e079      	b.n	88fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8fc>
    8808:	9800      	ldr	r0, [sp, #0]
    880a:	2106      	movs	r1, #6
    880c:	7101      	strb	r1, [r0, #4]
    880e:	e075      	b.n	88fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8fc>
    8810:	9800      	ldr	r0, [sp, #0]
    8812:	220b      	movs	r2, #11
    8814:	7102      	strb	r2, [r0, #4]
    8816:	2259      	movs	r2, #89	; 0x59
    8818:	7142      	strb	r2, [r0, #5]
    881a:	7181      	strb	r1, [r0, #6]
    881c:	21b0      	movs	r1, #176	; 0xb0
    881e:	71c1      	strb	r1, [r0, #7]
    8820:	2112      	movs	r1, #18
    8822:	7201      	strb	r1, [r0, #8]
    8824:	e06a      	b.n	88fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8fc>
    8826:	9800      	ldr	r0, [sp, #0]
    8828:	f8d4 1008 	ldr.w	r1, [r4, #8]
    882c:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    8830:	7102      	strb	r2, [r0, #4]
    8832:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    8836:	7141      	strb	r1, [r0, #5]
    8838:	e060      	b.n	88fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8fc>
    883a:	68a1      	ldr	r1, [r4, #8]
    883c:	9800      	ldr	r0, [sp, #0]
    883e:	f501 718c 	add.w	r1, r1, #280	; 0x118
    8842:	f005 f87e 	bl	d942 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    8846:	68a1      	ldr	r1, [r4, #8]
    8848:	9800      	ldr	r0, [sp, #0]
    884a:	31e4      	adds	r1, #228	; 0xe4
    884c:	f005 f876 	bl	d93c <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    8850:	e054      	b.n	88fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8fc>
    8852:	9101      	str	r1, [sp, #4]
    8854:	9102      	str	r1, [sp, #8]
    8856:	f001 fe39 	bl	a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    885a:	68a1      	ldr	r1, [r4, #8]
    885c:	4030      	ands	r0, r6
    885e:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    8862:	4001      	ands	r1, r0
    8864:	f88d 1004 	strb.w	r1, [sp, #4]
    8868:	0a00      	lsrs	r0, r0, #8
    886a:	f88d 0005 	strb.w	r0, [sp, #5]
    886e:	a901      	add	r1, sp, #4
    8870:	9800      	ldr	r0, [sp, #0]
    8872:	f005 f870 	bl	d956 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    8876:	e041      	b.n	88fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8fc>
    8878:	68a0      	ldr	r0, [r4, #8]
    887a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    887e:	9800      	ldr	r0, [sp, #0]
    8880:	f005 f876 	bl	d970 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8884:	68a0      	ldr	r0, [r4, #8]
    8886:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    888a:	9800      	ldr	r0, [sp, #0]
    888c:	f005 f874 	bl	d978 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8890:	68a0      	ldr	r0, [r4, #8]
    8892:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8896:	e000      	b.n	889a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x89a>
    8898:	e015      	b.n	88c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c6>
    889a:	9800      	ldr	r0, [sp, #0]
    889c:	f005 f870 	bl	d980 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    88a0:	68a0      	ldr	r0, [r4, #8]
    88a2:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    88a6:	9800      	ldr	r0, [sp, #0]
    88a8:	f005 f86e 	bl	d988 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    88ac:	e026      	b.n	88fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8fc>
    88ae:	68a1      	ldr	r1, [r4, #8]
    88b0:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    88b4:	2801      	cmp	r0, #1
    88b6:	9800      	ldr	r0, [sp, #0]
    88b8:	d0b8      	beq.n	882c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82c>
    88ba:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    88be:	7102      	strb	r2, [r0, #4]
    88c0:	7849      	ldrb	r1, [r1, #1]
    88c2:	e7b8      	b.n	8836 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x836>
    88c4:	e012      	b.n	88ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8ec>
    88c6:	9101      	str	r1, [sp, #4]
    88c8:	9102      	str	r1, [sp, #8]
    88ca:	f001 fdff 	bl	a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    88ce:	68a1      	ldr	r1, [r4, #8]
    88d0:	4030      	ands	r0, r6
    88d2:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    88d6:	4001      	ands	r1, r0
    88d8:	f88d 1004 	strb.w	r1, [sp, #4]
    88dc:	0a00      	lsrs	r0, r0, #8
    88de:	f88d 0005 	strb.w	r0, [sp, #5]
    88e2:	a901      	add	r1, sp, #4
    88e4:	9800      	ldr	r0, [sp, #0]
    88e6:	f005 f831 	bl	d94c <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    88ea:	e007      	b.n	88fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8fc>
    88ec:	68a0      	ldr	r0, [r4, #8]
    88ee:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    88f2:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    88f6:	9800      	ldr	r0, [sp, #0]
    88f8:	f005 f812 	bl	d920 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    88fc:	f7fc f912 	bl	4b24 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8900:	2800      	cmp	r0, #0
    8902:	d104      	bne.n	890e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90e>
    8904:	f640 11fc 	movw	r1, #2556	; 0x9fc
    8908:	2031      	movs	r0, #49	; 0x31
    890a:	f7fb fa6b 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    890e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8910:	2000011c 	.word	0x2000011c
    8914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8918:	4c87      	ldr	r4, [pc, #540]	; (8b38 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb38>)
    891a:	4682      	mov	sl, r0
    891c:	4689      	mov	r9, r1
    891e:	68a0      	ldr	r0, [r4, #8]
    8920:	8800      	ldrh	r0, [r0, #0]
    8922:	f7fb fe9d 	bl	4660 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8926:	0006      	movs	r6, r0
    8928:	d00a      	beq.n	8940 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x940>
    892a:	8860      	ldrh	r0, [r4, #2]
    892c:	f04f 0500 	mov.w	r5, #0
    8930:	05c0      	lsls	r0, r0, #23
    8932:	68a0      	ldr	r0, [r4, #8]
    8934:	d509      	bpl.n	894a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94a>
    8936:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    893a:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    893e:	e008      	b.n	8952 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x952>
    8940:	f640 51a2 	movw	r1, #3490	; 0xda2
    8944:	2031      	movs	r0, #49	; 0x31
    8946:	f7fb fa4d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    894a:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    894e:	1c49      	adds	r1, r1, #1
    8950:	8001      	strh	r1, [r0, #0]
    8952:	f001 f8e3 	bl	9b1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b1c>
    8956:	f04f 0801 	mov.w	r8, #1
    895a:	b320      	cbz	r0, 89a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a6>
    895c:	8860      	ldrh	r0, [r4, #2]
    895e:	0500      	lsls	r0, r0, #20
    8960:	d506      	bpl.n	8970 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x970>
    8962:	68a0      	ldr	r0, [r4, #8]
    8964:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    8968:	b111      	cbz	r1, 8970 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x970>
    896a:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    896e:	e01a      	b.n	89a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a6>
    8970:	68a0      	ldr	r0, [r4, #8]
    8972:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    8976:	1c49      	adds	r1, r1, #1
    8978:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    897c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    8980:	428b      	cmp	r3, r1
    8982:	d301      	bcc.n	8988 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x988>
    8984:	1a5a      	subs	r2, r3, r1
    8986:	e000      	b.n	898a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98a>
    8988:	2200      	movs	r2, #0
    898a:	88a7      	ldrh	r7, [r4, #4]
    898c:	1d7f      	adds	r7, r7, #5
    898e:	42ba      	cmp	r2, r7
    8990:	d801      	bhi.n	8996 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x996>
    8992:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    8996:	4299      	cmp	r1, r3
    8998:	d305      	bcc.n	89a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a6>
    899a:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    899e:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    89a2:	f001 f9e9 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    89a6:	8860      	ldrh	r0, [r4, #2]
    89a8:	f04f 0702 	mov.w	r7, #2
    89ac:	f410 7f40 	tst.w	r0, #768	; 0x300
    89b0:	d00e      	beq.n	89d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9d0>
    89b2:	68a0      	ldr	r0, [r4, #8]
    89b4:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    89b8:	b111      	cbz	r1, 89c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c0>
    89ba:	2903      	cmp	r1, #3
    89bc:	d108      	bne.n	89d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9d0>
    89be:	e002      	b.n	89c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c6>
    89c0:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    89c4:	e001      	b.n	89ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9ca>
    89c6:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    89ca:	2101      	movs	r1, #1
    89cc:	f7fe fd36 	bl	743c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    89d0:	68a0      	ldr	r0, [r4, #8]
    89d2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    89d6:	2901      	cmp	r1, #1
    89d8:	d104      	bne.n	89e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e4>
    89da:	8861      	ldrh	r1, [r4, #2]
    89dc:	0549      	lsls	r1, r1, #21
    89de:	d501      	bpl.n	89e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e4>
    89e0:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    89e4:	f1ba 0f00 	cmp.w	sl, #0
    89e8:	d176      	bne.n	8ad8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xad8>
    89ea:	78a1      	ldrb	r1, [r4, #2]
    89ec:	0649      	lsls	r1, r1, #25
    89ee:	d502      	bpl.n	89f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f6>
    89f0:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    89f4:	e004      	b.n	8a00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa00>
    89f6:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    89fa:	1c49      	adds	r1, r1, #1
    89fc:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    8a00:	4648      	mov	r0, r9
    8a02:	f7ff fdbb 	bl	857c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57c>
    8a06:	ea40 0009 	orr.w	r0, r0, r9
    8a0a:	4681      	mov	r9, r0
    8a0c:	f7ff fd20 	bl	8450 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x450>
    8a10:	68a7      	ldr	r7, [r4, #8]
    8a12:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    8a16:	1c40      	adds	r0, r0, #1
    8a18:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    8a1c:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    8a20:	b128      	cbz	r0, 8a2e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2e>
    8a22:	f7fc faaf 	bl	4f84 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8a26:	b1b0      	cbz	r0, 8a56 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa56>
    8a28:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8a2c:	e013      	b.n	8a56 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa56>
    8a2e:	f7fc f921 	bl	4c74 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8a32:	b108      	cbz	r0, 8a38 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa38>
    8a34:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8a38:	f7fc f916 	bl	4c68 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8a3c:	b158      	cbz	r0, 8a56 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa56>
    8a3e:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    8a42:	1c40      	adds	r0, r0, #1
    8a44:	b2c0      	uxtb	r0, r0
    8a46:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    8a4a:	2802      	cmp	r0, #2
    8a4c:	d903      	bls.n	8a56 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa56>
    8a4e:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8a52:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    8a56:	68a0      	ldr	r0, [r4, #8]
    8a58:	2301      	movs	r3, #1
    8a5a:	2100      	movs	r1, #0
    8a5c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8a60:	3070      	adds	r0, #112	; 0x70
    8a62:	f004 fcaf 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a66:	b920      	cbnz	r0, 8a72 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa72>
    8a68:	68a0      	ldr	r0, [r4, #8]
    8a6a:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8a6e:	280c      	cmp	r0, #12
    8a70:	d15e      	bne.n	8b30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb30>
    8a72:	68a0      	ldr	r0, [r4, #8]
    8a74:	2301      	movs	r3, #1
    8a76:	2100      	movs	r1, #0
    8a78:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8a7c:	3070      	adds	r0, #112	; 0x70
    8a7e:	f004 fca1 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a82:	b350      	cbz	r0, 8ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xada>
    8a84:	68a0      	ldr	r0, [r4, #8]
    8a86:	2301      	movs	r3, #1
    8a88:	2100      	movs	r1, #0
    8a8a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8a8e:	3070      	adds	r0, #112	; 0x70
    8a90:	f004 fc98 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a94:	b308      	cbz	r0, 8ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xada>
    8a96:	68a0      	ldr	r0, [r4, #8]
    8a98:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8a9c:	2902      	cmp	r1, #2
    8a9e:	d147      	bne.n	8b30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb30>
    8aa0:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    8aa4:	b9c8      	cbnz	r0, 8ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xada>
    8aa6:	4630      	mov	r0, r6
    8aa8:	f003 ff6d 	bl	c986 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8aac:	b1a8      	cbz	r0, 8ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xada>
    8aae:	68a0      	ldr	r0, [r4, #8]
    8ab0:	3070      	adds	r0, #112	; 0x70
    8ab2:	f005 ffa8 	bl	ea06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ab6:	b980      	cbnz	r0, 8ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xada>
    8ab8:	68a1      	ldr	r1, [r4, #8]
    8aba:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    8abe:	2801      	cmp	r0, #1
    8ac0:	d936      	bls.n	8b30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb30>
    8ac2:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    8ac6:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    8aca:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    8ace:	1e93      	subs	r3, r2, #2
    8ad0:	4298      	cmp	r0, r3
    8ad2:	db03      	blt.n	8adc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xadc>
    8ad4:	2001      	movs	r0, #1
    8ad6:	e004      	b.n	8ae2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae2>
    8ad8:	e01c      	b.n	8b14 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb14>
    8ada:	e029      	b.n	8b30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb30>
    8adc:	1a10      	subs	r0, r2, r0
    8ade:	1e40      	subs	r0, r0, #1
    8ae0:	b280      	uxth	r0, r0
    8ae2:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    8ae6:	88a3      	ldrh	r3, [r4, #4]
    8ae8:	429a      	cmp	r2, r3
    8aea:	d301      	bcc.n	8af0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaf0>
    8aec:	2201      	movs	r2, #1
    8aee:	e002      	b.n	8af6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaf6>
    8af0:	1a9a      	subs	r2, r3, r2
    8af2:	1c52      	adds	r2, r2, #1
    8af4:	b292      	uxth	r2, r2
    8af6:	4290      	cmp	r0, r2
    8af8:	d900      	bls.n	8afc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xafc>
    8afa:	4610      	mov	r0, r2
    8afc:	2801      	cmp	r0, #1
    8afe:	d101      	bne.n	8b04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb04>
    8b00:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    8b04:	68a1      	ldr	r1, [r4, #8]
    8b06:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    8b0a:	4410      	add	r0, r2
    8b0c:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    8b10:	f001 f8ce 	bl	9cb0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cb0>
    8b14:	78a0      	ldrb	r0, [r4, #2]
    8b16:	464a      	mov	r2, r9
    8b18:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8b1c:	4650      	mov	r0, sl
    8b1e:	f001 f811 	bl	9b44 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b44>
    8b22:	68a0      	ldr	r0, [r4, #8]
    8b24:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    8b28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b2c:	f7fb bfe4 	b.w	4af8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8b30:	2001      	movs	r0, #1
    8b32:	68a1      	ldr	r1, [r4, #8]
    8b34:	e7e4      	b.n	8b00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb00>
    8b36:	0000      	.short	0x0000
    8b38:	2000011c 	.word	0x2000011c
    8b3c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8b3e:	4c58      	ldr	r4, [pc, #352]	; (8ca0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca0>)
    8b40:	2301      	movs	r3, #1
    8b42:	2100      	movs	r1, #0
    8b44:	68a0      	ldr	r0, [r4, #8]
    8b46:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8b4a:	3070      	adds	r0, #112	; 0x70
    8b4c:	f004 fc3a 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b50:	2800      	cmp	r0, #0
    8b52:	d07d      	beq.n	8c50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc50>
    8b54:	68a0      	ldr	r0, [r4, #8]
    8b56:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    8b5a:	2500      	movs	r5, #0
    8b5c:	b139      	cbz	r1, 8b6e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6e>
    8b5e:	2100      	movs	r1, #0
    8b60:	200e      	movs	r0, #14
    8b62:	f000 f89f 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8b66:	68a0      	ldr	r0, [r4, #8]
    8b68:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    8b6c:	e095      	b.n	8c9a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc9a>
    8b6e:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    8b72:	b119      	cbz	r1, 8b7c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb7c>
    8b74:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    8b78:	0789      	lsls	r1, r1, #30
    8b7a:	d016      	beq.n	8baa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbaa>
    8b7c:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8b80:	f88d 1004 	strb.w	r1, [sp, #4]
    8b84:	9901      	ldr	r1, [sp, #4]
    8b86:	9101      	str	r1, [sp, #4]
    8b88:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8b8c:	b141      	cbz	r1, 8ba0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba0>
    8b8e:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    8b92:	f88d 1000 	strb.w	r1, [sp]
    8b96:	9900      	ldr	r1, [sp, #0]
    8b98:	9100      	str	r1, [sp, #0]
    8b9a:	f89d 1000 	ldrb.w	r1, [sp]
    8b9e:	b189      	cbz	r1, 8bc4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc4>
    8ba0:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8ba4:	2901      	cmp	r1, #1
    8ba6:	d02f      	beq.n	8c08 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc08>
    8ba8:	e071      	b.n	8c8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8e>
    8baa:	2100      	movs	r1, #0
    8bac:	200c      	movs	r0, #12
    8bae:	f000 f879 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8bb2:	68a0      	ldr	r0, [r4, #8]
    8bb4:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    8bb8:	f041 0101 	orr.w	r1, r1, #1
    8bbc:	7001      	strb	r1, [r0, #0]
    8bbe:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8bc2:	e06a      	b.n	8c9a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc9a>
    8bc4:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8bc8:	2924      	cmp	r1, #36	; 0x24
    8bca:	d01b      	beq.n	8c04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc04>
    8bcc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8bd0:	2924      	cmp	r1, #36	; 0x24
    8bd2:	d017      	beq.n	8c04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc04>
    8bd4:	f05f 0300 	movs.w	r3, #0
    8bd8:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8bdc:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8be0:	f004 ffe7 	bl	dbb2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8be4:	68a0      	ldr	r0, [r4, #8]
    8be6:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    8bea:	2100      	movs	r1, #0
    8bec:	2014      	movs	r0, #20
    8bee:	f000 f859 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8bf2:	68a1      	ldr	r1, [r4, #8]
    8bf4:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8bf8:	8bc2      	ldrh	r2, [r0, #30]
    8bfa:	f821 2fee 	strh.w	r2, [r1, #238]!
    8bfe:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8c00:	8048      	strh	r0, [r1, #2]
    8c02:	e04a      	b.n	8c9a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc9a>
    8c04:	2301      	movs	r3, #1
    8c06:	e7e7      	b.n	8bd8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbd8>
    8c08:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    8c0c:	f88d 1000 	strb.w	r1, [sp]
    8c10:	9900      	ldr	r1, [sp, #0]
    8c12:	9100      	str	r1, [sp, #0]
    8c14:	f89d 1000 	ldrb.w	r1, [sp]
    8c18:	bb31      	cbnz	r1, 8c68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc68>
    8c1a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8c1e:	2301      	movs	r3, #1
    8c20:	210b      	movs	r1, #11
    8c22:	3070      	adds	r0, #112	; 0x70
    8c24:	f004 fbce 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c28:	b9f0      	cbnz	r0, 8c68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc68>
    8c2a:	68a0      	ldr	r0, [r4, #8]
    8c2c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    8c30:	f005 fef1 	bl	ea16 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8c34:	4605      	mov	r5, r0
    8c36:	68a0      	ldr	r0, [r4, #8]
    8c38:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8c3c:	f005 feeb 	bl	ea16 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8c40:	4606      	mov	r6, r0
    8c42:	68a0      	ldr	r0, [r4, #8]
    8c44:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8c48:	4628      	mov	r0, r5
    8c4a:	f005 feef 	bl	ea2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8c4e:	e000      	b.n	8c52 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc52>
    8c50:	e01e      	b.n	8c90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc90>
    8c52:	b150      	cbz	r0, 8c6a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6a>
    8c54:	68a0      	ldr	r0, [r4, #8]
    8c56:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    8c5a:	4630      	mov	r0, r6
    8c5c:	f005 fee6 	bl	ea2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8c60:	b118      	cbz	r0, 8c6a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6a>
    8c62:	2000      	movs	r0, #0
    8c64:	f000 f91c 	bl	8ea0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea0>
    8c68:	e011      	b.n	8c8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8e>
    8c6a:	68a0      	ldr	r0, [r4, #8]
    8c6c:	2301      	movs	r3, #1
    8c6e:	2103      	movs	r1, #3
    8c70:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8c74:	3070      	adds	r0, #112	; 0x70
    8c76:	f004 fba5 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c7a:	b940      	cbnz	r0, 8c8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8e>
    8c7c:	68a0      	ldr	r0, [r4, #8]
    8c7e:	2301      	movs	r3, #1
    8c80:	2102      	movs	r1, #2
    8c82:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8c86:	3070      	adds	r0, #112	; 0x70
    8c88:	f004 fb9c 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c8c:	b108      	cbz	r0, 8c92 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc92>
    8c8e:	2000      	movs	r0, #0
    8c90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8c92:	2100      	movs	r1, #0
    8c94:	2016      	movs	r0, #22
    8c96:	f000 f805 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8c9a:	2001      	movs	r0, #1
    8c9c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8c9e:	0000      	.short	0x0000
    8ca0:	2000011c 	.word	0x2000011c
    8ca4:	b570      	push	{r4, r5, r6, lr}
    8ca6:	4c0d      	ldr	r4, [pc, #52]	; (8cdc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcdc>)
    8ca8:	4606      	mov	r6, r0
    8caa:	460d      	mov	r5, r1
    8cac:	68a0      	ldr	r0, [r4, #8]
    8cae:	3070      	adds	r0, #112	; 0x70
    8cb0:	f005 fea9 	bl	ea06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8cb4:	b120      	cbz	r0, 8cc0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc0>
    8cb6:	f640 210f 	movw	r1, #2575	; 0xa0f
    8cba:	2031      	movs	r0, #49	; 0x31
    8cbc:	f7fb f892 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cc0:	68a2      	ldr	r2, [r4, #8]
    8cc2:	2000      	movs	r0, #0
    8cc4:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    8cc8:	b115      	cbz	r5, 8cd0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcd0>
    8cca:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    8cce:	bd70      	pop	{r4, r5, r6, pc}
    8cd0:	f822 0faa 	strh.w	r0, [r2, #170]!
    8cd4:	2001      	movs	r0, #1
    8cd6:	7110      	strb	r0, [r2, #4]
    8cd8:	bd70      	pop	{r4, r5, r6, pc}
    8cda:	0000      	.short	0x0000
    8cdc:	2000011c 	.word	0x2000011c
    8ce0:	b570      	push	{r4, r5, r6, lr}
    8ce2:	4d1a      	ldr	r5, [pc, #104]	; (8d4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4c>)
    8ce4:	2600      	movs	r6, #0
    8ce6:	68ac      	ldr	r4, [r5, #8]
    8ce8:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    8cec:	2801      	cmp	r0, #1
    8cee:	d00a      	beq.n	8d06 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd06>
    8cf0:	2802      	cmp	r0, #2
    8cf2:	d129      	bne.n	8d48 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd48>
    8cf4:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8cf8:	2106      	movs	r1, #6
    8cfa:	b1a0      	cbz	r0, 8d26 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd26>
    8cfc:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    8d00:	2101      	movs	r1, #1
    8d02:	2002      	movs	r0, #2
    8d04:	e01b      	b.n	8d3e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd3e>
    8d06:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8d0a:	2800      	cmp	r0, #0
    8d0c:	d11c      	bne.n	8d48 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd48>
    8d0e:	2200      	movs	r2, #0
    8d10:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    8d14:	f504 7188 	add.w	r1, r4, #272	; 0x110
    8d18:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    8d1c:	f004 fb0a 	bl	d334 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8d20:	2101      	movs	r1, #1
    8d22:	2005      	movs	r0, #5
    8d24:	e00b      	b.n	8d3e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd3e>
    8d26:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    8d2a:	0740      	lsls	r0, r0, #29
    8d2c:	d505      	bpl.n	8d3a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd3a>
    8d2e:	2011      	movs	r0, #17
    8d30:	2203      	movs	r2, #3
    8d32:	f804 2fee 	strb.w	r2, [r4, #238]!
    8d36:	7061      	strb	r1, [r4, #1]
    8d38:	e000      	b.n	8d3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd3c>
    8d3a:	200d      	movs	r0, #13
    8d3c:	2101      	movs	r1, #1
    8d3e:	f7ff ffb1 	bl	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    8d42:	68a8      	ldr	r0, [r5, #8]
    8d44:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    8d48:	bd70      	pop	{r4, r5, r6, pc}
    8d4a:	0000      	.short	0x0000
    8d4c:	2000011c 	.word	0x2000011c
    8d50:	b570      	push	{r4, r5, r6, lr}
    8d52:	4a2b      	ldr	r2, [pc, #172]	; (8e00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe00>)
    8d54:	4603      	mov	r3, r0
    8d56:	8850      	ldrh	r0, [r2, #2]
    8d58:	4318      	orrs	r0, r3
    8d5a:	8050      	strh	r0, [r2, #2]
    8d5c:	4610      	mov	r0, r2
    8d5e:	2b40      	cmp	r3, #64	; 0x40
    8d60:	6880      	ldr	r0, [r0, #8]
    8d62:	d00d      	beq.n	8d80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd80>
    8d64:	079e      	lsls	r6, r3, #30
    8d66:	f04f 0500 	mov.w	r5, #0
    8d6a:	f04f 0401 	mov.w	r4, #1
    8d6e:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8d72:	d50c      	bpl.n	8d8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8e>
    8d74:	b14e      	cbz	r6, 8d8a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8a>
    8d76:	f640 510f 	movw	r1, #3343	; 0xd0f
    8d7a:	2031      	movs	r0, #49	; 0x31
    8d7c:	f7fb f832 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d84:	2104      	movs	r1, #4
    8d86:	f7fe bb59 	b.w	743c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8d8a:	60d1      	str	r1, [r2, #12]
    8d8c:	e01c      	b.n	8dc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc8>
    8d8e:	b1c6      	cbz	r6, 8dc2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc2>
    8d90:	6111      	str	r1, [r2, #16]
    8d92:	78c9      	ldrb	r1, [r1, #3]
    8d94:	2906      	cmp	r1, #6
    8d96:	d002      	beq.n	8d9e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd9e>
    8d98:	290b      	cmp	r1, #11
    8d9a:	d112      	bne.n	8dc2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc2>
    8d9c:	e009      	b.n	8db2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdb2>
    8d9e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8da2:	2917      	cmp	r1, #23
    8da4:	d10d      	bne.n	8dc2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc2>
    8da6:	2100      	movs	r1, #0
    8da8:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    8dac:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    8db0:	e007      	b.n	8dc2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc2>
    8db2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8db6:	2911      	cmp	r1, #17
    8db8:	d103      	bne.n	8dc2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc2>
    8dba:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    8dbe:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    8dc2:	0799      	lsls	r1, r3, #30
    8dc4:	d516      	bpl.n	8df4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdf4>
    8dc6:	68d1      	ldr	r1, [r2, #12]
    8dc8:	78c9      	ldrb	r1, [r1, #3]
    8dca:	2905      	cmp	r1, #5
    8dcc:	d002      	beq.n	8dd4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdd4>
    8dce:	290b      	cmp	r1, #11
    8dd0:	d110      	bne.n	8df4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdf4>
    8dd2:	e009      	b.n	8de8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde8>
    8dd4:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8dd8:	2915      	cmp	r1, #21
    8dda:	d10b      	bne.n	8df4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdf4>
    8ddc:	2100      	movs	r1, #0
    8dde:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    8de2:	f800 4c45 	strb.w	r4, [r0, #-69]
    8de6:	e005      	b.n	8df4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdf4>
    8de8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8dec:	2910      	cmp	r1, #16
    8dee:	d101      	bne.n	8df4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdf4>
    8df0:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    8df4:	0698      	lsls	r0, r3, #26
    8df6:	d501      	bpl.n	8dfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdfc>
    8df8:	2008      	movs	r0, #8
    8dfa:	7050      	strb	r0, [r2, #1]
    8dfc:	bd70      	pop	{r4, r5, r6, pc}
    8dfe:	0000      	.short	0x0000
    8e00:	2000011c 	.word	0x2000011c
    8e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e08:	4c24      	ldr	r4, [pc, #144]	; (8e9c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe9c>)
    8e0a:	2501      	movs	r5, #1
    8e0c:	68a2      	ldr	r2, [r4, #8]
    8e0e:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    8e12:	b108      	cbz	r0, 8e18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe18>
    8e14:	2701      	movs	r7, #1
    8e16:	e000      	b.n	8e1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe1a>
    8e18:	2700      	movs	r7, #0
    8e1a:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    8e1e:	b109      	cbz	r1, 8e24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe24>
    8e20:	2601      	movs	r6, #1
    8e22:	e000      	b.n	8e26 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe26>
    8e24:	2600      	movs	r6, #0
    8e26:	b90f      	cbnz	r7, 8e2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2c>
    8e28:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    8e2c:	b90e      	cbnz	r6, 8e32 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe32>
    8e2e:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    8e32:	f102 0362 	add.w	r3, r2, #98	; 0x62
    8e36:	7218      	strb	r0, [r3, #8]
    8e38:	7259      	strb	r1, [r3, #9]
    8e3a:	2001      	movs	r0, #1
    8e3c:	7298      	strb	r0, [r3, #10]
    8e3e:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    8e42:	2801      	cmp	r0, #1
    8e44:	d001      	beq.n	8e4a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4a>
    8e46:	b907      	cbnz	r7, 8e4a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4a>
    8e48:	b116      	cbz	r6, 8e50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe50>
    8e4a:	2000      	movs	r0, #0
    8e4c:	f000 f828 	bl	8ea0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea0>
    8e50:	68a0      	ldr	r0, [r4, #8]
    8e52:	302c      	adds	r0, #44	; 0x2c
    8e54:	f004 ff1c 	bl	dc90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8e58:	4606      	mov	r6, r0
    8e5a:	68a0      	ldr	r0, [r4, #8]
    8e5c:	f004 fec4 	bl	dbe8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8e60:	b1c0      	cbz	r0, 8e94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe94>
    8e62:	68a0      	ldr	r0, [r4, #8]
    8e64:	302c      	adds	r0, #44	; 0x2c
    8e66:	f004 ff13 	bl	dc90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8e6a:	68a1      	ldr	r1, [r4, #8]
    8e6c:	4607      	mov	r7, r0
    8e6e:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    8e72:	8808      	ldrh	r0, [r1, #0]
    8e74:	312c      	adds	r1, #44	; 0x2c
    8e76:	f004 fe78 	bl	db6a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8e7a:	42be      	cmp	r6, r7
    8e7c:	d20a      	bcs.n	8e94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe94>
    8e7e:	f7f8 fbab 	bl	15d8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    8e82:	4601      	mov	r1, r0
    8e84:	1bb8      	subs	r0, r7, r6
    8e86:	2864      	cmp	r0, #100	; 0x64
    8e88:	d200      	bcs.n	8e8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8c>
    8e8a:	2064      	movs	r0, #100	; 0x64
    8e8c:	f7f8 fae2 	bl	1454 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8e90:	b100      	cbz	r0, 8e94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe94>
    8e92:	2500      	movs	r5, #0
    8e94:	4628      	mov	r0, r5
    8e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e9a:	0000      	.short	0x0000
    8e9c:	2000011c 	.word	0x2000011c
    8ea0:	b510      	push	{r4, lr}
    8ea2:	4c10      	ldr	r4, [pc, #64]	; (8ee4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xee4>)
    8ea4:	68a1      	ldr	r1, [r4, #8]
    8ea6:	880a      	ldrh	r2, [r1, #0]
    8ea8:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    8eac:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    8eb0:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    8eb4:	f005 fdaf 	bl	ea16 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8eb8:	68a1      	ldr	r1, [r4, #8]
    8eba:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    8ebe:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    8ec2:	f005 fda8 	bl	ea16 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8ec6:	68a2      	ldr	r2, [r4, #8]
    8ec8:	f202 2102 	addw	r1, r2, #514	; 0x202
    8ecc:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    8ed0:	2001      	movs	r0, #1
    8ed2:	7008      	strb	r0, [r1, #0]
    8ed4:	2000      	movs	r0, #0
    8ed6:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    8eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ede:	f000 bf4b 	b.w	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8ee2:	0000      	.short	0x0000
    8ee4:	2000011c 	.word	0x2000011c
    8ee8:	b510      	push	{r4, lr}
    8eea:	4c15      	ldr	r4, [pc, #84]	; (8f40 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf40>)
    8eec:	2301      	movs	r3, #1
    8eee:	2100      	movs	r1, #0
    8ef0:	68a0      	ldr	r0, [r4, #8]
    8ef2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ef6:	3070      	adds	r0, #112	; 0x70
    8ef8:	f004 fa64 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8efc:	b190      	cbz	r0, 8f24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf24>
    8efe:	6920      	ldr	r0, [r4, #16]
    8f00:	f004 fca7 	bl	d852 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8f04:	68a1      	ldr	r1, [r4, #8]
    8f06:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8f0a:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8f0e:	f005 fd9b 	bl	ea48 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8f12:	b148      	cbz	r0, 8f28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf28>
    8f14:	68a0      	ldr	r0, [r4, #8]
    8f16:	2128      	movs	r1, #40	; 0x28
    8f18:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8f1c:	3076      	adds	r0, #118	; 0x76
    8f1e:	2101      	movs	r1, #1
    8f20:	7781      	strb	r1, [r0, #30]
    8f22:	e00b      	b.n	8f3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf3c>
    8f24:	2001      	movs	r0, #1
    8f26:	bd10      	pop	{r4, pc}
    8f28:	68a1      	ldr	r1, [r4, #8]
    8f2a:	6920      	ldr	r0, [r4, #16]
    8f2c:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    8f30:	f004 fc8a 	bl	d848 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8f34:	68a1      	ldr	r1, [r4, #8]
    8f36:	200b      	movs	r0, #11
    8f38:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8f3c:	2000      	movs	r0, #0
    8f3e:	bd10      	pop	{r4, pc}
    8f40:	2000011c 	.word	0x2000011c
    8f44:	b570      	push	{r4, r5, r6, lr}
    8f46:	4c29      	ldr	r4, [pc, #164]	; (8fec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfec>)
    8f48:	2301      	movs	r3, #1
    8f4a:	2100      	movs	r1, #0
    8f4c:	68a0      	ldr	r0, [r4, #8]
    8f4e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f52:	3070      	adds	r0, #112	; 0x70
    8f54:	f004 fa36 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f58:	b1b8      	cbz	r0, 8f8a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8a>
    8f5a:	2100      	movs	r1, #0
    8f5c:	6920      	ldr	r0, [r4, #16]
    8f5e:	f004 fc4b 	bl	d7f8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8f62:	b1a0      	cbz	r0, 8f8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8e>
    8f64:	6920      	ldr	r0, [r4, #16]
    8f66:	68a1      	ldr	r1, [r4, #8]
    8f68:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8f6c:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8f70:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8f74:	f005 fd68 	bl	ea48 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8f78:	b168      	cbz	r0, 8f96 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf96>
    8f7a:	68a0      	ldr	r0, [r4, #8]
    8f7c:	2128      	movs	r1, #40	; 0x28
    8f7e:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8f82:	3076      	adds	r0, #118	; 0x76
    8f84:	2101      	movs	r1, #1
    8f86:	7781      	strb	r1, [r0, #30]
    8f88:	e02e      	b.n	8fe8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe8>
    8f8a:	2001      	movs	r0, #1
    8f8c:	bd70      	pop	{r4, r5, r6, pc}
    8f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f92:	f000 b8ad 	b.w	90f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f0>
    8f96:	6920      	ldr	r0, [r4, #16]
    8f98:	f004 fc5e 	bl	d858 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8f9c:	f004 f9f5 	bl	d38a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8fa0:	4605      	mov	r5, r0
    8fa2:	68a0      	ldr	r0, [r4, #8]
    8fa4:	4629      	mov	r1, r5
    8fa6:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    8faa:	6920      	ldr	r0, [r4, #16]
    8fac:	7900      	ldrb	r0, [r0, #4]
    8fae:	f004 fb77 	bl	d6a0 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8fb2:	68a1      	ldr	r1, [r4, #8]
    8fb4:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    8fb8:	6920      	ldr	r0, [r4, #16]
    8fba:	4629      	mov	r1, r5
    8fbc:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    8fc0:	f004 fb6a 	bl	d698 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8fc4:	68a1      	ldr	r1, [r4, #8]
    8fc6:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    8fca:	6920      	ldr	r0, [r4, #16]
    8fcc:	f004 fc47 	bl	d85e <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    8fd0:	68a1      	ldr	r1, [r4, #8]
    8fd2:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    8fd6:	6920      	ldr	r0, [r4, #16]
    8fd8:	f004 fc44 	bl	d864 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    8fdc:	68a1      	ldr	r1, [r4, #8]
    8fde:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    8fe2:	200d      	movs	r0, #13
    8fe4:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8fe8:	2000      	movs	r0, #0
    8fea:	bd70      	pop	{r4, r5, r6, pc}
    8fec:	2000011c 	.word	0x2000011c
    8ff0:	b538      	push	{r3, r4, r5, lr}
    8ff2:	4c29      	ldr	r4, [pc, #164]	; (9098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1098>)
    8ff4:	2301      	movs	r3, #1
    8ff6:	2100      	movs	r1, #0
    8ff8:	68a0      	ldr	r0, [r4, #8]
    8ffa:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ffe:	3070      	adds	r0, #112	; 0x70
    9000:	f004 f9e0 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9004:	b970      	cbnz	r0, 9024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1024>
    9006:	68a0      	ldr	r0, [r4, #8]
    9008:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    900c:	2a12      	cmp	r2, #18
    900e:	d009      	beq.n	9024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1024>
    9010:	2301      	movs	r3, #1
    9012:	2105      	movs	r1, #5
    9014:	3070      	adds	r0, #112	; 0x70
    9016:	f004 f9d5 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    901a:	b108      	cbz	r0, 9020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1020>
    901c:	2008      	movs	r0, #8
    901e:	bd38      	pop	{r3, r4, r5, pc}
    9020:	2001      	movs	r0, #1
    9022:	bd38      	pop	{r3, r4, r5, pc}
    9024:	68a0      	ldr	r0, [r4, #8]
    9026:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    902a:	b908      	cbnz	r0, 9030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1030>
    902c:	f7ff f8ca 	bl	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    9030:	68a1      	ldr	r1, [r4, #8]
    9032:	6920      	ldr	r0, [r4, #16]
    9034:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9038:	f004 fc23 	bl	d882 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    903c:	68a1      	ldr	r1, [r4, #8]
    903e:	6920      	ldr	r0, [r4, #16]
    9040:	31e0      	adds	r1, #224	; 0xe0
    9042:	f004 fc15 	bl	d870 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9046:	68a1      	ldr	r1, [r4, #8]
    9048:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    904c:	f88d 0000 	strb.w	r0, [sp]
    9050:	9800      	ldr	r0, [sp, #0]
    9052:	9000      	str	r0, [sp, #0]
    9054:	f89d 0000 	ldrb.w	r0, [sp]
    9058:	b120      	cbz	r0, 9064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1064>
    905a:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    905e:	2031      	movs	r0, #49	; 0x31
    9060:	f7fa fec0 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9064:	8808      	ldrh	r0, [r1, #0]
    9066:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    906a:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    906e:	6920      	ldr	r0, [r4, #16]
    9070:	f004 fc02 	bl	d878 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9074:	68a1      	ldr	r1, [r4, #8]
    9076:	6920      	ldr	r0, [r4, #16]
    9078:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    907c:	f004 fbf5 	bl	d86a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9080:	68a0      	ldr	r0, [r4, #8]
    9082:	4601      	mov	r1, r0
    9084:	2201      	movs	r2, #1
    9086:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    908a:	2014      	movs	r0, #20
    908c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9090:	f000 fe72 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9094:	2000      	movs	r0, #0
    9096:	bd38      	pop	{r3, r4, r5, pc}
    9098:	2000011c 	.word	0x2000011c
    909c:	b51c      	push	{r2, r3, r4, lr}
    909e:	4c13      	ldr	r4, [pc, #76]	; (90ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10ec>)
    90a0:	68a0      	ldr	r0, [r4, #8]
    90a2:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    90a6:	07c0      	lsls	r0, r0, #31
    90a8:	d001      	beq.n	90ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10ae>
    90aa:	2001      	movs	r0, #1
    90ac:	bd1c      	pop	{r2, r3, r4, pc}
    90ae:	4669      	mov	r1, sp
    90b0:	6920      	ldr	r0, [r4, #16]
    90b2:	f004 fbec 	bl	d88e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    90b6:	f001 fa09 	bl	a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    90ba:	f644 112f 	movw	r1, #18735	; 0x492f
    90be:	4008      	ands	r0, r1
    90c0:	f89d 2000 	ldrb.w	r2, [sp]
    90c4:	68a1      	ldr	r1, [r4, #8]
    90c6:	4002      	ands	r2, r0
    90c8:	f801 2fbc 	strb.w	r2, [r1, #188]!
    90cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
    90d0:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    90d4:	7048      	strb	r0, [r1, #1]
    90d6:	f7ff f875 	bl	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    90da:	68a0      	ldr	r0, [r4, #8]
    90dc:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    90e0:	f041 0101 	orr.w	r1, r1, #1
    90e4:	7001      	strb	r1, [r0, #0]
    90e6:	2000      	movs	r0, #0
    90e8:	bd1c      	pop	{r2, r3, r4, pc}
    90ea:	0000      	.short	0x0000
    90ec:	2000011c 	.word	0x2000011c
    90f0:	4a0a      	ldr	r2, [pc, #40]	; (911c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x111c>)
    90f2:	b510      	push	{r4, lr}
    90f4:	6890      	ldr	r0, [r2, #8]
    90f6:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    90fa:	070b      	lsls	r3, r1, #28
    90fc:	d501      	bpl.n	9102 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1102>
    90fe:	2001      	movs	r0, #1
    9100:	bd10      	pop	{r4, pc}
    9102:	f041 0108 	orr.w	r1, r1, #8
    9106:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    910a:	6911      	ldr	r1, [r2, #16]
    910c:	78c9      	ldrb	r1, [r1, #3]
    910e:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    9112:	f7ff f857 	bl	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    9116:	2000      	movs	r0, #0
    9118:	bd10      	pop	{r4, pc}
    911a:	0000      	.short	0x0000
    911c:	2000011c 	.word	0x2000011c
    9120:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9124:	4c34      	ldr	r4, [pc, #208]	; (91f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11f8>)
    9126:	68a0      	ldr	r0, [r4, #8]
    9128:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    912c:	f010 0f30 	tst.w	r0, #48	; 0x30
    9130:	d002      	beq.n	9138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1138>
    9132:	2001      	movs	r0, #1
    9134:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9138:	6920      	ldr	r0, [r4, #16]
    913a:	f004 fbc3 	bl	d8c4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    913e:	b318      	cbz	r0, 9188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1188>
    9140:	6920      	ldr	r0, [r4, #16]
    9142:	f004 fbb1 	bl	d8a8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9146:	4607      	mov	r7, r0
    9148:	6920      	ldr	r0, [r4, #16]
    914a:	f004 fbb1 	bl	d8b0 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    914e:	4606      	mov	r6, r0
    9150:	6920      	ldr	r0, [r4, #16]
    9152:	f004 fba7 	bl	d8a4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9156:	4605      	mov	r5, r0
    9158:	6920      	ldr	r0, [r4, #16]
    915a:	f004 fba7 	bl	d8ac <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    915e:	4601      	mov	r1, r0
    9160:	9700      	str	r7, [sp, #0]
    9162:	68a0      	ldr	r0, [r4, #8]
    9164:	4633      	mov	r3, r6
    9166:	462a      	mov	r2, r5
    9168:	302c      	adds	r0, #44	; 0x2c
    916a:	f004 fdcb 	bl	dd04 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    916e:	78a0      	ldrb	r0, [r4, #2]
    9170:	0780      	lsls	r0, r0, #30
    9172:	d503      	bpl.n	917c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x117c>
    9174:	68e0      	ldr	r0, [r4, #12]
    9176:	78c0      	ldrb	r0, [r0, #3]
    9178:	2814      	cmp	r0, #20
    917a:	d009      	beq.n	9190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1190>
    917c:	68a0      	ldr	r0, [r4, #8]
    917e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9182:	281c      	cmp	r0, #28
    9184:	d004      	beq.n	9190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1190>
    9186:	e007      	b.n	9198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1198>
    9188:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    918c:	f7ff bfb0 	b.w	90f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f0>
    9190:	68a1      	ldr	r1, [r4, #8]
    9192:	2001      	movs	r0, #1
    9194:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9198:	68a1      	ldr	r1, [r4, #8]
    919a:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    919e:	2801      	cmp	r0, #1
    91a0:	d011      	beq.n	91c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c6>
    91a2:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    91a6:	f88d 0004 	strb.w	r0, [sp, #4]
    91aa:	9801      	ldr	r0, [sp, #4]
    91ac:	9001      	str	r0, [sp, #4]
    91ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
    91b2:	b940      	cbnz	r0, 91c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c6>
    91b4:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    91b8:	f88d 0000 	strb.w	r0, [sp]
    91bc:	9800      	ldr	r0, [sp, #0]
    91be:	9000      	str	r0, [sp, #0]
    91c0:	f89d 0000 	ldrb.w	r0, [sp]
    91c4:	b128      	cbz	r0, 91d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11d2>
    91c6:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    91ca:	f040 0010 	orr.w	r0, r0, #16
    91ce:	7008      	strb	r0, [r1, #0]
    91d0:	e00d      	b.n	91ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11ee>
    91d2:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    91d6:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    91da:	f040 0020 	orr.w	r0, r0, #32
    91de:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    91e2:	f831 0b2c 	ldrh.w	r0, [r1], #44
    91e6:	f004 fd94 	bl	dd12 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    91ea:	f000 fdc5 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    91ee:	f7fe ffe9 	bl	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    91f2:	2000      	movs	r0, #0
    91f4:	e79e      	b.n	9134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1134>
    91f6:	0000      	.short	0x0000
    91f8:	2000011c 	.word	0x2000011c
    91fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91fe:	4c1a      	ldr	r4, [pc, #104]	; (9268 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1268>)
    9200:	2301      	movs	r3, #1
    9202:	210a      	movs	r1, #10
    9204:	68a0      	ldr	r0, [r4, #8]
    9206:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    920a:	3070      	adds	r0, #112	; 0x70
    920c:	f004 f8da 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9210:	b338      	cbz	r0, 9262 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1262>
    9212:	6920      	ldr	r0, [r4, #16]
    9214:	f004 fb56 	bl	d8c4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9218:	b1c8      	cbz	r0, 924e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124e>
    921a:	6920      	ldr	r0, [r4, #16]
    921c:	f004 fb44 	bl	d8a8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9220:	4607      	mov	r7, r0
    9222:	6920      	ldr	r0, [r4, #16]
    9224:	f004 fb44 	bl	d8b0 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9228:	4606      	mov	r6, r0
    922a:	6920      	ldr	r0, [r4, #16]
    922c:	f004 fb3a 	bl	d8a4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9230:	4605      	mov	r5, r0
    9232:	6920      	ldr	r0, [r4, #16]
    9234:	f004 fb3a 	bl	d8ac <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9238:	4601      	mov	r1, r0
    923a:	9700      	str	r7, [sp, #0]
    923c:	68a0      	ldr	r0, [r4, #8]
    923e:	4633      	mov	r3, r6
    9240:	462a      	mov	r2, r5
    9242:	302c      	adds	r0, #44	; 0x2c
    9244:	f004 fd5e 	bl	dd04 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9248:	68a0      	ldr	r0, [r4, #8]
    924a:	f004 fccd 	bl	dbe8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    924e:	68a1      	ldr	r1, [r4, #8]
    9250:	2000      	movs	r0, #0
    9252:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    9256:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    925a:	f7ff f977 	bl	854c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54c>
    925e:	2000      	movs	r0, #0
    9260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9262:	2001      	movs	r0, #1
    9264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9266:	0000      	.short	0x0000
    9268:	2000011c 	.word	0x2000011c
    926c:	b510      	push	{r4, lr}
    926e:	4c09      	ldr	r4, [pc, #36]	; (9294 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1294>)
    9270:	68a0      	ldr	r0, [r4, #8]
    9272:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9276:	0740      	lsls	r0, r0, #29
    9278:	d501      	bpl.n	927e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x127e>
    927a:	2001      	movs	r0, #1
    927c:	bd10      	pop	{r4, pc}
    927e:	f7fe ffa1 	bl	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    9282:	68a0      	ldr	r0, [r4, #8]
    9284:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9288:	f041 0104 	orr.w	r1, r1, #4
    928c:	7001      	strb	r1, [r0, #0]
    928e:	2000      	movs	r0, #0
    9290:	bd10      	pop	{r4, pc}
    9292:	0000      	.short	0x0000
    9294:	2000011c 	.word	0x2000011c
    9298:	b510      	push	{r4, lr}
    929a:	4c09      	ldr	r4, [pc, #36]	; (92c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c0>)
    929c:	2301      	movs	r3, #1
    929e:	2109      	movs	r1, #9
    92a0:	68a0      	ldr	r0, [r4, #8]
    92a2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    92a6:	3070      	adds	r0, #112	; 0x70
    92a8:	f004 f88c 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92ac:	2800      	cmp	r0, #0
    92ae:	d006      	beq.n	92be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12be>
    92b0:	68a1      	ldr	r1, [r4, #8]
    92b2:	2000      	movs	r0, #0
    92b4:	f801 0fa2 	strb.w	r0, [r1, #162]!
    92b8:	7308      	strb	r0, [r1, #12]
    92ba:	f801 0c25 	strb.w	r0, [r1, #-37]
    92be:	bd10      	pop	{r4, pc}
    92c0:	2000011c 	.word	0x2000011c
    92c4:	b510      	push	{r4, lr}
    92c6:	4c0f      	ldr	r4, [pc, #60]	; (9304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1304>)
    92c8:	2301      	movs	r3, #1
    92ca:	2100      	movs	r1, #0
    92cc:	68a0      	ldr	r0, [r4, #8]
    92ce:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    92d2:	3070      	adds	r0, #112	; 0x70
    92d4:	f004 f876 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92d8:	b138      	cbz	r0, 92ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12ea>
    92da:	f7fe ff73 	bl	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    92de:	68a1      	ldr	r1, [r4, #8]
    92e0:	2010      	movs	r0, #16
    92e2:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    92e6:	2000      	movs	r0, #0
    92e8:	bd10      	pop	{r4, pc}
    92ea:	68a0      	ldr	r0, [r4, #8]
    92ec:	2301      	movs	r3, #1
    92ee:	2105      	movs	r1, #5
    92f0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    92f4:	3070      	adds	r0, #112	; 0x70
    92f6:	f004 f865 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92fa:	b108      	cbz	r0, 9300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1300>
    92fc:	2008      	movs	r0, #8
    92fe:	bd10      	pop	{r4, pc}
    9300:	2001      	movs	r0, #1
    9302:	bd10      	pop	{r4, pc}
    9304:	2000011c 	.word	0x2000011c
    9308:	4806      	ldr	r0, [pc, #24]	; (9324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1324>)
    930a:	6880      	ldr	r0, [r0, #8]
    930c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9310:	2911      	cmp	r1, #17
    9312:	d001      	beq.n	9318 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1318>
    9314:	2002      	movs	r0, #2
    9316:	4770      	bx	lr
    9318:	2112      	movs	r1, #18
    931a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    931e:	2000      	movs	r0, #0
    9320:	4770      	bx	lr
    9322:	0000      	.short	0x0000
    9324:	2000011c 	.word	0x2000011c
    9328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    932a:	4c34      	ldr	r4, [pc, #208]	; (93fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13fc>)
    932c:	2301      	movs	r3, #1
    932e:	210b      	movs	r1, #11
    9330:	68a0      	ldr	r0, [r4, #8]
    9332:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9336:	3070      	adds	r0, #112	; 0x70
    9338:	f004 f844 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    933c:	bb78      	cbnz	r0, 939e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x139e>
    933e:	68a0      	ldr	r0, [r4, #8]
    9340:	2301      	movs	r3, #1
    9342:	2100      	movs	r1, #0
    9344:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9348:	3070      	adds	r0, #112	; 0x70
    934a:	f004 f83b 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    934e:	b320      	cbz	r0, 939a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x139a>
    9350:	68a0      	ldr	r0, [r4, #8]
    9352:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9356:	2824      	cmp	r0, #36	; 0x24
    9358:	d022      	beq.n	93a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a0>
    935a:	6920      	ldr	r0, [r4, #16]
    935c:	f004 face 	bl	d8fc <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9360:	b300      	cbz	r0, 93a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a4>
    9362:	68a0      	ldr	r0, [r4, #8]
    9364:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9368:	f041 0104 	orr.w	r1, r1, #4
    936c:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    9370:	6921      	ldr	r1, [r4, #16]
    9372:	794a      	ldrb	r2, [r1, #5]
    9374:	f002 0207 	and.w	r2, r2, #7
    9378:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    937c:	7909      	ldrb	r1, [r1, #4]
    937e:	f001 0107 	and.w	r1, r1, #7
    9382:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    9386:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    938a:	f88d 3000 	strb.w	r3, [sp]
    938e:	9b00      	ldr	r3, [sp, #0]
    9390:	9300      	str	r3, [sp, #0]
    9392:	f89d 3000 	ldrb.w	r3, [sp]
    9396:	bb43      	cbnz	r3, 93ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ea>
    9398:	e008      	b.n	93ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ac>
    939a:	2001      	movs	r0, #1
    939c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    939e:	e7ff      	b.n	93a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a0>
    93a0:	2020      	movs	r0, #32
    93a2:	e7fb      	b.n	939c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x139c>
    93a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    93a8:	f7ff bea2 	b.w	90f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f0>
    93ac:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    93b0:	2b01      	cmp	r3, #1
    93b2:	d01a      	beq.n	93ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ea>
    93b4:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    93b8:	2501      	movs	r5, #1
    93ba:	785e      	ldrb	r6, [r3, #1]
    93bc:	428e      	cmp	r6, r1
    93be:	d106      	bne.n	93ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ce>
    93c0:	7819      	ldrb	r1, [r3, #0]
    93c2:	4291      	cmp	r1, r2
    93c4:	d103      	bne.n	93ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ce>
    93c6:	2102      	movs	r1, #2
    93c8:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    93cc:	e00d      	b.n	93ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ea>
    93ce:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    93d2:	8802      	ldrh	r2, [r0, #0]
    93d4:	f821 2902 	strh.w	r2, [r1], #-2
    93d8:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    93dc:	710a      	strb	r2, [r1, #4]
    93de:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    93e2:	7148      	strb	r0, [r1, #5]
    93e4:	700d      	strb	r5, [r1, #0]
    93e6:	f000 fcc7 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    93ea:	68a1      	ldr	r1, [r4, #8]
    93ec:	2021      	movs	r0, #33	; 0x21
    93ee:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    93f2:	f7fe fee7 	bl	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    93f6:	2000      	movs	r0, #0
    93f8:	e7d0      	b.n	939c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x139c>
    93fa:	0000      	.short	0x0000
    93fc:	2000011c 	.word	0x2000011c
    9400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9404:	4c4e      	ldr	r4, [pc, #312]	; (9540 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1540>)
    9406:	68a0      	ldr	r0, [r4, #8]
    9408:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    940c:	2920      	cmp	r1, #32
    940e:	d009      	beq.n	9424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1424>
    9410:	f05f 0700 	movs.w	r7, #0
    9414:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9418:	2922      	cmp	r1, #34	; 0x22
    941a:	d005      	beq.n	9428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1428>
    941c:	b387      	cbz	r7, 9480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1480>
    941e:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    9422:	e003      	b.n	942c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x142c>
    9424:	2701      	movs	r7, #1
    9426:	e7f5      	b.n	9414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1414>
    9428:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    942c:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    9430:	f041 0104 	orr.w	r1, r1, #4
    9434:	7001      	strb	r1, [r0, #0]
    9436:	6920      	ldr	r0, [r4, #16]
    9438:	f7fc fd54 	bl	5ee4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    943c:	f04f 0801 	mov.w	r8, #1
    9440:	2600      	movs	r6, #0
    9442:	b308      	cbz	r0, 9488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1488>
    9444:	4639      	mov	r1, r7
    9446:	6920      	ldr	r0, [r4, #16]
    9448:	f7fe ff86 	bl	8358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x358>
    944c:	b1e0      	cbz	r0, 9488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1488>
    944e:	466a      	mov	r2, sp
    9450:	6921      	ldr	r1, [r4, #16]
    9452:	68a0      	ldr	r0, [r4, #8]
    9454:	f004 f8da 	bl	d60c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9458:	b388      	cbz	r0, 94be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14be>
    945a:	6920      	ldr	r0, [r4, #16]
    945c:	f004 fa2a 	bl	d8b4 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9460:	68a1      	ldr	r1, [r4, #8]
    9462:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9466:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    946a:	f005 faed 	bl	ea48 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    946e:	b338      	cbz	r0, 94c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c0>
    9470:	68a0      	ldr	r0, [r4, #8]
    9472:	2128      	movs	r1, #40	; 0x28
    9474:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9478:	3076      	adds	r0, #118	; 0x76
    947a:	f880 801e 	strb.w	r8, [r0, #30]
    947e:	e053      	b.n	9528 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1528>
    9480:	e7ff      	b.n	9482 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1482>
    9482:	2002      	movs	r0, #2
    9484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9488:	68a0      	ldr	r0, [r4, #8]
    948a:	f04f 0900 	mov.w	r9, #0
    948e:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9492:	2901      	cmp	r1, #1
    9494:	d015      	beq.n	94c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c2>
    9496:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    949a:	b1f7      	cbz	r7, 94da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14da>
    949c:	6920      	ldr	r0, [r4, #16]
    949e:	68a1      	ldr	r1, [r4, #8]
    94a0:	78c0      	ldrb	r0, [r0, #3]
    94a2:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    94a6:	fa08 f200 	lsl.w	r2, r8, r0
    94aa:	f3c2 6000 	ubfx	r0, r2, #24, #1
    94ae:	b160      	cbz	r0, 94ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14ca>
    94b0:	200a      	movs	r0, #10
    94b2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    94b6:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    94ba:	b9a0      	cbnz	r0, 94e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e6>
    94bc:	e008      	b.n	94d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14d0>
    94be:	e014      	b.n	94ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14ea>
    94c0:	e027      	b.n	9512 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1512>
    94c2:	201e      	movs	r0, #30
    94c4:	f7ff fcec 	bl	8ea0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea0>
    94c8:	e7e7      	b.n	949a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x149a>
    94ca:	f240 31cb 	movw	r1, #971	; 0x3cb
    94ce:	e001      	b.n	94d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14d4>
    94d0:	f240 31d3 	movw	r1, #979	; 0x3d3
    94d4:	2031      	movs	r0, #49	; 0x31
    94d6:	f7fa fc85 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94da:	702e      	strb	r6, [r5, #0]
    94dc:	f7fe fe7e 	bl	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    94e0:	f7ff fe06 	bl	90f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f0>
    94e4:	4681      	mov	r9, r0
    94e6:	4648      	mov	r0, r9
    94e8:	e7cc      	b.n	9484 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1484>
    94ea:	68a0      	ldr	r0, [r4, #8]
    94ec:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    94f0:	2901      	cmp	r1, #1
    94f2:	d009      	beq.n	9508 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1508>
    94f4:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    94f8:	68a0      	ldr	r0, [r4, #8]
    94fa:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    94fe:	428d      	cmp	r5, r1
    9500:	d112      	bne.n	9528 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1528>
    9502:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    9506:	e00f      	b.n	9528 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1528>
    9508:	2000      	movs	r0, #0
    950a:	f7ff fcc9 	bl	8ea0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea0>
    950e:	702e      	strb	r6, [r5, #0]
    9510:	e7f2      	b.n	94f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14f8>
    9512:	68a0      	ldr	r0, [r4, #8]
    9514:	f89d 1000 	ldrb.w	r1, [sp]
    9518:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    951c:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9520:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    9524:	2024      	movs	r0, #36	; 0x24
    9526:	7028      	strb	r0, [r5, #0]
    9528:	68a0      	ldr	r0, [r4, #8]
    952a:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    952e:	428d      	cmp	r5, r1
    9530:	d102      	bne.n	9538 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1538>
    9532:	f7fe fe53 	bl	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    9536:	e001      	b.n	953c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x153c>
    9538:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    953c:	2000      	movs	r0, #0
    953e:	e7a1      	b.n	9484 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1484>
    9540:	2000011c 	.word	0x2000011c
    9544:	b510      	push	{r4, lr}
    9546:	4c0a      	ldr	r4, [pc, #40]	; (9570 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1570>)
    9548:	68a0      	ldr	r0, [r4, #8]
    954a:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    954e:	f041 0104 	orr.w	r1, r1, #4
    9552:	7001      	strb	r1, [r0, #0]
    9554:	6920      	ldr	r0, [r4, #16]
    9556:	f004 f9db 	bl	d910 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    955a:	2816      	cmp	r0, #22
    955c:	d001      	beq.n	9562 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1562>
    955e:	2000      	movs	r0, #0
    9560:	bd10      	pop	{r4, pc}
    9562:	6920      	ldr	r0, [r4, #16]
    9564:	f004 f9d6 	bl	d914 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    956c:	f7fe be08 	b.w	8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    9570:	2000011c 	.word	0x2000011c
    9574:	4802      	ldr	r0, [pc, #8]	; (9580 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1580>)
    9576:	6900      	ldr	r0, [r0, #16]
    9578:	7900      	ldrb	r0, [r0, #4]
    957a:	f7fe be01 	b.w	8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    957e:	0000      	.short	0x0000
    9580:	2000011c 	.word	0x2000011c
    9584:	b510      	push	{r4, lr}
    9586:	4c08      	ldr	r4, [pc, #32]	; (95a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a8>)
    9588:	68a0      	ldr	r0, [r4, #8]
    958a:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    958e:	2817      	cmp	r0, #23
    9590:	d001      	beq.n	9596 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1596>
    9592:	2002      	movs	r0, #2
    9594:	bd10      	pop	{r4, pc}
    9596:	f7fe fe21 	bl	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    959a:	68a1      	ldr	r1, [r4, #8]
    959c:	201b      	movs	r0, #27
    959e:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    95a2:	2000      	movs	r0, #0
    95a4:	bd10      	pop	{r4, pc}
    95a6:	0000      	.short	0x0000
    95a8:	2000011c 	.word	0x2000011c
    95ac:	b510      	push	{r4, lr}
    95ae:	4c0b      	ldr	r4, [pc, #44]	; (95dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15dc>)
    95b0:	2301      	movs	r3, #1
    95b2:	4619      	mov	r1, r3
    95b4:	68a0      	ldr	r0, [r4, #8]
    95b6:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    95ba:	3070      	adds	r0, #112	; 0x70
    95bc:	f003 ff02 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95c0:	b108      	cbz	r0, 95c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c6>
    95c2:	2000      	movs	r0, #0
    95c4:	bd10      	pop	{r4, pc}
    95c6:	6920      	ldr	r0, [r4, #16]
    95c8:	f004 f978 	bl	d8bc <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    95cc:	68a1      	ldr	r1, [r4, #8]
    95ce:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    95d2:	2007      	movs	r0, #7
    95d4:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    95d8:	e7f3      	b.n	95c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c2>
    95da:	0000      	.short	0x0000
    95dc:	2000011c 	.word	0x2000011c
    95e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95e4:	4d37      	ldr	r5, [pc, #220]	; (96c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c4>)
    95e6:	2600      	movs	r6, #0
    95e8:	4628      	mov	r0, r5
    95ea:	68a9      	ldr	r1, [r5, #8]
    95ec:	6900      	ldr	r0, [r0, #16]
    95ee:	2701      	movs	r7, #1
    95f0:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    95f4:	7900      	ldrb	r0, [r0, #4]
    95f6:	2b0e      	cmp	r3, #14
    95f8:	d101      	bne.n	95fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15fe>
    95fa:	2812      	cmp	r0, #18
    95fc:	d006      	beq.n	960c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160c>
    95fe:	4a31      	ldr	r2, [pc, #196]	; (96c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c4>)
    9600:	2400      	movs	r4, #0
    9602:	6892      	ldr	r2, [r2, #8]
    9604:	32bc      	adds	r2, #188	; 0xbc
    9606:	2b1c      	cmp	r3, #28
    9608:	d004      	beq.n	9614 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1614>
    960a:	e005      	b.n	9618 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1618>
    960c:	f7ff fe44 	bl	9298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1298>
    9610:	4606      	mov	r6, r0
    9612:	e053      	b.n	96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>
    9614:	2814      	cmp	r0, #20
    9616:	d002      	beq.n	961e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x161e>
    9618:	2b04      	cmp	r3, #4
    961a:	d00b      	beq.n	9634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1634>
    961c:	e00c      	b.n	9638 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1638>
    961e:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    9622:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    9626:	2105      	movs	r1, #5
    9628:	4610      	mov	r0, r2
    962a:	f005 f99e 	bl	e96a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    962e:	f7fe ff8d 	bl	854c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54c>
    9632:	e043      	b.n	96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>
    9634:	280e      	cmp	r0, #14
    9636:	d002      	beq.n	963e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x163e>
    9638:	2b20      	cmp	r3, #32
    963a:	d00f      	beq.n	965c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x165c>
    963c:	e010      	b.n	9660 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1660>
    963e:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    9642:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    9646:	8808      	ldrh	r0, [r1, #0]
    9648:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    964c:	201a      	movs	r0, #26
    964e:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    9652:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    9656:	f000 fb8f 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    965a:	e02f      	b.n	96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>
    965c:	2816      	cmp	r0, #22
    965e:	d006      	beq.n	966e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166e>
    9660:	2b26      	cmp	r3, #38	; 0x26
    9662:	d101      	bne.n	9668 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1668>
    9664:	2816      	cmp	r0, #22
    9666:	d002      	beq.n	966e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166e>
    9668:	2817      	cmp	r0, #23
    966a:	d014      	beq.n	9696 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1696>
    966c:	e026      	b.n	96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>
    966e:	f801 4f7d 	strb.w	r4, [r1, #125]!
    9672:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    9676:	7848      	ldrb	r0, [r1, #1]
    9678:	2821      	cmp	r0, #33	; 0x21
    967a:	d01f      	beq.n	96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>
    967c:	2108      	movs	r1, #8
    967e:	4610      	mov	r0, r2
    9680:	f005 f973 	bl	e96a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    9684:	68a8      	ldr	r0, [r5, #8]
    9686:	210b      	movs	r1, #11
    9688:	30bc      	adds	r0, #188	; 0xbc
    968a:	f005 f96e 	bl	e96a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    968e:	201a      	movs	r0, #26
    9690:	f7ff fc06 	bl	8ea0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea0>
    9694:	e012      	b.n	96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>
    9696:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    969a:	2822      	cmp	r0, #34	; 0x22
    969c:	d10e      	bne.n	96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>
    969e:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    96a2:	f7fe fd9b 	bl	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    96a6:	68a8      	ldr	r0, [r5, #8]
    96a8:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    96ac:	2801      	cmp	r0, #1
    96ae:	d102      	bne.n	96b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16b6>
    96b0:	2000      	movs	r0, #0
    96b2:	f7ff fbf5 	bl	8ea0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea0>
    96b6:	68a8      	ldr	r0, [r5, #8]
    96b8:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    96bc:	4630      	mov	r0, r6
    96be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96c2:	0000      	.short	0x0000
    96c4:	2000011c 	.word	0x2000011c
    96c8:	b570      	push	{r4, r5, r6, lr}
    96ca:	4c2c      	ldr	r4, [pc, #176]	; (977c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x177c>)
    96cc:	68a0      	ldr	r0, [r4, #8]
    96ce:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    96d2:	0789      	lsls	r1, r1, #30
    96d4:	d507      	bpl.n	96e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16e6>
    96d6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    96da:	2301      	movs	r3, #1
    96dc:	2108      	movs	r1, #8
    96de:	3070      	adds	r0, #112	; 0x70
    96e0:	f003 fe70 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96e4:	b1e8      	cbz	r0, 9722 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1722>
    96e6:	68a0      	ldr	r0, [r4, #8]
    96e8:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    96ec:	0780      	lsls	r0, r0, #30
    96ee:	d412      	bmi.n	9716 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1716>
    96f0:	6920      	ldr	r0, [r4, #16]
    96f2:	f004 f8e5 	bl	d8c0 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    96f6:	68a1      	ldr	r1, [r4, #8]
    96f8:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    96fc:	6920      	ldr	r0, [r4, #16]
    96fe:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    9702:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    9706:	8840      	ldrh	r0, [r0, #2]
    9708:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    970c:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    9710:	f040 0002 	orr.w	r0, r0, #2
    9714:	7008      	strb	r0, [r1, #0]
    9716:	68a0      	ldr	r0, [r4, #8]
    9718:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    971c:	07c9      	lsls	r1, r1, #31
    971e:	d002      	beq.n	9726 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1726>
    9720:	e010      	b.n	9744 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1744>
    9722:	2001      	movs	r0, #1
    9724:	bd70      	pop	{r4, r5, r6, pc}
    9726:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    972a:	078a      	lsls	r2, r1, #30
    972c:	d504      	bpl.n	9738 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1738>
    972e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    9732:	2031      	movs	r0, #49	; 0x31
    9734:	f7fa fb56 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9738:	f041 0102 	orr.w	r1, r1, #2
    973c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9740:	f7fe fd40 	bl	81c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    9744:	68a0      	ldr	r0, [r4, #8]
    9746:	2500      	movs	r5, #0
    9748:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    974c:	2906      	cmp	r1, #6
    974e:	d105      	bne.n	975c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x175c>
    9750:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    9754:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    9758:	f000 fb0e 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    975c:	68a0      	ldr	r0, [r4, #8]
    975e:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9762:	b149      	cbz	r1, 9778 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1778>
    9764:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    9768:	f000 fb06 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    976c:	68a0      	ldr	r0, [r4, #8]
    976e:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9772:	b909      	cbnz	r1, 9778 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1778>
    9774:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    9778:	2000      	movs	r0, #0
    977a:	bd70      	pop	{r4, r5, r6, pc}
    977c:	2000011c 	.word	0x2000011c
    9780:	b510      	push	{r4, lr}
    9782:	4c17      	ldr	r4, [pc, #92]	; (97e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e0>)
    9784:	68a3      	ldr	r3, [r4, #8]
    9786:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    978a:	2808      	cmp	r0, #8
    978c:	d20e      	bcs.n	97ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17ac>
    978e:	f100 0208 	add.w	r2, r0, #8
    9792:	f1c0 0008 	rsb	r0, r0, #8
    9796:	b2c1      	uxtb	r1, r0
    9798:	1898      	adds	r0, r3, r2
    979a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    979e:	f7fa fbad 	bl	3efc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    97a2:	68a1      	ldr	r1, [r4, #8]
    97a4:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    97a8:	4410      	add	r0, r2
    97aa:	7008      	strb	r0, [r1, #0]
    97ac:	68a3      	ldr	r3, [r4, #8]
    97ae:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    97b2:	3808      	subs	r0, #8
    97b4:	2804      	cmp	r0, #4
    97b6:	d211      	bcs.n	97dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17dc>
    97b8:	1d02      	adds	r2, r0, #4
    97ba:	f1c0 0004 	rsb	r0, r0, #4
    97be:	b2c1      	uxtb	r1, r0
    97c0:	1898      	adds	r0, r3, r2
    97c2:	30e0      	adds	r0, #224	; 0xe0
    97c4:	f7fa fb9a 	bl	3efc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    97c8:	68a0      	ldr	r0, [r4, #8]
    97ca:	2100      	movs	r1, #0
    97cc:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    97d0:	2101      	movs	r1, #1
    97d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97d6:	2004      	movs	r0, #4
    97d8:	f7ff ba64 	b.w	8ca4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca4>
    97dc:	bd10      	pop	{r4, pc}
    97de:	0000      	.short	0x0000
    97e0:	2000011c 	.word	0x2000011c
    97e4:	4804      	ldr	r0, [pc, #16]	; (97f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17f8>)
    97e6:	2127      	movs	r1, #39	; 0x27
    97e8:	6880      	ldr	r0, [r0, #8]
    97ea:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    97ee:	2100      	movs	r1, #0
    97f0:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    97f4:	4770      	bx	lr
    97f6:	0000      	.short	0x0000
    97f8:	2000011c 	.word	0x2000011c
    97fc:	4809      	ldr	r0, [pc, #36]	; (9824 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1824>)
    97fe:	b510      	push	{r4, lr}
    9800:	6880      	ldr	r0, [r0, #8]
    9802:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9806:	2914      	cmp	r1, #20
    9808:	d004      	beq.n	9814 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1814>
    980a:	f240 619a 	movw	r1, #1690	; 0x69a
    980e:	2031      	movs	r0, #49	; 0x31
    9810:	f7fa fae8 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9814:	2101      	movs	r1, #1
    9816:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    981a:	2115      	movs	r1, #21
    981c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9820:	bd10      	pop	{r4, pc}
    9822:	0000      	.short	0x0000
    9824:	2000011c 	.word	0x2000011c
    9828:	b510      	push	{r4, lr}
    982a:	4c0a      	ldr	r4, [pc, #40]	; (9854 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1854>)
    982c:	68a0      	ldr	r0, [r4, #8]
    982e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9832:	07c0      	lsls	r0, r0, #31
    9834:	d008      	beq.n	9848 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1848>
    9836:	f7fe fcd1 	bl	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    983a:	68a0      	ldr	r0, [r4, #8]
    983c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9840:	f021 0101 	bic.w	r1, r1, #1
    9844:	7001      	strb	r1, [r0, #0]
    9846:	bd10      	pop	{r4, pc}
    9848:	f240 6183 	movw	r1, #1667	; 0x683
    984c:	2031      	movs	r0, #49	; 0x31
    984e:	f7fa fac9 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9852:	0000      	.short	0x0000
    9854:	2000011c 	.word	0x2000011c
    9858:	b510      	push	{r4, lr}
    985a:	4c0a      	ldr	r4, [pc, #40]	; (9884 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1884>)
    985c:	2301      	movs	r3, #1
    985e:	2100      	movs	r1, #0
    9860:	68a0      	ldr	r0, [r4, #8]
    9862:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9866:	3070      	adds	r0, #112	; 0x70
    9868:	f003 fdac 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    986c:	b120      	cbz	r0, 9878 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1878>
    986e:	68a1      	ldr	r1, [r4, #8]
    9870:	201c      	movs	r0, #28
    9872:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9876:	bd10      	pop	{r4, pc}
    9878:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    987c:	2031      	movs	r0, #49	; 0x31
    987e:	f7fa fab1 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9882:	0000      	.short	0x0000
    9884:	2000011c 	.word	0x2000011c
    9888:	480a      	ldr	r0, [pc, #40]	; (98b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18b4>)
    988a:	b510      	push	{r4, lr}
    988c:	6880      	ldr	r0, [r0, #8]
    988e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9892:	f3c1 1201 	ubfx	r2, r1, #4, #2
    9896:	2a01      	cmp	r2, #1
    9898:	d004      	beq.n	98a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a4>
    989a:	f240 710f 	movw	r1, #1807	; 0x70f
    989e:	2031      	movs	r0, #49	; 0x31
    98a0:	f7fa faa0 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98a4:	f021 0110 	bic.w	r1, r1, #16
    98a8:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    98ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98b0:	f7fe bc94 	b.w	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    98b4:	2000011c 	.word	0x2000011c
    98b8:	b510      	push	{r4, lr}
    98ba:	4c0a      	ldr	r4, [pc, #40]	; (98e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18e4>)
    98bc:	2301      	movs	r3, #1
    98be:	2100      	movs	r1, #0
    98c0:	68a0      	ldr	r0, [r4, #8]
    98c2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    98c6:	3070      	adds	r0, #112	; 0x70
    98c8:	f003 fd7c 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98cc:	b120      	cbz	r0, 98d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18d8>
    98ce:	68a1      	ldr	r1, [r4, #8]
    98d0:	200e      	movs	r0, #14
    98d2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    98d6:	bd10      	pop	{r4, pc}
    98d8:	f240 61fb 	movw	r1, #1787	; 0x6fb
    98dc:	2031      	movs	r0, #49	; 0x31
    98de:	f7fa fa81 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98e2:	0000      	.short	0x0000
    98e4:	2000011c 	.word	0x2000011c
    98e8:	4804      	ldr	r0, [pc, #16]	; (98fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18fc>)
    98ea:	6880      	ldr	r0, [r0, #8]
    98ec:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    98f0:	f021 0104 	bic.w	r1, r1, #4
    98f4:	7001      	strb	r1, [r0, #0]
    98f6:	f7fe bc71 	b.w	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    98fa:	0000      	.short	0x0000
    98fc:	2000011c 	.word	0x2000011c
    9900:	4809      	ldr	r0, [pc, #36]	; (9928 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1928>)
    9902:	b510      	push	{r4, lr}
    9904:	6880      	ldr	r0, [r0, #8]
    9906:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    990a:	2910      	cmp	r1, #16
    990c:	d004      	beq.n	9918 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1918>
    990e:	f240 6192 	movw	r1, #1682	; 0x692
    9912:	2031      	movs	r0, #49	; 0x31
    9914:	f7fa fa66 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9918:	2101      	movs	r1, #1
    991a:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    991e:	2111      	movs	r1, #17
    9920:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9924:	bd10      	pop	{r4, pc}
    9926:	0000      	.short	0x0000
    9928:	2000011c 	.word	0x2000011c
    992c:	b510      	push	{r4, lr}
    992e:	4c0a      	ldr	r4, [pc, #40]	; (9958 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1958>)
    9930:	2301      	movs	r3, #1
    9932:	2100      	movs	r1, #0
    9934:	68a0      	ldr	r0, [r4, #8]
    9936:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    993a:	3070      	adds	r0, #112	; 0x70
    993c:	f003 fd42 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9940:	b120      	cbz	r0, 994c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194c>
    9942:	68a1      	ldr	r1, [r4, #8]
    9944:	201f      	movs	r0, #31
    9946:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    994a:	bd10      	pop	{r4, pc}
    994c:	f240 711b 	movw	r1, #1819	; 0x71b
    9950:	2031      	movs	r0, #49	; 0x31
    9952:	f7fa fa47 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9956:	0000      	.short	0x0000
    9958:	2000011c 	.word	0x2000011c
    995c:	4808      	ldr	r0, [pc, #32]	; (9980 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1980>)
    995e:	b510      	push	{r4, lr}
    9960:	6880      	ldr	r0, [r0, #8]
    9962:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9966:	2921      	cmp	r1, #33	; 0x21
    9968:	d005      	beq.n	9976 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1976>
    996a:	b121      	cbz	r1, 9976 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1976>
    996c:	f240 7122 	movw	r1, #1826	; 0x722
    9970:	2031      	movs	r0, #49	; 0x31
    9972:	f7fa fa37 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9976:	2122      	movs	r1, #34	; 0x22
    9978:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    997c:	bd10      	pop	{r4, pc}
    997e:	0000      	.short	0x0000
    9980:	2000011c 	.word	0x2000011c
    9984:	4807      	ldr	r0, [pc, #28]	; (99a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a4>)
    9986:	b510      	push	{r4, lr}
    9988:	6880      	ldr	r0, [r0, #8]
    998a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    998e:	2915      	cmp	r1, #21
    9990:	d004      	beq.n	999c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x199c>
    9992:	f240 61a7 	movw	r1, #1703	; 0x6a7
    9996:	2031      	movs	r0, #49	; 0x31
    9998:	f7fa fa24 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    999c:	2119      	movs	r1, #25
    999e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    99a2:	bd10      	pop	{r4, pc}
    99a4:	2000011c 	.word	0x2000011c
    99a8:	4807      	ldr	r0, [pc, #28]	; (99c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c8>)
    99aa:	b510      	push	{r4, lr}
    99ac:	6880      	ldr	r0, [r0, #8]
    99ae:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    99b2:	2915      	cmp	r1, #21
    99b4:	d004      	beq.n	99c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c0>
    99b6:	f240 61a1 	movw	r1, #1697	; 0x6a1
    99ba:	2031      	movs	r0, #49	; 0x31
    99bc:	f7fa fa12 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99c0:	2117      	movs	r1, #23
    99c2:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    99c6:	bd10      	pop	{r4, pc}
    99c8:	2000011c 	.word	0x2000011c
    99cc:	b570      	push	{r4, r5, r6, lr}
    99ce:	4d1b      	ldr	r5, [pc, #108]	; (9a3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a3c>)
    99d0:	68a8      	ldr	r0, [r5, #8]
    99d2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    99d6:	291b      	cmp	r1, #27
    99d8:	d002      	beq.n	99e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19e0>
    99da:	f240 61c1 	movw	r1, #1729	; 0x6c1
    99de:	e007      	b.n	99f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19f0>
    99e0:	2400      	movs	r4, #0
    99e2:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    99e6:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    99ea:	b121      	cbz	r1, 99f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19f6>
    99ec:	f240 61c5 	movw	r1, #1733	; 0x6c5
    99f0:	2031      	movs	r0, #49	; 0x31
    99f2:	f7fa f9f7 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99f6:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    99fa:	b141      	cbz	r1, 9a0e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0e>
    99fc:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    9a00:	8801      	ldrh	r1, [r0, #0]
    9a02:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    9a06:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    9a0a:	210c      	movs	r1, #12
    9a0c:	e008      	b.n	9a20 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a20>
    9a0e:	8801      	ldrh	r1, [r0, #0]
    9a10:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    9a14:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    9a18:	2101      	movs	r1, #1
    9a1a:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    9a1e:	210b      	movs	r1, #11
    9a20:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    9a24:	8800      	ldrh	r0, [r0, #0]
    9a26:	f7fa fe05 	bl	4634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9a2a:	f003 f945 	bl	ccb8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9a2e:	f000 f9a3 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a32:	68a8      	ldr	r0, [r5, #8]
    9a34:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    9a38:	bd70      	pop	{r4, r5, r6, pc}
    9a3a:	0000      	.short	0x0000
    9a3c:	2000011c 	.word	0x2000011c
    9a40:	b510      	push	{r4, lr}
    9a42:	4c08      	ldr	r4, [pc, #32]	; (9a64 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a64>)
    9a44:	2301      	movs	r3, #1
    9a46:	4619      	mov	r1, r3
    9a48:	68a0      	ldr	r0, [r4, #8]
    9a4a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9a4e:	3070      	adds	r0, #112	; 0x70
    9a50:	f003 fcb8 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a54:	2800      	cmp	r0, #0
    9a56:	d103      	bne.n	9a60 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a60>
    9a58:	68a1      	ldr	r1, [r4, #8]
    9a5a:	2008      	movs	r0, #8
    9a5c:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9a60:	bd10      	pop	{r4, pc}
    9a62:	0000      	.short	0x0000
    9a64:	2000011c 	.word	0x2000011c
    9a68:	4814      	ldr	r0, [pc, #80]	; (9abc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1abc>)
    9a6a:	b510      	push	{r4, lr}
    9a6c:	68c1      	ldr	r1, [r0, #12]
    9a6e:	6880      	ldr	r0, [r0, #8]
    9a70:	7909      	ldrb	r1, [r1, #4]
    9a72:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9a76:	2a0a      	cmp	r2, #10
    9a78:	d109      	bne.n	9a8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8e>
    9a7a:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    9a7e:	428a      	cmp	r2, r1
    9a80:	d105      	bne.n	9a8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8e>
    9a82:	2100      	movs	r1, #0
    9a84:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9a88:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9a8c:	bd10      	pop	{r4, pc}
    9a8e:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9a92:	0713      	lsls	r3, r2, #28
    9a94:	d507      	bpl.n	9aa6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa6>
    9a96:	f022 0108 	bic.w	r1, r2, #8
    9a9a:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9aa2:	f7fe bb9b 	b.w	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    9aa6:	29ff      	cmp	r1, #255	; 0xff
    9aa8:	d004      	beq.n	9ab4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ab4>
    9aaa:	f240 617d 	movw	r1, #1661	; 0x67d
    9aae:	2031      	movs	r0, #49	; 0x31
    9ab0:	f7fa f998 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ab8:	f7ff be94 	b.w	97e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e4>
    9abc:	2000011c 	.word	0x2000011c
    9ac0:	b510      	push	{r4, lr}
    9ac2:	4c15      	ldr	r4, [pc, #84]	; (9b18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b18>)
    9ac4:	68a0      	ldr	r0, [r4, #8]
    9ac6:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    9aca:	0789      	lsls	r1, r1, #30
    9acc:	d411      	bmi.n	9af2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1af2>
    9ace:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9ad2:	2301      	movs	r3, #1
    9ad4:	2100      	movs	r1, #0
    9ad6:	3070      	adds	r0, #112	; 0x70
    9ad8:	f003 fc74 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9adc:	b120      	cbz	r0, 9ae8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ae8>
    9ade:	68a1      	ldr	r1, [r4, #8]
    9ae0:	2006      	movs	r0, #6
    9ae2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9ae6:	e009      	b.n	9afc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1afc>
    9ae8:	f240 61e7 	movw	r1, #1767	; 0x6e7
    9aec:	2031      	movs	r0, #49	; 0x31
    9aee:	f7fa f979 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9af2:	2100      	movs	r1, #0
    9af4:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9af8:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    9afc:	68a0      	ldr	r0, [r4, #8]
    9afe:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9b02:	0780      	lsls	r0, r0, #30
    9b04:	d507      	bpl.n	9b16 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b16>
    9b06:	f7fe fb69 	bl	81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>
    9b0a:	68a0      	ldr	r0, [r4, #8]
    9b0c:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9b10:	f021 0102 	bic.w	r1, r1, #2
    9b14:	7001      	strb	r1, [r0, #0]
    9b16:	bd10      	pop	{r4, pc}
    9b18:	2000011c 	.word	0x2000011c
    9b1c:	4808      	ldr	r0, [pc, #32]	; (9b40 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b40>)
    9b1e:	b510      	push	{r4, lr}
    9b20:	6880      	ldr	r0, [r0, #8]
    9b22:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    9b26:	b941      	cbnz	r1, 9b3a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b3a>
    9b28:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9b2c:	2301      	movs	r3, #1
    9b2e:	2106      	movs	r1, #6
    9b30:	3070      	adds	r0, #112	; 0x70
    9b32:	f003 fc47 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b36:	2800      	cmp	r0, #0
    9b38:	d000      	beq.n	9b3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b3c>
    9b3a:	2001      	movs	r0, #1
    9b3c:	bd10      	pop	{r4, pc}
    9b3e:	0000      	.short	0x0000
    9b40:	2000011c 	.word	0x2000011c
    9b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b46:	4c59      	ldr	r4, [pc, #356]	; (9cac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cac>)
    9b48:	4606      	mov	r6, r0
    9b4a:	4615      	mov	r5, r2
    9b4c:	68a0      	ldr	r0, [r4, #8]
    9b4e:	b109      	cbz	r1, 9b54 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b54>
    9b50:	2100      	movs	r1, #0
    9b52:	e004      	b.n	9b5e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b5e>
    9b54:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9b58:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    9b5c:	4411      	add	r1, r2
    9b5e:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    9b62:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    9b66:	f88d 1000 	strb.w	r1, [sp]
    9b6a:	9900      	ldr	r1, [sp, #0]
    9b6c:	9100      	str	r1, [sp, #0]
    9b6e:	f89d 1000 	ldrb.w	r1, [sp]
    9b72:	b939      	cbnz	r1, 9b84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b84>
    9b74:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9b78:	2301      	movs	r3, #1
    9b7a:	4619      	mov	r1, r3
    9b7c:	3070      	adds	r0, #112	; 0x70
    9b7e:	f003 fc21 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b82:	b130      	cbz	r0, 9b92 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b92>
    9b84:	68a0      	ldr	r0, [r4, #8]
    9b86:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    9b8a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    9b8e:	4411      	add	r1, r2
    9b90:	8001      	strh	r1, [r0, #0]
    9b92:	68a0      	ldr	r0, [r4, #8]
    9b94:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    9b98:	b132      	cbz	r2, 9ba8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ba8>
    9b9a:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    9b9e:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    9ba2:	4419      	add	r1, r3
    9ba4:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    9ba8:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    9bac:	2b00      	cmp	r3, #0
    9bae:	dd06      	ble.n	9bbe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bbe>
    9bb0:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9bb4:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    9bb8:	4439      	add	r1, r7
    9bba:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    9bbe:	2101      	movs	r1, #1
    9bc0:	273d      	movs	r7, #61	; 0x3d
    9bc2:	b116      	cbz	r6, 9bca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bca>
    9bc4:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9bc8:	e012      	b.n	9bf0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bf0>
    9bca:	7824      	ldrb	r4, [r4, #0]
    9bcc:	2c02      	cmp	r4, #2
    9bce:	d009      	beq.n	9be4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1be4>
    9bd0:	2c01      	cmp	r4, #1
    9bd2:	d011      	beq.n	9bf8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bf8>
    9bd4:	b33d      	cbz	r5, 9c26 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c26>
    9bd6:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9bda:	7011      	strb	r1, [r2, #0]
    9bdc:	06e9      	lsls	r1, r5, #27
    9bde:	d50e      	bpl.n	9bfe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bfe>
    9be0:	211e      	movs	r1, #30
    9be2:	e018      	b.n	9c16 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c16>
    9be4:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    9be8:	2a06      	cmp	r2, #6
    9bea:	d044      	beq.n	9c76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c76>
    9bec:	2216      	movs	r2, #22
    9bee:	e042      	b.n	9c76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c76>
    9bf0:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9bf4:	7011      	strb	r1, [r2, #0]
    9bf6:	e047      	b.n	9c88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c88>
    9bf8:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    9bfc:	e03b      	b.n	9c76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c76>
    9bfe:	0729      	lsls	r1, r5, #28
    9c00:	d502      	bpl.n	9c08 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c08>
    9c02:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9c06:	e03f      	b.n	9c88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c88>
    9c08:	06a9      	lsls	r1, r5, #26
    9c0a:	d501      	bpl.n	9c10 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c10>
    9c0c:	2123      	movs	r1, #35	; 0x23
    9c0e:	e002      	b.n	9c16 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c16>
    9c10:	07a9      	lsls	r1, r5, #30
    9c12:	d003      	beq.n	9c1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c1c>
    9c14:	212a      	movs	r1, #42	; 0x2a
    9c16:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9c1a:	e035      	b.n	9c88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c88>
    9c1c:	f640 41bc 	movw	r1, #3260	; 0xcbc
    9c20:	2031      	movs	r0, #49	; 0x31
    9c22:	f7fa f8df 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c26:	b12a      	cbz	r2, 9c34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c34>
    9c28:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    9c2c:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    9c30:	42a2      	cmp	r2, r4
    9c32:	d216      	bcs.n	9c62 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c62>
    9c34:	2b00      	cmp	r3, #0
    9c36:	dd05      	ble.n	9c44 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c44>
    9c38:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    9c3c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    9c40:	429a      	cmp	r2, r3
    9c42:	d20e      	bcs.n	9c62 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c62>
    9c44:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    9c48:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9c4c:	4293      	cmp	r3, r2
    9c4e:	d30a      	bcc.n	9c66 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c66>
    9c50:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    9c54:	f88d 3000 	strb.w	r3, [sp]
    9c58:	9b00      	ldr	r3, [sp, #0]
    9c5a:	9300      	str	r3, [sp, #0]
    9c5c:	f89d 3000 	ldrb.w	r3, [sp]
    9c60:	b10b      	cbz	r3, 9c66 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c66>
    9c62:	2222      	movs	r2, #34	; 0x22
    9c64:	e007      	b.n	9c76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c76>
    9c66:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    9c6a:	b13b      	cbz	r3, 9c7c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c7c>
    9c6c:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9c70:	4293      	cmp	r3, r2
    9c72:	d309      	bcc.n	9c88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c88>
    9c74:	2208      	movs	r2, #8
    9c76:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    9c7a:	e7b9      	b.n	9bf0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bf0>
    9c7c:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    9c80:	2a06      	cmp	r2, #6
    9c82:	d301      	bcc.n	9c88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c88>
    9c84:	223e      	movs	r2, #62	; 0x3e
    9c86:	e7f6      	b.n	9c76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c76>
    9c88:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    9c8c:	f88d 1000 	strb.w	r1, [sp]
    9c90:	9900      	ldr	r1, [sp, #0]
    9c92:	9100      	str	r1, [sp, #0]
    9c94:	f89d 1000 	ldrb.w	r1, [sp]
    9c98:	b119      	cbz	r1, 9ca2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ca2>
    9c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9c9e:	f004 bea3 	b.w	e9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9ca6:	2100      	movs	r1, #0
    9ca8:	f7fd bbc8 	b.w	743c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9cac:	2000011c 	.word	0x2000011c
    9cb0:	b570      	push	{r4, r5, r6, lr}
    9cb2:	4d2d      	ldr	r5, [pc, #180]	; (9d68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d68>)
    9cb4:	68a8      	ldr	r0, [r5, #8]
    9cb6:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9cba:	b151      	cbz	r1, 9cd2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cd2>
    9cbc:	2901      	cmp	r1, #1
    9cbe:	d008      	beq.n	9cd2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cd2>
    9cc0:	2902      	cmp	r1, #2
    9cc2:	d009      	beq.n	9cd8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cd8>
    9cc4:	2903      	cmp	r1, #3
    9cc6:	d007      	beq.n	9cd8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cd8>
    9cc8:	f640 217a 	movw	r1, #2682	; 0xa7a
    9ccc:	2031      	movs	r0, #49	; 0x31
    9cce:	f7fa f889 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cd2:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9cd6:	e035      	b.n	9d44 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d44>
    9cd8:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9cdc:	2908      	cmp	r1, #8
    9cde:	d034      	beq.n	9d4a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4a>
    9ce0:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9ce4:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9ce8:	2400      	movs	r4, #0
    9cea:	1c8b      	adds	r3, r1, #2
    9cec:	429a      	cmp	r2, r3
    9cee:	d306      	bcc.n	9cfe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cfe>
    9cf0:	1a51      	subs	r1, r2, r1
    9cf2:	1e89      	subs	r1, r1, #2
    9cf4:	040c      	lsls	r4, r1, #16
    9cf6:	0c24      	lsrs	r4, r4, #16
    9cf8:	d001      	beq.n	9cfe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cfe>
    9cfa:	1e64      	subs	r4, r4, #1
    9cfc:	b2a4      	uxth	r4, r4
    9cfe:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    9d02:	b139      	cbz	r1, 9d14 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d14>
    9d04:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9d08:	2301      	movs	r3, #1
    9d0a:	2109      	movs	r1, #9
    9d0c:	3070      	adds	r0, #112	; 0x70
    9d0e:	f003 fb59 	bl	d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d12:	b330      	cbz	r0, 9d62 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d62>
    9d14:	f7ff ff02 	bl	9b1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b1c>
    9d18:	b168      	cbz	r0, 9d36 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d36>
    9d1a:	68a9      	ldr	r1, [r5, #8]
    9d1c:	2000      	movs	r0, #0
    9d1e:	3198      	adds	r1, #152	; 0x98
    9d20:	c906      	ldmia	r1, {r1, r2}
    9d22:	1c8b      	adds	r3, r1, #2
    9d24:	429a      	cmp	r2, r3
    9d26:	d303      	bcc.n	9d30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d30>
    9d28:	1a50      	subs	r0, r2, r1
    9d2a:	1e80      	subs	r0, r0, #2
    9d2c:	d000      	beq.n	9d30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d30>
    9d2e:	1e40      	subs	r0, r0, #1
    9d30:	42a0      	cmp	r0, r4
    9d32:	d200      	bcs.n	9d36 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d36>
    9d34:	b284      	uxth	r4, r0
    9d36:	b10c      	cbz	r4, 9d3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d3c>
    9d38:	1e64      	subs	r4, r4, #1
    9d3a:	b2a4      	uxth	r4, r4
    9d3c:	68a8      	ldr	r0, [r5, #8]
    9d3e:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9d42:	4421      	add	r1, r4
    9d44:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    9d48:	bd70      	pop	{r4, r5, r6, pc}
    9d4a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9d4e:	2903      	cmp	r1, #3
    9d50:	d3bf      	bcc.n	9cd2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cd2>
    9d52:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    9d56:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9d58:	4411      	add	r1, r2
    9d5a:	1c49      	adds	r1, r1, #1
    9d5c:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9d60:	bd70      	pop	{r4, r5, r6, pc}
    9d62:	2400      	movs	r4, #0
    9d64:	e7ea      	b.n	9d3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d3c>
    9d66:	0000      	.short	0x0000
    9d68:	2000011c 	.word	0x2000011c

00009d6c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    9d6c:	4901      	ldr	r1, [pc, #4]	; (9d74 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    9d6e:	7008      	strb	r0, [r1, #0]
    9d70:	4770      	bx	lr
    9d72:	0000      	.short	0x0000
    9d74:	2000029b 	.word	0x2000029b

00009d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    9d78:	4801      	ldr	r0, [pc, #4]	; (9d80 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    9d7a:	7800      	ldrb	r0, [r0, #0]
    9d7c:	f7f9 be5a 	b.w	3a34 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9d80:	2000029b 	.word	0x2000029b

00009d84 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9d84:	4903      	ldr	r1, [pc, #12]	; (9d94 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9d86:	888a      	ldrh	r2, [r1, #4]
    9d88:	8002      	strh	r2, [r0, #0]
    9d8a:	7889      	ldrb	r1, [r1, #2]
    9d8c:	7081      	strb	r1, [r0, #2]
    9d8e:	2000      	movs	r0, #0
    9d90:	4770      	bx	lr
    9d92:	0000      	.short	0x0000
    9d94:	20000f38 	.word	0x20000f38

00009d98 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9d98:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9d9a:	460c      	mov	r4, r1
    9d9c:	4605      	mov	r5, r0
    9d9e:	8800      	ldrh	r0, [r0, #0]
    9da0:	4669      	mov	r1, sp
    9da2:	f003 fae5 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9da6:	0001      	movs	r1, r0
    9da8:	f04f 0000 	mov.w	r0, #0
    9dac:	d005      	beq.n	9dba <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    9dae:	f8c4 0002 	str.w	r0, [r4, #2]
    9db2:	71a0      	strb	r0, [r4, #6]
    9db4:	8020      	strh	r0, [r4, #0]
    9db6:	2002      	movs	r0, #2
    9db8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9dba:	9901      	ldr	r1, [sp, #4]
    9dbc:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    9dc0:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    9dc4:	f8d1 2016 	ldr.w	r2, [r1, #22]
    9dc8:	f8c4 2002 	str.w	r2, [r4, #2]
    9dcc:	7e8a      	ldrb	r2, [r1, #26]
    9dce:	71a2      	strb	r2, [r4, #6]
    9dd0:	882a      	ldrh	r2, [r5, #0]
    9dd2:	8022      	strh	r2, [r4, #0]
    9dd4:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    9dd8:	f88d 2008 	strb.w	r2, [sp, #8]
    9ddc:	9a02      	ldr	r2, [sp, #8]
    9dde:	9202      	str	r2, [sp, #8]
    9de0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    9de4:	2a00      	cmp	r2, #0
    9de6:	d1eb      	bne.n	9dc0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    9de8:	2000      	movs	r0, #0
    9dea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009dec <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9dec:	b51c      	push	{r2, r3, r4, lr}
    9dee:	8800      	ldrh	r0, [r0, #0]
    9df0:	4669      	mov	r1, sp
    9df2:	f003 fabd 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9df6:	2800      	cmp	r0, #0
    9df8:	d10b      	bne.n	9e12 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9dfa:	480b      	ldr	r0, [pc, #44]	; (9e28 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9dfc:	7800      	ldrb	r0, [r0, #0]
    9dfe:	b188      	cbz	r0, 9e24 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9e00:	9801      	ldr	r0, [sp, #4]
    9e02:	f005 fd16 	bl	f832 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x320>
    9e06:	b128      	cbz	r0, 9e14 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9e08:	9801      	ldr	r0, [sp, #4]
    9e0a:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    9e0e:	b118      	cbz	r0, 9e18 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9e10:	203a      	movs	r0, #58	; 0x3a
    9e12:	bd1c      	pop	{r2, r3, r4, pc}
    9e14:	2002      	movs	r0, #2
    9e16:	bd1c      	pop	{r2, r3, r4, pc}
    9e18:	9901      	ldr	r1, [sp, #4]
    9e1a:	2001      	movs	r0, #1
    9e1c:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    9e20:	2000      	movs	r0, #0
    9e22:	bd1c      	pop	{r2, r3, r4, pc}
    9e24:	2011      	movs	r0, #17
    9e26:	bd1c      	pop	{r2, r3, r4, pc}
    9e28:	200001f8 	.word	0x200001f8

00009e2c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9e2c:	b510      	push	{r4, lr}
    9e2e:	4604      	mov	r4, r0
    9e30:	f005 fcf6 	bl	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    9e34:	b130      	cbz	r0, 9e44 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9e36:	4804      	ldr	r0, [pc, #16]	; (9e48 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9e38:	8881      	ldrh	r1, [r0, #4]
    9e3a:	8021      	strh	r1, [r4, #0]
    9e3c:	88c0      	ldrh	r0, [r0, #6]
    9e3e:	8060      	strh	r0, [r4, #2]
    9e40:	2000      	movs	r0, #0
    9e42:	bd10      	pop	{r4, pc}
    9e44:	2001      	movs	r0, #1
    9e46:	bd10      	pop	{r4, pc}
    9e48:	20000200 	.word	0x20000200

00009e4c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9e4c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9e4e:	4605      	mov	r5, r0
    9e50:	f000 fb3c 	bl	a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9e54:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9e58:	b310      	cbz	r0, 9ea0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9e5a:	2400      	movs	r4, #0
    9e5c:	a802      	add	r0, sp, #8
    9e5e:	f88d 4004 	strb.w	r4, [sp, #4]
    9e62:	f88d 4008 	strb.w	r4, [sp, #8]
    9e66:	9000      	str	r0, [sp, #0]
    9e68:	78aa      	ldrb	r2, [r5, #2]
    9e6a:	7869      	ldrb	r1, [r5, #1]
    9e6c:	7828      	ldrb	r0, [r5, #0]
    9e6e:	ab01      	add	r3, sp, #4
    9e70:	f005 fd30 	bl	f8d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    9e74:	2800      	cmp	r0, #0
    9e76:	d112      	bne.n	9e9e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9e78:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9e7c:	f005 fc31 	bl	f6e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9e80:	b180      	cbz	r0, 9ea4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9e82:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9e86:	f005 fc2c 	bl	f6e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9e8a:	b158      	cbz	r0, 9ea4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9e8c:	4806      	ldr	r0, [pc, #24]	; (9ea8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9e8e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9e92:	7481      	strb	r1, [r0, #18]
    9e94:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9e98:	74c1      	strb	r1, [r0, #19]
    9e9a:	8284      	strh	r4, [r0, #20]
    9e9c:	2000      	movs	r0, #0
    9e9e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ea0:	2001      	movs	r0, #1
    9ea2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ea4:	2011      	movs	r0, #17
    9ea6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ea8:	20000f38 	.word	0x20000f38

00009eac <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9eac:	7801      	ldrb	r1, [r0, #0]
    9eae:	b179      	cbz	r1, 9ed0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9eb0:	7841      	ldrb	r1, [r0, #1]
    9eb2:	b169      	cbz	r1, 9ed0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9eb4:	8841      	ldrh	r1, [r0, #2]
    9eb6:	291b      	cmp	r1, #27
    9eb8:	d30a      	bcc.n	9ed0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9eba:	8881      	ldrh	r1, [r0, #4]
    9ebc:	291b      	cmp	r1, #27
    9ebe:	d307      	bcc.n	9ed0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9ec0:	4904      	ldr	r1, [pc, #16]	; (9ed4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9ec2:	6802      	ldr	r2, [r0, #0]
    9ec4:	f8c1 2002 	str.w	r2, [r1, #2]
    9ec8:	8880      	ldrh	r0, [r0, #4]
    9eca:	80c8      	strh	r0, [r1, #6]
    9ecc:	2000      	movs	r0, #0
    9ece:	4770      	bx	lr
    9ed0:	2012      	movs	r0, #18
    9ed2:	4770      	bx	lr
    9ed4:	20000f38 	.word	0x20000f38

00009ed8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9ed8:	6800      	ldr	r0, [r0, #0]
    9eda:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9ede:	4288      	cmp	r0, r1
    9ee0:	d303      	bcc.n	9eea <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9ee2:	4903      	ldr	r1, [pc, #12]	; (9ef0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9ee4:	6088      	str	r0, [r1, #8]
    9ee6:	2000      	movs	r0, #0
    9ee8:	4770      	bx	lr
    9eea:	2012      	movs	r0, #18
    9eec:	4770      	bx	lr
    9eee:	0000      	.short	0x0000
    9ef0:	20000f38 	.word	0x20000f38

00009ef4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9ef4:	4a03      	ldr	r2, [pc, #12]	; (9f04 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9ef6:	e9d2 1200 	ldrd	r1, r2, [r2]
    9efa:	6001      	str	r1, [r0, #0]
    9efc:	6042      	str	r2, [r0, #4]
    9efe:	2000      	movs	r0, #0
    9f00:	4770      	bx	lr
    9f02:	0000      	.short	0x0000
    9f04:	0000a36c 	.word	0x0000a36c

00009f08 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9f08:	b510      	push	{r4, lr}
    9f0a:	2005      	movs	r0, #5
    9f0c:	f000 fad4 	bl	a4b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9f10:	f7fd fe56 	bl	7bc0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9f14:	4902      	ldr	r1, [pc, #8]	; (9f20 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9f16:	4801      	ldr	r0, [pc, #4]	; (9f1c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9f18:	6048      	str	r0, [r1, #4]
    9f1a:	bd10      	pop	{r4, pc}
    9f1c:	00009fad 	.word	0x00009fad
    9f20:	200001f8 	.word	0x200001f8

00009f24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9f24:	b510      	push	{r4, lr}
    9f26:	f003 f977 	bl	d218 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9f2a:	f7fb fc73 	bl	5814 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9f2e:	f000 fadd 	bl	a4ec <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9f32:	480f      	ldr	r0, [pc, #60]	; (9f70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9f34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9f38:	4b0e      	ldr	r3, [pc, #56]	; (9f74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    9f3a:	81c1      	strh	r1, [r0, #14]
    9f3c:	8201      	strh	r1, [r0, #16]
    9f3e:	2100      	movs	r1, #0
    9f40:	75c1      	strb	r1, [r0, #23]
    9f42:	8301      	strh	r1, [r0, #24]
    9f44:	8001      	strh	r1, [r0, #0]
    9f46:	221b      	movs	r2, #27
    9f48:	801a      	strh	r2, [r3, #0]
    9f4a:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9f4e:	805c      	strh	r4, [r3, #2]
    9f50:	809a      	strh	r2, [r3, #4]
    9f52:	80dc      	strh	r4, [r3, #6]
    9f54:	7481      	strb	r1, [r0, #18]
    9f56:	74c1      	strb	r1, [r0, #19]
    9f58:	2303      	movs	r3, #3
    9f5a:	7083      	strb	r3, [r0, #2]
    9f5c:	2302      	movs	r3, #2
    9f5e:	70c3      	strb	r3, [r0, #3]
    9f60:	8082      	strh	r2, [r0, #4]
    9f62:	80c2      	strh	r2, [r0, #6]
    9f64:	f640 62a6 	movw	r2, #3750	; 0xea6
    9f68:	6082      	str	r2, [r0, #8]
    9f6a:	7581      	strb	r1, [r0, #22]
    9f6c:	7301      	strb	r1, [r0, #12]
    9f6e:	bd10      	pop	{r4, pc}
    9f70:	20000f38 	.word	0x20000f38
    9f74:	20000200 	.word	0x20000200

00009f78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    9f78:	b510      	push	{r4, lr}
    9f7a:	b158      	cbz	r0, 9f94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    9f7c:	490a      	ldr	r1, [pc, #40]	; (9fa8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    9f7e:	780a      	ldrb	r2, [r1, #0]
    9f80:	b16a      	cbz	r2, 9f9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    9f82:	2200      	movs	r2, #0
    9f84:	7042      	strb	r2, [r0, #1]
    9f86:	2303      	movs	r3, #3
    9f88:	7003      	strb	r3, [r0, #0]
    9f8a:	2301      	movs	r3, #1
    9f8c:	7103      	strb	r3, [r0, #4]
    9f8e:	700a      	strb	r2, [r1, #0]
    9f90:	4618      	mov	r0, r3
    9f92:	bd10      	pop	{r4, pc}
    9f94:	f641 1146 	movw	r1, #6470	; 0x1946
    9f98:	2039      	movs	r0, #57	; 0x39
    9f9a:	f7f9 ff23 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9fa2:	f7fb bfcf 	b.w	5f44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    9fa6:	0000      	.short	0x0000
    9fa8:	20000f38 	.word	0x20000f38
    9fac:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fb0:	4692      	mov	sl, r2
    9fb2:	460f      	mov	r7, r1
    9fb4:	4681      	mov	r9, r0
    9fb6:	f005 fc33 	bl	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    9fba:	2800      	cmp	r0, #0
    9fbc:	d063      	beq.n	a086 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9fbe:	4933      	ldr	r1, [pc, #204]	; (a08c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    9fc0:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    9fc4:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    9fc8:	8808      	ldrh	r0, [r1, #0]
    9fca:	4290      	cmp	r0, r2
    9fcc:	d300      	bcc.n	9fd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    9fce:	4610      	mov	r0, r2
    9fd0:	4680      	mov	r8, r0
    9fd2:	8888      	ldrh	r0, [r1, #4]
    9fd4:	42b0      	cmp	r0, r6
    9fd6:	d200      	bcs.n	9fda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    9fd8:	4606      	mov	r6, r0
    9fda:	884c      	ldrh	r4, [r1, #2]
    9fdc:	f640 0048 	movw	r0, #2120	; 0x848
    9fe0:	4284      	cmp	r4, r0
    9fe2:	d300      	bcc.n	9fe6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    9fe4:	4604      	mov	r4, r0
    9fe6:	88cd      	ldrh	r5, [r1, #6]
    9fe8:	4285      	cmp	r5, r0
    9fea:	d300      	bcc.n	9fee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    9fec:	4605      	mov	r5, r0
    9fee:	4284      	cmp	r4, r0
    9ff0:	d300      	bcc.n	9ff4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    9ff2:	4604      	mov	r4, r0
    9ff4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9ff8:	2e1b      	cmp	r6, #27
    9ffa:	d001      	beq.n	a000 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    9ffc:	428d      	cmp	r5, r1
    9ffe:	d104      	bne.n	a00a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    a000:	f1b8 0f1b 	cmp.w	r8, #27
    a004:	d03f      	beq.n	a086 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a006:	428c      	cmp	r4, r1
    a008:	d03d      	beq.n	a086 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a00a:	466a      	mov	r2, sp
    a00c:	4651      	mov	r1, sl
    a00e:	4648      	mov	r0, r9
    a010:	f005 fb8a 	bl	f728 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a014:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a018:	4641      	mov	r1, r8
    a01a:	4540      	cmp	r0, r8
    a01c:	d900      	bls.n	a020 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    a01e:	4608      	mov	r0, r1
    a020:	80f8      	strh	r0, [r7, #6]
    a022:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a026:	42a1      	cmp	r1, r4
    a028:	d800      	bhi.n	a02c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    a02a:	460c      	mov	r4, r1
    a02c:	813c      	strh	r4, [r7, #8]
    a02e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a032:	42b1      	cmp	r1, r6
    a034:	d800      	bhi.n	a038 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    a036:	460e      	mov	r6, r1
    a038:	807e      	strh	r6, [r7, #2]
    a03a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a03e:	42a9      	cmp	r1, r5
    a040:	d900      	bls.n	a044 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    a042:	4629      	mov	r1, r5
    a044:	80b9      	strh	r1, [r7, #4]
    a046:	2201      	movs	r2, #1
    a048:	703a      	strb	r2, [r7, #0]
    a04a:	381b      	subs	r0, #27
    a04c:	28e0      	cmp	r0, #224	; 0xe0
    a04e:	d902      	bls.n	a056 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    a050:	f640 4172 	movw	r1, #3186	; 0xc72
    a054:	e014      	b.n	a080 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a056:	3e1b      	subs	r6, #27
    a058:	2ee0      	cmp	r6, #224	; 0xe0
    a05a:	d902      	bls.n	a062 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    a05c:	f640 4174 	movw	r1, #3188	; 0xc74
    a060:	e00e      	b.n	a080 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a062:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a066:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a06a:	4284      	cmp	r4, r0
    a06c:	d902      	bls.n	a074 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    a06e:	f640 4176 	movw	r1, #3190	; 0xc76
    a072:	e005      	b.n	a080 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a074:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    a078:	4281      	cmp	r1, r0
    a07a:	d904      	bls.n	a086 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a07c:	f640 4178 	movw	r1, #3192	; 0xc78
    a080:	2039      	movs	r0, #57	; 0x39
    a082:	f7f9 feaf 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a086:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a08a:	0000      	.short	0x0000
    a08c:	20000200 	.word	0x20000200

0000a090 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a094:	b088      	sub	sp, #32
    a096:	460c      	mov	r4, r1
    a098:	4606      	mov	r6, r0
    a09a:	f003 ff4c 	bl	df36 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a09e:	b198      	cbz	r0, a0c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a0a0:	4630      	mov	r0, r6
    a0a2:	f003 ff3b 	bl	df1c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a0a6:	b130      	cbz	r0, a0b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a0a8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a0ac:	2012      	movs	r0, #18
    a0ae:	2900      	cmp	r1, #0
    a0b0:	d00b      	beq.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0b2:	2980      	cmp	r1, #128	; 0x80
    a0b4:	d809      	bhi.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0b6:	4630      	mov	r0, r6
    a0b8:	f003 ff1f 	bl	defa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a0bc:	b140      	cbz	r0, a0d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a0be:	4630      	mov	r0, r6
    a0c0:	f003 fe97 	bl	ddf2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a0c4:	b130      	cbz	r0, a0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    a0c6:	e009      	b.n	a0dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    a0c8:	2042      	movs	r0, #66	; 0x42
    a0ca:	b008      	add	sp, #32
    a0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0d0:	200c      	movs	r0, #12
    a0d2:	e7fa      	b.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0d4:	4630      	mov	r0, r6
    a0d6:	f003 ff1b 	bl	df10 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a0da:	b3a8      	cbz	r0, a148 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    a0dc:	4630      	mov	r0, r6
    a0de:	f004 f8f2 	bl	e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    a0e2:	2800      	cmp	r0, #0
    a0e4:	d1f4      	bne.n	a0d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a0e6:	4630      	mov	r0, r6
    a0e8:	f003 fe9e 	bl	de28 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a0ec:	2800      	cmp	r0, #0
    a0ee:	d1ef      	bne.n	a0d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a0f0:	4630      	mov	r0, r6
    a0f2:	f7fc f97b 	bl	63ec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a0f6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a0fa:	f242 7110 	movw	r1, #10000	; 0x2710
    a0fe:	fb00 f801 	mul.w	r8, r0, r1
    a102:	78e1      	ldrb	r1, [r4, #3]
    a104:	4630      	mov	r0, r6
    a106:	f003 feef 	bl	dee8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a10a:	4630      	mov	r0, r6
    a10c:	f003 ff02 	bl	df14 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a110:	b1e8      	cbz	r0, a14e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    a112:	2200      	movs	r2, #0
    a114:	4611      	mov	r1, r2
    a116:	a801      	add	r0, sp, #4
    a118:	f7fa f8d0 	bl	42bc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a11c:	0004      	movs	r4, r0
    a11e:	d06a      	beq.n	a1f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a120:	2100      	movs	r1, #0
    a122:	f7fb fda5 	bl	5c70 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a126:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a12a:	8020      	strh	r0, [r4, #0]
    a12c:	4621      	mov	r1, r4
    a12e:	4630      	mov	r0, r6
    a130:	f003 ff14 	bl	df5c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a134:	f005 fb74 	bl	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    a138:	4d3a      	ldr	r5, [pc, #232]	; (a224 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    a13a:	2800      	cmp	r0, #0
    a13c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a140:	d00f      	beq.n	a162 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    a142:	88aa      	ldrh	r2, [r5, #4]
    a144:	88e9      	ldrh	r1, [r5, #6]
    a146:	e00e      	b.n	a166 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    a148:	e7ff      	b.n	a14a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    a14a:	2012      	movs	r0, #18
    a14c:	e7bd      	b.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a14e:	4642      	mov	r2, r8
    a150:	2100      	movs	r1, #0
    a152:	4630      	mov	r0, r6
    a154:	f7fd f89a 	bl	728c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a158:	2800      	cmp	r0, #0
    a15a:	d0b6      	beq.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a15c:	f241 413b 	movw	r1, #5179	; 0x143b
    a160:	e053      	b.n	a20a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a162:	221b      	movs	r2, #27
    a164:	4611      	mov	r1, r2
    a166:	84c2      	strh	r2, [r0, #38]	; 0x26
    a168:	8501      	strh	r1, [r0, #40]	; 0x28
    a16a:	68a8      	ldr	r0, [r5, #8]
    a16c:	62e0      	str	r0, [r4, #44]	; 0x2c
    a16e:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a172:	4630      	mov	r0, r6
    a174:	f003 fed6 	bl	df24 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a178:	b910      	cbnz	r0, a180 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a17a:	4630      	mov	r0, r6
    a17c:	f003 feec 	bl	df58 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a180:	60e7      	str	r7, [r4, #12]
    a182:	8821      	ldrh	r1, [r4, #0]
    a184:	f8ad 1008 	strh.w	r1, [sp, #8]
    a188:	7ca9      	ldrb	r1, [r5, #18]
    a18a:	f88d 100a 	strb.w	r1, [sp, #10]
    a18e:	7ce9      	ldrb	r1, [r5, #19]
    a190:	f88d 100b 	strb.w	r1, [sp, #11]
    a194:	8aa9      	ldrh	r1, [r5, #20]
    a196:	f8ad 100c 	strh.w	r1, [sp, #12]
    a19a:	a905      	add	r1, sp, #20
    a19c:	9100      	str	r1, [sp, #0]
    a19e:	2001      	movs	r0, #1
    a1a0:	ab04      	add	r3, sp, #16
    a1a2:	aa02      	add	r2, sp, #8
    a1a4:	4621      	mov	r1, r4
    a1a6:	f005 fafc 	bl	f7a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x290>
    a1aa:	b140      	cbz	r0, a1be <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a1ac:	2100      	movs	r1, #0
    a1ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a1b2:	f7fa f8ad 	bl	4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a1b6:	b1f0      	cbz	r0, a1f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a1b8:	f241 4187 	movw	r1, #5255	; 0x1487
    a1bc:	e025      	b.n	a20a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a1be:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a1c2:	f88d 0018 	strb.w	r0, [sp, #24]
    a1c6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a1ca:	f88d 0019 	strb.w	r0, [sp, #25]
    a1ce:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a1d2:	f8ad 001a 	strh.w	r0, [sp, #26]
    a1d6:	a906      	add	r1, sp, #24
    a1d8:	4620      	mov	r0, r4
    a1da:	f003 f988 	bl	d4ee <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a1de:	78e8      	ldrb	r0, [r5, #3]
    a1e0:	9000      	str	r0, [sp, #0]
    a1e2:	78ab      	ldrb	r3, [r5, #2]
    a1e4:	88ea      	ldrh	r2, [r5, #6]
    a1e6:	88a9      	ldrh	r1, [r5, #4]
    a1e8:	8820      	ldrh	r0, [r4, #0]
    a1ea:	f7fa f95d 	bl	44a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a1ee:	b120      	cbz	r0, a1fa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a1f0:	f241 4192 	movw	r1, #5266	; 0x1492
    a1f4:	e009      	b.n	a20a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a1f6:	2009      	movs	r0, #9
    a1f8:	e767      	b.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a1fa:	4642      	mov	r2, r8
    a1fc:	4621      	mov	r1, r4
    a1fe:	4630      	mov	r0, r6
    a200:	f7fd f844 	bl	728c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a204:	b120      	cbz	r0, a210 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a206:	f241 4194 	movw	r1, #5268	; 0x1494
    a20a:	2039      	movs	r0, #57	; 0x39
    a20c:	f7f9 fdea 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a210:	4805      	ldr	r0, [pc, #20]	; (a228 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a212:	6843      	ldr	r3, [r0, #4]
    a214:	b123      	cbz	r3, a220 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a216:	2200      	movs	r2, #0
    a218:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    a21c:	4620      	mov	r0, r4
    a21e:	4798      	blx	r3
    a220:	2000      	movs	r0, #0
    a222:	e752      	b.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a224:	20000f38 	.word	0x20000f38
    a228:	200001f8 	.word	0x200001f8
    a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a230:	b088      	sub	sp, #32
    a232:	4604      	mov	r4, r0
    a234:	8800      	ldrh	r0, [r0, #0]
    a236:	a906      	add	r1, sp, #24
    a238:	f003 f89a 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a23c:	2800      	cmp	r0, #0
    a23e:	d147      	bne.n	a2d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a240:	9807      	ldr	r0, [sp, #28]
    a242:	2700      	movs	r7, #0
    a244:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    a248:	f88d 1008 	strb.w	r1, [sp, #8]
    a24c:	9902      	ldr	r1, [sp, #8]
    a24e:	9102      	str	r1, [sp, #8]
    a250:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a254:	f88d 100c 	strb.w	r1, [sp, #12]
    a258:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a25c:	3070      	adds	r0, #112	; 0x70
    a25e:	0689      	lsls	r1, r1, #26
    a260:	d502      	bpl.n	a268 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a262:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a266:	b149      	cbz	r1, a27c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a268:	f05f 0100 	movs.w	r1, #0
    a26c:	f88d 1004 	strb.w	r1, [sp, #4]
    a270:	2105      	movs	r1, #5
    a272:	304c      	adds	r0, #76	; 0x4c
    a274:	f004 fbf4 	bl	ea60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a278:	b110      	cbz	r0, a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a27a:	e004      	b.n	a286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a27c:	2101      	movs	r1, #1
    a27e:	e7f5      	b.n	a26c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a280:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a284:	b318      	cbz	r0, a2ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a286:	8921      	ldrh	r1, [r4, #8]
    a288:	88e0      	ldrh	r0, [r4, #6]
    a28a:	f005 fa3f 	bl	f70c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a28e:	2800      	cmp	r0, #0
    a290:	d11e      	bne.n	a2d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a292:	88a1      	ldrh	r1, [r4, #4]
    a294:	8860      	ldrh	r0, [r4, #2]
    a296:	f005 fa39 	bl	f70c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a29a:	2800      	cmp	r0, #0
    a29c:	d118      	bne.n	a2d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a29e:	8921      	ldrh	r1, [r4, #8]
    a2a0:	88e0      	ldrh	r0, [r4, #6]
    a2a2:	f005 fa29 	bl	f6f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a2a6:	2800      	cmp	r0, #0
    a2a8:	d112      	bne.n	a2d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2aa:	88a1      	ldrh	r1, [r4, #4]
    a2ac:	8860      	ldrh	r0, [r4, #2]
    a2ae:	f005 fa23 	bl	f6f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a2b2:	0006      	movs	r6, r0
    a2b4:	d10c      	bne.n	a2d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2b6:	9807      	ldr	r0, [sp, #28]
    a2b8:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    a2bc:	f04f 0801 	mov.w	r8, #1
    a2c0:	f885 8001 	strb.w	r8, [r5, #1]
    a2c4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a2c8:	b129      	cbz	r1, a2d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a2ca:	263a      	movs	r6, #58	; 0x3a
    a2cc:	e02f      	b.n	a32e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a2ce:	201a      	movs	r0, #26
    a2d0:	b008      	add	sp, #32
    a2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2d6:	4639      	mov	r1, r7
    a2d8:	aa03      	add	r2, sp, #12
    a2da:	f005 fa25 	bl	f728 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a2de:	8861      	ldrh	r1, [r4, #2]
    a2e0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a2e4:	4281      	cmp	r1, r0
    a2e6:	d200      	bcs.n	a2ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a2e8:	4608      	mov	r0, r1
    a2ea:	80e8      	strh	r0, [r5, #6]
    a2ec:	88a1      	ldrh	r1, [r4, #4]
    a2ee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a2f2:	4281      	cmp	r1, r0
    a2f4:	d200      	bcs.n	a2f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a2f6:	4608      	mov	r0, r1
    a2f8:	8128      	strh	r0, [r5, #8]
    a2fa:	88e2      	ldrh	r2, [r4, #6]
    a2fc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a300:	428a      	cmp	r2, r1
    a302:	d200      	bcs.n	a306 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a304:	4611      	mov	r1, r2
    a306:	8069      	strh	r1, [r5, #2]
    a308:	8922      	ldrh	r2, [r4, #8]
    a30a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a30e:	428a      	cmp	r2, r1
    a310:	d200      	bcs.n	a314 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a312:	4611      	mov	r1, r2
    a314:	f640 0248 	movw	r2, #2120	; 0x848
    a318:	80a9      	strh	r1, [r5, #4]
    a31a:	4291      	cmp	r1, r2
    a31c:	d300      	bcc.n	a320 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a31e:	4611      	mov	r1, r2
    a320:	80a9      	strh	r1, [r5, #4]
    a322:	4290      	cmp	r0, r2
    a324:	d200      	bcs.n	a328 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a326:	4602      	mov	r2, r0
    a328:	812a      	strh	r2, [r5, #8]
    a32a:	f885 8000 	strb.w	r8, [r5]
    a32e:	706f      	strb	r7, [r5, #1]
    a330:	4630      	mov	r0, r6
    a332:	e7cd      	b.n	a2d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a334:	b510      	push	{r4, lr}
    a336:	4604      	mov	r4, r0
    a338:	88c1      	ldrh	r1, [r0, #6]
    a33a:	8880      	ldrh	r0, [r0, #4]
    a33c:	f005 f9e6 	bl	f70c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a340:	2800      	cmp	r0, #0
    a342:	d10f      	bne.n	a364 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a344:	8861      	ldrh	r1, [r4, #2]
    a346:	8820      	ldrh	r0, [r4, #0]
    a348:	f005 f9e0 	bl	f70c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a34c:	2800      	cmp	r0, #0
    a34e:	d109      	bne.n	a364 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a350:	4805      	ldr	r0, [pc, #20]	; (a368 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a352:	88a1      	ldrh	r1, [r4, #4]
    a354:	8081      	strh	r1, [r0, #4]
    a356:	8821      	ldrh	r1, [r4, #0]
    a358:	8001      	strh	r1, [r0, #0]
    a35a:	88e1      	ldrh	r1, [r4, #6]
    a35c:	80c1      	strh	r1, [r0, #6]
    a35e:	8861      	ldrh	r1, [r4, #2]
    a360:	8041      	strh	r1, [r0, #2]
    a362:	2000      	movs	r0, #0
    a364:	bd10      	pop	{r4, pc}
    a366:	0000      	.short	0x0000
    a368:	20000200 	.word	0x20000200
    a36c:	0b12b00b 	.word	0x0b12b00b
    a370:	12b00059 	.word	0x12b00059
    a374:	05060708 	.word	0x05060708
    a378:	00020304 	.word	0x00020304
    a37c:	f0f4f8fc 	.word	0xf0f4f8fc
    a380:	0304d8ec 	.word	0x0304d8ec
    a384:	f4f8fc00 	.word	0xf4f8fc00
    a388:	00d8ecf0 	.word	0x00d8ecf0

0000a38c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a38c:	b510      	push	{r4, lr}
    a38e:	f7ff fced 	bl	9d6c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a392:	4804      	ldr	r0, [pc, #16]	; (a3a4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a394:	6840      	ldr	r0, [r0, #4]
    a396:	f005 fb15 	bl	f9c4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a39e:	f005 b851 	b.w	f444 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a3a2:	0000      	.short	0x0000
    a3a4:	20000208 	.word	0x20000208

0000a3a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a3a8:	b510      	push	{r4, lr}
    a3aa:	4c07      	ldr	r4, [pc, #28]	; (a3c8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a3ac:	68a0      	ldr	r0, [r4, #8]
    a3ae:	f005 fb09 	bl	f9c4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a3b2:	68e0      	ldr	r0, [r4, #12]
    a3b4:	f005 fb06 	bl	f9c4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a3b8:	f002 ff2e 	bl	d218 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a3bc:	f7fb fa2a 	bl	5814 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3c4:	f7ff bdae 	b.w	9f24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a3c8:	20000208 	.word	0x20000208

0000a3cc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a3cc:	b500      	push	{lr}
    a3ce:	4905      	ldr	r1, [pc, #20]	; (a3e4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a3d0:	4805      	ldr	r0, [pc, #20]	; (a3e8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a3d2:	f005 fad8 	bl	f986 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a3d6:	4804      	ldr	r0, [pc, #16]	; (a3e8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a3d8:	4904      	ldr	r1, [pc, #16]	; (a3ec <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a3da:	1d00      	adds	r0, r0, #4
    a3dc:	f85d eb04 	ldr.w	lr, [sp], #4
    a3e0:	f005 bad1 	b.w	f986 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a3e4:	20000218 	.word	0x20000218
    a3e8:	2000020c 	.word	0x2000020c
    a3ec:	20000220 	.word	0x20000220

0000a3f0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a3f0:	b500      	push	{lr}
    a3f2:	4908      	ldr	r1, [pc, #32]	; (a414 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a3f4:	4808      	ldr	r0, [pc, #32]	; (a418 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a3f6:	f005 fac6 	bl	f986 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a3fa:	4807      	ldr	r0, [pc, #28]	; (a418 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a3fc:	4907      	ldr	r1, [pc, #28]	; (a41c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a3fe:	1d00      	adds	r0, r0, #4
    a400:	f005 fac1 	bl	f986 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a404:	4804      	ldr	r0, [pc, #16]	; (a418 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a406:	4906      	ldr	r1, [pc, #24]	; (a420 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a408:	3008      	adds	r0, #8
    a40a:	f85d eb04 	ldr.w	lr, [sp], #4
    a40e:	f005 baba 	b.w	f986 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a412:	0000      	.short	0x0000
    a414:	20000244 	.word	0x20000244
    a418:	2000020c 	.word	0x2000020c
    a41c:	2000024c 	.word	0x2000024c
    a420:	2000023c 	.word	0x2000023c

0000a424 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a424:	4801      	ldr	r0, [pc, #4]	; (a42c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a426:	7800      	ldrb	r0, [r0, #0]
    a428:	4770      	bx	lr
    a42a:	0000      	.short	0x0000
    a42c:	20000208 	.word	0x20000208
    a430:	b510      	push	{r4, lr}
    a432:	f7fc f953 	bl	66dc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a436:	f7fc ffbd 	bl	73b4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a43a:	4805      	ldr	r0, [pc, #20]	; (a450 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    a43c:	f7fc f934 	bl	66a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a440:	4905      	ldr	r1, [pc, #20]	; (a458 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    a442:	4804      	ldr	r0, [pc, #16]	; (a454 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    a444:	6008      	str	r0, [r1, #0]
    a446:	4906      	ldr	r1, [pc, #24]	; (a460 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    a448:	4804      	ldr	r0, [pc, #16]	; (a45c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    a44a:	6008      	str	r0, [r1, #0]
    a44c:	bd10      	pop	{r4, pc}
    a44e:	0000      	.short	0x0000
    a450:	200013c1 	.word	0x200013c1
    a454:	000064ad 	.word	0x000064ad
    a458:	20000228 	.word	0x20000228
    a45c:	00005fe5 	.word	0x00005fe5
    a460:	2000022c 	.word	0x2000022c
    a464:	490c      	ldr	r1, [pc, #48]	; (a498 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    a466:	b510      	push	{r4, lr}
    a468:	2001      	movs	r0, #1
    a46a:	7008      	strb	r0, [r1, #0]
    a46c:	f7fc f966 	bl	673c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a470:	f7fd fcfe 	bl	7e70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a474:	f002 febe 	bl	d1f4 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a478:	4808      	ldr	r0, [pc, #32]	; (a49c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    a47a:	f7fa fc2b 	bl	4cd4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a47e:	2000      	movs	r0, #0
    a480:	f7f9 fe8c 	bl	419c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a484:	4907      	ldr	r1, [pc, #28]	; (a4a4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    a486:	4806      	ldr	r0, [pc, #24]	; (a4a0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    a488:	6008      	str	r0, [r1, #0]
    a48a:	4908      	ldr	r1, [pc, #32]	; (a4ac <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    a48c:	4806      	ldr	r0, [pc, #24]	; (a4a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    a48e:	6008      	str	r0, [r1, #0]
    a490:	4908      	ldr	r1, [pc, #32]	; (a4b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    a492:	4807      	ldr	r0, [pc, #28]	; (a4b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    a494:	6008      	str	r0, [r1, #0]
    a496:	bd10      	pop	{r4, pc}
    a498:	20000208 	.word	0x20000208
    a49c:	200013c1 	.word	0x200013c1
    a4a0:	00004c81 	.word	0x00004c81
    a4a4:	20000238 	.word	0x20000238
    a4a8:	00007bf1 	.word	0x00007bf1
    a4ac:	20000234 	.word	0x20000234
    a4b0:	00006059 	.word	0x00006059
    a4b4:	20000230 	.word	0x20000230

0000a4b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a4b8:	2101      	movs	r1, #1
    a4ba:	4081      	lsls	r1, r0
    a4bc:	4802      	ldr	r0, [pc, #8]	; (a4c8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a4be:	6802      	ldr	r2, [r0, #0]
    a4c0:	4311      	orrs	r1, r2
    a4c2:	6001      	str	r1, [r0, #0]
    a4c4:	4770      	bx	lr
    a4c6:	0000      	.short	0x0000
    a4c8:	20000254 	.word	0x20000254

0000a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a4cc:	4801      	ldr	r0, [pc, #4]	; (a4d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a4ce:	6800      	ldr	r0, [r0, #0]
    a4d0:	4770      	bx	lr
    a4d2:	0000      	.short	0x0000
    a4d4:	20000254 	.word	0x20000254

0000a4d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a4d8:	4803      	ldr	r0, [pc, #12]	; (a4e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a4da:	8800      	ldrh	r0, [r0, #0]
    a4dc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a4e0:	0040      	lsls	r0, r0, #1
    a4e2:	1c40      	adds	r0, r0, #1
    a4e4:	4770      	bx	lr
    a4e6:	0000      	.short	0x0000
    a4e8:	20000254 	.word	0x20000254

0000a4ec <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a4ec:	b510      	push	{r4, lr}
    a4ee:	f7f9 f8ed 	bl	36cc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a4f2:	2200      	movs	r2, #0
    a4f4:	4b08      	ldr	r3, [pc, #32]	; (a518 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a4f6:	4611      	mov	r1, r2
    a4f8:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a4fc:	4284      	cmp	r4, r0
    a4fe:	d303      	bcc.n	a508 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a500:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a504:	7882      	ldrb	r2, [r0, #2]
    a506:	e003      	b.n	a510 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a508:	1c49      	adds	r1, r1, #1
    a50a:	b2c9      	uxtb	r1, r1
    a50c:	290c      	cmp	r1, #12
    a50e:	d3f3      	bcc.n	a4f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a510:	4802      	ldr	r0, [pc, #8]	; (a51c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a512:	7002      	strb	r2, [r0, #0]
    a514:	bd10      	pop	{r4, pc}
    a516:	0000      	.short	0x0000
    a518:	0000fa16 	.word	0x0000fa16
    a51c:	2000029c 	.word	0x2000029c

0000a520 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a520:	b570      	push	{r4, r5, r6, lr}
    a522:	4605      	mov	r5, r0
    a524:	4616      	mov	r6, r2
    a526:	460c      	mov	r4, r1
    a528:	2002      	movs	r0, #2
    a52a:	f000 f9f9 	bl	a920 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a52e:	4906      	ldr	r1, [pc, #24]	; (a548 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a530:	2001      	movs	r0, #1
    a532:	1ef6      	subs	r6, r6, #3
    a534:	7008      	strb	r0, [r1, #0]
    a536:	4805      	ldr	r0, [pc, #20]	; (a54c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a538:	6006      	str	r6, [r0, #0]
    a53a:	4804      	ldr	r0, [pc, #16]	; (a54c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a53c:	3808      	subs	r0, #8
    a53e:	6005      	str	r5, [r0, #0]
    a540:	1f00      	subs	r0, r0, #4
    a542:	6004      	str	r4, [r0, #0]
    a544:	bd70      	pop	{r4, r5, r6, pc}
    a546:	0000      	.short	0x0000
    a548:	2000029d 	.word	0x2000029d
    a54c:	4000f510 	.word	0x4000f510

0000a550 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a550:	b510      	push	{r4, lr}
    a552:	4c0c      	ldr	r4, [pc, #48]	; (a584 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a554:	7820      	ldrb	r0, [r4, #0]
    a556:	b180      	cbz	r0, a57a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a558:	490b      	ldr	r1, [pc, #44]	; (a588 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a55a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a55e:	6008      	str	r0, [r1, #0]
    a560:	f000 f86a 	bl	a638 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a564:	2100      	movs	r1, #0
    a566:	b120      	cbz	r0, a572 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a568:	2001      	movs	r0, #1
    a56a:	7060      	strb	r0, [r4, #1]
    a56c:	4807      	ldr	r0, [pc, #28]	; (a58c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a56e:	6800      	ldr	r0, [r0, #0]
    a570:	e001      	b.n	a576 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a572:	7061      	strb	r1, [r4, #1]
    a574:	2010      	movs	r0, #16
    a576:	70a0      	strb	r0, [r4, #2]
    a578:	7021      	strb	r1, [r4, #0]
    a57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a57e:	2000      	movs	r0, #0
    a580:	f000 b9ce 	b.w	a920 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a584:	2000029d 	.word	0x2000029d
    a588:	4001f508 	.word	0x4001f508
    a58c:	4000f400 	.word	0x4000f400

0000a590 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a590:	b510      	push	{r4, lr}
    a592:	2002      	movs	r0, #2
    a594:	f000 f9c4 	bl	a920 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a598:	4904      	ldr	r1, [pc, #16]	; (a5ac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a59a:	2001      	movs	r0, #1
    a59c:	7008      	strb	r0, [r1, #0]
    a59e:	f000 f859 	bl	a654 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a5a2:	4903      	ldr	r1, [pc, #12]	; (a5b0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a5a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a5a8:	6008      	str	r0, [r1, #0]
    a5aa:	bd10      	pop	{r4, pc}
    a5ac:	2000029d 	.word	0x2000029d
    a5b0:	4001f504 	.word	0x4001f504

0000a5b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a5b4:	4803      	ldr	r0, [pc, #12]	; (a5c4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a5b6:	2100      	movs	r1, #0
    a5b8:	7001      	strb	r1, [r0, #0]
    a5ba:	7041      	strb	r1, [r0, #1]
    a5bc:	2110      	movs	r1, #16
    a5be:	7081      	strb	r1, [r0, #2]
    a5c0:	4770      	bx	lr
    a5c2:	0000      	.short	0x0000
    a5c4:	2000029d 	.word	0x2000029d

0000a5c8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a5c8:	4807      	ldr	r0, [pc, #28]	; (a5e8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a5ca:	b510      	push	{r4, lr}
    a5cc:	7801      	ldrb	r1, [r0, #0]
    a5ce:	b141      	cbz	r1, a5e2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a5d0:	f000 f832 	bl	a638 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a5d4:	b118      	cbz	r0, a5de <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a5d6:	4805      	ldr	r0, [pc, #20]	; (a5ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a5d8:	6800      	ldr	r0, [r0, #0]
    a5da:	b2c0      	uxtb	r0, r0
    a5dc:	bd10      	pop	{r4, pc}
    a5de:	2010      	movs	r0, #16
    a5e0:	bd10      	pop	{r4, pc}
    a5e2:	7880      	ldrb	r0, [r0, #2]
    a5e4:	bd10      	pop	{r4, pc}
    a5e6:	0000      	.short	0x0000
    a5e8:	2000029d 	.word	0x2000029d
    a5ec:	4000f400 	.word	0x4000f400

0000a5f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a5f0:	4808      	ldr	r0, [pc, #32]	; (a614 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a5f2:	b510      	push	{r4, lr}
    a5f4:	7801      	ldrb	r1, [r0, #0]
    a5f6:	b159      	cbz	r1, a610 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a5f8:	4807      	ldr	r0, [pc, #28]	; (a618 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a5fa:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a5fe:	b128      	cbz	r0, a60c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a600:	f000 f80c 	bl	a61c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a604:	2800      	cmp	r0, #0
    a606:	d000      	beq.n	a60a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a608:	2001      	movs	r0, #1
    a60a:	bd10      	pop	{r4, pc}
    a60c:	2002      	movs	r0, #2
    a60e:	bd10      	pop	{r4, pc}
    a610:	7840      	ldrb	r0, [r0, #1]
    a612:	bd10      	pop	{r4, pc}
    a614:	2000029d 	.word	0x2000029d
    a618:	4000f000 	.word	0x4000f000
    a61c:	4805      	ldr	r0, [pc, #20]	; (a634 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a61e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a622:	b111      	cbz	r1, a62a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a624:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a628:	b108      	cbz	r0, a62e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a62a:	2000      	movs	r0, #0
    a62c:	4770      	bx	lr
    a62e:	2001      	movs	r0, #1
    a630:	4770      	bx	lr
    a632:	0000      	.short	0x0000
    a634:	4000f000 	.word	0x4000f000
    a638:	4805      	ldr	r0, [pc, #20]	; (a650 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a63a:	b510      	push	{r4, lr}
    a63c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a640:	b120      	cbz	r0, a64c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a642:	f7ff ffeb 	bl	a61c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a646:	b108      	cbz	r0, a64c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a648:	2001      	movs	r0, #1
    a64a:	bd10      	pop	{r4, pc}
    a64c:	2000      	movs	r0, #0
    a64e:	bd10      	pop	{r4, pc}
    a650:	4000f000 	.word	0x4000f000
    a654:	4804      	ldr	r0, [pc, #16]	; (a668 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a656:	2100      	movs	r1, #0
    a658:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a65c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a660:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a664:	4770      	bx	lr
    a666:	0000      	.short	0x0000
    a668:	4000f000 	.word	0x4000f000

0000a66c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a66c:	4a08      	ldr	r2, [pc, #32]	; (a690 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a66e:	b510      	push	{r4, lr}
    a670:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a674:	4907      	ldr	r1, [pc, #28]	; (a694 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a676:	4610      	mov	r0, r2
    a678:	f7f9 fa88 	bl	3b8c <mpsl_fem_lna_configuration_set>
    a67c:	2800      	cmp	r0, #0
    a67e:	d005      	beq.n	a68c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a680:	1c40      	adds	r0, r0, #1
    a682:	d003      	beq.n	a68c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a684:	217d      	movs	r1, #125	; 0x7d
    a686:	2040      	movs	r0, #64	; 0x40
    a688:	f7f9 fbac 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a68c:	bd10      	pop	{r4, pc}
    a68e:	0000      	.short	0x0000
    a690:	20000258 	.word	0x20000258
    a694:	0000a6c4 	.word	0x0000a6c4

0000a698 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a698:	4a08      	ldr	r2, [pc, #32]	; (a6bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a69a:	b510      	push	{r4, lr}
    a69c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a6a0:	4907      	ldr	r1, [pc, #28]	; (a6c0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a6a2:	4610      	mov	r0, r2
    a6a4:	f7f9 fa7e 	bl	3ba4 <mpsl_fem_pa_configuration_set>
    a6a8:	2800      	cmp	r0, #0
    a6aa:	d005      	beq.n	a6b8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a6ac:	1c40      	adds	r0, r0, #1
    a6ae:	d003      	beq.n	a6b8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a6b0:	2172      	movs	r1, #114	; 0x72
    a6b2:	2040      	movs	r0, #64	; 0x40
    a6b4:	f7f9 fb96 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6b8:	bd10      	pop	{r4, pc}
    a6ba:	0000      	.short	0x0000
    a6bc:	20000258 	.word	0x20000258
    a6c0:	0000a6c4 	.word	0x0000a6c4
    a6c4:	00000001 	.word	0x00000001
    a6c8:	40001110 	.word	0x40001110
	...

0000a6dc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    a6dc:	4a07      	ldr	r2, [pc, #28]	; (a6fc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    a6de:	b510      	push	{r4, lr}
    a6e0:	7853      	ldrb	r3, [r2, #1]
    a6e2:	b133      	cbz	r3, a6f2 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    a6e4:	4b06      	ldr	r3, [pc, #24]	; (a700 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    a6e6:	6019      	str	r1, [r3, #0]
    a6e8:	1d19      	adds	r1, r3, #4
    a6ea:	6008      	str	r0, [r1, #0]
    a6ec:	2001      	movs	r0, #1
    a6ee:	7090      	strb	r0, [r2, #2]
    a6f0:	bd10      	pop	{r4, pc}
    a6f2:	21ba      	movs	r1, #186	; 0xba
    a6f4:	203c      	movs	r0, #60	; 0x3c
    a6f6:	f7f9 fb75 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6fa:	0000      	.short	0x0000
    a6fc:	200002a0 	.word	0x200002a0
    a700:	4000f50c 	.word	0x4000f50c

0000a704 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    a704:	4809      	ldr	r0, [pc, #36]	; (a72c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    a706:	b510      	push	{r4, lr}
    a708:	7801      	ldrb	r1, [r0, #0]
    a70a:	b151      	cbz	r1, a722 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a70c:	7880      	ldrb	r0, [r0, #2]
    a70e:	b140      	cbz	r0, a722 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a710:	4907      	ldr	r1, [pc, #28]	; (a730 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    a712:	2000      	movs	r0, #0
    a714:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a718:	4906      	ldr	r1, [pc, #24]	; (a734 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    a71a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a71e:	6008      	str	r0, [r1, #0]
    a720:	bd10      	pop	{r4, pc}
    a722:	21e1      	movs	r1, #225	; 0xe1
    a724:	203c      	movs	r0, #60	; 0x3c
    a726:	f7f9 fb5d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a72a:	0000      	.short	0x0000
    a72c:	200002a0 	.word	0x200002a0
    a730:	4000f000 	.word	0x4000f000
    a734:	4001f504 	.word	0x4001f504

0000a738 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a738:	b570      	push	{r4, r5, r6, lr}
    a73a:	4c0b      	ldr	r4, [pc, #44]	; (a768 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a73c:	2500      	movs	r5, #0
    a73e:	7820      	ldrb	r0, [r4, #0]
    a740:	b158      	cbz	r0, a75a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a742:	f000 f8e5 	bl	a910 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a746:	4809      	ldr	r0, [pc, #36]	; (a76c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a748:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a74c:	b118      	cbz	r0, a756 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    a74e:	4808      	ldr	r0, [pc, #32]	; (a770 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a750:	6800      	ldr	r0, [r0, #0]
    a752:	70e0      	strb	r0, [r4, #3]
    a754:	e000      	b.n	a758 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a756:	70e5      	strb	r5, [r4, #3]
    a758:	7025      	strb	r5, [r4, #0]
    a75a:	2000      	movs	r0, #0
    a75c:	f000 f8e0 	bl	a920 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a760:	7065      	strb	r5, [r4, #1]
    a762:	70a5      	strb	r5, [r4, #2]
    a764:	bd70      	pop	{r4, r5, r6, pc}
    a766:	0000      	.short	0x0000
    a768:	200002a0 	.word	0x200002a0
    a76c:	4000f000 	.word	0x4000f000
    a770:	4000f400 	.word	0x4000f400

0000a774 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    a774:	480d      	ldr	r0, [pc, #52]	; (a7ac <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    a776:	b510      	push	{r4, lr}
    a778:	7801      	ldrb	r1, [r0, #0]
    a77a:	b191      	cbz	r1, a7a2 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a77c:	7880      	ldrb	r0, [r0, #2]
    a77e:	b180      	cbz	r0, a7a2 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a780:	490b      	ldr	r1, [pc, #44]	; (a7b0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    a782:	2000      	movs	r0, #0
    a784:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a788:	4a0a      	ldr	r2, [pc, #40]	; (a7b4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a78a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    a78e:	6010      	str	r0, [r2, #0]
    a790:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a794:	2a01      	cmp	r2, #1
    a796:	d103      	bne.n	a7a0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    a798:	604a      	str	r2, [r1, #4]
    a79a:	4906      	ldr	r1, [pc, #24]	; (a7b4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a79c:	1d09      	adds	r1, r1, #4
    a79e:	6008      	str	r0, [r1, #0]
    a7a0:	bd10      	pop	{r4, pc}
    a7a2:	21d1      	movs	r1, #209	; 0xd1
    a7a4:	203c      	movs	r0, #60	; 0x3c
    a7a6:	f7f9 fb1d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7aa:	0000      	.short	0x0000
    a7ac:	200002a0 	.word	0x200002a0
    a7b0:	4000f000 	.word	0x4000f000
    a7b4:	4001f504 	.word	0x4001f504

0000a7b8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a7b8:	4803      	ldr	r0, [pc, #12]	; (a7c8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    a7ba:	2100      	movs	r1, #0
    a7bc:	7001      	strb	r1, [r0, #0]
    a7be:	7041      	strb	r1, [r0, #1]
    a7c0:	7081      	strb	r1, [r0, #2]
    a7c2:	70c1      	strb	r1, [r0, #3]
    a7c4:	4770      	bx	lr
    a7c6:	0000      	.short	0x0000
    a7c8:	200002a0 	.word	0x200002a0

0000a7cc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7d0:	4605      	mov	r5, r0
    a7d2:	461c      	mov	r4, r3
    a7d4:	4690      	mov	r8, r2
    a7d6:	460f      	mov	r7, r1
    a7d8:	2001      	movs	r0, #1
    a7da:	f000 f8a1 	bl	a920 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a7de:	4e12      	ldr	r6, [pc, #72]	; (a828 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    a7e0:	4812      	ldr	r0, [pc, #72]	; (a82c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7e2:	7134      	strb	r4, [r6, #4]
    a7e4:	6007      	str	r7, [r0, #0]
    a7e6:	4911      	ldr	r1, [pc, #68]	; (a82c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7e8:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    a7ec:	1f09      	subs	r1, r1, #4
    a7ee:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a7f2:	6008      	str	r0, [r1, #0]
    a7f4:	f001 fb13 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a7f8:	b938      	cbnz	r0, a80a <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    a7fa:	480c      	ldr	r0, [pc, #48]	; (a82c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7fc:	3010      	adds	r0, #16
    a7fe:	6801      	ldr	r1, [r0, #0]
    a800:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a804:	ea41 0108 	orr.w	r1, r1, r8
    a808:	6001      	str	r1, [r0, #0]
    a80a:	f000 f881 	bl	a910 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a80e:	b93d      	cbnz	r5, a820 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    a810:	4808      	ldr	r0, [pc, #32]	; (a834 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    a812:	4a07      	ldr	r2, [pc, #28]	; (a830 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a814:	4906      	ldr	r1, [pc, #24]	; (a830 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a816:	3afc      	subs	r2, #252	; 0xfc
    a818:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    a81c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    a820:	2001      	movs	r0, #1
    a822:	7070      	strb	r0, [r6, #1]
    a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a828:	200002a0 	.word	0x200002a0
    a82c:	4000f508 	.word	0x4000f508
    a830:	4000f100 	.word	0x4000f100
    a834:	4001f088 	.word	0x4001f088

0000a838 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    a838:	4808      	ldr	r0, [pc, #32]	; (a85c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    a83a:	b510      	push	{r4, lr}
    a83c:	7841      	ldrb	r1, [r0, #1]
    a83e:	b149      	cbz	r1, a854 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    a840:	2101      	movs	r1, #1
    a842:	7001      	strb	r1, [r0, #0]
    a844:	4806      	ldr	r0, [pc, #24]	; (a860 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    a846:	2200      	movs	r2, #0
    a848:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    a84c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    a850:	6001      	str	r1, [r0, #0]
    a852:	bd10      	pop	{r4, pc}
    a854:	21c5      	movs	r1, #197	; 0xc5
    a856:	203c      	movs	r0, #60	; 0x3c
    a858:	f7f9 fac4 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a85c:	200002a0 	.word	0x200002a0
    a860:	4000f000 	.word	0x4000f000

0000a864 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a864:	4806      	ldr	r0, [pc, #24]	; (a880 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a866:	7801      	ldrb	r1, [r0, #0]
    a868:	b141      	cbz	r1, a87c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a86a:	4806      	ldr	r0, [pc, #24]	; (a884 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a86c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a870:	2800      	cmp	r0, #0
    a872:	d002      	beq.n	a87a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a874:	4804      	ldr	r0, [pc, #16]	; (a888 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a876:	6800      	ldr	r0, [r0, #0]
    a878:	b2c0      	uxtb	r0, r0
    a87a:	4770      	bx	lr
    a87c:	78c0      	ldrb	r0, [r0, #3]
    a87e:	4770      	bx	lr
    a880:	200002a0 	.word	0x200002a0
    a884:	4000f000 	.word	0x4000f000
    a888:	4000f400 	.word	0x4000f400

0000a88c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a88c:	4901      	ldr	r1, [pc, #4]	; (a894 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a88e:	2001      	movs	r0, #1
    a890:	6088      	str	r0, [r1, #8]
    a892:	4770      	bx	lr
    a894:	4000f000 	.word	0x4000f000

0000a898 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a89c:	2800      	cmp	r0, #0
    a89e:	d02e      	beq.n	a8fe <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a8a0:	4818      	ldr	r0, [pc, #96]	; (a904 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a8a2:	7800      	ldrb	r0, [r0, #0]
    a8a4:	b1b0      	cbz	r0, a8d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a8a6:	4d18      	ldr	r5, [pc, #96]	; (a908 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a8a8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a8ac:	2800      	cmp	r0, #0
    a8ae:	d126      	bne.n	a8fe <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a8b0:	2702      	movs	r7, #2
    a8b2:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a8b6:	4c15      	ldr	r4, [pc, #84]	; (a90c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a8b8:	6820      	ldr	r0, [r4, #0]
    a8ba:	43c0      	mvns	r0, r0
    a8bc:	f340 1600 	sbfx	r6, r0, #4, #1
    a8c0:	6820      	ldr	r0, [r4, #0]
    a8c2:	f040 0010 	orr.w	r0, r0, #16
    a8c6:	6020      	str	r0, [r4, #0]
    a8c8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a8cc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a8d0:	1c76      	adds	r6, r6, #1
    a8d2:	e009      	b.n	a8e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    a8d4:	f240 1153 	movw	r1, #339	; 0x153
    a8d8:	203c      	movs	r0, #60	; 0x3c
    a8da:	f7f9 fa83 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8de:	bf00      	nop
    a8e0:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a8e4:	f7f9 f8fc 	bl	3ae0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a8e8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a8ec:	2800      	cmp	r0, #0
    a8ee:	d0f7      	beq.n	a8e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    a8f0:	b91e      	cbnz	r6, a8fa <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a8f2:	6820      	ldr	r0, [r4, #0]
    a8f4:	f020 0010 	bic.w	r0, r0, #16
    a8f8:	6020      	str	r0, [r4, #0]
    a8fa:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a902:	0000      	.short	0x0000
    a904:	200002a0 	.word	0x200002a0
    a908:	4000f000 	.word	0x4000f000
    a90c:	e000ed10 	.word	0xe000ed10
    a910:	4902      	ldr	r1, [pc, #8]	; (a91c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    a912:	4801      	ldr	r0, [pc, #4]	; (a918 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    a914:	6008      	str	r0, [r1, #0]
    a916:	4770      	bx	lr
    a918:	02020000 	.word	0x02020000
    a91c:	4001f508 	.word	0x4001f508

0000a920 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a920:	b510      	push	{r4, lr}
    a922:	4604      	mov	r4, r0
    a924:	f000 f822 	bl	a96c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a928:	2c00      	cmp	r4, #0
    a92a:	d017      	beq.n	a95c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a92c:	4a0c      	ldr	r2, [pc, #48]	; (a960 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a92e:	480c      	ldr	r0, [pc, #48]	; (a960 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a930:	490c      	ldr	r1, [pc, #48]	; (a964 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a932:	3214      	adds	r2, #20
    a934:	4b0c      	ldr	r3, [pc, #48]	; (a968 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a936:	2c01      	cmp	r4, #1
    a938:	d005      	beq.n	a946 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a93a:	2c02      	cmp	r4, #2
    a93c:	d008      	beq.n	a950 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a93e:	2183      	movs	r1, #131	; 0x83
    a940:	203d      	movs	r0, #61	; 0x3d
    a942:	f7f9 fa4f 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a946:	2402      	movs	r4, #2
    a948:	6004      	str	r4, [r0, #0]
    a94a:	6011      	str	r1, [r2, #0]
    a94c:	0620      	lsls	r0, r4, #24
    a94e:	e004      	b.n	a95a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a950:	2403      	movs	r4, #3
    a952:	6004      	str	r4, [r0, #0]
    a954:	6011      	str	r1, [r2, #0]
    a956:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a95a:	6018      	str	r0, [r3, #0]
    a95c:	bd10      	pop	{r4, pc}
    a95e:	0000      	.short	0x0000
    a960:	4000f500 	.word	0x4000f500
    a964:	200014c3 	.word	0x200014c3
    a968:	4001f504 	.word	0x4001f504
    a96c:	4804      	ldr	r0, [pc, #16]	; (a980 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a96e:	2100      	movs	r1, #0
    a970:	6001      	str	r1, [r0, #0]
    a972:	6001      	str	r1, [r0, #0]
    a974:	4903      	ldr	r1, [pc, #12]	; (a984 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a976:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a97a:	6008      	str	r0, [r1, #0]
    a97c:	4770      	bx	lr
    a97e:	0000      	.short	0x0000
    a980:	4000f500 	.word	0x4000f500
    a984:	4001f508 	.word	0x4001f508

0000a988 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a988:	4805      	ldr	r0, [pc, #20]	; (a9a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a98a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a98e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a992:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a996:	4903      	ldr	r1, [pc, #12]	; (a9a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    a998:	2000      	movs	r0, #0
    a99a:	6008      	str	r0, [r1, #0]
    a99c:	4770      	bx	lr
    a99e:	0000      	.short	0x0000
    a9a0:	40001000 	.word	0x40001000
    a9a4:	40001560 	.word	0x40001560

0000a9a8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a9a8:	4904      	ldr	r1, [pc, #16]	; (a9bc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a9aa:	6008      	str	r0, [r1, #0]
    a9ac:	4804      	ldr	r0, [pc, #16]	; (a9c0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    a9ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a9b2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a9b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a9ba:	4770      	bx	lr
    a9bc:	40001560 	.word	0x40001560
    a9c0:	40001000 	.word	0x40001000

0000a9c4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a9c4:	4801      	ldr	r0, [pc, #4]	; (a9cc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a9c6:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    a9ca:	4770      	bx	lr
    a9cc:	20000f7c 	.word	0x20000f7c

0000a9d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9d2:	4c1e      	ldr	r4, [pc, #120]	; (aa4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    a9d4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a9d8:	2710      	movs	r7, #16
    a9da:	f3c0 1600 	ubfx	r6, r0, #4, #1
    a9de:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    a9e2:	2002      	movs	r0, #2
    a9e4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a9e8:	4819      	ldr	r0, [pc, #100]	; (aa50 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    a9ea:	2500      	movs	r5, #0
    a9ec:	491a      	ldr	r1, [pc, #104]	; (aa58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    a9ee:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    a9f2:	4818      	ldr	r0, [pc, #96]	; (aa54 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    a9f4:	6008      	str	r0, [r1, #0]
    a9f6:	4819      	ldr	r0, [pc, #100]	; (aa5c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    a9f8:	6800      	ldr	r0, [r0, #0]
    a9fa:	b1b0      	cbz	r0, aa2a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    a9fc:	20ff      	movs	r0, #255	; 0xff
    a9fe:	f88d 0000 	strb.w	r0, [sp]
    aa02:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    aa06:	2001      	movs	r0, #1
    aa08:	6120      	str	r0, [r4, #16]
    aa0a:	e004      	b.n	aa16 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    aa0c:	f89d 0000 	ldrb.w	r0, [sp]
    aa10:	1e40      	subs	r0, r0, #1
    aa12:	f88d 0000 	strb.w	r0, [sp]
    aa16:	f89d 0000 	ldrb.w	r0, [sp]
    aa1a:	b118      	cbz	r0, aa24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    aa1c:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    aa20:	2800      	cmp	r0, #0
    aa22:	d0f3      	beq.n	aa0c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    aa24:	f89d 0000 	ldrb.w	r0, [sp]
    aa28:	b150      	cbz	r0, aa40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    aa2a:	f000 fcb1 	bl	b390 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    aa2e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    aa32:	f000 fe29 	bl	b688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    aa36:	2e00      	cmp	r6, #0
    aa38:	d001      	beq.n	aa3e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    aa3a:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    aa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa40:	f240 71a3 	movw	r1, #1955	; 0x7a3
    aa44:	203e      	movs	r0, #62	; 0x3e
    aa46:	f7f9 f9cd 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa4a:	0000      	.short	0x0000
    aa4c:	40001000 	.word	0x40001000
    aa50:	20000f7c 	.word	0x20000f7c
    aa54:	0c0e0000 	.word	0x0c0e0000
    aa58:	4001f508 	.word	0x4001f508
    aa5c:	40001550 	.word	0x40001550

0000aa60 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa64:	4c1f      	ldr	r4, [pc, #124]	; (aae4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    aa66:	4607      	mov	r7, r0
    aa68:	4688      	mov	r8, r1
    aa6a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    aa6e:	07c1      	lsls	r1, r0, #31
    aa70:	d018      	beq.n	aaa4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    aa72:	4a1d      	ldr	r2, [pc, #116]	; (aae8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    aa74:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    aa78:	6011      	str	r1, [r2, #0]
    aa7a:	4d1c      	ldr	r5, [pc, #112]	; (aaec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    aa7c:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    aa80:	f041 0101 	orr.w	r1, r1, #1
    aa84:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    aa88:	f040 0002 	orr.w	r0, r0, #2
    aa8c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    aa90:	4640      	mov	r0, r8
    aa92:	f000 fe5d 	bl	b750 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    aa96:	f000 fc29 	bl	b2ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    aa9a:	2601      	movs	r6, #1
    aa9c:	b13f      	cbz	r7, aaae <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    aa9e:	2f01      	cmp	r7, #1
    aaa0:	d00e      	beq.n	aac0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    aaa2:	e016      	b.n	aad2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aaa4:	f240 612d 	movw	r1, #1581	; 0x62d
    aaa8:	203e      	movs	r0, #62	; 0x3e
    aaaa:	f7f9 f99b 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaae:	4640      	mov	r0, r8
    aab0:	f000 fc3c 	bl	b32c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    aab4:	4640      	mov	r0, r8
    aab6:	f000 fbfd 	bl	b2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    aaba:	7266      	strb	r6, [r4, #9]
    aabc:	602e      	str	r6, [r5, #0]
    aabe:	e008      	b.n	aad2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aac0:	f000 fc5c 	bl	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    aac4:	f000 fdaa 	bl	b61c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    aac8:	2002      	movs	r0, #2
    aaca:	7260      	strb	r0, [r4, #9]
    aacc:	f000 fcd2 	bl	b474 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    aad0:	606e      	str	r6, [r5, #4]
    aad2:	4807      	ldr	r0, [pc, #28]	; (aaf0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    aad4:	64c6      	str	r6, [r0, #76]	; 0x4c
    aad6:	4807      	ldr	r0, [pc, #28]	; (aaf4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    aad8:	6801      	ldr	r1, [r0, #0]
    aada:	4638      	mov	r0, r7
    aadc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aae0:	f005 b850 	b.w	fb84 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    aae4:	20000f7c 	.word	0x20000f7c
    aae8:	4001f504 	.word	0x4001f504
    aaec:	40001000 	.word	0x40001000
    aaf0:	40008000 	.word	0x40008000
    aaf4:	4000854c 	.word	0x4000854c

0000aaf8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    aaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aafc:	4d35      	ldr	r5, [pc, #212]	; (abd4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    aafe:	4606      	mov	r6, r0
    ab00:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ab04:	4689      	mov	r9, r1
    ab06:	6028      	str	r0, [r5, #0]
    ab08:	4c33      	ldr	r4, [pc, #204]	; (abd8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    ab0a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    ab0e:	f040 0002 	orr.w	r0, r0, #2
    ab12:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    ab16:	4608      	mov	r0, r1
    ab18:	f000 fe1a 	bl	b750 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ab1c:	f000 fbe6 	bl	b2ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    ab20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; abdc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    ab24:	2700      	movs	r7, #0
    ab26:	b116      	cbz	r6, ab2e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    ab28:	2e01      	cmp	r6, #1
    ab2a:	d027      	beq.n	ab7c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    ab2c:	e03f      	b.n	abae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ab2e:	4648      	mov	r0, r9
    ab30:	f000 fbfc 	bl	b32c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    ab34:	79e0      	ldrb	r0, [r4, #7]
    ab36:	2801      	cmp	r0, #1
    ab38:	d105      	bne.n	ab46 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    ab3a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ab3e:	f041 0108 	orr.w	r1, r1, #8
    ab42:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ab46:	4648      	mov	r0, r9
    ab48:	f000 fbb4 	bl	b2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ab4c:	2001      	movs	r0, #1
    ab4e:	7260      	strb	r0, [r4, #9]
    ab50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ab52:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ab56:	62a0      	str	r0, [r4, #40]	; 0x28
    ab58:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ab5c:	6028      	str	r0, [r5, #0]
    ab5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab62:	f1b9 0f02 	cmp.w	r9, #2
    ab66:	d007      	beq.n	ab78 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    ab68:	f640 0034 	movw	r0, #2100	; 0x834
    ab6c:	f649 72ec 	movw	r2, #40940	; 0x9fec
    ab70:	4410      	add	r0, r2
    ab72:	fbb0 f7f1 	udiv	r7, r0, r1
    ab76:	e01a      	b.n	abae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ab78:	4608      	mov	r0, r1
    ab7a:	e7f7      	b.n	ab6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    ab7c:	f000 fbfe 	bl	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ab80:	f000 fd4c 	bl	b61c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ab84:	79e0      	ldrb	r0, [r4, #7]
    ab86:	2801      	cmp	r0, #1
    ab88:	d105      	bne.n	ab96 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    ab8a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ab8e:	f041 0104 	orr.w	r1, r1, #4
    ab92:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ab96:	2002      	movs	r0, #2
    ab98:	7260      	strb	r0, [r4, #9]
    ab9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ab9c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    aba0:	62a0      	str	r0, [r4, #40]	; 0x28
    aba2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    aba6:	6028      	str	r0, [r5, #0]
    aba8:	2729      	movs	r7, #41	; 0x29
    abaa:	f000 fc63 	bl	b474 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    abae:	f000 fc4d 	bl	b44c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    abb2:	f001 f80b 	bl	bbcc <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    abb6:	6800      	ldr	r0, [r0, #0]
    abb8:	2801      	cmp	r0, #1
    abba:	d006      	beq.n	abca <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    abbc:	2100      	movs	r1, #0
    abbe:	4630      	mov	r0, r6
    abc0:	f004 ffe0 	bl	fb84 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    abc4:	4638      	mov	r0, r7
    abc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abca:	f7ff ff01 	bl	a9d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    abce:	2000      	movs	r0, #0
    abd0:	e7f9      	b.n	abc6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    abd2:	0000      	.short	0x0000
    abd4:	4001f504 	.word	0x4001f504
    abd8:	20000f7c 	.word	0x20000f7c
    abdc:	40001000 	.word	0x40001000

0000abe0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    abe0:	4a02      	ldr	r2, [pc, #8]	; (abec <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    abe2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    abe4:	6003      	str	r3, [r0, #0]
    abe6:	6b50      	ldr	r0, [r2, #52]	; 0x34
    abe8:	6008      	str	r0, [r1, #0]
    abea:	4770      	bx	lr
    abec:	20000f7c 	.word	0x20000f7c

0000abf0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    abf0:	b510      	push	{r4, lr}
    abf2:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    abf4:	4901      	ldr	r1, [pc, #4]	; (abfc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    abf6:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    abfa:	bd10      	pop	{r4, pc}
    abfc:	20000f6c 	.word	0x20000f6c

0000ac00 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ac00:	490e      	ldr	r1, [pc, #56]	; (ac3c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    ac02:	b510      	push	{r4, lr}
    ac04:	69ca      	ldr	r2, [r1, #28]
    ac06:	4282      	cmp	r2, r0
    ac08:	d302      	bcc.n	ac10 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ac0a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    ac0e:	e00a      	b.n	ac26 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    ac10:	2201      	movs	r2, #1
    ac12:	730a      	strb	r2, [r1, #12]
    ac14:	6108      	str	r0, [r1, #16]
    ac16:	490a      	ldr	r1, [pc, #40]	; (ac40 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    ac18:	644a      	str	r2, [r1, #68]	; 0x44
    ac1a:	4a0a      	ldr	r2, [pc, #40]	; (ac44 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ac1c:	6813      	ldr	r3, [r2, #0]
    ac1e:	4283      	cmp	r3, r0
    ac20:	d304      	bcc.n	ac2c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    ac22:	f640 0129 	movw	r1, #2089	; 0x829
    ac26:	203e      	movs	r0, #62	; 0x3e
    ac28:	f7f9 f8dc 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac2c:	2300      	movs	r3, #0
    ac2e:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ac32:	6010      	str	r0, [r2, #0]
    ac34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac38:	f000 bcfe 	b.w	b638 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    ac3c:	20000f7c 	.word	0x20000f7c
    ac40:	40008000 	.word	0x40008000
    ac44:	40008544 	.word	0x40008544

0000ac48 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ac48:	b570      	push	{r4, r5, r6, lr}
    ac4a:	4c10      	ldr	r4, [pc, #64]	; (ac8c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ac4c:	4606      	mov	r6, r0
    ac4e:	2002      	movs	r0, #2
    ac50:	7320      	strb	r0, [r4, #12]
    ac52:	2596      	movs	r5, #150	; 0x96
    ac54:	f000 f866 	bl	ad24 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    ac58:	4602      	mov	r2, r0
    ac5a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ac5e:	f894 1020 	ldrb.w	r1, [r4, #32]
    ac62:	2801      	cmp	r0, #1
    ac64:	d00d      	beq.n	ac82 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    ac66:	4628      	mov	r0, r5
    ac68:	f004 ffa4 	bl	fbb4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ac6c:	4908      	ldr	r1, [pc, #32]	; (ac90 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    ac6e:	6120      	str	r0, [r4, #16]
    ac70:	2000      	movs	r0, #0
    ac72:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ac76:	6921      	ldr	r1, [r4, #16]
    ac78:	69e0      	ldr	r0, [r4, #28]
    ac7a:	4408      	add	r0, r1
    ac7c:	4905      	ldr	r1, [pc, #20]	; (ac94 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ac7e:	6008      	str	r0, [r1, #0]
    ac80:	bd70      	pop	{r4, r5, r6, pc}
    ac82:	4633      	mov	r3, r6
    ac84:	4628      	mov	r0, r5
    ac86:	f004 ffb1 	bl	fbec <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ac8a:	e7ef      	b.n	ac6c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ac8c:	20000f7c 	.word	0x20000f7c
    ac90:	40008000 	.word	0x40008000
    ac94:	40008544 	.word	0x40008544

0000ac98 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ac98:	b510      	push	{r4, lr}
    ac9a:	f001 f8dc 	bl	be56 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ac9e:	2800      	cmp	r0, #0
    aca0:	d006      	beq.n	acb0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    aca2:	4804      	ldr	r0, [pc, #16]	; (acb4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    aca4:	6801      	ldr	r1, [r0, #0]
    aca6:	f021 0101 	bic.w	r1, r1, #1
    acaa:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    acae:	6001      	str	r1, [r0, #0]
    acb0:	bd10      	pop	{r4, pc}
    acb2:	0000      	.short	0x0000
    acb4:	40001774 	.word	0x40001774

0000acb8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acbc:	2238      	movs	r2, #56	; 0x38
    acbe:	2100      	movs	r1, #0
    acc0:	4813      	ldr	r0, [pc, #76]	; (ad10 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    acc2:	f001 f978 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    acc6:	f000 fcdf 	bl	b688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    acca:	f001 f87d 	bl	bdc8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    acce:	4d11      	ldr	r5, [pc, #68]	; (ad14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    acd0:	4e10      	ldr	r6, [pc, #64]	; (ad14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    acd2:	2400      	movs	r4, #0
    acd4:	4f0f      	ldr	r7, [pc, #60]	; (ad14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    acd6:	3508      	adds	r5, #8
    acd8:	3610      	adds	r6, #16
    acda:	b928      	cbnz	r0, ace8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    acdc:	f001 f88b 	bl	bdf6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ace0:	b910      	cbnz	r0, ace8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ace2:	f001 f892 	bl	be0a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ace6:	b108      	cbz	r0, acec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ace8:	2224      	movs	r2, #36	; 0x24
    acea:	e006      	b.n	acfa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    acec:	f001 f8cd 	bl	be8a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    acf0:	b910      	cbnz	r0, acf8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    acf2:	f001 f8c0 	bl	be76 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    acf6:	b140      	cbz	r0, ad0a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    acf8:	2240      	movs	r2, #64	; 0x40
    acfa:	21ff      	movs	r1, #255	; 0xff
    acfc:	4638      	mov	r0, r7
    acfe:	f001 f95a 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ad02:	602c      	str	r4, [r5, #0]
    ad04:	6034      	str	r4, [r6, #0]
    ad06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad0a:	2238      	movs	r2, #56	; 0x38
    ad0c:	e7f5      	b.n	acfa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ad0e:	0000      	.short	0x0000
    ad10:	20000f7c 	.word	0x20000f7c
    ad14:	40000e00 	.word	0x40000e00

0000ad18 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    ad18:	4801      	ldr	r0, [pc, #4]	; (ad20 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    ad1a:	69c0      	ldr	r0, [r0, #28]
    ad1c:	4770      	bx	lr
    ad1e:	0000      	.short	0x0000
    ad20:	20000f7c 	.word	0x20000f7c

0000ad24 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    ad24:	4814      	ldr	r0, [pc, #80]	; (ad78 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    ad26:	b510      	push	{r4, lr}
    ad28:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    ad2c:	7a40      	ldrb	r0, [r0, #9]
    ad2e:	b141      	cbz	r1, ad42 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    ad30:	2902      	cmp	r1, #2
    ad32:	d00b      	beq.n	ad4c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    ad34:	2802      	cmp	r0, #2
    ad36:	d009      	beq.n	ad4c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    ad38:	2901      	cmp	r1, #1
    ad3a:	d00b      	beq.n	ad54 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    ad3c:	2801      	cmp	r0, #1
    ad3e:	d009      	beq.n	ad54 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    ad40:	e015      	b.n	ad6e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    ad42:	2800      	cmp	r0, #0
    ad44:	d1f6      	bne.n	ad34 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    ad46:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    ad4a:	e00d      	b.n	ad68 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    ad4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad50:	f000 bc16 	b.w	b580 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    ad54:	4809      	ldr	r0, [pc, #36]	; (ad7c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    ad56:	6800      	ldr	r0, [r0, #0]
    ad58:	f000 000f 	and.w	r0, r0, #15
    ad5c:	2803      	cmp	r0, #3
    ad5e:	d006      	beq.n	ad6e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    ad60:	2804      	cmp	r0, #4
    ad62:	d006      	beq.n	ad72 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    ad64:	f240 11e7 	movw	r1, #487	; 0x1e7
    ad68:	203e      	movs	r0, #62	; 0x3e
    ad6a:	f7f9 f83b 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad6e:	2001      	movs	r0, #1
    ad70:	bd10      	pop	{r4, pc}
    ad72:	2002      	movs	r0, #2
    ad74:	bd10      	pop	{r4, pc}
    ad76:	0000      	.short	0x0000
    ad78:	20000f7c 	.word	0x20000f7c
    ad7c:	40001510 	.word	0x40001510

0000ad80 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ad80:	4801      	ldr	r0, [pc, #4]	; (ad88 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ad82:	6980      	ldr	r0, [r0, #24]
    ad84:	4770      	bx	lr
    ad86:	0000      	.short	0x0000
    ad88:	20000f7c 	.word	0x20000f7c

0000ad8c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ad8c:	b510      	push	{r4, lr}
    ad8e:	f000 fc61 	bl	b654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    ad92:	f7ff fe1d 	bl	a9d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ad96:	f004 fe8b 	bl	fab0 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    ad9a:	480f      	ldr	r0, [pc, #60]	; (add8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    ad9c:	4a0f      	ldr	r2, [pc, #60]	; (addc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    ad9e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ada0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ada4:	6011      	str	r1, [r2, #0]
    ada6:	2400      	movs	r4, #0
    ada8:	6284      	str	r4, [r0, #40]	; 0x28
    adaa:	7304      	strb	r4, [r0, #12]
    adac:	61c4      	str	r4, [r0, #28]
    adae:	6184      	str	r4, [r0, #24]
    adb0:	f000 fc50 	bl	b654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    adb4:	480a      	ldr	r0, [pc, #40]	; (ade0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    adb6:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    adba:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    adbe:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    adc2:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    adc6:	2001      	movs	r0, #1
    adc8:	f004 feab 	bl	fb22 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    add0:	2001      	movs	r0, #1
    add2:	f004 be99 	b.w	fb08 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    add6:	0000      	.short	0x0000
    add8:	20000f7c 	.word	0x20000f7c
    addc:	4001f508 	.word	0x4001f508
    ade0:	40008000 	.word	0x40008000

0000ade4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ade8:	2001      	movs	r0, #1
    adea:	f004 fe9a 	bl	fb22 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    adee:	4838      	ldr	r0, [pc, #224]	; (aed0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    adf0:	2400      	movs	r4, #0
    adf2:	6004      	str	r4, [r0, #0]
    adf4:	2601      	movs	r6, #1
    adf6:	6006      	str	r6, [r0, #0]
    adf8:	f001 f81d 	bl	be36 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    adfc:	4d35      	ldr	r5, [pc, #212]	; (aed4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    adfe:	b118      	cbz	r0, ae08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    ae00:	6828      	ldr	r0, [r5, #0]
    ae02:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ae06:	6028      	str	r0, [r5, #0]
    ae08:	f001 f809 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ae0c:	b128      	cbz	r0, ae1a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    ae0e:	6828      	ldr	r0, [r5, #0]
    ae10:	4931      	ldr	r1, [pc, #196]	; (aed8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ae12:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ae16:	4308      	orrs	r0, r1
    ae18:	6028      	str	r0, [r5, #0]
    ae1a:	f001 f81c 	bl	be56 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ae1e:	b138      	cbz	r0, ae30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    ae20:	482c      	ldr	r0, [pc, #176]	; (aed4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ae22:	1d00      	adds	r0, r0, #4
    ae24:	6801      	ldr	r1, [r0, #0]
    ae26:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ae2a:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ae2e:	6001      	str	r1, [r0, #0]
    ae30:	4928      	ldr	r1, [pc, #160]	; (aed4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ae32:	482a      	ldr	r0, [pc, #168]	; (aedc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ae34:	313c      	adds	r1, #60	; 0x3c
    ae36:	6008      	str	r0, [r1, #0]
    ae38:	f7f8 fec0 	bl	3bbc <mpsl_fem_device_config_254_apply_get>
    ae3c:	b140      	cbz	r0, ae50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    ae3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ae42:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ae46:	1c41      	adds	r1, r0, #1
    ae48:	d002      	beq.n	ae50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    ae4a:	4922      	ldr	r1, [pc, #136]	; (aed4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ae4c:	3110      	adds	r1, #16
    ae4e:	6008      	str	r0, [r1, #0]
    ae50:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ae54:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ae56:	1c41      	adds	r1, r0, #1
    ae58:	d004      	beq.n	ae64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    ae5a:	4921      	ldr	r1, [pc, #132]	; (aee0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ae5c:	680a      	ldr	r2, [r1, #0]
    ae5e:	f360 4217 	bfi	r2, r0, #16, #8
    ae62:	600a      	str	r2, [r1, #0]
    ae64:	491e      	ldr	r1, [pc, #120]	; (aee0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ae66:	f240 605b 	movw	r0, #1627	; 0x65b
    ae6a:	3954      	subs	r1, #84	; 0x54
    ae6c:	6008      	str	r0, [r1, #0]
    ae6e:	1f09      	subs	r1, r1, #4
    ae70:	f240 1003 	movw	r0, #259	; 0x103
    ae74:	6008      	str	r0, [r1, #0]
    ae76:	1f08      	subs	r0, r1, #4
    ae78:	6006      	str	r6, [r0, #0]
    ae7a:	2001      	movs	r0, #1
    ae7c:	f000 fc68 	bl	b750 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ae80:	4917      	ldr	r1, [pc, #92]	; (aee0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ae82:	f240 1001 	movw	r0, #257	; 0x101
    ae86:	31c4      	adds	r1, #196	; 0xc4
    ae88:	6008      	str	r0, [r1, #0]
    ae8a:	4e16      	ldr	r6, [pc, #88]	; (aee4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ae8c:	2502      	movs	r5, #2
    ae8e:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    ae92:	4916      	ldr	r1, [pc, #88]	; (aeec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ae94:	4814      	ldr	r0, [pc, #80]	; (aee8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ae96:	6008      	str	r0, [r1, #0]
    ae98:	4815      	ldr	r0, [pc, #84]	; (aef0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    ae9a:	4f16      	ldr	r7, [pc, #88]	; (aef4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    ae9c:	f506 7600 	add.w	r6, r6, #512	; 0x200
    aea0:	8604      	strh	r4, [r0, #48]	; 0x30
    aea2:	3010      	adds	r0, #16
    aea4:	61c4      	str	r4, [r0, #28]
    aea6:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    aeaa:	703c      	strb	r4, [r7, #0]
    aeac:	2001      	movs	r0, #1
    aeae:	f004 fe2b 	bl	fb08 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    aeb2:	2010      	movs	r0, #16
    aeb4:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    aeb8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    aebc:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    aec0:	6878      	ldr	r0, [r7, #4]
    aec2:	2800      	cmp	r0, #0
    aec4:	d002      	beq.n	aecc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aeca:	4700      	bx	r0
    aecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aed0:	40001ffc 	.word	0x40001ffc
    aed4:	4000173c 	.word	0x4000173c
    aed8:	80000096 	.word	0x80000096
    aedc:	8900002c 	.word	0x8900002c
    aee0:	4000158c 	.word	0x4000158c
    aee4:	40001000 	.word	0x40001000
    aee8:	0c0e0000 	.word	0x0c0e0000
    aeec:	4001f508 	.word	0x4001f508
    aef0:	20000f6c 	.word	0x20000f6c
    aef4:	20000270 	.word	0x20000270

0000aef8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    aef8:	4901      	ldr	r1, [pc, #4]	; (af00 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    aefa:	7508      	strb	r0, [r1, #20]
    aefc:	4770      	bx	lr
    aefe:	0000      	.short	0x0000
    af00:	20000f7c 	.word	0x20000f7c

0000af04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    af04:	4904      	ldr	r1, [pc, #16]	; (af18 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    af06:	6008      	str	r0, [r1, #0]
    af08:	4804      	ldr	r0, [pc, #16]	; (af1c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    af0a:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    af0e:	f041 0101 	orr.w	r1, r1, #1
    af12:	7001      	strb	r1, [r0, #0]
    af14:	f000 ba62 	b.w	b3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    af18:	40001504 	.word	0x40001504
    af1c:	20000f7c 	.word	0x20000f7c

0000af20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    af20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af24:	4e35      	ldr	r6, [pc, #212]	; (affc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    af26:	4607      	mov	r7, r0
    af28:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    af2c:	468a      	mov	sl, r1
    af2e:	4614      	mov	r4, r2
    af30:	6030      	str	r0, [r6, #0]
    af32:	4610      	mov	r0, r2
    af34:	f000 fc0c 	bl	b750 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    af38:	f000 f9d8 	bl	b2ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    af3c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b000 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    af40:	4d30      	ldr	r5, [pc, #192]	; (b004 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    af42:	f04f 0801 	mov.w	r8, #1
    af46:	b127      	cbz	r7, af52 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    af48:	2f01      	cmp	r7, #1
    af4a:	d01d      	beq.n	af88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    af4c:	f240 7122 	movw	r1, #1826	; 0x722
    af50:	e04a      	b.n	afe8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    af52:	4620      	mov	r0, r4
    af54:	f000 f9ea 	bl	b32c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    af58:	4620      	mov	r0, r4
    af5a:	f000 f9ab 	bl	b2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    af5e:	2c02      	cmp	r4, #2
    af60:	d00f      	beq.n	af82 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    af62:	f640 0034 	movw	r0, #2100	; 0x834
    af66:	bf00      	nop
    af68:	f649 51f8 	movw	r1, #40440	; 0x9df8
    af6c:	4401      	add	r1, r0
    af6e:	4650      	mov	r0, sl
    af70:	f000 fb92 	bl	b698 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    af74:	4604      	mov	r4, r0
    af76:	4648      	mov	r0, r9
    af78:	f000 fb7a 	bl	b670 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    af7c:	f885 8009 	strb.w	r8, [r5, #9]
    af80:	e014      	b.n	afac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    af82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    af86:	e7ef      	b.n	af68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    af88:	f000 f9f8 	bl	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    af8c:	f000 fb46 	bl	b61c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    af90:	f000 fa70 	bl	b474 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    af94:	f649 71ba 	movw	r1, #40890	; 0x9fba
    af98:	4650      	mov	r0, sl
    af9a:	f000 fb7d 	bl	b698 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    af9e:	4604      	mov	r4, r0
    afa0:	4817      	ldr	r0, [pc, #92]	; (b000 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    afa2:	1d00      	adds	r0, r0, #4
    afa4:	f000 fb64 	bl	b670 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    afa8:	2002      	movs	r0, #2
    afaa:	7268      	strb	r0, [r5, #9]
    afac:	4816      	ldr	r0, [pc, #88]	; (b008 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    afae:	6004      	str	r4, [r0, #0]
    afb0:	4917      	ldr	r1, [pc, #92]	; (b010 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    afb2:	4816      	ldr	r0, [pc, #88]	; (b00c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    afb4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    afb8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    afba:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    afbe:	62a8      	str	r0, [r5, #40]	; 0x28
    afc0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    afc4:	6030      	str	r0, [r6, #0]
    afc6:	2110      	movs	r1, #16
    afc8:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    afcc:	1200      	asrs	r0, r0, #8
    afce:	6030      	str	r0, [r6, #0]
    afd0:	f000 fa3c 	bl	b44c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    afd4:	490f      	ldr	r1, [pc, #60]	; (b014 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    afd6:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    afda:	480b      	ldr	r0, [pc, #44]	; (b008 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    afdc:	300c      	adds	r0, #12
    afde:	6800      	ldr	r0, [r0, #0]
    afe0:	42a0      	cmp	r0, r4
    afe2:	d304      	bcc.n	afee <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    afe4:	f240 7149 	movw	r1, #1865	; 0x749
    afe8:	203e      	movs	r0, #62	; 0x3e
    afea:	f7f8 fefb 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afee:	4621      	mov	r1, r4
    aff0:	4638      	mov	r0, r7
    aff2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aff6:	f004 bdc5 	b.w	fb84 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    affa:	0000      	.short	0x0000
    affc:	4001f504 	.word	0x4001f504
    b000:	40001000 	.word	0x40001000
    b004:	20000f7c 	.word	0x20000f7c
    b008:	40008540 	.word	0x40008540
    b00c:	40008140 	.word	0x40008140
    b010:	4001f098 	.word	0x4001f098
    b014:	40008000 	.word	0x40008000

0000b018 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b018:	4b0d      	ldr	r3, [pc, #52]	; (b050 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    b01a:	b510      	push	{r4, lr}
    b01c:	71d8      	strb	r0, [r3, #7]
    b01e:	729a      	strb	r2, [r3, #10]
    b020:	b151      	cbz	r1, b038 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    b022:	2002      	movs	r0, #2
    b024:	7218      	strb	r0, [r3, #8]
    b026:	2801      	cmp	r0, #1
    b028:	d008      	beq.n	b03c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    b02a:	2802      	cmp	r0, #2
    b02c:	d00f      	beq.n	b04e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b02e:	f640 112a 	movw	r1, #2346	; 0x92a
    b032:	203e      	movs	r0, #62	; 0x3e
    b034:	f7f8 fed6 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b038:	2001      	movs	r0, #1
    b03a:	e7f3      	b.n	b024 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    b03c:	7a58      	ldrb	r0, [r3, #9]
    b03e:	2802      	cmp	r0, #2
    b040:	d105      	bne.n	b04e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b042:	f000 f99b 	bl	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b04a:	f000 bae7 	b.w	b61c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b04e:	bd10      	pop	{r4, pc}
    b050:	20000f7c 	.word	0x20000f7c

0000b054 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    b054:	4901      	ldr	r1, [pc, #4]	; (b05c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    b056:	2000      	movs	r0, #0
    b058:	6008      	str	r0, [r1, #0]
    b05a:	4770      	bx	lr
    b05c:	40008540 	.word	0x40008540

0000b060 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b060:	490a      	ldr	r1, [pc, #40]	; (b08c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    b062:	b508      	push	{r3, lr}
    b064:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    b068:	2a01      	cmp	r2, #1
    b06a:	d001      	beq.n	b070 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    b06c:	2000      	movs	r0, #0
    b06e:	bd08      	pop	{r3, pc}
    b070:	4a07      	ldr	r2, [pc, #28]	; (b090 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    b072:	6812      	ldr	r2, [r2, #0]
    b074:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b078:	4252      	negs	r2, r2
    b07a:	7002      	strb	r2, [r0, #0]
    b07c:	2000      	movs	r0, #0
    b07e:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    b082:	4804      	ldr	r0, [pc, #16]	; (b094 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    b084:	6800      	ldr	r0, [r0, #0]
    b086:	9000      	str	r0, [sp, #0]
    b088:	2001      	movs	r0, #1
    b08a:	bd08      	pop	{r3, pc}
    b08c:	40001000 	.word	0x40001000
    b090:	40001548 	.word	0x40001548
    b094:	4000111c 	.word	0x4000111c

0000b098 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b098:	4a03      	ldr	r2, [pc, #12]	; (b0a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b09a:	0e01      	lsrs	r1, r0, #24
    b09c:	6011      	str	r1, [r2, #0]
    b09e:	4902      	ldr	r1, [pc, #8]	; (b0a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b0a0:	0200      	lsls	r0, r0, #8
    b0a2:	3908      	subs	r1, #8
    b0a4:	6008      	str	r0, [r1, #0]
    b0a6:	4770      	bx	lr
    b0a8:	40001524 	.word	0x40001524

0000b0ac <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b0ac:	6800      	ldr	r0, [r0, #0]
    b0ae:	4902      	ldr	r1, [pc, #8]	; (b0b8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    b0b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b0b4:	6008      	str	r0, [r1, #0]
    b0b6:	4770      	bx	lr
    b0b8:	4000153c 	.word	0x4000153c

0000b0bc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    b0bc:	b510      	push	{r4, lr}
    b0be:	f000 fb23 	bl	b708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    b0c2:	4806      	ldr	r0, [pc, #24]	; (b0dc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    b0c4:	6800      	ldr	r0, [r0, #0]
    b0c6:	2803      	cmp	r0, #3
    b0c8:	d001      	beq.n	b0ce <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    b0ca:	280b      	cmp	r0, #11
    b0cc:	d104      	bne.n	b0d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    b0ce:	f240 218a 	movw	r1, #650	; 0x28a
    b0d2:	203e      	movs	r0, #62	; 0x3e
    b0d4:	f7f8 fe86 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0d8:	bd10      	pop	{r4, pc}
    b0da:	0000      	.short	0x0000
    b0dc:	40001550 	.word	0x40001550

0000b0e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b0e0:	4901      	ldr	r1, [pc, #4]	; (b0e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b0e2:	7548      	strb	r0, [r1, #21]
    b0e4:	4770      	bx	lr
    b0e6:	0000      	.short	0x0000
    b0e8:	20000f7c 	.word	0x20000f7c

0000b0ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0f0:	4d51      	ldr	r5, [pc, #324]	; (b238 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    b0f2:	2701      	movs	r7, #1
    b0f4:	64ef      	str	r7, [r5, #76]	; 0x4c
    b0f6:	4851      	ldr	r0, [pc, #324]	; (b23c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b0f8:	f8d0 9000 	ldr.w	r9, [r0]
    b0fc:	4850      	ldr	r0, [pc, #320]	; (b240 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b0fe:	6800      	ldr	r0, [r0, #0]
    b100:	4c50      	ldr	r4, [pc, #320]	; (b244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b102:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    b106:	f000 f943 	bl	b390 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    b10a:	494f      	ldr	r1, [pc, #316]	; (b248 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    b10c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b10e:	6008      	str	r0, [r1, #0]
    b110:	f8df a138 	ldr.w	sl, [pc, #312]	; b24c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    b114:	2600      	movs	r6, #0
    b116:	62a6      	str	r6, [r4, #40]	; 0x28
    b118:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    b11c:	f240 121d 	movw	r2, #285	; 0x11d
    b120:	4391      	bics	r1, r2
    b122:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    b126:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    b12a:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    b12e:	b900      	cbnz	r0, b132 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    b130:	64af      	str	r7, [r5, #72]	; 0x48
    b132:	f000 f9b1 	bl	b498 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    b136:	4605      	mov	r5, r0
    b138:	4840      	ldr	r0, [pc, #256]	; (b23c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b13a:	1f00      	subs	r0, r0, #4
    b13c:	6800      	ldr	r0, [r0, #0]
    b13e:	61e0      	str	r0, [r4, #28]
    b140:	f7ff fdf0 	bl	ad24 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b144:	f884 0020 	strb.w	r0, [r4, #32]
    b148:	7a60      	ldrb	r0, [r4, #9]
    b14a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b14e:	61a6      	str	r6, [r4, #24]
    b150:	4e3f      	ldr	r6, [pc, #252]	; (b250 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    b152:	07a8      	lsls	r0, r5, #30
    b154:	d501      	bpl.n	b15a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    b156:	6830      	ldr	r0, [r6, #0]
    b158:	61a0      	str	r0, [r4, #24]
    b15a:	0728      	lsls	r0, r5, #28
    b15c:	d501      	bpl.n	b162 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    b15e:	6830      	ldr	r0, [r6, #0]
    b160:	61a0      	str	r0, [r4, #24]
    b162:	f04f 0800 	mov.w	r8, #0
    b166:	4649      	mov	r1, r9
    b168:	4628      	mov	r0, r5
    b16a:	f000 fa1d 	bl	b5a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    b16e:	b918      	cbnz	r0, b178 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    b170:	f8ca 7010 	str.w	r7, [sl, #16]
    b174:	f04f 0801 	mov.w	r8, #1
    b178:	4f32      	ldr	r7, [pc, #200]	; (b244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b17a:	07e8      	lsls	r0, r5, #31
    b17c:	f1a7 0710 	sub.w	r7, r7, #16
    b180:	d002      	beq.n	b188 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    b182:	6838      	ldr	r0, [r7, #0]
    b184:	4780      	blx	r0
    b186:	e031      	b.n	b1ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b188:	07a8      	lsls	r0, r5, #30
    b18a:	d526      	bpl.n	b1da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    b18c:	0768      	lsls	r0, r5, #29
    b18e:	d41e      	bmi.n	b1ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b190:	f000 fe61 	bl	be56 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b194:	b9d8      	cbnz	r0, b1ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b196:	f000 fe4e 	bl	be36 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b19a:	b9c0      	cbnz	r0, b1ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b19c:	482d      	ldr	r0, [pc, #180]	; (b254 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    b19e:	6800      	ldr	r0, [r0, #0]
    b1a0:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b1a4:	f3c0 6300 	ubfx	r3, r0, #24, #1
    b1a8:	f000 020f 	and.w	r2, r0, #15
    b1ac:	f3c0 1103 	ubfx	r1, r0, #4, #4
    b1b0:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b1b4:	b15b      	cbz	r3, b1ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b1b6:	b10a      	cbz	r2, b1bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    b1b8:	b101      	cbz	r1, b1bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    b1ba:	b940      	cbnz	r0, b1ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b1bc:	4825      	ldr	r0, [pc, #148]	; (b254 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    b1be:	1d00      	adds	r0, r0, #4
    b1c0:	6800      	ldr	r0, [r0, #0]
    b1c2:	b120      	cbz	r0, b1ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b1c4:	f1bc 0f03 	cmp.w	ip, #3
    b1c8:	d201      	bcs.n	b1ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b1ca:	f045 0504 	orr.w	r5, r5, #4
    b1ce:	f345 0080 	sbfx	r0, r5, #2, #1
    b1d2:	4641      	mov	r1, r8
    b1d4:	1c40      	adds	r0, r0, #1
    b1d6:	687a      	ldr	r2, [r7, #4]
    b1d8:	e007      	b.n	b1ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    b1da:	f015 0f28 	tst.w	r5, #40	; 0x28
    b1de:	d005      	beq.n	b1ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b1e0:	f345 1140 	sbfx	r1, r5, #5, #1
    b1e4:	68ba      	ldr	r2, [r7, #8]
    b1e6:	4640      	mov	r0, r8
    b1e8:	1c49      	adds	r1, r1, #1
    b1ea:	4790      	blx	r2
    b1ec:	06e8      	lsls	r0, r5, #27
    b1ee:	d501      	bpl.n	b1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    b1f0:	68f8      	ldr	r0, [r7, #12]
    b1f2:	4780      	blx	r0
    b1f4:	7a60      	ldrb	r0, [r4, #9]
    b1f6:	2802      	cmp	r0, #2
    b1f8:	d11b      	bne.n	b232 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    b1fa:	7b20      	ldrb	r0, [r4, #12]
    b1fc:	2800      	cmp	r0, #0
    b1fe:	d018      	beq.n	b232 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    b200:	2802      	cmp	r0, #2
    b202:	d004      	beq.n	b20e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    b204:	2801      	cmp	r0, #1
    b206:	d006      	beq.n	b216 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    b208:	f640 3103 	movw	r1, #2819	; 0xb03
    b20c:	e009      	b.n	b222 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    b20e:	6921      	ldr	r1, [r4, #16]
    b210:	69e0      	ldr	r0, [r4, #28]
    b212:	4408      	add	r0, r1
    b214:	e008      	b.n	b228 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    b216:	69e1      	ldr	r1, [r4, #28]
    b218:	6920      	ldr	r0, [r4, #16]
    b21a:	4288      	cmp	r0, r1
    b21c:	d804      	bhi.n	b228 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    b21e:	f640 3104 	movw	r1, #2820	; 0xb04
    b222:	203e      	movs	r0, #62	; 0x3e
    b224:	f7f8 fdde 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b228:	6030      	str	r0, [r6, #0]
    b22a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b22e:	f000 ba03 	b.w	b638 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    b232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b236:	0000      	.short	0x0000
    b238:	40008000 	.word	0x40008000
    b23c:	4000854c 	.word	0x4000854c
    b240:	4000b504 	.word	0x4000b504
    b244:	20000f7c 	.word	0x20000f7c
    b248:	4001f508 	.word	0x4001f508
    b24c:	40001000 	.word	0x40001000
    b250:	40008544 	.word	0x40008544
    b254:	40001450 	.word	0x40001450

0000b258 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b258:	b570      	push	{r4, r5, r6, lr}
    b25a:	4b11      	ldr	r3, [pc, #68]	; (b2a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    b25c:	888c      	ldrh	r4, [r1, #4]
    b25e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b262:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    b266:	780c      	ldrb	r4, [r1, #0]
    b268:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b26c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b270:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    b274:	4d0b      	ldr	r5, [pc, #44]	; (b2a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    b276:	6829      	ldr	r1, [r5, #0]
    b278:	f100 0608 	add.w	r6, r0, #8
    b27c:	2401      	movs	r4, #1
    b27e:	fa04 f306 	lsl.w	r3, r4, r6
    b282:	b132      	cbz	r2, b292 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b284:	2a01      	cmp	r2, #1
    b286:	d006      	beq.n	b296 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    b288:	f240 41c1 	movw	r1, #1217	; 0x4c1
    b28c:	203e      	movs	r0, #62	; 0x3e
    b28e:	f7f8 fda9 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b292:	4399      	bics	r1, r3
    b294:	e000      	b.n	b298 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    b296:	4319      	orrs	r1, r3
    b298:	4084      	lsls	r4, r0
    b29a:	430c      	orrs	r4, r1
    b29c:	602c      	str	r4, [r5, #0]
    b29e:	bd70      	pop	{r4, r5, r6, pc}
    b2a0:	40001000 	.word	0x40001000
    b2a4:	40001640 	.word	0x40001640

0000b2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b2a8:	4901      	ldr	r1, [pc, #4]	; (b2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b2aa:	2001      	movs	r0, #1
    b2ac:	7008      	strb	r0, [r1, #0]
    b2ae:	4770      	bx	lr
    b2b0:	20000270 	.word	0x20000270
    b2b4:	b510      	push	{r4, lr}
    b2b6:	4604      	mov	r4, r0
    b2b8:	f000 fdcd 	bl	be56 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b2bc:	2800      	cmp	r0, #0
    b2be:	d00e      	beq.n	b2de <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    b2c0:	4a09      	ldr	r2, [pc, #36]	; (b2e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b2c2:	6811      	ldr	r1, [r2, #0]
    b2c4:	0650      	lsls	r0, r2, #25
    b2c6:	2c02      	cmp	r4, #2
    b2c8:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b2cc:	d008      	beq.n	b2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    b2ce:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b2d2:	bf00      	nop
    b2d4:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b2d8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b2dc:	6010      	str	r0, [r2, #0]
    b2de:	bd10      	pop	{r4, pc}
    b2e0:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b2e4:	e7f6      	b.n	b2d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b2e6:	0000      	.short	0x0000
    b2e8:	40001588 	.word	0x40001588
    b2ec:	480d      	ldr	r0, [pc, #52]	; (b324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    b2ee:	7d40      	ldrb	r0, [r0, #21]
    b2f0:	2825      	cmp	r0, #37	; 0x25
    b2f2:	d007      	beq.n	b304 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    b2f4:	2826      	cmp	r0, #38	; 0x26
    b2f6:	d007      	beq.n	b308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    b2f8:	2827      	cmp	r0, #39	; 0x27
    b2fa:	d007      	beq.n	b30c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    b2fc:	280a      	cmp	r0, #10
    b2fe:	d807      	bhi.n	b310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    b300:	2204      	movs	r2, #4
    b302:	e006      	b.n	b312 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    b304:	2102      	movs	r1, #2
    b306:	e007      	b.n	b318 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    b308:	211a      	movs	r1, #26
    b30a:	e005      	b.n	b318 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    b30c:	2150      	movs	r1, #80	; 0x50
    b30e:	e003      	b.n	b318 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    b310:	2206      	movs	r2, #6
    b312:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    b316:	b2c9      	uxtb	r1, r1
    b318:	4a03      	ldr	r2, [pc, #12]	; (b328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    b31a:	6011      	str	r1, [r2, #0]
    b31c:	4902      	ldr	r1, [pc, #8]	; (b328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    b31e:	314c      	adds	r1, #76	; 0x4c
    b320:	6008      	str	r0, [r1, #0]
    b322:	4770      	bx	lr
    b324:	20000f7c 	.word	0x20000f7c
    b328:	40001508 	.word	0x40001508
    b32c:	4912      	ldr	r1, [pc, #72]	; (b378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    b32e:	b508      	push	{r3, lr}
    b330:	f991 2014 	ldrsb.w	r2, [r1, #20]
    b334:	7d49      	ldrb	r1, [r1, #21]
    b336:	2801      	cmp	r0, #1
    b338:	d00a      	beq.n	b350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    b33a:	2802      	cmp	r0, #2
    b33c:	d00a      	beq.n	b354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    b33e:	2804      	cmp	r0, #4
    b340:	d00a      	beq.n	b358 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    b342:	2808      	cmp	r0, #8
    b344:	d00a      	beq.n	b35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    b346:	f240 31da 	movw	r1, #986	; 0x3da
    b34a:	2006      	movs	r0, #6
    b34c:	f7f8 fd4a 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b350:	2000      	movs	r0, #0
    b352:	e004      	b.n	b35e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    b354:	2001      	movs	r0, #1
    b356:	e002      	b.n	b35e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    b358:	2003      	movs	r0, #3
    b35a:	e000      	b.n	b35e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    b35c:	2002      	movs	r0, #2
    b35e:	466b      	mov	r3, sp
    b360:	f7f5 f848 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b364:	b118      	cbz	r0, b36e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b366:	f240 41f3 	movw	r1, #1267	; 0x4f3
    b36a:	203e      	movs	r0, #62	; 0x3e
    b36c:	e7ee      	b.n	b34c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b36e:	f99d 0000 	ldrsb.w	r0, [sp]
    b372:	f000 f9e7 	bl	b744 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b376:	bd08      	pop	{r3, pc}
    b378:	20000f7c 	.word	0x20000f7c
    b37c:	4803      	ldr	r0, [pc, #12]	; (b38c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    b37e:	7a01      	ldrb	r1, [r0, #8]
    b380:	2901      	cmp	r1, #1
    b382:	d102      	bne.n	b38a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    b384:	7a80      	ldrb	r0, [r0, #10]
    b386:	f7ff bfd1 	b.w	b32c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b38a:	4770      	bx	lr
    b38c:	20000f7c 	.word	0x20000f7c
    b390:	4805      	ldr	r0, [pc, #20]	; (b3a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    b392:	7a40      	ldrb	r0, [r0, #9]
    b394:	2801      	cmp	r0, #1
    b396:	d003      	beq.n	b3a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    b398:	2802      	cmp	r0, #2
    b39a:	d103      	bne.n	b3a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    b39c:	f004 bb70 	b.w	fa80 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b3a0:	f004 bb7a 	b.w	fa98 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b3a4:	4770      	bx	lr
    b3a6:	0000      	.short	0x0000
    b3a8:	20000f7c 	.word	0x20000f7c
    b3ac:	4809      	ldr	r0, [pc, #36]	; (b3d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    b3ae:	b508      	push	{r3, lr}
    b3b0:	2100      	movs	r1, #0
    b3b2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b3b6:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b3ba:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b3be:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b3c2:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b3c6:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b3ca:	4803      	ldr	r0, [pc, #12]	; (b3d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    b3cc:	6800      	ldr	r0, [r0, #0]
    b3ce:	9000      	str	r0, [sp, #0]
    b3d0:	bd08      	pop	{r3, pc}
    b3d2:	0000      	.short	0x0000
    b3d4:	40001000 	.word	0x40001000
    b3d8:	40001118 	.word	0x40001118
    b3dc:	4816      	ldr	r0, [pc, #88]	; (b438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    b3de:	b510      	push	{r4, lr}
    b3e0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b3e4:	07c1      	lsls	r1, r0, #31
    b3e6:	d026      	beq.n	b436 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    b3e8:	0781      	lsls	r1, r0, #30
    b3ea:	d513      	bpl.n	b414 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    b3ec:	4813      	ldr	r0, [pc, #76]	; (b43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    b3ee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b3f2:	f041 0101 	orr.w	r1, r1, #1
    b3f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b3fa:	4811      	ldr	r0, [pc, #68]	; (b440 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    b3fc:	6800      	ldr	r0, [r0, #0]
    b3fe:	280b      	cmp	r0, #11
    b400:	d005      	beq.n	b40e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    b402:	280a      	cmp	r0, #10
    b404:	d003      	beq.n	b40e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    b406:	2803      	cmp	r0, #3
    b408:	d001      	beq.n	b40e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    b40a:	2802      	cmp	r0, #2
    b40c:	d113      	bne.n	b436 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    b40e:	f240 5123 	movw	r1, #1315	; 0x523
    b412:	e00d      	b.n	b430 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    b414:	0740      	lsls	r0, r0, #29
    b416:	d50e      	bpl.n	b436 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    b418:	4808      	ldr	r0, [pc, #32]	; (b43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    b41a:	490a      	ldr	r1, [pc, #40]	; (b444 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    b41c:	3008      	adds	r0, #8
    b41e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b422:	4809      	ldr	r0, [pc, #36]	; (b448 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    b424:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b428:	2801      	cmp	r0, #1
    b42a:	d104      	bne.n	b436 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    b42c:	f240 512a 	movw	r1, #1322	; 0x52a
    b430:	203e      	movs	r0, #62	; 0x3e
    b432:	f7f8 fcd7 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b436:	bd10      	pop	{r4, pc}
    b438:	20000f7c 	.word	0x20000f7c
    b43c:	40001000 	.word	0x40001000
    b440:	40001550 	.word	0x40001550
    b444:	4001f098 	.word	0x4001f098
    b448:	40008000 	.word	0x40008000
    b44c:	4808      	ldr	r0, [pc, #32]	; (b470 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    b44e:	4601      	mov	r1, r0
    b450:	79c2      	ldrb	r2, [r0, #7]
    b452:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b456:	b112      	cbz	r2, b45e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    b458:	2a01      	cmp	r2, #1
    b45a:	d003      	beq.n	b464 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b45c:	e006      	b.n	b46c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    b45e:	f041 0102 	orr.w	r1, r1, #2
    b462:	e001      	b.n	b468 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    b464:	f041 0104 	orr.w	r1, r1, #4
    b468:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b46c:	f7ff bfb6 	b.w	b3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    b470:	20000f7c 	.word	0x20000f7c
    b474:	b510      	push	{r4, lr}
    b476:	f000 fcee 	bl	be56 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b47a:	2800      	cmp	r0, #0
    b47c:	d108      	bne.n	b490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    b47e:	f000 fcda 	bl	be36 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b482:	2800      	cmp	r0, #0
    b484:	d104      	bne.n	b490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    b486:	4803      	ldr	r0, [pc, #12]	; (b494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    b488:	6801      	ldr	r1, [r0, #0]
    b48a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b48e:	6001      	str	r1, [r0, #0]
    b490:	bd10      	pop	{r4, pc}
    b492:	0000      	.short	0x0000
    b494:	40001568 	.word	0x40001568
    b498:	b538      	push	{r3, r4, r5, lr}
    b49a:	4d32      	ldr	r5, [pc, #200]	; (b564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    b49c:	2400      	movs	r4, #0
    b49e:	7b28      	ldrb	r0, [r5, #12]
    b4a0:	b120      	cbz	r0, b4ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b4a2:	4831      	ldr	r0, [pc, #196]	; (b568 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    b4a4:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b4a8:	2801      	cmp	r0, #1
    b4aa:	d007      	beq.n	b4bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    b4ac:	2200      	movs	r2, #0
    b4ae:	7a69      	ldrb	r1, [r5, #9]
    b4b0:	482e      	ldr	r0, [pc, #184]	; (b56c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    b4b2:	2901      	cmp	r1, #1
    b4b4:	d004      	beq.n	b4c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    b4b6:	2902      	cmp	r1, #2
    b4b8:	d00a      	beq.n	b4d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    b4ba:	e019      	b.n	b4f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b4bc:	2201      	movs	r2, #1
    b4be:	e7f6      	b.n	b4ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    b4c0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b4c4:	2901      	cmp	r1, #1
    b4c6:	d001      	beq.n	b4cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b4c8:	2400      	movs	r4, #0
    b4ca:	e011      	b.n	b4f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b4cc:	2408      	movs	r4, #8
    b4ce:	e00f      	b.n	b4f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b4d0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b4d4:	2901      	cmp	r1, #1
    b4d6:	d006      	beq.n	b4e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    b4d8:	2100      	movs	r1, #0
    b4da:	4b25      	ldr	r3, [pc, #148]	; (b570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    b4dc:	681b      	ldr	r3, [r3, #0]
    b4de:	2b01      	cmp	r3, #1
    b4e0:	d003      	beq.n	b4ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    b4e2:	2404      	movs	r4, #4
    b4e4:	e002      	b.n	b4ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    b4e6:	2102      	movs	r1, #2
    b4e8:	e7f7      	b.n	b4da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    b4ea:	2400      	movs	r4, #0
    b4ec:	430c      	orrs	r4, r1
    b4ee:	4314      	orrs	r4, r2
    b4f0:	f014 0f0b 	tst.w	r4, #11
    b4f4:	d105      	bne.n	b502 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    b4f6:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b4fa:	2901      	cmp	r1, #1
    b4fc:	d029      	beq.n	b552 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    b4fe:	2100      	movs	r1, #0
    b500:	430c      	orrs	r4, r1
    b502:	491c      	ldr	r1, [pc, #112]	; (b574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    b504:	7809      	ldrb	r1, [r1, #0]
    b506:	b1d1      	cbz	r1, b53e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    b508:	491b      	ldr	r1, [pc, #108]	; (b578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    b50a:	6809      	ldr	r1, [r1, #0]
    b50c:	f011 0fff 	tst.w	r1, #255	; 0xff
    b510:	d003      	beq.n	b51a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    b512:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b516:	2a01      	cmp	r2, #1
    b518:	d000      	beq.n	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    b51a:	2200      	movs	r2, #0
    b51c:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    b520:	f011 0fff 	tst.w	r1, #255	; 0xff
    b524:	d003      	beq.n	b52e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    b526:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b52a:	2801      	cmp	r0, #1
    b52c:	d000      	beq.n	b530 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    b52e:	2000      	movs	r0, #0
    b530:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b534:	480e      	ldr	r0, [pc, #56]	; (b570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    b536:	3010      	adds	r0, #16
    b538:	6800      	ldr	r0, [r0, #0]
    b53a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b53e:	f7ff ff35 	bl	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    b542:	06e0      	lsls	r0, r4, #27
    b544:	d509      	bpl.n	b55a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    b546:	0720      	lsls	r0, r4, #28
    b548:	d407      	bmi.n	b55a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    b54a:	7a68      	ldrb	r0, [r5, #9]
    b54c:	2801      	cmp	r0, #1
    b54e:	d002      	beq.n	b556 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    b550:	e003      	b.n	b55a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    b552:	2110      	movs	r1, #16
    b554:	e7d4      	b.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    b556:	f044 0420 	orr.w	r4, r4, #32
    b55a:	4808      	ldr	r0, [pc, #32]	; (b57c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    b55c:	6800      	ldr	r0, [r0, #0]
    b55e:	9000      	str	r0, [sp, #0]
    b560:	4620      	mov	r0, r4
    b562:	bd38      	pop	{r3, r4, r5, pc}
    b564:	20000f7c 	.word	0x20000f7c
    b568:	40008000 	.word	0x40008000
    b56c:	40001000 	.word	0x40001000
    b570:	40001400 	.word	0x40001400
    b574:	20000270 	.word	0x20000270
    b578:	40001640 	.word	0x40001640
    b57c:	40008144 	.word	0x40008144
    b580:	4808      	ldr	r0, [pc, #32]	; (b5a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    b582:	b510      	push	{r4, lr}
    b584:	6800      	ldr	r0, [r0, #0]
    b586:	f000 000f 	and.w	r0, r0, #15
    b58a:	2803      	cmp	r0, #3
    b58c:	d006      	beq.n	b59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b58e:	2804      	cmp	r0, #4
    b590:	d006      	beq.n	b5a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    b592:	f240 2112 	movw	r1, #530	; 0x212
    b596:	203e      	movs	r0, #62	; 0x3e
    b598:	f7f8 fc24 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b59c:	2001      	movs	r0, #1
    b59e:	bd10      	pop	{r4, pc}
    b5a0:	2002      	movs	r0, #2
    b5a2:	bd10      	pop	{r4, pc}
    b5a4:	40001510 	.word	0x40001510
    b5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5ac:	4c19      	ldr	r4, [pc, #100]	; (b614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    b5ae:	460d      	mov	r5, r1
    b5b0:	7a21      	ldrb	r1, [r4, #8]
    b5b2:	b129      	cbz	r1, b5c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    b5b4:	f010 0f11 	tst.w	r0, #17
    b5b8:	d00b      	beq.n	b5d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    b5ba:	f7ff fa09 	bl	a9d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b5be:	e027      	b.n	b610 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    b5c0:	4915      	ldr	r1, [pc, #84]	; (b618 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    b5c2:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b5c6:	6008      	str	r0, [r1, #0]
    b5c8:	f000 f85e 	bl	b688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b5cc:	2000      	movs	r0, #0
    b5ce:	7320      	strb	r0, [r4, #12]
    b5d0:	e01e      	b.n	b610 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    b5d2:	2901      	cmp	r1, #1
    b5d4:	d001      	beq.n	b5da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    b5d6:	2601      	movs	r6, #1
    b5d8:	e000      	b.n	b5dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    b5da:	2600      	movs	r6, #0
    b5dc:	79e0      	ldrb	r0, [r4, #7]
    b5de:	2801      	cmp	r0, #1
    b5e0:	d00e      	beq.n	b600 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    b5e2:	2700      	movs	r7, #0
    b5e4:	f000 f850 	bl	b688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b5e8:	2196      	movs	r1, #150	; 0x96
    b5ea:	4630      	mov	r0, r6
    b5ec:	f000 f862 	bl	b6b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    b5f0:	4601      	mov	r1, r0
    b5f2:	b14f      	cbz	r7, b608 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    b5f4:	353b      	adds	r5, #59	; 0x3b
    b5f6:	428d      	cmp	r5, r1
    b5f8:	d904      	bls.n	b604 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b5fa:	2000      	movs	r0, #0
    b5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b600:	2701      	movs	r7, #1
    b602:	e7ef      	b.n	b5e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    b604:	2001      	movs	r0, #1
    b606:	71e0      	strb	r0, [r4, #7]
    b608:	7aa2      	ldrb	r2, [r4, #10]
    b60a:	4630      	mov	r0, r6
    b60c:	f7ff fc88 	bl	af20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b610:	2001      	movs	r0, #1
    b612:	e7f3      	b.n	b5fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    b614:	20000f7c 	.word	0x20000f7c
    b618:	4001f508 	.word	0x4001f508
    b61c:	4805      	ldr	r0, [pc, #20]	; (b634 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    b61e:	2100      	movs	r1, #0
    b620:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b624:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b628:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b62c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b630:	4770      	bx	lr
    b632:	0000      	.short	0x0000
    b634:	40001000 	.word	0x40001000
    b638:	4804      	ldr	r0, [pc, #16]	; (b64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b63a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b63c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b640:	6281      	str	r1, [r0, #40]	; 0x28
    b642:	4903      	ldr	r1, [pc, #12]	; (b650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    b644:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b648:	6008      	str	r0, [r1, #0]
    b64a:	4770      	bx	lr
    b64c:	20000f7c 	.word	0x20000f7c
    b650:	4001f504 	.word	0x4001f504
    b654:	4905      	ldr	r1, [pc, #20]	; (b66c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    b656:	2000      	movs	r0, #0
    b658:	6008      	str	r0, [r1, #0]
    b65a:	1f09      	subs	r1, r1, #4
    b65c:	6008      	str	r0, [r1, #0]
    b65e:	1f09      	subs	r1, r1, #4
    b660:	6008      	str	r0, [r1, #0]
    b662:	4902      	ldr	r1, [pc, #8]	; (b66c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    b664:	1d09      	adds	r1, r1, #4
    b666:	6008      	str	r0, [r1, #0]
    b668:	4770      	bx	lr
    b66a:	0000      	.short	0x0000
    b66c:	40008548 	.word	0x40008548
    b670:	4903      	ldr	r1, [pc, #12]	; (b680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    b672:	79c9      	ldrb	r1, [r1, #7]
    b674:	2900      	cmp	r1, #0
    b676:	d102      	bne.n	b67e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    b678:	4902      	ldr	r1, [pc, #8]	; (b684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    b67a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b67e:	4770      	bx	lr
    b680:	20000f7c 	.word	0x20000f7c
    b684:	4001f098 	.word	0x4001f098
    b688:	4802      	ldr	r0, [pc, #8]	; (b694 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b68a:	2100      	movs	r1, #0
    b68c:	71c1      	strb	r1, [r0, #7]
    b68e:	7201      	strb	r1, [r0, #8]
    b690:	7241      	strb	r1, [r0, #9]
    b692:	4770      	bx	lr
    b694:	20000f7c 	.word	0x20000f7c
    b698:	4a05      	ldr	r2, [pc, #20]	; (b6b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    b69a:	79d2      	ldrb	r2, [r2, #7]
    b69c:	2a01      	cmp	r2, #1
    b69e:	d006      	beq.n	b6ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    b6a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b6a4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b6a8:	fbb1 f1f2 	udiv	r1, r1, r2
    b6ac:	1a40      	subs	r0, r0, r1
    b6ae:	4770      	bx	lr
    b6b0:	20000f7c 	.word	0x20000f7c
    b6b4:	b570      	push	{r4, r5, r6, lr}
    b6b6:	4c13      	ldr	r4, [pc, #76]	; (b704 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    b6b8:	4603      	mov	r3, r0
    b6ba:	460d      	mov	r5, r1
    b6bc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b6c0:	2000      	movs	r0, #0
    b6c2:	b15a      	cbz	r2, b6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    b6c4:	4621      	mov	r1, r4
    b6c6:	f891 1020 	ldrb.w	r1, [r1, #32]
    b6ca:	b163      	cbz	r3, b6e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    b6cc:	2b01      	cmp	r3, #1
    b6ce:	d111      	bne.n	b6f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    b6d0:	2a01      	cmp	r2, #1
    b6d2:	4628      	mov	r0, r5
    b6d4:	d012      	beq.n	b6fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b6d6:	f004 faad 	bl	fc34 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b6da:	e009      	b.n	b6f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    b6dc:	f240 7166 	movw	r1, #1894	; 0x766
    b6e0:	203e      	movs	r0, #62	; 0x3e
    b6e2:	f7f8 fb7f 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6e6:	2a01      	cmp	r2, #1
    b6e8:	4628      	mov	r0, r5
    b6ea:	d004      	beq.n	b6f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    b6ec:	f004 fab0 	bl	fc50 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b6f0:	69e1      	ldr	r1, [r4, #28]
    b6f2:	4408      	add	r0, r1
    b6f4:	bd70      	pop	{r4, r5, r6, pc}
    b6f6:	f004 fac5 	bl	fc84 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b6fa:	e7f9      	b.n	b6f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    b6fc:	f004 fab3 	bl	fc66 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b700:	e7f6      	b.n	b6f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    b702:	0000      	.short	0x0000
    b704:	20000f7c 	.word	0x20000f7c
    b708:	b510      	push	{r4, lr}
    b70a:	2200      	movs	r2, #0
    b70c:	2901      	cmp	r1, #1
    b70e:	d008      	beq.n	b722 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    b710:	2902      	cmp	r1, #2
    b712:	d004      	beq.n	b71e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    b714:	f240 2169 	movw	r1, #617	; 0x269
    b718:	203e      	movs	r0, #62	; 0x3e
    b71a:	f7f8 fb63 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b71e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b722:	4905      	ldr	r1, [pc, #20]	; (b738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    b724:	430a      	orrs	r2, r1
    b726:	4905      	ldr	r1, [pc, #20]	; (b73c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    b728:	600a      	str	r2, [r1, #0]
    b72a:	4905      	ldr	r1, [pc, #20]	; (b740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    b72c:	4308      	orrs	r0, r1
    b72e:	4903      	ldr	r1, [pc, #12]	; (b73c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    b730:	1d09      	adds	r1, r1, #4
    b732:	6008      	str	r0, [r1, #0]
    b734:	bd10      	pop	{r4, pc}
    b736:	0000      	.short	0x0000
    b738:	00100108 	.word	0x00100108
    b73c:	40001514 	.word	0x40001514
    b740:	02030000 	.word	0x02030000

0000b744 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b744:	4901      	ldr	r1, [pc, #4]	; (b74c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b746:	b2c0      	uxtb	r0, r0
    b748:	6008      	str	r0, [r1, #0]
    b74a:	4770      	bx	lr
    b74c:	4000150c 	.word	0x4000150c

0000b750 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b750:	b510      	push	{r4, lr}
    b752:	4907      	ldr	r1, [pc, #28]	; (b770 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b754:	2801      	cmp	r0, #1
    b756:	d005      	beq.n	b764 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b758:	2802      	cmp	r0, #2
    b75a:	d005      	beq.n	b768 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b75c:	218b      	movs	r1, #139	; 0x8b
    b75e:	203f      	movs	r0, #63	; 0x3f
    b760:	f7f8 fb40 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b764:	2003      	movs	r0, #3
    b766:	e000      	b.n	b76a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b768:	2004      	movs	r0, #4
    b76a:	6008      	str	r0, [r1, #0]
    b76c:	bd10      	pop	{r4, pc}
    b76e:	0000      	.short	0x0000
    b770:	40001510 	.word	0x40001510

0000b774 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b774:	4770      	bx	lr
    b776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b77a:	000d      	movs	r5, r1
    b77c:	4604      	mov	r4, r0
    b77e:	f04f 0602 	mov.w	r6, #2
    b782:	f04f 0701 	mov.w	r7, #1
    b786:	d008      	beq.n	b79a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
    b788:	7828      	ldrb	r0, [r5, #0]
    b78a:	b1d0      	cbz	r0, b7c2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b78c:	2801      	cmp	r0, #1
    b78e:	d007      	beq.n	b7a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
    b790:	2802      	cmp	r0, #2
    b792:	d014      	beq.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b794:	2803      	cmp	r0, #3
    b796:	d13b      	bne.n	b810 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b798:	e016      	b.n	b7c8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
    b79a:	f880 7020 	strb.w	r7, [r0, #32]
    b79e:	e00e      	b.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b7a0:	6868      	ldr	r0, [r5, #4]
    b7a2:	28c8      	cmp	r0, #200	; 0xc8
    b7a4:	d303      	bcc.n	b7ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
    b7a6:	2104      	movs	r1, #4
    b7a8:	f7f5 fe54 	bl	1454 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    b7ac:	b108      	cbz	r0, b7b2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
    b7ae:	2600      	movs	r6, #0
    b7b0:	e007      	b.n	b7c2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b7b2:	4620      	mov	r0, r4
    b7b4:	6869      	ldr	r1, [r5, #4]
    b7b6:	f000 f92a 	bl	ba0e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b7ba:	2601      	movs	r6, #1
    b7bc:	e001      	b.n	b7c2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b7be:	f7f4 fe61 	bl	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
    b7c2:	4630      	mov	r0, r6
    b7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7c8:	7820      	ldrb	r0, [r4, #0]
    b7ca:	2800      	cmp	r0, #0
    b7cc:	d1f7      	bne.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b7ce:	6868      	ldr	r0, [r5, #4]
    b7d0:	f7f4 fe2a 	bl	428 <CONFIG_FLASH_SIZE+0x28>
    b7d4:	b1e0      	cbz	r0, b810 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b7d6:	6869      	ldr	r1, [r5, #4]
    b7d8:	7808      	ldrb	r0, [r1, #0]
    b7da:	b128      	cbz	r0, b7e8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
    b7dc:	78a0      	ldrb	r0, [r4, #2]
    b7de:	2805      	cmp	r0, #5
    b7e0:	d007      	beq.n	b7f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
    b7e2:	f240 117b 	movw	r1, #379	; 0x17b
    b7e6:	e010      	b.n	b80a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
    b7e8:	4620      	mov	r0, r4
    b7ea:	f000 f918 	bl	ba1e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    b7ee:	7067      	strb	r7, [r4, #1]
    b7f0:	e7e5      	b.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b7f2:	4620      	mov	r0, r4
    b7f4:	f000 f927 	bl	ba46 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    b7f8:	78e0      	ldrb	r0, [r4, #3]
    b7fa:	f104 010c 	add.w	r1, r4, #12
    b7fe:	f000 f80a 	bl	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b802:	2800      	cmp	r0, #0
    b804:	d1db      	bne.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b806:	f240 117d 	movw	r1, #381	; 0x17d
    b80a:	206a      	movs	r0, #106	; 0x6a
    b80c:	f7f8 f842 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b810:	f884 7020 	strb.w	r7, [r4, #32]
    b814:	e7d3      	b.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b816:	f7f6 b869 	b.w	18ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b81e:	460d      	mov	r5, r1
    b820:	0004      	movs	r4, r0
    b822:	d00b      	beq.n	b83c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
    b824:	7926      	ldrb	r6, [r4, #4]
    b826:	2700      	movs	r7, #0
    b828:	2002      	movs	r0, #2
    b82a:	2d09      	cmp	r5, #9
    b82c:	d27b      	bcs.n	b926 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
    b82e:	e8df f005 	tbb	[pc, r5]
    b832:	1008      	.short	0x1008
    b834:	645b2e2e 	.word	0x645b2e2e
    b838:	0086977c 	.word	0x0086977c
    b83c:	f240 1195 	movw	r1, #405	; 0x195
    b840:	e0e2      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b842:	78a0      	ldrb	r0, [r4, #2]
    b844:	2804      	cmp	r0, #4
    b846:	d06f      	beq.n	b928 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
    b848:	2803      	cmp	r0, #3
    b84a:	d0fc      	beq.n	b846 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
    b84c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    b850:	e0da      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b852:	78a0      	ldrb	r0, [r4, #2]
    b854:	2804      	cmp	r0, #4
    b856:	d004      	beq.n	b862 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b858:	2803      	cmp	r0, #3
    b85a:	d002      	beq.n	b862 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b85c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    b860:	e0d2      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b862:	2005      	movs	r0, #5
    b864:	70a0      	strb	r0, [r4, #2]
    b866:	f884 7020 	strb.w	r7, [r4, #32]
    b86a:	7820      	ldrb	r0, [r4, #0]
    b86c:	bb80      	cbnz	r0, b8d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
    b86e:	2100      	movs	r1, #0
    b870:	4620      	mov	r0, r4
    b872:	f000 f8cc 	bl	ba0e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b876:	7b20      	ldrb	r0, [r4, #12]
    b878:	2801      	cmp	r0, #1
    b87a:	d004      	beq.n	b886 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
    b87c:	69a0      	ldr	r0, [r4, #24]
    b87e:	61e0      	str	r0, [r4, #28]
    b880:	2100      	movs	r1, #0
    b882:	68a2      	ldr	r2, [r4, #8]
    b884:	e041      	b.n	b90a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b886:	78e0      	ldrb	r0, [r4, #3]
    b888:	f7f5 ff0c 	bl	16a4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    b88c:	e7f7      	b.n	b87e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
    b88e:	78a1      	ldrb	r1, [r4, #2]
    b890:	2904      	cmp	r1, #4
    b892:	d004      	beq.n	b89e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b894:	2903      	cmp	r1, #3
    b896:	d002      	beq.n	b89e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b898:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    b89c:	e0b4      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b89e:	7822      	ldrb	r2, [r4, #0]
    b8a0:	b122      	cbz	r2, b8ac <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
    b8a2:	4621      	mov	r1, r4
    b8a4:	4630      	mov	r0, r6
    b8a6:	f000 f8e6 	bl	ba76 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x302>
    b8aa:	e0a4      	b.n	b9f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b8ac:	2904      	cmp	r1, #4
    b8ae:	d000      	beq.n	b8b2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
    b8b0:	2001      	movs	r0, #1
    b8b2:	70a0      	strb	r0, [r4, #2]
    b8b4:	68a2      	ldr	r2, [r4, #8]
    b8b6:	2d02      	cmp	r5, #2
    b8b8:	d00b      	beq.n	b8d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
    b8ba:	2106      	movs	r1, #6
    b8bc:	4630      	mov	r0, r6
    b8be:	4790      	blx	r2
    b8c0:	2800      	cmp	r0, #0
    b8c2:	d06b      	beq.n	b99c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b8c4:	7800      	ldrb	r0, [r0, #0]
    b8c6:	2800      	cmp	r0, #0
    b8c8:	d068      	beq.n	b99c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b8ca:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    b8ce:	e09b      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b8d0:	e031      	b.n	b936 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b8d2:	2105      	movs	r1, #5
    b8d4:	4630      	mov	r0, r6
    b8d6:	4790      	blx	r2
    b8d8:	2800      	cmp	r0, #0
    b8da:	d071      	beq.n	b9c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b8dc:	7800      	ldrb	r0, [r0, #0]
    b8de:	2800      	cmp	r0, #0
    b8e0:	d06e      	beq.n	b9c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b8e2:	f240 11d7 	movw	r1, #471	; 0x1d7
    b8e6:	e08f      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b8e8:	78a0      	ldrb	r0, [r4, #2]
    b8ea:	2805      	cmp	r0, #5
    b8ec:	d002      	beq.n	b8f4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
    b8ee:	f240 11e3 	movw	r1, #483	; 0x1e3
    b8f2:	e089      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b8f4:	2102      	movs	r1, #2
    b8f6:	68a2      	ldr	r2, [r4, #8]
    b8f8:	e007      	b.n	b90a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b8fa:	78a0      	ldrb	r0, [r4, #2]
    b8fc:	2805      	cmp	r0, #5
    b8fe:	d002      	beq.n	b906 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
    b900:	f240 11e9 	movw	r1, #489	; 0x1e9
    b904:	e080      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b906:	68a2      	ldr	r2, [r4, #8]
    b908:	2101      	movs	r1, #1
    b90a:	4630      	mov	r0, r6
    b90c:	4790      	blx	r2
    b90e:	4601      	mov	r1, r0
    b910:	4620      	mov	r0, r4
    b912:	f7ff ff30 	bl	b776 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b916:	2802      	cmp	r0, #2
    b918:	d06d      	beq.n	b9f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b91a:	b3f0      	cbz	r0, b99a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
    b91c:	2801      	cmp	r0, #1
    b91e:	d064      	beq.n	b9ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
    b920:	f240 2129 	movw	r1, #553	; 0x229
    b924:	e070      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b926:	e05d      	b.n	b9e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
    b928:	e067      	b.n	b9fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
    b92a:	78a0      	ldrb	r0, [r4, #2]
    b92c:	2805      	cmp	r0, #5
    b92e:	d002      	beq.n	b936 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b930:	f240 11ef 	movw	r1, #495	; 0x1ef
    b934:	e068      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b93a:	f7f4 bda3 	b.w	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
    b93e:	78a0      	ldrb	r0, [r4, #2]
    b940:	2805      	cmp	r0, #5
    b942:	d002      	beq.n	b94a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
    b944:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    b948:	e05e      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b94a:	68a2      	ldr	r2, [r4, #8]
    b94c:	210a      	movs	r1, #10
    b94e:	4630      	mov	r0, r6
    b950:	4790      	blx	r2
    b952:	4601      	mov	r1, r0
    b954:	4620      	mov	r0, r4
    b956:	f7ff ff0e 	bl	b776 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b95a:	f240 11f7 	movw	r1, #503	; 0x1f7
    b95e:	e053      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b960:	78a1      	ldrb	r1, [r4, #2]
    b962:	2905      	cmp	r1, #5
    b964:	d006      	beq.n	b974 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b966:	7862      	ldrb	r2, [r4, #1]
    b968:	b10a      	cbz	r2, b96e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
    b96a:	2903      	cmp	r1, #3
    b96c:	d002      	beq.n	b974 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b96e:	f240 11fb 	movw	r1, #507	; 0x1fb
    b972:	e049      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b974:	7821      	ldrb	r1, [r4, #0]
    b976:	b129      	cbz	r1, b984 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
    b978:	4621      	mov	r1, r4
    b97a:	4630      	mov	r0, r6
    b97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b980:	f000 b879 	b.w	ba76 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x302>
    b984:	f894 1020 	ldrb.w	r1, [r4, #32]
    b988:	b189      	cbz	r1, b9ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
    b98a:	f884 7020 	strb.w	r7, [r4, #32]
    b98e:	70a0      	strb	r0, [r4, #2]
    b990:	68a2      	ldr	r2, [r4, #8]
    b992:	2108      	movs	r1, #8
    b994:	4630      	mov	r0, r6
    b996:	4790      	blx	r2
    b998:	e001      	b.n	b99e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
    b99a:	e029      	b.n	b9f0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
    b99c:	e02b      	b.n	b9f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b99e:	2800      	cmp	r0, #0
    b9a0:	d00e      	beq.n	b9c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b9a2:	7800      	ldrb	r0, [r0, #0]
    b9a4:	2800      	cmp	r0, #0
    b9a6:	d00b      	beq.n	b9c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b9a8:	f240 2107 	movw	r1, #519	; 0x207
    b9ac:	e02c      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9ae:	7861      	ldrb	r1, [r4, #1]
    b9b0:	b159      	cbz	r1, b9ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
    b9b2:	78e0      	ldrb	r0, [r4, #3]
    b9b4:	f104 010c 	add.w	r1, r4, #12
    b9b8:	f7ff ff2d 	bl	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b9bc:	b110      	cbz	r0, b9c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
    b9be:	7067      	strb	r7, [r4, #1]
    b9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9c4:	f240 210b 	movw	r1, #523	; 0x20b
    b9c8:	e01e      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9ca:	70a0      	strb	r0, [r4, #2]
    b9cc:	68a2      	ldr	r2, [r4, #8]
    b9ce:	2107      	movs	r1, #7
    b9d0:	4630      	mov	r0, r6
    b9d2:	4790      	blx	r2
    b9d4:	2800      	cmp	r0, #0
    b9d6:	d0f3      	beq.n	b9c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b9d8:	7800      	ldrb	r0, [r0, #0]
    b9da:	2800      	cmp	r0, #0
    b9dc:	d0f0      	beq.n	b9c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b9de:	f240 2113 	movw	r1, #531	; 0x213
    b9e2:	e011      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9e4:	f44f 7106 	mov.w	r1, #536	; 0x218
    b9e8:	e00e      	b.n	ba08 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9ea:	2104      	movs	r1, #4
    b9ec:	68a2      	ldr	r2, [r4, #8]
    b9ee:	e78c      	b.n	b90a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b9f0:	2103      	movs	r1, #3
    b9f2:	68a2      	ldr	r2, [r4, #8]
    b9f4:	e789      	b.n	b90a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b9f6:	2d00      	cmp	r5, #0
    b9f8:	d1e2      	bne.n	b9c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b9fa:	f000 f8ea 	bl	bbd2 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    b9fe:	6800      	ldr	r0, [r0, #0]
    ba00:	2800      	cmp	r0, #0
    ba02:	d0dd      	beq.n	b9c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba04:	f240 2133 	movw	r1, #563	; 0x233
    ba08:	206a      	movs	r0, #106	; 0x6a
    ba0a:	f7f7 ff43 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba0e:	4602      	mov	r2, r0
    ba10:	7b03      	ldrb	r3, [r0, #12]
    ba12:	6900      	ldr	r0, [r0, #16]
    ba14:	4408      	add	r0, r1
    ba16:	6110      	str	r0, [r2, #16]
    ba18:	3859      	subs	r0, #89	; 0x59
    ba1a:	f7f6 bdfb 	b.w	2614 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ba1e:	2201      	movs	r2, #1
    ba20:	7302      	strb	r2, [r0, #12]
    ba22:	2200      	movs	r2, #0
    ba24:	75c2      	strb	r2, [r0, #23]
    ba26:	222b      	movs	r2, #43	; 0x2b
    ba28:	8282      	strh	r2, [r0, #20]
    ba2a:	794a      	ldrb	r2, [r1, #5]
    ba2c:	b14a      	cbz	r2, ba42 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ce>
    ba2e:	2204      	movs	r2, #4
    ba30:	7582      	strb	r2, [r0, #22]
    ba32:	688a      	ldr	r2, [r1, #8]
    ba34:	326a      	adds	r2, #106	; 0x6a
    ba36:	6102      	str	r2, [r0, #16]
    ba38:	68c9      	ldr	r1, [r1, #12]
    ba3a:	6181      	str	r1, [r0, #24]
    ba3c:	2103      	movs	r1, #3
    ba3e:	7081      	strb	r1, [r0, #2]
    ba40:	4770      	bx	lr
    ba42:	2203      	movs	r2, #3
    ba44:	e7f4      	b.n	ba30 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2bc>
    ba46:	b510      	push	{r4, lr}
    ba48:	4604      	mov	r4, r0
    ba4a:	2000      	movs	r0, #0
    ba4c:	7320      	strb	r0, [r4, #12]
    ba4e:	75e0      	strb	r0, [r4, #23]
    ba50:	202b      	movs	r0, #43	; 0x2b
    ba52:	82a0      	strh	r0, [r4, #20]
    ba54:	7948      	ldrb	r0, [r1, #5]
    ba56:	b160      	cbz	r0, ba72 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2fe>
    ba58:	2004      	movs	r0, #4
    ba5a:	75a0      	strb	r0, [r4, #22]
    ba5c:	68c8      	ldr	r0, [r1, #12]
    ba5e:	306a      	adds	r0, #106	; 0x6a
    ba60:	6120      	str	r0, [r4, #16]
    ba62:	6889      	ldr	r1, [r1, #8]
    ba64:	69e0      	ldr	r0, [r4, #28]
    ba66:	f7f5 fdc7 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ba6a:	61a0      	str	r0, [r4, #24]
    ba6c:	2004      	movs	r0, #4
    ba6e:	70a0      	strb	r0, [r4, #2]
    ba70:	bd10      	pop	{r4, pc}
    ba72:	2003      	movs	r0, #3
    ba74:	e7f1      	b.n	ba5a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2e6>
    ba76:	b570      	push	{r4, r5, r6, lr}
    ba78:	4605      	mov	r5, r0
    ba7a:	460c      	mov	r4, r1
    ba7c:	78c8      	ldrb	r0, [r1, #3]
    ba7e:	f7f6 fb91 	bl	21a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ba82:	b178      	cbz	r0, baa4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x330>
    ba84:	4620      	mov	r0, r4
    ba86:	f000 f810 	bl	baaa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x336>
    ba8a:	68a2      	ldr	r2, [r4, #8]
    ba8c:	2109      	movs	r1, #9
    ba8e:	4628      	mov	r0, r5
    ba90:	4790      	blx	r2
    ba92:	2800      	cmp	r0, #0
    ba94:	d008      	beq.n	baa8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x334>
    ba96:	7800      	ldrb	r0, [r0, #0]
    ba98:	2800      	cmp	r0, #0
    ba9a:	d005      	beq.n	baa8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x334>
    ba9c:	21db      	movs	r1, #219	; 0xdb
    ba9e:	206a      	movs	r0, #106	; 0x6a
    baa0:	f7f7 fef8 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    baa4:	21d7      	movs	r1, #215	; 0xd7
    baa6:	e7fa      	b.n	ba9e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x32a>
    baa8:	bd70      	pop	{r4, r5, r6, pc}
    baaa:	2100      	movs	r1, #0
    baac:	7081      	strb	r1, [r0, #2]
    baae:	7001      	strb	r1, [r0, #0]
    bab0:	7041      	strb	r1, [r0, #1]
    bab2:	4770      	bx	lr

0000bab4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    bab4:	b570      	push	{r4, r5, r6, lr}
    bab6:	f7f4 fd3f 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    baba:	4605      	mov	r5, r0
    babc:	2400      	movs	r4, #0
    babe:	e006      	b.n	bace <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    bac0:	4620      	mov	r0, r4
    bac2:	f7f4 fd3f 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bac6:	f7ff fff0 	bl	baaa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x336>
    baca:	1c64      	adds	r4, r4, #1
    bacc:	b2e4      	uxtb	r4, r4
    bace:	42ac      	cmp	r4, r5
    bad0:	d3f6      	bcc.n	bac0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    bad2:	bd70      	pop	{r4, r5, r6, pc}

0000bad4 <mpsl_timeslot_request>:
    bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bad8:	460d      	mov	r5, r1
    bada:	f7f4 fd33 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bade:	0004      	movs	r4, r0
    bae0:	d007      	beq.n	baf2 <mpsl_timeslot_request+0x1e>
    bae2:	78a0      	ldrb	r0, [r4, #2]
    bae4:	f06f 0622 	mvn.w	r6, #34	; 0x22
    bae8:	2801      	cmp	r0, #1
    baea:	d006      	beq.n	bafa <mpsl_timeslot_request+0x26>
    baec:	2802      	cmp	r0, #2
    baee:	d110      	bne.n	bb12 <mpsl_timeslot_request+0x3e>
    baf0:	e003      	b.n	bafa <mpsl_timeslot_request+0x26>
    baf2:	f06f 0001 	mvn.w	r0, #1
    baf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bafa:	f06f 0715 	mvn.w	r7, #21
    bafe:	b155      	cbz	r5, bb16 <mpsl_timeslot_request+0x42>
    bb00:	4628      	mov	r0, r5
    bb02:	f7f4 fc91 	bl	428 <CONFIG_FLASH_SIZE+0x28>
    bb06:	b130      	cbz	r0, bb16 <mpsl_timeslot_request+0x42>
    bb08:	7828      	ldrb	r0, [r5, #0]
    bb0a:	b130      	cbz	r0, bb1a <mpsl_timeslot_request+0x46>
    bb0c:	78a0      	ldrb	r0, [r4, #2]
    bb0e:	2802      	cmp	r0, #2
    bb10:	d008      	beq.n	bb24 <mpsl_timeslot_request+0x50>
    bb12:	4630      	mov	r0, r6
    bb14:	e7ef      	b.n	baf6 <mpsl_timeslot_request+0x22>
    bb16:	4638      	mov	r0, r7
    bb18:	e7ed      	b.n	baf6 <mpsl_timeslot_request+0x22>
    bb1a:	4629      	mov	r1, r5
    bb1c:	4620      	mov	r0, r4
    bb1e:	f7ff ff7e 	bl	ba1e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    bb22:	e003      	b.n	bb2c <mpsl_timeslot_request+0x58>
    bb24:	4629      	mov	r1, r5
    bb26:	4620      	mov	r0, r4
    bb28:	f7ff ff8d 	bl	ba46 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    bb2c:	78e0      	ldrb	r0, [r4, #3]
    bb2e:	f104 010c 	add.w	r1, r4, #12
    bb32:	f7ff fe70 	bl	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    bb36:	b108      	cbz	r0, bb3c <mpsl_timeslot_request+0x68>
    bb38:	2000      	movs	r0, #0
    bb3a:	e7dc      	b.n	baf6 <mpsl_timeslot_request+0x22>
    bb3c:	f240 21ae 	movw	r1, #686	; 0x2ae
    bb40:	206a      	movs	r0, #106	; 0x6a
    bb42:	f7f7 fea7 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000bb46 <mpsl_timeslot_session_close>:
    bb46:	b510      	push	{r4, lr}
    bb48:	4604      	mov	r4, r0
    bb4a:	f7f4 fcfb 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bb4e:	0001      	movs	r1, r0
    bb50:	d004      	beq.n	bb5c <mpsl_timeslot_session_close+0x16>
    bb52:	7808      	ldrb	r0, [r1, #0]
    bb54:	f06f 0222 	mvn.w	r2, #34	; 0x22
    bb58:	b968      	cbnz	r0, bb76 <mpsl_timeslot_session_close+0x30>
    bb5a:	e002      	b.n	bb62 <mpsl_timeslot_session_close+0x1c>
    bb5c:	f06f 0001 	mvn.w	r0, #1
    bb60:	bd10      	pop	{r4, pc}
    bb62:	7888      	ldrb	r0, [r1, #2]
    bb64:	b138      	cbz	r0, bb76 <mpsl_timeslot_session_close+0x30>
    bb66:	2802      	cmp	r0, #2
    bb68:	d007      	beq.n	bb7a <mpsl_timeslot_session_close+0x34>
    bb6a:	2801      	cmp	r0, #1
    bb6c:	d005      	beq.n	bb7a <mpsl_timeslot_session_close+0x34>
    bb6e:	2001      	movs	r0, #1
    bb70:	7008      	strb	r0, [r1, #0]
    bb72:	2000      	movs	r0, #0
    bb74:	bd10      	pop	{r4, pc}
    bb76:	4610      	mov	r0, r2
    bb78:	bd10      	pop	{r4, pc}
    bb7a:	4620      	mov	r0, r4
    bb7c:	f7ff ff7b 	bl	ba76 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x302>
    bb80:	e7f7      	b.n	bb72 <mpsl_timeslot_session_close+0x2c>

0000bb82 <mpsl_timeslot_session_count_set>:
    bb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb86:	460e      	mov	r6, r1
    bb88:	4607      	mov	r7, r0
    bb8a:	f7f4 fcd5 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bb8e:	4605      	mov	r5, r0
    bb90:	2400      	movs	r4, #0
    bb92:	e00a      	b.n	bbaa <mpsl_timeslot_session_count_set+0x28>
    bb94:	4620      	mov	r0, r4
    bb96:	f7f4 fcd5 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bb9a:	7880      	ldrb	r0, [r0, #2]
    bb9c:	b118      	cbz	r0, bba6 <mpsl_timeslot_session_count_set+0x24>
    bb9e:	f04f 30ff 	mov.w	r0, #4294967295
    bba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bba6:	1c64      	adds	r4, r4, #1
    bba8:	b2e4      	uxtb	r4, r4
    bbaa:	42ac      	cmp	r4, r5
    bbac:	d3f2      	bcc.n	bb94 <mpsl_timeslot_session_count_set+0x12>
    bbae:	2e08      	cmp	r6, #8
    bbb0:	d902      	bls.n	bbb8 <mpsl_timeslot_session_count_set+0x36>
    bbb2:	f06f 0015 	mvn.w	r0, #21
    bbb6:	e7f4      	b.n	bba2 <mpsl_timeslot_session_count_set+0x20>
    bbb8:	b117      	cbz	r7, bbc0 <mpsl_timeslot_session_count_set+0x3e>
    bbba:	4631      	mov	r1, r6
    bbbc:	4638      	mov	r0, r7
    bbbe:	e001      	b.n	bbc4 <mpsl_timeslot_session_count_set+0x42>
    bbc0:	2100      	movs	r1, #0
    bbc2:	4608      	mov	r0, r1
    bbc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bbc8:	f7f4 bca2 	b.w	510 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000bbcc <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    bbcc:	2000      	movs	r0, #0
    bbce:	f7f7 ba9f 	b.w	3110 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000bbd2 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    bbd2:	2000      	movs	r0, #0
    bbd4:	f7f7 ba82 	b.w	30dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000bbd8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    bbd8:	b510      	push	{r4, lr}
    bbda:	f7f6 ff6b 	bl	2ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    bbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbe2:	f000 b800 	b.w	bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000bbe6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    bbe6:	0a41      	lsrs	r1, r0, #9
    bbe8:	f643 5209 	movw	r2, #15625	; 0x3d09
    bbec:	4351      	muls	r1, r2
    bbee:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bbf2:	fb10 f002 	smulbb	r0, r0, r2
    bbf6:	f500 7080 	add.w	r0, r0, #256	; 0x100
    bbfa:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    bbfe:	4770      	bx	lr

0000bc00 <MPSL_IRQ_RADIO_Handler>:
    bc00:	f7f5 bd64 	b.w	16cc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    bc04:	2800      	cmp	r0, #0
    bc06:	db09      	blt.n	bc1c <MPSL_IRQ_RADIO_Handler+0x1c>
    bc08:	f000 021f 	and.w	r2, r0, #31
    bc0c:	2101      	movs	r1, #1
    bc0e:	4091      	lsls	r1, r2
    bc10:	0940      	lsrs	r0, r0, #5
    bc12:	0080      	lsls	r0, r0, #2
    bc14:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc18:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bc1c:	4770      	bx	lr
    bc1e:	2800      	cmp	r0, #0
    bc20:	db0d      	blt.n	bc3e <MPSL_IRQ_RADIO_Handler+0x3e>
    bc22:	f000 021f 	and.w	r2, r0, #31
    bc26:	2101      	movs	r1, #1
    bc28:	4091      	lsls	r1, r2
    bc2a:	0940      	lsrs	r0, r0, #5
    bc2c:	0080      	lsls	r0, r0, #2
    bc2e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc32:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bc36:	f3bf 8f4f 	dsb	sy
    bc3a:	f3bf 8f6f 	isb	sy
    bc3e:	4770      	bx	lr

0000bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bc40:	b570      	push	{r4, r5, r6, lr}
    bc42:	4602      	mov	r2, r0
    bc44:	2000      	movs	r0, #0
    bc46:	2900      	cmp	r1, #0
    bc48:	d01d      	beq.n	bc86 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    bc4a:	fba2 0101 	umull	r0, r1, r2, r1
    bc4e:	0a40      	lsrs	r0, r0, #9
    bc50:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    bc54:	0a49      	lsrs	r1, r1, #9
    bc56:	1c40      	adds	r0, r0, #1
    bc58:	f141 0100 	adc.w	r1, r1, #0
    bc5c:	f240 72a1 	movw	r2, #1953	; 0x7a1
    bc60:	1883      	adds	r3, r0, r2
    bc62:	f141 0100 	adc.w	r1, r1, #0
    bc66:	1c5b      	adds	r3, r3, #1
    bc68:	f141 0400 	adc.w	r4, r1, #0
    bc6c:	2100      	movs	r1, #0
    bc6e:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    bc72:	41a1      	sbcs	r1, r4
    bc74:	d203      	bcs.n	bc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    bc76:	2171      	movs	r1, #113	; 0x71
    bc78:	206d      	movs	r0, #109	; 0x6d
    bc7a:	f7f7 fe0b 	bl	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc7e:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bc82:	fbb0 f0f2 	udiv	r0, r0, r2
    bc86:	bd70      	pop	{r4, r5, r6, pc}
    bc88:	5840      	ldr	r0, [r0, r1]
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d000      	beq.n	bc90 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    bc8e:	2001      	movs	r0, #1
    bc90:	4770      	bx	lr
    bc92:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    bc96:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    bc9a:	f002 0201 	and.w	r2, r2, #1
    bc9e:	03c0      	lsls	r0, r0, #15
    bca0:	d503      	bpl.n	bcaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bca2:	428a      	cmp	r2, r1
    bca4:	d101      	bne.n	bcaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bca6:	2001      	movs	r0, #1
    bca8:	4770      	bx	lr
    bcaa:	2000      	movs	r0, #0
    bcac:	4770      	bx	lr

0000bcae <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bcae:	b510      	push	{r4, lr}
    bcb0:	2101      	movs	r1, #1
    bcb2:	0788      	lsls	r0, r1, #30
    bcb4:	f7f7 fdac 	bl	3810 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bcb8:	2800      	cmp	r0, #0
    bcba:	d000      	beq.n	bcbe <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bcbc:	2001      	movs	r0, #1
    bcbe:	bd10      	pop	{r4, pc}

0000bcc0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bcc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bcc4:	2101      	movs	r1, #1
    bcc6:	6001      	str	r1, [r0, #0]
    bcc8:	4770      	bx	lr

0000bcca <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    bcca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    bcce:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bcd2:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bcd6:	f002 0203 	and.w	r2, r2, #3
    bcda:	03c9      	lsls	r1, r1, #15
    bcdc:	d503      	bpl.n	bce6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bcde:	4282      	cmp	r2, r0
    bce0:	d101      	bne.n	bce6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bce2:	2001      	movs	r0, #1
    bce4:	4770      	bx	lr
    bce6:	2000      	movs	r0, #0
    bce8:	4770      	bx	lr

0000bcea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bcea:	b510      	push	{r4, lr}
    bcec:	2100      	movs	r1, #0
    bcee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bcf2:	f7f7 fd8d 	bl	3810 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bcf6:	2800      	cmp	r0, #0
    bcf8:	d000      	beq.n	bcfc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bcfa:	2001      	movs	r0, #1
    bcfc:	bd10      	pop	{r4, pc}
    bcfe:	2800      	cmp	r0, #0
    bd00:	db09      	blt.n	bd16 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bd02:	f000 021f 	and.w	r2, r0, #31
    bd06:	2101      	movs	r1, #1
    bd08:	4091      	lsls	r1, r2
    bd0a:	0940      	lsrs	r0, r0, #5
    bd0c:	0080      	lsls	r0, r0, #2
    bd0e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd12:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bd16:	4770      	bx	lr
    bd18:	2800      	cmp	r0, #0
    bd1a:	db0d      	blt.n	bd38 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bd1c:	f000 021f 	and.w	r2, r0, #31
    bd20:	2101      	movs	r1, #1
    bd22:	4091      	lsls	r1, r2
    bd24:	0940      	lsrs	r0, r0, #5
    bd26:	0080      	lsls	r0, r0, #2
    bd28:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd2c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bd30:	f3bf 8f4f 	dsb	sy
    bd34:	f3bf 8f6f 	isb	sy
    bd38:	4770      	bx	lr
    bd3a:	1000      	.short	0x1000
    bd3c:	00fa0002 	.word	0x00fa0002
    bd40:	53fe0000 	.word	0x53fe0000
    bd44:	eb1b71a0 	.word	0xeb1b71a0
    bd48:	cf331095 	.word	0xcf331095
    bd4c:	9563c946 	.word	0x9563c946
    bd50:	38295ebe 	.word	0x38295ebe
    bd54:	736e      	.short	0x736e
    bd56:	2800      	cmp	r0, #0
    bd58:	db09      	blt.n	bd6e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bd5a:	f000 021f 	and.w	r2, r0, #31
    bd5e:	2101      	movs	r1, #1
    bd60:	4091      	lsls	r1, r2
    bd62:	0940      	lsrs	r0, r0, #5
    bd64:	0080      	lsls	r0, r0, #2
    bd66:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd6a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bd6e:	4770      	bx	lr

0000bd70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    bd70:	f3ef 8110 	mrs	r1, PRIMASK
    bd74:	b672      	cpsid	i
    bd76:	7802      	ldrb	r2, [r0, #0]
    bd78:	2a01      	cmp	r2, #1
    bd7a:	d001      	beq.n	bd80 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    bd7c:	2201      	movs	r2, #1
    bd7e:	e000      	b.n	bd82 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    bd80:	2200      	movs	r2, #0
    bd82:	2301      	movs	r3, #1
    bd84:	7003      	strb	r3, [r0, #0]
    bd86:	b901      	cbnz	r1, bd8a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    bd88:	b662      	cpsie	i
    bd8a:	b10a      	cbz	r2, bd90 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    bd8c:	2000      	movs	r0, #0
    bd8e:	4770      	bx	lr
    bd90:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bd94:	4770      	bx	lr

0000bd96 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    bd96:	2100      	movs	r1, #0
    bd98:	7001      	strb	r1, [r0, #0]
    bd9a:	4608      	mov	r0, r1
    bd9c:	4770      	bx	lr

0000bd9e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    bd9e:	f3ef 8110 	mrs	r1, PRIMASK
    bda2:	b672      	cpsid	i
    bda4:	2200      	movs	r2, #0
    bda6:	7002      	strb	r2, [r0, #0]
    bda8:	b901      	cbnz	r1, bdac <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    bdaa:	b662      	cpsie	i
    bdac:	2000      	movs	r0, #0
    bdae:	4770      	bx	lr

0000bdb0 <mpsl_low_priority_process>:
    bdb0:	f7f7 be5c 	b.w	3a6c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000bdb4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    bdb4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bdb8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bdbc:	280f      	cmp	r0, #15
    bdbe:	d001      	beq.n	bdc4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    bdc0:	2000      	movs	r0, #0
    bdc2:	4770      	bx	lr
    bdc4:	2001      	movs	r0, #1
    bdc6:	4770      	bx	lr

0000bdc8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    bdc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bdcc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bdd0:	280a      	cmp	r0, #10
    bdd2:	d001      	beq.n	bdd8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    bdd4:	2000      	movs	r0, #0
    bdd6:	4770      	bx	lr
    bdd8:	2001      	movs	r0, #1
    bdda:	4770      	bx	lr

0000bddc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    bddc:	b500      	push	{lr}
    bdde:	f7ff fff3 	bl	bdc8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bde2:	b120      	cbz	r0, bdee <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    bde4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bde8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bdec:	b108      	cbz	r0, bdf2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    bdee:	2000      	movs	r0, #0
    bdf0:	bd00      	pop	{pc}
    bdf2:	2001      	movs	r0, #1
    bdf4:	bd00      	pop	{pc}

0000bdf6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    bdf6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bdfa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bdfe:	280e      	cmp	r0, #14
    be00:	d001      	beq.n	be06 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    be02:	2000      	movs	r0, #0
    be04:	4770      	bx	lr
    be06:	2001      	movs	r0, #1
    be08:	4770      	bx	lr

0000be0a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    be0a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be0e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be12:	2810      	cmp	r0, #16
    be14:	d001      	beq.n	be1a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    be16:	2000      	movs	r0, #0
    be18:	4770      	bx	lr
    be1a:	2001      	movs	r0, #1
    be1c:	4770      	bx	lr

0000be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    be1e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be22:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be26:	2806      	cmp	r0, #6
    be28:	d003      	beq.n	be32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    be2a:	1c40      	adds	r0, r0, #1
    be2c:	d001      	beq.n	be32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    be2e:	2000      	movs	r0, #0
    be30:	4770      	bx	lr
    be32:	2001      	movs	r0, #1
    be34:	4770      	bx	lr

0000be36 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    be36:	b500      	push	{lr}
    be38:	f7ff fff1 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be3c:	b148      	cbz	r0, be52 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be42:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    be46:	2806      	cmp	r0, #6
    be48:	d303      	bcc.n	be52 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be4a:	1c40      	adds	r0, r0, #1
    be4c:	d001      	beq.n	be52 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be4e:	2001      	movs	r0, #1
    be50:	bd00      	pop	{pc}
    be52:	2000      	movs	r0, #0
    be54:	bd00      	pop	{pc}

0000be56 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    be56:	b500      	push	{lr}
    be58:	f7ff ffe1 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be5c:	b138      	cbz	r0, be6e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    be5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be62:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    be66:	2806      	cmp	r0, #6
    be68:	d303      	bcc.n	be72 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    be6a:	1c40      	adds	r0, r0, #1
    be6c:	d001      	beq.n	be72 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    be6e:	2000      	movs	r0, #0
    be70:	bd00      	pop	{pc}
    be72:	2001      	movs	r0, #1
    be74:	bd00      	pop	{pc}

0000be76 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    be76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be7a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be7e:	280d      	cmp	r0, #13
    be80:	d001      	beq.n	be86 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    be82:	2000      	movs	r0, #0
    be84:	4770      	bx	lr
    be86:	2001      	movs	r0, #1
    be88:	4770      	bx	lr

0000be8a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    be8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be8e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be92:	2808      	cmp	r0, #8
    be94:	d001      	beq.n	be9a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    be96:	2000      	movs	r0, #0
    be98:	4770      	bx	lr
    be9a:	2001      	movs	r0, #1
    be9c:	4770      	bx	lr

0000be9e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    be9e:	2a00      	cmp	r2, #0
    bea0:	bf04      	itt	eq
    bea2:	2000      	moveq	r0, #0
    bea4:	4770      	bxeq	lr
    bea6:	1e52      	subs	r2, r2, #1
    bea8:	d007      	beq.n	beba <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    beaa:	7803      	ldrb	r3, [r0, #0]
    beac:	f891 c000 	ldrb.w	ip, [r1]
    beb0:	4563      	cmp	r3, ip
    beb2:	bf04      	itt	eq
    beb4:	1c40      	addeq	r0, r0, #1
    beb6:	1c49      	addeq	r1, r1, #1
    beb8:	d0f5      	beq.n	bea6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    beba:	7800      	ldrb	r0, [r0, #0]
    bebc:	7809      	ldrb	r1, [r1, #0]
    bebe:	1a40      	subs	r0, r0, r1
    bec0:	4770      	bx	lr

0000bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    bec2:	b4f0      	push	{r4, r5, r6, r7}
    bec4:	ea80 0c01 	eor.w	ip, r0, r1
    bec8:	4603      	mov	r3, r0
    beca:	f01c 0f03 	tst.w	ip, #3
    bece:	d13c      	bne.n	bf4a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bed0:	f013 0f03 	tst.w	r3, #3
    bed4:	d00b      	beq.n	beee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    bed6:	2a00      	cmp	r2, #0
    bed8:	bf04      	itt	eq
    beda:	bcf0      	popeq	{r4, r5, r6, r7}
    bedc:	4770      	bxeq	lr
    bede:	f811 cb01 	ldrb.w	ip, [r1], #1
    bee2:	f803 cb01 	strb.w	ip, [r3], #1
    bee6:	1e52      	subs	r2, r2, #1
    bee8:	f013 0f03 	tst.w	r3, #3
    beec:	d1f3      	bne.n	bed6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    beee:	2a03      	cmp	r2, #3
    bef0:	d94f      	bls.n	bf92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bef2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bef6:	d24c      	bcs.n	bf92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bef8:	f1c2 0c00 	rsb	ip, r2, #0
    befc:	ea4f 74ec 	mov.w	r4, ip, asr #31
    bf00:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    bf04:	ea4f 0cac 	mov.w	ip, ip, asr #2
    bf08:	f1cc 0c00 	rsb	ip, ip, #0
    bf0c:	f1bc 0f00 	cmp.w	ip, #0
    bf10:	dd1b      	ble.n	bf4a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bf12:	1f0d      	subs	r5, r1, #4
    bf14:	1f1c      	subs	r4, r3, #4
    bf16:	f01c 0f01 	tst.w	ip, #1
    bf1a:	d003      	beq.n	bf24 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    bf1c:	f855 6f04 	ldr.w	r6, [r5, #4]!
    bf20:	f844 6f04 	str.w	r6, [r4, #4]!
    bf24:	ea5f 066c 	movs.w	r6, ip, asr #1
    bf28:	d007      	beq.n	bf3a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    bf2a:	686f      	ldr	r7, [r5, #4]
    bf2c:	6067      	str	r7, [r4, #4]
    bf2e:	f855 7f08 	ldr.w	r7, [r5, #8]!
    bf32:	f844 7f08 	str.w	r7, [r4, #8]!
    bf36:	1e76      	subs	r6, r6, #1
    bf38:	d1f7      	bne.n	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    bf3a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    bf3e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    bf42:	f1cc 0c00 	rsb	ip, ip, #0
    bf46:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    bf4a:	2a00      	cmp	r2, #0
    bf4c:	bf04      	itt	eq
    bf4e:	bcf0      	popeq	{r4, r5, r6, r7}
    bf50:	4770      	bxeq	lr
    bf52:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bf56:	d226      	bcs.n	bfa6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bf58:	2a00      	cmp	r2, #0
    bf5a:	bfdc      	itt	le
    bf5c:	bcf0      	pople	{r4, r5, r6, r7}
    bf5e:	4770      	bxle	lr
    bf60:	1e49      	subs	r1, r1, #1
    bf62:	1e5b      	subs	r3, r3, #1
    bf64:	f012 0f01 	tst.w	r2, #1
    bf68:	d003      	beq.n	bf72 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    bf6a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    bf6e:	f803 cf01 	strb.w	ip, [r3, #1]!
    bf72:	1052      	asrs	r2, r2, #1
    bf74:	bf04      	itt	eq
    bf76:	bcf0      	popeq	{r4, r5, r6, r7}
    bf78:	4770      	bxeq	lr
    bf7a:	f891 c001 	ldrb.w	ip, [r1, #1]
    bf7e:	f883 c001 	strb.w	ip, [r3, #1]
    bf82:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    bf86:	f803 cf02 	strb.w	ip, [r3, #2]!
    bf8a:	1e52      	subs	r2, r2, #1
    bf8c:	d1f5      	bne.n	bf7a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    bf8e:	bcf0      	pop	{r4, r5, r6, r7}
    bf90:	4770      	bx	lr
    bf92:	2a04      	cmp	r2, #4
    bf94:	d3d9      	bcc.n	bf4a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bf96:	f851 cb04 	ldr.w	ip, [r1], #4
    bf9a:	1f12      	subs	r2, r2, #4
    bf9c:	f843 cb04 	str.w	ip, [r3], #4
    bfa0:	2a04      	cmp	r2, #4
    bfa2:	d2f8      	bcs.n	bf96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    bfa4:	e7d1      	b.n	bf4a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bfa6:	f811 cb01 	ldrb.w	ip, [r1], #1
    bfaa:	f803 cb01 	strb.w	ip, [r3], #1
    bfae:	1e52      	subs	r2, r2, #1
    bfb0:	d1f9      	bne.n	bfa6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bfb2:	bcf0      	pop	{r4, r5, r6, r7}
    bfb4:	4770      	bx	lr

0000bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    bfb6:	b470      	push	{r4, r5, r6}
    bfb8:	4603      	mov	r3, r0
    bfba:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    bfbe:	f010 0f03 	tst.w	r0, #3
    bfc2:	d009      	beq.n	bfd8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    bfc4:	2a00      	cmp	r2, #0
    bfc6:	bf04      	itt	eq
    bfc8:	bc70      	popeq	{r4, r5, r6}
    bfca:	4770      	bxeq	lr
    bfcc:	f803 cb01 	strb.w	ip, [r3], #1
    bfd0:	1e52      	subs	r2, r2, #1
    bfd2:	f013 0f03 	tst.w	r3, #3
    bfd6:	d1f5      	bne.n	bfc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    bfd8:	b2c9      	uxtb	r1, r1
    bfda:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    bfde:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    bfe2:	2a03      	cmp	r2, #3
    bfe4:	d939      	bls.n	c05a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    bfe6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bfea:	d236      	bcs.n	c05a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    bfec:	4251      	negs	r1, r2
    bfee:	17cc      	asrs	r4, r1, #31
    bff0:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    bff4:	1089      	asrs	r1, r1, #2
    bff6:	424e      	negs	r6, r1
    bff8:	2e00      	cmp	r6, #0
    bffa:	dd11      	ble.n	c020 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bffc:	1f19      	subs	r1, r3, #4
    bffe:	f016 0f01 	tst.w	r6, #1
    c002:	bf18      	it	ne
    c004:	f841 5f04 	strne.w	r5, [r1, #4]!
    c008:	1074      	asrs	r4, r6, #1
    c00a:	d004      	beq.n	c016 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c00c:	604d      	str	r5, [r1, #4]
    c00e:	f841 5f08 	str.w	r5, [r1, #8]!
    c012:	1e64      	subs	r4, r4, #1
    c014:	d1fa      	bne.n	c00c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c016:	4271      	negs	r1, r6
    c018:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c01c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c020:	2a00      	cmp	r2, #0
    c022:	bf04      	itt	eq
    c024:	bc70      	popeq	{r4, r5, r6}
    c026:	4770      	bxeq	lr
    c028:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c02c:	d21d      	bcs.n	c06a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c02e:	2a00      	cmp	r2, #0
    c030:	bfdc      	itt	le
    c032:	bc70      	pople	{r4, r5, r6}
    c034:	4770      	bxle	lr
    c036:	1e59      	subs	r1, r3, #1
    c038:	f012 0f01 	tst.w	r2, #1
    c03c:	bf18      	it	ne
    c03e:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c042:	1052      	asrs	r2, r2, #1
    c044:	bf04      	itt	eq
    c046:	bc70      	popeq	{r4, r5, r6}
    c048:	4770      	bxeq	lr
    c04a:	f881 c001 	strb.w	ip, [r1, #1]
    c04e:	f801 cf02 	strb.w	ip, [r1, #2]!
    c052:	1e52      	subs	r2, r2, #1
    c054:	d1f9      	bne.n	c04a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c056:	bc70      	pop	{r4, r5, r6}
    c058:	4770      	bx	lr
    c05a:	2a04      	cmp	r2, #4
    c05c:	d3e0      	bcc.n	c020 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c05e:	1f12      	subs	r2, r2, #4
    c060:	f843 5b04 	str.w	r5, [r3], #4
    c064:	2a04      	cmp	r2, #4
    c066:	d2fa      	bcs.n	c05e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c068:	e7da      	b.n	c020 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c06a:	f803 cb01 	strb.w	ip, [r3], #1
    c06e:	1e52      	subs	r2, r2, #1
    c070:	d1fb      	bne.n	c06a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c072:	bc70      	pop	{r4, r5, r6}
    c074:	4770      	bx	lr
    c076:	f04f 30ff 	mov.w	r0, #4294967295
    c07a:	4770      	bx	lr
    c07c:	2000      	movs	r0, #0
    c07e:	4770      	bx	lr
    c080:	2000      	movs	r0, #0
    c082:	4770      	bx	lr
    c084:	f04f 30ff 	mov.w	r0, #4294967295
    c088:	4770      	bx	lr
    c08a:	4770      	bx	lr
    c08c:	4770      	bx	lr
    c08e:	2000      	movs	r0, #0
    c090:	4770      	bx	lr
    c092:	f04f 30ff 	mov.w	r0, #4294967295
    c096:	4770      	bx	lr
    c098:	f04f 30ff 	mov.w	r0, #4294967295
    c09c:	4770      	bx	lr
    c09e:	2100      	movs	r1, #0
    c0a0:	7001      	strb	r1, [r0, #0]
    c0a2:	4770      	bx	lr
    c0a4:	f04f 30ff 	mov.w	r0, #4294967295
    c0a8:	4770      	bx	lr
    c0aa:	f04f 30ff 	mov.w	r0, #4294967295
    c0ae:	4770      	bx	lr
    c0b0:	2000      	movs	r0, #0
    c0b2:	4770      	bx	lr
    c0b4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c0b8:	4605      	mov	r5, r0
    c0ba:	f100 0003 	add.w	r0, r0, #3
    c0be:	f020 0003 	bic.w	r0, r0, #3
    c0c2:	460c      	mov	r4, r1
    c0c4:	9000      	str	r0, [sp, #0]
    c0c6:	7849      	ldrb	r1, [r1, #1]
    c0c8:	f88d 1004 	strb.w	r1, [sp, #4]
    c0cc:	78a1      	ldrb	r1, [r4, #2]
    c0ce:	0016      	movs	r6, r2
    c0d0:	f88d 1005 	strb.w	r1, [sp, #5]
    c0d4:	d000      	beq.n	c0d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    c0d6:	2000      	movs	r0, #0
    c0d8:	a901      	add	r1, sp, #4
    c0da:	f7f8 f889 	bl	41f0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c0de:	9900      	ldr	r1, [sp, #0]
    c0e0:	4408      	add	r0, r1
    c0e2:	9000      	str	r0, [sp, #0]
    c0e4:	78a1      	ldrb	r1, [r4, #2]
    c0e6:	b141      	cbz	r1, c0fa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    c0e8:	8a63      	ldrh	r3, [r4, #18]
    c0ea:	78e2      	ldrb	r2, [r4, #3]
    c0ec:	b106      	cbz	r6, c0f0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    c0ee:	2000      	movs	r0, #0
    c0f0:	f7f8 fb0e 	bl	4710 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c0f4:	9900      	ldr	r1, [sp, #0]
    c0f6:	4408      	add	r0, r1
    c0f8:	9000      	str	r0, [sp, #0]
    c0fa:	4632      	mov	r2, r6
    c0fc:	4621      	mov	r1, r4
    c0fe:	4668      	mov	r0, sp
    c100:	f000 f808 	bl	c114 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    c104:	9800      	ldr	r0, [sp, #0]
    c106:	1dc0      	adds	r0, r0, #7
    c108:	f020 0007 	bic.w	r0, r0, #7
    c10c:	9000      	str	r0, [sp, #0]
    c10e:	1b40      	subs	r0, r0, r5
    c110:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c118:	4606      	mov	r6, r0
    c11a:	460c      	mov	r4, r1
    c11c:	7808      	ldrb	r0, [r1, #0]
    c11e:	7849      	ldrb	r1, [r1, #1]
    c120:	2700      	movs	r7, #0
    c122:	4408      	add	r0, r1
    c124:	4691      	mov	r9, r2
    c126:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c12a:	463d      	mov	r5, r7
    c12c:	e00e      	b.n	c14c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    c12e:	7a23      	ldrb	r3, [r4, #8]
    c130:	2b02      	cmp	r3, #2
    c132:	d200      	bcs.n	c136 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    c134:	2302      	movs	r3, #2
    c136:	79e2      	ldrb	r2, [r4, #7]
    c138:	2a03      	cmp	r2, #3
    c13a:	d200      	bcs.n	c13e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    c13c:	2203      	movs	r2, #3
    c13e:	79a1      	ldrb	r1, [r4, #6]
    c140:	7960      	ldrb	r0, [r4, #5]
    c142:	f000 fef8 	bl	cf36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c146:	1c6d      	adds	r5, r5, #1
    c148:	4407      	add	r7, r0
    c14a:	b2ed      	uxtb	r5, r5
    c14c:	4545      	cmp	r5, r8
    c14e:	d3ee      	bcc.n	c12e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    c150:	6830      	ldr	r0, [r6, #0]
    c152:	1cc0      	adds	r0, r0, #3
    c154:	f020 0003 	bic.w	r0, r0, #3
    c158:	6030      	str	r0, [r6, #0]
    c15a:	f1b9 0f00 	cmp.w	r9, #0
    c15e:	d000      	beq.n	c162 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    c160:	2000      	movs	r0, #0
    c162:	463a      	mov	r2, r7
    c164:	4641      	mov	r1, r8
    c166:	f7f8 fa1d 	bl	45a4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c16a:	6831      	ldr	r1, [r6, #0]
    c16c:	4408      	add	r0, r1
    c16e:	6030      	str	r0, [r6, #0]
    c170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c174 <sdc_soc_ecb_block_encrypt>:
    c174:	b530      	push	{r4, r5, lr}
    c176:	460d      	mov	r5, r1
    c178:	b08d      	sub	sp, #52	; 0x34
    c17a:	4614      	mov	r4, r2
    c17c:	4601      	mov	r1, r0
    c17e:	2210      	movs	r2, #16
    c180:	4668      	mov	r0, sp
    c182:	f7ff fe9e 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c186:	2210      	movs	r2, #16
    c188:	4629      	mov	r1, r5
    c18a:	a804      	add	r0, sp, #16
    c18c:	f7ff fe99 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c190:	4668      	mov	r0, sp
    c192:	f7f8 fbd3 	bl	493c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c196:	b118      	cbz	r0, c1a0 <sdc_soc_ecb_block_encrypt+0x2c>
    c198:	f06f 0015 	mvn.w	r0, #21
    c19c:	b00d      	add	sp, #52	; 0x34
    c19e:	bd30      	pop	{r4, r5, pc}
    c1a0:	2210      	movs	r2, #16
    c1a2:	4620      	mov	r0, r4
    c1a4:	a908      	add	r1, sp, #32
    c1a6:	f7ff fe8c 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c1aa:	2000      	movs	r0, #0
    c1ac:	e7f6      	b.n	c19c <sdc_soc_ecb_block_encrypt+0x28>

0000c1ae <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c1ae:	2000      	movs	r0, #0
    c1b0:	4770      	bx	lr

0000c1b2 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c1b2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c1b4:	4604      	mov	r4, r0
    c1b6:	1d01      	adds	r1, r0, #4
    c1b8:	4668      	mov	r0, sp
    c1ba:	f7f9 ffeb 	bl	6194 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c1be:	2800      	cmp	r0, #0
    c1c0:	d004      	beq.n	c1cc <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c1c2:	4669      	mov	r1, sp
    c1c4:	4620      	mov	r0, r4
    c1c6:	f000 f848 	bl	c25a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c1ca:	2001      	movs	r0, #1
    c1cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c1ce <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c1ce:	b50e      	push	{r1, r2, r3, lr}
    c1d0:	4601      	mov	r1, r0
    c1d2:	4668      	mov	r0, sp
    c1d4:	f000 f827 	bl	c226 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c1d8:	4668      	mov	r0, sp
    c1da:	f7fa f805 	bl	61e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c1de:	bd0e      	pop	{r1, r2, r3, pc}

0000c1e0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c1e0:	b510      	push	{r4, lr}
    c1e2:	4604      	mov	r4, r0
    c1e4:	4620      	mov	r0, r4
    c1e6:	f7f7 fef1 	bl	3fcc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c1ea:	2800      	cmp	r0, #0
    c1ec:	d006      	beq.n	c1fc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c1ee:	78a1      	ldrb	r1, [r4, #2]
    c1f0:	7820      	ldrb	r0, [r4, #0]
    c1f2:	f000 f804 	bl	c1fe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c1f6:	2800      	cmp	r0, #0
    c1f8:	d0f4      	beq.n	c1e4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c1fa:	2001      	movs	r0, #1
    c1fc:	bd10      	pop	{r4, pc}
    c1fe:	b570      	push	{r4, r5, r6, lr}
    c200:	460c      	mov	r4, r1
    c202:	4605      	mov	r5, r0
    c204:	f7f7 ff54 	bl	40b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c208:	2800      	cmp	r0, #0
    c20a:	d002      	beq.n	c212 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c20c:	2d3e      	cmp	r5, #62	; 0x3e
    c20e:	d001      	beq.n	c214 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c210:	2001      	movs	r0, #1
    c212:	bd70      	pop	{r4, r5, r6, pc}
    c214:	2c12      	cmp	r4, #18
    c216:	d004      	beq.n	c222 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c218:	4620      	mov	r0, r4
    c21a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c21e:	f7f7 bf63 	b.w	40e8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c222:	2000      	movs	r0, #0
    c224:	bd70      	pop	{r4, r5, r6, pc}

0000c226 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c226:	880a      	ldrh	r2, [r1, #0]
    c228:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c22c:	8002      	strh	r2, [r0, #0]
    c22e:	884a      	ldrh	r2, [r1, #2]
    c230:	8042      	strh	r2, [r0, #2]
    c232:	784a      	ldrb	r2, [r1, #1]
    c234:	0993      	lsrs	r3, r2, #6
    c236:	2200      	movs	r2, #0
    c238:	7142      	strb	r2, [r0, #5]
    c23a:	784b      	ldrb	r3, [r1, #1]
    c23c:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c240:	b11b      	cbz	r3, c24a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c242:	2b01      	cmp	r3, #1
    c244:	d005      	beq.n	c252 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c246:	2b02      	cmp	r3, #2
    c248:	d005      	beq.n	c256 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c24a:	7102      	strb	r2, [r0, #4]
    c24c:	1d09      	adds	r1, r1, #4
    c24e:	6081      	str	r1, [r0, #8]
    c250:	4770      	bx	lr
    c252:	2201      	movs	r2, #1
    c254:	e7f9      	b.n	c24a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c256:	2202      	movs	r2, #2
    c258:	e7f7      	b.n	c24a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c25a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c25a:	b510      	push	{r4, lr}
    c25c:	460c      	mov	r4, r1
    c25e:	7809      	ldrb	r1, [r1, #0]
    c260:	7001      	strb	r1, [r0, #0]
    c262:	7841      	ldrb	r1, [r0, #1]
    c264:	f021 010f 	bic.w	r1, r1, #15
    c268:	7041      	strb	r1, [r0, #1]
    c26a:	8822      	ldrh	r2, [r4, #0]
    c26c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c270:	4311      	orrs	r1, r2
    c272:	7041      	strb	r1, [r0, #1]
    c274:	78a2      	ldrb	r2, [r4, #2]
    c276:	7082      	strb	r2, [r0, #2]
    c278:	8862      	ldrh	r2, [r4, #2]
    c27a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c27e:	0a12      	lsrs	r2, r2, #8
    c280:	70c2      	strb	r2, [r0, #3]
    c282:	7041      	strb	r1, [r0, #1]
    c284:	7922      	ldrb	r2, [r4, #4]
    c286:	f002 0203 	and.w	r2, r2, #3
    c28a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c28e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c292:	7041      	strb	r1, [r0, #1]
    c294:	7962      	ldrb	r2, [r4, #5]
    c296:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c29a:	7041      	strb	r1, [r0, #1]
    c29c:	68a1      	ldr	r1, [r4, #8]
    c29e:	1d02      	adds	r2, r0, #4
    c2a0:	4291      	cmp	r1, r2
    c2a2:	d006      	beq.n	c2b2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c2a4:	8862      	ldrh	r2, [r4, #2]
    c2a6:	2afb      	cmp	r2, #251	; 0xfb
    c2a8:	d300      	bcc.n	c2ac <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c2aa:	22fb      	movs	r2, #251	; 0xfb
    c2ac:	1d00      	adds	r0, r0, #4
    c2ae:	f7ff fe08 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c2b2:	78a0      	ldrb	r0, [r4, #2]
    c2b4:	1d00      	adds	r0, r0, #4
    c2b6:	b2c0      	uxtb	r0, r0
    c2b8:	bd10      	pop	{r4, pc}

0000c2ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2be:	4604      	mov	r4, r0
    c2c0:	780f      	ldrb	r7, [r1, #0]
    c2c2:	2000      	movs	r0, #0
    c2c4:	250c      	movs	r5, #12
    c2c6:	2605      	movs	r6, #5
    c2c8:	223e      	movs	r2, #62	; 0x3e
    c2ca:	23ff      	movs	r3, #255	; 0xff
    c2cc:	2f1b      	cmp	r7, #27
    c2ce:	d27d      	bcs.n	c3cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c2d0:	e8df f007 	tbb	[pc, r7]
    c2d4:	27250eea 	.word	0x27250eea
    c2d8:	816d632d 	.word	0x816d632d
    c2dc:	bcb1af9b 	.word	0xbcb1af9b
    c2e0:	eaf4e2c7 	.word	0xeaf4e2c7
    c2e4:	d5d231ea 	.word	0xd5d231ea
    c2e8:	eff0f1fd 	.word	0xeff0f1fd
    c2ec:	00ecedee 	.word	0x00ecedee
    c2f0:	7025      	strb	r5, [r4, #0]
    c2f2:	7908      	ldrb	r0, [r1, #4]
    c2f4:	70a0      	strb	r0, [r4, #2]
    c2f6:	7948      	ldrb	r0, [r1, #5]
    c2f8:	70e0      	strb	r0, [r4, #3]
    c2fa:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c2fe:	0a00      	lsrs	r0, r0, #8
    c300:	7120      	strb	r0, [r4, #4]
    c302:	79c8      	ldrb	r0, [r1, #7]
    c304:	7160      	strb	r0, [r4, #5]
    c306:	7a08      	ldrb	r0, [r1, #8]
    c308:	71a0      	strb	r0, [r4, #6]
    c30a:	8908      	ldrh	r0, [r1, #8]
    c30c:	0a00      	lsrs	r0, r0, #8
    c30e:	71e0      	strb	r0, [r4, #7]
    c310:	7a88      	ldrb	r0, [r1, #10]
    c312:	7220      	strb	r0, [r4, #8]
    c314:	8948      	ldrh	r0, [r1, #10]
    c316:	0a00      	lsrs	r0, r0, #8
    c318:	7260      	strb	r0, [r4, #9]
    c31a:	2008      	movs	r0, #8
    c31c:	e0c2      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c31e:	2010      	movs	r0, #16
    c320:	e000      	b.n	c324 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c322:	201a      	movs	r0, #26
    c324:	7020      	strb	r0, [r4, #0]
    c326:	7908      	ldrb	r0, [r1, #4]
    c328:	70a0      	strb	r0, [r4, #2]
    c32a:	2001      	movs	r0, #1
    c32c:	e0ba      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c32e:	4620      	mov	r0, r4
    c330:	f000 f946 	bl	c5c0 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c334:	e0b4      	b.n	c4a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c336:	7022      	strb	r2, [r4, #0]
    c338:	200a      	movs	r0, #10
    c33a:	70a0      	strb	r0, [r4, #2]
    c33c:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c340:	70e0      	strb	r0, [r4, #3]
    c342:	7888      	ldrb	r0, [r1, #2]
    c344:	7120      	strb	r0, [r4, #4]
    c346:	8848      	ldrh	r0, [r1, #2]
    c348:	0a00      	lsrs	r0, r0, #8
    c34a:	7160      	strb	r0, [r4, #5]
    c34c:	7908      	ldrb	r0, [r1, #4]
    c34e:	71a0      	strb	r0, [r4, #6]
    c350:	7948      	ldrb	r0, [r1, #5]
    c352:	71e0      	strb	r0, [r4, #7]
    c354:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c358:	60a0      	str	r0, [r4, #8]
    c35a:	8948      	ldrh	r0, [r1, #10]
    c35c:	81a0      	strh	r0, [r4, #12]
    c35e:	68c8      	ldr	r0, [r1, #12]
    c360:	f8c4 000e 	str.w	r0, [r4, #14]
    c364:	8a08      	ldrh	r0, [r1, #16]
    c366:	8260      	strh	r0, [r4, #18]
    c368:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c36c:	6160      	str	r0, [r4, #20]
    c36e:	8ac8      	ldrh	r0, [r1, #22]
    c370:	8320      	strh	r0, [r4, #24]
    c372:	7e08      	ldrb	r0, [r1, #24]
    c374:	76a0      	strb	r0, [r4, #26]
    c376:	8b08      	ldrh	r0, [r1, #24]
    c378:	0a00      	lsrs	r0, r0, #8
    c37a:	76e0      	strb	r0, [r4, #27]
    c37c:	7e88      	ldrb	r0, [r1, #26]
    c37e:	7720      	strb	r0, [r4, #28]
    c380:	8b48      	ldrh	r0, [r1, #26]
    c382:	0a00      	lsrs	r0, r0, #8
    c384:	7760      	strb	r0, [r4, #29]
    c386:	7f08      	ldrb	r0, [r1, #28]
    c388:	77a0      	strb	r0, [r4, #30]
    c38a:	8b88      	ldrh	r0, [r1, #28]
    c38c:	0a00      	lsrs	r0, r0, #8
    c38e:	77e0      	strb	r0, [r4, #31]
    c390:	7f88      	ldrb	r0, [r1, #30]
    c392:	f884 0020 	strb.w	r0, [r4, #32]
    c396:	201f      	movs	r0, #31
    c398:	e084      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c39a:	7022      	strb	r2, [r4, #0]
    c39c:	2014      	movs	r0, #20
    c39e:	70a0      	strb	r0, [r4, #2]
    c3a0:	7908      	ldrb	r0, [r1, #4]
    c3a2:	70e0      	strb	r0, [r4, #3]
    c3a4:	8888      	ldrh	r0, [r1, #4]
    c3a6:	0a00      	lsrs	r0, r0, #8
    c3a8:	7120      	strb	r0, [r4, #4]
    c3aa:	7988      	ldrb	r0, [r1, #6]
    c3ac:	e0a7      	b.n	c4fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c3ae:	7022      	strb	r2, [r4, #0]
    c3b0:	2004      	movs	r0, #4
    c3b2:	70a0      	strb	r0, [r4, #2]
    c3b4:	7908      	ldrb	r0, [r1, #4]
    c3b6:	70e0      	strb	r0, [r4, #3]
    c3b8:	7988      	ldrb	r0, [r1, #6]
    c3ba:	7120      	strb	r0, [r4, #4]
    c3bc:	88c8      	ldrh	r0, [r1, #6]
    c3be:	0a00      	lsrs	r0, r0, #8
    c3c0:	7160      	strb	r0, [r4, #5]
    c3c2:	6888      	ldr	r0, [r1, #8]
    c3c4:	f8c4 0006 	str.w	r0, [r4, #6]
    c3c8:	68c8      	ldr	r0, [r1, #12]
    c3ca:	e000      	b.n	c3ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c3cc:	e06c      	b.n	c4a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    c3ce:	f8c4 000a 	str.w	r0, [r4, #10]
    c3d2:	200c      	movs	r0, #12
    c3d4:	e066      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c3d6:	7022      	strb	r2, [r4, #0]
    c3d8:	2003      	movs	r0, #3
    c3da:	70a0      	strb	r0, [r4, #2]
    c3dc:	7908      	ldrb	r0, [r1, #4]
    c3de:	70e0      	strb	r0, [r4, #3]
    c3e0:	7988      	ldrb	r0, [r1, #6]
    c3e2:	7120      	strb	r0, [r4, #4]
    c3e4:	88c8      	ldrh	r0, [r1, #6]
    c3e6:	0a00      	lsrs	r0, r0, #8
    c3e8:	7160      	strb	r0, [r4, #5]
    c3ea:	7a08      	ldrb	r0, [r1, #8]
    c3ec:	71a0      	strb	r0, [r4, #6]
    c3ee:	8908      	ldrh	r0, [r1, #8]
    c3f0:	0a00      	lsrs	r0, r0, #8
    c3f2:	71e0      	strb	r0, [r4, #7]
    c3f4:	7a88      	ldrb	r0, [r1, #10]
    c3f6:	7220      	strb	r0, [r4, #8]
    c3f8:	8948      	ldrh	r0, [r1, #10]
    c3fa:	0a00      	lsrs	r0, r0, #8
    c3fc:	7260      	strb	r0, [r4, #9]
    c3fe:	7b08      	ldrb	r0, [r1, #12]
    c400:	72a0      	strb	r0, [r4, #10]
    c402:	8988      	ldrh	r0, [r1, #12]
    c404:	0a00      	lsrs	r0, r0, #8
    c406:	72e0      	strb	r0, [r4, #11]
    c408:	e0d8      	b.n	c5bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    c40a:	7022      	strb	r2, [r4, #0]
    c40c:	70a6      	strb	r6, [r4, #2]
    c40e:	7908      	ldrb	r0, [r1, #4]
    c410:	70e0      	strb	r0, [r4, #3]
    c412:	8888      	ldrh	r0, [r1, #4]
    c414:	0a00      	lsrs	r0, r0, #8
    c416:	7120      	strb	r0, [r4, #4]
    c418:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c41c:	f8c4 0005 	str.w	r0, [r4, #5]
    c420:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c424:	f8c4 0009 	str.w	r0, [r4, #9]
    c428:	89c8      	ldrh	r0, [r1, #14]
    c42a:	f8a4 000d 	strh.w	r0, [r4, #13]
    c42e:	200d      	movs	r0, #13
    c430:	e038      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c432:	2011      	movs	r0, #17
    c434:	e043      	b.n	c4be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c436:	7026      	strb	r6, [r4, #0]
    c438:	7908      	ldrb	r0, [r1, #4]
    c43a:	70a0      	strb	r0, [r4, #2]
    c43c:	7948      	ldrb	r0, [r1, #5]
    c43e:	70e0      	strb	r0, [r4, #3]
    c440:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c444:	0a00      	lsrs	r0, r0, #8
    c446:	7120      	strb	r0, [r4, #4]
    c448:	79c8      	ldrb	r0, [r1, #7]
    c44a:	e058      	b.n	c4fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c44c:	2008      	movs	r0, #8
    c44e:	7020      	strb	r0, [r4, #0]
    c450:	7908      	ldrb	r0, [r1, #4]
    c452:	70a0      	strb	r0, [r4, #2]
    c454:	7988      	ldrb	r0, [r1, #6]
    c456:	70e0      	strb	r0, [r4, #3]
    c458:	88c8      	ldrh	r0, [r1, #6]
    c45a:	0a00      	lsrs	r0, r0, #8
    c45c:	7120      	strb	r0, [r4, #4]
    c45e:	7a08      	ldrb	r0, [r1, #8]
    c460:	e04d      	b.n	c4fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c462:	2030      	movs	r0, #48	; 0x30
    c464:	7020      	strb	r0, [r4, #0]
    c466:	7908      	ldrb	r0, [r1, #4]
    c468:	70a0      	strb	r0, [r4, #2]
    c46a:	7988      	ldrb	r0, [r1, #6]
    c46c:	70e0      	strb	r0, [r4, #3]
    c46e:	88c8      	ldrh	r0, [r1, #6]
    c470:	0a00      	lsrs	r0, r0, #8
    c472:	7120      	strb	r0, [r4, #4]
    c474:	2003      	movs	r0, #3
    c476:	e015      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c478:	7022      	strb	r2, [r4, #0]
    c47a:	2007      	movs	r0, #7
    c47c:	e044      	b.n	c508 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    c47e:	7022      	strb	r2, [r4, #0]
    c480:	70a5      	strb	r5, [r4, #2]
    c482:	7908      	ldrb	r0, [r1, #4]
    c484:	70e0      	strb	r0, [r4, #3]
    c486:	7988      	ldrb	r0, [r1, #6]
    c488:	7120      	strb	r0, [r4, #4]
    c48a:	88c8      	ldrh	r0, [r1, #6]
    c48c:	0a00      	lsrs	r0, r0, #8
    c48e:	7160      	strb	r0, [r4, #5]
    c490:	7a08      	ldrb	r0, [r1, #8]
    c492:	71a0      	strb	r0, [r4, #6]
    c494:	7a48      	ldrb	r0, [r1, #9]
    c496:	e027      	b.n	c4e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    c498:	4620      	mov	r0, r4
    c49a:	1d09      	adds	r1, r1, #4
    c49c:	f7f7 fdda 	bl	4054 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    c4a0:	2800      	cmp	r0, #0
    c4a2:	d001      	beq.n	c4a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    c4a4:	7060      	strb	r0, [r4, #1]
    c4a6:	1c80      	adds	r0, r0, #2
    c4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4ac:	e073      	b.n	c596 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    c4ae:	e047      	b.n	c540 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    c4b0:	e028      	b.n	c504 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    c4b2:	e053      	b.n	c55c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    c4b4:	e061      	b.n	c57a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    c4b6:	e01a      	b.n	c4ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    c4b8:	e009      	b.n	c4ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    c4ba:	e7ff      	b.n	c4bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    c4bc:	2057      	movs	r0, #87	; 0x57
    c4be:	7020      	strb	r0, [r4, #0]
    c4c0:	7908      	ldrb	r0, [r1, #4]
    c4c2:	70a0      	strb	r0, [r4, #2]
    c4c4:	8888      	ldrh	r0, [r1, #4]
    c4c6:	0a00      	lsrs	r0, r0, #8
    c4c8:	70e0      	strb	r0, [r4, #3]
    c4ca:	2002      	movs	r0, #2
    c4cc:	e7ea      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c4ce:	7022      	strb	r2, [r4, #0]
    c4d0:	2012      	movs	r0, #18
    c4d2:	70a0      	strb	r0, [r4, #2]
    c4d4:	7908      	ldrb	r0, [r1, #4]
    c4d6:	70e0      	strb	r0, [r4, #3]
    c4d8:	7948      	ldrb	r0, [r1, #5]
    c4da:	7120      	strb	r0, [r4, #4]
    c4dc:	7988      	ldrb	r0, [r1, #6]
    c4de:	7160      	strb	r0, [r4, #5]
    c4e0:	88c8      	ldrh	r0, [r1, #6]
    c4e2:	0a00      	lsrs	r0, r0, #8
    c4e4:	71a0      	strb	r0, [r4, #6]
    c4e6:	7a08      	ldrb	r0, [r1, #8]
    c4e8:	71e0      	strb	r0, [r4, #7]
    c4ea:	2006      	movs	r0, #6
    c4ec:	e7da      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c4ee:	7023      	strb	r3, [r4, #0]
    c4f0:	20a1      	movs	r0, #161	; 0xa1
    c4f2:	70a0      	strb	r0, [r4, #2]
    c4f4:	7908      	ldrb	r0, [r1, #4]
    c4f6:	70e0      	strb	r0, [r4, #3]
    c4f8:	7948      	ldrb	r0, [r1, #5]
    c4fa:	7120      	strb	r0, [r4, #4]
    c4fc:	2000      	movs	r0, #0
    c4fe:	7160      	strb	r0, [r4, #5]
    c500:	2004      	movs	r0, #4
    c502:	e7cf      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c504:	7023      	strb	r3, [r4, #0]
    c506:	20a2      	movs	r0, #162	; 0xa2
    c508:	70a0      	strb	r0, [r4, #2]
    c50a:	7908      	ldrb	r0, [r1, #4]
    c50c:	70e0      	strb	r0, [r4, #3]
    c50e:	8888      	ldrh	r0, [r1, #4]
    c510:	0a00      	lsrs	r0, r0, #8
    c512:	7120      	strb	r0, [r4, #4]
    c514:	7988      	ldrb	r0, [r1, #6]
    c516:	7160      	strb	r0, [r4, #5]
    c518:	88c8      	ldrh	r0, [r1, #6]
    c51a:	0a00      	lsrs	r0, r0, #8
    c51c:	71a0      	strb	r0, [r4, #6]
    c51e:	7a08      	ldrb	r0, [r1, #8]
    c520:	71e0      	strb	r0, [r4, #7]
    c522:	8908      	ldrh	r0, [r1, #8]
    c524:	0a00      	lsrs	r0, r0, #8
    c526:	7220      	strb	r0, [r4, #8]
    c528:	7a88      	ldrb	r0, [r1, #10]
    c52a:	7260      	strb	r0, [r4, #9]
    c52c:	8948      	ldrh	r0, [r1, #10]
    c52e:	0a00      	lsrs	r0, r0, #8
    c530:	72a0      	strb	r0, [r4, #10]
    c532:	7b08      	ldrb	r0, [r1, #12]
    c534:	72e0      	strb	r0, [r4, #11]
    c536:	8988      	ldrh	r0, [r1, #12]
    c538:	0a00      	lsrs	r0, r0, #8
    c53a:	7320      	strb	r0, [r4, #12]
    c53c:	200b      	movs	r0, #11
    c53e:	e7b1      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c540:	7023      	strb	r3, [r4, #0]
    c542:	20a3      	movs	r0, #163	; 0xa3
    c544:	70a0      	strb	r0, [r4, #2]
    c546:	7908      	ldrb	r0, [r1, #4]
    c548:	70e0      	strb	r0, [r4, #3]
    c54a:	8888      	ldrh	r0, [r1, #4]
    c54c:	0a00      	lsrs	r0, r0, #8
    c54e:	7120      	strb	r0, [r4, #4]
    c550:	7988      	ldrb	r0, [r1, #6]
    c552:	7160      	strb	r0, [r4, #5]
    c554:	79c8      	ldrb	r0, [r1, #7]
    c556:	71a0      	strb	r0, [r4, #6]
    c558:	2005      	movs	r0, #5
    c55a:	e7a3      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c55c:	7022      	strb	r2, [r4, #0]
    c55e:	2013      	movs	r0, #19
    c560:	70a0      	strb	r0, [r4, #2]
    c562:	7908      	ldrb	r0, [r1, #4]
    c564:	70e0      	strb	r0, [r4, #3]
    c566:	7948      	ldrb	r0, [r1, #5]
    c568:	7120      	strb	r0, [r4, #4]
    c56a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c56e:	f8c4 0005 	str.w	r0, [r4, #5]
    c572:	8948      	ldrh	r0, [r1, #10]
    c574:	f8a4 0009 	strh.w	r0, [r4, #9]
    c578:	e020      	b.n	c5bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    c57a:	7023      	strb	r3, [r4, #0]
    c57c:	20a4      	movs	r0, #164	; 0xa4
    c57e:	70a0      	strb	r0, [r4, #2]
    c580:	7908      	ldrb	r0, [r1, #4]
    c582:	70e0      	strb	r0, [r4, #3]
    c584:	8888      	ldrh	r0, [r1, #4]
    c586:	0a00      	lsrs	r0, r0, #8
    c588:	7120      	strb	r0, [r4, #4]
    c58a:	7988      	ldrb	r0, [r1, #6]
    c58c:	7160      	strb	r0, [r4, #5]
    c58e:	79c8      	ldrb	r0, [r1, #7]
    c590:	71a0      	strb	r0, [r4, #6]
    c592:	2007      	movs	r0, #7
    c594:	e786      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c596:	7023      	strb	r3, [r4, #0]
    c598:	2080      	movs	r0, #128	; 0x80
    c59a:	70a0      	strb	r0, [r4, #2]
    c59c:	888a      	ldrh	r2, [r1, #4]
    c59e:	f8a4 2003 	strh.w	r2, [r4, #3]
    c5a2:	88ca      	ldrh	r2, [r1, #6]
    c5a4:	f8a4 2005 	strh.w	r2, [r4, #5]
    c5a8:	7a0a      	ldrb	r2, [r1, #8]
    c5aa:	71e2      	strb	r2, [r4, #7]
    c5ac:	7a4a      	ldrb	r2, [r1, #9]
    c5ae:	8122      	strh	r2, [r4, #8]
    c5b0:	7a8a      	ldrb	r2, [r1, #10]
    c5b2:	72a2      	strb	r2, [r4, #10]
    c5b4:	7ac9      	ldrb	r1, [r1, #11]
    c5b6:	f001 0101 	and.w	r1, r1, #1
    c5ba:	72e1      	strb	r1, [r4, #11]
    c5bc:	200a      	movs	r0, #10
    c5be:	e771      	b.n	c4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c5c0 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c5c0:	223e      	movs	r2, #62	; 0x3e
    c5c2:	7002      	strb	r2, [r0, #0]
    c5c4:	2201      	movs	r2, #1
    c5c6:	7082      	strb	r2, [r0, #2]
    c5c8:	790a      	ldrb	r2, [r1, #4]
    c5ca:	70c2      	strb	r2, [r0, #3]
    c5cc:	798a      	ldrb	r2, [r1, #6]
    c5ce:	7102      	strb	r2, [r0, #4]
    c5d0:	88ca      	ldrh	r2, [r1, #6]
    c5d2:	0a12      	lsrs	r2, r2, #8
    c5d4:	7142      	strb	r2, [r0, #5]
    c5d6:	7a0a      	ldrb	r2, [r1, #8]
    c5d8:	7182      	strb	r2, [r0, #6]
    c5da:	7a4a      	ldrb	r2, [r1, #9]
    c5dc:	71c2      	strb	r2, [r0, #7]
    c5de:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c5e2:	6082      	str	r2, [r0, #8]
    c5e4:	89ca      	ldrh	r2, [r1, #14]
    c5e6:	8182      	strh	r2, [r0, #12]
    c5e8:	7c0a      	ldrb	r2, [r1, #16]
    c5ea:	7382      	strb	r2, [r0, #14]
    c5ec:	8a0a      	ldrh	r2, [r1, #16]
    c5ee:	0a12      	lsrs	r2, r2, #8
    c5f0:	73c2      	strb	r2, [r0, #15]
    c5f2:	7c8a      	ldrb	r2, [r1, #18]
    c5f4:	7402      	strb	r2, [r0, #16]
    c5f6:	8a4a      	ldrh	r2, [r1, #18]
    c5f8:	0a12      	lsrs	r2, r2, #8
    c5fa:	7442      	strb	r2, [r0, #17]
    c5fc:	7d0a      	ldrb	r2, [r1, #20]
    c5fe:	7482      	strb	r2, [r0, #18]
    c600:	8a8a      	ldrh	r2, [r1, #20]
    c602:	0a12      	lsrs	r2, r2, #8
    c604:	74c2      	strb	r2, [r0, #19]
    c606:	7d89      	ldrb	r1, [r1, #22]
    c608:	7501      	strb	r1, [r0, #20]
    c60a:	2013      	movs	r0, #19
    c60c:	4770      	bx	lr

0000c60e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c60e:	223e      	movs	r2, #62	; 0x3e
    c610:	7002      	strb	r2, [r0, #0]
    c612:	2201      	movs	r2, #1
    c614:	7082      	strb	r2, [r0, #2]
    c616:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c61a:	70c2      	strb	r2, [r0, #3]
    c61c:	788a      	ldrb	r2, [r1, #2]
    c61e:	7102      	strb	r2, [r0, #4]
    c620:	884a      	ldrh	r2, [r1, #2]
    c622:	0a12      	lsrs	r2, r2, #8
    c624:	7142      	strb	r2, [r0, #5]
    c626:	790a      	ldrb	r2, [r1, #4]
    c628:	7182      	strb	r2, [r0, #6]
    c62a:	794a      	ldrb	r2, [r1, #5]
    c62c:	71c2      	strb	r2, [r0, #7]
    c62e:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c632:	6082      	str	r2, [r0, #8]
    c634:	894a      	ldrh	r2, [r1, #10]
    c636:	8182      	strh	r2, [r0, #12]
    c638:	7e0a      	ldrb	r2, [r1, #24]
    c63a:	7382      	strb	r2, [r0, #14]
    c63c:	8b0a      	ldrh	r2, [r1, #24]
    c63e:	0a12      	lsrs	r2, r2, #8
    c640:	73c2      	strb	r2, [r0, #15]
    c642:	7e8a      	ldrb	r2, [r1, #26]
    c644:	7402      	strb	r2, [r0, #16]
    c646:	8b4a      	ldrh	r2, [r1, #26]
    c648:	0a12      	lsrs	r2, r2, #8
    c64a:	7442      	strb	r2, [r0, #17]
    c64c:	7f0a      	ldrb	r2, [r1, #28]
    c64e:	7482      	strb	r2, [r0, #18]
    c650:	8b8a      	ldrh	r2, [r1, #28]
    c652:	0a12      	lsrs	r2, r2, #8
    c654:	74c2      	strb	r2, [r0, #19]
    c656:	7f89      	ldrb	r1, [r1, #30]
    c658:	7501      	strb	r1, [r0, #20]
    c65a:	2113      	movs	r1, #19
    c65c:	7041      	strb	r1, [r0, #1]
    c65e:	4608      	mov	r0, r1
    c660:	4770      	bx	lr

0000c662 <sdc_hci_data_get>:
    c662:	b510      	push	{r4, lr}
    c664:	b120      	cbz	r0, c670 <sdc_hci_data_get+0xe>
    c666:	f7ff fda4 	bl	c1b2 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c66a:	b120      	cbz	r0, c676 <sdc_hci_data_get+0x14>
    c66c:	2000      	movs	r0, #0
    c66e:	bd10      	pop	{r4, pc}
    c670:	f06f 0015 	mvn.w	r0, #21
    c674:	bd10      	pop	{r4, pc}
    c676:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c67a:	bd10      	pop	{r4, pc}

0000c67c <sdc_hci_data_put>:
    c67c:	b510      	push	{r4, lr}
    c67e:	f06f 0415 	mvn.w	r4, #21
    c682:	b120      	cbz	r0, c68e <sdc_hci_data_put+0x12>
    c684:	f7ff fda3 	bl	c1ce <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c688:	b108      	cbz	r0, c68e <sdc_hci_data_put+0x12>
    c68a:	2000      	movs	r0, #0
    c68c:	bd10      	pop	{r4, pc}
    c68e:	4620      	mov	r0, r4
    c690:	bd10      	pop	{r4, pc}

0000c692 <sdc_hci_evt_get>:
    c692:	b510      	push	{r4, lr}
    c694:	b120      	cbz	r0, c6a0 <sdc_hci_evt_get+0xe>
    c696:	f7ff fda3 	bl	c1e0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c69a:	b120      	cbz	r0, c6a6 <sdc_hci_evt_get+0x14>
    c69c:	2000      	movs	r0, #0
    c69e:	bd10      	pop	{r4, pc}
    c6a0:	f06f 0015 	mvn.w	r0, #21
    c6a4:	bd10      	pop	{r4, pc}
    c6a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c6aa:	bd10      	pop	{r4, pc}

0000c6ac <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c6ac:	f002 be4a 	b.w	f344 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c6b0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c6b0:	f002 be8c 	b.w	f3cc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c6b4 <sdc_hci_cmd_cb_set_event_mask>:
    c6b4:	b510      	push	{r4, lr}
    c6b6:	f7f7 fd2b 	bl	4110 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c6ba:	2000      	movs	r0, #0
    c6bc:	bd10      	pop	{r4, pc}

0000c6be <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c6be:	b510      	push	{r4, lr}
    c6c0:	f7f7 fd34 	bl	412c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c6c4:	2000      	movs	r0, #0
    c6c6:	bd10      	pop	{r4, pc}

0000c6c8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c6c8:	f002 be9c 	b.w	f404 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c6cc <sdc_hci_cmd_vs_conn_event_extend>:
    c6cc:	b508      	push	{r3, lr}
    c6ce:	7800      	ldrb	r0, [r0, #0]
    c6d0:	f88d 0000 	strb.w	r0, [sp]
    c6d4:	4668      	mov	r0, sp
    c6d6:	f002 fd4c 	bl	f172 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c6da:	bd08      	pop	{r3, pc}

0000c6dc <sdc_hci_cmd_vs_conn_update>:
    c6dc:	2001      	movs	r0, #1
    c6de:	4770      	bx	lr

0000c6e0 <sdc_hci_cmd_vs_event_length_set>:
    c6e0:	f7fd bbfa 	b.w	9ed8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c6e4 <sdc_hci_cmd_vs_llpm_mode_set>:
    c6e4:	2001      	movs	r0, #1
    c6e6:	4770      	bx	lr

0000c6e8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c6e8:	7800      	ldrb	r0, [r0, #0]
    c6ea:	b100      	cbz	r0, c6ee <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c6ec:	2001      	movs	r0, #1
    c6ee:	f002 bcc5 	b.w	f07c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c6f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c6f2:	b570      	push	{r4, r5, r6, lr}
    c6f4:	4605      	mov	r5, r0
    c6f6:	2210      	movs	r2, #16
    c6f8:	2100      	movs	r1, #0
    c6fa:	f7ff fc5c 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c6fe:	2210      	movs	r2, #16
    c700:	2100      	movs	r1, #0
    c702:	f105 0010 	add.w	r0, r5, #16
    c706:	f7ff fc56 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c70a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c70e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c712:	1c40      	adds	r0, r0, #1
    c714:	d10b      	bne.n	c72e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c716:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c71a:	1c40      	adds	r0, r0, #1
    c71c:	d107      	bne.n	c72e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c71e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c722:	1c40      	adds	r0, r0, #1
    c724:	d103      	bne.n	c72e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c726:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c72a:	1c40      	adds	r0, r0, #1
    c72c:	d00b      	beq.n	c746 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c72e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c732:	6128      	str	r0, [r5, #16]
    c734:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c738:	6168      	str	r0, [r5, #20]
    c73a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c73e:	61a8      	str	r0, [r5, #24]
    c740:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c744:	61e8      	str	r0, [r5, #28]
    c746:	2000      	movs	r0, #0
    c748:	f7f8 fa78 	bl	4c3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c74c:	b918      	cbnz	r0, c756 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c74e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c752:	07c0      	lsls	r0, r0, #31
    c754:	d118      	bne.n	c788 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c756:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c75a:	1c40      	adds	r0, r0, #1
    c75c:	d10b      	bne.n	c776 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c75e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c762:	1c40      	adds	r0, r0, #1
    c764:	d107      	bne.n	c776 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c766:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c76a:	1c40      	adds	r0, r0, #1
    c76c:	d103      	bne.n	c776 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c76e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c772:	1c40      	adds	r0, r0, #1
    c774:	d008      	beq.n	c788 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c776:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c77a:	6028      	str	r0, [r5, #0]
    c77c:	6860      	ldr	r0, [r4, #4]
    c77e:	6068      	str	r0, [r5, #4]
    c780:	68a0      	ldr	r0, [r4, #8]
    c782:	60a8      	str	r0, [r5, #8]
    c784:	68e0      	ldr	r0, [r4, #12]
    c786:	60e8      	str	r0, [r5, #12]
    c788:	2000      	movs	r0, #0
    c78a:	bd70      	pop	{r4, r5, r6, pc}

0000c78c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c78c:	b570      	push	{r4, r5, r6, lr}
    c78e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c792:	4604      	mov	r4, r0
    c794:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c798:	1c40      	adds	r0, r0, #1
    c79a:	d105      	bne.n	c7a8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c79c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c7a0:	43c0      	mvns	r0, r0
    c7a2:	0400      	lsls	r0, r0, #16
    c7a4:	0c00      	lsrs	r0, r0, #16
    c7a6:	d03a      	beq.n	c81e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c7a8:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c7ac:	07c0      	lsls	r0, r0, #31
    c7ae:	d036      	beq.n	c81e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c7b0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c7b4:	f8c4 0001 	str.w	r0, [r4, #1]
    c7b8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c7bc:	f8a4 0005 	strh.w	r0, [r4, #5]
    c7c0:	79a0      	ldrb	r0, [r4, #6]
    c7c2:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c7c6:	71a0      	strb	r0, [r4, #6]
    c7c8:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c7cc:	1c40      	adds	r0, r0, #1
    c7ce:	d00f      	beq.n	c7f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c7d0:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c7d4:	1c40      	adds	r0, r0, #1
    c7d6:	d00b      	beq.n	c7f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c7d8:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c7dc:	1c40      	adds	r0, r0, #1
    c7de:	d007      	beq.n	c7f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c7e0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c7e4:	1c40      	adds	r0, r0, #1
    c7e6:	d003      	beq.n	c7f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c7e8:	2000      	movs	r0, #0
    c7ea:	f7f8 fa27 	bl	4c3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c7ee:	b140      	cbz	r0, c802 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c7f0:	2210      	movs	r2, #16
    c7f2:	2100      	movs	r1, #0
    c7f4:	1de0      	adds	r0, r4, #7
    c7f6:	f7ff fbde 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c7fa:	2001      	movs	r0, #1
    c7fc:	7020      	strb	r0, [r4, #0]
    c7fe:	2000      	movs	r0, #0
    c800:	bd70      	pop	{r4, r5, r6, pc}
    c802:	f855 0f90 	ldr.w	r0, [r5, #144]!
    c806:	f8c4 0007 	str.w	r0, [r4, #7]
    c80a:	6868      	ldr	r0, [r5, #4]
    c80c:	f8c4 000b 	str.w	r0, [r4, #11]
    c810:	68a8      	ldr	r0, [r5, #8]
    c812:	f8c4 000f 	str.w	r0, [r4, #15]
    c816:	68e8      	ldr	r0, [r5, #12]
    c818:	f8c4 0013 	str.w	r0, [r4, #19]
    c81c:	e7ed      	b.n	c7fa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    c81e:	2000      	movs	r0, #0
    c820:	e7ec      	b.n	c7fc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000c822 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c822:	f002 bc98 	b.w	f156 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c826 <sdc_hci_cmd_ip_read_bd_addr>:
    c826:	f002 bd9e 	b.w	f366 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c82a <sdc_hci_cmd_ip_read_local_version_information>:
    c82a:	f7fd bb63 	b.w	9ef4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c82e <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c82e:	f002 b97c 	b.w	eb2a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c832 <sdc_hci_cmd_le_add_device_to_white_list>:
    c832:	f002 b995 	b.w	eb60 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c836 <sdc_hci_cmd_le_clear_resolving_list>:
    c836:	f002 b9aa 	b.w	eb8e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c83a <sdc_hci_cmd_le_clear_white_list>:
    c83a:	f002 b9b5 	b.w	eba8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c83e <sdc_hci_cmd_le_encrypt>:
    c83e:	f002 b9bd 	b.w	ebbc <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c842 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c842:	8802      	ldrh	r2, [r0, #0]
    c844:	800a      	strh	r2, [r1, #0]
    c846:	f002 b9c2 	b.w	ebce <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c84a <sdc_hci_cmd_le_long_term_key_request_reply>:
    c84a:	8802      	ldrh	r2, [r0, #0]
    c84c:	800a      	strh	r2, [r1, #0]
    c84e:	f002 b9d7 	b.w	ec00 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c852 <sdc_hci_cmd_le_rand>:
    c852:	f002 b9ff 	b.w	ec54 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c856 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c856:	f002 ba03 	b.w	ec60 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c85a <sdc_hci_cmd_le_read_buffer_size>:
    c85a:	f7fd ba93 	b.w	9d84 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c85e <sdc_hci_cmd_le_read_channel_map>:
    c85e:	f7fd ba9b 	b.w	9d98 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c862 <sdc_hci_cmd_le_read_max_data_length>:
    c862:	f002 ba06 	b.w	ec72 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c866 <sdc_hci_cmd_le_read_phy>:
    c866:	f002 ba14 	b.w	ec92 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c86a <sdc_hci_cmd_le_read_remote_features>:
    c86a:	f7fd babf 	b.w	9dec <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c86e <sdc_hci_cmd_le_read_resolving_list_size>:
    c86e:	f002 ba3b 	b.w	ece8 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c872 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c872:	f7fd badb 	b.w	9e2c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c876 <sdc_hci_cmd_le_read_transmit_power>:
    c876:	f002 ba3b 	b.w	ecf0 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c87a <sdc_hci_cmd_le_read_white_list_size>:
    c87a:	f002 ba42 	b.w	ed02 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c87e <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c87e:	f002 ba44 	b.w	ed0a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c882 <sdc_hci_cmd_le_remove_device_from_white_list>:
    c882:	f002 ba5b 	b.w	ed3c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c886 <sdc_hci_cmd_le_set_address_resolution_enable>:
    c886:	f002 ba6e 	b.w	ed66 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c88a <sdc_hci_cmd_le_set_adv_data>:
    c88a:	f002 ba7a 	b.w	ed82 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c88e <sdc_hci_cmd_le_set_adv_enable>:
    c88e:	f002 ba8d 	b.w	edac <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c892 <sdc_hci_cmd_le_set_adv_params>:
    c892:	f002 babe 	b.w	ee12 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c896 <sdc_hci_cmd_le_set_data_length>:
    c896:	f002 bb51 	b.w	ef3c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c89a <sdc_hci_cmd_le_set_default_phy>:
    c89a:	f7fd bad7 	b.w	9e4c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c89e <sdc_hci_cmd_le_set_event_mask>:
    c89e:	b510      	push	{r4, lr}
    c8a0:	f7f7 fc30 	bl	4104 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c8a4:	2000      	movs	r0, #0
    c8a6:	bd10      	pop	{r4, pc}

0000c8a8 <sdc_hci_cmd_le_set_phy>:
    c8a8:	f002 bb6f 	b.w	ef8a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c8ac <sdc_hci_cmd_le_set_privacy_mode>:
    c8ac:	f002 bb8d 	b.w	efca <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c8b0 <sdc_hci_cmd_le_set_random_address>:
    c8b0:	f002 bba1 	b.w	eff6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c8b4 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c8b4:	f002 bbad 	b.w	f012 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c8b8 <sdc_hci_cmd_le_set_scan_response_data>:
    c8b8:	f002 bbb4 	b.w	f024 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c8bc <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c8bc:	f002 bbc7 	b.w	f04e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c8c0 <sdc_hci_cmd_lc_disconnect>:
    c8c0:	f002 b8df 	b.w	ea82 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c8c4 <sdc_hci_cmd_lc_read_remote_version_information>:
    c8c4:	f002 bd5b 	b.w	f37e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c8c8:	b570      	push	{r4, r5, r6, lr}
    c8ca:	880b      	ldrh	r3, [r1, #0]
    c8cc:	7f04      	ldrb	r4, [r0, #28]
    c8ce:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c8d2:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c8d6:	8802      	ldrh	r2, [r0, #0]
    c8d8:	4435      	add	r5, r6
    c8da:	1da4      	adds	r4, r4, #6
    c8dc:	882d      	ldrh	r5, [r5, #0]
    c8de:	4422      	add	r2, r4
    c8e0:	b292      	uxth	r2, r2
    c8e2:	4425      	add	r5, r4
    c8e4:	1e54      	subs	r4, r2, #1
    c8e6:	442c      	add	r4, r5
    c8e8:	fb94 f4f2 	sdiv	r4, r4, r2
    c8ec:	fb02 6204 	mla	r2, r2, r4, r6
    c8f0:	8840      	ldrh	r0, [r0, #2]
    c8f2:	b292      	uxth	r2, r2
    c8f4:	4290      	cmp	r0, r2
    c8f6:	d903      	bls.n	c900 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c8f8:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c8fc:	4310      	orrs	r0, r2
    c8fe:	e002      	b.n	c906 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c900:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c904:	4398      	bics	r0, r3
    c906:	8008      	strh	r0, [r1, #0]
    c908:	bd70      	pop	{r4, r5, r6, pc}
    c90a:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c90e:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c912:	429a      	cmp	r2, r3
    c914:	d107      	bne.n	c926 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c916:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c91a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c91e:	4288      	cmp	r0, r1
    c920:	d001      	beq.n	c926 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c922:	2001      	movs	r0, #1
    c924:	4770      	bx	lr
    c926:	2000      	movs	r0, #0
    c928:	4770      	bx	lr

0000c92a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c92a:	b570      	push	{r4, r5, r6, lr}
    c92c:	7f00      	ldrb	r0, [r0, #28]
    c92e:	461c      	mov	r4, r3
    c930:	1d80      	adds	r0, r0, #6
    c932:	4408      	add	r0, r1
    c934:	4613      	mov	r3, r2
    c936:	8809      	ldrh	r1, [r1, #0]
    c938:	9a04      	ldr	r2, [sp, #16]
    c93a:	1cc9      	adds	r1, r1, #3
    c93c:	b289      	uxth	r1, r1
    c93e:	1915      	adds	r5, r2, r4
    c940:	1ec0      	subs	r0, r0, #3
    c942:	428d      	cmp	r5, r1
    c944:	d805      	bhi.n	c952 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c946:	1881      	adds	r1, r0, r2
    c948:	4622      	mov	r2, r4
    c94a:	4618      	mov	r0, r3
    c94c:	f7ff fab9 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c950:	e000      	b.n	c954 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c952:	2400      	movs	r4, #0
    c954:	4620      	mov	r0, r4
    c956:	bd70      	pop	{r4, r5, r6, pc}

0000c958 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c958:	b570      	push	{r4, r5, r6, lr}
    c95a:	7f00      	ldrb	r0, [r0, #28]
    c95c:	461c      	mov	r4, r3
    c95e:	1d80      	adds	r0, r0, #6
    c960:	4408      	add	r0, r1
    c962:	4613      	mov	r3, r2
    c964:	8809      	ldrh	r1, [r1, #0]
    c966:	9a04      	ldr	r2, [sp, #16]
    c968:	1cc9      	adds	r1, r1, #3
    c96a:	b289      	uxth	r1, r1
    c96c:	1915      	adds	r5, r2, r4
    c96e:	1ec0      	subs	r0, r0, #3
    c970:	428d      	cmp	r5, r1
    c972:	d805      	bhi.n	c980 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c974:	4410      	add	r0, r2
    c976:	4622      	mov	r2, r4
    c978:	4619      	mov	r1, r3
    c97a:	f7ff faa2 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c97e:	e000      	b.n	c982 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c980:	2400      	movs	r4, #0
    c982:	4620      	mov	r0, r4
    c984:	bd70      	pop	{r4, r5, r6, pc}

0000c986 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c986:	8881      	ldrh	r1, [r0, #4]
    c988:	88c0      	ldrh	r0, [r0, #6]
    c98a:	4288      	cmp	r0, r1
    c98c:	d101      	bne.n	c992 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c98e:	2001      	movs	r0, #1
    c990:	4770      	bx	lr
    c992:	2000      	movs	r0, #0
    c994:	4770      	bx	lr

0000c996 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c996:	8881      	ldrh	r1, [r0, #4]
    c998:	8900      	ldrh	r0, [r0, #8]
    c99a:	4288      	cmp	r0, r1
    c99c:	d101      	bne.n	c9a2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c99e:	2001      	movs	r0, #1
    c9a0:	4770      	bx	lr
    c9a2:	2000      	movs	r0, #0
    c9a4:	4770      	bx	lr

0000c9a6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c9a6:	b570      	push	{r4, r5, r6, lr}
    c9a8:	4604      	mov	r4, r0
    c9aa:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c9ae:	8880      	ldrh	r0, [r0, #4]
    c9b0:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c9b4:	4401      	add	r1, r0
    c9b6:	8a20      	ldrh	r0, [r4, #16]
    c9b8:	2800      	cmp	r0, #0
    c9ba:	d01a      	beq.n	c9f2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c9bc:	89a2      	ldrh	r2, [r4, #12]
    c9be:	2500      	movs	r5, #0
    c9c0:	4410      	add	r0, r2
    c9c2:	b280      	uxth	r0, r0
    c9c4:	81a0      	strh	r0, [r4, #12]
    c9c6:	880a      	ldrh	r2, [r1, #0]
    c9c8:	4290      	cmp	r0, r2
    c9ca:	d905      	bls.n	c9d8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    c9cc:	f240 1163 	movw	r1, #355	; 0x163
    c9d0:	f04f 0014 	mov.w	r0, #20
    c9d4:	f7f7 fa06 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9d8:	d109      	bne.n	c9ee <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c9da:	69a0      	ldr	r0, [r4, #24]
    c9dc:	b108      	cbz	r0, c9e2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    c9de:	7f40      	ldrb	r0, [r0, #29]
    c9e0:	7088      	strb	r0, [r1, #2]
    c9e2:	f104 0104 	add.w	r1, r4, #4
    c9e6:	4620      	mov	r0, r4
    c9e8:	f7ff ff6e 	bl	c8c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c9ec:	81a5      	strh	r5, [r4, #12]
    c9ee:	8225      	strh	r5, [r4, #16]
    c9f0:	2001      	movs	r0, #1
    c9f2:	bd70      	pop	{r4, r5, r6, pc}

0000c9f4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9f6:	4604      	mov	r4, r0
    c9f8:	f100 0324 	add.w	r3, r0, #36	; 0x24
    c9fc:	88c0      	ldrh	r0, [r0, #6]
    c9fe:	460e      	mov	r6, r1
    ca00:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ca04:	8a60      	ldrh	r0, [r4, #18]
    ca06:	19d9      	adds	r1, r3, r7
    ca08:	b108      	cbz	r0, ca0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    ca0a:	42b0      	cmp	r0, r6
    ca0c:	d201      	bcs.n	ca12 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    ca0e:	2000      	movs	r0, #0
    ca10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca12:	89e0      	ldrh	r0, [r4, #14]
    ca14:	2500      	movs	r5, #0
    ca16:	b140      	cbz	r0, ca2a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    ca18:	f8b1 c000 	ldrh.w	ip, [r1]
    ca1c:	4560      	cmp	r0, ip
    ca1e:	d008      	beq.n	ca32 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    ca20:	f240 214b 	movw	r1, #587	; 0x24b
    ca24:	2014      	movs	r0, #20
    ca26:	f7f7 f9dd 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca2a:	7f60      	ldrb	r0, [r4, #29]
    ca2c:	7088      	strb	r0, [r1, #2]
    ca2e:	800d      	strh	r5, [r1, #0]
    ca30:	e00e      	b.n	ca50 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    ca32:	f894 c01c 	ldrb.w	ip, [r4, #28]
    ca36:	4418      	add	r0, r3
    ca38:	f10c 0c06 	add.w	ip, ip, #6
    ca3c:	44bc      	add	ip, r7
    ca3e:	4460      	add	r0, ip
    ca40:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    ca44:	f820 cc03 	strh.w	ip, [r0, #-3]
    ca48:	f894 c020 	ldrb.w	ip, [r4, #32]
    ca4c:	f800 cc01 	strb.w	ip, [r0, #-1]
    ca50:	89e0      	ldrh	r0, [r4, #14]
    ca52:	4430      	add	r0, r6
    ca54:	81e0      	strh	r0, [r4, #14]
    ca56:	8808      	ldrh	r0, [r1, #0]
    ca58:	4430      	add	r0, r6
    ca5a:	8008      	strh	r0, [r1, #0]
    ca5c:	b19a      	cbz	r2, ca86 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    ca5e:	1da1      	adds	r1, r4, #6
    ca60:	4620      	mov	r0, r4
    ca62:	f7ff ff31 	bl	c8c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ca66:	81e5      	strh	r5, [r4, #14]
    ca68:	7f60      	ldrb	r0, [r4, #29]
    ca6a:	1c40      	adds	r0, r0, #1
    ca6c:	7760      	strb	r0, [r4, #29]
    ca6e:	7da0      	ldrb	r0, [r4, #22]
    ca70:	f88d 0000 	strb.w	r0, [sp]
    ca74:	9800      	ldr	r0, [sp, #0]
    ca76:	9000      	str	r0, [sp, #0]
    ca78:	f89d 0000 	ldrb.w	r0, [sp]
    ca7c:	b178      	cbz	r0, ca9e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    ca7e:	88e0      	ldrh	r0, [r4, #6]
    ca80:	82a0      	strh	r0, [r4, #20]
    ca82:	75a5      	strb	r5, [r4, #22]
    ca84:	e00b      	b.n	ca9e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    ca86:	7f20      	ldrb	r0, [r4, #28]
    ca88:	89e1      	ldrh	r1, [r4, #14]
    ca8a:	1d80      	adds	r0, r0, #6
    ca8c:	4438      	add	r0, r7
    ca8e:	4419      	add	r1, r3
    ca90:	4408      	add	r0, r1
    ca92:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    ca96:	83e1      	strh	r1, [r4, #30]
    ca98:	7880      	ldrb	r0, [r0, #2]
    ca9a:	f884 0020 	strb.w	r0, [r4, #32]
    ca9e:	8265      	strh	r5, [r4, #18]
    caa0:	2001      	movs	r0, #1
    caa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000caa4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    caa4:	b510      	push	{r4, lr}
    caa6:	4604      	mov	r4, r0
    caa8:	88c0      	ldrh	r0, [r0, #6]
    caaa:	88a1      	ldrh	r1, [r4, #4]
    caac:	4281      	cmp	r1, r0
    caae:	d007      	beq.n	cac0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cab0:	89a0      	ldrh	r0, [r4, #12]
    cab2:	b928      	cbnz	r0, cac0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cab4:	8a20      	ldrh	r0, [r4, #16]
    cab6:	b918      	cbnz	r0, cac0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cab8:	88a0      	ldrh	r0, [r4, #4]
    caba:	8aa1      	ldrh	r1, [r4, #20]
    cabc:	4288      	cmp	r0, r1
    cabe:	d101      	bne.n	cac4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    cac0:	2000      	movs	r0, #0
    cac2:	bd10      	pop	{r4, pc}
    cac4:	1d21      	adds	r1, r4, #4
    cac6:	4620      	mov	r0, r4
    cac8:	f7ff fefe 	bl	c8c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cacc:	2000      	movs	r0, #0
    cace:	8220      	strh	r0, [r4, #16]
    cad0:	2001      	movs	r0, #1
    cad2:	bd10      	pop	{r4, pc}

0000cad4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    cad4:	b510      	push	{r4, lr}
    cad6:	4604      	mov	r4, r0
    cad8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cadc:	88c0      	ldrh	r0, [r0, #6]
    cade:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cae2:	4402      	add	r2, r0
    cae4:	8820      	ldrh	r0, [r4, #0]
    cae6:	2845      	cmp	r0, #69	; 0x45
    cae8:	d200      	bcs.n	caec <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    caea:	2045      	movs	r0, #69	; 0x45
    caec:	4288      	cmp	r0, r1
    caee:	d204      	bcs.n	cafa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    caf0:	f240 1119 	movw	r1, #281	; 0x119
    caf4:	2014      	movs	r0, #20
    caf6:	f7f7 f975 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cafa:	7de0      	ldrb	r0, [r4, #23]
    cafc:	2800      	cmp	r0, #0
    cafe:	d003      	beq.n	cb08 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    cb00:	8810      	ldrh	r0, [r2, #0]
    cb02:	4288      	cmp	r0, r1
    cb04:	d201      	bcs.n	cb0a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    cb06:	2000      	movs	r0, #0
    cb08:	bd10      	pop	{r4, pc}
    cb0a:	8011      	strh	r1, [r2, #0]
    cb0c:	1da1      	adds	r1, r4, #6
    cb0e:	4620      	mov	r0, r4
    cb10:	f7ff feda 	bl	c8c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cb14:	2000      	movs	r0, #0
    cb16:	75e0      	strb	r0, [r4, #23]
    cb18:	2001      	movs	r0, #1
    cb1a:	bd10      	pop	{r4, pc}

0000cb1c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb20:	8941      	ldrh	r1, [r0, #10]
    cb22:	8886      	ldrh	r6, [r0, #4]
    cb24:	4604      	mov	r4, r0
    cb26:	2500      	movs	r5, #0
    cb28:	f100 070a 	add.w	r7, r0, #10
    cb2c:	e006      	b.n	cb3c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    cb2e:	4639      	mov	r1, r7
    cb30:	4620      	mov	r0, r4
    cb32:	f7ff fec9 	bl	c8c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cb36:	1c6d      	adds	r5, r5, #1
    cb38:	8961      	ldrh	r1, [r4, #10]
    cb3a:	b2ad      	uxth	r5, r5
    cb3c:	42b1      	cmp	r1, r6
    cb3e:	d1f6      	bne.n	cb2e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    cb40:	4628      	mov	r0, r5
    cb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cb46 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    cb46:	b530      	push	{r4, r5, lr}
    cb48:	88c4      	ldrh	r4, [r0, #6]
    cb4a:	8881      	ldrh	r1, [r0, #4]
    cb4c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cb50:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cb54:	4413      	add	r3, r2
    cb56:	8882      	ldrh	r2, [r0, #4]
    cb58:	8a85      	ldrh	r5, [r0, #20]
    cb5a:	42aa      	cmp	r2, r5
    cb5c:	d012      	beq.n	cb84 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cb5e:	42a1      	cmp	r1, r4
    cb60:	d010      	beq.n	cb84 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cb62:	8981      	ldrh	r1, [r0, #12]
    cb64:	b971      	cbnz	r1, cb84 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cb66:	6982      	ldr	r2, [r0, #24]
    cb68:	b172      	cbz	r2, cb88 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cb6a:	4610      	mov	r0, r2
    cb6c:	f7ff ff13 	bl	c996 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    cb70:	b950      	cbnz	r0, cb88 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cb72:	8910      	ldrh	r0, [r2, #8]
    cb74:	3224      	adds	r2, #36	; 0x24
    cb76:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cb7a:	4410      	add	r0, r2
    cb7c:	7899      	ldrb	r1, [r3, #2]
    cb7e:	7880      	ldrb	r0, [r0, #2]
    cb80:	4288      	cmp	r0, r1
    cb82:	d101      	bne.n	cb88 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cb84:	2000      	movs	r0, #0
    cb86:	bd30      	pop	{r4, r5, pc}
    cb88:	4618      	mov	r0, r3
    cb8a:	bd30      	pop	{r4, r5, pc}

0000cb8c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    cb8c:	7f00      	ldrb	r0, [r0, #28]
    cb8e:	1d80      	adds	r0, r0, #6
    cb90:	4408      	add	r0, r1
    cb92:	1ec0      	subs	r0, r0, #3
    cb94:	6010      	str	r0, [r2, #0]
    cb96:	8808      	ldrh	r0, [r1, #0]
    cb98:	4770      	bx	lr

0000cb9a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    cb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb9e:	460e      	mov	r6, r1
    cba0:	88c1      	ldrh	r1, [r0, #6]
    cba2:	8902      	ldrh	r2, [r0, #8]
    cba4:	4604      	mov	r4, r0
    cba6:	f100 0824 	add.w	r8, r0, #36	; 0x24
    cbaa:	8800      	ldrh	r0, [r0, #0]
    cbac:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    cbb0:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    cbb4:	2845      	cmp	r0, #69	; 0x45
    cbb6:	d200      	bcs.n	cbba <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    cbb8:	2045      	movs	r0, #69	; 0x45
    cbba:	42b0      	cmp	r0, r6
    cbbc:	d203      	bcs.n	cbc6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    cbbe:	21db      	movs	r1, #219	; 0xdb
    cbc0:	2014      	movs	r0, #20
    cbc2:	f7f7 f90f 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbc6:	4610      	mov	r0, r2
    cbc8:	f7ff fe9f 	bl	c90a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cbcc:	b110      	cbz	r0, cbd4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    cbce:	2000      	movs	r0, #0
    cbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbd4:	42af      	cmp	r7, r5
    cbd6:	d908      	bls.n	cbea <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cbd8:	7f21      	ldrb	r1, [r4, #28]
    cbda:	1b78      	subs	r0, r7, r5
    cbdc:	1a40      	subs	r0, r0, r1
    cbde:	1f80      	subs	r0, r0, #6
    cbe0:	4286      	cmp	r6, r0
    cbe2:	dd02      	ble.n	cbea <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cbe4:	2000      	movs	r0, #0
    cbe6:	75e0      	strb	r0, [r4, #23]
    cbe8:	e7f1      	b.n	cbce <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    cbea:	eb08 0005 	add.w	r0, r8, r5
    cbee:	2101      	movs	r1, #1
    cbf0:	8006      	strh	r6, [r0, #0]
    cbf2:	75e1      	strb	r1, [r4, #23]
    cbf4:	e7ec      	b.n	cbd0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000cbf6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    cbf6:	b538      	push	{r3, r4, r5, lr}
    cbf8:	88c4      	ldrh	r4, [r0, #6]
    cbfa:	8881      	ldrh	r1, [r0, #4]
    cbfc:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cc00:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cc04:	441a      	add	r2, r3
    cc06:	42a1      	cmp	r1, r4
    cc08:	d010      	beq.n	cc2c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cc0a:	8983      	ldrh	r3, [r0, #12]
    cc0c:	8a05      	ldrh	r5, [r0, #16]
    cc0e:	8812      	ldrh	r2, [r2, #0]
    cc10:	442b      	add	r3, r5
    cc12:	4293      	cmp	r3, r2
    cc14:	d308      	bcc.n	cc28 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cc16:	f8ad 1000 	strh.w	r1, [sp]
    cc1a:	4669      	mov	r1, sp
    cc1c:	f7ff fe54 	bl	c8c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc20:	f8bd 0000 	ldrh.w	r0, [sp]
    cc24:	42a0      	cmp	r0, r4
    cc26:	d001      	beq.n	cc2c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cc28:	2001      	movs	r0, #1
    cc2a:	bd38      	pop	{r3, r4, r5, pc}
    cc2c:	2000      	movs	r0, #0
    cc2e:	bd38      	pop	{r3, r4, r5, pc}

0000cc30 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    cc30:	b570      	push	{r4, r5, r6, lr}
    cc32:	88c6      	ldrh	r6, [r0, #6]
    cc34:	8885      	ldrh	r5, [r0, #4]
    cc36:	4603      	mov	r3, r0
    cc38:	f100 0424 	add.w	r4, r0, #36	; 0x24
    cc3c:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    cc40:	4420      	add	r0, r4
    cc42:	42b5      	cmp	r5, r6
    cc44:	d102      	bne.n	cc4c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    cc46:	2000      	movs	r0, #0
    cc48:	8218      	strh	r0, [r3, #16]
    cc4a:	bd70      	pop	{r4, r5, r6, pc}
    cc4c:	8804      	ldrh	r4, [r0, #0]
    cc4e:	899d      	ldrh	r5, [r3, #12]
    cc50:	7f1e      	ldrb	r6, [r3, #28]
    cc52:	1b64      	subs	r4, r4, r5
    cc54:	4435      	add	r5, r6
    cc56:	4428      	add	r0, r5
    cc58:	880d      	ldrh	r5, [r1, #0]
    cc5a:	b2a4      	uxth	r4, r4
    cc5c:	1cc0      	adds	r0, r0, #3
    cc5e:	42a5      	cmp	r5, r4
    cc60:	d900      	bls.n	cc64 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    cc62:	800c      	strh	r4, [r1, #0]
    cc64:	899c      	ldrh	r4, [r3, #12]
    cc66:	b124      	cbz	r4, cc72 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    cc68:	2400      	movs	r4, #0
    cc6a:	7014      	strb	r4, [r2, #0]
    cc6c:	8809      	ldrh	r1, [r1, #0]
    cc6e:	8219      	strh	r1, [r3, #16]
    cc70:	bd70      	pop	{r4, r5, r6, pc}
    cc72:	2401      	movs	r4, #1
    cc74:	e7f9      	b.n	cc6a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cc76 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    cc76:	b508      	push	{r3, lr}
    cc78:	8a81      	ldrh	r1, [r0, #20]
    cc7a:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cc7e:	3aff      	subs	r2, #255	; 0xff
    cc80:	d008      	beq.n	cc94 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    cc82:	7d82      	ldrb	r2, [r0, #22]
    cc84:	f88d 2000 	strb.w	r2, [sp]
    cc88:	9a00      	ldr	r2, [sp, #0]
    cc8a:	9200      	str	r2, [sp, #0]
    cc8c:	f89d 2000 	ldrb.w	r2, [sp]
    cc90:	b952      	cbnz	r2, cca8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    cc92:	e004      	b.n	cc9e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    cc94:	f44f 7162 	mov.w	r1, #904	; 0x388
    cc98:	2014      	movs	r0, #20
    cc9a:	f7f7 f8a3 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc9e:	8880      	ldrh	r0, [r0, #4]
    cca0:	4281      	cmp	r1, r0
    cca2:	d101      	bne.n	cca8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    cca4:	2000      	movs	r0, #0
    cca6:	bd08      	pop	{r3, pc}
    cca8:	2001      	movs	r0, #1
    ccaa:	bd08      	pop	{r3, pc}

0000ccac <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    ccac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ccb0:	8281      	strh	r1, [r0, #20]
    ccb2:	2100      	movs	r1, #0
    ccb4:	7581      	strb	r1, [r0, #22]
    ccb6:	4770      	bx	lr

0000ccb8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    ccb8:	b510      	push	{r4, lr}
    ccba:	8a81      	ldrh	r1, [r0, #20]
    ccbc:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ccc0:	3aff      	subs	r2, #255	; 0xff
    ccc2:	d004      	beq.n	ccce <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    ccc4:	f44f 7159 	mov.w	r1, #868	; 0x364
    ccc8:	2014      	movs	r0, #20
    ccca:	f7f7 f88b 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccce:	88c1      	ldrh	r1, [r0, #6]
    ccd0:	8281      	strh	r1, [r0, #20]
    ccd2:	89c1      	ldrh	r1, [r0, #14]
    ccd4:	b109      	cbz	r1, ccda <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    ccd6:	2101      	movs	r1, #1
    ccd8:	e000      	b.n	ccdc <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    ccda:	2100      	movs	r1, #0
    ccdc:	7581      	strb	r1, [r0, #22]
    ccde:	bd10      	pop	{r4, pc}

0000cce0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cce4:	461d      	mov	r5, r3
    cce6:	4616      	mov	r6, r2
    cce8:	9f06      	ldr	r7, [sp, #24]
    ccea:	460b      	mov	r3, r1
    ccec:	4604      	mov	r4, r0
    ccee:	463a      	mov	r2, r7
    ccf0:	4629      	mov	r1, r5
    ccf2:	4630      	mov	r0, r6
    ccf4:	f000 f84f 	bl	cd96 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ccf8:	4283      	cmp	r3, r0
    ccfa:	d201      	bcs.n	cd00 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    ccfc:	21a8      	movs	r1, #168	; 0xa8
    ccfe:	e018      	b.n	cd32 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cd00:	1ce0      	adds	r0, r4, #3
    cd02:	f020 0103 	bic.w	r1, r0, #3
    cd06:	4620      	mov	r0, r4
    cd08:	42a1      	cmp	r1, r4
    cd0a:	d001      	beq.n	cd10 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    cd0c:	21a9      	movs	r1, #169	; 0xa9
    cd0e:	e010      	b.n	cd32 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cd10:	2224      	movs	r2, #36	; 0x24
    cd12:	2100      	movs	r1, #0
    cd14:	f7ff f94f 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd18:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cd1c:	82a0      	strh	r0, [r4, #20]
    cd1e:	19a8      	adds	r0, r5, r6
    cd20:	1d80      	adds	r0, r0, #6
    cd22:	4378      	muls	r0, r7
    cd24:	b280      	uxth	r0, r0
    cd26:	7725      	strb	r5, [r4, #28]
    cd28:	8060      	strh	r0, [r4, #2]
    cd2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cd2e:	d903      	bls.n	cd38 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    cd30:	21af      	movs	r1, #175	; 0xaf
    cd32:	2014      	movs	r0, #20
    cd34:	f7f7 f856 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd38:	8026      	strh	r6, [r4, #0]
    cd3a:	2000      	movs	r0, #0
    cd3c:	7760      	strb	r0, [r4, #29]
    cd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cd42 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    cd42:	6181      	str	r1, [r0, #24]
    cd44:	6188      	str	r0, [r1, #24]
    cd46:	4770      	bx	lr

0000cd48 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd4c:	460b      	mov	r3, r1
    cd4e:	4604      	mov	r4, r0
    cd50:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cd54:	8905      	ldrh	r5, [r0, #8]
    cd56:	8946      	ldrh	r6, [r0, #10]
    cd58:	8880      	ldrh	r0, [r0, #4]
    cd5a:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    cd5e:	4439      	add	r1, r7
    cd60:	460f      	mov	r7, r1
    cd62:	4285      	cmp	r5, r0
    cd64:	d102      	bne.n	cd6c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    cd66:	2000      	movs	r0, #0
    cd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd6c:	b10a      	cbz	r2, cd72 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    cd6e:	1cc8      	adds	r0, r1, #3
    cd70:	6010      	str	r0, [r2, #0]
    cd72:	b123      	cbz	r3, cd7e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    cd74:	7f22      	ldrb	r2, [r4, #28]
    cd76:	1cf9      	adds	r1, r7, #3
    cd78:	4618      	mov	r0, r3
    cd7a:	f7ff f8a2 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd7e:	883f      	ldrh	r7, [r7, #0]
    cd80:	f104 0108 	add.w	r1, r4, #8
    cd84:	4620      	mov	r0, r4
    cd86:	f7ff fd9f 	bl	c8c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cd8a:	42b5      	cmp	r5, r6
    cd8c:	d101      	bne.n	cd92 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    cd8e:	8920      	ldrh	r0, [r4, #8]
    cd90:	8160      	strh	r0, [r4, #10]
    cd92:	4638      	mov	r0, r7
    cd94:	e7e8      	b.n	cd68 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000cd96 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    cd96:	4401      	add	r1, r0
    cd98:	1d89      	adds	r1, r1, #6
    cd9a:	4351      	muls	r1, r2
    cd9c:	b28a      	uxth	r2, r1
    cd9e:	2100      	movs	r1, #0
    cda0:	2845      	cmp	r0, #69	; 0x45
    cda2:	d201      	bcs.n	cda8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    cda4:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    cda8:	3224      	adds	r2, #36	; 0x24
    cdaa:	1850      	adds	r0, r2, r1
    cdac:	b280      	uxth	r0, r0
    cdae:	4770      	bx	lr

0000cdb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    cdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdb4:	4688      	mov	r8, r1
    cdb6:	88c1      	ldrh	r1, [r0, #6]
    cdb8:	4604      	mov	r4, r0
    cdba:	8900      	ldrh	r0, [r0, #8]
    cdbc:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    cdc0:	f104 0524 	add.w	r5, r4, #36	; 0x24
    cdc4:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    cdc8:	eb05 0906 	add.w	r9, r5, r6
    cdcc:	f7ff fd9d 	bl	c90a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cdd0:	2200      	movs	r2, #0
    cdd2:	b998      	cbnz	r0, cdfc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    cdd4:	8820      	ldrh	r0, [r4, #0]
    cdd6:	2845      	cmp	r0, #69	; 0x45
    cdd8:	d200      	bcs.n	cddc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    cdda:	2045      	movs	r0, #69	; 0x45
    cddc:	42b7      	cmp	r7, r6
    cdde:	d906      	bls.n	cdee <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cde0:	7f23      	ldrb	r3, [r4, #28]
    cde2:	1bb9      	subs	r1, r7, r6
    cde4:	1ac9      	subs	r1, r1, r3
    cde6:	1f89      	subs	r1, r1, #6
    cde8:	4281      	cmp	r1, r0
    cdea:	da00      	bge.n	cdee <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cdec:	4608      	mov	r0, r1
    cdee:	89e1      	ldrh	r1, [r4, #14]
    cdf0:	b111      	cbz	r1, cdf8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    cdf2:	f8b9 3000 	ldrh.w	r3, [r9]
    cdf6:	1ac0      	subs	r0, r0, r3
    cdf8:	4540      	cmp	r0, r8
    cdfa:	da03      	bge.n	ce04 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    cdfc:	8262      	strh	r2, [r4, #18]
    cdfe:	2000      	movs	r0, #0
    ce00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce04:	7f20      	ldrb	r0, [r4, #28]
    ce06:	4429      	add	r1, r5
    ce08:	1d80      	adds	r0, r0, #6
    ce0a:	4430      	add	r0, r6
    ce0c:	4408      	add	r0, r1
    ce0e:	f8a4 8012 	strh.w	r8, [r4, #18]
    ce12:	1ec0      	subs	r0, r0, #3
    ce14:	e7f4      	b.n	ce00 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000ce16 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    ce16:	2100      	movs	r1, #0
    ce18:	81c1      	strh	r1, [r0, #14]
    ce1a:	8241      	strh	r1, [r0, #18]
    ce1c:	7581      	strb	r1, [r0, #22]
    ce1e:	4770      	bx	lr

0000ce20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    ce20:	b570      	push	{r4, r5, r6, lr}
    ce22:	2300      	movs	r3, #0
    ce24:	2908      	cmp	r1, #8
    ce26:	d204      	bcs.n	ce32 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    ce28:	f240 11cb 	movw	r1, #459	; 0x1cb
    ce2c:	2015      	movs	r0, #21
    ce2e:	f7f6 ffd9 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce32:	6802      	ldr	r2, [r0, #0]
    ce34:	b90a      	cbnz	r2, ce3a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    ce36:	e01e      	b.n	ce76 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    ce38:	4610      	mov	r0, r2
    ce3a:	6802      	ldr	r2, [r0, #0]
    ce3c:	8893      	ldrh	r3, [r2, #4]
    ce3e:	428b      	cmp	r3, r1
    ce40:	d002      	beq.n	ce48 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    ce42:	6813      	ldr	r3, [r2, #0]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d1f7      	bne.n	ce38 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    ce48:	8894      	ldrh	r4, [r2, #4]
    ce4a:	4613      	mov	r3, r2
    ce4c:	428c      	cmp	r4, r1
    ce4e:	d101      	bne.n	ce54 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    ce50:	6811      	ldr	r1, [r2, #0]
    ce52:	e00d      	b.n	ce70 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    ce54:	f101 0508 	add.w	r5, r1, #8
    ce58:	b2ae      	uxth	r6, r5
    ce5a:	2500      	movs	r5, #0
    ce5c:	42b4      	cmp	r4, r6
    ce5e:	d309      	bcc.n	ce74 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    ce60:	1a64      	subs	r4, r4, r1
    ce62:	4411      	add	r1, r2
    ce64:	600d      	str	r5, [r1, #0]
    ce66:	808c      	strh	r4, [r1, #4]
    ce68:	6802      	ldr	r2, [r0, #0]
    ce6a:	6812      	ldr	r2, [r2, #0]
    ce6c:	6002      	str	r2, [r0, #0]
    ce6e:	600a      	str	r2, [r1, #0]
    ce70:	6001      	str	r1, [r0, #0]
    ce72:	e000      	b.n	ce76 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    ce74:	2300      	movs	r3, #0
    ce76:	4618      	mov	r0, r3
    ce78:	bd70      	pop	{r4, r5, r6, pc}

0000ce7a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    ce7a:	b510      	push	{r4, lr}
    ce7c:	000c      	movs	r4, r1
    ce7e:	d006      	beq.n	ce8e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    ce80:	2c08      	cmp	r4, #8
    ce82:	d209      	bcs.n	ce98 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    ce84:	f240 1195 	movw	r1, #405	; 0x195
    ce88:	2015      	movs	r0, #21
    ce8a:	f7f6 ffab 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce8e:	b108      	cbz	r0, ce94 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    ce90:	2100      	movs	r1, #0
    ce92:	6001      	str	r1, [r0, #0]
    ce94:	2000      	movs	r0, #0
    ce96:	bd10      	pop	{r4, pc}
    ce98:	b118      	cbz	r0, cea2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    ce9a:	b2a1      	uxth	r1, r4
    ce9c:	6800      	ldr	r0, [r0, #0]
    ce9e:	f000 f814 	bl	ceca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    cea2:	1d20      	adds	r0, r4, #4
    cea4:	bd10      	pop	{r4, pc}

0000cea6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    cea6:	2100      	movs	r1, #0
    cea8:	6802      	ldr	r2, [r0, #0]
    ceaa:	e003      	b.n	ceb4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    ceac:	8893      	ldrh	r3, [r2, #4]
    ceae:	6812      	ldr	r2, [r2, #0]
    ceb0:	4419      	add	r1, r3
    ceb2:	b289      	uxth	r1, r1
    ceb4:	2a00      	cmp	r2, #0
    ceb6:	d1f9      	bne.n	ceac <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    ceb8:	f000 b807 	b.w	ceca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000cebc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    cebc:	2300      	movs	r3, #0
    cebe:	600b      	str	r3, [r1, #0]
    cec0:	808a      	strh	r2, [r1, #4]
    cec2:	6802      	ldr	r2, [r0, #0]
    cec4:	600a      	str	r2, [r1, #0]
    cec6:	6001      	str	r1, [r0, #0]
    cec8:	4770      	bx	lr
    ceca:	2300      	movs	r3, #0
    cecc:	6043      	str	r3, [r0, #4]
    cece:	1d02      	adds	r2, r0, #4
    ced0:	8101      	strh	r1, [r0, #8]
    ced2:	6002      	str	r2, [r0, #0]
    ced4:	4770      	bx	lr

0000ced6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    ced6:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    ceda:	3bff      	subs	r3, #255	; 0xff
    cedc:	d001      	beq.n	cee2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    cede:	2902      	cmp	r1, #2
    cee0:	d301      	bcc.n	cee6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    cee2:	2000      	movs	r0, #0
    cee4:	4770      	bx	lr
    cee6:	f7f7 ba45 	b.w	4374 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    ceea:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    ceee:	3aff      	subs	r2, #255	; 0xff
    cef0:	d001      	beq.n	cef6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    cef2:	2902      	cmp	r1, #2
    cef4:	d301      	bcc.n	cefa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    cef6:	2000      	movs	r0, #0
    cef8:	4770      	bx	lr
    cefa:	f7f7 ba75 	b.w	43e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000cefe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    cefe:	b570      	push	{r4, r5, r6, lr}
    cf00:	4605      	mov	r5, r0
    cf02:	460c      	mov	r4, r1
    cf04:	4608      	mov	r0, r1
    cf06:	f000 f96e 	bl	d1e6 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    cf0a:	b108      	cbz	r0, cf10 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    cf0c:	2010      	movs	r0, #16
    cf0e:	bd70      	pop	{r4, r5, r6, pc}
    cf10:	2d02      	cmp	r5, #2
    cf12:	d301      	bcc.n	cf18 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    cf14:	2007      	movs	r0, #7
    cf16:	bd70      	pop	{r4, r5, r6, pc}
    cf18:	7025      	strb	r5, [r4, #0]
    cf1a:	2000      	movs	r0, #0
    cf1c:	8060      	strh	r0, [r4, #2]
    cf1e:	bd70      	pop	{r4, r5, r6, pc}
    cf20:	b510      	push	{r4, lr}
    cf22:	4604      	mov	r4, r0
    cf24:	f7f7 faac 	bl	4480 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    cf28:	42a0      	cmp	r0, r4
    cf2a:	d901      	bls.n	cf30 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    cf2c:	2001      	movs	r0, #1
    cf2e:	bd10      	pop	{r4, pc}
    cf30:	2000      	movs	r0, #0
    cf32:	bd10      	pop	{r4, pc}
    cf34:	4770      	bx	lr

0000cf36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    cf36:	b570      	push	{r4, r5, r6, lr}
    cf38:	460e      	mov	r6, r1
    cf3a:	461d      	mov	r5, r3
    cf3c:	4611      	mov	r1, r2
    cf3e:	f000 f811 	bl	cf64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    cf42:	4604      	mov	r4, r0
    cf44:	4629      	mov	r1, r5
    cf46:	4630      	mov	r0, r6
    cf48:	f000 f803 	bl	cf52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    cf4c:	4420      	add	r0, r4
    cf4e:	1d00      	adds	r0, r0, #4
    cf50:	bd70      	pop	{r4, r5, r6, pc}
    cf52:	b510      	push	{r4, lr}
    cf54:	460a      	mov	r2, r1
    cf56:	2101      	movs	r1, #1
    cf58:	f7ff ff1d 	bl	cd96 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cf5c:	1cc0      	adds	r0, r0, #3
    cf5e:	f020 0003 	bic.w	r0, r0, #3
    cf62:	bd10      	pop	{r4, pc}
    cf64:	b510      	push	{r4, lr}
    cf66:	460a      	mov	r2, r1
    cf68:	2101      	movs	r1, #1
    cf6a:	f7ff ff14 	bl	cd96 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cf6e:	1cc0      	adds	r0, r0, #3
    cf70:	f020 0003 	bic.w	r0, r0, #3
    cf74:	bd10      	pop	{r4, pc}
    cf76:	b109      	cbz	r1, cf7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    cf78:	2100      	movs	r1, #0
    cf7a:	e000      	b.n	cf7e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    cf7c:	2102      	movs	r1, #2
    cf7e:	1843      	adds	r3, r0, r1
    cf80:	7d1a      	ldrb	r2, [r3, #20]
    cf82:	2a02      	cmp	r2, #2
    cf84:	d008      	beq.n	cf98 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    cf86:	7d5b      	ldrb	r3, [r3, #21]
    cf88:	2b02      	cmp	r3, #2
    cf8a:	d009      	beq.n	cfa0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    cf8c:	2a03      	cmp	r2, #3
    cf8e:	d003      	beq.n	cf98 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    cf90:	2b03      	cmp	r3, #3
    cf92:	d005      	beq.n	cfa0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    cf94:	2000      	movs	r0, #0
    cf96:	4770      	bx	lr
    cf98:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cf9c:	8b00      	ldrh	r0, [r0, #24]
    cf9e:	4770      	bx	lr
    cfa0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cfa4:	8b40      	ldrh	r0, [r0, #26]
    cfa6:	4770      	bx	lr
    cfa8:	b109      	cbz	r1, cfae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    cfaa:	2100      	movs	r1, #0
    cfac:	e000      	b.n	cfb0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    cfae:	2102      	movs	r1, #2
    cfb0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cfb4:	8b01      	ldrh	r1, [r0, #24]
    cfb6:	b911      	cbnz	r1, cfbe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    cfb8:	8b40      	ldrh	r0, [r0, #26]
    cfba:	2800      	cmp	r0, #0
    cfbc:	d000      	beq.n	cfc0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    cfbe:	2001      	movs	r0, #1
    cfc0:	4770      	bx	lr
    cfc2:	b538      	push	{r3, r4, r5, lr}
    cfc4:	7883      	ldrb	r3, [r0, #2]
    cfc6:	f88d 3000 	strb.w	r3, [sp]
    cfca:	9b00      	ldr	r3, [sp, #0]
    cfcc:	9300      	str	r3, [sp, #0]
    cfce:	f89d 3000 	ldrb.w	r3, [sp]
    cfd2:	b953      	cbnz	r3, cfea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    cfd4:	b10a      	cbz	r2, cfda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    cfd6:	2300      	movs	r3, #0
    cfd8:	e000      	b.n	cfdc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    cfda:	2302      	movs	r3, #2
    cfdc:	18c2      	adds	r2, r0, r3
    cfde:	7d14      	ldrb	r4, [r2, #20]
    cfe0:	2c02      	cmp	r4, #2
    cfe2:	d004      	beq.n	cfee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    cfe4:	7d52      	ldrb	r2, [r2, #21]
    cfe6:	2a02      	cmp	r2, #2
    cfe8:	d004      	beq.n	cff4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    cfea:	2000      	movs	r0, #0
    cfec:	bd38      	pop	{r3, r4, r5, pc}
    cfee:	461a      	mov	r2, r3
    cff0:	1c5b      	adds	r3, r3, #1
    cff2:	e000      	b.n	cff6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    cff4:	1c5a      	adds	r2, r3, #1
    cff6:	b181      	cbz	r1, d01a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    cff8:	18c5      	adds	r5, r0, r3
    cffa:	2400      	movs	r4, #0
    cffc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d000:	752c      	strb	r4, [r5, #20]
    d002:	831c      	strh	r4, [r3, #24]
    d004:	2303      	movs	r3, #3
    d006:	1884      	adds	r4, r0, r2
    d008:	7523      	strb	r3, [r4, #20]
    d00a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d00e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d012:	685b      	ldr	r3, [r3, #4]
    d014:	600b      	str	r3, [r1, #0]
    d016:	8b00      	ldrh	r0, [r0, #24]
    d018:	8088      	strh	r0, [r1, #4]
    d01a:	2001      	movs	r0, #1
    d01c:	bd38      	pop	{r3, r4, r5, pc}
    d01e:	b510      	push	{r4, lr}
    d020:	b109      	cbz	r1, d026 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    d022:	2100      	movs	r1, #0
    d024:	e000      	b.n	d028 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    d026:	2102      	movs	r1, #2
    d028:	1843      	adds	r3, r0, r1
    d02a:	7d1c      	ldrb	r4, [r3, #20]
    d02c:	4294      	cmp	r4, r2
    d02e:	d103      	bne.n	d038 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    d030:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d034:	8b00      	ldrh	r0, [r0, #24]
    d036:	bd10      	pop	{r4, pc}
    d038:	7d5b      	ldrb	r3, [r3, #21]
    d03a:	4293      	cmp	r3, r2
    d03c:	d103      	bne.n	d046 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    d03e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d042:	8b40      	ldrh	r0, [r0, #26]
    d044:	bd10      	pop	{r4, pc}
    d046:	2000      	movs	r0, #0
    d048:	bd10      	pop	{r4, pc}
    d04a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d04e:	d201      	bcs.n	d054 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    d050:	0841      	lsrs	r1, r0, #1
    d052:	e000      	b.n	d056 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    d054:	21ff      	movs	r1, #255	; 0xff
    d056:	1a40      	subs	r0, r0, r1
    d058:	f240 6172 	movw	r1, #1650	; 0x672
    d05c:	4288      	cmp	r0, r1
    d05e:	db00      	blt.n	d062 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    d060:	4608      	mov	r0, r1
    d062:	b280      	uxth	r0, r0
    d064:	4770      	bx	lr

0000d066 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d066:	2101      	movs	r1, #1
    d068:	f7ff bf85 	b.w	cf76 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000d06c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d070:	4606      	mov	r6, r0
    d072:	f342 0780 	sbfx	r7, r2, #2, #1
    d076:	7848      	ldrb	r0, [r1, #1]
    d078:	460c      	mov	r4, r1
    d07a:	f022 0504 	bic.w	r5, r2, #4
    d07e:	1c7f      	adds	r7, r7, #1
    d080:	b100      	cbz	r0, d084 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d082:	b90d      	cbnz	r5, d088 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d084:	4328      	orrs	r0, r5
    d086:	d104      	bne.n	d092 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d088:	b145      	cbz	r5, d09c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d08a:	2100      	movs	r1, #0
    d08c:	4620      	mov	r0, r4
    d08e:	f7f7 faff 	bl	4690 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d092:	2101      	movs	r1, #1
    d094:	70a1      	strb	r1, [r4, #2]
    d096:	b11f      	cbz	r7, d0a0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d098:	2000      	movs	r0, #0
    d09a:	e002      	b.n	d0a2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d09c:	2101      	movs	r1, #1
    d09e:	e7f5      	b.n	d08c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d0a0:	2002      	movs	r0, #2
    d0a2:	1822      	adds	r2, r4, r0
    d0a4:	7d12      	ldrb	r2, [r2, #20]
    d0a6:	2a03      	cmp	r2, #3
    d0a8:	d102      	bne.n	d0b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d0aa:	2d02      	cmp	r5, #2
    d0ac:	d000      	beq.n	d0b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d0ae:	1c40      	adds	r0, r0, #1
    d0b0:	1822      	adds	r2, r4, r0
    d0b2:	7511      	strb	r1, [r2, #20]
    d0b4:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d0b8:	2200      	movs	r2, #0
    d0ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d0be:	830a      	strh	r2, [r1, #24]
    d0c0:	6840      	ldr	r0, [r0, #4]
    d0c2:	70a2      	strb	r2, [r4, #2]
    d0c4:	4631      	mov	r1, r6
    d0c6:	f362 010f 	bfi	r1, r2, #0, #16
    d0ca:	e9c6 0100 	strd	r0, r1, [r6]
    d0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d0d2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0d6:	461e      	mov	r6, r3
    d0d8:	4613      	mov	r3, r2
    d0da:	4604      	mov	r4, r0
    d0dc:	b109      	cbz	r1, d0e2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d0de:	2000      	movs	r0, #0
    d0e0:	e000      	b.n	d0e4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d0e2:	2002      	movs	r0, #2
    d0e4:	2101      	movs	r1, #1
    d0e6:	70a1      	strb	r1, [r4, #2]
    d0e8:	1821      	adds	r1, r4, r0
    d0ea:	7d0a      	ldrb	r2, [r1, #20]
    d0ec:	2a01      	cmp	r2, #1
    d0ee:	d003      	beq.n	d0f8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d0f0:	7d49      	ldrb	r1, [r1, #21]
    d0f2:	2901      	cmp	r1, #1
    d0f4:	d10c      	bne.n	d110 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d0f6:	1c40      	adds	r0, r0, #1
    d0f8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d0fc:	2700      	movs	r7, #0
    d0fe:	8b29      	ldrh	r1, [r5, #24]
    d100:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d104:	198a      	adds	r2, r1, r6
    d106:	4562      	cmp	r2, ip
    d108:	d905      	bls.n	d116 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d10a:	4420      	add	r0, r4
    d10c:	832f      	strh	r7, [r5, #24]
    d10e:	7507      	strb	r7, [r0, #20]
    d110:	2000      	movs	r0, #0
    d112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d116:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d11a:	4632      	mov	r2, r6
    d11c:	6840      	ldr	r0, [r0, #4]
    d11e:	4408      	add	r0, r1
    d120:	4619      	mov	r1, r3
    d122:	f7fe fece 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d126:	8b28      	ldrh	r0, [r5, #24]
    d128:	4430      	add	r0, r6
    d12a:	8328      	strh	r0, [r5, #24]
    d12c:	70a7      	strb	r7, [r4, #2]
    d12e:	2001      	movs	r0, #1
    d130:	e7ef      	b.n	d112 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d132 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d132:	2202      	movs	r2, #2
    d134:	2100      	movs	r1, #0
    d136:	f7ff bf72 	b.w	d01e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d13a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d13a:	b510      	push	{r4, lr}
    d13c:	2101      	movs	r1, #1
    d13e:	f7ff ff33 	bl	cfa8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    d142:	2800      	cmp	r0, #0
    d144:	d000      	beq.n	d148 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d146:	2001      	movs	r0, #1
    d148:	bd10      	pop	{r4, pc}

0000d14a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d14a:	2201      	movs	r2, #1
    d14c:	f7ff bf39 	b.w	cfc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d150 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d150:	2200      	movs	r2, #0
    d152:	f7ff bf36 	b.w	cfc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d156 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d156:	b570      	push	{r4, r5, r6, lr}
    d158:	b109      	cbz	r1, d15e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d15a:	2300      	movs	r3, #0
    d15c:	e000      	b.n	d160 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d15e:	2302      	movs	r3, #2
    d160:	2101      	movs	r1, #1
    d162:	7081      	strb	r1, [r0, #2]
    d164:	18c1      	adds	r1, r0, r3
    d166:	2402      	movs	r4, #2
    d168:	7d0d      	ldrb	r5, [r1, #20]
    d16a:	2d01      	cmp	r5, #1
    d16c:	d007      	beq.n	d17e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d16e:	7d4d      	ldrb	r5, [r1, #21]
    d170:	2d01      	cmp	r5, #1
    d172:	d009      	beq.n	d188 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d174:	f44f 718b 	mov.w	r1, #278	; 0x116
    d178:	2009      	movs	r0, #9
    d17a:	f7f6 fe33 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d17e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d182:	831a      	strh	r2, [r3, #24]
    d184:	750c      	strb	r4, [r1, #20]
    d186:	e003      	b.n	d190 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d188:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d18c:	835a      	strh	r2, [r3, #26]
    d18e:	754c      	strb	r4, [r1, #21]
    d190:	2100      	movs	r1, #0
    d192:	7081      	strb	r1, [r0, #2]
    d194:	bd70      	pop	{r4, r5, r6, pc}

0000d196 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d196:	2101      	movs	r1, #1
    d198:	7001      	strb	r1, [r0, #0]
    d19a:	4770      	bx	lr

0000d19c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d19c:	2201      	movs	r2, #1
    d19e:	4611      	mov	r1, r2
    d1a0:	f7ff bf3d 	b.w	d01e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d1a4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d1a4:	2201      	movs	r2, #1
    d1a6:	2100      	movs	r1, #0
    d1a8:	f7ff bf39 	b.w	d01e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d1ac <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d1ac:	2100      	movs	r1, #0
    d1ae:	f7ff bee2 	b.w	cf76 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    d1b2:	2800      	cmp	r0, #0
    d1b4:	db09      	blt.n	d1ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d1b6:	f000 021f 	and.w	r2, r0, #31
    d1ba:	2101      	movs	r1, #1
    d1bc:	4091      	lsls	r1, r2
    d1be:	0940      	lsrs	r0, r0, #5
    d1c0:	0080      	lsls	r0, r0, #2
    d1c2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d1c6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d1ca:	4770      	bx	lr

0000d1cc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d1cc:	f7f7 bbb6 	b.w	493c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d1d0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d1d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d1d4:	2000      	movs	r0, #0
    d1d6:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d1da:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d1de:	2001      	movs	r0, #1
    d1e0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d1e4:	4770      	bx	lr

0000d1e6 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d1e6:	b108      	cbz	r0, d1ec <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d1e8:	2000      	movs	r0, #0
    d1ea:	4770      	bx	lr
    d1ec:	2001      	movs	r0, #1
    d1ee:	4770      	bx	lr

0000d1f0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d1f0:	f7f7 bcea 	b.w	4bc8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d1f4 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d1f4:	f7f7 bcd8 	b.w	4ba8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d1f8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d1f8:	b510      	push	{r4, lr}
    d1fa:	2900      	cmp	r1, #0
    d1fc:	4604      	mov	r4, r0
    d1fe:	f04f 0106 	mov.w	r1, #6
    d202:	d002      	beq.n	d20a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d204:	f7f6 fe7a 	bl	3efc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d208:	e001      	b.n	d20e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d20a:	f7f6 fe93 	bl	3f34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d20e:	7960      	ldrb	r0, [r4, #5]
    d210:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d214:	7160      	strb	r0, [r4, #5]
    d216:	bd10      	pop	{r4, pc}

0000d218 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d218:	4770      	bx	lr

0000d21a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d21a:	b530      	push	{r4, r5, lr}
    d21c:	460c      	mov	r4, r1
    d21e:	4605      	mov	r5, r0
    d220:	b08d      	sub	sp, #52	; 0x34
    d222:	f04f 0103 	mov.w	r1, #3
    d226:	f104 0003 	add.w	r0, r4, #3
    d22a:	b112      	cbz	r2, d232 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d22c:	f7f6 fe66 	bl	3efc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d230:	e001      	b.n	d236 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d232:	f7f6 fe7f 	bl	3f34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d236:	7960      	ldrb	r0, [r4, #5]
    d238:	220d      	movs	r2, #13
    d23a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d23e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d242:	7160      	strb	r0, [r4, #5]
    d244:	2100      	movs	r1, #0
    d246:	a804      	add	r0, sp, #16
    d248:	f7fe feb5 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d24c:	78e0      	ldrb	r0, [r4, #3]
    d24e:	f88d 001f 	strb.w	r0, [sp, #31]
    d252:	7920      	ldrb	r0, [r4, #4]
    d254:	f88d 001e 	strb.w	r0, [sp, #30]
    d258:	7960      	ldrb	r0, [r4, #5]
    d25a:	f88d 001d 	strb.w	r0, [sp, #29]
    d25e:	2210      	movs	r2, #16
    d260:	4629      	mov	r1, r5
    d262:	4668      	mov	r0, sp
    d264:	f7fe fe2d 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d268:	4668      	mov	r0, sp
    d26a:	f7ff ffaf 	bl	d1cc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d26e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d272:	7020      	strb	r0, [r4, #0]
    d274:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d278:	7060      	strb	r0, [r4, #1]
    d27a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d27e:	70a0      	strb	r0, [r4, #2]
    d280:	b00d      	add	sp, #52	; 0x34
    d282:	bd30      	pop	{r4, r5, pc}

0000d284 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d284:	f7f8 b87e 	b.w	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    d288:	07c1      	lsls	r1, r0, #31
    d28a:	d001      	beq.n	d290 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d28c:	2001      	movs	r0, #1
    d28e:	4770      	bx	lr
    d290:	0780      	lsls	r0, r0, #30
    d292:	d501      	bpl.n	d298 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d294:	2002      	movs	r0, #2
    d296:	4770      	bx	lr
    d298:	2000      	movs	r0, #0
    d29a:	4770      	bx	lr
    d29c:	b510      	push	{r4, lr}
    d29e:	2801      	cmp	r0, #1
    d2a0:	d008      	beq.n	d2b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d2a2:	2802      	cmp	r0, #2
    d2a4:	d004      	beq.n	d2b0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d2a6:	f240 319a 	movw	r1, #922	; 0x39a
    d2aa:	2006      	movs	r0, #6
    d2ac:	f7f6 fd9a 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2b0:	2001      	movs	r0, #1
    d2b2:	bd10      	pop	{r4, pc}
    d2b4:	2000      	movs	r0, #0
    d2b6:	bd10      	pop	{r4, pc}
    d2b8:	2900      	cmp	r1, #0
    d2ba:	d004      	beq.n	d2c6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d2bc:	2801      	cmp	r0, #1
    d2be:	d003      	beq.n	d2c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d2c0:	2901      	cmp	r1, #1
    d2c2:	d001      	beq.n	d2c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d2c4:	2002      	movs	r0, #2
    d2c6:	4770      	bx	lr
    d2c8:	2001      	movs	r0, #1
    d2ca:	4770      	bx	lr
    d2cc:	f7ff bcb0 	b.w	cc30 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d2d0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d2d0:	2101      	movs	r1, #1
    d2d2:	f7f8 bbe7 	b.w	5aa4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d2d6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d2d6:	b510      	push	{r4, lr}
    d2d8:	f002 fbc0 	bl	fa5c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d2dc:	b118      	cbz	r0, d2e6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d2e2:	f7fd b971 	b.w	a5c8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d2e6:	20ff      	movs	r0, #255	; 0xff
    d2e8:	bd10      	pop	{r4, pc}

0000d2ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d2ea:	b510      	push	{r4, lr}
    d2ec:	f7f8 fc22 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d2f0:	2810      	cmp	r0, #16
    d2f2:	d003      	beq.n	d2fc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d2f4:	f7f8 fbee 	bl	5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d2f8:	2810      	cmp	r0, #16
    d2fa:	d100      	bne.n	d2fe <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d2fc:	2008      	movs	r0, #8
    d2fe:	bd10      	pop	{r4, pc}

0000d300 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d300:	b510      	push	{r4, lr}
    d302:	f7f8 fc17 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d306:	2810      	cmp	r0, #16
    d308:	d007      	beq.n	d31a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d30a:	f7f8 fbe3 	bl	5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d30e:	2810      	cmp	r0, #16
    d310:	d003      	beq.n	d31a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d312:	f7f8 fc57 	bl	5bc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d316:	2001      	movs	r0, #1
    d318:	bd10      	pop	{r4, pc}
    d31a:	2000      	movs	r0, #0
    d31c:	bd10      	pop	{r4, pc}

0000d31e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d31e:	b510      	push	{r4, lr}
    d320:	f7f8 fc08 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d324:	2810      	cmp	r0, #16
    d326:	d003      	beq.n	d330 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d328:	f7f8 fc94 	bl	5c54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d32c:	2001      	movs	r0, #1
    d32e:	bd10      	pop	{r4, pc}
    d330:	2000      	movs	r0, #0
    d332:	bd10      	pop	{r4, pc}

0000d334 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d334:	b570      	push	{r4, r5, r6, lr}
    d336:	460e      	mov	r6, r1
    d338:	b08c      	sub	sp, #48	; 0x30
    d33a:	4614      	mov	r4, r2
    d33c:	4601      	mov	r1, r0
    d33e:	461d      	mov	r5, r3
    d340:	2210      	movs	r2, #16
    d342:	4668      	mov	r0, sp
    d344:	f000 f91a 	bl	d57c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d348:	2210      	movs	r2, #16
    d34a:	4631      	mov	r1, r6
    d34c:	a804      	add	r0, sp, #16
    d34e:	f000 f915 	bl	d57c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d352:	4668      	mov	r0, sp
    d354:	f7ff ff3a 	bl	d1cc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d358:	a908      	add	r1, sp, #32
    d35a:	f04f 0210 	mov.w	r2, #16
    d35e:	4628      	mov	r0, r5
    d360:	b11c      	cbz	r4, d36a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d362:	f000 f90b 	bl	d57c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d366:	b00c      	add	sp, #48	; 0x30
    d368:	bd70      	pop	{r4, r5, r6, pc}
    d36a:	f7fe fdaa 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d36e:	e7fa      	b.n	d366 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d370:	b510      	push	{r4, lr}
    d372:	460c      	mov	r4, r1
    d374:	2100      	movs	r1, #0
    d376:	f7ff fdb8 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d37a:	6060      	str	r0, [r4, #4]
    d37c:	b118      	cbz	r0, d386 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d37e:	2001      	movs	r0, #1
    d380:	7020      	strb	r0, [r4, #0]
    d382:	2000      	movs	r0, #0
    d384:	bd10      	pop	{r4, pc}
    d386:	2002      	movs	r0, #2
    d388:	bd10      	pop	{r4, pc}

0000d38a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d38a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d38e:	4348      	muls	r0, r1
    d390:	4770      	bx	lr

0000d392 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d392:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d396:	fbb0 f0f1 	udiv	r0, r0, r1
    d39a:	b280      	uxth	r0, r0
    d39c:	4770      	bx	lr

0000d39e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d39e:	b570      	push	{r4, r5, r6, lr}
    d3a0:	4604      	mov	r4, r0
    d3a2:	4290      	cmp	r0, r2
    d3a4:	d20b      	bcs.n	d3be <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d3a6:	1b10      	subs	r0, r2, r4
    d3a8:	2864      	cmp	r0, #100	; 0x64
    d3aa:	d200      	bcs.n	d3ae <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d3ac:	2064      	movs	r0, #100	; 0x64
    d3ae:	1825      	adds	r5, r4, r0
    d3b0:	428d      	cmp	r5, r1
    d3b2:	d803      	bhi.n	d3bc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d3b4:	2104      	movs	r1, #4
    d3b6:	f7f4 f84d 	bl	1454 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d3ba:	b108      	cbz	r0, d3c0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d3bc:	4620      	mov	r0, r4
    d3be:	bd70      	pop	{r4, r5, r6, pc}
    d3c0:	4628      	mov	r0, r5
    d3c2:	bd70      	pop	{r4, r5, r6, pc}

0000d3c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d3c4:	b510      	push	{r4, lr}
    d3c6:	f1a2 030f 	sub.w	r3, r2, #15
    d3ca:	290c      	cmp	r1, #12
    d3cc:	d244      	bcs.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3ce:	e8df f001 	tbb	[pc, r1]
    d3d2:	0806      	.short	0x0806
    d3d4:	1815120d 	.word	0x1815120d
    d3d8:	4127241c 	.word	0x4127241c
    d3dc:	312a      	.short	0x312a
    d3de:	b3c2      	cbz	r2, d452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d3e0:	e03a      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3e2:	2a07      	cmp	r2, #7
    d3e4:	d03a      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3e6:	2a08      	cmp	r2, #8
    d3e8:	d038      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3ea:	e035      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3ec:	2a0c      	cmp	r2, #12
    d3ee:	d035      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3f0:	2a0b      	cmp	r2, #11
    d3f2:	d033      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3f4:	e030      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3f6:	2a0d      	cmp	r2, #13
    d3f8:	d030      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d3fa:	e02d      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d3fc:	2b0c      	cmp	r3, #12
    d3fe:	d92d      	bls.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d400:	e02a      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d402:	3a10      	subs	r2, #16
    d404:	2a0b      	cmp	r2, #11
    d406:	d929      	bls.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d408:	e026      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d40a:	2b03      	cmp	r3, #3
    d40c:	d926      	bls.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d40e:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    d412:	b308      	cbz	r0, d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d414:	2a1b      	cmp	r2, #27
    d416:	d921      	bls.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d418:	e01e      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d41a:	2a04      	cmp	r2, #4
    d41c:	d01e      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d41e:	e01b      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d420:	2a06      	cmp	r2, #6
    d422:	d01b      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d424:	e018      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d426:	2a1c      	cmp	r2, #28
    d428:	d018      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d42a:	2a1d      	cmp	r2, #29
    d42c:	d016      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d42e:	2a1e      	cmp	r2, #30
    d430:	d014      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d432:	e011      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d434:	2a1f      	cmp	r2, #31
    d436:	d011      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d438:	2a20      	cmp	r2, #32
    d43a:	d00f      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d43c:	2a21      	cmp	r2, #33	; 0x21
    d43e:	d00d      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d440:	2a22      	cmp	r2, #34	; 0x22
    d442:	d00b      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d444:	2a23      	cmp	r2, #35	; 0x23
    d446:	d009      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d448:	2a24      	cmp	r2, #36	; 0x24
    d44a:	d007      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d44c:	2a26      	cmp	r2, #38	; 0x26
    d44e:	d005      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d450:	e002      	b.n	d458 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d452:	e003      	b.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d454:	2a0e      	cmp	r2, #14
    d456:	d001      	beq.n	d45c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d458:	2000      	movs	r0, #0
    d45a:	bd10      	pop	{r4, pc}
    d45c:	2001      	movs	r0, #1
    d45e:	bd10      	pop	{r4, pc}

0000d460 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d460:	280c      	cmp	r0, #12
    d462:	d013      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d464:	280b      	cmp	r0, #11
    d466:	d011      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d468:	280d      	cmp	r0, #13
    d46a:	d00f      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d46c:	281f      	cmp	r0, #31
    d46e:	d00d      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d470:	2820      	cmp	r0, #32
    d472:	d00b      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d474:	2821      	cmp	r0, #33	; 0x21
    d476:	d009      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d478:	2822      	cmp	r0, #34	; 0x22
    d47a:	d007      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d47c:	2823      	cmp	r0, #35	; 0x23
    d47e:	d005      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d480:	2824      	cmp	r0, #36	; 0x24
    d482:	d003      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d484:	2826      	cmp	r0, #38	; 0x26
    d486:	d001      	beq.n	d48c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d488:	2000      	movs	r0, #0
    d48a:	4770      	bx	lr
    d48c:	2001      	movs	r0, #1
    d48e:	4770      	bx	lr

0000d490 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d490:	f011 0f0c 	tst.w	r1, #12
    d494:	d016      	beq.n	d4c4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d496:	074a      	lsls	r2, r1, #29
    d498:	f44f 7116 	mov.w	r1, #600	; 0x258
    d49c:	2a00      	cmp	r2, #0
    d49e:	da02      	bge.n	d4a6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d4a0:	f04f 0210 	mov.w	r2, #16
    d4a4:	e001      	b.n	d4aa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d4a6:	f04f 0240 	mov.w	r2, #64	; 0x40
    d4aa:	da01      	bge.n	d4b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d4ac:	f04f 0196 	mov.w	r1, #150	; 0x96
    d4b0:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d4b4:	eba0 0301 	sub.w	r3, r0, r1
    d4b8:	4288      	cmp	r0, r1
    d4ba:	d910      	bls.n	d4de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d4bc:	fb93 f0f2 	sdiv	r0, r3, r2
    d4c0:	b280      	uxth	r0, r0
    d4c2:	4770      	bx	lr
    d4c4:	2902      	cmp	r1, #2
    d4c6:	d002      	beq.n	d4ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d4c8:	2870      	cmp	r0, #112	; 0x70
    d4ca:	d80a      	bhi.n	d4e2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d4cc:	e007      	b.n	d4de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d4ce:	283c      	cmp	r0, #60	; 0x3c
    d4d0:	d905      	bls.n	d4de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d4d2:	383c      	subs	r0, #60	; 0x3c
    d4d4:	17c1      	asrs	r1, r0, #31
    d4d6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d4da:	1080      	asrs	r0, r0, #2
    d4dc:	e7f0      	b.n	d4c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d4de:	2000      	movs	r0, #0
    d4e0:	e7ee      	b.n	d4c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d4e2:	3870      	subs	r0, #112	; 0x70
    d4e4:	17c1      	asrs	r1, r0, #31
    d4e6:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d4ea:	10c0      	asrs	r0, r0, #3
    d4ec:	e7e8      	b.n	d4c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d4ee <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d4ee:	6809      	ldr	r1, [r1, #0]
    d4f0:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    d4f4:	4770      	bx	lr

0000d4f6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d4f6:	07c1      	lsls	r1, r0, #31
    d4f8:	d001      	beq.n	d4fe <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d4fa:	2001      	movs	r0, #1
    d4fc:	4770      	bx	lr
    d4fe:	0781      	lsls	r1, r0, #30
    d500:	d501      	bpl.n	d506 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d502:	2002      	movs	r0, #2
    d504:	4770      	bx	lr
    d506:	0740      	lsls	r0, r0, #29
    d508:	d501      	bpl.n	d50e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d50a:	2008      	movs	r0, #8
    d50c:	4770      	bx	lr
    d50e:	2000      	movs	r0, #0
    d510:	4770      	bx	lr

0000d512 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d512:	b510      	push	{r4, lr}
    d514:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d518:	2901      	cmp	r1, #1
    d51a:	d006      	beq.n	d52a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d51c:	2902      	cmp	r1, #2
    d51e:	d005      	beq.n	d52c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d520:	f240 31c6 	movw	r1, #966	; 0x3c6
    d524:	2029      	movs	r0, #41	; 0x29
    d526:	f7f6 fc5d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d52a:	b108      	cbz	r0, d530 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d52c:	4610      	mov	r0, r2
    d52e:	bd10      	pop	{r4, pc}
    d530:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d534:	bd10      	pop	{r4, pc}

0000d536 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d53a:	460c      	mov	r4, r1
    d53c:	4605      	mov	r5, r0
    d53e:	68c6      	ldr	r6, [r0, #12]
    d540:	f7f4 fba2 	bl	1c88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d544:	b198      	cbz	r0, d56e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d546:	b1bc      	cbz	r4, d578 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d548:	4630      	mov	r0, r6
    d54a:	68e9      	ldr	r1, [r5, #12]
    d54c:	f7f4 f886 	bl	165c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d550:	2800      	cmp	r0, #0
    d552:	dd11      	ble.n	d578 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d554:	4420      	add	r0, r4
    d556:	1e40      	subs	r0, r0, #1
    d558:	fbb0 f7f4 	udiv	r7, r0, r4
    d55c:	fb07 f104 	mul.w	r1, r7, r4
    d560:	4630      	mov	r0, r6
    d562:	f7f4 f849 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d566:	60e8      	str	r0, [r5, #12]
    d568:	4638      	mov	r0, r7
    d56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d56e:	f240 214b 	movw	r1, #587	; 0x24b
    d572:	2029      	movs	r0, #41	; 0x29
    d574:	f7f6 fc36 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d578:	2000      	movs	r0, #0
    d57a:	e7f6      	b.n	d56a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d57c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d57c:	b530      	push	{r4, r5, lr}
    d57e:	4613      	mov	r3, r2
    d580:	e006      	b.n	d590 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d582:	18cc      	adds	r4, r1, r3
    d584:	1ad5      	subs	r5, r2, r3
    d586:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d58a:	1e5b      	subs	r3, r3, #1
    d58c:	5544      	strb	r4, [r0, r5]
    d58e:	b2db      	uxtb	r3, r3
    d590:	2b00      	cmp	r3, #0
    d592:	d1f6      	bne.n	d582 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d594:	bd30      	pop	{r4, r5, pc}

0000d596 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d596:	b538      	push	{r3, r4, r5, lr}
    d598:	4605      	mov	r5, r0
    d59a:	460c      	mov	r4, r1
    d59c:	4668      	mov	r0, sp
    d59e:	f7fd fd5f 	bl	b060 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d5a2:	b310      	cbz	r0, d5ea <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    d5a4:	f99d 0000 	ldrsb.w	r0, [sp]
    d5a8:	7260      	strb	r0, [r4, #9]
    d5aa:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    d5ae:	72a1      	strb	r1, [r4, #10]
    d5b0:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d5b4:	2200      	movs	r2, #0
    d5b6:	1a41      	subs	r1, r0, r1
    d5b8:	d500      	bpl.n	d5bc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    d5ba:	4249      	negs	r1, r1
    d5bc:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    d5c0:	428b      	cmp	r3, r1
    d5c2:	dc10      	bgt.n	d5e6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d5c4:	2bff      	cmp	r3, #255	; 0xff
    d5c6:	d00e      	beq.n	d5e6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d5c8:	7b21      	ldrb	r1, [r4, #12]
    d5ca:	1c49      	adds	r1, r1, #1
    d5cc:	b2c9      	uxtb	r1, r1
    d5ce:	7321      	strb	r1, [r4, #12]
    d5d0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    d5d4:	4299      	cmp	r1, r3
    d5d6:	d802      	bhi.n	d5de <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    d5d8:	7ae1      	ldrb	r1, [r4, #11]
    d5da:	297f      	cmp	r1, #127	; 0x7f
    d5dc:	d103      	bne.n	d5e6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d5de:	72e0      	strb	r0, [r4, #11]
    d5e0:	2000      	movs	r0, #0
    d5e2:	7320      	strb	r0, [r4, #12]
    d5e4:	2201      	movs	r2, #1
    d5e6:	4610      	mov	r0, r2
    d5e8:	bd38      	pop	{r3, r4, r5, pc}
    d5ea:	207f      	movs	r0, #127	; 0x7f
    d5ec:	7260      	strb	r0, [r4, #9]
    d5ee:	2000      	movs	r0, #0
    d5f0:	bd38      	pop	{r3, r4, r5, pc}

0000d5f2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d5f2:	2300      	movs	r3, #0
    d5f4:	6283      	str	r3, [r0, #40]	; 0x28
    d5f6:	8602      	strh	r2, [r0, #48]	; 0x30
    d5f8:	f240 2371 	movw	r3, #625	; 0x271
    d5fc:	435a      	muls	r2, r3
    d5fe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d602:	1e52      	subs	r2, r2, #1
    d604:	fbb2 f1f1 	udiv	r1, r2, r1
    d608:	62c1      	str	r1, [r0, #44]	; 0x2c
    d60a:	4770      	bx	lr

0000d60c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d60c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d610:	4607      	mov	r7, r0
    d612:	4690      	mov	r8, r2
    d614:	468b      	mov	fp, r1
    d616:	2601      	movs	r6, #1
    d618:	4608      	mov	r0, r1
    d61a:	f000 f941 	bl	d8a0 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d61e:	4682      	mov	sl, r0
    d620:	4658      	mov	r0, fp
    d622:	f000 f949 	bl	d8b8 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d626:	4681      	mov	r9, r0
    d628:	f7ff ff65 	bl	d4f6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d62c:	4604      	mov	r4, r0
    d62e:	4650      	mov	r0, sl
    d630:	f7ff ff61 	bl	d4f6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d634:	4605      	mov	r5, r0
    d636:	ea54 0005 	orrs.w	r0, r4, r5
    d63a:	d100      	bne.n	d63e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d63c:	2600      	movs	r6, #0
    d63e:	f7fc ff4b 	bl	a4d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d642:	ea10 0f09 	tst.w	r0, r9
    d646:	d100      	bne.n	d64a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d648:	2400      	movs	r4, #0
    d64a:	f7fc ff45 	bl	a4d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d64e:	ea10 0f0a 	tst.w	r0, sl
    d652:	d100      	bne.n	d656 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d654:	2500      	movs	r5, #0
    d656:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d65a:	42a0      	cmp	r0, r4
    d65c:	d100      	bne.n	d660 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d65e:	2400      	movs	r4, #0
    d660:	f888 4000 	strb.w	r4, [r8]
    d664:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d668:	42a8      	cmp	r0, r5
    d66a:	d100      	bne.n	d66e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d66c:	2500      	movs	r5, #0
    d66e:	f888 5001 	strb.w	r5, [r8, #1]
    d672:	b974      	cbnz	r4, d692 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d674:	b96d      	cbnz	r5, d692 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d676:	4658      	mov	r0, fp
    d678:	f000 f91c 	bl	d8b4 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d67c:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    d680:	1a40      	subs	r0, r0, r1
    d682:	b200      	sxth	r0, r0
    d684:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d688:	4288      	cmp	r0, r1
    d68a:	dc01      	bgt.n	d690 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d68c:	2800      	cmp	r0, #0
    d68e:	dc00      	bgt.n	d692 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d690:	2600      	movs	r6, #0
    d692:	4630      	mov	r0, r6
    d694:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d698 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d698:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d69c:	4348      	muls	r0, r1
    d69e:	4770      	bx	lr

0000d6a0 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d6a0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d6a4:	fb10 f001 	smulbb	r0, r0, r1
    d6a8:	4770      	bx	lr

0000d6aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d6aa:	b510      	push	{r4, lr}
    d6ac:	2300      	movs	r3, #0
    d6ae:	461a      	mov	r2, r3
    d6b0:	e003      	b.n	d6ba <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d6b2:	5c84      	ldrb	r4, [r0, r2]
    d6b4:	4323      	orrs	r3, r4
    d6b6:	1c52      	adds	r2, r2, #1
    d6b8:	b2d2      	uxtb	r2, r2
    d6ba:	428a      	cmp	r2, r1
    d6bc:	d3f9      	bcc.n	d6b2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d6be:	b10b      	cbz	r3, d6c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d6c0:	2000      	movs	r0, #0
    d6c2:	bd10      	pop	{r4, pc}
    d6c4:	2001      	movs	r0, #1
    d6c6:	bd10      	pop	{r4, pc}

0000d6c8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d6c8:	b510      	push	{r4, lr}
    d6ca:	4604      	mov	r4, r0
    d6cc:	f890 0020 	ldrb.w	r0, [r0, #32]
    d6d0:	b108      	cbz	r0, d6d6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d6d2:	2825      	cmp	r0, #37	; 0x25
    d6d4:	d901      	bls.n	d6da <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d6d6:	2012      	movs	r0, #18
    d6d8:	bd10      	pop	{r4, pc}
    d6da:	b12a      	cbz	r2, d6e8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    d6dc:	7d60      	ldrb	r0, [r4, #21]
    d6de:	b128      	cbz	r0, d6ec <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    d6e0:	2801      	cmp	r0, #1
    d6e2:	d009      	beq.n	d6f8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    d6e4:	201f      	movs	r0, #31
    d6e6:	bd10      	pop	{r4, pc}
    d6e8:	2000      	movs	r0, #0
    d6ea:	bd10      	pop	{r4, pc}
    d6ec:	4620      	mov	r0, r4
    d6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d6f2:	4611      	mov	r1, r2
    d6f4:	f7f8 bba2 	b.w	5e3c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    d6f8:	88a2      	ldrh	r2, [r4, #4]
    d6fa:	6909      	ldr	r1, [r1, #16]
    d6fc:	f104 0015 	add.w	r0, r4, #21
    d700:	f7f8 fb48 	bl	5d94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d704:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    d708:	e7ee      	b.n	d6e8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000d70a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d70a:	b530      	push	{r4, r5, lr}
    d70c:	1c42      	adds	r2, r0, #1
    d70e:	428a      	cmp	r2, r1
    d710:	d004      	beq.n	d71c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    d712:	680a      	ldr	r2, [r1, #0]
    d714:	f8c0 2001 	str.w	r2, [r0, #1]
    d718:	7909      	ldrb	r1, [r1, #4]
    d71a:	7141      	strb	r1, [r0, #5]
    d71c:	7941      	ldrb	r1, [r0, #5]
    d71e:	f001 011f 	and.w	r1, r1, #31
    d722:	7141      	strb	r1, [r0, #5]
    d724:	2100      	movs	r1, #0
    d726:	72c1      	strb	r1, [r0, #11]
    d728:	1843      	adds	r3, r0, r1
    d72a:	1c49      	adds	r1, r1, #1
    d72c:	785c      	ldrb	r4, [r3, #1]
    d72e:	b2c9      	uxtb	r1, r1
    d730:	f004 0201 	and.w	r2, r4, #1
    d734:	0864      	lsrs	r4, r4, #1
    d736:	f004 0501 	and.w	r5, r4, #1
    d73a:	4415      	add	r5, r2
    d73c:	0862      	lsrs	r2, r4, #1
    d73e:	f002 0401 	and.w	r4, r2, #1
    d742:	442c      	add	r4, r5
    d744:	0852      	lsrs	r2, r2, #1
    d746:	f002 0501 	and.w	r5, r2, #1
    d74a:	442c      	add	r4, r5
    d74c:	0852      	lsrs	r2, r2, #1
    d74e:	f002 0501 	and.w	r5, r2, #1
    d752:	442c      	add	r4, r5
    d754:	0852      	lsrs	r2, r2, #1
    d756:	f002 0501 	and.w	r5, r2, #1
    d75a:	442c      	add	r4, r5
    d75c:	0852      	lsrs	r2, r2, #1
    d75e:	f002 0501 	and.w	r5, r2, #1
    d762:	442c      	add	r4, r5
    d764:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    d768:	719a      	strb	r2, [r3, #6]
    d76a:	7ac3      	ldrb	r3, [r0, #11]
    d76c:	2905      	cmp	r1, #5
    d76e:	441a      	add	r2, r3
    d770:	72c2      	strb	r2, [r0, #11]
    d772:	d3d9      	bcc.n	d728 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    d774:	bd30      	pop	{r4, r5, pc}
    d776:	b570      	push	{r4, r5, r6, lr}
    d778:	f8d0 201f 	ldr.w	r2, [r0, #31]
    d77c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d780:	f012 0fff 	tst.w	r2, #255	; 0xff
    d784:	f023 031f 	bic.w	r3, r3, #31
    d788:	d108      	bne.n	d79c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d78a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    d78e:	b92c      	cbnz	r4, d79c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d790:	f3c2 4407 	ubfx	r4, r2, #16, #8
    d794:	b914      	cbnz	r4, d79c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d796:	0e12      	lsrs	r2, r2, #24
    d798:	d100      	bne.n	d79c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d79a:	b35b      	cbz	r3, d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d79c:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d7a0:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d7a4:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d7a8:	7d83      	ldrb	r3, [r0, #22]
    d7aa:	b141      	cbz	r1, d7be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d7ac:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d7b0:	d905      	bls.n	d7be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d7b2:	f640 5107 	movw	r1, #3335	; 0xd07
    d7b6:	428a      	cmp	r2, r1
    d7b8:	d801      	bhi.n	d7be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d7ba:	2101      	movs	r1, #1
    d7bc:	e000      	b.n	d7c0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    d7be:	2100      	movs	r1, #0
    d7c0:	7846      	ldrb	r6, [r0, #1]
    d7c2:	2e22      	cmp	r6, #34	; 0x22
    d7c4:	d116      	bne.n	d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7c6:	b959      	cbnz	r1, d7e0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    d7c8:	1f91      	subs	r1, r2, #6
    d7ca:	f640 467a 	movw	r6, #3194	; 0xc7a
    d7ce:	42b1      	cmp	r1, r6
    d7d0:	d810      	bhi.n	d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7d2:	b17b      	cbz	r3, d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7d4:	2b08      	cmp	r3, #8
    d7d6:	d80d      	bhi.n	d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7d8:	4293      	cmp	r3, r2
    d7da:	d20b      	bcs.n	d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7dc:	4294      	cmp	r4, r2
    d7de:	d809      	bhi.n	d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7e0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d7e4:	d206      	bcs.n	d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7e6:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d7ea:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d7ee:	d801      	bhi.n	d7f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7f0:	2001      	movs	r0, #1
    d7f2:	bd70      	pop	{r4, r5, r6, pc}
    d7f4:	2000      	movs	r0, #0
    d7f6:	bd70      	pop	{r4, r5, r6, pc}

0000d7f8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d7f8:	b570      	push	{r4, r5, r6, lr}
    d7fa:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d7fe:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d802:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d806:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d80a:	88c0      	ldrh	r0, [r0, #6]
    d80c:	b131      	cbz	r1, d81c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d80e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d812:	d903      	bls.n	d81c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d814:	f640 5107 	movw	r1, #3335	; 0xd07
    d818:	428a      	cmp	r2, r1
    d81a:	d90b      	bls.n	d834 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d81c:	1f91      	subs	r1, r2, #6
    d81e:	f640 467a 	movw	r6, #3194	; 0xc7a
    d822:	42b1      	cmp	r1, r6
    d824:	d80e      	bhi.n	d844 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d826:	b16b      	cbz	r3, d844 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d828:	2b08      	cmp	r3, #8
    d82a:	d80b      	bhi.n	d844 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d82c:	4293      	cmp	r3, r2
    d82e:	d209      	bcs.n	d844 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d830:	4294      	cmp	r4, r2
    d832:	d807      	bhi.n	d844 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d834:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d838:	d204      	bcs.n	d844 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d83a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d83e:	d801      	bhi.n	d844 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d840:	2001      	movs	r0, #1
    d842:	bd70      	pop	{r4, r5, r6, pc}
    d844:	2000      	movs	r0, #0
    d846:	bd70      	pop	{r4, r5, r6, pc}

0000d848 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d848:	6842      	ldr	r2, [r0, #4]
    d84a:	600a      	str	r2, [r1, #0]
    d84c:	7a00      	ldrb	r0, [r0, #8]
    d84e:	7108      	strb	r0, [r1, #4]
    d850:	4770      	bx	lr

0000d852 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d852:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d856:	4770      	bx	lr

0000d858 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d858:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d85c:	4770      	bx	lr

0000d85e <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d85e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d862:	4770      	bx	lr

0000d864 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d864:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d868:	4770      	bx	lr

0000d86a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d86a:	8980      	ldrh	r0, [r0, #12]
    d86c:	8008      	strh	r0, [r1, #0]
    d86e:	4770      	bx	lr

0000d870 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d870:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d874:	6008      	str	r0, [r1, #0]
    d876:	4770      	bx	lr

0000d878 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d878:	6842      	ldr	r2, [r0, #4]
    d87a:	600a      	str	r2, [r1, #0]
    d87c:	6880      	ldr	r0, [r0, #8]
    d87e:	6048      	str	r0, [r1, #4]
    d880:	4770      	bx	lr

0000d882 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d882:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d886:	600a      	str	r2, [r1, #0]
    d888:	6840      	ldr	r0, [r0, #4]
    d88a:	6048      	str	r0, [r1, #4]
    d88c:	4770      	bx	lr

0000d88e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d88e:	6842      	ldr	r2, [r0, #4]
    d890:	600a      	str	r2, [r1, #0]
    d892:	6880      	ldr	r0, [r0, #8]
    d894:	6048      	str	r0, [r1, #4]
    d896:	4770      	bx	lr

0000d898 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d898:	7800      	ldrb	r0, [r0, #0]
    d89a:	f000 0003 	and.w	r0, r0, #3
    d89e:	4770      	bx	lr

0000d8a0 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d8a0:	7900      	ldrb	r0, [r0, #4]
    d8a2:	4770      	bx	lr

0000d8a4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d8a4:	8880      	ldrh	r0, [r0, #4]
    d8a6:	4770      	bx	lr

0000d8a8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d8a8:	88c0      	ldrh	r0, [r0, #6]
    d8aa:	4770      	bx	lr

0000d8ac <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d8ac:	8900      	ldrh	r0, [r0, #8]
    d8ae:	4770      	bx	lr

0000d8b0 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d8b0:	8940      	ldrh	r0, [r0, #10]
    d8b2:	4770      	bx	lr

0000d8b4 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d8b4:	88c0      	ldrh	r0, [r0, #6]
    d8b6:	4770      	bx	lr

0000d8b8 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d8b8:	7940      	ldrb	r0, [r0, #5]
    d8ba:	4770      	bx	lr

0000d8bc <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d8bc:	7900      	ldrb	r0, [r0, #4]
    d8be:	4770      	bx	lr

0000d8c0 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d8c0:	7900      	ldrb	r0, [r0, #4]
    d8c2:	4770      	bx	lr

0000d8c4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d8c4:	8901      	ldrh	r1, [r0, #8]
    d8c6:	291b      	cmp	r1, #27
    d8c8:	d30c      	bcc.n	d8e4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d8ca:	8941      	ldrh	r1, [r0, #10]
    d8cc:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d8d0:	4291      	cmp	r1, r2
    d8d2:	d307      	bcc.n	d8e4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d8d4:	8881      	ldrh	r1, [r0, #4]
    d8d6:	291b      	cmp	r1, #27
    d8d8:	d304      	bcc.n	d8e4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d8da:	88c0      	ldrh	r0, [r0, #6]
    d8dc:	4290      	cmp	r0, r2
    d8de:	d301      	bcc.n	d8e4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d8e0:	2001      	movs	r0, #1
    d8e2:	4770      	bx	lr
    d8e4:	2000      	movs	r0, #0
    d8e6:	4770      	bx	lr

0000d8e8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d8e8:	b510      	push	{r4, lr}
    d8ea:	29fb      	cmp	r1, #251	; 0xfb
    d8ec:	d904      	bls.n	d8f8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d8ee:	f44f 61af 	mov.w	r1, #1400	; 0x578
    d8f2:	202a      	movs	r0, #42	; 0x2a
    d8f4:	f7f6 fa76 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8f8:	7041      	strb	r1, [r0, #1]
    d8fa:	bd10      	pop	{r4, pc}

0000d8fc <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d8fc:	7901      	ldrb	r1, [r0, #4]
    d8fe:	0749      	lsls	r1, r1, #29
    d900:	d004      	beq.n	d90c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d902:	7940      	ldrb	r0, [r0, #5]
    d904:	0740      	lsls	r0, r0, #29
    d906:	d001      	beq.n	d90c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d908:	2001      	movs	r0, #1
    d90a:	4770      	bx	lr
    d90c:	2000      	movs	r0, #0
    d90e:	4770      	bx	lr

0000d910 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d910:	7900      	ldrb	r0, [r0, #4]
    d912:	4770      	bx	lr

0000d914 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d914:	7940      	ldrb	r0, [r0, #5]
    d916:	4770      	bx	lr

0000d918 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d918:	7101      	strb	r1, [r0, #4]
    d91a:	4770      	bx	lr

0000d91c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d91c:	7141      	strb	r1, [r0, #5]
    d91e:	4770      	bx	lr

0000d920 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d920:	b510      	push	{r4, lr}
    d922:	2a1b      	cmp	r2, #27
    d924:	d904      	bls.n	d930 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d926:	f240 31df 	movw	r1, #991	; 0x3df
    d92a:	202a      	movs	r0, #42	; 0x2a
    d92c:	f7f6 fa5a 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d930:	7042      	strb	r2, [r0, #1]
    d932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d936:	1cc0      	adds	r0, r0, #3
    d938:	f7fe bac3 	b.w	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d93c <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d93c:	6809      	ldr	r1, [r1, #0]
    d93e:	60c1      	str	r1, [r0, #12]
    d940:	4770      	bx	lr

0000d942 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d942:	680a      	ldr	r2, [r1, #0]
    d944:	6042      	str	r2, [r0, #4]
    d946:	6849      	ldr	r1, [r1, #4]
    d948:	6081      	str	r1, [r0, #8]
    d94a:	4770      	bx	lr

0000d94c <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d94c:	680a      	ldr	r2, [r1, #0]
    d94e:	6042      	str	r2, [r0, #4]
    d950:	6849      	ldr	r1, [r1, #4]
    d952:	6081      	str	r1, [r0, #8]
    d954:	4770      	bx	lr

0000d956 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d956:	680a      	ldr	r2, [r1, #0]
    d958:	6042      	str	r2, [r0, #4]
    d95a:	6849      	ldr	r1, [r1, #4]
    d95c:	6081      	str	r1, [r0, #8]
    d95e:	4770      	bx	lr

0000d960 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d960:	7802      	ldrb	r2, [r0, #0]
    d962:	f001 0103 	and.w	r1, r1, #3
    d966:	f022 0203 	bic.w	r2, r2, #3
    d96a:	430a      	orrs	r2, r1
    d96c:	7002      	strb	r2, [r0, #0]
    d96e:	4770      	bx	lr

0000d970 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d970:	7101      	strb	r1, [r0, #4]
    d972:	0a09      	lsrs	r1, r1, #8
    d974:	7141      	strb	r1, [r0, #5]
    d976:	4770      	bx	lr

0000d978 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d978:	7181      	strb	r1, [r0, #6]
    d97a:	0a09      	lsrs	r1, r1, #8
    d97c:	71c1      	strb	r1, [r0, #7]
    d97e:	4770      	bx	lr

0000d980 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d980:	7201      	strb	r1, [r0, #8]
    d982:	0a09      	lsrs	r1, r1, #8
    d984:	7241      	strb	r1, [r0, #9]
    d986:	4770      	bx	lr

0000d988 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d988:	7281      	strb	r1, [r0, #10]
    d98a:	0a09      	lsrs	r1, r1, #8
    d98c:	72c1      	strb	r1, [r0, #11]
    d98e:	4770      	bx	lr

0000d990 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d990:	7802      	ldrb	r2, [r0, #0]
    d992:	f002 020f 	and.w	r2, r2, #15
    d996:	2a03      	cmp	r2, #3
    d998:	d003      	beq.n	d9a2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    d99a:	2a05      	cmp	r2, #5
    d99c:	d104      	bne.n	d9a8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    d99e:	f7ff beea 	b.w	d776 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    d9a2:	7840      	ldrb	r0, [r0, #1]
    d9a4:	280c      	cmp	r0, #12
    d9a6:	d001      	beq.n	d9ac <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    d9a8:	2000      	movs	r0, #0
    d9aa:	4770      	bx	lr
    d9ac:	2001      	movs	r0, #1
    d9ae:	4770      	bx	lr

0000d9b0 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d9b0:	b570      	push	{r4, r5, r6, lr}
    d9b2:	4614      	mov	r4, r2
    d9b4:	4605      	mov	r5, r0
    d9b6:	2a1f      	cmp	r2, #31
    d9b8:	d903      	bls.n	d9c2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d9ba:	21b2      	movs	r1, #178	; 0xb2
    d9bc:	202a      	movs	r0, #42	; 0x2a
    d9be:	f7f6 fa11 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9c2:	f105 0009 	add.w	r0, r5, #9
    d9c6:	f7fe fa7c 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9ca:	1da4      	adds	r4, r4, #6
    d9cc:	706c      	strb	r4, [r5, #1]
    d9ce:	bd70      	pop	{r4, r5, r6, pc}

0000d9d0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    d9d0:	b510      	push	{r4, lr}
    d9d2:	7802      	ldrb	r2, [r0, #0]
    d9d4:	f001 030f 	and.w	r3, r1, #15
    d9d8:	f022 020f 	bic.w	r2, r2, #15
    d9dc:	431a      	orrs	r2, r3
    d9de:	7002      	strb	r2, [r0, #0]
    d9e0:	2907      	cmp	r1, #7
    d9e2:	d20c      	bcs.n	d9fe <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    d9e4:	e8df f001 	tbb	[pc, r1]
    d9e8:	06040604 	.word	0x06040604
    d9ec:	00040804 	.word	0x00040804
    d9f0:	2106      	movs	r1, #6
    d9f2:	e002      	b.n	d9fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d9f4:	210c      	movs	r1, #12
    d9f6:	e000      	b.n	d9fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d9f8:	2122      	movs	r1, #34	; 0x22
    d9fa:	7041      	strb	r1, [r0, #1]
    d9fc:	bd10      	pop	{r4, pc}
    d9fe:	216e      	movs	r1, #110	; 0x6e
    da00:	202a      	movs	r0, #42	; 0x2a
    da02:	f7f6 f9ef 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000da06 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    da06:	680a      	ldr	r2, [r1, #0]
    da08:	f840 2f09 	str.w	r2, [r0, #9]!
    da0c:	8889      	ldrh	r1, [r1, #4]
    da0e:	8081      	strh	r1, [r0, #4]
    da10:	4770      	bx	lr

0000da12 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    da12:	7802      	ldrb	r2, [r0, #0]
    da14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    da18:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    da1c:	7002      	strb	r2, [r0, #0]
    da1e:	4770      	bx	lr

0000da20 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    da20:	680a      	ldr	r2, [r1, #0]
    da22:	f840 2f03 	str.w	r2, [r0, #3]!
    da26:	8889      	ldrh	r1, [r1, #4]
    da28:	8081      	strh	r1, [r0, #4]
    da2a:	4770      	bx	lr

0000da2c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    da2c:	7802      	ldrb	r2, [r0, #0]
    da2e:	2340      	movs	r3, #64	; 0x40
    da30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    da34:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    da38:	430a      	orrs	r2, r1
    da3a:	7002      	strb	r2, [r0, #0]
    da3c:	4770      	bx	lr

0000da3e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    da3e:	b570      	push	{r4, r5, r6, lr}
    da40:	4614      	mov	r4, r2
    da42:	4605      	mov	r5, r0
    da44:	2a1f      	cmp	r2, #31
    da46:	d903      	bls.n	da50 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    da48:	21d4      	movs	r1, #212	; 0xd4
    da4a:	202a      	movs	r0, #42	; 0x2a
    da4c:	f7f6 f9ca 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da50:	f105 0009 	add.w	r0, r5, #9
    da54:	f7fe fa35 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da58:	1da4      	adds	r4, r4, #6
    da5a:	706c      	strb	r4, [r5, #1]
    da5c:	bd70      	pop	{r4, r5, r6, pc}

0000da5e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    da5e:	2101      	movs	r1, #1
    da60:	f000 b853 	b.w	db0a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000da64 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    da64:	6841      	ldr	r1, [r0, #4]
    da66:	2200      	movs	r2, #0
    da68:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    da6c:	2b00      	cmp	r3, #0
    da6e:	d004      	beq.n	da7a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    da70:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    da74:	6840      	ldr	r0, [r0, #4]
    da76:	f000 bc40 	b.w	e2fa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    da7a:	4770      	bx	lr
    da7c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    da80:	460e      	mov	r6, r1
    da82:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    da86:	4617      	mov	r7, r2
    da88:	39ff      	subs	r1, #255	; 0xff
    da8a:	d014      	beq.n	dab6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    da8c:	8030      	strh	r0, [r6, #0]
    da8e:	2100      	movs	r1, #0
    da90:	7171      	strb	r1, [r6, #5]
    da92:	f7f6 fdcf 	bl	4634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    da96:	4604      	mov	r4, r0
    da98:	f7ff f855 	bl	cb46 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    da9c:	0005      	movs	r5, r0
    da9e:	d00a      	beq.n	dab6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    daa0:	4620      	mov	r0, r4
    daa2:	4629      	mov	r1, r5
    daa4:	aa01      	add	r2, sp, #4
    daa6:	f7ff f871 	bl	cb8c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    daaa:	8070      	strh	r0, [r6, #2]
    daac:	b130      	cbz	r0, dabc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    daae:	28fb      	cmp	r0, #251	; 0xfb
    dab0:	d906      	bls.n	dac0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    dab2:	21c9      	movs	r1, #201	; 0xc9
    dab4:	e026      	b.n	db04 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dab6:	2000      	movs	r0, #0
    dab8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dabc:	21c8      	movs	r1, #200	; 0xc8
    dabe:	e021      	b.n	db04 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dac0:	9801      	ldr	r0, [sp, #4]
    dac2:	f7ff fee9 	bl	d898 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    dac6:	2801      	cmp	r0, #1
    dac8:	d003      	beq.n	dad2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    daca:	2802      	cmp	r0, #2
    dacc:	d001      	beq.n	dad2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    dace:	21d8      	movs	r1, #216	; 0xd8
    dad0:	e018      	b.n	db04 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dad2:	7130      	strb	r0, [r6, #4]
    dad4:	4629      	mov	r1, r5
    dad6:	8873      	ldrh	r3, [r6, #2]
    dad8:	2503      	movs	r5, #3
    dada:	4620      	mov	r0, r4
    dadc:	463a      	mov	r2, r7
    dade:	9500      	str	r5, [sp, #0]
    dae0:	f7fe ff23 	bl	c92a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    dae4:	4620      	mov	r0, r4
    dae6:	60b7      	str	r7, [r6, #8]
    dae8:	f7fe ffdc 	bl	caa4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    daec:	b138      	cbz	r0, dafe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    daee:	2100      	movs	r1, #0
    daf0:	4620      	mov	r0, r4
    daf2:	460a      	mov	r2, r1
    daf4:	f7ff f928 	bl	cd48 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    daf8:	b118      	cbz	r0, db02 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    dafa:	2001      	movs	r0, #1
    dafc:	e7dc      	b.n	dab8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    dafe:	21e8      	movs	r1, #232	; 0xe8
    db00:	e000      	b.n	db04 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    db02:	21ed      	movs	r1, #237	; 0xed
    db04:	202b      	movs	r0, #43	; 0x2b
    db06:	f7f6 f96d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db0a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    db0e:	4604      	mov	r4, r0
    db10:	460e      	mov	r6, r1
    db12:	2000      	movs	r0, #0
    db14:	f7f6 fb5e 	bl	41d4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    db18:	4605      	mov	r5, r0
    db1a:	2000      	movs	r0, #0
    db1c:	b916      	cbnz	r6, db24 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    db1e:	2001      	movs	r0, #1
    db20:	f7f6 fb58 	bl	41d4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    db24:	2600      	movs	r6, #0
    db26:	46b0      	mov	r8, r6
    db28:	182f      	adds	r7, r5, r0
    db2a:	e017      	b.n	db5c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    db2c:	8820      	ldrh	r0, [r4, #0]
    db2e:	1c40      	adds	r0, r0, #1
    db30:	b280      	uxth	r0, r0
    db32:	8020      	strh	r0, [r4, #0]
    db34:	42b8      	cmp	r0, r7
    db36:	d302      	bcc.n	db3e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    db38:	4640      	mov	r0, r8
    db3a:	f8a4 8000 	strh.w	r8, [r4]
    db3e:	b280      	uxth	r0, r0
    db40:	42a8      	cmp	r0, r5
    db42:	d304      	bcc.n	db4e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    db44:	42b8      	cmp	r0, r7
    db46:	d202      	bcs.n	db4e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    db48:	2000      	movs	r0, #0
    db4a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    db4e:	4669      	mov	r1, sp
    db50:	f7ff fc0e 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    db54:	2800      	cmp	r0, #0
    db56:	d0f8      	beq.n	db4a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    db58:	1c76      	adds	r6, r6, #1
    db5a:	b2f6      	uxtb	r6, r6
    db5c:	42b7      	cmp	r7, r6
    db5e:	d8e5      	bhi.n	db2c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    db60:	f64f 70ff 	movw	r0, #65535	; 0xffff
    db64:	8020      	strh	r0, [r4, #0]
    db66:	2012      	movs	r0, #18
    db68:	e7ef      	b.n	db4a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000db6a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    db6a:	b570      	push	{r4, r5, r6, lr}
    db6c:	8050      	strh	r0, [r2, #2]
    db6e:	890c      	ldrh	r4, [r1, #8]
    db70:	8094      	strh	r4, [r2, #4]
    db72:	898b      	ldrh	r3, [r1, #12]
    db74:	80d3      	strh	r3, [r2, #6]
    db76:	8948      	ldrh	r0, [r1, #10]
    db78:	8110      	strh	r0, [r2, #8]
    db7a:	89cd      	ldrh	r5, [r1, #14]
    db7c:	8155      	strh	r5, [r2, #10]
    db7e:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    db80:	42ae      	cmp	r6, r5
    db82:	d108      	bne.n	db96 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    db84:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    db86:	4285      	cmp	r5, r0
    db88:	d105      	bne.n	db96 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    db8a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    db8c:	429d      	cmp	r5, r3
    db8e:	d102      	bne.n	db96 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    db90:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    db92:	42a3      	cmp	r3, r4
    db94:	d001      	beq.n	db9a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    db96:	2301      	movs	r3, #1
    db98:	e000      	b.n	db9c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    db9a:	2300      	movs	r3, #0
    db9c:	7313      	strb	r3, [r2, #12]
    db9e:	8548      	strh	r0, [r1, #42]	; 0x2a
    dba0:	8950      	ldrh	r0, [r2, #10]
    dba2:	85c8      	strh	r0, [r1, #46]	; 0x2e
    dba4:	8890      	ldrh	r0, [r2, #4]
    dba6:	8588      	strh	r0, [r1, #44]	; 0x2c
    dba8:	88d0      	ldrh	r0, [r2, #6]
    dbaa:	8608      	strh	r0, [r1, #48]	; 0x30
    dbac:	2001      	movs	r0, #1
    dbae:	7010      	strb	r0, [r2, #0]
    dbb0:	bd70      	pop	{r4, r5, r6, pc}

0000dbb2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    dbb2:	b510      	push	{r4, lr}
    dbb4:	888c      	ldrh	r4, [r1, #4]
    dbb6:	890a      	ldrh	r2, [r1, #8]
    dbb8:	884b      	ldrh	r3, [r1, #2]
    dbba:	88c9      	ldrh	r1, [r1, #6]
    dbbc:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    dbc0:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    dbc4:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    dbc8:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    dbcc:	bd10      	pop	{r4, pc}

0000dbce <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    dbce:	b570      	push	{r4, r5, r6, lr}
    dbd0:	4615      	mov	r5, r2
    dbd2:	460c      	mov	r4, r1
    dbd4:	f000 f8c7 	bl	dd66 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dbd8:	3096      	adds	r0, #150	; 0x96
    dbda:	4428      	add	r0, r5
    dbdc:	42a0      	cmp	r0, r4
    dbde:	d801      	bhi.n	dbe4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    dbe0:	1a20      	subs	r0, r4, r0
    dbe2:	bd70      	pop	{r4, r5, r6, pc}
    dbe4:	2000      	movs	r0, #0
    dbe6:	bd70      	pop	{r4, r5, r6, pc}

0000dbe8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    dbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbec:	4604      	mov	r4, r0
    dbee:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    dbf0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    dbf2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    dbf6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    dbfa:	4285      	cmp	r5, r0
    dbfc:	d300      	bcc.n	dc00 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    dbfe:	4605      	mov	r5, r0
    dc00:	4620      	mov	r0, r4
    dc02:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    dc06:	f000 f89e 	bl	dd46 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dc0a:	4601      	mov	r1, r0
    dc0c:	86e5      	strh	r5, [r4, #54]	; 0x36
    dc0e:	8761      	strh	r1, [r4, #58]	; 0x3a
    dc10:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    dc12:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dc16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    dc18:	4680      	mov	r8, r0
    dc1a:	42aa      	cmp	r2, r5
    dc1c:	d200      	bcs.n	dc20 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    dc1e:	462a      	mov	r2, r5
    dc20:	428b      	cmp	r3, r1
    dc22:	d200      	bcs.n	dc26 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    dc24:	460b      	mov	r3, r1
    dc26:	8202      	strh	r2, [r0, #16]
    dc28:	f8a8 3012 	strh.w	r3, [r8, #18]
    dc2c:	42bd      	cmp	r5, r7
    dc2e:	d101      	bne.n	dc34 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    dc30:	42b1      	cmp	r1, r6
    dc32:	d001      	beq.n	dc38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    dc34:	2001      	movs	r0, #1
    dc36:	e000      	b.n	dc3a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    dc38:	2000      	movs	r0, #0
    dc3a:	4681      	mov	r9, r0
    dc3c:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    dc40:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    dc44:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    dc46:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    dc48:	4285      	cmp	r5, r0
    dc4a:	d300      	bcc.n	dc4e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    dc4c:	4605      	mov	r5, r0
    dc4e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    dc52:	4620      	mov	r0, r4
    dc54:	f000 f87f 	bl	dd56 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    dc58:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    dc5c:	2902      	cmp	r1, #2
    dc5e:	d108      	bne.n	dc72 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    dc60:	42af      	cmp	r7, r5
    dc62:	d200      	bcs.n	dc66 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    dc64:	463d      	mov	r5, r7
    dc66:	4286      	cmp	r6, r0
    dc68:	d200      	bcs.n	dc6c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    dc6a:	4630      	mov	r0, r6
    dc6c:	2100      	movs	r1, #0
    dc6e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    dc72:	f8a8 5008 	strh.w	r5, [r8, #8]
    dc76:	f8a8 000c 	strh.w	r0, [r8, #12]
    dc7a:	42bd      	cmp	r5, r7
    dc7c:	d101      	bne.n	dc82 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    dc7e:	42b0      	cmp	r0, r6
    dc80:	d001      	beq.n	dc86 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    dc82:	2001      	movs	r0, #1
    dc84:	e000      	b.n	dc88 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    dc86:	2000      	movs	r0, #0
    dc88:	ea40 0009 	orr.w	r0, r0, r9
    dc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dc90 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    dc90:	6840      	ldr	r0, [r0, #4]
    dc92:	4770      	bx	lr

0000dc94 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc98:	4616      	mov	r6, r2
    dc9a:	460f      	mov	r7, r1
    dc9c:	4604      	mov	r4, r0
    dc9e:	f000 f862 	bl	dd66 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dca2:	4605      	mov	r5, r0
    dca4:	463a      	mov	r2, r7
    dca6:	68e1      	ldr	r1, [r4, #12]
    dca8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dcaa:	f000 f847 	bl	dd3c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    dcae:	19a9      	adds	r1, r5, r6
    dcb0:	4281      	cmp	r1, r0
    dcb2:	d300      	bcc.n	dcb6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    dcb4:	4608      	mov	r0, r1
    dcb6:	6320      	str	r0, [r4, #48]	; 0x30
    dcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dcbc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    dcbc:	221b      	movs	r2, #27
    dcbe:	8402      	strh	r2, [r0, #32]
    dcc0:	8382      	strh	r2, [r0, #28]
    dcc2:	82c2      	strh	r2, [r0, #22]
    dcc4:	8282      	strh	r2, [r0, #20]
    dcc6:	8142      	strh	r2, [r0, #10]
    dcc8:	8202      	strh	r2, [r0, #16]
    dcca:	8102      	strh	r2, [r0, #8]
    dccc:	8542      	strh	r2, [r0, #42]	; 0x2a
    dcce:	8582      	strh	r2, [r0, #44]	; 0x2c
    dcd0:	8482      	strh	r2, [r0, #36]	; 0x24
    dcd2:	2900      	cmp	r1, #0
    dcd4:	d10a      	bne.n	dcec <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    dcd6:	f44f 71a4 	mov.w	r1, #328	; 0x148
    dcda:	8441      	strh	r1, [r0, #34]	; 0x22
    dcdc:	83c1      	strh	r1, [r0, #30]
    dcde:	8341      	strh	r1, [r0, #26]
    dce0:	8301      	strh	r1, [r0, #24]
    dce2:	81c1      	strh	r1, [r0, #14]
    dce4:	8241      	strh	r1, [r0, #18]
    dce6:	8181      	strh	r1, [r0, #12]
    dce8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    dcea:	8601      	strh	r1, [r0, #48]	; 0x30
    dcec:	4770      	bx	lr

0000dcee <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    dcee:	6800      	ldr	r0, [r0, #0]
    dcf0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    dcf4:	4290      	cmp	r0, r2
    dcf6:	d903      	bls.n	dd00 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    dcf8:	1a40      	subs	r0, r0, r1
    dcfa:	389c      	subs	r0, #156	; 0x9c
    dcfc:	0840      	lsrs	r0, r0, #1
    dcfe:	4770      	bx	lr
    dd00:	2000      	movs	r0, #0
    dd02:	4770      	bx	lr

0000dd04 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    dd04:	b510      	push	{r4, lr}
    dd06:	9c02      	ldr	r4, [sp, #8]
    dd08:	8281      	strh	r1, [r0, #20]
    dd0a:	82c2      	strh	r2, [r0, #22]
    dd0c:	8303      	strh	r3, [r0, #24]
    dd0e:	8344      	strh	r4, [r0, #26]
    dd10:	bd10      	pop	{r4, pc}

0000dd12 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    dd12:	8050      	strh	r0, [r2, #2]
    dd14:	8a88      	ldrh	r0, [r1, #20]
    dd16:	8090      	strh	r0, [r2, #4]
    dd18:	8ac8      	ldrh	r0, [r1, #22]
    dd1a:	80d0      	strh	r0, [r2, #6]
    dd1c:	8b08      	ldrh	r0, [r1, #24]
    dd1e:	8110      	strh	r0, [r2, #8]
    dd20:	8b48      	ldrh	r0, [r1, #26]
    dd22:	8150      	strh	r0, [r2, #10]
    dd24:	2001      	movs	r0, #1
    dd26:	7010      	strb	r0, [r2, #0]
    dd28:	4770      	bx	lr
    dd2a:	2902      	cmp	r1, #2
    dd2c:	d003      	beq.n	dd36 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    dd2e:	00c0      	lsls	r0, r0, #3
    dd30:	3070      	adds	r0, #112	; 0x70
    dd32:	b280      	uxth	r0, r0
    dd34:	4770      	bx	lr
    dd36:	0080      	lsls	r0, r0, #2
    dd38:	303c      	adds	r0, #60	; 0x3c
    dd3a:	e7fa      	b.n	dd32 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    dd3c:	4288      	cmp	r0, r1
    dd3e:	d300      	bcc.n	dd42 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    dd40:	4608      	mov	r0, r1
    dd42:	1a80      	subs	r0, r0, r2
    dd44:	4770      	bx	lr
    dd46:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    dd4a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    dd4e:	4281      	cmp	r1, r0
    dd50:	d200      	bcs.n	dd54 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    dd52:	4608      	mov	r0, r1
    dd54:	4770      	bx	lr
    dd56:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    dd5a:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    dd5e:	4281      	cmp	r1, r0
    dd60:	d200      	bcs.n	dd64 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    dd62:	4608      	mov	r0, r1
    dd64:	4770      	bx	lr
    dd66:	2196      	movs	r1, #150	; 0x96
    dd68:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    dd6c:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    dd70:	f000 b800 	b.w	dd74 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    dd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd78:	460d      	mov	r5, r1
    dd7a:	4606      	mov	r6, r0
    dd7c:	4698      	mov	r8, r3
    dd7e:	4617      	mov	r7, r2
    dd80:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    dd82:	4611      	mov	r1, r2
    dd84:	f7ff ffd1 	bl	dd2a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    dd88:	4604      	mov	r4, r0
    dd8a:	4639      	mov	r1, r7
    dd8c:	4630      	mov	r0, r6
    dd8e:	f7ff ffe2 	bl	dd56 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    dd92:	42a0      	cmp	r0, r4
    dd94:	d200      	bcs.n	dd98 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    dd96:	4604      	mov	r4, r0
    dd98:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    dd9a:	4641      	mov	r1, r8
    dd9c:	f7ff ffc5 	bl	dd2a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    dda0:	4607      	mov	r7, r0
    dda2:	4641      	mov	r1, r8
    dda4:	4630      	mov	r0, r6
    dda6:	f7ff ffce 	bl	dd46 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ddaa:	42b8      	cmp	r0, r7
    ddac:	d300      	bcc.n	ddb0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    ddae:	4638      	mov	r0, r7
    ddb0:	4420      	add	r0, r4
    ddb2:	4428      	add	r0, r5
    ddb4:	1d80      	adds	r0, r0, #6
    ddb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddba:	2801      	cmp	r0, #1
    ddbc:	d102      	bne.n	ddc4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    ddbe:	7948      	ldrb	r0, [r1, #5]
    ddc0:	0980      	lsrs	r0, r0, #6
    ddc2:	d001      	beq.n	ddc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    ddc4:	2000      	movs	r0, #0
    ddc6:	4770      	bx	lr
    ddc8:	2001      	movs	r0, #1
    ddca:	4770      	bx	lr
    ddcc:	2801      	cmp	r0, #1
    ddce:	d106      	bne.n	ddde <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    ddd0:	7948      	ldrb	r0, [r1, #5]
    ddd2:	2101      	movs	r1, #1
    ddd4:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ddd8:	d101      	bne.n	ddde <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    ddda:	2001      	movs	r0, #1
    dddc:	4770      	bx	lr
    ddde:	2000      	movs	r0, #0
    dde0:	4770      	bx	lr
    dde2:	2802      	cmp	r0, #2
    dde4:	d003      	beq.n	ddee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    dde6:	2803      	cmp	r0, #3
    dde8:	d001      	beq.n	ddee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    ddea:	2000      	movs	r0, #0
    ddec:	4770      	bx	lr
    ddee:	2001      	movs	r0, #1
    ddf0:	4770      	bx	lr

0000ddf2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    ddf2:	b510      	push	{r4, lr}
    ddf4:	4604      	mov	r4, r0
    ddf6:	7c00      	ldrb	r0, [r0, #16]
    ddf8:	f7ff fff3 	bl	dde2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    ddfc:	b148      	cbz	r0, de12 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ddfe:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    de02:	f104 0150 	add.w	r1, r4, #80	; 0x50
    de06:	f7ff fa70 	bl	d2ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    de0a:	2808      	cmp	r0, #8
    de0c:	d001      	beq.n	de12 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    de0e:	2001      	movs	r0, #1
    de10:	bd10      	pop	{r4, pc}
    de12:	7c20      	ldrb	r0, [r4, #16]
    de14:	b118      	cbz	r0, de1e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    de16:	2802      	cmp	r0, #2
    de18:	d001      	beq.n	de1e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    de1a:	7de0      	ldrb	r0, [r4, #23]
    de1c:	bd10      	pop	{r4, pc}
    de1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de22:	2000      	movs	r0, #0
    de24:	f7f6 bf0a 	b.w	4c3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000de28 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    de28:	b508      	push	{r3, lr}
    de2a:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    de2e:	f88d 1000 	strb.w	r1, [sp]
    de32:	9900      	ldr	r1, [sp, #0]
    de34:	9100      	str	r1, [sp, #0]
    de36:	f89d 1000 	ldrb.w	r1, [sp]
    de3a:	b109      	cbz	r1, de40 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    de3c:	2001      	movs	r0, #1
    de3e:	bd08      	pop	{r3, pc}
    de40:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    de44:	f88d 0000 	strb.w	r0, [sp]
    de48:	9800      	ldr	r0, [sp, #0]
    de4a:	9000      	str	r0, [sp, #0]
    de4c:	f89d 0000 	ldrb.w	r0, [sp]
    de50:	2000      	movs	r0, #0
    de52:	bd08      	pop	{r3, pc}

0000de54 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    de54:	20ff      	movs	r0, #255	; 0xff
    de56:	7008      	strb	r0, [r1, #0]
    de58:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    de5a:	f7ff b99c 	b.w	d196 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000de5e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    de5e:	b51c      	push	{r2, r3, r4, lr}
    de60:	4604      	mov	r4, r0
    de62:	22d4      	movs	r2, #212	; 0xd4
    de64:	2100      	movs	r1, #0
    de66:	f7fe f8a6 	bl	bfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de6a:	20ff      	movs	r0, #255	; 0xff
    de6c:	7020      	strb	r0, [r4, #0]
    de6e:	207f      	movs	r0, #127	; 0x7f
    de70:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    de74:	2013      	movs	r0, #19
    de76:	8060      	strh	r0, [r4, #2]
    de78:	f7f6 fc9c 	bl	47b4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    de7c:	4601      	mov	r1, r0
    de7e:	62e0      	str	r0, [r4, #44]	; 0x2c
    de80:	2200      	movs	r2, #0
    de82:	4668      	mov	r0, sp
    de84:	f7ff f8f2 	bl	d06c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    de88:	2200      	movs	r2, #0
    de8a:	2101      	movs	r1, #1
    de8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    de8e:	f7ff f962 	bl	d156 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    de92:	2204      	movs	r2, #4
    de94:	4668      	mov	r0, sp
    de96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    de98:	f7ff f8e8 	bl	d06c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    de9c:	2200      	movs	r2, #0
    de9e:	4611      	mov	r1, r2
    dea0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dea2:	f7ff f958 	bl	d156 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    dea6:	2000      	movs	r0, #0
    dea8:	73a0      	strb	r0, [r4, #14]
    deaa:	f104 0020 	add.w	r0, r4, #32
    deae:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    deb2:	f000 b962 	b.w	e17a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000deb6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    deb6:	7880      	ldrb	r0, [r0, #2]
    deb8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    debc:	b108      	cbz	r0, dec2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    debe:	2000      	movs	r0, #0
    dec0:	4770      	bx	lr
    dec2:	201f      	movs	r0, #31
    dec4:	4770      	bx	lr

0000dec6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    dec6:	f7f8 bfb7 	b.w	6e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>

0000deca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    deca:	6880      	ldr	r0, [r0, #8]
    decc:	4770      	bx	lr

0000dece <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    dece:	2001      	movs	r0, #1
    ded0:	4770      	bx	lr

0000ded2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ded2:	b510      	push	{r4, lr}
    ded4:	4604      	mov	r4, r0
    ded6:	3020      	adds	r0, #32
    ded8:	f000 f90f 	bl	e0fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    dedc:	8861      	ldrh	r1, [r4, #2]
    dede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dee2:	2228      	movs	r2, #40	; 0x28
    dee4:	f7f9 b986 	b.w	71f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000dee8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    dee8:	2200      	movs	r2, #0
    deea:	6282      	str	r2, [r0, #40]	; 0x28
    deec:	8843      	ldrh	r3, [r0, #2]
    deee:	2b1d      	cmp	r3, #29
    def0:	d001      	beq.n	def6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    def2:	7341      	strb	r1, [r0, #13]
    def4:	4770      	bx	lr
    def6:	7342      	strb	r2, [r0, #13]
    def8:	4770      	bx	lr

0000defa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    defa:	b510      	push	{r4, lr}
    defc:	2400      	movs	r4, #0
    defe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    df00:	f7ff f917 	bl	d132 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    df04:	b100      	cbz	r0, df08 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    df06:	2001      	movs	r0, #1
    df08:	4384      	bics	r4, r0
    df0a:	f084 0001 	eor.w	r0, r4, #1
    df0e:	bd10      	pop	{r4, pc}

0000df10 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    df10:	2000      	movs	r0, #0
    df12:	4770      	bx	lr

0000df14 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    df14:	7880      	ldrb	r0, [r0, #2]
    df16:	f000 0001 	and.w	r0, r0, #1
    df1a:	4770      	bx	lr

0000df1c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    df1c:	7880      	ldrb	r0, [r0, #2]
    df1e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    df22:	4770      	bx	lr

0000df24 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    df24:	2001      	movs	r0, #1
    df26:	4770      	bx	lr

0000df28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    df28:	7880      	ldrb	r0, [r0, #2]
    df2a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    df2e:	4770      	bx	lr

0000df30 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    df30:	f990 000e 	ldrsb.w	r0, [r0, #14]
    df34:	4770      	bx	lr

0000df36 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    df36:	7800      	ldrb	r0, [r0, #0]
    df38:	28ff      	cmp	r0, #255	; 0xff
    df3a:	d001      	beq.n	df40 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    df3c:	2001      	movs	r0, #1
    df3e:	4770      	bx	lr
    df40:	2000      	movs	r0, #0
    df42:	4770      	bx	lr

0000df44 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    df44:	680a      	ldr	r2, [r1, #0]
    df46:	f840 2f11 	str.w	r2, [r0, #17]!
    df4a:	8889      	ldrh	r1, [r1, #4]
    df4c:	8081      	strh	r1, [r0, #4]
    df4e:	2101      	movs	r1, #1
    df50:	7181      	strb	r1, [r0, #6]
    df52:	4770      	bx	lr

0000df54 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    df54:	7b00      	ldrb	r0, [r0, #12]
    df56:	4770      	bx	lr

0000df58 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    df58:	2001      	movs	r0, #1
    df5a:	4770      	bx	lr

0000df5c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    df5c:	61c1      	str	r1, [r0, #28]
    df5e:	4770      	bx	lr

0000df60 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    df60:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    df64:	4770      	bx	lr

0000df66 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    df66:	b570      	push	{r4, r5, r6, lr}
    df68:	4604      	mov	r4, r0
    df6a:	7880      	ldrb	r0, [r0, #2]
    df6c:	2501      	movs	r5, #1
    df6e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    df72:	b138      	cbz	r0, df84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    df74:	233c      	movs	r3, #60	; 0x3c
    df76:	22ff      	movs	r2, #255	; 0xff
    df78:	4620      	mov	r0, r4
    df7a:	69e1      	ldr	r1, [r4, #28]
    df7c:	f7f8 ff88 	bl	6e90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    df80:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    df84:	78a0      	ldrb	r0, [r4, #2]
    df86:	07c0      	lsls	r0, r0, #31
    df88:	f7fb fef6 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    df8c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    df90:	bd70      	pop	{r4, r5, r6, pc}

0000df92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    df92:	7bc0      	ldrb	r0, [r0, #15]
    df94:	2800      	cmp	r0, #0
    df96:	d000      	beq.n	df9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    df98:	2001      	movs	r0, #1
    df9a:	4770      	bx	lr
    df9c:	b510      	push	{r4, lr}
    df9e:	f7ff f9a4 	bl	d2ea <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    dfa2:	4604      	mov	r4, r0
    dfa4:	f7f7 fcf2 	bl	598c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    dfa8:	b138      	cbz	r0, dfba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    dfaa:	4620      	mov	r0, r4
    dfac:	f7f7 fc26 	bl	57fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    dfb0:	b118      	cbz	r0, dfba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    dfb2:	2110      	movs	r1, #16
    dfb4:	f7ff fb79 	bl	d6aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    dfb8:	b108      	cbz	r0, dfbe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    dfba:	2000      	movs	r0, #0
    dfbc:	bd10      	pop	{r4, pc}
    dfbe:	2001      	movs	r0, #1
    dfc0:	bd10      	pop	{r4, pc}
    dfc2:	2101      	movs	r1, #1
    dfc4:	f7f8 bbc2 	b.w	674c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dfc8:	2101      	movs	r1, #1
    dfca:	f7f8 bbbf 	b.w	674c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dfce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfd2:	4604      	mov	r4, r0
    dfd4:	2700      	movs	r7, #0
    dfd6:	704f      	strb	r7, [r1, #1]
    dfd8:	2011      	movs	r0, #17
    dfda:	460d      	mov	r5, r1
    dfdc:	7008      	strb	r0, [r1, #0]
    dfde:	2220      	movs	r2, #32
    dfe0:	f104 0166 	add.w	r1, r4, #102	; 0x66
    dfe4:	1d28      	adds	r0, r5, #4
    dfe6:	f7fd ff6c 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dfea:	2601      	movs	r6, #1
    dfec:	722e      	strb	r6, [r5, #8]
    dfee:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    dff2:	7928      	ldrb	r0, [r5, #4]
    dff4:	2800      	cmp	r0, #0
    dff6:	d111      	bne.n	e01c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    dff8:	88e8      	ldrh	r0, [r5, #6]
    dffa:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    dffe:	69e0      	ldr	r0, [r4, #28]
    e000:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    e004:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    e008:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    e00c:	8800      	ldrh	r0, [r0, #0]
    e00e:	f7f6 fb11 	bl	4634 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e012:	f7fe fe4b 	bl	ccac <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e016:	69e0      	ldr	r0, [r4, #28]
    e018:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    e01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e024:	4604      	mov	r4, r0
    e026:	460f      	mov	r7, r1
    e028:	7e40      	ldrb	r0, [r0, #25]
    e02a:	f7f7 fba7 	bl	577c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e02e:	4606      	mov	r6, r0
    e030:	7e20      	ldrb	r0, [r4, #24]
    e032:	f104 0549 	add.w	r5, r4, #73	; 0x49
    e036:	b120      	cbz	r0, e042 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e038:	b11e      	cbz	r6, e042 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e03a:	7e60      	ldrb	r0, [r4, #25]
    e03c:	f7f7 fb92 	bl	5764 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e040:	b1a0      	cbz	r0, e06c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    e042:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    e046:	2800      	cmp	r0, #0
    e048:	d024      	beq.n	e094 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e04a:	7ea0      	ldrb	r0, [r4, #26]
    e04c:	2800      	cmp	r0, #0
    e04e:	d021      	beq.n	e094 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e050:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    e054:	4629      	mov	r1, r5
    e056:	f7ff feb9 	bl	ddcc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    e05a:	b1a8      	cbz	r0, e088 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    e05c:	f7f7 fb7e 	bl	575c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e060:	463a      	mov	r2, r7
    e062:	4629      	mov	r1, r5
    e064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e068:	f7ff b8d7 	b.w	d21a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e06c:	2001      	movs	r0, #1
    e06e:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    e072:	463a      	mov	r2, r7
    e074:	4629      	mov	r1, r5
    e076:	4630      	mov	r0, r6
    e078:	f7ff f8cf 	bl	d21a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e07c:	7e61      	ldrb	r1, [r4, #25]
    e07e:	4628      	mov	r0, r5
    e080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e084:	f7f7 bb86 	b.w	5794 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e088:	4639      	mov	r1, r7
    e08a:	4628      	mov	r0, r5
    e08c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e090:	f7ff b8b2 	b.w	d1f8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e098:	b510      	push	{r4, lr}
    e09a:	4604      	mov	r4, r0
    e09c:	4608      	mov	r0, r1
    e09e:	f7fd f81f 	bl	b0e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e0a2:	7921      	ldrb	r1, [r4, #4]
    e0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0a8:	2025      	movs	r0, #37	; 0x25
    e0aa:	f001 bd69 	b.w	fb80 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e0ae:	b510      	push	{r4, lr}
    e0b0:	4604      	mov	r4, r0
    e0b2:	3026      	adds	r0, #38	; 0x26
    e0b4:	f7fc ffd4 	bl	b060 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e0b8:	2800      	cmp	r0, #0
    e0ba:	d102      	bne.n	e0c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    e0bc:	207f      	movs	r0, #127	; 0x7f
    e0be:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e0c2:	bd10      	pop	{r4, pc}
    e0c4:	7802      	ldrb	r2, [r0, #0]
    e0c6:	2320      	movs	r3, #32
    e0c8:	f022 0220 	bic.w	r2, r2, #32
    e0cc:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e0d0:	430a      	orrs	r2, r1
    e0d2:	7002      	strb	r2, [r0, #0]
    e0d4:	4770      	bx	lr

0000e0d6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e0d6:	b570      	push	{r4, r5, r6, lr}
    e0d8:	7001      	strb	r1, [r0, #0]
    e0da:	7042      	strb	r2, [r0, #1]
    e0dc:	4614      	mov	r4, r2
    e0de:	460d      	mov	r5, r1
    e0e0:	7880      	ldrb	r0, [r0, #2]
    e0e2:	f000 f87f 	bl	e1e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e0e6:	fb10 f005 	smulbb	r0, r0, r5
    e0ea:	4360      	muls	r0, r4
    e0ec:	28ff      	cmp	r0, #255	; 0xff
    e0ee:	d303      	bcc.n	e0f8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e0f0:	215c      	movs	r1, #92	; 0x5c
    e0f2:	202e      	movs	r0, #46	; 0x2e
    e0f4:	f7f5 fe76 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0f8:	bd70      	pop	{r4, r5, r6, pc}

0000e0fa <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e0fa:	b510      	push	{r4, lr}
    e0fc:	4604      	mov	r4, r0
    e0fe:	7880      	ldrb	r0, [r0, #2]
    e100:	f000 f870 	bl	e1e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e104:	7861      	ldrb	r1, [r4, #1]
    e106:	7822      	ldrb	r2, [r4, #0]
    e108:	fb11 f102 	smulbb	r1, r1, r2
    e10c:	4348      	muls	r0, r1
    e10e:	b2c0      	uxtb	r0, r0
    e110:	bd10      	pop	{r4, pc}

0000e112 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e112:	b510      	push	{r4, lr}
    e114:	4604      	mov	r4, r0
    e116:	f000 f84d 	bl	e1b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e11a:	7961      	ldrb	r1, [r4, #5]
    e11c:	1c49      	adds	r1, r1, #1
    e11e:	b2c9      	uxtb	r1, r1
    e120:	7161      	strb	r1, [r4, #5]
    e122:	7862      	ldrb	r2, [r4, #1]
    e124:	4291      	cmp	r1, r2
    e126:	d10b      	bne.n	e140 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e128:	2200      	movs	r2, #0
    e12a:	7162      	strb	r2, [r4, #5]
    e12c:	78e1      	ldrb	r1, [r4, #3]
    e12e:	4301      	orrs	r1, r0
    e130:	70e1      	strb	r1, [r4, #3]
    e132:	78a3      	ldrb	r3, [r4, #2]
    e134:	4299      	cmp	r1, r3
    e136:	d103      	bne.n	e140 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e138:	70e2      	strb	r2, [r4, #3]
    e13a:	7921      	ldrb	r1, [r4, #4]
    e13c:	1c49      	adds	r1, r1, #1
    e13e:	7121      	strb	r1, [r4, #4]
    e140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e144:	f000 b825 	b.w	e192 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e148 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e148:	7081      	strb	r1, [r0, #2]
    e14a:	4770      	bx	lr

0000e14c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e14c:	b570      	push	{r4, r5, r6, lr}
    e14e:	4604      	mov	r4, r0
    e150:	7880      	ldrb	r0, [r0, #2]
    e152:	f000 f847 	bl	e1e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e156:	7861      	ldrb	r1, [r4, #1]
    e158:	fb11 f500 	smulbb	r5, r1, r0
    e15c:	78e0      	ldrb	r0, [r4, #3]
    e15e:	f000 f841 	bl	e1e4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e162:	7861      	ldrb	r1, [r4, #1]
    e164:	7962      	ldrb	r2, [r4, #5]
    e166:	fb10 2001 	smlabb	r0, r0, r1, r2
    e16a:	7821      	ldrb	r1, [r4, #0]
    e16c:	7922      	ldrb	r2, [r4, #4]
    e16e:	1a89      	subs	r1, r1, r2
    e170:	fb11 f105 	smulbb	r1, r1, r5
    e174:	1a08      	subs	r0, r1, r0
    e176:	b2c0      	uxtb	r0, r0
    e178:	bd70      	pop	{r4, r5, r6, pc}

0000e17a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e17a:	2100      	movs	r1, #0
    e17c:	6001      	str	r1, [r0, #0]
    e17e:	8081      	strh	r1, [r0, #4]
    e180:	2101      	movs	r1, #1
    e182:	7041      	strb	r1, [r0, #1]
    e184:	7001      	strb	r1, [r0, #0]
    e186:	4770      	bx	lr

0000e188 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e188:	2100      	movs	r1, #0
    e18a:	70c1      	strb	r1, [r0, #3]
    e18c:	7141      	strb	r1, [r0, #5]
    e18e:	7101      	strb	r1, [r0, #4]
    e190:	4770      	bx	lr
    e192:	b510      	push	{r4, lr}
    e194:	2801      	cmp	r0, #1
    e196:	d007      	beq.n	e1a8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e198:	2802      	cmp	r0, #2
    e19a:	d007      	beq.n	e1ac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e19c:	2804      	cmp	r0, #4
    e19e:	d007      	beq.n	e1b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e1a0:	2139      	movs	r1, #57	; 0x39
    e1a2:	202e      	movs	r0, #46	; 0x2e
    e1a4:	f7f5 fe1e 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1a8:	2025      	movs	r0, #37	; 0x25
    e1aa:	bd10      	pop	{r4, pc}
    e1ac:	2026      	movs	r0, #38	; 0x26
    e1ae:	bd10      	pop	{r4, pc}
    e1b0:	2027      	movs	r0, #39	; 0x27
    e1b2:	bd10      	pop	{r4, pc}
    e1b4:	4601      	mov	r1, r0
    e1b6:	2000      	movs	r0, #0
    e1b8:	788a      	ldrb	r2, [r1, #2]
    e1ba:	07d3      	lsls	r3, r2, #31
    e1bc:	d002      	beq.n	e1c4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e1be:	78cb      	ldrb	r3, [r1, #3]
    e1c0:	07db      	lsls	r3, r3, #31
    e1c2:	d006      	beq.n	e1d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e1c4:	0793      	lsls	r3, r2, #30
    e1c6:	d506      	bpl.n	e1d6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e1c8:	78cb      	ldrb	r3, [r1, #3]
    e1ca:	079b      	lsls	r3, r3, #30
    e1cc:	d403      	bmi.n	e1d6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e1ce:	2002      	movs	r0, #2
    e1d0:	4770      	bx	lr
    e1d2:	2001      	movs	r0, #1
    e1d4:	4770      	bx	lr
    e1d6:	0752      	lsls	r2, r2, #29
    e1d8:	d5fc      	bpl.n	e1d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e1da:	78c9      	ldrb	r1, [r1, #3]
    e1dc:	0749      	lsls	r1, r1, #29
    e1de:	d4f9      	bmi.n	e1d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e1e0:	2004      	movs	r0, #4
    e1e2:	4770      	bx	lr
    e1e4:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e1e8:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e1ec:	4411      	add	r1, r2
    e1ee:	f000 0001 	and.w	r0, r0, #1
    e1f2:	4408      	add	r0, r1
    e1f4:	4770      	bx	lr

0000e1f6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e1f6:	f240 315a 	movw	r1, #858	; 0x35a
    e1fa:	4348      	muls	r0, r1
    e1fc:	4770      	bx	lr

0000e1fe <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e1fe:	f240 20ef 	movw	r0, #751	; 0x2ef
    e202:	4770      	bx	lr
    e204:	041c020e 	.word	0x041c020e
    e208:	0c600630 	.word	0x0c600630
    e20c:	06b4035a 	.word	0x06b4035a
    e210:	0bf505c5 	.word	0x0bf505c5
    e214:	01a31225 	.word	0x01a31225
    e218:	05bf03b1 	.word	0x05bf03b1
    e21c:	064902ef 	.word	0x064902ef
    e220:	09a3      	.short	0x09a3

0000e222 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e222:	b510      	push	{r4, lr}
    e224:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    e228:	b109      	cbz	r1, e22e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e22a:	2000      	movs	r0, #0
    e22c:	bd10      	pop	{r4, pc}
    e22e:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    e232:	b949      	cbnz	r1, e248 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e234:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    e238:	b131      	cbz	r1, e248 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e23a:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    e23e:	428a      	cmp	r2, r1
    e240:	d902      	bls.n	e248 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e242:	f7ff fe90 	bl	df66 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e246:	e7f0      	b.n	e22a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e248:	2001      	movs	r0, #1
    e24a:	bd10      	pop	{r4, pc}

0000e24c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e24c:	b510      	push	{r4, lr}
    e24e:	b131      	cbz	r1, e25e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e250:	2901      	cmp	r1, #1
    e252:	d008      	beq.n	e266 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e254:	f240 718a 	movw	r1, #1930	; 0x78a
    e258:	2030      	movs	r0, #48	; 0x30
    e25a:	f7f5 fdc3 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e262:	f000 b9d4 	b.w	e60e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x314>
    e266:	2100      	movs	r1, #0
    e268:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    e26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e270:	f000 b93b 	b.w	e4ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>

0000e274 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    e274:	b510      	push	{r4, lr}
    e276:	4604      	mov	r4, r0
    e278:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    e27c:	2800      	cmp	r0, #0
    e27e:	d019      	beq.n	e2b4 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    e280:	2001      	movs	r0, #1
    e282:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    e286:	4601      	mov	r1, r0
    e288:	4620      	mov	r0, r4
    e28a:	f7ff fe69 	bl	df60 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e28e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e292:	b170      	cbz	r0, e2b2 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    e294:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    e298:	f7f3 fe58 	bl	1f4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e29c:	7820      	ldrb	r0, [r4, #0]
    e29e:	f7f3 ffa3 	bl	21e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e2a2:	f814 09a0 	ldrb.w	r0, [r4], #-160
    e2a6:	f7f3 ff7d 	bl	21a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e2aa:	b120      	cbz	r0, e2b6 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    e2ac:	2000      	movs	r0, #0
    e2ae:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    e2b2:	2000      	movs	r0, #0
    e2b4:	bd10      	pop	{r4, pc}
    e2b6:	f240 210f 	movw	r1, #527	; 0x20f
    e2ba:	2030      	movs	r0, #48	; 0x30
    e2bc:	f7f5 fd92 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e2c0 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    e2c0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e2c4:	4770      	bx	lr

0000e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    e2c6:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    e2ca:	4770      	bx	lr

0000e2cc <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    e2cc:	b50e      	push	{r1, r2, r3, lr}
    e2ce:	4669      	mov	r1, sp
    e2d0:	2001      	movs	r0, #1
    e2d2:	f7fe fe14 	bl	cefe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e2d6:	b138      	cbz	r0, e2e8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    e2d8:	f44f 71a1 	mov.w	r1, #322	; 0x142
    e2dc:	2030      	movs	r0, #48	; 0x30
    e2de:	f7f5 fd81 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2e2:	9802      	ldr	r0, [sp, #8]
    e2e4:	f7ff ffc6 	bl	e274 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    e2e8:	4668      	mov	r0, sp
    e2ea:	f7f5 ffc1 	bl	4270 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e2ee:	2800      	cmp	r0, #0
    e2f0:	d0f7      	beq.n	e2e2 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    e2f2:	f7f9 f8fb 	bl	74ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    e2f6:	2000      	movs	r0, #0
    e2f8:	bd0e      	pop	{r1, r2, r3, pc}

0000e2fa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    e2fa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e2fc:	4604      	mov	r4, r0
    e2fe:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    e302:	2800      	cmp	r0, #0
    e304:	d153      	bne.n	e3ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e306:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e30a:	2803      	cmp	r0, #3
    e30c:	d14f      	bne.n	e3ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e30e:	f7fd fc63 	bl	bbd8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e312:	4601      	mov	r1, r0
    e314:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e318:	f7f3 f9a0 	bl	165c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e31c:	2800      	cmp	r0, #0
    e31e:	dd46      	ble.n	e3ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e320:	68e1      	ldr	r1, [r4, #12]
    e322:	b111      	cbz	r1, e32a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    e324:	fbb0 f0f1 	udiv	r0, r0, r1
    e328:	e000      	b.n	e32c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    e32a:	2000      	movs	r0, #0
    e32c:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e330:	1c40      	adds	r0, r0, #1
    e332:	4408      	add	r0, r1
    e334:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    e338:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e33c:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    e340:	1a08      	subs	r0, r1, r0
    e342:	b200      	sxth	r0, r0
    e344:	2800      	cmp	r0, #0
    e346:	dd32      	ble.n	e3ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e348:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e34c:	f7f3 fdfe 	bl	1f4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e350:	2800      	cmp	r0, #0
    e352:	d02c      	beq.n	e3ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e354:	2001      	movs	r0, #1
    e356:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    e35a:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    e35e:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    e362:	ae01      	add	r6, sp, #4
    e364:	1a40      	subs	r0, r0, r1
    e366:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e36a:	1e40      	subs	r0, r0, #1
    e36c:	4408      	add	r0, r1
    e36e:	b285      	uxth	r5, r0
    e370:	e017      	b.n	e3a2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    e372:	9600      	str	r6, [sp, #0]
    e374:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    e378:	2300      	movs	r3, #0
    e37a:	2201      	movs	r2, #1
    e37c:	4620      	mov	r0, r4
    e37e:	f7f9 f985 	bl	768c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    e382:	2800      	cmp	r0, #0
    e384:	d013      	beq.n	e3ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e386:	2801      	cmp	r0, #1
    e388:	d004      	beq.n	e394 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    e38a:	f240 610c 	movw	r1, #1548	; 0x60c
    e38e:	2030      	movs	r0, #48	; 0x30
    e390:	f7f5 fd28 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e394:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e398:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e39c:	4408      	add	r0, r1
    e39e:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    e3a2:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e3a6:	1a28      	subs	r0, r5, r0
    e3a8:	b200      	sxth	r0, r0
    e3aa:	2800      	cmp	r0, #0
    e3ac:	dae1      	bge.n	e372 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    e3ae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e3b0:	2000      	movs	r0, #0
    e3b2:	4770      	bx	lr
    e3b4:	b570      	push	{r4, r5, r6, lr}
    e3b6:	4604      	mov	r4, r0
    e3b8:	2601      	movs	r6, #1
    e3ba:	f000 f90c 	bl	e5d6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    e3be:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e3c2:	2000      	movs	r0, #0
    e3c4:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    e3c8:	2001      	movs	r0, #1
    e3ca:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    e3ce:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    e3d2:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    e3d6:	b160      	cbz	r0, e3f2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    e3d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e3dc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e3e0:	f7f3 f90a 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e3e4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e3e8:	2100      	movs	r1, #0
    e3ea:	4628      	mov	r0, r5
    e3ec:	f7ff f8a3 	bl	d536 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e3f0:	e00f      	b.n	e412 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    e3f2:	4620      	mov	r0, r4
    e3f4:	f7ff fd69 	bl	deca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e3f8:	4606      	mov	r6, r0
    e3fa:	4631      	mov	r1, r6
    e3fc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e400:	f7f3 f8fa 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e404:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e408:	4631      	mov	r1, r6
    e40a:	4628      	mov	r0, r5
    e40c:	f7ff f893 	bl	d536 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e410:	1c46      	adds	r6, r0, #1
    e412:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e416:	1c41      	adds	r1, r0, #1
    e418:	290a      	cmp	r1, #10
    e41a:	d202      	bcs.n	e422 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    e41c:	4430      	add	r0, r6
    e41e:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    e422:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    e426:	b130      	cbz	r0, e436 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    e428:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e42c:	1c40      	adds	r0, r0, #1
    e42e:	280a      	cmp	r0, #10
    e430:	d301      	bcc.n	e436 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    e432:	2002      	movs	r0, #2
    e434:	e000      	b.n	e438 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    e436:	2003      	movs	r0, #3
    e438:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    e43c:	2100      	movs	r1, #0
    e43e:	4620      	mov	r0, r4
    e440:	f000 f822 	bl	e488 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18e>
    e444:	b120      	cbz	r0, e450 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x156>
    e446:	4620      	mov	r0, r4
    e448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e44c:	f000 b80d 	b.w	e46a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    e450:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e454:	4629      	mov	r1, r5
    e456:	f000 f8bc 	bl	e5d2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    e45a:	2800      	cmp	r0, #0
    e45c:	d104      	bne.n	e468 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16e>
    e45e:	f240 61ad 	movw	r1, #1709	; 0x6ad
    e462:	2030      	movs	r0, #48	; 0x30
    e464:	f7f5 fcbe 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e468:	bd70      	pop	{r4, r5, r6, pc}
    e46a:	b510      	push	{r4, lr}
    e46c:	4604      	mov	r4, r0
    e46e:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    e472:	f7f3 fe97 	bl	21a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e476:	2000      	movs	r0, #0
    e478:	7520      	strb	r0, [r4, #20]
    e47a:	bd10      	pop	{r4, pc}
    e47c:	b510      	push	{r4, lr}
    e47e:	f7ff fd28 	bl	ded2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e482:	f500 7084 	add.w	r0, r0, #264	; 0x108
    e486:	bd10      	pop	{r4, pc}
    e488:	b570      	push	{r4, r5, r6, lr}
    e48a:	4604      	mov	r4, r0
    e48c:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    e490:	460d      	mov	r5, r1
    e492:	b108      	cbz	r0, e498 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    e494:	2001      	movs	r0, #1
    e496:	bd70      	pop	{r4, r5, r6, pc}
    e498:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    e49c:	b1a8      	cbz	r0, e4ca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d0>
    e49e:	4620      	mov	r0, r4
    e4a0:	f7ff fd13 	bl	deca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e4a4:	4405      	add	r5, r0
    e4a6:	4620      	mov	r0, r4
    e4a8:	f7ff ffe8 	bl	e47c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    e4ac:	1941      	adds	r1, r0, r5
    e4ae:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    e4b2:	4288      	cmp	r0, r1
    e4b4:	d206      	bcs.n	e4c4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ca>
    e4b6:	2001      	movs	r0, #1
    e4b8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    e4bc:	4620      	mov	r0, r4
    e4be:	f7ff fd52 	bl	df66 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e4c2:	e7e7      	b.n	e494 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19a>
    e4c4:	1b40      	subs	r0, r0, r5
    e4c6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    e4ca:	2000      	movs	r0, #0
    e4cc:	bd70      	pop	{r4, r5, r6, pc}
    e4ce:	b510      	push	{r4, lr}
    e4d0:	4604      	mov	r4, r0
    e4d2:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    e4d6:	f000 f9a3 	bl	e820 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x526>
    e4da:	4602      	mov	r2, r0
    e4dc:	4620      	mov	r0, r4
    e4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4e2:	f240 1117 	movw	r1, #279	; 0x117
    e4e6:	f7ff bbd5 	b.w	dc94 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e4ea:	b510      	push	{r4, lr}
    e4ec:	f7fc fc4e 	bl	ad8c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4f4:	f7f3 bfac 	b.w	2450 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4fc:	4604      	mov	r4, r0
    e4fe:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    e502:	2800      	cmp	r0, #0
    e504:	d051      	beq.n	e5aa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b0>
    e506:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e50a:	2803      	cmp	r0, #3
    e50c:	d14d      	bne.n	e5aa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b0>
    e50e:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    e512:	f001 fa7e 	bl	fa12 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    e516:	4605      	mov	r5, r0
    e518:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    e51c:	f7f8 ffd8 	bl	74d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    e520:	4428      	add	r0, r5
    e522:	b286      	uxth	r6, r0
    e524:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    e528:	f7f8 ffd2 	bl	74d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    e52c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    e530:	fa1f f880 	uxth.w	r8, r0
    e534:	4648      	mov	r0, r9
    e536:	f001 fb05 	bl	fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e53a:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    e53e:	1a0d      	subs	r5, r1, r0
    e540:	4648      	mov	r0, r9
    e542:	f001 fb0d 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e546:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    e54a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e54e:	fbb0 f0fa 	udiv	r0, r0, sl
    e552:	1a2d      	subs	r5, r5, r0
    e554:	4648      	mov	r0, r9
    e556:	f001 faf5 	bl	fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e55a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    e55e:	1a0f      	subs	r7, r1, r0
    e560:	4648      	mov	r0, r9
    e562:	f001 fafd 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e566:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e56a:	4401      	add	r1, r0
    e56c:	fbb1 f0fa 	udiv	r0, r1, sl
    e570:	1a39      	subs	r1, r7, r0
    e572:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    e576:	4370      	muls	r0, r6
    e578:	fbb0 f2f8 	udiv	r2, r0, r8
    e57c:	2029      	movs	r0, #41	; 0x29
    e57e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    e582:	3260      	adds	r2, #96	; 0x60
    e584:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    e588:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    e58c:	42a9      	cmp	r1, r5
    e58e:	d801      	bhi.n	e594 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x29a>
    e590:	4285      	cmp	r5, r0
    e592:	d901      	bls.n	e598 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x29e>
    e594:	f7f5 f8a0 	bl	36d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    e598:	4631      	mov	r1, r6
    e59a:	68e0      	ldr	r0, [r4, #12]
    e59c:	f7fd fb50 	bl	bc40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    e5a0:	2100      	movs	r1, #0
    e5a2:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    e5a6:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    e5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5ae:	b570      	push	{r4, r5, r6, lr}
    e5b0:	460c      	mov	r4, r1
    e5b2:	4605      	mov	r5, r0
    e5b4:	f001 fad4 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e5b8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e5bc:	4408      	add	r0, r1
    e5be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e5c2:	fbb0 f6f1 	udiv	r6, r0, r1
    e5c6:	4628      	mov	r0, r5
    e5c8:	f001 fabc 	bl	fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e5cc:	4430      	add	r0, r6
    e5ce:	4420      	add	r0, r4
    e5d0:	bd70      	pop	{r4, r5, r6, pc}
    e5d2:	f7f3 b98b 	b.w	18ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e5d6:	b510      	push	{r4, lr}
    e5d8:	4604      	mov	r4, r0
    e5da:	f7ff fca3 	bl	df24 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e5de:	b1a0      	cbz	r0, e60a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x310>
    e5e0:	4620      	mov	r0, r4
    e5e2:	f7ff fc97 	bl	df14 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e5e6:	b918      	cbnz	r0, e5f0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f6>
    e5e8:	4620      	mov	r0, r4
    e5ea:	f7ff fc9d 	bl	df28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e5ee:	b120      	cbz	r0, e5fa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x300>
    e5f0:	2449      	movs	r4, #73	; 0x49
    e5f2:	f001 fa73 	bl	fadc <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e5f6:	b928      	cbnz	r0, e604 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30a>
    e5f8:	e001      	b.n	e5fe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x304>
    e5fa:	2442      	movs	r4, #66	; 0x42
    e5fc:	e7f9      	b.n	e5f2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f8>
    e5fe:	f001 fa63 	bl	fac8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e602:	b100      	cbz	r0, e606 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30c>
    e604:	1de4      	adds	r4, r4, #7
    e606:	4620      	mov	r0, r4
    e608:	bd10      	pop	{r4, pc}
    e60a:	206b      	movs	r0, #107	; 0x6b
    e60c:	bd10      	pop	{r4, pc}
    e60e:	b570      	push	{r4, r5, r6, lr}
    e610:	4604      	mov	r4, r0
    e612:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    e616:	2500      	movs	r5, #0
    e618:	b118      	cbz	r0, e622 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x328>
    e61a:	2001      	movs	r0, #1
    e61c:	f000 f887 	bl	e72e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x434>
    e620:	4605      	mov	r5, r0
    e622:	4620      	mov	r0, r4
    e624:	f7ff fc51 	bl	deca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e628:	1941      	adds	r1, r0, r5
    e62a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e62e:	34b8      	adds	r4, #184	; 0xb8
    e630:	f7f2 ffe2 	bl	15f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e634:	2600      	movs	r6, #0
    e636:	60e0      	str	r0, [r4, #12]
    e638:	f804 6b0b 	strb.w	r6, [r4], #11
    e63c:	2001      	movs	r0, #1
    e63e:	f804 0901 	strb.w	r0, [r4], #-1
    e642:	2003      	movs	r0, #3
    e644:	f804 09c2 	strb.w	r0, [r4], #-194
    e648:	4620      	mov	r0, r4
    e64a:	f7ff ffc4 	bl	e5d6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    e64e:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e652:	4629      	mov	r1, r5
    e654:	4620      	mov	r0, r4
    e656:	f7ff ff17 	bl	e488 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18e>
    e65a:	b930      	cbnz	r0, e66a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x370>
    e65c:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e660:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e664:	f7ff ffb5 	bl	e5d2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    e668:	b128      	cbz	r0, e676 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x37c>
    e66a:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    e66e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e672:	f7ff bf3a 	b.w	e4ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    e676:	f240 61f6 	movw	r1, #1782	; 0x6f6
    e67a:	2030      	movs	r0, #48	; 0x30
    e67c:	f7f5 fbb2 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e680:	b510      	push	{r4, lr}
    e682:	4604      	mov	r4, r0
    e684:	2000      	movs	r0, #0
    e686:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    e68a:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e68e:	f7f3 fd89 	bl	21a4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e692:	2020      	movs	r0, #32
    e694:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    e698:	bd10      	pop	{r4, pc}
    e69a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e69e:	2500      	movs	r5, #0
    e6a0:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    e6a4:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    e6a8:	4688      	mov	r8, r1
    e6aa:	4604      	mov	r4, r0
    e6ac:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    e6b0:	2701      	movs	r7, #1
    e6b2:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    e6b6:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e6ba:	4639      	mov	r1, r7
    e6bc:	34a0      	adds	r4, #160	; 0xa0
    e6be:	f7f7 fad7 	bl	5c70 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e6c2:	6860      	ldr	r0, [r4, #4]
    e6c4:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    e6c8:	6861      	ldr	r1, [r4, #4]
    e6ca:	7820      	ldrb	r0, [r4, #0]
    e6cc:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    e6d0:	6861      	ldr	r1, [r4, #4]
    e6d2:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    e6d6:	6860      	ldr	r0, [r4, #4]
    e6d8:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    e6dc:	6864      	ldr	r4, [r4, #4]
    e6de:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    e6e2:	2300      	movs	r3, #0
    e6e4:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    e6e8:	461a      	mov	r2, r3
    e6ea:	4619      	mov	r1, r3
    e6ec:	4620      	mov	r0, r4
    e6ee:	9500      	str	r5, [sp, #0]
    e6f0:	f7f8 ffcc 	bl	768c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    e6f4:	b120      	cbz	r0, e700 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x406>
    e6f6:	f240 2123 	movw	r1, #547	; 0x223
    e6fa:	2030      	movs	r0, #48	; 0x30
    e6fc:	f7f5 fb72 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e700:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    e704:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e708:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    e70c:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    e710:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    e714:	f504 7498 	add.w	r4, r4, #304	; 0x130
    e718:	7665      	strb	r5, [r4, #25]
    e71a:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    e71e:	1e40      	subs	r0, r0, #1
    e720:	f824 0cbc 	strh.w	r0, [r4, #-188]
    e724:	86e5      	strh	r5, [r4, #54]	; 0x36
    e726:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e72a:	f7ff bede 	b.w	e4ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    e72e:	b508      	push	{r3, lr}
    e730:	2800      	cmp	r0, #0
    e732:	f04f 0101 	mov.w	r1, #1
    e736:	4668      	mov	r0, sp
    e738:	d002      	beq.n	e740 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x446>
    e73a:	f7f5 fbdf 	bl	3efc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e73e:	e001      	b.n	e744 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x44a>
    e740:	f7f5 fbea 	bl	3f18 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    e744:	f89d 0000 	ldrb.w	r0, [sp]
    e748:	f242 7110 	movw	r1, #10000	; 0x2710
    e74c:	0200      	lsls	r0, r0, #8
    e74e:	fbb0 f2f1 	udiv	r2, r0, r1
    e752:	fb01 0012 	mls	r0, r1, r2, r0
    e756:	bd08      	pop	{r3, pc}
    e758:	b510      	push	{r4, lr}
    e75a:	0004      	movs	r4, r0
    e75c:	d008      	beq.n	e770 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    e75e:	2909      	cmp	r1, #9
    e760:	d25c      	bcs.n	e81c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x522>
    e762:	e8df f001 	tbb	[pc, r1]
    e766:	3607      	.short	0x3607
    e768:	5b3a3e3e 	.word	0x5b3a3e3e
    e76c:	00574a43 	.word	0x00574a43
    e770:	219c      	movs	r1, #156	; 0x9c
    e772:	e050      	b.n	e816 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    e774:	2100      	movs	r1, #0
    e776:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    e77a:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    e77e:	4620      	mov	r0, r4
    e780:	b189      	cbz	r1, e7a6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    e782:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    e786:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    e78a:	428a      	cmp	r2, r1
    e78c:	d106      	bne.n	e79c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4a2>
    e78e:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    e792:	1a51      	subs	r1, r2, r1
    e794:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e798:	4611      	mov	r1, r2
    e79a:	e00d      	b.n	e7b8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4be>
    e79c:	1a51      	subs	r1, r2, r1
    e79e:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e7a2:	b291      	uxth	r1, r2
    e7a4:	e008      	b.n	e7b8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4be>
    e7a6:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e7aa:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    e7ae:	1a89      	subs	r1, r1, r2
    e7b0:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e7b4:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e7b8:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    e7bc:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    e7c0:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    e7c4:	f7f9 fbd8 	bl	7f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    e7c8:	4620      	mov	r0, r4
    e7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7ce:	f7f9 b9c1 	b.w	7b54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x718>
    e7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7d6:	f000 b905 	b.w	e9e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    e7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7de:	f7fc bc85 	b.w	b0ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e7e2:	4620      	mov	r0, r4
    e7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7e8:	f000 b827 	b.w	e83a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x540>
    e7ec:	2001      	movs	r0, #1
    e7ee:	f7f2 fe21 	bl	1434 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    e7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7f6:	f7fe bd45 	b.w	d284 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    e7fa:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e7fe:	2804      	cmp	r0, #4
    e800:	d001      	beq.n	e806 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x50c>
    e802:	21be      	movs	r1, #190	; 0xbe
    e804:	e007      	b.n	e816 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    e806:	4620      	mov	r0, r4
    e808:	f7ff ff3a 	bl	e680 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    e80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e810:	f7fb bab2 	b.w	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e814:	21c7      	movs	r1, #199	; 0xc7
    e816:	2030      	movs	r0, #48	; 0x30
    e818:	f7f5 fae4 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e81c:	21cb      	movs	r1, #203	; 0xcb
    e81e:	e7fa      	b.n	e816 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    e820:	b510      	push	{r4, lr}
    e822:	f001 f99d 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e826:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e82a:	4408      	add	r0, r1
    e82c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e830:	fbb0 f0f1 	udiv	r0, r0, r1
    e834:	f200 1075 	addw	r0, r0, #373	; 0x175
    e838:	bd10      	pop	{r4, pc}
    e83a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e83c:	4604      	mov	r4, r0
    e83e:	f7fd f9cb 	bl	bbd8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e842:	4601      	mov	r1, r0
    e844:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e848:	f7f2 ff08 	bl	165c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e84c:	68e1      	ldr	r1, [r4, #12]
    e84e:	b111      	cbz	r1, e856 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x55c>
    e850:	fbb0 f0f1 	udiv	r0, r0, r1
    e854:	e000      	b.n	e858 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x55e>
    e856:	2000      	movs	r0, #0
    e858:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    e85c:	290d      	cmp	r1, #13
    e85e:	d00c      	beq.n	e87a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x580>
    e860:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    e864:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e868:	1813      	adds	r3, r2, r0
    e86a:	1acb      	subs	r3, r1, r3
    e86c:	b21b      	sxth	r3, r3
    e86e:	2b00      	cmp	r3, #0
    e870:	db06      	blt.n	e880 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x586>
    e872:	1c49      	adds	r1, r1, #1
    e874:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    e878:	e006      	b.n	e888 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x58e>
    e87a:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e87e:	e012      	b.n	e8a6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5ac>
    e880:	1c40      	adds	r0, r0, #1
    e882:	4410      	add	r0, r2
    e884:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e888:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    e88c:	f88d 0000 	strb.w	r0, [sp]
    e890:	9800      	ldr	r0, [sp, #0]
    e892:	9000      	str	r0, [sp, #0]
    e894:	f89d 0000 	ldrb.w	r0, [sp]
    e898:	b940      	cbnz	r0, e8ac <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5b2>
    e89a:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e89e:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    e8a2:	4288      	cmp	r0, r1
    e8a4:	d102      	bne.n	e8ac <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5b2>
    e8a6:	1c40      	adds	r0, r0, #1
    e8a8:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e8ac:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    e8b0:	1c40      	adds	r0, r0, #1
    e8b2:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    e8b6:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    e8ba:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    e8be:	1a40      	subs	r0, r0, r1
    e8c0:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e8c4:	1e40      	subs	r0, r0, #1
    e8c6:	4408      	add	r0, r1
    e8c8:	b285      	uxth	r5, r0
    e8ca:	e026      	b.n	e91a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x620>
    e8cc:	a801      	add	r0, sp, #4
    e8ce:	2300      	movs	r3, #0
    e8d0:	9000      	str	r0, [sp, #0]
    e8d2:	461a      	mov	r2, r3
    e8d4:	4620      	mov	r0, r4
    e8d6:	f7f8 fed9 	bl	768c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    e8da:	2800      	cmp	r0, #0
    e8dc:	d038      	beq.n	e950 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x656>
    e8de:	2801      	cmp	r0, #1
    e8e0:	d004      	beq.n	e8ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5f2>
    e8e2:	f240 6159 	movw	r1, #1625	; 0x659
    e8e6:	2030      	movs	r0, #48	; 0x30
    e8e8:	f7f5 fa7c 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8ec:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e8f0:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    e8f4:	1a42      	subs	r2, r0, r1
    e8f6:	b212      	sxth	r2, r2
    e8f8:	2a00      	cmp	r2, #0
    e8fa:	da09      	bge.n	e910 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x616>
    e8fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e900:	4402      	add	r2, r0
    e902:	1aaa      	subs	r2, r5, r2
    e904:	b212      	sxth	r2, r2
    e906:	2a00      	cmp	r2, #0
    e908:	da02      	bge.n	e910 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x616>
    e90a:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    e90e:	e004      	b.n	e91a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x620>
    e910:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e914:	4408      	add	r0, r1
    e916:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e91a:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e91e:	1a68      	subs	r0, r5, r1
    e920:	b200      	sxth	r0, r0
    e922:	2800      	cmp	r0, #0
    e924:	dad2      	bge.n	e8cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5d2>
    e926:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    e92a:	b178      	cbz	r0, e94c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x652>
    e92c:	2008      	movs	r0, #8
    e92e:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    e932:	2001      	movs	r0, #1
    e934:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    e938:	4620      	mov	r0, r4
    e93a:	f000 f855 	bl	e9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    e93e:	4620      	mov	r0, r4
    e940:	f7ff fe9e 	bl	e680 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    e944:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e948:	f7fb ba16 	b.w	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e94c:	203e      	movs	r0, #62	; 0x3e
    e94e:	e7ee      	b.n	e92e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x634>
    e950:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e952:	01f4      	.short	0x01f4
    e954:	009600fa 	.word	0x009600fa
    e958:	004b0064 	.word	0x004b0064
    e95c:	001e0032 	.word	0x001e0032
    e960:	000a0014 	.word	0x000a0014
    e964:	00020005 	.word	0x00020005
    e968:	0001      	.short	0x0001
    e96a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e96e:	f001 0307 	and.w	r3, r1, #7
    e972:	7802      	ldrb	r2, [r0, #0]
    e974:	2101      	movs	r1, #1
    e976:	4099      	lsls	r1, r3
    e978:	438a      	bics	r2, r1
    e97a:	7002      	strb	r2, [r0, #0]
    e97c:	4770      	bx	lr

0000e97e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    e97e:	b510      	push	{r4, lr}
    e980:	4604      	mov	r4, r0
    e982:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    e986:	68e1      	ldr	r1, [r4, #12]
    e988:	4288      	cmp	r0, r1
    e98a:	d109      	bne.n	e9a0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e98c:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    e990:	8aa2      	ldrh	r2, [r4, #20]
    e992:	4291      	cmp	r1, r2
    e994:	d104      	bne.n	e9a0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e996:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    e99a:	8ae2      	ldrh	r2, [r4, #22]
    e99c:	4291      	cmp	r1, r2
    e99e:	d013      	beq.n	e9c8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    e9a0:	8821      	ldrh	r1, [r4, #0]
    e9a2:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    e9a6:	f7fe fcf4 	bl	d392 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e9aa:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    e9ae:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    e9b2:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    e9b6:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    e9ba:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    e9be:	2001      	movs	r0, #1
    e9c0:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    e9c4:	f7fb f9d8 	bl	9d78 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e9c8:	2102      	movs	r1, #2
    e9ca:	4620      	mov	r0, r4
    e9cc:	f7f7 f950 	bl	5c70 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e9d0:	2000      	movs	r0, #0
    e9d2:	f804 0f7e 	strb.w	r0, [r4, #126]!
    e9d6:	2003      	movs	r0, #3
    e9d8:	70e0      	strb	r0, [r4, #3]
    e9da:	bd10      	pop	{r4, pc}

0000e9dc <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e9dc:	f7f5 bdb6 	b.w	454c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e9e0 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e9e0:	2000      	movs	r0, #0
    e9e2:	4770      	bx	lr

0000e9e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e9e4:	f7f6 bae4 	b.w	4fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e9e8:	2100      	movs	r1, #0
    e9ea:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    e9ee:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    e9f2:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    e9f6:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    e9fa:	b109      	cbz	r1, ea00 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e9fc:	2102      	movs	r1, #2
    e9fe:	e000      	b.n	ea02 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    ea00:	2103      	movs	r1, #3
    ea02:	f7f8 bd1b 	b.w	743c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ea06:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    ea0a:	28fe      	cmp	r0, #254	; 0xfe
    ea0c:	d001      	beq.n	ea12 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    ea0e:	2001      	movs	r0, #1
    ea10:	4770      	bx	lr
    ea12:	2000      	movs	r0, #0
    ea14:	4770      	bx	lr
    ea16:	b510      	push	{r4, lr}
    ea18:	2801      	cmp	r0, #1
    ea1a:	d006      	beq.n	ea2a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ea1c:	2802      	cmp	r0, #2
    ea1e:	d004      	beq.n	ea2a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ea20:	f240 2163 	movw	r1, #611	; 0x263
    ea24:	2006      	movs	r0, #6
    ea26:	f7f5 f9dd 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea2a:	bd10      	pop	{r4, pc}
    ea2c:	2801      	cmp	r0, #1
    ea2e:	d002      	beq.n	ea36 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    ea30:	2802      	cmp	r0, #2
    ea32:	d105      	bne.n	ea40 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ea34:	e002      	b.n	ea3c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    ea36:	2901      	cmp	r1, #1
    ea38:	d004      	beq.n	ea44 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ea3a:	e001      	b.n	ea40 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ea3c:	2902      	cmp	r1, #2
    ea3e:	d001      	beq.n	ea44 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ea40:	2000      	movs	r0, #0
    ea42:	4770      	bx	lr
    ea44:	2001      	movs	r0, #1
    ea46:	4770      	bx	lr
    ea48:	1a40      	subs	r0, r0, r1
    ea4a:	b200      	sxth	r0, r0
    ea4c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    ea50:	4288      	cmp	r0, r1
    ea52:	dc01      	bgt.n	ea58 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    ea54:	2800      	cmp	r0, #0
    ea56:	dc01      	bgt.n	ea5c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    ea58:	2001      	movs	r0, #1
    ea5a:	4770      	bx	lr
    ea5c:	2000      	movs	r0, #0
    ea5e:	4770      	bx	lr
    ea60:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ea64:	f001 0107 	and.w	r1, r1, #7
    ea68:	7800      	ldrb	r0, [r0, #0]
    ea6a:	2201      	movs	r2, #1
    ea6c:	408a      	lsls	r2, r1
    ea6e:	4010      	ands	r0, r2
    ea70:	40c8      	lsrs	r0, r1
    ea72:	4770      	bx	lr
    ea74:	b118      	cbz	r0, ea7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    ea76:	2802      	cmp	r0, #2
    ea78:	d001      	beq.n	ea7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    ea7a:	2001      	movs	r0, #1
    ea7c:	4770      	bx	lr
    ea7e:	2000      	movs	r0, #0
    ea80:	4770      	bx	lr

0000ea82 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    ea82:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ea84:	7881      	ldrb	r1, [r0, #2]
    ea86:	4604      	mov	r4, r0
    ea88:	291a      	cmp	r1, #26
    ea8a:	d025      	beq.n	ead8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    ea8c:	dc0e      	bgt.n	eaac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    ea8e:	2916      	cmp	r1, #22
    ea90:	d22d      	bcs.n	eaee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ea92:	e8df f001 	tbb	[pc, r1]
    ea96:	2c2c      	.short	0x2c2c
    ea98:	212c2c2c 	.word	0x212c2c2c
    ea9c:	2c2c2c2c 	.word	0x2c2c2c2c
    eaa0:	2c2c2c2c 	.word	0x2c2c2c2c
    eaa4:	2c2c2c2c 	.word	0x2c2c2c2c
    eaa8:	2121212c 	.word	0x2121212c
    eaac:	292a      	cmp	r1, #42	; 0x2a
    eaae:	d01e      	beq.n	eaee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eab0:	dc0b      	bgt.n	eaca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    eab2:	f1a1 011e 	sub.w	r1, r1, #30
    eab6:	290c      	cmp	r1, #12
    eab8:	d219      	bcs.n	eaee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eaba:	e8df f001 	tbb	[pc, r1]
    eabe:	1818      	.short	0x1818
    eac0:	18181818 	.word	0x18181818
    eac4:	18181818 	.word	0x18181818
    eac8:	0d18      	.short	0x0d18
    eaca:	393a      	subs	r1, #58	; 0x3a
    eacc:	2904      	cmp	r1, #4
    eace:	d20e      	bcs.n	eaee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ead0:	e8df f001 	tbb	[pc, r1]
    ead4:	020d020d 	.word	0x020d020d
    ead8:	8820      	ldrh	r0, [r4, #0]
    eada:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    eade:	d206      	bcs.n	eaee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eae0:	2701      	movs	r7, #1
    eae2:	4669      	mov	r1, sp
    eae4:	f7fe fc44 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eae8:	b118      	cbz	r0, eaf2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    eaea:	2002      	movs	r0, #2
    eaec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eaee:	2012      	movs	r0, #18
    eaf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eaf2:	9d01      	ldr	r5, [sp, #4]
    eaf4:	4668      	mov	r0, sp
    eaf6:	462e      	mov	r6, r5
    eaf8:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    eafc:	f206 1679 	addw	r6, r6, #377	; 0x179
    eb00:	f000 fe94 	bl	f82c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x31a>
    eb04:	b138      	cbz	r0, eb16 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    eb06:	7828      	ldrb	r0, [r5, #0]
    eb08:	f88d 0008 	strb.w	r0, [sp, #8]
    eb0c:	9802      	ldr	r0, [sp, #8]
    eb0e:	9002      	str	r0, [sp, #8]
    eb10:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eb14:	b108      	cbz	r0, eb1a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    eb16:	200c      	movs	r0, #12
    eb18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb1a:	702f      	strb	r7, [r5, #0]
    eb1c:	78a0      	ldrb	r0, [r4, #2]
    eb1e:	7030      	strb	r0, [r6, #0]
    eb20:	4668      	mov	r0, sp
    eb22:	f7fe ff9f 	bl	da64 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    eb26:	2000      	movs	r0, #0
    eb28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000eb2a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    eb2a:	b510      	push	{r4, lr}
    eb2c:	4604      	mov	r4, r0
    eb2e:	7800      	ldrb	r0, [r0, #0]
    eb30:	b118      	cbz	r0, eb3a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    eb32:	2801      	cmp	r0, #1
    eb34:	d001      	beq.n	eb3a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    eb36:	2012      	movs	r0, #18
    eb38:	bd10      	pop	{r4, pc}
    eb3a:	f000 fe2b 	bl	f794 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    eb3e:	b120      	cbz	r0, eb4a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    eb40:	f7f6 fe88 	bl	5854 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eb44:	b108      	cbz	r0, eb4a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    eb46:	200c      	movs	r0, #12
    eb48:	bd10      	pop	{r4, pc}
    eb4a:	7820      	ldrb	r0, [r4, #0]
    eb4c:	f7ff ff92 	bl	ea74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    eb50:	1de2      	adds	r2, r4, #7
    eb52:	f104 0317 	add.w	r3, r4, #23
    eb56:	1c61      	adds	r1, r4, #1
    eb58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb5c:	f7f6 beac 	b.w	58b8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000eb60 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    eb60:	b510      	push	{r4, lr}
    eb62:	4604      	mov	r4, r0
    eb64:	f000 fef2 	bl	f94c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    eb68:	b108      	cbz	r0, eb6e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    eb6a:	200c      	movs	r0, #12
    eb6c:	bd10      	pop	{r4, pc}
    eb6e:	7820      	ldrb	r0, [r4, #0]
    eb70:	b118      	cbz	r0, eb7a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    eb72:	2801      	cmp	r0, #1
    eb74:	d001      	beq.n	eb7a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    eb76:	2012      	movs	r0, #18
    eb78:	bd10      	pop	{r4, pc}
    eb7a:	f7ff ff7b 	bl	ea74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    eb7e:	1c61      	adds	r1, r4, #1
    eb80:	f7f6 ff12 	bl	59a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    eb84:	b108      	cbz	r0, eb8a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    eb86:	2000      	movs	r0, #0
    eb88:	bd10      	pop	{r4, pc}
    eb8a:	2007      	movs	r0, #7
    eb8c:	bd10      	pop	{r4, pc}

0000eb8e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    eb8e:	b510      	push	{r4, lr}
    eb90:	f000 fe00 	bl	f794 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    eb94:	b120      	cbz	r0, eba0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    eb96:	f7f6 fe5d 	bl	5854 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eb9a:	b108      	cbz	r0, eba0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    eb9c:	200c      	movs	r0, #12
    eb9e:	bd10      	pop	{r4, pc}
    eba0:	f7f6 fed0 	bl	5944 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    eba4:	2000      	movs	r0, #0
    eba6:	bd10      	pop	{r4, pc}

0000eba8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    eba8:	b510      	push	{r4, lr}
    ebaa:	f000 fecf 	bl	f94c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    ebae:	b108      	cbz	r0, ebb4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ebb0:	200c      	movs	r0, #12
    ebb2:	bd10      	pop	{r4, pc}
    ebb4:	f7f6 ff20 	bl	59f8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ebb8:	2000      	movs	r0, #0
    ebba:	bd10      	pop	{r4, pc}

0000ebbc <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    ebbc:	b510      	push	{r4, lr}
    ebbe:	460b      	mov	r3, r1
    ebc0:	2201      	movs	r2, #1
    ebc2:	f100 0110 	add.w	r1, r0, #16
    ebc6:	f7fe fbb5 	bl	d334 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ebca:	2000      	movs	r0, #0
    ebcc:	bd10      	pop	{r4, pc}

0000ebce <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    ebce:	b510      	push	{r4, lr}
    ebd0:	8800      	ldrh	r0, [r0, #0]
    ebd2:	2100      	movs	r1, #0
    ebd4:	f7fe f989 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ebd8:	b118      	cbz	r0, ebe2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    ebda:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    ebde:	b111      	cbz	r1, ebe6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    ebe0:	e007      	b.n	ebf2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    ebe2:	2002      	movs	r0, #2
    ebe4:	bd10      	pop	{r4, pc}
    ebe6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    ebea:	2914      	cmp	r1, #20
    ebec:	d003      	beq.n	ebf6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ebee:	2915      	cmp	r1, #21
    ebf0:	d001      	beq.n	ebf6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ebf2:	200c      	movs	r0, #12
    ebf4:	bd10      	pop	{r4, pc}
    ebf6:	2102      	movs	r1, #2
    ebf8:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    ebfc:	2000      	movs	r0, #0
    ebfe:	bd10      	pop	{r4, pc}

0000ec00 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    ec00:	b538      	push	{r3, r4, r5, lr}
    ec02:	4605      	mov	r5, r0
    ec04:	8800      	ldrh	r0, [r0, #0]
    ec06:	2100      	movs	r1, #0
    ec08:	f7fe f96f 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec0c:	0004      	movs	r4, r0
    ec0e:	d003      	beq.n	ec18 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    ec10:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    ec14:	b110      	cbz	r0, ec1c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    ec16:	e010      	b.n	ec3a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    ec18:	2002      	movs	r0, #2
    ec1a:	bd38      	pop	{r3, r4, r5, pc}
    ec1c:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    ec20:	2814      	cmp	r0, #20
    ec22:	d001      	beq.n	ec28 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    ec24:	2815      	cmp	r0, #21
    ec26:	d108      	bne.n	ec3a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    ec28:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    ec2c:	f88d 0000 	strb.w	r0, [sp]
    ec30:	9800      	ldr	r0, [sp, #0]
    ec32:	9000      	str	r0, [sp, #0]
    ec34:	f89d 0000 	ldrb.w	r0, [sp]
    ec38:	b108      	cbz	r0, ec3e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    ec3a:	200c      	movs	r0, #12
    ec3c:	bd38      	pop	{r3, r4, r5, pc}
    ec3e:	2210      	movs	r2, #16
    ec40:	1ca9      	adds	r1, r5, #2
    ec42:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    ec46:	f7fd f93c 	bl	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec4a:	2001      	movs	r0, #1
    ec4c:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    ec50:	2000      	movs	r0, #0
    ec52:	bd38      	pop	{r3, r4, r5, pc}

0000ec54 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    ec54:	b510      	push	{r4, lr}
    ec56:	2108      	movs	r1, #8
    ec58:	f7f5 f96c 	bl	3f34 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ec5c:	2000      	movs	r0, #0
    ec5e:	bd10      	pop	{r4, pc}

0000ec60 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    ec60:	b510      	push	{r4, lr}
    ec62:	4604      	mov	r4, r0
    ec64:	f000 fdf9 	bl	f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    ec68:	f7ff f962 	bl	df30 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    ec6c:	7020      	strb	r0, [r4, #0]
    ec6e:	2000      	movs	r0, #0
    ec70:	bd10      	pop	{r4, pc}

0000ec72 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    ec72:	b510      	push	{r4, lr}
    ec74:	4604      	mov	r4, r0
    ec76:	f000 fdd3 	bl	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    ec7a:	b140      	cbz	r0, ec8e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    ec7c:	20fb      	movs	r0, #251	; 0xfb
    ec7e:	8020      	strh	r0, [r4, #0]
    ec80:	f640 0148 	movw	r1, #2120	; 0x848
    ec84:	8061      	strh	r1, [r4, #2]
    ec86:	80a0      	strh	r0, [r4, #4]
    ec88:	80e1      	strh	r1, [r4, #6]
    ec8a:	2000      	movs	r0, #0
    ec8c:	bd10      	pop	{r4, pc}
    ec8e:	2001      	movs	r0, #1
    ec90:	bd10      	pop	{r4, pc}

0000ec92 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    ec92:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ec94:	460d      	mov	r5, r1
    ec96:	4606      	mov	r6, r0
    ec98:	f7fb fc18 	bl	a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ec9c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    eca0:	b300      	cbz	r0, ece4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    eca2:	8830      	ldrh	r0, [r6, #0]
    eca4:	4669      	mov	r1, sp
    eca6:	f7fe fb63 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ecaa:	2800      	cmp	r0, #0
    ecac:	d119      	bne.n	ece2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    ecae:	9c01      	ldr	r4, [sp, #4]
    ecb0:	2700      	movs	r7, #0
    ecb2:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    ecb6:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    ecba:	f000 fc46 	bl	f54a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    ecbe:	70a8      	strb	r0, [r5, #2]
    ecc0:	7860      	ldrb	r0, [r4, #1]
    ecc2:	f000 fc42 	bl	f54a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    ecc6:	70e8      	strb	r0, [r5, #3]
    ecc8:	78a0      	ldrb	r0, [r4, #2]
    ecca:	f88d 0008 	strb.w	r0, [sp, #8]
    ecce:	9802      	ldr	r0, [sp, #8]
    ecd0:	9002      	str	r0, [sp, #8]
    ecd2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ecd6:	3c6a      	subs	r4, #106	; 0x6a
    ecd8:	2800      	cmp	r0, #0
    ecda:	d1ea      	bne.n	ecb2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    ecdc:	8830      	ldrh	r0, [r6, #0]
    ecde:	8028      	strh	r0, [r5, #0]
    ece0:	2000      	movs	r0, #0
    ece2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ece4:	2001      	movs	r0, #1
    ece6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ece8 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    ece8:	2108      	movs	r1, #8
    ecea:	7001      	strb	r1, [r0, #0]
    ecec:	2000      	movs	r0, #0
    ecee:	4770      	bx	lr

0000ecf0 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    ecf0:	b510      	push	{r4, lr}
    ecf2:	4604      	mov	r4, r0
    ecf4:	20d8      	movs	r0, #216	; 0xd8
    ecf6:	7020      	strb	r0, [r4, #0]
    ecf8:	f000 fd73 	bl	f7e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d0>
    ecfc:	7060      	strb	r0, [r4, #1]
    ecfe:	2000      	movs	r0, #0
    ed00:	bd10      	pop	{r4, pc}

0000ed02 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ed02:	2108      	movs	r1, #8
    ed04:	7001      	strb	r1, [r0, #0]
    ed06:	2000      	movs	r0, #0
    ed08:	4770      	bx	lr

0000ed0a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ed0a:	b510      	push	{r4, lr}
    ed0c:	4604      	mov	r4, r0
    ed0e:	7800      	ldrb	r0, [r0, #0]
    ed10:	b108      	cbz	r0, ed16 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ed12:	2801      	cmp	r0, #1
    ed14:	d110      	bne.n	ed38 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ed16:	f000 fd3d 	bl	f794 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    ed1a:	b120      	cbz	r0, ed26 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ed1c:	f7f6 fd9a 	bl	5854 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ed20:	b108      	cbz	r0, ed26 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ed22:	200c      	movs	r0, #12
    ed24:	bd10      	pop	{r4, pc}
    ed26:	7820      	ldrb	r0, [r4, #0]
    ed28:	f7ff fea4 	bl	ea74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ed2c:	1c61      	adds	r1, r4, #1
    ed2e:	f7fe fae7 	bl	d300 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    ed32:	b108      	cbz	r0, ed38 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ed34:	2000      	movs	r0, #0
    ed36:	bd10      	pop	{r4, pc}
    ed38:	2012      	movs	r0, #18
    ed3a:	bd10      	pop	{r4, pc}

0000ed3c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ed3c:	b510      	push	{r4, lr}
    ed3e:	4604      	mov	r4, r0
    ed40:	f000 fe04 	bl	f94c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    ed44:	b108      	cbz	r0, ed4a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ed46:	200c      	movs	r0, #12
    ed48:	bd10      	pop	{r4, pc}
    ed4a:	7820      	ldrb	r0, [r4, #0]
    ed4c:	b108      	cbz	r0, ed52 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ed4e:	2801      	cmp	r0, #1
    ed50:	d107      	bne.n	ed62 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ed52:	f7ff fe8f 	bl	ea74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ed56:	1c61      	adds	r1, r4, #1
    ed58:	f7fe fae1 	bl	d31e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ed5c:	b108      	cbz	r0, ed62 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ed5e:	2000      	movs	r0, #0
    ed60:	bd10      	pop	{r4, pc}
    ed62:	2012      	movs	r0, #18
    ed64:	bd10      	pop	{r4, pc}

0000ed66 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ed66:	b510      	push	{r4, lr}
    ed68:	4604      	mov	r4, r0
    ed6a:	f000 fd13 	bl	f794 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    ed6e:	b108      	cbz	r0, ed74 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ed70:	200c      	movs	r0, #12
    ed72:	bd10      	pop	{r4, pc}
    ed74:	7820      	ldrb	r0, [r4, #0]
    ed76:	f000 0001 	and.w	r0, r0, #1
    ed7a:	f7f6 fd65 	bl	5848 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ed7e:	2000      	movs	r0, #0
    ed80:	bd10      	pop	{r4, pc}

0000ed82 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    ed82:	b51c      	push	{r2, r3, r4, lr}
    ed84:	4604      	mov	r4, r0
    ed86:	f000 fd68 	bl	f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    ed8a:	2000      	movs	r0, #0
    ed8c:	f88d 0002 	strb.w	r0, [sp, #2]
    ed90:	2103      	movs	r1, #3
    ed92:	f88d 1001 	strb.w	r1, [sp, #1]
    ed96:	f814 1b01 	ldrb.w	r1, [r4], #1
    ed9a:	f88d 1003 	strb.w	r1, [sp, #3]
    ed9e:	f88d 0000 	strb.w	r0, [sp]
    eda2:	4668      	mov	r0, sp
    eda4:	9401      	str	r4, [sp, #4]
    eda6:	f000 f9f8 	bl	f19a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    edaa:	bd1c      	pop	{r2, r3, r4, pc}

0000edac <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    edac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    edae:	4605      	mov	r5, r0
    edb0:	f000 fd53 	bl	f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    edb4:	4606      	mov	r6, r0
    edb6:	7828      	ldrb	r0, [r5, #0]
    edb8:	2400      	movs	r4, #0
    edba:	b160      	cbz	r0, edd6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    edbc:	f88d 4000 	strb.w	r4, [sp]
    edc0:	2001      	movs	r0, #1
    edc2:	f10d 0101 	add.w	r1, sp, #1
    edc6:	f7f5 ff0d 	bl	4be4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    edca:	b120      	cbz	r0, edd6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    edcc:	4668      	mov	r0, sp
    edce:	f000 f897 	bl	ef00 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    edd2:	2800      	cmp	r0, #0
    edd4:	d112      	bne.n	edfc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    edd6:	f88d 400c 	strb.w	r4, [sp, #12]
    edda:	4630      	mov	r0, r6
    eddc:	f7ff f89e 	bl	df1c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ede0:	b118      	cbz	r0, edea <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    ede2:	2080      	movs	r0, #128	; 0x80
    ede4:	f8ad 000d 	strh.w	r0, [sp, #13]
    ede8:	e001      	b.n	edee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    edea:	f8ad 400d 	strh.w	r4, [sp, #13]
    edee:	f88d 400f 	strb.w	r4, [sp, #15]
    edf2:	7828      	ldrb	r0, [r5, #0]
    edf4:	2801      	cmp	r0, #1
    edf6:	d003      	beq.n	ee00 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    edf8:	b138      	cbz	r0, ee0a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    edfa:	2012      	movs	r0, #18
    edfc:	b004      	add	sp, #16
    edfe:	bd70      	pop	{r4, r5, r6, pc}
    ee00:	a903      	add	r1, sp, #12
    ee02:	4630      	mov	r0, r6
    ee04:	f7fb f944 	bl	a090 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    ee08:	e7f8      	b.n	edfc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    ee0a:	4630      	mov	r0, r6
    ee0c:	f000 fd3c 	bl	f888 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    ee10:	e7f4      	b.n	edfc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000ee12 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    ee12:	b530      	push	{r4, r5, lr}
    ee14:	b08b      	sub	sp, #44	; 0x2c
    ee16:	4604      	mov	r4, r0
    ee18:	f000 fd1f 	bl	f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    ee1c:	4602      	mov	r2, r0
    ee1e:	7920      	ldrb	r0, [r4, #4]
    ee20:	2804      	cmp	r0, #4
    ee22:	d803      	bhi.n	ee2c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    ee24:	8860      	ldrh	r0, [r4, #2]
    ee26:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    ee2a:	d902      	bls.n	ee32 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    ee2c:	2012      	movs	r0, #18
    ee2e:	b00b      	add	sp, #44	; 0x2c
    ee30:	bd30      	pop	{r4, r5, pc}
    ee32:	2500      	movs	r5, #0
    ee34:	f88d 5004 	strb.w	r5, [sp, #4]
    ee38:	7921      	ldrb	r1, [r4, #4]
    ee3a:	9500      	str	r5, [sp, #0]
    ee3c:	f89d 0000 	ldrb.w	r0, [sp]
    ee40:	2905      	cmp	r1, #5
    ee42:	f040 0010 	orr.w	r0, r0, #16
    ee46:	f88d 0000 	strb.w	r0, [sp]
    ee4a:	d254      	bcs.n	eef6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    ee4c:	e8df f001 	tbb	[pc, r1]
    ee50:	11050803 	.word	0x11050803
    ee54:	000b      	.short	0x000b
    ee56:	f040 0001 	orr.w	r0, r0, #1
    ee5a:	f040 0002 	orr.w	r0, r0, #2
    ee5e:	e006      	b.n	ee6e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    ee60:	f040 0009 	orr.w	r0, r0, #9
    ee64:	e001      	b.n	ee6a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    ee66:	f040 0001 	orr.w	r0, r0, #1
    ee6a:	f040 0004 	orr.w	r0, r0, #4
    ee6e:	f88d 0000 	strb.w	r0, [sp]
    ee72:	f8bd 0000 	ldrh.w	r0, [sp]
    ee76:	9000      	str	r0, [sp, #0]
    ee78:	f8bd 0000 	ldrh.w	r0, [sp]
    ee7c:	f8ad 0005 	strh.w	r0, [sp, #5]
    ee80:	8821      	ldrh	r1, [r4, #0]
    ee82:	f8dd 0006 	ldr.w	r0, [sp, #6]
    ee86:	f361 201f 	bfi	r0, r1, #8, #24
    ee8a:	f8cd 0006 	str.w	r0, [sp, #6]
    ee8e:	8861      	ldrh	r1, [r4, #2]
    ee90:	f8dd 0009 	ldr.w	r0, [sp, #9]
    ee94:	f361 201f 	bfi	r0, r1, #8, #24
    ee98:	f8cd 0009 	str.w	r0, [sp, #9]
    ee9c:	7b60      	ldrb	r0, [r4, #13]
    ee9e:	f88d 000d 	strb.w	r0, [sp, #13]
    eea2:	7960      	ldrb	r0, [r4, #5]
    eea4:	f88d 000e 	strb.w	r0, [sp, #14]
    eea8:	79a0      	ldrb	r0, [r4, #6]
    eeaa:	f88d 000f 	strb.w	r0, [sp, #15]
    eeae:	f8d4 0007 	ldr.w	r0, [r4, #7]
    eeb2:	9004      	str	r0, [sp, #16]
    eeb4:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    eeb8:	f8ad 0014 	strh.w	r0, [sp, #20]
    eebc:	7ba0      	ldrb	r0, [r4, #14]
    eebe:	f88d 0016 	strb.w	r0, [sp, #22]
    eec2:	207f      	movs	r0, #127	; 0x7f
    eec4:	f88d 0017 	strb.w	r0, [sp, #23]
    eec8:	2001      	movs	r0, #1
    eeca:	f88d 0018 	strb.w	r0, [sp, #24]
    eece:	f88d 5019 	strb.w	r5, [sp, #25]
    eed2:	f88d 001a 	strb.w	r0, [sp, #26]
    eed6:	f88d 501b 	strb.w	r5, [sp, #27]
    eeda:	4610      	mov	r0, r2
    eedc:	f7ff f83a 	bl	df54 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    eee0:	f88d 001c 	strb.w	r0, [sp, #28]
    eee4:	f88d 501d 	strb.w	r5, [sp, #29]
    eee8:	f88d 501e 	strb.w	r5, [sp, #30]
    eeec:	a909      	add	r1, sp, #36	; 0x24
    eeee:	a801      	add	r0, sp, #4
    eef0:	f000 f8de 	bl	f0b0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    eef4:	e79b      	b.n	ee2e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    eef6:	f241 0193 	movw	r1, #4243	; 0x1093
    eefa:	2039      	movs	r0, #57	; 0x39
    eefc:	f7f4 ff72 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef00 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    ef00:	b570      	push	{r4, r5, r6, lr}
    ef02:	4604      	mov	r4, r0
    ef04:	7800      	ldrb	r0, [r0, #0]
    ef06:	2101      	movs	r1, #1
    ef08:	f7fd ffef 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ef0c:	0005      	movs	r5, r0
    ef0e:	d007      	beq.n	ef20 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    ef10:	f7ff f9d9 	bl	e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ef14:	b160      	cbz	r0, ef30 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ef16:	4628      	mov	r0, r5
    ef18:	f7ff f806 	bl	df28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ef1c:	b110      	cbz	r0, ef24 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    ef1e:	e005      	b.n	ef2c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    ef20:	2042      	movs	r0, #66	; 0x42
    ef22:	bd70      	pop	{r4, r5, r6, pc}
    ef24:	4628      	mov	r0, r5
    ef26:	f7fe fff5 	bl	df14 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ef2a:	b108      	cbz	r0, ef30 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ef2c:	200c      	movs	r0, #12
    ef2e:	bd70      	pop	{r4, r5, r6, pc}
    ef30:	1c61      	adds	r1, r4, #1
    ef32:	4628      	mov	r0, r5
    ef34:	f7ff f806 	bl	df44 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    ef38:	2000      	movs	r0, #0
    ef3a:	bd70      	pop	{r4, r5, r6, pc}

0000ef3c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ef3c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ef3e:	460d      	mov	r5, r1
    ef40:	4604      	mov	r4, r0
    ef42:	f000 fc6d 	bl	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    ef46:	b130      	cbz	r0, ef56 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ef48:	88a2      	ldrh	r2, [r4, #4]
    ef4a:	f244 2090 	movw	r0, #17040	; 0x4290
    ef4e:	4282      	cmp	r2, r0
    ef50:	d903      	bls.n	ef5a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ef52:	2012      	movs	r0, #18
    ef54:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ef56:	2001      	movs	r0, #1
    ef58:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ef5a:	f640 0048 	movw	r0, #2120	; 0x848
    ef5e:	4282      	cmp	r2, r0
    ef60:	d300      	bcc.n	ef64 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ef62:	4602      	mov	r2, r0
    ef64:	8820      	ldrh	r0, [r4, #0]
    ef66:	f8ad 0000 	strh.w	r0, [sp]
    ef6a:	8860      	ldrh	r0, [r4, #2]
    ef6c:	f8ad 0002 	strh.w	r0, [sp, #2]
    ef70:	f8ad 2004 	strh.w	r2, [sp, #4]
    ef74:	8860      	ldrh	r0, [r4, #2]
    ef76:	f8ad 0006 	strh.w	r0, [sp, #6]
    ef7a:	f8ad 2008 	strh.w	r2, [sp, #8]
    ef7e:	8820      	ldrh	r0, [r4, #0]
    ef80:	8028      	strh	r0, [r5, #0]
    ef82:	4668      	mov	r0, sp
    ef84:	f7fb f952 	bl	a22c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    ef88:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ef8a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    ef8a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ef8c:	4604      	mov	r4, r0
    ef8e:	f7fb fa9d 	bl	a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ef92:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ef96:	b1b0      	cbz	r0, efc6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    ef98:	f10d 0007 	add.w	r0, sp, #7
    ef9c:	9000      	str	r0, [sp, #0]
    ef9e:	7922      	ldrb	r2, [r4, #4]
    efa0:	78e1      	ldrb	r1, [r4, #3]
    efa2:	78a0      	ldrb	r0, [r4, #2]
    efa4:	f10d 0306 	add.w	r3, sp, #6
    efa8:	f000 fc94 	bl	f8d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    efac:	2800      	cmp	r0, #0
    efae:	d109      	bne.n	efc4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    efb0:	8820      	ldrh	r0, [r4, #0]
    efb2:	f8ad 0004 	strh.w	r0, [sp, #4]
    efb6:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    efba:	f8ad 0008 	strh.w	r0, [sp, #8]
    efbe:	a801      	add	r0, sp, #4
    efc0:	f000 f9a6 	bl	f310 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    efc4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    efc6:	2001      	movs	r0, #1
    efc8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000efca <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    efca:	b510      	push	{r4, lr}
    efcc:	4604      	mov	r4, r0
    efce:	f000 fbe1 	bl	f794 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    efd2:	b120      	cbz	r0, efde <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    efd4:	f7f6 fc3e 	bl	5854 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    efd8:	b108      	cbz	r0, efde <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    efda:	200c      	movs	r0, #12
    efdc:	bd10      	pop	{r4, pc}
    efde:	7820      	ldrb	r0, [r4, #0]
    efe0:	f7ff fd48 	bl	ea74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    efe4:	79e2      	ldrb	r2, [r4, #7]
    efe6:	1c61      	adds	r1, r4, #1
    efe8:	f7f6 fbe2 	bl	57b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    efec:	b108      	cbz	r0, eff2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    efee:	2000      	movs	r0, #0
    eff0:	bd10      	pop	{r4, pc}
    eff2:	2002      	movs	r0, #2
    eff4:	bd10      	pop	{r4, pc}

0000eff6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    eff6:	b510      	push	{r4, lr}
    eff8:	4604      	mov	r4, r0
    effa:	2001      	movs	r0, #1
    effc:	f000 fac8 	bl	f590 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f000:	b128      	cbz	r0, f00e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f002:	4621      	mov	r1, r4
    f004:	2001      	movs	r0, #1
    f006:	f7f5 fe05 	bl	4c14 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f00a:	2000      	movs	r0, #0
    f00c:	bd10      	pop	{r4, pc}
    f00e:	200c      	movs	r0, #12
    f010:	bd10      	pop	{r4, pc}

0000f012 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f012:	b510      	push	{r4, lr}
    f014:	8800      	ldrh	r0, [r0, #0]
    f016:	f7f6 fcab 	bl	5970 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f01a:	b108      	cbz	r0, f020 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f01c:	2000      	movs	r0, #0
    f01e:	bd10      	pop	{r4, pc}
    f020:	2030      	movs	r0, #48	; 0x30
    f022:	bd10      	pop	{r4, pc}

0000f024 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f024:	b51c      	push	{r2, r3, r4, lr}
    f026:	4604      	mov	r4, r0
    f028:	f000 fc17 	bl	f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    f02c:	2000      	movs	r0, #0
    f02e:	f88d 0000 	strb.w	r0, [sp]
    f032:	f88d 0002 	strb.w	r0, [sp, #2]
    f036:	2003      	movs	r0, #3
    f038:	f88d 0001 	strb.w	r0, [sp, #1]
    f03c:	f814 0b01 	ldrb.w	r0, [r4], #1
    f040:	f88d 0003 	strb.w	r0, [sp, #3]
    f044:	4668      	mov	r0, sp
    f046:	9401      	str	r4, [sp, #4]
    f048:	f000 f910 	bl	f26c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f04c:	bd1c      	pop	{r2, r3, r4, pc}

0000f04e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f04e:	b51c      	push	{r2, r3, r4, lr}
    f050:	4604      	mov	r4, r0
    f052:	f000 fbe5 	bl	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    f056:	b178      	cbz	r0, f078 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f058:	8820      	ldrh	r0, [r4, #0]
    f05a:	f8ad 0000 	strh.w	r0, [sp]
    f05e:	8860      	ldrh	r0, [r4, #2]
    f060:	f8ad 0002 	strh.w	r0, [sp, #2]
    f064:	8820      	ldrh	r0, [r4, #0]
    f066:	f8ad 0004 	strh.w	r0, [sp, #4]
    f06a:	8860      	ldrh	r0, [r4, #2]
    f06c:	f8ad 0006 	strh.w	r0, [sp, #6]
    f070:	4668      	mov	r0, sp
    f072:	f7fb f95f 	bl	a334 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    f076:	bd1c      	pop	{r2, r3, r4, pc}
    f078:	2001      	movs	r0, #1
    f07a:	bd1c      	pop	{r2, r3, r4, pc}

0000f07c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f07c:	b510      	push	{r4, lr}
    f07e:	f7f5 fded 	bl	4c5c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f082:	2000      	movs	r0, #0
    f084:	bd10      	pop	{r4, pc}

0000f086 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f086:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f088:	460c      	mov	r4, r1
    f08a:	4605      	mov	r5, r0
    f08c:	f000 fbc8 	bl	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    f090:	b160      	cbz	r0, f0ac <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f092:	4669      	mov	r1, sp
    f094:	4628      	mov	r0, r5
    f096:	f7fe f96b 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f09a:	2800      	cmp	r0, #0
    f09c:	d105      	bne.n	f0aa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f09e:	2100      	movs	r1, #0
    f0a0:	4622      	mov	r2, r4
    f0a2:	9801      	ldr	r0, [sp, #4]
    f0a4:	f000 fb40 	bl	f728 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    f0a8:	2000      	movs	r0, #0
    f0aa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f0ac:	2001      	movs	r0, #1
    f0ae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f0b0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    f0b0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f0b4:	460f      	mov	r7, r1
    f0b6:	4605      	mov	r5, r0
    f0b8:	7806      	ldrb	r6, [r0, #0]
    f0ba:	f000 fac5 	bl	f648 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    f0be:	2800      	cmp	r0, #0
    f0c0:	d10a      	bne.n	f0d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f0c2:	4628      	mov	r0, r5
    f0c4:	f000 fa9a 	bl	f5fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    f0c8:	2800      	cmp	r0, #0
    f0ca:	d105      	bne.n	f0d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f0cc:	2001      	movs	r0, #1
    f0ce:	f7f5 f881 	bl	41d4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f0d2:	4286      	cmp	r6, r0
    f0d4:	d302      	bcc.n	f0dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    f0d6:	2007      	movs	r0, #7
    f0d8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f0dc:	2101      	movs	r1, #1
    f0de:	4630      	mov	r0, r6
    f0e0:	f7fd ff03 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f0e4:	0004      	movs	r4, r0
    f0e6:	d004      	beq.n	f0f2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    f0e8:	f7ff f8ed 	bl	e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f0ec:	b150      	cbz	r0, f104 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    f0ee:	200c      	movs	r0, #12
    f0f0:	e7f2      	b.n	f0d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f0f2:	2200      	movs	r2, #0
    f0f4:	2101      	movs	r1, #1
    f0f6:	4630      	mov	r0, r6
    f0f8:	f7fd feed 	bl	ced6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f0fc:	0004      	movs	r4, r0
    f0fe:	d00f      	beq.n	f120 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    f100:	f7fe fead 	bl	de5e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f104:	4620      	mov	r0, r4
    f106:	f7fe ff13 	bl	df30 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f10a:	7038      	strb	r0, [r7, #0]
    f10c:	74e8      	strb	r0, [r5, #19]
    f10e:	4629      	mov	r1, r5
    f110:	4620      	mov	r0, r4
    f112:	f7f7 fa23 	bl	655c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    f116:	4606      	mov	r6, r0
    f118:	7e68      	ldrb	r0, [r5, #25]
    f11a:	b1d0      	cbz	r0, f152 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    f11c:	b12e      	cbz	r6, f12a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    f11e:	e018      	b.n	f152 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    f120:	f44f 5191 	mov.w	r1, #4640	; 0x1220
    f124:	2039      	movs	r0, #57	; 0x39
    f126:	f7f4 fe5d 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f12a:	2200      	movs	r2, #0
    f12c:	4668      	mov	r0, sp
    f12e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f130:	f7fd ff9c 	bl	d06c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f134:	2200      	movs	r2, #0
    f136:	2101      	movs	r1, #1
    f138:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f13a:	f7fe f80c 	bl	d156 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f13e:	2204      	movs	r2, #4
    f140:	4668      	mov	r0, sp
    f142:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f144:	f7fd ff92 	bl	d06c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f148:	2200      	movs	r2, #0
    f14a:	4611      	mov	r1, r2
    f14c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f14e:	f7fe f802 	bl	d156 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f152:	4630      	mov	r0, r6
    f154:	e7c0      	b.n	f0d8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000f156 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f156:	b510      	push	{r4, lr}
    f158:	4604      	mov	r4, r0
    f15a:	2000      	movs	r0, #0
    f15c:	f000 fa18 	bl	f590 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f160:	b128      	cbz	r0, f16e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f162:	4621      	mov	r1, r4
    f164:	2000      	movs	r0, #0
    f166:	f7f5 fd55 	bl	4c14 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f16a:	2000      	movs	r0, #0
    f16c:	bd10      	pop	{r4, pc}
    f16e:	200c      	movs	r0, #12
    f170:	bd10      	pop	{r4, pc}

0000f172 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f172:	b510      	push	{r4, lr}
    f174:	7800      	ldrb	r0, [r0, #0]
    f176:	f000 0001 	and.w	r0, r0, #1
    f17a:	f7f8 f925 	bl	73c8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    f17e:	2000      	movs	r0, #0
    f180:	bd10      	pop	{r4, pc}

0000f182 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f182:	b510      	push	{r4, lr}
    f184:	4604      	mov	r4, r0
    f186:	f000 fb4b 	bl	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    f18a:	b120      	cbz	r0, f196 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f18c:	4620      	mov	r0, r4
    f18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f192:	f7fb b84b 	b.w	a22c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f196:	2001      	movs	r0, #1
    f198:	bd10      	pop	{r4, pc}

0000f19a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f19a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f19e:	4606      	mov	r6, r0
    f1a0:	7845      	ldrb	r5, [r0, #1]
    f1a2:	7800      	ldrb	r0, [r0, #0]
    f1a4:	2101      	movs	r1, #1
    f1a6:	f7fd fea0 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f1aa:	0004      	movs	r4, r0
    f1ac:	d01e      	beq.n	f1ec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    f1ae:	f7fe fe82 	bl	deb6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f1b2:	78f1      	ldrb	r1, [r6, #3]
    f1b4:	4281      	cmp	r1, r0
    f1b6:	d800      	bhi.n	f1ba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    f1b8:	4608      	mov	r0, r1
    f1ba:	4607      	mov	r7, r0
    f1bc:	2d04      	cmp	r5, #4
    f1be:	d018      	beq.n	f1f2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    f1c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f1c2:	f7fd ffeb 	bl	d19c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f1c6:	4438      	add	r0, r7
    f1c8:	b281      	uxth	r1, r0
    f1ca:	4620      	mov	r0, r4
    f1cc:	2201      	movs	r2, #1
    f1ce:	f000 f9f1 	bl	f5b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f1d2:	2800      	cmp	r0, #0
    f1d4:	d10b      	bne.n	f1ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f1d6:	2d03      	cmp	r5, #3
    f1d8:	d000      	beq.n	f1dc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f1da:	b1df      	cbz	r7, f214 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f1dc:	4620      	mov	r0, r4
    f1de:	f7fe fea1 	bl	df24 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f1e2:	7871      	ldrb	r1, [r6, #1]
    f1e4:	2903      	cmp	r1, #3
    f1e6:	d010      	beq.n	f20a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f1e8:	b9a0      	cbnz	r0, f214 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f1ea:	e004      	b.n	f1f6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    f1ec:	2042      	movs	r0, #66	; 0x42
    f1ee:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f1f2:	b97f      	cbnz	r7, f214 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f1f4:	e7f2      	b.n	f1dc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f1f6:	2904      	cmp	r1, #4
    f1f8:	d107      	bne.n	f20a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f1fa:	4620      	mov	r0, r4
    f1fc:	f7ff f863 	bl	e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f200:	b140      	cbz	r0, f214 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f202:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f204:	f7fd ff99 	bl	d13a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f208:	b120      	cbz	r0, f214 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f20a:	2d01      	cmp	r5, #1
    f20c:	d004      	beq.n	f218 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f20e:	2d03      	cmp	r5, #3
    f210:	d002      	beq.n	f218 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f212:	e00e      	b.n	f232 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    f214:	2012      	movs	r0, #18
    f216:	e7ea      	b.n	f1ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f218:	4620      	mov	r0, r4
    f21a:	f7fe fe83 	bl	df24 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f21e:	b108      	cbz	r0, f224 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    f220:	2200      	movs	r2, #0
    f222:	e002      	b.n	f22a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f224:	2d01      	cmp	r5, #1
    f226:	d013      	beq.n	f250 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    f228:	2201      	movs	r2, #1
    f22a:	4668      	mov	r0, sp
    f22c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f22e:	f7fd ff1d 	bl	d06c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f232:	2d04      	cmp	r5, #4
    f234:	d018      	beq.n	f268 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f236:	6872      	ldr	r2, [r6, #4]
    f238:	463b      	mov	r3, r7
    f23a:	2101      	movs	r1, #1
    f23c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f23e:	f7fd ff48 	bl	d0d2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f242:	b138      	cbz	r0, f254 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    f244:	7870      	ldrb	r0, [r6, #1]
    f246:	2802      	cmp	r0, #2
    f248:	d006      	beq.n	f258 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f24a:	2803      	cmp	r0, #3
    f24c:	d004      	beq.n	f258 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f24e:	e00b      	b.n	f268 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f250:	2202      	movs	r2, #2
    f252:	e7ea      	b.n	f22a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f254:	2007      	movs	r0, #7
    f256:	e7ca      	b.n	f1ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f258:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f25a:	f7fd ff9f 	bl	d19c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f25e:	4602      	mov	r2, r0
    f260:	2101      	movs	r1, #1
    f262:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f264:	f7fd ff77 	bl	d156 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f268:	2000      	movs	r0, #0
    f26a:	e7c0      	b.n	f1ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000f26c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f26c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f270:	4607      	mov	r7, r0
    f272:	7845      	ldrb	r5, [r0, #1]
    f274:	78c6      	ldrb	r6, [r0, #3]
    f276:	7800      	ldrb	r0, [r0, #0]
    f278:	2101      	movs	r1, #1
    f27a:	f7fd fe36 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f27e:	0004      	movs	r4, r0
    f280:	d003      	beq.n	f28a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    f282:	f7fe fe51 	bl	df28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f286:	b118      	cbz	r0, f290 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    f288:	e003      	b.n	f292 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f28a:	2042      	movs	r0, #66	; 0x42
    f28c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f290:	2600      	movs	r6, #0
    f292:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f294:	f7fd ff86 	bl	d1a4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f298:	4430      	add	r0, r6
    f29a:	b281      	uxth	r1, r0
    f29c:	4688      	mov	r8, r1
    f29e:	4620      	mov	r0, r4
    f2a0:	2201      	movs	r2, #1
    f2a2:	f000 f987 	bl	f5b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f2a6:	2800      	cmp	r0, #0
    f2a8:	d1f0      	bne.n	f28c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f2aa:	2d04      	cmp	r5, #4
    f2ac:	d008      	beq.n	f2c0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f2ae:	2d03      	cmp	r5, #3
    f2b0:	d00a      	beq.n	f2c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    f2b2:	b12e      	cbz	r6, f2c0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f2b4:	4620      	mov	r0, r4
    f2b6:	f7ff f806 	bl	e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f2ba:	b118      	cbz	r0, f2c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    f2bc:	200c      	movs	r0, #12
    f2be:	e7e5      	b.n	f28c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f2c0:	2012      	movs	r0, #18
    f2c2:	e7e3      	b.n	f28c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f2c4:	2d01      	cmp	r5, #1
    f2c6:	d10c      	bne.n	f2e2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    f2c8:	4620      	mov	r0, r4
    f2ca:	f7fe fe2b 	bl	df24 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f2ce:	b108      	cbz	r0, f2d4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    f2d0:	2204      	movs	r2, #4
    f2d2:	e002      	b.n	f2da <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f2d4:	2d01      	cmp	r5, #1
    f2d6:	d010      	beq.n	f2fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f2d8:	2205      	movs	r2, #5
    f2da:	4668      	mov	r0, sp
    f2dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f2de:	f7fd fec5 	bl	d06c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f2e2:	687a      	ldr	r2, [r7, #4]
    f2e4:	4633      	mov	r3, r6
    f2e6:	2100      	movs	r1, #0
    f2e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f2ea:	f7fd fef2 	bl	d0d2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f2ee:	b130      	cbz	r0, f2fe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    f2f0:	2d02      	cmp	r5, #2
    f2f2:	d006      	beq.n	f302 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f2f4:	2d03      	cmp	r5, #3
    f2f6:	d004      	beq.n	f302 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f2f8:	e008      	b.n	f30c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    f2fa:	2206      	movs	r2, #6
    f2fc:	e7ed      	b.n	f2da <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f2fe:	2007      	movs	r0, #7
    f300:	e7c4      	b.n	f28c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f302:	4642      	mov	r2, r8
    f304:	2100      	movs	r1, #0
    f306:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f308:	f7fd ff25 	bl	d156 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f30c:	2000      	movs	r0, #0
    f30e:	e7bd      	b.n	f28c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000f310 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f310:	b510      	push	{r4, lr}
    f312:	4604      	mov	r4, r0
    f314:	8880      	ldrh	r0, [r0, #4]
    f316:	b128      	cbz	r0, f324 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f318:	2801      	cmp	r0, #1
    f31a:	d003      	beq.n	f324 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f31c:	2802      	cmp	r0, #2
    f31e:	d001      	beq.n	f324 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f320:	2012      	movs	r0, #18
    f322:	bd10      	pop	{r4, pc}
    f324:	78e0      	ldrb	r0, [r4, #3]
    f326:	f000 f9dc 	bl	f6e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f32a:	b148      	cbz	r0, f340 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f32c:	78a0      	ldrb	r0, [r4, #2]
    f32e:	f000 f9d8 	bl	f6e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f332:	b128      	cbz	r0, f340 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f334:	4620      	mov	r0, r4
    f336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f33a:	2101      	movs	r1, #1
    f33c:	f000 b884 	b.w	f448 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f340:	2011      	movs	r0, #17
    f342:	bd10      	pop	{r4, pc}

0000f344 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f344:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f346:	460c      	mov	r4, r1
    f348:	4605      	mov	r5, r0
    f34a:	8800      	ldrh	r0, [r0, #0]
    f34c:	4669      	mov	r1, sp
    f34e:	f7fe f80f 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f352:	2800      	cmp	r0, #0
    f354:	d106      	bne.n	f364 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f356:	9801      	ldr	r0, [sp, #4]
    f358:	8829      	ldrh	r1, [r5, #0]
    f35a:	8021      	strh	r1, [r4, #0]
    f35c:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    f360:	8060      	strh	r0, [r4, #2]
    f362:	2000      	movs	r0, #0
    f364:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f366 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f366:	b510      	push	{r4, lr}
    f368:	4604      	mov	r4, r0
    f36a:	4601      	mov	r1, r0
    f36c:	2000      	movs	r0, #0
    f36e:	f7f5 fc39 	bl	4be4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f372:	b910      	cbnz	r0, f37a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f374:	2000      	movs	r0, #0
    f376:	6020      	str	r0, [r4, #0]
    f378:	80a0      	strh	r0, [r4, #4]
    f37a:	2000      	movs	r0, #0
    f37c:	bd10      	pop	{r4, pc}

0000f37e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f37e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f380:	8800      	ldrh	r0, [r0, #0]
    f382:	4669      	mov	r1, sp
    f384:	f7fd fff4 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f388:	b958      	cbnz	r0, f3a2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f38a:	4668      	mov	r0, sp
    f38c:	f000 fa4e 	bl	f82c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x31a>
    f390:	b138      	cbz	r0, f3a2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f392:	9c01      	ldr	r4, [sp, #4]
    f394:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    f398:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    f39c:	3470      	adds	r4, #112	; 0x70
    f39e:	b929      	cbnz	r1, f3ac <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    f3a0:	e001      	b.n	f3a6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f3a2:	2002      	movs	r0, #2
    f3a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f3a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f3aa:	b109      	cbz	r1, f3b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f3ac:	203a      	movs	r0, #58	; 0x3a
    f3ae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f3b0:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    f3b4:	f04f 0501 	mov.w	r5, #1
    f3b8:	0789      	lsls	r1, r1, #30
    f3ba:	d103      	bne.n	f3c4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    f3bc:	7005      	strb	r5, [r0, #0]
    f3be:	4668      	mov	r0, sp
    f3c0:	f7fe fb50 	bl	da64 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f3c4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    f3c8:	2000      	movs	r0, #0
    f3ca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f3cc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f3cc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f3ce:	460c      	mov	r4, r1
    f3d0:	4605      	mov	r5, r0
    f3d2:	8800      	ldrh	r0, [r0, #0]
    f3d4:	4669      	mov	r1, sp
    f3d6:	f7fd ffcb 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f3da:	b108      	cbz	r0, f3e0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f3dc:	2002      	movs	r0, #2
    f3de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f3e0:	78a8      	ldrb	r0, [r5, #2]
    f3e2:	b130      	cbz	r0, f3f2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f3e4:	f000 f9fd 	bl	f7e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d0>
    f3e8:	70a0      	strb	r0, [r4, #2]
    f3ea:	8828      	ldrh	r0, [r5, #0]
    f3ec:	8020      	strh	r0, [r4, #0]
    f3ee:	2000      	movs	r0, #0
    f3f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f3f2:	9801      	ldr	r0, [sp, #4]
    f3f4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f3f8:	e7f6      	b.n	f3e8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f3fa <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f3fa:	b510      	push	{r4, lr}
    f3fc:	f7fa ffd4 	bl	a3a8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f400:	2000      	movs	r0, #0
    f402:	bd10      	pop	{r4, pc}

0000f404 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f404:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f408:	4604      	mov	r4, r0
    f40a:	8840      	ldrh	r0, [r0, #2]
    f40c:	460d      	mov	r5, r1
    f40e:	b1b8      	cbz	r0, f440 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f410:	8820      	ldrh	r0, [r4, #0]
    f412:	4669      	mov	r1, sp
    f414:	f7fd ffac 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f418:	2800      	cmp	r0, #0
    f41a:	d10f      	bne.n	f43c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f41c:	8820      	ldrh	r0, [r4, #0]
    f41e:	8028      	strh	r0, [r5, #0]
    f420:	9e01      	ldr	r6, [sp, #4]
    f422:	f106 050c 	add.w	r5, r6, #12
    f426:	3670      	adds	r6, #112	; 0x70
    f428:	682f      	ldr	r7, [r5, #0]
    f42a:	8862      	ldrh	r2, [r4, #2]
    f42c:	4639      	mov	r1, r7
    f42e:	4630      	mov	r0, r6
    f430:	f7fe f8df 	bl	d5f2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f434:	6828      	ldr	r0, [r5, #0]
    f436:	42b8      	cmp	r0, r7
    f438:	d1f6      	bne.n	f428 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f43a:	2000      	movs	r0, #0
    f43c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f440:	2012      	movs	r0, #18
    f442:	e7fb      	b.n	f43c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f444 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f444:	f7fa bd6e 	b.w	9f24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f448 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f44c:	b086      	sub	sp, #24
    f44e:	468a      	mov	sl, r1
    f450:	4606      	mov	r6, r0
    f452:	8800      	ldrh	r0, [r0, #0]
    f454:	a901      	add	r1, sp, #4
    f456:	f7fd ff8b 	bl	d370 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f45a:	2800      	cmp	r0, #0
    f45c:	d138      	bne.n	f4d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f45e:	9802      	ldr	r0, [sp, #8]
    f460:	f04f 0800 	mov.w	r8, #0
    f464:	4601      	mov	r1, r0
    f466:	4689      	mov	r9, r1
    f468:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    f46c:	f88d 1000 	strb.w	r1, [sp]
    f470:	9900      	ldr	r1, [sp, #0]
    f472:	9100      	str	r1, [sp, #0]
    f474:	f89d 5000 	ldrb.w	r5, [sp]
    f478:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f47c:	3070      	adds	r0, #112	; 0x70
    f47e:	2921      	cmp	r1, #33	; 0x21
    f480:	d100      	bne.n	f484 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f482:	b13d      	cbz	r5, f494 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f484:	2400      	movs	r4, #0
    f486:	304c      	adds	r0, #76	; 0x4c
    f488:	2108      	movs	r1, #8
    f48a:	4607      	mov	r7, r0
    f48c:	f7ff fae8 	bl	ea60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f490:	b110      	cbz	r0, f498 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f492:	e007      	b.n	f4a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f494:	2401      	movs	r4, #1
    f496:	e7f6      	b.n	f486 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f498:	210b      	movs	r1, #11
    f49a:	4638      	mov	r0, r7
    f49c:	f7ff fae0 	bl	ea60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f4a0:	b900      	cbnz	r0, f4a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f4a2:	b1a4      	cbz	r4, f4ce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f4a4:	a804      	add	r0, sp, #16
    f4a6:	9000      	str	r0, [sp, #0]
    f4a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f4ac:	ab03      	add	r3, sp, #12
    f4ae:	4632      	mov	r2, r6
    f4b0:	4649      	mov	r1, r9
    f4b2:	f000 f976 	bl	f7a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x290>
    f4b6:	0007      	movs	r7, r0
    f4b8:	d10a      	bne.n	f4d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f4ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f4be:	9c02      	ldr	r4, [sp, #8]
    f4c0:	b148      	cbz	r0, f4d6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f4c2:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
    f4c6:	2001      	movs	r0, #1
    f4c8:	7060      	strb	r0, [r4, #1]
    f4ca:	b94d      	cbnz	r5, f4e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f4cc:	e006      	b.n	f4dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f4ce:	201a      	movs	r0, #26
    f4d0:	b006      	add	sp, #24
    f4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f4d6:	f504 7497 	add.w	r4, r4, #302	; 0x12e
    f4da:	e7f4      	b.n	f4c6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f4dc:	7820      	ldrb	r0, [r4, #0]
    f4de:	b108      	cbz	r0, f4e4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f4e0:	273a      	movs	r7, #58	; 0x3a
    f4e2:	e012      	b.n	f50a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f4e4:	f884 a000 	strb.w	sl, [r4]
    f4e8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f4ec:	70a0      	strb	r0, [r4, #2]
    f4ee:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f4f2:	70e1      	strb	r1, [r4, #3]
    f4f4:	f88d 0000 	strb.w	r0, [sp]
    f4f8:	f88d 1001 	strb.w	r1, [sp, #1]
    f4fc:	88b0      	ldrh	r0, [r6, #4]
    f4fe:	f8ad 0002 	strh.w	r0, [sp, #2]
    f502:	4669      	mov	r1, sp
    f504:	4648      	mov	r0, r9
    f506:	f7fd fff2 	bl	d4ee <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f50a:	f884 8001 	strb.w	r8, [r4, #1]
    f50e:	4638      	mov	r0, r7
    f510:	e7de      	b.n	f4d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f512 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f512:	b510      	push	{r4, lr}
    f514:	2008      	movs	r0, #8
    f516:	f7fa ffcf 	bl	a4b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f51e:	f7f8 bd13 	b.w	7f48 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f522:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f526:	4288      	cmp	r0, r1
    f528:	d303      	bcc.n	f532 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f52a:	f640 0148 	movw	r1, #2120	; 0x848
    f52e:	4288      	cmp	r0, r1
    f530:	d300      	bcc.n	f534 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f532:	4608      	mov	r0, r1
    f534:	4770      	bx	lr
    f536:	07c1      	lsls	r1, r0, #31
    f538:	d001      	beq.n	f53e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f53a:	2001      	movs	r0, #1
    f53c:	4770      	bx	lr
    f53e:	0780      	lsls	r0, r0, #30
    f540:	d501      	bpl.n	f546 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f542:	2002      	movs	r0, #2
    f544:	4770      	bx	lr
    f546:	2000      	movs	r0, #0
    f548:	4770      	bx	lr
    f54a:	b510      	push	{r4, lr}
    f54c:	2801      	cmp	r0, #1
    f54e:	d006      	beq.n	f55e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f550:	2802      	cmp	r0, #2
    f552:	d004      	beq.n	f55e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f554:	f240 2163 	movw	r1, #611	; 0x263
    f558:	2006      	movs	r0, #6
    f55a:	f7f4 fc43 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f55e:	bd10      	pop	{r4, pc}
    f560:	b50e      	push	{r1, r2, r3, lr}
    f562:	4669      	mov	r1, sp
    f564:	2001      	movs	r0, #1
    f566:	f7fd fcca 	bl	cefe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f56a:	b150      	cbz	r0, f582 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f56c:	f240 1141 	movw	r1, #321	; 0x141
    f570:	2039      	movs	r0, #57	; 0x39
    f572:	f7f4 fc37 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f576:	9802      	ldr	r0, [sp, #8]
    f578:	f7fe fea5 	bl	e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f57c:	b108      	cbz	r0, f582 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f57e:	2001      	movs	r0, #1
    f580:	bd0e      	pop	{r1, r2, r3, pc}
    f582:	4668      	mov	r0, sp
    f584:	f7f4 fe74 	bl	4270 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f588:	2800      	cmp	r0, #0
    f58a:	d0f4      	beq.n	f576 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f58c:	2000      	movs	r0, #0
    f58e:	bd0e      	pop	{r1, r2, r3, pc}
    f590:	b510      	push	{r4, lr}
    f592:	f7ff ffe5 	bl	f560 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f596:	b158      	cbz	r0, f5b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f598:	f000 f95f 	bl	f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    f59c:	4604      	mov	r4, r0
    f59e:	f7fe fcc3 	bl	df28 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f5a2:	b918      	cbnz	r0, f5ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f5a4:	4620      	mov	r0, r4
    f5a6:	f7fe fcb5 	bl	df14 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f5aa:	b108      	cbz	r0, f5b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f5ac:	2000      	movs	r0, #0
    f5ae:	bd10      	pop	{r4, pc}
    f5b0:	2001      	movs	r0, #1
    f5b2:	bd10      	pop	{r4, pc}
    f5b4:	b570      	push	{r4, r5, r6, lr}
    f5b6:	460c      	mov	r4, r1
    f5b8:	4605      	mov	r5, r0
    f5ba:	b112      	cbz	r2, f5c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f5bc:	291f      	cmp	r1, #31
    f5be:	d80c      	bhi.n	f5da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
    f5c0:	e016      	b.n	f5f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    f5c2:	f7f5 f91b 	bl	47fc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    f5c6:	42a0      	cmp	r0, r4
    f5c8:	d201      	bcs.n	f5ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    f5ca:	2007      	movs	r0, #7
    f5cc:	bd70      	pop	{r4, r5, r6, pc}
    f5ce:	4628      	mov	r0, r5
    f5d0:	f7fe fca8 	bl	df24 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f5d4:	b118      	cbz	r0, f5de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f5d6:	2c1f      	cmp	r4, #31
    f5d8:	d901      	bls.n	f5de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f5da:	2012      	movs	r0, #18
    f5dc:	bd70      	pop	{r4, r5, r6, pc}
    f5de:	4628      	mov	r0, r5
    f5e0:	f7fe fca9 	bl	df36 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f5e4:	b130      	cbz	r0, f5f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
    f5e6:	4621      	mov	r1, r4
    f5e8:	4628      	mov	r0, r5
    f5ea:	f7fe fc70 	bl	dece <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f5ee:	b118      	cbz	r0, f5f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
    f5f0:	2000      	movs	r0, #0
    f5f2:	bd70      	pop	{r4, r5, r6, pc}
    f5f4:	2042      	movs	r0, #66	; 0x42
    f5f6:	bd70      	pop	{r4, r5, r6, pc}
    f5f8:	2045      	movs	r0, #69	; 0x45
    f5fa:	bd70      	pop	{r4, r5, r6, pc}
    f5fc:	b510      	push	{r4, lr}
    f5fe:	4604      	mov	r4, r0
    f600:	7840      	ldrb	r0, [r0, #1]
    f602:	06c1      	lsls	r1, r0, #27
    f604:	d51c      	bpl.n	f640 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f606:	07c0      	lsls	r0, r0, #31
    f608:	d00b      	beq.n	f622 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f60a:	f7fa ff0b 	bl	a424 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f60e:	b1b8      	cbz	r0, f640 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f610:	7860      	ldrb	r0, [r4, #1]
    f612:	06c1      	lsls	r1, r0, #27
    f614:	d405      	bmi.n	f622 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f616:	0700      	lsls	r0, r0, #28
    f618:	d503      	bpl.n	f622 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f61a:	7d20      	ldrb	r0, [r4, #20]
    f61c:	2802      	cmp	r0, #2
    f61e:	d10f      	bne.n	f640 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f620:	e010      	b.n	f644 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f622:	7d20      	ldrb	r0, [r4, #20]
    f624:	2802      	cmp	r0, #2
    f626:	d001      	beq.n	f62c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
    f628:	7ea0      	ldrb	r0, [r4, #26]
    f62a:	b948      	cbnz	r0, f640 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f62c:	7860      	ldrb	r0, [r4, #1]
    f62e:	0700      	lsls	r0, r0, #28
    f630:	d408      	bmi.n	f644 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f632:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f63a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    f63e:	d201      	bcs.n	f644 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f640:	2011      	movs	r0, #17
    f642:	bd10      	pop	{r4, pc}
    f644:	2000      	movs	r0, #0
    f646:	bd10      	pop	{r4, pc}
    f648:	b538      	push	{r3, r4, r5, lr}
    f64a:	4604      	mov	r4, r0
    f64c:	7800      	ldrb	r0, [r0, #0]
    f64e:	28ef      	cmp	r0, #239	; 0xef
    f650:	d843      	bhi.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f652:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f656:	f8ad 0000 	strh.w	r0, [sp]
    f65a:	9800      	ldr	r0, [sp, #0]
    f65c:	f000 f951 	bl	f902 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    f660:	b3a0      	cbz	r0, f6cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f662:	7861      	ldrb	r1, [r4, #1]
    f664:	0708      	lsls	r0, r1, #28
    f666:	d40b      	bmi.n	f680 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
    f668:	f8d4 0002 	ldr.w	r0, [r4, #2]
    f66c:	f8d4 3005 	ldr.w	r3, [r4, #5]
    f670:	0a02      	lsrs	r2, r0, #8
    f672:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    f676:	d830      	bhi.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f678:	2220      	movs	r2, #32
    f67a:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f67e:	d82c      	bhi.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f680:	7a60      	ldrb	r0, [r4, #9]
    f682:	b318      	cbz	r0, f6cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f684:	2807      	cmp	r0, #7
    f686:	d828      	bhi.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f688:	7aa0      	ldrb	r0, [r4, #10]
    f68a:	b128      	cbz	r0, f698 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f68c:	2801      	cmp	r0, #1
    f68e:	d003      	beq.n	f698 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f690:	2802      	cmp	r0, #2
    f692:	d001      	beq.n	f698 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f694:	2803      	cmp	r0, #3
    f696:	d120      	bne.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f698:	074a      	lsls	r2, r1, #29
    f69a:	d403      	bmi.n	f6a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f69c:	2802      	cmp	r0, #2
    f69e:	d001      	beq.n	f6a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f6a0:	2803      	cmp	r0, #3
    f6a2:	d105      	bne.n	f6b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    f6a4:	7ae0      	ldrb	r0, [r4, #11]
    f6a6:	b108      	cbz	r0, f6ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f6a8:	2801      	cmp	r0, #1
    f6aa:	d116      	bne.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f6ac:	0748      	lsls	r0, r1, #29
    f6ae:	d407      	bmi.n	f6c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f6b0:	7ca0      	ldrb	r0, [r4, #18]
    f6b2:	b128      	cbz	r0, f6c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f6b4:	2801      	cmp	r0, #1
    f6b6:	d003      	beq.n	f6c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f6b8:	2802      	cmp	r0, #2
    f6ba:	d001      	beq.n	f6c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f6bc:	2803      	cmp	r0, #3
    f6be:	d10c      	bne.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f6c0:	06c8      	lsls	r0, r1, #27
    f6c2:	7d20      	ldrb	r0, [r4, #20]
    f6c4:	d503      	bpl.n	f6ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
    f6c6:	2801      	cmp	r0, #1
    f6c8:	d107      	bne.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f6ca:	e002      	b.n	f6d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    f6cc:	e005      	b.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f6ce:	2802      	cmp	r0, #2
    f6d0:	d003      	beq.n	f6da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f6d2:	7e20      	ldrb	r0, [r4, #24]
    f6d4:	b118      	cbz	r0, f6de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f6d6:	2801      	cmp	r0, #1
    f6d8:	d001      	beq.n	f6de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f6da:	2012      	movs	r0, #18
    f6dc:	bd38      	pop	{r3, r4, r5, pc}
    f6de:	2000      	movs	r0, #0
    f6e0:	bd38      	pop	{r3, r4, r5, pc}
    f6e2:	b510      	push	{r4, lr}
    f6e4:	0004      	movs	r4, r0
    f6e6:	d005      	beq.n	f6f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f6e8:	f7fa fef6 	bl	a4d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f6ec:	4384      	bics	r4, r0
    f6ee:	d001      	beq.n	f6f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f6f0:	2000      	movs	r0, #0
    f6f2:	bd10      	pop	{r4, pc}
    f6f4:	2001      	movs	r0, #1
    f6f6:	bd10      	pop	{r4, pc}
    f6f8:	28fb      	cmp	r0, #251	; 0xfb
    f6fa:	d803      	bhi.n	f704 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f6fc:	f640 0048 	movw	r0, #2120	; 0x848
    f700:	4281      	cmp	r1, r0
    f702:	d901      	bls.n	f708 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f704:	2011      	movs	r0, #17
    f706:	4770      	bx	lr
    f708:	2000      	movs	r0, #0
    f70a:	4770      	bx	lr
    f70c:	381b      	subs	r0, #27
    f70e:	28e1      	cmp	r0, #225	; 0xe1
    f710:	d206      	bcs.n	f720 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f712:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f716:	d303      	bcc.n	f720 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f718:	f244 2090 	movw	r0, #17040	; 0x4290
    f71c:	4281      	cmp	r1, r0
    f71e:	d901      	bls.n	f724 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
    f720:	2012      	movs	r0, #18
    f722:	4770      	bx	lr
    f724:	2000      	movs	r0, #0
    f726:	4770      	bx	lr
    f728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f72c:	4606      	mov	r6, r0
    f72e:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f732:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f736:	4615      	mov	r5, r2
    f738:	302c      	adds	r0, #44	; 0x2c
    f73a:	f7f7 fe4b 	bl	73d4 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    f73e:	4680      	mov	r8, r0
    f740:	2102      	movs	r1, #2
    f742:	f7fd fea5 	bl	d490 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f746:	4287      	cmp	r7, r0
    f748:	d200      	bcs.n	f74c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
    f74a:	4638      	mov	r0, r7
    f74c:	4607      	mov	r7, r0
    f74e:	2102      	movs	r1, #2
    f750:	4640      	mov	r0, r8
    f752:	f7fd fe9d 	bl	d490 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f756:	4284      	cmp	r4, r0
    f758:	d200      	bcs.n	f75c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
    f75a:	4620      	mov	r0, r4
    f75c:	8831      	ldrh	r1, [r6, #0]
    f75e:	8029      	strh	r1, [r5, #0]
    f760:	2f1b      	cmp	r7, #27
    f762:	d913      	bls.n	f78c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
    f764:	2ffb      	cmp	r7, #251	; 0xfb
    f766:	d300      	bcc.n	f76a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f768:	27fb      	movs	r7, #251	; 0xfb
    f76a:	806f      	strh	r7, [r5, #2]
    f76c:	281b      	cmp	r0, #27
    f76e:	d90f      	bls.n	f790 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f770:	28fb      	cmp	r0, #251	; 0xfb
    f772:	d300      	bcc.n	f776 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f774:	20fb      	movs	r0, #251	; 0xfb
    f776:	80e8      	strh	r0, [r5, #6]
    f778:	4640      	mov	r0, r8
    f77a:	f7ff fed2 	bl	f522 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f77e:	80a8      	strh	r0, [r5, #4]
    f780:	4640      	mov	r0, r8
    f782:	f7ff fece 	bl	f522 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f786:	8128      	strh	r0, [r5, #8]
    f788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f78c:	271b      	movs	r7, #27
    f78e:	e7ec      	b.n	f76a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f790:	201b      	movs	r0, #27
    f792:	e7f0      	b.n	f776 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f794:	b510      	push	{r4, lr}
    f796:	f7ff fee3 	bl	f560 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f79a:	2800      	cmp	r0, #0
    f79c:	d000      	beq.n	f7a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
    f79e:	2001      	movs	r0, #1
    f7a0:	bd10      	pop	{r4, pc}
    f7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7a6:	7890      	ldrb	r0, [r2, #2]
    f7a8:	9e06      	ldr	r6, [sp, #24]
    f7aa:	461d      	mov	r5, r3
    f7ac:	4614      	mov	r4, r2
    f7ae:	b908      	cbnz	r0, f7b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
    f7b0:	f7fa fe92 	bl	a4d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f7b4:	78e4      	ldrb	r4, [r4, #3]
    f7b6:	4607      	mov	r7, r0
    f7b8:	b914      	cbnz	r4, f7c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ae>
    f7ba:	f7fa fe8d 	bl	a4d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f7be:	4604      	mov	r4, r0
    f7c0:	b16f      	cbz	r7, f7de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
    f7c2:	b164      	cbz	r4, f7de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
    f7c4:	4638      	mov	r0, r7
    f7c6:	f7ff feb6 	bl	f536 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f7ca:	4620      	mov	r0, r4
    f7cc:	f7ff feb3 	bl	f536 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f7d0:	b12f      	cbz	r7, f7de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
    f7d2:	b124      	cbz	r4, f7de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
    f7d4:	702f      	strb	r7, [r5, #0]
    f7d6:	7034      	strb	r4, [r6, #0]
    f7d8:	2000      	movs	r0, #0
    f7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7de:	2009      	movs	r0, #9
    f7e0:	e7fb      	b.n	f7da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
    f7e2:	b510      	push	{r4, lr}
    f7e4:	f7fc fb11 	bl	be0a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f7e8:	b928      	cbnz	r0, f7f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    f7ea:	f7fc fb44 	bl	be76 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f7ee:	b910      	cbnz	r0, f7f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    f7f0:	f7fc fb4b 	bl	be8a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f7f4:	b108      	cbz	r0, f7fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e8>
    f7f6:	2008      	movs	r0, #8
    f7f8:	bd10      	pop	{r4, pc}
    f7fa:	f7fc fadb 	bl	bdb4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f7fe:	b940      	cbnz	r0, f812 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f800:	f7fc fae2 	bl	bdc8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f804:	b928      	cbnz	r0, f812 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f806:	f7fc faf6 	bl	bdf6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f80a:	b910      	cbnz	r0, f812 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f80c:	f7fc fb07 	bl	be1e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f810:	b108      	cbz	r0, f816 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x304>
    f812:	2004      	movs	r0, #4
    f814:	bd10      	pop	{r4, pc}
    f816:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    f81a:	2039      	movs	r0, #57	; 0x39
    f81c:	f7f4 fae2 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f820:	b510      	push	{r4, lr}
    f822:	f7fa fe53 	bl	a4cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f826:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f82a:	bd10      	pop	{r4, pc}
    f82c:	6840      	ldr	r0, [r0, #4]
    f82e:	f000 b800 	b.w	f832 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x320>
    f832:	b508      	push	{r3, lr}
    f834:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    f838:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    f83c:	f88d 0000 	strb.w	r0, [sp]
    f840:	9800      	ldr	r0, [sp, #0]
    f842:	9000      	str	r0, [sp, #0]
    f844:	f89d 0000 	ldrb.w	r0, [sp]
    f848:	1e40      	subs	r0, r0, #1
    f84a:	4208      	tst	r0, r1
    f84c:	d003      	beq.n	f856 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    f84e:	2904      	cmp	r1, #4
    f850:	d001      	beq.n	f856 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    f852:	2001      	movs	r0, #1
    f854:	bd08      	pop	{r3, pc}
    f856:	2000      	movs	r0, #0
    f858:	bd08      	pop	{r3, pc}
    f85a:	b510      	push	{r4, lr}
    f85c:	2101      	movs	r1, #1
    f85e:	2000      	movs	r0, #0
    f860:	f7fd fb43 	bl	ceea <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f864:	0004      	movs	r4, r0
    f866:	d108      	bne.n	f87a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f868:	2200      	movs	r2, #0
    f86a:	2101      	movs	r1, #1
    f86c:	4610      	mov	r0, r2
    f86e:	f7fd fb32 	bl	ced6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f872:	0004      	movs	r4, r0
    f874:	d003      	beq.n	f87e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36c>
    f876:	f7fe faf2 	bl	de5e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f87a:	4620      	mov	r0, r4
    f87c:	bd10      	pop	{r4, pc}
    f87e:	f44f 7108 	mov.w	r1, #544	; 0x220
    f882:	2039      	movs	r0, #57	; 0x39
    f884:	f7f4 faae 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f888:	b570      	push	{r4, r5, r6, lr}
    f88a:	4605      	mov	r5, r0
    f88c:	f7fe fb53 	bl	df36 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f890:	b170      	cbz	r0, f8b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
    f892:	4628      	mov	r0, r5
    f894:	f7fe fd17 	bl	e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f898:	2800      	cmp	r0, #0
    f89a:	d008      	beq.n	f8ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
    f89c:	4628      	mov	r0, r5
    f89e:	f7fe fd0f 	bl	e2c0 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    f8a2:	4604      	mov	r4, r0
    f8a4:	4628      	mov	r0, r5
    f8a6:	f7fe fce5 	bl	e274 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    f8aa:	b118      	cbz	r0, f8b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
    f8ac:	200c      	movs	r0, #12
    f8ae:	bd70      	pop	{r4, r5, r6, pc}
    f8b0:	2042      	movs	r0, #66	; 0x42
    f8b2:	bd70      	pop	{r4, r5, r6, pc}
    f8b4:	b164      	cbz	r4, f8d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    f8b6:	8820      	ldrh	r0, [r4, #0]
    f8b8:	f7fd fc9a 	bl	d1f0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f8bc:	8820      	ldrh	r0, [r4, #0]
    f8be:	2100      	movs	r1, #0
    f8c0:	f7f4 fd26 	bl	4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f8c4:	b120      	cbz	r0, f8d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    f8c6:	f241 41b9 	movw	r1, #5305	; 0x14b9
    f8ca:	2039      	movs	r0, #57	; 0x39
    f8cc:	f7f4 fa8a 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8d0:	2000      	movs	r0, #0
    f8d2:	bd70      	pop	{r4, r5, r6, pc}
    f8d4:	b530      	push	{r4, r5, lr}
    f8d6:	f340 0400 	sbfx	r4, r0, #0, #1
    f8da:	f340 0040 	sbfx	r0, r0, #1, #1
    f8de:	1c40      	adds	r0, r0, #1
    f8e0:	9d03      	ldr	r5, [sp, #12]
    f8e2:	1c64      	adds	r4, r4, #1
    f8e4:	d000      	beq.n	f8e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
    f8e6:	b119      	cbz	r1, f8f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    f8e8:	b100      	cbz	r0, f8ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
    f8ea:	b10a      	cbz	r2, f8f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    f8ec:	b91c      	cbnz	r4, f8f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
    f8ee:	e001      	b.n	f8f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
    f8f0:	2011      	movs	r0, #17
    f8f2:	bd30      	pop	{r4, r5, pc}
    f8f4:	2100      	movs	r1, #0
    f8f6:	7019      	strb	r1, [r3, #0]
    f8f8:	b900      	cbnz	r0, f8fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
    f8fa:	2200      	movs	r2, #0
    f8fc:	702a      	strb	r2, [r5, #0]
    f8fe:	2000      	movs	r0, #0
    f900:	bd30      	pop	{r4, r5, pc}
    f902:	b2c0      	uxtb	r0, r0
    f904:	06c1      	lsls	r1, r0, #27
    f906:	d40c      	bmi.n	f922 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
    f908:	0681      	lsls	r1, r0, #26
    f90a:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    f90e:	d503      	bpl.n	f918 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    f910:	b9d1      	cbnz	r1, f948 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f912:	0781      	lsls	r1, r0, #30
    f914:	d418      	bmi.n	f948 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f916:	e001      	b.n	f91c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
    f918:	2900      	cmp	r1, #0
    f91a:	d1fa      	bne.n	f912 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    f91c:	0700      	lsls	r0, r0, #28
    f91e:	d413      	bmi.n	f948 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f920:	e010      	b.n	f944 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    f922:	0641      	lsls	r1, r0, #25
    f924:	d410      	bmi.n	f948 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f926:	0681      	lsls	r1, r0, #26
    f928:	d40e      	bmi.n	f948 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f92a:	07c1      	lsls	r1, r0, #31
    f92c:	ea4f 7180 	mov.w	r1, r0, lsl #30
    f930:	d004      	beq.n	f93c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    f932:	2900      	cmp	r1, #0
    f934:	db02      	blt.n	f93c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    f936:	0740      	lsls	r0, r0, #29
    f938:	d404      	bmi.n	f944 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    f93a:	e005      	b.n	f948 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f93c:	0701      	lsls	r1, r0, #28
    f93e:	d403      	bmi.n	f948 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f940:	0740      	lsls	r0, r0, #29
    f942:	d401      	bmi.n	f948 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f944:	2001      	movs	r0, #1
    f946:	4770      	bx	lr
    f948:	2000      	movs	r0, #0
    f94a:	4770      	bx	lr
    f94c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f94e:	4669      	mov	r1, sp
    f950:	2001      	movs	r0, #1
    f952:	f7fd fad4 	bl	cefe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f956:	b178      	cbz	r0, f978 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f958:	f240 115f 	movw	r1, #351	; 0x15f
    f95c:	2039      	movs	r0, #57	; 0x39
    f95e:	f7f4 fa41 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f962:	9c02      	ldr	r4, [sp, #8]
    f964:	4620      	mov	r0, r4
    f966:	f7fe fcae 	bl	e2c6 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f96a:	b128      	cbz	r0, f978 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f96c:	4620      	mov	r0, r4
    f96e:	f7fe fb10 	bl	df92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    f972:	b108      	cbz	r0, f978 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f974:	2001      	movs	r0, #1
    f976:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f978:	4668      	mov	r0, sp
    f97a:	f7f4 fc79 	bl	4270 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f97e:	2800      	cmp	r0, #0
    f980:	d0ef      	beq.n	f962 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    f982:	2000      	movs	r0, #0
    f984:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f986 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f986:	6802      	ldr	r2, [r0, #0]
    f988:	b912      	cbnz	r2, f990 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f98a:	6001      	str	r1, [r0, #0]
    f98c:	4770      	bx	lr
    f98e:	4602      	mov	r2, r0
    f990:	6850      	ldr	r0, [r2, #4]
    f992:	b108      	cbz	r0, f998 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f994:	428a      	cmp	r2, r1
    f996:	d1fa      	bne.n	f98e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f998:	428a      	cmp	r2, r1
    f99a:	d0f7      	beq.n	f98c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f99c:	6051      	str	r1, [r2, #4]
    f99e:	4770      	bx	lr
    f9a0:	b510      	push	{r4, lr}
    f9a2:	f7fe fc93 	bl	e2cc <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    f9a6:	b108      	cbz	r0, f9ac <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f9a8:	21f3      	movs	r1, #243	; 0xf3
    f9aa:	e003      	b.n	f9b4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    f9ac:	f7f6 fea6 	bl	66fc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    f9b0:	b118      	cbz	r0, f9ba <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    f9b2:	21f8      	movs	r1, #248	; 0xf8
    f9b4:	2001      	movs	r0, #1
    f9b6:	f7f4 fa15 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9be:	2001      	movs	r0, #1
    f9c0:	f7f4 bbec 	b.w	419c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f9c4:	b510      	push	{r4, lr}
    f9c6:	4604      	mov	r4, r0
    f9c8:	e002      	b.n	f9d0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    f9ca:	6820      	ldr	r0, [r4, #0]
    f9cc:	4780      	blx	r0
    f9ce:	6864      	ldr	r4, [r4, #4]
    f9d0:	2c00      	cmp	r4, #0
    f9d2:	d1fa      	bne.n	f9ca <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    f9d4:	bd10      	pop	{r4, pc}
    f9d6:	b510      	push	{r4, lr}
    f9d8:	2000      	movs	r0, #0
    f9da:	f7f4 fbdf 	bl	419c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f9de:	f7f4 fe15 	bl	460c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f9e2:	f7f5 f8e1 	bl	4ba8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f9e6:	f7f5 fad5 	bl	4f94 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f9ea:	2800      	cmp	r0, #0
    f9ec:	d003      	beq.n	f9f6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    f9ee:	21d0      	movs	r1, #208	; 0xd0
    f9f0:	2001      	movs	r0, #1
    f9f2:	f7f4 f9f7 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9f6:	bd10      	pop	{r4, pc}
    f9f8:	b510      	push	{r4, lr}
    f9fa:	f7ff ffd1 	bl	f9a0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    f9fe:	f7fe ffef 	bl	e9e0 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    fa02:	2800      	cmp	r0, #0
    fa04:	d004      	beq.n	fa10 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8a>
    fa06:	f240 1111 	movw	r1, #273	; 0x111
    fa0a:	2001      	movs	r0, #1
    fa0c:	f7f4 f9ea 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa10:	bd10      	pop	{r4, pc}

0000fa12 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    fa12:	f7f3 be5b 	b.w	36cc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    fa16:	0001      	.short	0x0001
    fa18:	0002000b 	.word	0x0002000b
    fa1c:	0005000a 	.word	0x0005000a
    fa20:	000a0009 	.word	0x000a0009
    fa24:	00140008 	.word	0x00140008
    fa28:	001e0007 	.word	0x001e0007
    fa2c:	00320006 	.word	0x00320006
    fa30:	004b0005 	.word	0x004b0005
    fa34:	00640004 	.word	0x00640004
    fa38:	00960003 	.word	0x00960003
    fa3c:	00fa0002 	.word	0x00fa0002
    fa40:	01f40001 	.word	0x01f40001
	...

0000fa46 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    fa46:	b510      	push	{r4, lr}
    fa48:	f7fb f936 	bl	acb8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    fa4c:	f000 f850 	bl	faf0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    fa50:	f7fa fdb0 	bl	a5b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    fa54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa58:	f7fa beae 	b.w	a7b8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000fa5c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    fa5c:	b510      	push	{r4, lr}
    fa5e:	24c8      	movs	r4, #200	; 0xc8
    fa60:	1e64      	subs	r4, r4, #1
    fa62:	b2e4      	uxtb	r4, r4
    fa64:	f7fa fdc4 	bl	a5f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    fa68:	2802      	cmp	r0, #2
    fa6a:	d003      	beq.n	fa74 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    fa6c:	2801      	cmp	r0, #1
    fa6e:	d000      	beq.n	fa72 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    fa70:	2000      	movs	r0, #0
    fa72:	bd10      	pop	{r4, pc}
    fa74:	2c00      	cmp	r4, #0
    fa76:	d1f3      	bne.n	fa60 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    fa78:	2193      	movs	r1, #147	; 0x93
    fa7a:	203b      	movs	r0, #59	; 0x3b
    fa7c:	f7f4 f9b2 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fa80 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    fa80:	b510      	push	{r4, lr}
    fa82:	f7f4 f87d 	bl	3b80 <mpsl_fem_lna_configuration_clear>
    fa86:	2800      	cmp	r0, #0
    fa88:	d005      	beq.n	fa96 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fa8a:	1c40      	adds	r0, r0, #1
    fa8c:	d003      	beq.n	fa96 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fa8e:	2150      	movs	r1, #80	; 0x50
    fa90:	2040      	movs	r0, #64	; 0x40
    fa92:	f7f4 f9a7 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa96:	bd10      	pop	{r4, pc}

0000fa98 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    fa98:	b510      	push	{r4, lr}
    fa9a:	f7f4 f87d 	bl	3b98 <mpsl_fem_pa_configuration_clear>
    fa9e:	2800      	cmp	r0, #0
    faa0:	d005      	beq.n	faae <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    faa2:	1c40      	adds	r0, r0, #1
    faa4:	d003      	beq.n	faae <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    faa6:	2149      	movs	r1, #73	; 0x49
    faa8:	2040      	movs	r0, #64	; 0x40
    faaa:	f7f4 f99b 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faae:	bd10      	pop	{r4, pc}

0000fab0 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    fab0:	b510      	push	{r4, lr}
    fab2:	f7f4 f85f 	bl	3b74 <mpsl_fem_disable>
    fab6:	2800      	cmp	r0, #0
    fab8:	d005      	beq.n	fac6 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    faba:	1c40      	adds	r0, r0, #1
    fabc:	d003      	beq.n	fac6 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fabe:	2157      	movs	r1, #87	; 0x57
    fac0:	2040      	movs	r0, #64	; 0x40
    fac2:	f7f4 f98f 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fac6:	bd10      	pop	{r4, pc}

0000fac8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    fac8:	b510      	push	{r4, lr}
    faca:	2100      	movs	r1, #0
    facc:	4608      	mov	r0, r1
    face:	f7f4 f85d 	bl	3b8c <mpsl_fem_lna_configuration_set>
    fad2:	b108      	cbz	r0, fad8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    fad4:	2000      	movs	r0, #0
    fad6:	bd10      	pop	{r4, pc}
    fad8:	2001      	movs	r0, #1
    fada:	bd10      	pop	{r4, pc}

0000fadc <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    fadc:	b508      	push	{r3, lr}
    fade:	4668      	mov	r0, sp
    fae0:	f7f4 f866 	bl	3bb0 <mpsl_fem_pa_is_configured>
    fae4:	f89d 0000 	ldrb.w	r0, [sp]
    fae8:	2800      	cmp	r0, #0
    faea:	d000      	beq.n	faee <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    faec:	2001      	movs	r0, #1
    faee:	bd08      	pop	{r3, pc}

0000faf0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    faf0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    faf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    faf8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    fafc:	f3bf 8f4f 	dsb	sy
    fb00:	f3bf 8f6f 	isb	sy
    fb04:	f7fa bf32 	b.w	a96c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    fb08:	2800      	cmp	r0, #0
    fb0a:	db09      	blt.n	fb20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    fb0c:	f000 021f 	and.w	r2, r0, #31
    fb10:	2101      	movs	r1, #1
    fb12:	4091      	lsls	r1, r2
    fb14:	0940      	lsrs	r0, r0, #5
    fb16:	0080      	lsls	r0, r0, #2
    fb18:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fb1c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fb20:	4770      	bx	lr
    fb22:	2800      	cmp	r0, #0
    fb24:	db0d      	blt.n	fb42 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    fb26:	f000 021f 	and.w	r2, r0, #31
    fb2a:	2101      	movs	r1, #1
    fb2c:	4091      	lsls	r1, r2
    fb2e:	0940      	lsrs	r0, r0, #5
    fb30:	0080      	lsls	r0, r0, #2
    fb32:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fb36:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fb3a:	f3bf 8f4f 	dsb	sy
    fb3e:	f3bf 8f6f 	isb	sy
    fb42:	4770      	bx	lr

0000fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    fb44:	b510      	push	{r4, lr}
    fb46:	2801      	cmp	r0, #1
    fb48:	d006      	beq.n	fb58 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    fb4a:	2802      	cmp	r0, #2
    fb4c:	d006      	beq.n	fb5c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    fb4e:	f640 3164 	movw	r1, #2916	; 0xb64
    fb52:	203e      	movs	r0, #62	; 0x3e
    fb54:	f7f4 f946 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb58:	2028      	movs	r0, #40	; 0x28
    fb5a:	bd10      	pop	{r4, pc}
    fb5c:	2018      	movs	r0, #24
    fb5e:	bd10      	pop	{r4, pc}

0000fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    fb60:	b510      	push	{r4, lr}
    fb62:	2801      	cmp	r0, #1
    fb64:	d006      	beq.n	fb74 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    fb66:	2802      	cmp	r0, #2
    fb68:	d007      	beq.n	fb7a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    fb6a:	f640 3178 	movw	r1, #2936	; 0xb78
    fb6e:	203e      	movs	r0, #62	; 0x3e
    fb70:	f7f4 f938 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb74:	f641 6014 	movw	r0, #7700	; 0x1e14
    fb78:	bd10      	pop	{r4, pc}
    fb7a:	f241 1030 	movw	r0, #4400	; 0x1130
    fb7e:	bd10      	pop	{r4, pc}

0000fb80 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    fb80:	f7fb bdc2 	b.w	b708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    fb84:	b510      	push	{r4, lr}
    fb86:	460a      	mov	r2, r1
    fb88:	b130      	cbz	r0, fb98 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    fb8a:	2801      	cmp	r0, #1
    fb8c:	d00b      	beq.n	fba6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    fb8e:	f240 6127 	movw	r1, #1575	; 0x627
    fb92:	203e      	movs	r0, #62	; 0x3e
    fb94:	f7f4 f926 	bl	3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb9c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    fba0:	4610      	mov	r0, r2
    fba2:	f7fa bd79 	b.w	a698 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    fba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbaa:	f102 0129 	add.w	r1, r2, #41	; 0x29
    fbae:	4610      	mov	r0, r2
    fbb0:	f7fa bd5c 	b.w	a66c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000fbb4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    fbb4:	b570      	push	{r4, r5, r6, lr}
    fbb6:	4605      	mov	r5, r0
    fbb8:	4614      	mov	r4, r2
    fbba:	4608      	mov	r0, r1
    fbbc:	f7ff ffd0 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fbc0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    fbc4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    fbc8:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    fbcc:	4620      	mov	r0, r4
    fbce:	f7ff ffc7 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fbd2:	4428      	add	r0, r5
    fbd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fbd8:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    fbdc:	fbb0 f5f1 	udiv	r5, r0, r1
    fbe0:	4620      	mov	r0, r4
    fbe2:	f7ff ffaf 	bl	fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fbe6:	4428      	add	r0, r5
    fbe8:	1d40      	adds	r0, r0, #5
    fbea:	bd70      	pop	{r4, r5, r6, pc}

0000fbec <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    fbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbf0:	4607      	mov	r7, r0
    fbf2:	461d      	mov	r5, r3
    fbf4:	460e      	mov	r6, r1
    fbf6:	4614      	mov	r4, r2
    fbf8:	4610      	mov	r0, r2
    fbfa:	f7ff ffb1 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fbfe:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    fc02:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    fc06:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    fc0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fc0e:	2e02      	cmp	r6, #2
    fc10:	d00e      	beq.n	fc30 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    fc12:	f240 52dc 	movw	r2, #1500	; 0x5dc
    fc16:	4411      	add	r1, r2
    fc18:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    fc1c:	fbb1 f6f0 	udiv	r6, r1, r0
    fc20:	4620      	mov	r0, r4
    fc22:	f7ff ff8f 	bl	fb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fc26:	4430      	add	r0, r6
    fc28:	4428      	add	r0, r5
    fc2a:	1d40      	adds	r0, r0, #5
    fc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc30:	4602      	mov	r2, r0
    fc32:	e7f0      	b.n	fc16 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000fc34 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    fc34:	b510      	push	{r4, lr}
    fc36:	4604      	mov	r4, r0
    fc38:	4608      	mov	r0, r1
    fc3a:	f7ff ff91 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fc3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fc42:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fc46:	fbb0 f0f1 	udiv	r0, r0, r1
    fc4a:	1a20      	subs	r0, r4, r0
    fc4c:	1e80      	subs	r0, r0, #2
    fc4e:	bd10      	pop	{r4, pc}

0000fc50 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    fc50:	b510      	push	{r4, lr}
    fc52:	4604      	mov	r4, r0
    fc54:	4608      	mov	r0, r1
    fc56:	f7ff ff83 	bl	fb60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fc5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fc5e:	fbb0 f0f1 	udiv	r0, r0, r1
    fc62:	1a20      	subs	r0, r4, r0
    fc64:	bd10      	pop	{r4, pc}

0000fc66 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    fc66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc6a:	2902      	cmp	r1, #2
    fc6c:	d008      	beq.n	fc80 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    fc6e:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fc72:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    fc76:	fbb1 f1f2 	udiv	r1, r1, r2
    fc7a:	4408      	add	r0, r1
    fc7c:	1e80      	subs	r0, r0, #2
    fc7e:	4770      	bx	lr
    fc80:	4611      	mov	r1, r2
    fc82:	e7f6      	b.n	fc72 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000fc84 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    fc84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc88:	2902      	cmp	r1, #2
    fc8a:	d007      	beq.n	fc9c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    fc8c:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fc90:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    fc94:	fbb1 f1f2 	udiv	r1, r1, r2
    fc98:	4408      	add	r0, r1
    fc9a:	4770      	bx	lr
    fc9c:	4611      	mov	r1, r2
    fc9e:	e7f7      	b.n	fc90 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    fca0:	1702080c 	.word	0x1702080c
    fca4:	0201010d 	.word	0x0201010d
    fca8:	01010909 	.word	0x01010909
    fcac:	18090206 	.word	0x18090206
    fcb0:	01010318 	.word	0x01010318
    fcb4:	03030909 	.word	0x03030909
    fcb8:	00000005 	.word	0x00000005

0000fcbc <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
    fcbc:	4b01      	ldr	r3, [pc, #4]	; (fcc4 <app_button_cb+0x8>)
    fcbe:	7818      	ldrb	r0, [r3, #0]
    fcc0:	4770      	bx	lr
    fcc2:	bf00      	nop
    fcc4:	20003f6e 	.word	0x20003f6e

0000fcc8 <security_changed>:
{
    fcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcca:	b093      	sub	sp, #76	; 0x4c
    fccc:	460e      	mov	r6, r1
    fcce:	4615      	mov	r5, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fcd0:	f01b fd4b 	bl	2b76a <bt_conn_get_dst>
    fcd4:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    fcd6:	7803      	ldrb	r3, [r0, #0]
    fcd8:	2b03      	cmp	r3, #3
    fcda:	d832      	bhi.n	fd42 <security_changed+0x7a>
    fcdc:	e8df f003 	tbb	[pc, r3]
    fce0:	2c272202 	.word	0x2c272202
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    fce4:	491d      	ldr	r1, [pc, #116]	; (fd5c <security_changed+0x94>)
    fce6:	a807      	add	r0, sp, #28
    fce8:	f01a fd52 	bl	2a790 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fcec:	79a3      	ldrb	r3, [r4, #6]
    fcee:	7962      	ldrb	r2, [r4, #5]
    fcf0:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fcf2:	78e0      	ldrb	r0, [r4, #3]
    fcf4:	78a7      	ldrb	r7, [r4, #2]
    fcf6:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fcf8:	f10d 0c1c 	add.w	ip, sp, #28
    fcfc:	f8cd c014 	str.w	ip, [sp, #20]
    fd00:	9404      	str	r4, [sp, #16]
    fd02:	9703      	str	r7, [sp, #12]
    fd04:	9002      	str	r0, [sp, #8]
    fd06:	9101      	str	r1, [sp, #4]
    fd08:	9200      	str	r2, [sp, #0]
    fd0a:	4a15      	ldr	r2, [pc, #84]	; (fd60 <security_changed+0x98>)
    fd0c:	211e      	movs	r1, #30
    fd0e:	a80a      	add	r0, sp, #40	; 0x28
    fd10:	f018 fb25 	bl	2835e <snprintk>
	if (!err) {
    fd14:	b9dd      	cbnz	r5, fd4e <security_changed+0x86>
		printk("Security changed: %s level %u\n", addr, level);
    fd16:	4632      	mov	r2, r6
    fd18:	a90a      	add	r1, sp, #40	; 0x28
    fd1a:	4812      	ldr	r0, [pc, #72]	; (fd64 <security_changed+0x9c>)
    fd1c:	f018 fb11 	bl	28342 <printk>
}
    fd20:	b013      	add	sp, #76	; 0x4c
    fd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    fd24:	4910      	ldr	r1, [pc, #64]	; (fd68 <security_changed+0xa0>)
    fd26:	a807      	add	r0, sp, #28
    fd28:	f01a fd32 	bl	2a790 <strcpy>
		break;
    fd2c:	e7de      	b.n	fcec <security_changed+0x24>
		strcpy(type, "public-id");
    fd2e:	490f      	ldr	r1, [pc, #60]	; (fd6c <security_changed+0xa4>)
    fd30:	a807      	add	r0, sp, #28
    fd32:	f01a fd2d 	bl	2a790 <strcpy>
		break;
    fd36:	e7d9      	b.n	fcec <security_changed+0x24>
		strcpy(type, "random-id");
    fd38:	490d      	ldr	r1, [pc, #52]	; (fd70 <security_changed+0xa8>)
    fd3a:	a807      	add	r0, sp, #28
    fd3c:	f01a fd28 	bl	2a790 <strcpy>
		break;
    fd40:	e7d4      	b.n	fcec <security_changed+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fd42:	4a0c      	ldr	r2, [pc, #48]	; (fd74 <security_changed+0xac>)
    fd44:	210a      	movs	r1, #10
    fd46:	a807      	add	r0, sp, #28
    fd48:	f018 fb09 	bl	2835e <snprintk>
		break;
    fd4c:	e7ce      	b.n	fcec <security_changed+0x24>
		printk("Security failed: %s level %u err %d\n", addr, level,
    fd4e:	462b      	mov	r3, r5
    fd50:	4632      	mov	r2, r6
    fd52:	a90a      	add	r1, sp, #40	; 0x28
    fd54:	4808      	ldr	r0, [pc, #32]	; (fd78 <security_changed+0xb0>)
    fd56:	f018 faf4 	bl	28342 <printk>
}
    fd5a:	e7e1      	b.n	fd20 <security_changed+0x58>
    fd5c:	0002f5b8 	.word	0x0002f5b8
    fd60:	0002f5e8 	.word	0x0002f5e8
    fd64:	0002f60c 	.word	0x0002f60c
    fd68:	0002f5c0 	.word	0x0002f5c0
    fd6c:	0002f5c8 	.word	0x0002f5c8
    fd70:	0002f5d4 	.word	0x0002f5d4
    fd74:	0002f5e0 	.word	0x0002f5e0
    fd78:	0002f62c 	.word	0x0002f62c

0000fd7c <disconnected>:
{
    fd7c:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
    fd7e:	4803      	ldr	r0, [pc, #12]	; (fd8c <disconnected+0x10>)
    fd80:	f018 fadf 	bl	28342 <printk>
	dk_set_led_off(CON_STATUS_LED);
    fd84:	2001      	movs	r0, #1
    fd86:	f01e fa94 	bl	2e2b2 <dk_set_led_off>
}
    fd8a:	bd08      	pop	{r3, pc}
    fd8c:	0002f654 	.word	0x0002f654

0000fd90 <connected>:
{
    fd90:	b538      	push	{r3, r4, r5, lr}
	if (err) {
    fd92:	b9e1      	cbnz	r1, fdce <connected+0x3e>
	printk("Connected\n");
    fd94:	4815      	ldr	r0, [pc, #84]	; (fdec <connected+0x5c>)
    fd96:	f018 fad4 	bl	28342 <printk>
	printk("1.led_pwm = %d\n",led_pwm);
    fd9a:	4c15      	ldr	r4, [pc, #84]	; (fdf0 <connected+0x60>)
    fd9c:	6821      	ldr	r1, [r4, #0]
    fd9e:	4815      	ldr	r0, [pc, #84]	; (fdf4 <connected+0x64>)
    fda0:	f018 facf 	bl	28342 <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    fda4:	4814      	ldr	r0, [pc, #80]	; (fdf8 <connected+0x68>)
    fda6:	f011 fcc3 	bl	21730 <z_impl_device_get_binding>
	led_pwm = device_get_binding(LED_PWM_DEV_NAME);
    fdaa:	6020      	str	r0, [r4, #0]
	if (led_pwm) {
    fdac:	b198      	cbz	r0, fdd6 <connected+0x46>
		printk("Found device %s", LED_PWM_DEV_NAME);
    fdae:	4d12      	ldr	r5, [pc, #72]	; (fdf8 <connected+0x68>)
    fdb0:	4c12      	ldr	r4, [pc, #72]	; (fdfc <connected+0x6c>)
    fdb2:	4629      	mov	r1, r5
    fdb4:	4620      	mov	r0, r4
    fdb6:	f018 fac4 	bl	28342 <printk>
		printk("Found device %s", LED_PWM_DEV_NAME);
    fdba:	4629      	mov	r1, r5
    fdbc:	4620      	mov	r0, r4
    fdbe:	f018 fac0 	bl	28342 <printk>
	printk("2.led_pwm = %d\n",led_pwm);
    fdc2:	4b0b      	ldr	r3, [pc, #44]	; (fdf0 <connected+0x60>)
    fdc4:	6819      	ldr	r1, [r3, #0]
    fdc6:	480e      	ldr	r0, [pc, #56]	; (fe00 <connected+0x70>)
    fdc8:	f018 fabb 	bl	28342 <printk>
}
    fdcc:	bd38      	pop	{r3, r4, r5, pc}
		printk("Connection failed (err %u)\n", err);
    fdce:	480d      	ldr	r0, [pc, #52]	; (fe04 <connected+0x74>)
    fdd0:	f018 fab7 	bl	28342 <printk>
		return;
    fdd4:	e7fa      	b.n	fdcc <connected+0x3c>
		LOG_ERR("Device %s not found", LED_PWM_DEV_NAME);
    fdd6:	4c08      	ldr	r4, [pc, #32]	; (fdf8 <connected+0x68>)
    fdd8:	4622      	mov	r2, r4
    fdda:	2145      	movs	r1, #69	; 0x45
    fddc:	480a      	ldr	r0, [pc, #40]	; (fe08 <connected+0x78>)
    fdde:	f018 fe51 	bl	28a84 <z_log_minimal_printk>
		printk("Device %s not found", LED_PWM_DEV_NAME);
    fde2:	4621      	mov	r1, r4
    fde4:	4809      	ldr	r0, [pc, #36]	; (fe0c <connected+0x7c>)
    fde6:	f018 faac 	bl	28342 <printk>
		return;
    fdea:	e7ef      	b.n	fdcc <connected+0x3c>
    fdec:	0002f68c 	.word	0x0002f68c
    fdf0:	200020a0 	.word	0x200020a0
    fdf4:	0002f698 	.word	0x0002f698
    fdf8:	0002f6a8 	.word	0x0002f6a8
    fdfc:	0002f6b0 	.word	0x0002f6b0
    fe00:	0002f6c0 	.word	0x0002f6c0
    fe04:	0002f670 	.word	0x0002f670
    fe08:	0002f6d0 	.word	0x0002f6d0
    fe0c:	0002f6ec 	.word	0x0002f6ec

0000fe10 <init_button>:
		app_button_state = user_button_state ? true : false;
	}
}

static int init_button(void)
{
    fe10:	b510      	push	{r4, lr}
	int err;

	err = dk_buttons_init(button_changed);
    fe12:	4806      	ldr	r0, [pc, #24]	; (fe2c <init_button+0x1c>)
    fe14:	f00f fea4 	bl	1fb60 <dk_buttons_init>
	if (err) {
    fe18:	4604      	mov	r4, r0
    fe1a:	b908      	cbnz	r0, fe20 <init_button+0x10>
		printk("Cannot init buttons (err: %d)\n", err);
	}

	return err;
}
    fe1c:	4620      	mov	r0, r4
    fe1e:	bd10      	pop	{r4, pc}
		printk("Cannot init buttons (err: %d)\n", err);
    fe20:	4601      	mov	r1, r0
    fe22:	4803      	ldr	r0, [pc, #12]	; (fe30 <init_button+0x20>)
    fe24:	f018 fa8d 	bl	28342 <printk>
	return err;
    fe28:	e7f8      	b.n	fe1c <init_button+0xc>
    fe2a:	bf00      	nop
    fe2c:	0000fe35 	.word	0x0000fe35
    fe30:	0002f700 	.word	0x0002f700

0000fe34 <button_changed>:
	if (has_changed & USER_BUTTON) {
    fe34:	f011 0f01 	tst.w	r1, #1
    fe38:	d100      	bne.n	fe3c <button_changed+0x8>
    fe3a:	4770      	bx	lr
{
    fe3c:	b510      	push	{r4, lr}
		bt_lbs_send_button_state(user_button_state);
    fe3e:	f000 0401 	and.w	r4, r0, #1
    fe42:	4620      	mov	r0, r4
    fe44:	f002 fbd4 	bl	125f0 <bt_lbs_send_button_state>
		app_button_state = user_button_state ? true : false;
    fe48:	4b01      	ldr	r3, [pc, #4]	; (fe50 <button_changed+0x1c>)
    fe4a:	701c      	strb	r4, [r3, #0]
}
    fe4c:	bd10      	pop	{r4, pc}
    fe4e:	bf00      	nop
    fe50:	20003f6e 	.word	0x20003f6e

0000fe54 <run_led_test>:
{
    fe54:	b570      	push	{r4, r5, r6, lr}
    fe56:	4605      	mov	r5, r0
    fe58:	460e      	mov	r6, r1
	printk("  Increasing brightness gradually");
    fe5a:	4821      	ldr	r0, [pc, #132]	; (fee0 <run_led_test+0x8c>)
    fe5c:	f018 fa71 	bl	28342 <printk>
	for (level = 0; level <= MAX_BRIGHTNESS; level++) {
    fe60:	2400      	movs	r4, #0
    fe62:	e009      	b.n	fe78 <run_led_test+0x24>
{
	const struct led_driver_api *api =
		(const struct led_driver_api *)dev->api;

	if (api->set_brightness == NULL) {
		return -ENOSYS;
    fe64:	f06f 0057 	mvn.w	r0, #87	; 0x57
    fe68:	e012      	b.n	fe90 <run_led_test+0x3c>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    fe6a:	f44f 70a4 	mov.w	r0, #328	; 0x148
    fe6e:	2100      	movs	r1, #0
    fe70:	f014 fb34 	bl	244dc <z_impl_k_sleep>
    fe74:	3401      	adds	r4, #1
    fe76:	b2a4      	uxth	r4, r4
    fe78:	2c64      	cmp	r4, #100	; 0x64
    fe7a:	d810      	bhi.n	fe9e <run_led_test+0x4a>
		err = led_set_brightness(led_pwm, led, level);
    fe7c:	b2e2      	uxtb	r2, r4
	const struct led_driver_api *api =
    fe7e:	68ab      	ldr	r3, [r5, #8]
	if (api->set_brightness == NULL) {
    fe80:	691b      	ldr	r3, [r3, #16]
    fe82:	2b00      	cmp	r3, #0
    fe84:	d0ee      	beq.n	fe64 <run_led_test+0x10>
	}
	return api->set_brightness(dev, led, value);
    fe86:	4631      	mov	r1, r6
    fe88:	4628      	mov	r0, r5
    fe8a:	4798      	blx	r3
		if (err < 0) {
    fe8c:	2800      	cmp	r0, #0
    fe8e:	daec      	bge.n	fe6a <run_led_test+0x16>
			LOG_ERR("err=%d brightness=%d\n", err, level);
    fe90:	4623      	mov	r3, r4
    fe92:	4602      	mov	r2, r0
    fe94:	2145      	movs	r1, #69	; 0x45
    fe96:	4813      	ldr	r0, [pc, #76]	; (fee4 <run_led_test+0x90>)
    fe98:	f018 fdf4 	bl	28a84 <z_log_minimal_printk>
}
    fe9c:	bd70      	pop	{r4, r5, r6, pc}
    fe9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fea2:	2100      	movs	r1, #0
    fea4:	f014 fb1a 	bl	244dc <z_impl_k_sleep>
	for (level = MAX_BRIGHTNESS; level >= 0; level--) {
    fea8:	2464      	movs	r4, #100	; 0x64
		err = led_set_brightness(led_pwm, led, level);
    feaa:	b2e2      	uxtb	r2, r4
	const struct led_driver_api *api =
    feac:	68ab      	ldr	r3, [r5, #8]
	if (api->set_brightness == NULL) {
    feae:	691b      	ldr	r3, [r3, #16]
    feb0:	b163      	cbz	r3, fecc <run_led_test+0x78>
	return api->set_brightness(dev, led, value);
    feb2:	4631      	mov	r1, r6
    feb4:	4628      	mov	r0, r5
    feb6:	4798      	blx	r3
		if (err < 0) {
    feb8:	2800      	cmp	r0, #0
    feba:	db09      	blt.n	fed0 <run_led_test+0x7c>
    febc:	f44f 70a4 	mov.w	r0, #328	; 0x148
    fec0:	2100      	movs	r1, #0
    fec2:	f014 fb0b 	bl	244dc <z_impl_k_sleep>
	for (level = MAX_BRIGHTNESS; level >= 0; level--) {
    fec6:	3c01      	subs	r4, #1
    fec8:	b2a4      	uxth	r4, r4
    feca:	e7ee      	b.n	feaa <run_led_test+0x56>
		return -ENOSYS;
    fecc:	f06f 0057 	mvn.w	r0, #87	; 0x57
			LOG_ERR("err=%d brightness=%d\n", err, level);
    fed0:	4623      	mov	r3, r4
    fed2:	4602      	mov	r2, r0
    fed4:	2145      	movs	r1, #69	; 0x45
    fed6:	4803      	ldr	r0, [pc, #12]	; (fee4 <run_led_test+0x90>)
    fed8:	f018 fdd4 	bl	28a84 <z_log_minimal_printk>
			return;
    fedc:	e7de      	b.n	fe9c <run_led_test+0x48>
    fede:	bf00      	nop
    fee0:	0002f720 	.word	0x0002f720
    fee4:	0002f744 	.word	0x0002f744

0000fee8 <app_led_cb>:
{
    fee8:	b508      	push	{r3, lr}
	if(led_state)
    feea:	b128      	cbz	r0, fef8 <app_led_cb+0x10>
		run_led_test(led_pwm,0);
    feec:	2100      	movs	r1, #0
    feee:	4b11      	ldr	r3, [pc, #68]	; (ff34 <app_led_cb+0x4c>)
    fef0:	6818      	ldr	r0, [r3, #0]
    fef2:	f7ff ffaf 	bl	fe54 <run_led_test>
}
    fef6:	bd08      	pop	{r3, pc}
		dk_set_led(DK_LED1, true);
    fef8:	2101      	movs	r1, #1
    fefa:	2000      	movs	r0, #0
    fefc:	f00f ffd4 	bl	1fea8 <dk_set_led>
		dk_set_led(DK_LED2, true);
    ff00:	2101      	movs	r1, #1
    ff02:	4608      	mov	r0, r1
    ff04:	f00f ffd0 	bl	1fea8 <dk_set_led>
		dk_set_led(DK_LED3, true);
    ff08:	2101      	movs	r1, #1
    ff0a:	2002      	movs	r0, #2
    ff0c:	f00f ffcc 	bl	1fea8 <dk_set_led>
    ff10:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ff14:	2100      	movs	r1, #0
    ff16:	f014 fae1 	bl	244dc <z_impl_k_sleep>
		dk_set_led(DK_LED1, false);
    ff1a:	2100      	movs	r1, #0
    ff1c:	4608      	mov	r0, r1
    ff1e:	f00f ffc3 	bl	1fea8 <dk_set_led>
		dk_set_led(DK_LED2, false);
    ff22:	2100      	movs	r1, #0
    ff24:	2001      	movs	r0, #1
    ff26:	f00f ffbf 	bl	1fea8 <dk_set_led>
		dk_set_led(DK_LED3, false);
    ff2a:	2100      	movs	r1, #0
    ff2c:	2002      	movs	r0, #2
    ff2e:	f00f ffbb 	bl	1fea8 <dk_set_led>
}
    ff32:	e7e0      	b.n	fef6 <app_led_cb+0xe>
    ff34:	200020a0 	.word	0x200020a0

0000ff38 <auth_cancel>:
{
    ff38:	b570      	push	{r4, r5, r6, lr}
    ff3a:	b092      	sub	sp, #72	; 0x48
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ff3c:	f01b fc15 	bl	2b76a <bt_conn_get_dst>
    ff40:	4604      	mov	r4, r0
	switch (addr->type) {
    ff42:	7803      	ldrb	r3, [r0, #0]
    ff44:	2b03      	cmp	r3, #3
    ff46:	d82e      	bhi.n	ffa6 <auth_cancel+0x6e>
    ff48:	e8df f003 	tbb	[pc, r3]
    ff4c:	28231e02 	.word	0x28231e02
		strcpy(type, "public");
    ff50:	4918      	ldr	r1, [pc, #96]	; (ffb4 <auth_cancel+0x7c>)
    ff52:	a807      	add	r0, sp, #28
    ff54:	f01a fc1c 	bl	2a790 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    ff58:	79a3      	ldrb	r3, [r4, #6]
    ff5a:	7962      	ldrb	r2, [r4, #5]
    ff5c:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    ff5e:	78e0      	ldrb	r0, [r4, #3]
    ff60:	78a5      	ldrb	r5, [r4, #2]
    ff62:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ff64:	ae07      	add	r6, sp, #28
    ff66:	9605      	str	r6, [sp, #20]
    ff68:	9404      	str	r4, [sp, #16]
    ff6a:	9503      	str	r5, [sp, #12]
    ff6c:	9002      	str	r0, [sp, #8]
    ff6e:	9101      	str	r1, [sp, #4]
    ff70:	9200      	str	r2, [sp, #0]
    ff72:	4a11      	ldr	r2, [pc, #68]	; (ffb8 <auth_cancel+0x80>)
    ff74:	211e      	movs	r1, #30
    ff76:	a80a      	add	r0, sp, #40	; 0x28
    ff78:	f018 f9f1 	bl	2835e <snprintk>
	printk("Pairing cancelled: %s\n", addr);
    ff7c:	a90a      	add	r1, sp, #40	; 0x28
    ff7e:	480f      	ldr	r0, [pc, #60]	; (ffbc <auth_cancel+0x84>)
    ff80:	f018 f9df 	bl	28342 <printk>
}
    ff84:	b012      	add	sp, #72	; 0x48
    ff86:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ff88:	490d      	ldr	r1, [pc, #52]	; (ffc0 <auth_cancel+0x88>)
    ff8a:	a807      	add	r0, sp, #28
    ff8c:	f01a fc00 	bl	2a790 <strcpy>
		break;
    ff90:	e7e2      	b.n	ff58 <auth_cancel+0x20>
		strcpy(type, "public-id");
    ff92:	490c      	ldr	r1, [pc, #48]	; (ffc4 <auth_cancel+0x8c>)
    ff94:	a807      	add	r0, sp, #28
    ff96:	f01a fbfb 	bl	2a790 <strcpy>
		break;
    ff9a:	e7dd      	b.n	ff58 <auth_cancel+0x20>
		strcpy(type, "random-id");
    ff9c:	490a      	ldr	r1, [pc, #40]	; (ffc8 <auth_cancel+0x90>)
    ff9e:	a807      	add	r0, sp, #28
    ffa0:	f01a fbf6 	bl	2a790 <strcpy>
		break;
    ffa4:	e7d8      	b.n	ff58 <auth_cancel+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ffa6:	4a09      	ldr	r2, [pc, #36]	; (ffcc <auth_cancel+0x94>)
    ffa8:	210a      	movs	r1, #10
    ffaa:	a807      	add	r0, sp, #28
    ffac:	f018 f9d7 	bl	2835e <snprintk>
		break;
    ffb0:	e7d2      	b.n	ff58 <auth_cancel+0x20>
    ffb2:	bf00      	nop
    ffb4:	0002f5b8 	.word	0x0002f5b8
    ffb8:	0002f5e8 	.word	0x0002f5e8
    ffbc:	0002f760 	.word	0x0002f760
    ffc0:	0002f5c0 	.word	0x0002f5c0
    ffc4:	0002f5c8 	.word	0x0002f5c8
    ffc8:	0002f5d4 	.word	0x0002f5d4
    ffcc:	0002f5e0 	.word	0x0002f5e0

0000ffd0 <pairing_complete>:
{
    ffd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffd2:	b093      	sub	sp, #76	; 0x4c
    ffd4:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ffd6:	f01b fbc8 	bl	2b76a <bt_conn_get_dst>
    ffda:	4604      	mov	r4, r0
	switch (addr->type) {
    ffdc:	7803      	ldrb	r3, [r0, #0]
    ffde:	2b03      	cmp	r3, #3
    ffe0:	d82f      	bhi.n	10042 <pairing_complete+0x72>
    ffe2:	e8df f003 	tbb	[pc, r3]
    ffe6:	1f02      	.short	0x1f02
    ffe8:	2924      	.short	0x2924
		strcpy(type, "public");
    ffea:	4919      	ldr	r1, [pc, #100]	; (10050 <pairing_complete+0x80>)
    ffec:	a807      	add	r0, sp, #28
    ffee:	f01a fbcf 	bl	2a790 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fff2:	79a3      	ldrb	r3, [r4, #6]
    fff4:	7962      	ldrb	r2, [r4, #5]
    fff6:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fff8:	78e0      	ldrb	r0, [r4, #3]
    fffa:	78a6      	ldrb	r6, [r4, #2]
    fffc:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fffe:	af07      	add	r7, sp, #28
   10000:	9705      	str	r7, [sp, #20]
   10002:	9404      	str	r4, [sp, #16]
   10004:	9603      	str	r6, [sp, #12]
   10006:	9002      	str	r0, [sp, #8]
   10008:	9101      	str	r1, [sp, #4]
   1000a:	9200      	str	r2, [sp, #0]
   1000c:	4a11      	ldr	r2, [pc, #68]	; (10054 <pairing_complete+0x84>)
   1000e:	211e      	movs	r1, #30
   10010:	a80a      	add	r0, sp, #40	; 0x28
   10012:	f018 f9a4 	bl	2835e <snprintk>
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   10016:	462a      	mov	r2, r5
   10018:	a90a      	add	r1, sp, #40	; 0x28
   1001a:	480f      	ldr	r0, [pc, #60]	; (10058 <pairing_complete+0x88>)
   1001c:	f018 f991 	bl	28342 <printk>
}
   10020:	b013      	add	sp, #76	; 0x4c
   10022:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10024:	490d      	ldr	r1, [pc, #52]	; (1005c <pairing_complete+0x8c>)
   10026:	a807      	add	r0, sp, #28
   10028:	f01a fbb2 	bl	2a790 <strcpy>
		break;
   1002c:	e7e1      	b.n	fff2 <pairing_complete+0x22>
		strcpy(type, "public-id");
   1002e:	490c      	ldr	r1, [pc, #48]	; (10060 <pairing_complete+0x90>)
   10030:	a807      	add	r0, sp, #28
   10032:	f01a fbad 	bl	2a790 <strcpy>
		break;
   10036:	e7dc      	b.n	fff2 <pairing_complete+0x22>
		strcpy(type, "random-id");
   10038:	490a      	ldr	r1, [pc, #40]	; (10064 <pairing_complete+0x94>)
   1003a:	a807      	add	r0, sp, #28
   1003c:	f01a fba8 	bl	2a790 <strcpy>
		break;
   10040:	e7d7      	b.n	fff2 <pairing_complete+0x22>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10042:	4a09      	ldr	r2, [pc, #36]	; (10068 <pairing_complete+0x98>)
   10044:	210a      	movs	r1, #10
   10046:	a807      	add	r0, sp, #28
   10048:	f018 f989 	bl	2835e <snprintk>
		break;
   1004c:	e7d1      	b.n	fff2 <pairing_complete+0x22>
   1004e:	bf00      	nop
   10050:	0002f5b8 	.word	0x0002f5b8
   10054:	0002f5e8 	.word	0x0002f5e8
   10058:	0002f778 	.word	0x0002f778
   1005c:	0002f5c0 	.word	0x0002f5c0
   10060:	0002f5c8 	.word	0x0002f5c8
   10064:	0002f5d4 	.word	0x0002f5d4
   10068:	0002f5e0 	.word	0x0002f5e0

0001006c <pairing_failed>:
{
   1006c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1006e:	b093      	sub	sp, #76	; 0x4c
   10070:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10072:	f01b fb7a 	bl	2b76a <bt_conn_get_dst>
   10076:	4604      	mov	r4, r0
	switch (addr->type) {
   10078:	7803      	ldrb	r3, [r0, #0]
   1007a:	2b03      	cmp	r3, #3
   1007c:	d82f      	bhi.n	100de <pairing_failed+0x72>
   1007e:	e8df f003 	tbb	[pc, r3]
   10082:	1f02      	.short	0x1f02
   10084:	2924      	.short	0x2924
		strcpy(type, "public");
   10086:	4919      	ldr	r1, [pc, #100]	; (100ec <pairing_failed+0x80>)
   10088:	a807      	add	r0, sp, #28
   1008a:	f01a fb81 	bl	2a790 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1008e:	79a3      	ldrb	r3, [r4, #6]
   10090:	7962      	ldrb	r2, [r4, #5]
   10092:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10094:	78e0      	ldrb	r0, [r4, #3]
   10096:	78a6      	ldrb	r6, [r4, #2]
   10098:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1009a:	af07      	add	r7, sp, #28
   1009c:	9705      	str	r7, [sp, #20]
   1009e:	9404      	str	r4, [sp, #16]
   100a0:	9603      	str	r6, [sp, #12]
   100a2:	9002      	str	r0, [sp, #8]
   100a4:	9101      	str	r1, [sp, #4]
   100a6:	9200      	str	r2, [sp, #0]
   100a8:	4a11      	ldr	r2, [pc, #68]	; (100f0 <pairing_failed+0x84>)
   100aa:	211e      	movs	r1, #30
   100ac:	a80a      	add	r0, sp, #40	; 0x28
   100ae:	f018 f956 	bl	2835e <snprintk>
	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   100b2:	462a      	mov	r2, r5
   100b4:	a90a      	add	r1, sp, #40	; 0x28
   100b6:	480f      	ldr	r0, [pc, #60]	; (100f4 <pairing_failed+0x88>)
   100b8:	f018 f943 	bl	28342 <printk>
}
   100bc:	b013      	add	sp, #76	; 0x4c
   100be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   100c0:	490d      	ldr	r1, [pc, #52]	; (100f8 <pairing_failed+0x8c>)
   100c2:	a807      	add	r0, sp, #28
   100c4:	f01a fb64 	bl	2a790 <strcpy>
		break;
   100c8:	e7e1      	b.n	1008e <pairing_failed+0x22>
		strcpy(type, "public-id");
   100ca:	490c      	ldr	r1, [pc, #48]	; (100fc <pairing_failed+0x90>)
   100cc:	a807      	add	r0, sp, #28
   100ce:	f01a fb5f 	bl	2a790 <strcpy>
		break;
   100d2:	e7dc      	b.n	1008e <pairing_failed+0x22>
		strcpy(type, "random-id");
   100d4:	490a      	ldr	r1, [pc, #40]	; (10100 <pairing_failed+0x94>)
   100d6:	a807      	add	r0, sp, #28
   100d8:	f01a fb5a 	bl	2a790 <strcpy>
		break;
   100dc:	e7d7      	b.n	1008e <pairing_failed+0x22>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   100de:	4a09      	ldr	r2, [pc, #36]	; (10104 <pairing_failed+0x98>)
   100e0:	210a      	movs	r1, #10
   100e2:	a807      	add	r0, sp, #28
   100e4:	f018 f93b 	bl	2835e <snprintk>
		break;
   100e8:	e7d1      	b.n	1008e <pairing_failed+0x22>
   100ea:	bf00      	nop
   100ec:	0002f5b8 	.word	0x0002f5b8
   100f0:	0002f5e8 	.word	0x0002f5e8
   100f4:	0002f79c 	.word	0x0002f79c
   100f8:	0002f5c0 	.word	0x0002f5c0
   100fc:	0002f5c8 	.word	0x0002f5c8
   10100:	0002f5d4 	.word	0x0002f5d4
   10104:	0002f5e0 	.word	0x0002f5e0

00010108 <auth_passkey_display>:
{
   10108:	b5f0      	push	{r4, r5, r6, r7, lr}
   1010a:	b093      	sub	sp, #76	; 0x4c
   1010c:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1010e:	f01b fb2c 	bl	2b76a <bt_conn_get_dst>
   10112:	4604      	mov	r4, r0
	switch (addr->type) {
   10114:	7803      	ldrb	r3, [r0, #0]
   10116:	2b03      	cmp	r3, #3
   10118:	d82f      	bhi.n	1017a <auth_passkey_display+0x72>
   1011a:	e8df f003 	tbb	[pc, r3]
   1011e:	1f02      	.short	0x1f02
   10120:	2924      	.short	0x2924
		strcpy(type, "public");
   10122:	4919      	ldr	r1, [pc, #100]	; (10188 <auth_passkey_display+0x80>)
   10124:	a807      	add	r0, sp, #28
   10126:	f01a fb33 	bl	2a790 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1012a:	79a3      	ldrb	r3, [r4, #6]
   1012c:	7962      	ldrb	r2, [r4, #5]
   1012e:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10130:	78e0      	ldrb	r0, [r4, #3]
   10132:	78a6      	ldrb	r6, [r4, #2]
   10134:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10136:	af07      	add	r7, sp, #28
   10138:	9705      	str	r7, [sp, #20]
   1013a:	9404      	str	r4, [sp, #16]
   1013c:	9603      	str	r6, [sp, #12]
   1013e:	9002      	str	r0, [sp, #8]
   10140:	9101      	str	r1, [sp, #4]
   10142:	9200      	str	r2, [sp, #0]
   10144:	4a11      	ldr	r2, [pc, #68]	; (1018c <auth_passkey_display+0x84>)
   10146:	211e      	movs	r1, #30
   10148:	a80a      	add	r0, sp, #40	; 0x28
   1014a:	f018 f908 	bl	2835e <snprintk>
	printk("Passkey for %s: %06u\n", addr, passkey);
   1014e:	462a      	mov	r2, r5
   10150:	a90a      	add	r1, sp, #40	; 0x28
   10152:	480f      	ldr	r0, [pc, #60]	; (10190 <auth_passkey_display+0x88>)
   10154:	f018 f8f5 	bl	28342 <printk>
}
   10158:	b013      	add	sp, #76	; 0x4c
   1015a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1015c:	490d      	ldr	r1, [pc, #52]	; (10194 <auth_passkey_display+0x8c>)
   1015e:	a807      	add	r0, sp, #28
   10160:	f01a fb16 	bl	2a790 <strcpy>
		break;
   10164:	e7e1      	b.n	1012a <auth_passkey_display+0x22>
		strcpy(type, "public-id");
   10166:	490c      	ldr	r1, [pc, #48]	; (10198 <auth_passkey_display+0x90>)
   10168:	a807      	add	r0, sp, #28
   1016a:	f01a fb11 	bl	2a790 <strcpy>
		break;
   1016e:	e7dc      	b.n	1012a <auth_passkey_display+0x22>
		strcpy(type, "random-id");
   10170:	490a      	ldr	r1, [pc, #40]	; (1019c <auth_passkey_display+0x94>)
   10172:	a807      	add	r0, sp, #28
   10174:	f01a fb0c 	bl	2a790 <strcpy>
		break;
   10178:	e7d7      	b.n	1012a <auth_passkey_display+0x22>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1017a:	4a09      	ldr	r2, [pc, #36]	; (101a0 <auth_passkey_display+0x98>)
   1017c:	210a      	movs	r1, #10
   1017e:	a807      	add	r0, sp, #28
   10180:	f018 f8ed 	bl	2835e <snprintk>
		break;
   10184:	e7d1      	b.n	1012a <auth_passkey_display+0x22>
   10186:	bf00      	nop
   10188:	0002f5b8 	.word	0x0002f5b8
   1018c:	0002f5e8 	.word	0x0002f5e8
   10190:	0002f7c0 	.word	0x0002f7c0
   10194:	0002f5c0 	.word	0x0002f5c0
   10198:	0002f5c8 	.word	0x0002f5c8
   1019c:	0002f5d4 	.word	0x0002f5d4
   101a0:	0002f5e0 	.word	0x0002f5e0

000101a4 <main>:

void main(void)
{
   101a4:	b530      	push	{r4, r5, lr}
   101a6:	b089      	sub	sp, #36	; 0x24
	int err;




	printk("Starting Bluetooth Peripheral LBS example\n");
   101a8:	482a      	ldr	r0, [pc, #168]	; (10254 <main+0xb0>)
   101aa:	f018 f8ca 	bl	28342 <printk>

	err = dk_leds_init();
   101ae:	f00f fe1d 	bl	1fdec <dk_leds_init>
	if (err) {
   101b2:	2800      	cmp	r0, #0
   101b4:	d137      	bne.n	10226 <main+0x82>
		printk("LEDs init failed (err %d)\n", err);
		return;
	}

	err = init_button();
   101b6:	f7ff fe2b 	bl	fe10 <init_button>
	if (err) {
   101ba:	4601      	mov	r1, r0
   101bc:	2800      	cmp	r0, #0
   101be:	d138      	bne.n	10232 <main+0x8e>
		printk("Button init failed (err %d)\n", err);
		return;
	}

	bt_conn_cb_register(&conn_callbacks);
   101c0:	4825      	ldr	r0, [pc, #148]	; (10258 <main+0xb4>)
   101c2:	f007 fce7 	bl	17b94 <bt_conn_cb_register>
	if (IS_ENABLED(CONFIG_BT_LBS_SECURITY_ENABLED)) {
		bt_conn_auth_cb_register(&conn_auth_callbacks);
   101c6:	4825      	ldr	r0, [pc, #148]	; (1025c <main+0xb8>)
   101c8:	f007 fecc 	bl	17f64 <bt_conn_auth_cb_register>
	}

	err = bt_enable(NULL);
   101cc:	2000      	movs	r0, #0
   101ce:	f005 ff01 	bl	15fd4 <bt_enable>
	if (err) {
   101d2:	4601      	mov	r1, r0
   101d4:	2800      	cmp	r0, #0
   101d6:	d130      	bne.n	1023a <main+0x96>
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	printk("Bluetooth initialized\n");
   101d8:	4821      	ldr	r0, [pc, #132]	; (10260 <main+0xbc>)
   101da:	f018 f8b2 	bl	28342 <printk>

	//if (IS_ENABLED(CONFIG_SETTINGS)) {
		settings_load();
   101de:	f019 f824 	bl	2922a <settings_load>
	//}

	err = bt_lbs_init(&lbs_callbacs);
   101e2:	4820      	ldr	r0, [pc, #128]	; (10264 <main+0xc0>)
   101e4:	f002 f9fa 	bl	125dc <bt_lbs_init>
	if (err) {
   101e8:	4601      	mov	r1, r0
   101ea:	bb50      	cbnz	r0, 10242 <main+0x9e>
		printk("Failed to init LBS (err:%d)\n", err);
		return;
	}

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   101ec:	ac03      	add	r4, sp, #12
   101ee:	4d1e      	ldr	r5, [pc, #120]	; (10268 <main+0xc4>)
   101f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   101f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   101f4:	682b      	ldr	r3, [r5, #0]
   101f6:	6023      	str	r3, [r4, #0]
   101f8:	2301      	movs	r3, #1
   101fa:	9300      	str	r3, [sp, #0]
   101fc:	4b1b      	ldr	r3, [pc, #108]	; (1026c <main+0xc8>)
   101fe:	2202      	movs	r2, #2
   10200:	491b      	ldr	r1, [pc, #108]	; (10270 <main+0xcc>)
   10202:	a803      	add	r0, sp, #12
   10204:	f006 fdf6 	bl	16df4 <bt_le_adv_start>
			      sd, ARRAY_SIZE(sd));
	if (err) {
   10208:	4601      	mov	r1, r0
   1020a:	b9f0      	cbnz	r0, 1024a <main+0xa6>
		printk("Advertising failed to start (err %d)\n", err);
		return;
	}

	printk("Advertising successfully started\n");
   1020c:	4819      	ldr	r0, [pc, #100]	; (10274 <main+0xd0>)
   1020e:	f018 f898 	bl	28342 <printk>
	printk("jest dokladnie %d tyle ledow PWM\n",num_leds);
   10212:	2101      	movs	r1, #1
   10214:	4818      	ldr	r0, [pc, #96]	; (10278 <main+0xd4>)
   10216:	f018 f894 	bl	28342 <printk>
   1021a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1021e:	2100      	movs	r1, #0
   10220:	f014 f95c 	bl	244dc <z_impl_k_sleep>

	for (;;) {
   10224:	e7f9      	b.n	1021a <main+0x76>
   10226:	4601      	mov	r1, r0
		printk("LEDs init failed (err %d)\n", err);
   10228:	4814      	ldr	r0, [pc, #80]	; (1027c <main+0xd8>)
   1022a:	f018 f88a 	bl	28342 <printk>
		//dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		//run_led_test(led_pwm, 0);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   1022e:	b009      	add	sp, #36	; 0x24
   10230:	bd30      	pop	{r4, r5, pc}
		printk("Button init failed (err %d)\n", err);
   10232:	4813      	ldr	r0, [pc, #76]	; (10280 <main+0xdc>)
   10234:	f018 f885 	bl	28342 <printk>
		return;
   10238:	e7f9      	b.n	1022e <main+0x8a>
		printk("Bluetooth init failed (err %d)\n", err);
   1023a:	4812      	ldr	r0, [pc, #72]	; (10284 <main+0xe0>)
   1023c:	f018 f881 	bl	28342 <printk>
		return;
   10240:	e7f5      	b.n	1022e <main+0x8a>
		printk("Failed to init LBS (err:%d)\n", err);
   10242:	4811      	ldr	r0, [pc, #68]	; (10288 <main+0xe4>)
   10244:	f018 f87d 	bl	28342 <printk>
		return;
   10248:	e7f1      	b.n	1022e <main+0x8a>
		printk("Advertising failed to start (err %d)\n", err);
   1024a:	4810      	ldr	r0, [pc, #64]	; (1028c <main+0xe8>)
   1024c:	f018 f879 	bl	28342 <printk>
		return;
   10250:	e7ed      	b.n	1022e <main+0x8a>
   10252:	bf00      	nop
   10254:	0002f7d8 	.word	0x0002f7d8
   10258:	20000458 	.word	0x20000458
   1025c:	20000434 	.word	0x20000434
   10260:	0002f860 	.word	0x0002f860
   10264:	20000474 	.word	0x20000474
   10268:	0002f500 	.word	0x0002f500
   1026c:	0002f92c 	.word	0x0002f92c
   10270:	0002f91c 	.word	0x0002f91c
   10274:	0002f8c0 	.word	0x0002f8c0
   10278:	0002f8e4 	.word	0x0002f8e4
   1027c:	0002f804 	.word	0x0002f804
   10280:	0002f820 	.word	0x0002f820
   10284:	0002f840 	.word	0x0002f840
   10288:	0002f878 	.word	0x0002f878
   1028c:	0002f898 	.word	0x0002f898

00010290 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   10290:	b430      	push	{r4, r5}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   10292:	2400      	movs	r4, #0
   10294:	4294      	cmp	r4, r2
   10296:	d20f      	bcs.n	102b8 <crc8_ccitt+0x28>
		val ^= p[i];
   10298:	5d0b      	ldrb	r3, [r1, r4]
   1029a:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1029c:	0918      	lsrs	r0, r3, #4
   1029e:	4d07      	ldr	r5, [pc, #28]	; (102bc <crc8_ccitt+0x2c>)
   102a0:	5628      	ldrsb	r0, [r5, r0]
   102a2:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   102a6:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   102a8:	f3c0 1003 	ubfx	r0, r0, #4, #4
   102ac:	5628      	ldrsb	r0, [r5, r0]
   102ae:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   102b2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   102b4:	3401      	adds	r4, #1
   102b6:	e7ed      	b.n	10294 <crc8_ccitt+0x4>
	}
	return val;
}
   102b8:	bc30      	pop	{r4, r5}
   102ba:	4770      	bx	lr
   102bc:	0002f934 	.word	0x0002f934

000102c0 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   102c0:	b430      	push	{r4, r5}
   102c2:	4605      	mov	r5, r0
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   102c4:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   102c6:	2364      	movs	r3, #100	; 0x64
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   102c8:	e00f      	b.n	102ea <u8_to_dec+0x2a>
		digit = value / divisor;
		if (digit != 0 || divisor == 1 || num_digits != 0) {
			*buf = (char)digit + '0';
   102ca:	3430      	adds	r4, #48	; 0x30
   102cc:	f805 4b01 	strb.w	r4, [r5], #1
			buf++;
			buflen--;
   102d0:	3901      	subs	r1, #1
   102d2:	b2c9      	uxtb	r1, r1
			num_digits++;
   102d4:	3001      	adds	r0, #1
   102d6:	b2c0      	uxtb	r0, r0
		}

		value -= digit * divisor;
   102d8:	fbb2 f4f3 	udiv	r4, r2, r3
   102dc:	fb03 2214 	mls	r2, r3, r4, r2
   102e0:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   102e2:	4c0a      	ldr	r4, [pc, #40]	; (1030c <u8_to_dec+0x4c>)
   102e4:	fba4 4303 	umull	r4, r3, r4, r3
   102e8:	08db      	lsrs	r3, r3, #3
	while (buflen > 0 && divisor > 0) {
   102ea:	b149      	cbz	r1, 10300 <u8_to_dec+0x40>
   102ec:	b143      	cbz	r3, 10300 <u8_to_dec+0x40>
		digit = value / divisor;
   102ee:	fbb2 f4f3 	udiv	r4, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   102f2:	429a      	cmp	r2, r3
   102f4:	d2e9      	bcs.n	102ca <u8_to_dec+0xa>
   102f6:	2b01      	cmp	r3, #1
   102f8:	d0e7      	beq.n	102ca <u8_to_dec+0xa>
   102fa:	2800      	cmp	r0, #0
   102fc:	d0ec      	beq.n	102d8 <u8_to_dec+0x18>
   102fe:	e7e4      	b.n	102ca <u8_to_dec+0xa>
	}

	if (buflen) {
   10300:	b109      	cbz	r1, 10306 <u8_to_dec+0x46>
		*buf = '\0';
   10302:	2300      	movs	r3, #0
   10304:	702b      	strb	r3, [r5, #0]
	}

	return num_digits;
}
   10306:	bc30      	pop	{r4, r5}
   10308:	4770      	bx	lr
   1030a:	bf00      	nop
   1030c:	cccccccd 	.word	0xcccccccd

00010310 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   10310:	b570      	push	{r4, r5, r6, lr}
   10312:	4604      	mov	r4, r0
   10314:	460d      	mov	r5, r1
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10316:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   10318:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1031c:	6081      	str	r1, [r0, #8]
	switch (method) {
   1031e:	2b02      	cmp	r3, #2
   10320:	d013      	beq.n	1034a <sys_notify_finalize+0x3a>
   10322:	2b03      	cmp	r3, #3
   10324:	d00e      	beq.n	10344 <sys_notify_finalize+0x34>
   10326:	2b01      	cmp	r3, #1
   10328:	d012      	beq.n	10350 <sys_notify_finalize+0x40>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
   1032a:	4e0e      	ldr	r6, [pc, #56]	; (10364 <sys_notify_finalize+0x54>)
   1032c:	2245      	movs	r2, #69	; 0x45
   1032e:	4631      	mov	r1, r6
   10330:	480d      	ldr	r0, [pc, #52]	; (10368 <sys_notify_finalize+0x58>)
   10332:	f018 f806 	bl	28342 <printk>
   10336:	2145      	movs	r1, #69	; 0x45
   10338:	4630      	mov	r0, r6
   1033a:	f018 fb9b 	bl	28a74 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   1033e:	2600      	movs	r6, #0
	struct k_poll_signal *sig = NULL;
   10340:	4630      	mov	r0, r6
   10342:	e007      	b.n	10354 <sys_notify_finalize+0x44>
		rv = notify->method.callback;
   10344:	6806      	ldr	r6, [r0, #0]
	struct k_poll_signal *sig = NULL;
   10346:	2000      	movs	r0, #0
		break;
   10348:	e004      	b.n	10354 <sys_notify_finalize+0x44>
		sig = notify->method.signal;
   1034a:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1034c:	2600      	movs	r6, #0
		break;
   1034e:	e001      	b.n	10354 <sys_notify_finalize+0x44>
	switch (method) {
   10350:	2600      	movs	r6, #0
   10352:	4630      	mov	r0, r6
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10354:	2300      	movs	r3, #0
   10356:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   10358:	b110      	cbz	r0, 10360 <sys_notify_finalize+0x50>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1035a:	4629      	mov	r1, r5
   1035c:	f015 fa6e 	bl	2583c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   10360:	4630      	mov	r0, r6
   10362:	bd70      	pop	{r4, r5, r6, pc}
   10364:	0002f944 	.word	0x0002f944
   10368:	0002f968 	.word	0x0002f968

0001036c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   1036c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1036e:	680b      	ldr	r3, [r1, #0]
   10370:	3301      	adds	r3, #1
   10372:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10374:	4b01      	ldr	r3, [pc, #4]	; (1037c <char_out+0x10>)
   10376:	681b      	ldr	r3, [r3, #0]
   10378:	4798      	blx	r3
}
   1037a:	bd08      	pop	{r3, pc}
   1037c:	2000047c 	.word	0x2000047c

00010380 <__printk_hook_install>:
	_char_out = fn;
   10380:	4b01      	ldr	r3, [pc, #4]	; (10388 <__printk_hook_install+0x8>)
   10382:	6018      	str	r0, [r3, #0]
}
   10384:	4770      	bx	lr
   10386:	bf00      	nop
   10388:	2000047c 	.word	0x2000047c

0001038c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1038c:	b500      	push	{lr}
   1038e:	b083      	sub	sp, #12
   10390:	4602      	mov	r2, r0
   10392:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10394:	2100      	movs	r1, #0
   10396:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10398:	a901      	add	r1, sp, #4
   1039a:	4803      	ldr	r0, [pc, #12]	; (103a8 <vprintk+0x1c>)
   1039c:	f000 fcd4 	bl	10d48 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   103a0:	b003      	add	sp, #12
   103a2:	f85d fb04 	ldr.w	pc, [sp], #4
   103a6:	bf00      	nop
   103a8:	0001036d 	.word	0x0001036d

000103ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   103ac:	b510      	push	{r4, lr}
   103ae:	b084      	sub	sp, #16
   103b0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   103b2:	9001      	str	r0, [sp, #4]
   103b4:	9102      	str	r1, [sp, #8]
   103b6:	2100      	movs	r1, #0
   103b8:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   103ba:	a901      	add	r1, sp, #4
   103bc:	4805      	ldr	r0, [pc, #20]	; (103d4 <vsnprintk+0x28>)
   103be:	f000 fcc3 	bl	10d48 <cbvprintf>

	if (ctx.count < ctx.max) {
   103c2:	9b03      	ldr	r3, [sp, #12]
   103c4:	9a02      	ldr	r2, [sp, #8]
   103c6:	4293      	cmp	r3, r2
   103c8:	da01      	bge.n	103ce <vsnprintk+0x22>
		str[ctx.count] = '\0';
   103ca:	2200      	movs	r2, #0
   103cc:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   103ce:	9803      	ldr	r0, [sp, #12]
   103d0:	b004      	add	sp, #16
   103d2:	bd10      	pop	{r4, pc}
   103d4:	00028313 	.word	0x00028313

000103d8 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
   103d8:	b538      	push	{r3, r4, r5, lr}
   103da:	4604      	mov	r4, r0
   103dc:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   103de:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
   103e0:	2a00      	cmp	r2, #0
   103e2:	db13      	blt.n	1040c <process_complete+0x34>
   103e4:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
   103e8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   103ea:	2a01      	cmp	r2, #1
   103ec:	d91a      	bls.n	10424 <process_complete+0x4c>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
   103ee:	2b04      	cmp	r3, #4
   103f0:	d04d      	beq.n	1048e <process_complete+0xb6>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
   103f2:	4c2d      	ldr	r4, [pc, #180]	; (104a8 <process_complete+0xd0>)
   103f4:	f240 121b 	movw	r2, #283	; 0x11b
   103f8:	4621      	mov	r1, r4
   103fa:	482c      	ldr	r0, [pc, #176]	; (104ac <process_complete+0xd4>)
   103fc:	f017 ffa1 	bl	28342 <printk>
   10400:	f240 111b 	movw	r1, #283	; 0x11b
   10404:	4620      	mov	r0, r4
   10406:	f018 fb35 	bl	28a74 <assert_post_action>
	}
}
   1040a:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   1040c:	e9d0 0100 	ldrd	r0, r1, [r0]
   10410:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   10414:	2300      	movs	r3, #0
   10416:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   10418:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1041a:	2101      	movs	r1, #1
   1041c:	4620      	mov	r0, r4
   1041e:	f017 ffac 	bl	2837a <set_state>
   10422:	e7f2      	b.n	1040a <process_complete+0x32>
		*clients = mgr->clients;
   10424:	e9d0 0100 	ldrd	r0, r1, [r0]
   10428:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1042c:	2200      	movs	r2, #0
   1042e:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   10430:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   10432:	2b06      	cmp	r3, #6
   10434:	d00f      	beq.n	10456 <process_complete+0x7e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   10436:	2b05      	cmp	r3, #5
   10438:	d11c      	bne.n	10474 <process_complete+0x9c>
			set_state(mgr, ONOFF_STATE_OFF);
   1043a:	2100      	movs	r1, #0
   1043c:	4620      	mov	r0, r4
   1043e:	f017 ff9c 	bl	2837a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   10442:	4620      	mov	r0, r4
   10444:	f017 ffc0 	bl	283c8 <process_recheck>
   10448:	2800      	cmp	r0, #0
   1044a:	d0de      	beq.n	1040a <process_complete+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1044c:	8ba3      	ldrh	r3, [r4, #28]
   1044e:	f043 0320 	orr.w	r3, r3, #32
   10452:	83a3      	strh	r3, [r4, #28]
   10454:	e7d9      	b.n	1040a <process_complete+0x32>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10456:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10458:	b13b      	cbz	r3, 1046a <process_complete+0x92>
				mgr->refs += 1U;
   1045a:	8be2      	ldrh	r2, [r4, #30]
   1045c:	3201      	adds	r2, #1
   1045e:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   10460:	2b00      	cmp	r3, #0
   10462:	d0f9      	beq.n	10458 <process_complete+0x80>
	return node->next;
   10464:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10466:	2b00      	cmp	r3, #0
   10468:	d1f6      	bne.n	10458 <process_complete+0x80>
			set_state(mgr, ONOFF_STATE_ON);
   1046a:	2102      	movs	r1, #2
   1046c:	4620      	mov	r0, r4
   1046e:	f017 ff84 	bl	2837a <set_state>
   10472:	e7e6      	b.n	10442 <process_complete+0x6a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   10474:	4d0c      	ldr	r5, [pc, #48]	; (104a8 <process_complete+0xd0>)
   10476:	f240 1209 	movw	r2, #265	; 0x109
   1047a:	4629      	mov	r1, r5
   1047c:	480b      	ldr	r0, [pc, #44]	; (104ac <process_complete+0xd4>)
   1047e:	f017 ff60 	bl	28342 <printk>
   10482:	f240 1109 	movw	r1, #265	; 0x109
   10486:	4628      	mov	r0, r5
   10488:	f018 faf4 	bl	28a74 <assert_post_action>
   1048c:	e7d5      	b.n	1043a <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   1048e:	2100      	movs	r1, #0
   10490:	f017 ff73 	bl	2837a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   10494:	4620      	mov	r0, r4
   10496:	f017 ff97 	bl	283c8 <process_recheck>
   1049a:	2800      	cmp	r0, #0
   1049c:	d0b5      	beq.n	1040a <process_complete+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1049e:	8ba3      	ldrh	r3, [r4, #28]
   104a0:	f043 0320 	orr.w	r3, r3, #32
   104a4:	83a3      	strh	r3, [r4, #28]
   104a6:	e7b0      	b.n	1040a <process_complete+0x32>
   104a8:	0002f980 	.word	0x0002f980
   104ac:	0002f968 	.word	0x0002f968

000104b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   104b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104b4:	b083      	sub	sp, #12
   104b6:	4604      	mov	r4, r0
   104b8:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   104ba:	8b83      	ldrh	r3, [r0, #28]
   104bc:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
   104c0:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
   104c4:	460d      	mov	r5, r1
   104c6:	b131      	cbz	r1, 104d6 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   104c8:	f1b8 0f00 	cmp.w	r8, #0
   104cc:	d111      	bne.n	104f2 <process_event+0x42>
	list->head = NULL;
   104ce:	2300      	movs	r3, #0
   104d0:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   104d2:	9301      	str	r3, [sp, #4]
}
   104d4:	e0a7      	b.n	10626 <process_event+0x176>
	__ASSERT_NO_MSG(evt != EVT_NOP);
   104d6:	f8df 9314 	ldr.w	r9, [pc, #788]	; 107ec <process_event+0x33c>
   104da:	f240 1233 	movw	r2, #307	; 0x133
   104de:	4649      	mov	r1, r9
   104e0:	48c1      	ldr	r0, [pc, #772]	; (107e8 <process_event+0x338>)
   104e2:	f017 ff2e 	bl	28342 <printk>
   104e6:	f240 1133 	movw	r1, #307	; 0x133
   104ea:	4648      	mov	r0, r9
   104ec:	f018 fac2 	bl	28a74 <assert_post_action>
   104f0:	e7ea      	b.n	104c8 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
   104f2:	2d01      	cmp	r5, #1
   104f4:	d013      	beq.n	1051e <process_event+0x6e>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   104f6:	2d02      	cmp	r5, #2
   104f8:	d116      	bne.n	10528 <process_event+0x78>

			mgr->flags |= ONOFF_FLAG_RECHECK;
   104fa:	8ba3      	ldrh	r3, [r4, #28]
   104fc:	f043 0320 	orr.w	r3, r3, #32
   10500:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10502:	f104 0014 	add.w	r0, r4, #20
   10506:	f011 fcd7 	bl	21eb8 <z_spin_unlock_valid>
   1050a:	2800      	cmp	r0, #0
   1050c:	f000 8176 	beq.w	107fc <process_event+0x34c>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10510:	f386 8811 	msr	BASEPRI, r6
   10514:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10518:	b003      	add	sp, #12
   1051a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1051e:	8ba3      	ldrh	r3, [r4, #28]
   10520:	f043 0310 	orr.w	r3, r3, #16
   10524:	83a3      	strh	r3, [r4, #28]
   10526:	e7ec      	b.n	10502 <process_event+0x52>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   10528:	4db0      	ldr	r5, [pc, #704]	; (107ec <process_event+0x33c>)
   1052a:	f44f 729e 	mov.w	r2, #316	; 0x13c
   1052e:	4629      	mov	r1, r5
   10530:	48ad      	ldr	r0, [pc, #692]	; (107e8 <process_event+0x338>)
   10532:	f017 ff06 	bl	28342 <printk>
   10536:	f44f 719e 	mov.w	r1, #316	; 0x13c
   1053a:	4628      	mov	r0, r5
   1053c:	f018 fa9a 	bl	28a74 <assert_post_action>
   10540:	e7db      	b.n	104fa <process_event+0x4a>
			evt = process_recheck(mgr);
   10542:	4620      	mov	r0, r4
   10544:	f017 ff40 	bl	283c8 <process_recheck>
   10548:	4605      	mov	r5, r0
   1054a:	e06e      	b.n	1062a <process_event+0x17a>
			res = mgr->last_res;
   1054c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
   10550:	464a      	mov	r2, r9
   10552:	4669      	mov	r1, sp
   10554:	4620      	mov	r0, r4
   10556:	f7ff ff3f 	bl	103d8 <process_complete>
		onoff_transition_fn transit = NULL;
   1055a:	2500      	movs	r5, #0
   1055c:	e010      	b.n	10580 <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1055e:	2f00      	cmp	r7, #0
   10560:	d17f      	bne.n	10662 <process_event+0x1b2>
	return list->head;
   10562:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10564:	2b00      	cmp	r3, #0
   10566:	f000 8089 	beq.w	1067c <process_event+0x1cc>
			transit = mgr->transitions->start;
   1056a:	6923      	ldr	r3, [r4, #16]
   1056c:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1056e:	2d00      	cmp	r5, #0
   10570:	f000 8091 	beq.w	10696 <process_event+0x1e6>
			set_state(mgr, ONOFF_STATE_TO_ON);
   10574:	2106      	movs	r1, #6
   10576:	4620      	mov	r0, r4
   10578:	f017 feff 	bl	2837a <set_state>
		res = 0;
   1057c:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10580:	8ba3      	ldrh	r3, [r4, #28]
   10582:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10586:	45b8      	cmp	r8, r7
   10588:	f000 8100 	beq.w	1078c <process_event+0x2dc>
   1058c:	68a2      	ldr	r2, [r4, #8]
   1058e:	2a00      	cmp	r2, #0
   10590:	f000 80fe 	beq.w	10790 <process_event+0x2e0>
   10594:	2201      	movs	r2, #1
		if (do_monitors
   10596:	4617      	mov	r7, r2
   10598:	b91a      	cbnz	r2, 105a2 <process_event+0xf2>
   1059a:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   1059c:	2a00      	cmp	r2, #0
   1059e:	f000 80f9 	beq.w	10794 <process_event+0x2e4>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   105a2:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   105a6:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   105a8:	f104 0a14 	add.w	sl, r4, #20
   105ac:	4650      	mov	r0, sl
   105ae:	f011 fc83 	bl	21eb8 <z_spin_unlock_valid>
   105b2:	2800      	cmp	r0, #0
   105b4:	f000 80f2 	beq.w	1079c <process_event+0x2ec>
   105b8:	f386 8811 	msr	BASEPRI, r6
   105bc:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   105c0:	2f00      	cmp	r7, #0
   105c2:	f040 80f7 	bne.w	107b4 <process_event+0x304>
   105c6:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   105c8:	b12b      	cbz	r3, 105d6 <process_event+0x126>
				notify_all(mgr, &clients, state, res);
   105ca:	464b      	mov	r3, r9
   105cc:	4642      	mov	r2, r8
   105ce:	4669      	mov	r1, sp
   105d0:	4620      	mov	r0, r4
   105d2:	f017 ff3b 	bl	2844c <notify_all>
			if (transit != NULL) {
   105d6:	b115      	cbz	r5, 105de <process_event+0x12e>
				transit(mgr, transition_complete);
   105d8:	4985      	ldr	r1, [pc, #532]	; (107f0 <process_event+0x340>)
   105da:	4620      	mov	r0, r4
   105dc:	47a8      	blx	r5
	__asm__ volatile(
   105de:	f04f 0340 	mov.w	r3, #64	; 0x40
   105e2:	f3ef 8611 	mrs	r6, BASEPRI
   105e6:	f383 8812 	msr	BASEPRI_MAX, r3
   105ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   105ee:	4650      	mov	r0, sl
   105f0:	f011 fc52 	bl	21e98 <z_spin_lock_valid>
   105f4:	2800      	cmp	r0, #0
   105f6:	f000 80e3 	beq.w	107c0 <process_event+0x310>
	z_spin_lock_set_owner(l);
   105fa:	4650      	mov	r0, sl
   105fc:	f011 fc6c 	bl	21ed8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10600:	8ba3      	ldrh	r3, [r4, #28]
   10602:	f023 0308 	bic.w	r3, r3, #8
   10606:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10608:	8ba3      	ldrh	r3, [r4, #28]
   1060a:	f013 0f10 	tst.w	r3, #16
   1060e:	f000 80e2 	beq.w	107d6 <process_event+0x326>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10612:	f023 0310 	bic.w	r3, r3, #16
   10616:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   10618:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1061a:	8ba7      	ldrh	r7, [r4, #28]
   1061c:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
   10620:	2d00      	cmp	r5, #0
   10622:	f43f af6e 	beq.w	10502 <process_event+0x52>
		if (evt == EVT_RECHECK) {
   10626:	2d02      	cmp	r5, #2
   10628:	d08b      	beq.n	10542 <process_event+0x92>
		if (evt == EVT_NOP) {
   1062a:	2d00      	cmp	r5, #0
   1062c:	f43f af69 	beq.w	10502 <process_event+0x52>
		if (evt == EVT_COMPLETE) {
   10630:	2d01      	cmp	r5, #1
   10632:	d08b      	beq.n	1054c <process_event+0x9c>
		} else if (evt == EVT_START) {
   10634:	2d03      	cmp	r5, #3
   10636:	d092      	beq.n	1055e <process_event+0xae>
		} else if (evt == EVT_STOP) {
   10638:	2d04      	cmp	r5, #4
   1063a:	d03a      	beq.n	106b2 <process_event+0x202>
		} else if (evt == EVT_RESET) {
   1063c:	2d05      	cmp	r5, #5
   1063e:	f040 8096 	bne.w	1076e <process_event+0x2be>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10642:	2f01      	cmp	r7, #1
   10644:	d16b      	bne.n	1071e <process_event+0x26e>
   10646:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10648:	2b00      	cmp	r3, #0
   1064a:	d075      	beq.n	10738 <process_event+0x288>
			transit = mgr->transitions->reset;
   1064c:	6923      	ldr	r3, [r4, #16]
   1064e:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   10650:	2d00      	cmp	r5, #0
   10652:	d07e      	beq.n	10752 <process_event+0x2a2>
			set_state(mgr, ONOFF_STATE_RESETTING);
   10654:	2105      	movs	r1, #5
   10656:	4620      	mov	r0, r4
   10658:	f017 fe8f 	bl	2837a <set_state>
		res = 0;
   1065c:	f04f 0900 	mov.w	r9, #0
   10660:	e78e      	b.n	10580 <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   10662:	4d62      	ldr	r5, [pc, #392]	; (107ec <process_event+0x33c>)
   10664:	f44f 72ab 	mov.w	r2, #342	; 0x156
   10668:	4629      	mov	r1, r5
   1066a:	485f      	ldr	r0, [pc, #380]	; (107e8 <process_event+0x338>)
   1066c:	f017 fe69 	bl	28342 <printk>
   10670:	f44f 71ab 	mov.w	r1, #342	; 0x156
   10674:	4628      	mov	r0, r5
   10676:	f018 f9fd 	bl	28a74 <assert_post_action>
   1067a:	e772      	b.n	10562 <process_event+0xb2>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1067c:	4d5b      	ldr	r5, [pc, #364]	; (107ec <process_event+0x33c>)
   1067e:	f240 1257 	movw	r2, #343	; 0x157
   10682:	4629      	mov	r1, r5
   10684:	4858      	ldr	r0, [pc, #352]	; (107e8 <process_event+0x338>)
   10686:	f017 fe5c 	bl	28342 <printk>
   1068a:	f240 1157 	movw	r1, #343	; 0x157
   1068e:	4628      	mov	r0, r5
   10690:	f018 f9f0 	bl	28a74 <assert_post_action>
   10694:	e769      	b.n	1056a <process_event+0xba>
			__ASSERT_NO_MSG(transit != NULL);
   10696:	f8df 8154 	ldr.w	r8, [pc, #340]	; 107ec <process_event+0x33c>
   1069a:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   1069e:	4641      	mov	r1, r8
   106a0:	4851      	ldr	r0, [pc, #324]	; (107e8 <process_event+0x338>)
   106a2:	f017 fe4e 	bl	28342 <printk>
   106a6:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   106aa:	4640      	mov	r0, r8
   106ac:	f018 f9e2 	bl	28a74 <assert_post_action>
   106b0:	e760      	b.n	10574 <process_event+0xc4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   106b2:	2f02      	cmp	r7, #2
   106b4:	d10b      	bne.n	106ce <process_event+0x21e>
			__ASSERT_NO_MSG(mgr->refs == 0);
   106b6:	8be3      	ldrh	r3, [r4, #30]
   106b8:	b9b3      	cbnz	r3, 106e8 <process_event+0x238>
			transit = mgr->transitions->stop;
   106ba:	6923      	ldr	r3, [r4, #16]
   106bc:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   106be:	b305      	cbz	r5, 10702 <process_event+0x252>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   106c0:	2104      	movs	r1, #4
   106c2:	4620      	mov	r0, r4
   106c4:	f017 fe59 	bl	2837a <set_state>
		res = 0;
   106c8:	f04f 0900 	mov.w	r9, #0
   106cc:	e758      	b.n	10580 <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   106ce:	4d47      	ldr	r5, [pc, #284]	; (107ec <process_event+0x33c>)
   106d0:	f240 125d 	movw	r2, #349	; 0x15d
   106d4:	4629      	mov	r1, r5
   106d6:	4844      	ldr	r0, [pc, #272]	; (107e8 <process_event+0x338>)
   106d8:	f017 fe33 	bl	28342 <printk>
   106dc:	f240 115d 	movw	r1, #349	; 0x15d
   106e0:	4628      	mov	r0, r5
   106e2:	f018 f9c7 	bl	28a74 <assert_post_action>
   106e6:	e7e6      	b.n	106b6 <process_event+0x206>
			__ASSERT_NO_MSG(mgr->refs == 0);
   106e8:	4d40      	ldr	r5, [pc, #256]	; (107ec <process_event+0x33c>)
   106ea:	f44f 72af 	mov.w	r2, #350	; 0x15e
   106ee:	4629      	mov	r1, r5
   106f0:	483d      	ldr	r0, [pc, #244]	; (107e8 <process_event+0x338>)
   106f2:	f017 fe26 	bl	28342 <printk>
   106f6:	f44f 71af 	mov.w	r1, #350	; 0x15e
   106fa:	4628      	mov	r0, r5
   106fc:	f018 f9ba 	bl	28a74 <assert_post_action>
   10700:	e7db      	b.n	106ba <process_event+0x20a>
			__ASSERT_NO_MSG(transit != NULL);
   10702:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 107ec <process_event+0x33c>
   10706:	f240 1261 	movw	r2, #353	; 0x161
   1070a:	4641      	mov	r1, r8
   1070c:	4836      	ldr	r0, [pc, #216]	; (107e8 <process_event+0x338>)
   1070e:	f017 fe18 	bl	28342 <printk>
   10712:	f240 1161 	movw	r1, #353	; 0x161
   10716:	4640      	mov	r0, r8
   10718:	f018 f9ac 	bl	28a74 <assert_post_action>
   1071c:	e7d0      	b.n	106c0 <process_event+0x210>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1071e:	4d33      	ldr	r5, [pc, #204]	; (107ec <process_event+0x33c>)
   10720:	f44f 72b2 	mov.w	r2, #356	; 0x164
   10724:	4629      	mov	r1, r5
   10726:	4830      	ldr	r0, [pc, #192]	; (107e8 <process_event+0x338>)
   10728:	f017 fe0b 	bl	28342 <printk>
   1072c:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10730:	4628      	mov	r0, r5
   10732:	f018 f99f 	bl	28a74 <assert_post_action>
   10736:	e786      	b.n	10646 <process_event+0x196>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10738:	4d2c      	ldr	r5, [pc, #176]	; (107ec <process_event+0x33c>)
   1073a:	f240 1265 	movw	r2, #357	; 0x165
   1073e:	4629      	mov	r1, r5
   10740:	4829      	ldr	r0, [pc, #164]	; (107e8 <process_event+0x338>)
   10742:	f017 fdfe 	bl	28342 <printk>
   10746:	f240 1165 	movw	r1, #357	; 0x165
   1074a:	4628      	mov	r0, r5
   1074c:	f018 f992 	bl	28a74 <assert_post_action>
   10750:	e77c      	b.n	1064c <process_event+0x19c>
			__ASSERT_NO_MSG(transit != NULL);
   10752:	f8df 8098 	ldr.w	r8, [pc, #152]	; 107ec <process_event+0x33c>
   10756:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1075a:	4641      	mov	r1, r8
   1075c:	4822      	ldr	r0, [pc, #136]	; (107e8 <process_event+0x338>)
   1075e:	f017 fdf0 	bl	28342 <printk>
   10762:	f44f 71b4 	mov.w	r1, #360	; 0x168
   10766:	4640      	mov	r0, r8
   10768:	f018 f984 	bl	28a74 <assert_post_action>
   1076c:	e772      	b.n	10654 <process_event+0x1a4>
			__ASSERT_NO_MSG(false);
   1076e:	4d1f      	ldr	r5, [pc, #124]	; (107ec <process_event+0x33c>)
   10770:	f240 126b 	movw	r2, #363	; 0x16b
   10774:	4629      	mov	r1, r5
   10776:	481c      	ldr	r0, [pc, #112]	; (107e8 <process_event+0x338>)
   10778:	f017 fde3 	bl	28342 <printk>
   1077c:	f240 116b 	movw	r1, #363	; 0x16b
   10780:	4628      	mov	r0, r5
   10782:	f018 f977 	bl	28a74 <assert_post_action>
		onoff_transition_fn transit = NULL;
   10786:	2500      	movs	r5, #0
		res = 0;
   10788:	46a9      	mov	r9, r5
   1078a:	e6f9      	b.n	10580 <process_event+0xd0>
				   && !sys_slist_is_empty(&mgr->monitors);
   1078c:	2200      	movs	r2, #0
   1078e:	e702      	b.n	10596 <process_event+0xe6>
   10790:	2200      	movs	r2, #0
   10792:	e700      	b.n	10596 <process_event+0xe6>
		    || (transit != NULL)) {
   10794:	2d00      	cmp	r5, #0
   10796:	f47f af04 	bne.w	105a2 <process_event+0xf2>
   1079a:	e735      	b.n	10608 <process_event+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1079c:	f8df b054 	ldr.w	fp, [pc, #84]	; 107f4 <process_event+0x344>
   107a0:	22ac      	movs	r2, #172	; 0xac
   107a2:	4659      	mov	r1, fp
   107a4:	4810      	ldr	r0, [pc, #64]	; (107e8 <process_event+0x338>)
   107a6:	f017 fdcc 	bl	28342 <printk>
   107aa:	21ac      	movs	r1, #172	; 0xac
   107ac:	4658      	mov	r0, fp
   107ae:	f018 f961 	bl	28a74 <assert_post_action>
   107b2:	e701      	b.n	105b8 <process_event+0x108>
				notify_monitors(mgr, state, res);
   107b4:	464a      	mov	r2, r9
   107b6:	4641      	mov	r1, r8
   107b8:	4620      	mov	r0, r4
   107ba:	f017 fde6 	bl	2838a <notify_monitors>
   107be:	e702      	b.n	105c6 <process_event+0x116>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   107c0:	4d0c      	ldr	r5, [pc, #48]	; (107f4 <process_event+0x344>)
   107c2:	2281      	movs	r2, #129	; 0x81
   107c4:	4629      	mov	r1, r5
   107c6:	4808      	ldr	r0, [pc, #32]	; (107e8 <process_event+0x338>)
   107c8:	f017 fdbb 	bl	28342 <printk>
   107cc:	2181      	movs	r1, #129	; 0x81
   107ce:	4628      	mov	r0, r5
   107d0:	f018 f950 	bl	28a74 <assert_post_action>
   107d4:	e711      	b.n	105fa <process_event+0x14a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   107d6:	f013 0f20 	tst.w	r3, #32
   107da:	d00d      	beq.n	107f8 <process_event+0x348>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   107dc:	f023 0320 	bic.w	r3, r3, #32
   107e0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
   107e2:	2502      	movs	r5, #2
   107e4:	e719      	b.n	1061a <process_event+0x16a>
   107e6:	bf00      	nop
   107e8:	0002f968 	.word	0x0002f968
   107ec:	0002f980 	.word	0x0002f980
   107f0:	0001081d 	.word	0x0001081d
   107f4:	0002f9a4 	.word	0x0002f9a4
		evt = EVT_NOP;
   107f8:	2500      	movs	r5, #0
   107fa:	e70e      	b.n	1061a <process_event+0x16a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   107fc:	4c05      	ldr	r4, [pc, #20]	; (10814 <process_event+0x364>)
   107fe:	22ac      	movs	r2, #172	; 0xac
   10800:	4621      	mov	r1, r4
   10802:	4805      	ldr	r0, [pc, #20]	; (10818 <process_event+0x368>)
   10804:	f017 fd9d 	bl	28342 <printk>
   10808:	21ac      	movs	r1, #172	; 0xac
   1080a:	4620      	mov	r0, r4
   1080c:	f018 f932 	bl	28a74 <assert_post_action>
   10810:	e67e      	b.n	10510 <process_event+0x60>
   10812:	bf00      	nop
   10814:	0002f9a4 	.word	0x0002f9a4
   10818:	0002f968 	.word	0x0002f968

0001081c <transition_complete>:
{
   1081c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10820:	4604      	mov	r4, r0
   10822:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10824:	f100 0614 	add.w	r6, r0, #20
   10828:	f04f 0340 	mov.w	r3, #64	; 0x40
   1082c:	f3ef 8711 	mrs	r7, BASEPRI
   10830:	f383 8812 	msr	BASEPRI_MAX, r3
   10834:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10838:	4630      	mov	r0, r6
   1083a:	f011 fb2d 	bl	21e98 <z_spin_lock_valid>
   1083e:	b150      	cbz	r0, 10856 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
   10840:	4630      	mov	r0, r6
   10842:	f011 fb49 	bl	21ed8 <z_spin_lock_set_owner>
	mgr->last_res = res;
   10846:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   10848:	463a      	mov	r2, r7
   1084a:	2101      	movs	r1, #1
   1084c:	4620      	mov	r0, r4
   1084e:	f7ff fe2f 	bl	104b0 <process_event>
}
   10852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10856:	f8df 801c 	ldr.w	r8, [pc, #28]	; 10874 <transition_complete+0x58>
   1085a:	2281      	movs	r2, #129	; 0x81
   1085c:	4641      	mov	r1, r8
   1085e:	4804      	ldr	r0, [pc, #16]	; (10870 <transition_complete+0x54>)
   10860:	f017 fd6f 	bl	28342 <printk>
   10864:	2181      	movs	r1, #129	; 0x81
   10866:	4640      	mov	r0, r8
   10868:	f018 f904 	bl	28a74 <assert_post_action>
   1086c:	e7e8      	b.n	10840 <transition_complete+0x24>
   1086e:	bf00      	nop
   10870:	0002f968 	.word	0x0002f968
   10874:	0002f9a4 	.word	0x0002f9a4

00010878 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1087c:	4604      	mov	r4, r0
   1087e:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10880:	f017 fdbb 	bl	283fa <validate_args>

	if (rv < 0) {
   10884:	1e06      	subs	r6, r0, #0
   10886:	db53      	blt.n	10930 <onoff_request+0xb8>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10888:	f104 0714 	add.w	r7, r4, #20
   1088c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10890:	f3ef 8911 	mrs	r9, BASEPRI
   10894:	f383 8812 	msr	BASEPRI_MAX, r3
   10898:	f3bf 8f6f 	isb	sy
   1089c:	4638      	mov	r0, r7
   1089e:	f011 fafb 	bl	21e98 <z_spin_lock_valid>
   108a2:	b1e8      	cbz	r0, 108e0 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
   108a4:	4638      	mov	r0, r7
   108a6:	f011 fb17 	bl	21ed8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   108aa:	8ba5      	ldrh	r5, [r4, #28]
   108ac:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   108b0:	8be3      	ldrh	r3, [r4, #30]
   108b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   108b6:	4293      	cmp	r3, r2
   108b8:	d050      	beq.n	1095c <onoff_request+0xe4>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   108ba:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   108bc:	2d02      	cmp	r5, #2
   108be:	d01a      	beq.n	108f6 <onoff_request+0x7e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   108c0:	b305      	cbz	r5, 10904 <onoff_request+0x8c>
		   || (state == ONOFF_STATE_TO_OFF)
   108c2:	2d04      	cmp	r5, #4
   108c4:	d01e      	beq.n	10904 <onoff_request+0x8c>
		   || (state == ONOFF_STATE_TO_ON)) {
   108c6:	2d06      	cmp	r5, #6
   108c8:	d01c      	beq.n	10904 <onoff_request+0x8c>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   108ca:	2d05      	cmp	r5, #5
   108cc:	d04d      	beq.n	1096a <onoff_request+0xf2>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   108ce:	2d01      	cmp	r5, #1
   108d0:	d131      	bne.n	10936 <onoff_request+0xbe>
		rv = -EIO;
   108d2:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   108d6:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   108da:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   108dc:	4652      	mov	r2, sl
   108de:	e017      	b.n	10910 <onoff_request+0x98>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   108e0:	4d36      	ldr	r5, [pc, #216]	; (109bc <onoff_request+0x144>)
   108e2:	2281      	movs	r2, #129	; 0x81
   108e4:	4629      	mov	r1, r5
   108e6:	4836      	ldr	r0, [pc, #216]	; (109c0 <onoff_request+0x148>)
   108e8:	f017 fd2b 	bl	28342 <printk>
   108ec:	2181      	movs	r1, #129	; 0x81
   108ee:	4628      	mov	r0, r5
   108f0:	f018 f8c0 	bl	28a74 <assert_post_action>
   108f4:	e7d6      	b.n	108a4 <onoff_request+0x2c>
		mgr->refs += 1U;
   108f6:	3301      	adds	r3, #1
   108f8:	83e3      	strh	r3, [r4, #30]
		notify = true;
   108fa:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
   108fe:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   10900:	461a      	mov	r2, r3
   10902:	e005      	b.n	10910 <onoff_request+0x98>
		start = (state == ONOFF_STATE_OFF);
   10904:	fab5 f385 	clz	r3, r5
   10908:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1090a:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
   1090e:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
   10910:	b142      	cbz	r2, 10924 <onoff_request+0xac>
	parent->next = child;
   10912:	2200      	movs	r2, #0
   10914:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   10918:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1091a:	b36a      	cbz	r2, 10978 <onoff_request+0x100>
	parent->next = child;
   1091c:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   10920:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   10924:	b36b      	cbz	r3, 10982 <onoff_request+0x10a>
		process_event(mgr, EVT_RECHECK, key);
   10926:	464a      	mov	r2, r9
   10928:	2102      	movs	r1, #2
   1092a:	4620      	mov	r0, r4
   1092c:	f7ff fdc0 	bl	104b0 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   10930:	4630      	mov	r0, r6
   10932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10936:	4e23      	ldr	r6, [pc, #140]	; (109c4 <onoff_request+0x14c>)
   10938:	f240 12c9 	movw	r2, #457	; 0x1c9
   1093c:	4631      	mov	r1, r6
   1093e:	4820      	ldr	r0, [pc, #128]	; (109c0 <onoff_request+0x148>)
   10940:	f017 fcff 	bl	28342 <printk>
   10944:	f240 11c9 	movw	r1, #457	; 0x1c9
   10948:	4630      	mov	r0, r6
   1094a:	f018 f893 	bl	28a74 <assert_post_action>
		rv = -EIO;
   1094e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   10952:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   10956:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   10958:	4652      	mov	r2, sl
   1095a:	e7d9      	b.n	10910 <onoff_request+0x98>
		rv = -EAGAIN;
   1095c:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   10960:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   10964:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   10966:	4652      	mov	r2, sl
   10968:	e7d2      	b.n	10910 <onoff_request+0x98>
		rv = -ENOTSUP;
   1096a:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1096e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   10972:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   10974:	4652      	mov	r2, sl
   10976:	e7cb      	b.n	10910 <onoff_request+0x98>
   10978:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
   1097c:	f8c4 8000 	str.w	r8, [r4]
}
   10980:	e7d0      	b.n	10924 <onoff_request+0xac>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10982:	4638      	mov	r0, r7
   10984:	f011 fa98 	bl	21eb8 <z_spin_unlock_valid>
   10988:	b168      	cbz	r0, 109a6 <onoff_request+0x12e>
	__asm__ volatile(
   1098a:	f389 8811 	msr	BASEPRI, r9
   1098e:	f3bf 8f6f 	isb	sy
		if (notify) {
   10992:	f1ba 0f00 	cmp.w	sl, #0
   10996:	d0cb      	beq.n	10930 <onoff_request+0xb8>
			notify_one(mgr, cli, state, 0);
   10998:	2300      	movs	r3, #0
   1099a:	462a      	mov	r2, r5
   1099c:	4641      	mov	r1, r8
   1099e:	4620      	mov	r0, r4
   109a0:	f017 fd41 	bl	28426 <notify_one>
   109a4:	e7c4      	b.n	10930 <onoff_request+0xb8>
   109a6:	4f05      	ldr	r7, [pc, #20]	; (109bc <onoff_request+0x144>)
   109a8:	22ac      	movs	r2, #172	; 0xac
   109aa:	4639      	mov	r1, r7
   109ac:	4804      	ldr	r0, [pc, #16]	; (109c0 <onoff_request+0x148>)
   109ae:	f017 fcc8 	bl	28342 <printk>
   109b2:	21ac      	movs	r1, #172	; 0xac
   109b4:	4638      	mov	r0, r7
   109b6:	f018 f85d 	bl	28a74 <assert_post_action>
   109ba:	e7e6      	b.n	1098a <onoff_request+0x112>
   109bc:	0002f9a4 	.word	0x0002f9a4
   109c0:	0002f968 	.word	0x0002f968
   109c4:	0002f980 	.word	0x0002f980

000109c8 <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
   109c8:	2900      	cmp	r1, #0
   109ca:	d04d      	beq.n	10a68 <sys_heap_free+0xa0>
{
   109cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   109ce:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   109d0:	4620      	mov	r0, r4
   109d2:	f017 fe6a 	bl	286aa <mem_to_chunkid>
   109d6:	4605      	mov	r5, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   109d8:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   109dc:	68a3      	ldr	r3, [r4, #8]

	if (big_heap(h)) {
   109de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   109e2:	d31f      	bcc.n	10a24 <sys_heap_free+0x5c>
		return ((uint32_t *)cmem)[f];
   109e4:	6873      	ldr	r3, [r6, #4]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   109e6:	f013 0f01 	tst.w	r3, #1
   109ea:	d01d      	beq.n	10a28 <sys_heap_free+0x60>
	return big_heap_chunks(h->end_chunk);
   109ec:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   109ee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   109f2:	d324      	bcc.n	10a3e <sys_heap_free+0x76>
		return ((uint32_t *)cmem)[f];
   109f4:	6873      	ldr	r3, [r6, #4]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   109f6:	eb05 0353 	add.w	r3, r5, r3, lsr #1
	if (big_heap(h)) {
   109fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   109fe:	d320      	bcc.n	10a42 <sys_heap_free+0x7a>
		return ((uint32_t *)cmem)[f];
   10a00:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   10a04:	1a9b      	subs	r3, r3, r2
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10a06:	429d      	cmp	r5, r3
   10a08:	d11e      	bne.n	10a48 <sys_heap_free+0x80>
	return big_heap_chunks(h->end_chunk);
   10a0a:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   10a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10a10:	d325      	bcc.n	10a5e <sys_heap_free+0x96>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10a12:	6873      	ldr	r3, [r6, #4]
   10a14:	f023 0301 	bic.w	r3, r3, #1
   10a18:	6073      	str	r3, [r6, #4]
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
	free_chunk(h, c);
   10a1a:	4629      	mov	r1, r5
   10a1c:	4620      	mov	r0, r4
   10a1e:	f017 fea1 	bl	28764 <free_chunk>
}
   10a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   10a24:	8873      	ldrh	r3, [r6, #2]
   10a26:	e7de      	b.n	109e6 <sys_heap_free+0x1e>
	__ASSERT(chunk_used(h, c),
   10a28:	4f10      	ldr	r7, [pc, #64]	; (10a6c <sys_heap_free+0xa4>)
   10a2a:	229a      	movs	r2, #154	; 0x9a
   10a2c:	4639      	mov	r1, r7
   10a2e:	4810      	ldr	r0, [pc, #64]	; (10a70 <sys_heap_free+0xa8>)
   10a30:	f017 fc87 	bl	28342 <printk>
   10a34:	219a      	movs	r1, #154	; 0x9a
   10a36:	4638      	mov	r0, r7
   10a38:	f018 f81c 	bl	28a74 <assert_post_action>
   10a3c:	e7d6      	b.n	109ec <sys_heap_free+0x24>
   10a3e:	8873      	ldrh	r3, [r6, #2]
   10a40:	e7d9      	b.n	109f6 <sys_heap_free+0x2e>
   10a42:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
   10a46:	e7dd      	b.n	10a04 <sys_heap_free+0x3c>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10a48:	4f08      	ldr	r7, [pc, #32]	; (10a6c <sys_heap_free+0xa4>)
   10a4a:	22a2      	movs	r2, #162	; 0xa2
   10a4c:	4639      	mov	r1, r7
   10a4e:	4808      	ldr	r0, [pc, #32]	; (10a70 <sys_heap_free+0xa8>)
   10a50:	f017 fc77 	bl	28342 <printk>
   10a54:	21a2      	movs	r1, #162	; 0xa2
   10a56:	4638      	mov	r0, r7
   10a58:	f018 f80c 	bl	28a74 <assert_post_action>
   10a5c:	e7d5      	b.n	10a0a <sys_heap_free+0x42>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10a5e:	8873      	ldrh	r3, [r6, #2]
   10a60:	f023 0301 	bic.w	r3, r3, #1
   10a64:	8073      	strh	r3, [r6, #2]
   10a66:	e7d8      	b.n	10a1a <sys_heap_free+0x52>
   10a68:	4770      	bx	lr
   10a6a:	bf00      	nop
   10a6c:	0002f9cc 	.word	0x0002f9cc
   10a70:	0002f968 	.word	0x0002f968

00010a74 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a78:	460c      	mov	r4, r1
   10a7a:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   10a7c:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   10a7e:	424b      	negs	r3, r1
   10a80:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   10a84:	ea31 0303 	bics.w	r3, r1, r3
   10a88:	d051      	beq.n	10b2e <sys_heap_aligned_alloc+0xba>
		align -= rew;
   10a8a:	eba1 0408 	sub.w	r4, r1, r8
	return big_heap_chunks(h->end_chunk);
   10a8e:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   10a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10a94:	d349      	bcc.n	10b2a <sys_heap_aligned_alloc+0xb6>
   10a96:	2708      	movs	r7, #8
		gap = MIN(rew, chunk_header_bytes(h));
   10a98:	45b8      	cmp	r8, r7
   10a9a:	d200      	bcs.n	10a9e <sys_heap_aligned_alloc+0x2a>
   10a9c:	4647      	mov	r7, r8
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10a9e:	1e63      	subs	r3, r4, #1
   10aa0:	4223      	tst	r3, r4
   10aa2:	d155      	bne.n	10b50 <sys_heap_aligned_alloc+0xdc>

	if (bytes == 0 || size_too_big(h, bytes)) {
   10aa4:	2d00      	cmp	r5, #0
   10aa6:	d07e      	beq.n	10ba6 <sys_heap_aligned_alloc+0x132>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   10aa8:	68b3      	ldr	r3, [r6, #8]
   10aaa:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
   10aae:	d97c      	bls.n	10baa <sys_heap_aligned_alloc+0x136>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   10ab0:	1961      	adds	r1, r4, r5
   10ab2:	1bc9      	subs	r1, r1, r7
	return big_heap(h) ? 8 : 4;
   10ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10ab8:	d358      	bcc.n	10b6c <sys_heap_aligned_alloc+0xf8>
   10aba:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   10abc:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10abe:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   10ac0:	08c9      	lsrs	r1, r1, #3
   10ac2:	4630      	mov	r0, r6
   10ac4:	f017 fea9 	bl	2881a <alloc_chunk>

	if (c0 == 0) {
   10ac8:	4607      	mov	r7, r0
   10aca:	2800      	cmp	r0, #0
   10acc:	d06f      	beq.n	10bae <sys_heap_aligned_alloc+0x13a>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   10ace:	4601      	mov	r1, r0
   10ad0:	4630      	mov	r0, r6
   10ad2:	f017 fcf8 	bl	284c6 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   10ad6:	4440      	add	r0, r8
   10ad8:	4420      	add	r0, r4
   10ada:	3801      	subs	r0, #1
   10adc:	4264      	negs	r4, r4
   10ade:	4004      	ands	r4, r0
   10ae0:	eba4 0408 	sub.w	r4, r4, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10ae4:	4425      	add	r5, r4
   10ae6:	3507      	adds	r5, #7
   10ae8:	f025 0507 	bic.w	r5, r5, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   10aec:	4621      	mov	r1, r4
   10aee:	4630      	mov	r0, r6
   10af0:	f017 fddb 	bl	286aa <mem_to_chunkid>
   10af4:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   10af6:	1bad      	subs	r5, r5, r6
   10af8:	10ed      	asrs	r5, r5, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   10afa:	4287      	cmp	r7, r0
   10afc:	d338      	bcc.n	10b70 <sys_heap_aligned_alloc+0xfc>
	void *cmem = &buf[c];
   10afe:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   10b02:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   10b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10b08:	d33c      	bcc.n	10b84 <sys_heap_aligned_alloc+0x110>
		return ((uint32_t *)cmem)[f];
   10b0a:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   10b0c:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   10b10:	429d      	cmp	r5, r3
   10b12:	d339      	bcc.n	10b88 <sys_heap_aligned_alloc+0x114>
	return big_heap_chunks(h->end_chunk);
   10b14:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   10b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10b1a:	d33f      	bcc.n	10b9c <sys_heap_aligned_alloc+0x128>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   10b1c:	687b      	ldr	r3, [r7, #4]
   10b1e:	f043 0301 	orr.w	r3, r3, #1
   10b22:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   10b24:	4620      	mov	r0, r4
   10b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return big_heap(h) ? 8 : 4;
   10b2a:	2704      	movs	r7, #4
   10b2c:	e7b4      	b.n	10a98 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   10b2e:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   10b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10b34:	d305      	bcc.n	10b42 <sys_heap_aligned_alloc+0xce>
   10b36:	2708      	movs	r7, #8
		if (align <= chunk_header_bytes(h)) {
   10b38:	42bc      	cmp	r4, r7
   10b3a:	d904      	bls.n	10b46 <sys_heap_aligned_alloc+0xd2>
		rew = 0;
   10b3c:	f04f 0800 	mov.w	r8, #0
   10b40:	e7ad      	b.n	10a9e <sys_heap_aligned_alloc+0x2a>
   10b42:	2704      	movs	r7, #4
   10b44:	e7f8      	b.n	10b38 <sys_heap_aligned_alloc+0xc4>
			return sys_heap_alloc(heap, bytes);
   10b46:	4629      	mov	r1, r5
   10b48:	f017 feb6 	bl	288b8 <sys_heap_alloc>
   10b4c:	4604      	mov	r4, r0
   10b4e:	e7e9      	b.n	10b24 <sys_heap_aligned_alloc+0xb0>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10b50:	f8df 9064 	ldr.w	r9, [pc, #100]	; 10bb8 <sys_heap_aligned_alloc+0x144>
   10b54:	f240 120d 	movw	r2, #269	; 0x10d
   10b58:	4649      	mov	r1, r9
   10b5a:	4816      	ldr	r0, [pc, #88]	; (10bb4 <sys_heap_aligned_alloc+0x140>)
   10b5c:	f017 fbf1 	bl	28342 <printk>
   10b60:	f240 110d 	movw	r1, #269	; 0x10d
   10b64:	4648      	mov	r0, r9
   10b66:	f017 ff85 	bl	28a74 <assert_post_action>
   10b6a:	e79b      	b.n	10aa4 <sys_heap_aligned_alloc+0x30>
   10b6c:	2304      	movs	r3, #4
   10b6e:	e7a5      	b.n	10abc <sys_heap_aligned_alloc+0x48>
		split_chunks(h, c0, c);
   10b70:	4602      	mov	r2, r0
   10b72:	4639      	mov	r1, r7
   10b74:	4630      	mov	r0, r6
   10b76:	f017 fd2e 	bl	285d6 <split_chunks>
		free_list_add(h, c0);
   10b7a:	4639      	mov	r1, r7
   10b7c:	4630      	mov	r0, r6
   10b7e:	f017 fdc8 	bl	28712 <free_list_add>
   10b82:	e7bc      	b.n	10afe <sys_heap_aligned_alloc+0x8a>
		return ((uint16_t *)cmem)[f];
   10b84:	887b      	ldrh	r3, [r7, #2]
   10b86:	e7c1      	b.n	10b0c <sys_heap_aligned_alloc+0x98>
		split_chunks(h, c, c_end);
   10b88:	462a      	mov	r2, r5
   10b8a:	4641      	mov	r1, r8
   10b8c:	4630      	mov	r0, r6
   10b8e:	f017 fd22 	bl	285d6 <split_chunks>
		free_list_add(h, c_end);
   10b92:	4629      	mov	r1, r5
   10b94:	4630      	mov	r0, r6
   10b96:	f017 fdbc 	bl	28712 <free_list_add>
   10b9a:	e7bb      	b.n	10b14 <sys_heap_aligned_alloc+0xa0>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10b9c:	887b      	ldrh	r3, [r7, #2]
   10b9e:	f043 0301 	orr.w	r3, r3, #1
   10ba2:	807b      	strh	r3, [r7, #2]
   10ba4:	e7be      	b.n	10b24 <sys_heap_aligned_alloc+0xb0>
		return NULL;
   10ba6:	2400      	movs	r4, #0
   10ba8:	e7bc      	b.n	10b24 <sys_heap_aligned_alloc+0xb0>
   10baa:	2400      	movs	r4, #0
   10bac:	e7ba      	b.n	10b24 <sys_heap_aligned_alloc+0xb0>
		return NULL;
   10bae:	2400      	movs	r4, #0
   10bb0:	e7b8      	b.n	10b24 <sys_heap_aligned_alloc+0xb0>
   10bb2:	bf00      	nop
   10bb4:	0002f968 	.word	0x0002f968
   10bb8:	0002f9cc 	.word	0x0002f9cc

00010bbc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   10bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bc0:	4606      	mov	r6, r0
   10bc2:	460d      	mov	r5, r1
   10bc4:	4614      	mov	r4, r2
	return big_heap_bytes(size) ? 8 : 4;
   10bc6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   10bca:	d333      	bcc.n	10c34 <sys_heap_init+0x78>
   10bcc:	2708      	movs	r7, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10bce:	42bc      	cmp	r4, r7
   10bd0:	d932      	bls.n	10c38 <sys_heap_init+0x7c>
	bytes -= heap_footer_bytes(bytes);
   10bd2:	1be2      	subs	r2, r4, r7

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10bd4:	1dec      	adds	r4, r5, #7
   10bd6:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10bda:	4415      	add	r5, r2
   10bdc:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10be0:	1b2d      	subs	r5, r5, r4
   10be2:	ea4f 09d5 	mov.w	r9, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10be6:	2d17      	cmp	r5, #23
   10be8:	d934      	bls.n	10c54 <sys_heap_init+0x98>

	struct z_heap *h = (struct z_heap *)addr;
   10bea:	46a0      	mov	r8, r4
	heap->heap = h;
   10bec:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
   10bee:	f8c4 9008 	str.w	r9, [r4, #8]
	h->avail_buckets = 0;
   10bf2:	2300      	movs	r3, #0
   10bf4:	60e3      	str	r3, [r4, #12]
	return big_heap(h) ? 8 : 4;
   10bf6:	f5b9 4f00 	cmp.w	r9, #32768	; 0x8000
   10bfa:	d338      	bcc.n	10c6e <sys_heap_init+0xb2>
   10bfc:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10bfe:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   10c00:	eba9 06d3 	sub.w	r6, r9, r3, lsr #3
   10c04:	3601      	adds	r6, #1
	return 31 - __builtin_clz(usable_sz);
   10c06:	fab6 f686 	clz	r6, r6

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10c0a:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10c0e:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
   10c12:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10c14:	3607      	adds	r6, #7
   10c16:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10c1a:	eb0a 03d3 	add.w	r3, sl, r3, lsr #3
   10c1e:	454b      	cmp	r3, r9
   10c20:	d827      	bhi.n	10c72 <sys_heap_init+0xb6>
	return big_heap(h) ? 8 : 4;
   10c22:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   10c24:	42bb      	cmp	r3, r7
   10c26:	da32      	bge.n	10c8e <sys_heap_init+0xd2>
		h->buckets[i].next = 0;
   10c28:	1d1a      	adds	r2, r3, #4
   10c2a:	2100      	movs	r1, #0
   10c2c:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   10c30:	3301      	adds	r3, #1
   10c32:	e7f7      	b.n	10c24 <sys_heap_init+0x68>
	return big_heap_bytes(size) ? 8 : 4;
   10c34:	2704      	movs	r7, #4
   10c36:	e7ca      	b.n	10bce <sys_heap_init+0x12>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10c38:	f8df 8108 	ldr.w	r8, [pc, #264]	; 10d44 <sys_heap_init+0x188>
   10c3c:	f44f 72c1 	mov.w	r2, #386	; 0x182
   10c40:	4641      	mov	r1, r8
   10c42:	483f      	ldr	r0, [pc, #252]	; (10d40 <sys_heap_init+0x184>)
   10c44:	f017 fb7d 	bl	28342 <printk>
   10c48:	f44f 71c1 	mov.w	r1, #386	; 0x182
   10c4c:	4640      	mov	r0, r8
   10c4e:	f017 ff11 	bl	28a74 <assert_post_action>
   10c52:	e7be      	b.n	10bd2 <sys_heap_init+0x16>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10c54:	4f3b      	ldr	r7, [pc, #236]	; (10d44 <sys_heap_init+0x188>)
   10c56:	f240 128b 	movw	r2, #395	; 0x18b
   10c5a:	4639      	mov	r1, r7
   10c5c:	4838      	ldr	r0, [pc, #224]	; (10d40 <sys_heap_init+0x184>)
   10c5e:	f017 fb70 	bl	28342 <printk>
   10c62:	f240 118b 	movw	r1, #395	; 0x18b
   10c66:	4638      	mov	r0, r7
   10c68:	f017 ff04 	bl	28a74 <assert_post_action>
   10c6c:	e7bd      	b.n	10bea <sys_heap_init+0x2e>
	return big_heap(h) ? 8 : 4;
   10c6e:	2304      	movs	r3, #4
   10c70:	e7c5      	b.n	10bfe <sys_heap_init+0x42>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10c72:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 10d44 <sys_heap_init+0x188>
   10c76:	f44f 72cb 	mov.w	r2, #406	; 0x196
   10c7a:	4659      	mov	r1, fp
   10c7c:	4830      	ldr	r0, [pc, #192]	; (10d40 <sys_heap_init+0x184>)
   10c7e:	f017 fb60 	bl	28342 <printk>
   10c82:	f44f 71cb 	mov.w	r1, #406	; 0x196
   10c86:	4658      	mov	r0, fp
   10c88:	f017 fef4 	bl	28a74 <assert_post_action>
   10c8c:	e7c9      	b.n	10c22 <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10c8e:	ea4f 034a 	mov.w	r3, sl, lsl #1
	return big_heap_chunks(h->end_chunk);
   10c92:	68a1      	ldr	r1, [r4, #8]
	if (big_heap(h)) {
   10c94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   10c98:	d338      	bcc.n	10d0c <sys_heap_init+0x150>
		((uint32_t *)cmem)[f] = val;
   10c9a:	6063      	str	r3, [r4, #4]
	if (big_heap(h)) {
   10c9c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   10ca0:	d336      	bcc.n	10d10 <sys_heap_init+0x154>
		((uint32_t *)cmem)[f] = val;
   10ca2:	2300      	movs	r3, #0
   10ca4:	6023      	str	r3, [r4, #0]
	if (big_heap(h)) {
   10ca6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   10caa:	d334      	bcc.n	10d16 <sys_heap_init+0x15a>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   10cac:	6863      	ldr	r3, [r4, #4]
   10cae:	f043 0301 	orr.w	r3, r3, #1
   10cb2:	6063      	str	r3, [r4, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10cb4:	eba9 000a 	sub.w	r0, r9, sl
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10cb8:	0042      	lsls	r2, r0, #1
	void *cmem = &buf[c];
   10cba:	f026 0607 	bic.w	r6, r6, #7
   10cbe:	19a3      	adds	r3, r4, r6
	if (big_heap(h)) {
   10cc0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   10cc4:	d32c      	bcc.n	10d20 <sys_heap_init+0x164>
		((uint32_t *)cmem)[f] = val;
   10cc6:	605a      	str	r2, [r3, #4]
	return big_heap_chunks(h->end_chunk);
   10cc8:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   10cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10cce:	d329      	bcc.n	10d24 <sys_heap_init+0x168>
		((uint32_t *)cmem)[f] = val;
   10cd0:	f844 a006 	str.w	sl, [r4, r6]
	void *cmem = &buf[c];
   10cd4:	f025 0307 	bic.w	r3, r5, #7
   10cd8:	4425      	add	r5, r4
	return big_heap_chunks(h->end_chunk);
   10cda:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   10cdc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   10ce0:	d323      	bcc.n	10d2a <sys_heap_init+0x16e>
		((uint32_t *)cmem)[f] = val;
   10ce2:	2200      	movs	r2, #0
   10ce4:	606a      	str	r2, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   10ce6:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   10ce8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   10cec:	d320      	bcc.n	10d30 <sys_heap_init+0x174>
		((uint32_t *)cmem)[f] = val;
   10cee:	50e0      	str	r0, [r4, r3]
	return big_heap_chunks(h->end_chunk);
   10cf0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   10cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10cf6:	d31d      	bcc.n	10d34 <sys_heap_init+0x178>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   10cf8:	686b      	ldr	r3, [r5, #4]
   10cfa:	f043 0301 	orr.w	r3, r3, #1
   10cfe:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   10d00:	4651      	mov	r1, sl
   10d02:	4620      	mov	r0, r4
   10d04:	f017 fd05 	bl	28712 <free_list_add>
}
   10d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		((uint16_t *)cmem)[f] = val;
   10d0c:	8063      	strh	r3, [r4, #2]
   10d0e:	e7c5      	b.n	10c9c <sys_heap_init+0xe0>
   10d10:	2300      	movs	r3, #0
   10d12:	8023      	strh	r3, [r4, #0]
   10d14:	e7c7      	b.n	10ca6 <sys_heap_init+0xea>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10d16:	8863      	ldrh	r3, [r4, #2]
   10d18:	f043 0301 	orr.w	r3, r3, #1
   10d1c:	8063      	strh	r3, [r4, #2]
   10d1e:	e7c9      	b.n	10cb4 <sys_heap_init+0xf8>
		((uint16_t *)cmem)[f] = val;
   10d20:	805a      	strh	r2, [r3, #2]
   10d22:	e7d1      	b.n	10cc8 <sys_heap_init+0x10c>
   10d24:	f824 a006 	strh.w	sl, [r4, r6]
   10d28:	e7d4      	b.n	10cd4 <sys_heap_init+0x118>
   10d2a:	2200      	movs	r2, #0
   10d2c:	806a      	strh	r2, [r5, #2]
   10d2e:	e7da      	b.n	10ce6 <sys_heap_init+0x12a>
   10d30:	52e0      	strh	r0, [r4, r3]
   10d32:	e7dd      	b.n	10cf0 <sys_heap_init+0x134>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10d34:	886b      	ldrh	r3, [r5, #2]
   10d36:	f043 0301 	orr.w	r3, r3, #1
   10d3a:	806b      	strh	r3, [r5, #2]
   10d3c:	e7e0      	b.n	10d00 <sys_heap_init+0x144>
   10d3e:	bf00      	nop
   10d40:	0002f968 	.word	0x0002f968
   10d44:	0002f9cc 	.word	0x0002f9cc

00010d48 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d4c:	b093      	sub	sp, #76	; 0x4c
   10d4e:	4606      	mov	r6, r0
   10d50:	460d      	mov	r5, r1
   10d52:	4692      	mov	sl, r2
   10d54:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10d56:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10d58:	f89a 0000 	ldrb.w	r0, [sl]
   10d5c:	2800      	cmp	r0, #0
   10d5e:	f000 84d6 	beq.w	1170e <cbvprintf+0x9c6>
		if (*fp != '%') {
   10d62:	2825      	cmp	r0, #37	; 0x25
   10d64:	d008      	beq.n	10d78 <cbvprintf+0x30>
			OUTC(*fp++);
   10d66:	f10a 0a01 	add.w	sl, sl, #1
   10d6a:	4629      	mov	r1, r5
   10d6c:	47b0      	blx	r6
   10d6e:	2800      	cmp	r0, #0
   10d70:	f2c0 84ce 	blt.w	11710 <cbvprintf+0x9c8>
   10d74:	3401      	adds	r4, #1
			continue;
   10d76:	e7ef      	b.n	10d58 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   10d78:	2300      	movs	r3, #0
   10d7a:	9306      	str	r3, [sp, #24]
   10d7c:	9307      	str	r3, [sp, #28]
   10d7e:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   10d80:	9308      	str	r3, [sp, #32]
   10d82:	9309      	str	r3, [sp, #36]	; 0x24
   10d84:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   10d86:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   10d8a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10d8e:	2b25      	cmp	r3, #37	; 0x25
   10d90:	d001      	beq.n	10d96 <cbvprintf+0x4e>
	bool loop = true;
   10d92:	2701      	movs	r7, #1
   10d94:	e02c      	b.n	10df0 <cbvprintf+0xa8>
		conv->specifier = *sp++;
   10d96:	f10a 0802 	add.w	r8, sl, #2
   10d9a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   10d9e:	e1a8      	b.n	110f2 <cbvprintf+0x3aa>
			conv->flag_dash = true;
   10da0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10da4:	f043 0304 	orr.w	r3, r3, #4
   10da8:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   10dac:	b1ff      	cbz	r7, 10dee <cbvprintf+0xa6>
			++sp;
   10dae:	f108 0801 	add.w	r8, r8, #1
   10db2:	e01c      	b.n	10dee <cbvprintf+0xa6>
			conv->flag_plus = true;
   10db4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10db8:	f043 0308 	orr.w	r3, r3, #8
   10dbc:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10dc0:	e7f4      	b.n	10dac <cbvprintf+0x64>
			conv->flag_space = true;
   10dc2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10dc6:	f043 0310 	orr.w	r3, r3, #16
   10dca:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10dce:	e7ed      	b.n	10dac <cbvprintf+0x64>
			conv->flag_hash = true;
   10dd0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10dd4:	f043 0320 	orr.w	r3, r3, #32
   10dd8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10ddc:	e7e6      	b.n	10dac <cbvprintf+0x64>
			conv->flag_zero = true;
   10dde:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10de6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10dea:	e7df      	b.n	10dac <cbvprintf+0x64>
		switch (*sp) {
   10dec:	2700      	movs	r7, #0
	} while (loop);
   10dee:	b34f      	cbz	r7, 10e44 <cbvprintf+0xfc>
		switch (*sp) {
   10df0:	f898 3000 	ldrb.w	r3, [r8]
   10df4:	3b20      	subs	r3, #32
   10df6:	2b10      	cmp	r3, #16
   10df8:	d8f8      	bhi.n	10dec <cbvprintf+0xa4>
   10dfa:	a201      	add	r2, pc, #4	; (adr r2, 10e00 <cbvprintf+0xb8>)
   10dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10e00:	00010dc3 	.word	0x00010dc3
   10e04:	00010ded 	.word	0x00010ded
   10e08:	00010ded 	.word	0x00010ded
   10e0c:	00010dd1 	.word	0x00010dd1
   10e10:	00010ded 	.word	0x00010ded
   10e14:	00010ded 	.word	0x00010ded
   10e18:	00010ded 	.word	0x00010ded
   10e1c:	00010ded 	.word	0x00010ded
   10e20:	00010ded 	.word	0x00010ded
   10e24:	00010ded 	.word	0x00010ded
   10e28:	00010ded 	.word	0x00010ded
   10e2c:	00010db5 	.word	0x00010db5
   10e30:	00010ded 	.word	0x00010ded
   10e34:	00010da1 	.word	0x00010da1
   10e38:	00010ded 	.word	0x00010ded
   10e3c:	00010ded 	.word	0x00010ded
   10e40:	00010ddf 	.word	0x00010ddf
	if (conv->flag_zero && conv->flag_dash) {
   10e44:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e48:	f003 0344 	and.w	r3, r3, #68	; 0x44
   10e4c:	2b44      	cmp	r3, #68	; 0x44
   10e4e:	d06d      	beq.n	10f2c <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   10e50:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   10e54:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e5c:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   10e60:	f898 3000 	ldrb.w	r3, [r8]
   10e64:	2b2a      	cmp	r3, #42	; 0x2a
   10e66:	d068      	beq.n	10f3a <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   10e68:	a805      	add	r0, sp, #20
   10e6a:	f017 fd6c 	bl	28946 <extract_decimal>
	if (sp != wp) {
   10e6e:	9b05      	ldr	r3, [sp, #20]
   10e70:	4598      	cmp	r8, r3
   10e72:	d012      	beq.n	10e9a <cbvprintf+0x152>
		conv->width_present = true;
   10e74:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e7c:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   10e80:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   10e82:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   10e86:	2800      	cmp	r0, #0
   10e88:	db60      	blt.n	10f4c <cbvprintf+0x204>
   10e8a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   10e8c:	4313      	orrs	r3, r2
   10e8e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10e92:	f363 0241 	bfi	r2, r3, #1, #1
   10e96:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   10e9a:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   10e9c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   10e9e:	781b      	ldrb	r3, [r3, #0]
   10ea0:	2b2e      	cmp	r3, #46	; 0x2e
   10ea2:	bf14      	ite	ne
   10ea4:	2300      	movne	r3, #0
   10ea6:	2301      	moveq	r3, #1
   10ea8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   10eac:	f363 0241 	bfi	r2, r3, #1, #1
   10eb0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   10eb4:	2b00      	cmp	r3, #0
   10eb6:	d04b      	beq.n	10f50 <cbvprintf+0x208>
	++sp;
   10eb8:	9b05      	ldr	r3, [sp, #20]
   10eba:	1c5a      	adds	r2, r3, #1
   10ebc:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   10ebe:	785b      	ldrb	r3, [r3, #1]
   10ec0:	2b2a      	cmp	r3, #42	; 0x2a
   10ec2:	d048      	beq.n	10f56 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   10ec4:	a805      	add	r0, sp, #20
   10ec6:	f017 fd3e 	bl	28946 <extract_decimal>
	conv->prec_value = prec;
   10eca:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   10ecc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10ed0:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   10ed4:	2800      	cmp	r0, #0
   10ed6:	db47      	blt.n	10f68 <cbvprintf+0x220>
   10ed8:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   10eda:	4313      	orrs	r3, r2
   10edc:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10ee0:	f363 0241 	bfi	r2, r3, #1, #1
   10ee4:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   10ee8:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   10eec:	f898 3000 	ldrb.w	r3, [r8]
   10ef0:	3b4c      	subs	r3, #76	; 0x4c
   10ef2:	2b2e      	cmp	r3, #46	; 0x2e
   10ef4:	f200 80dc 	bhi.w	110b0 <cbvprintf+0x368>
   10ef8:	e8df f003 	tbb	[pc, r3]
   10efc:	dadadaca 	.word	0xdadadaca
   10f00:	dadadada 	.word	0xdadadada
   10f04:	dadadada 	.word	0xdadadada
   10f08:	dadadada 	.word	0xdadadada
   10f0c:	dadadada 	.word	0xdadadada
   10f10:	dadadada 	.word	0xdadadada
   10f14:	dadadada 	.word	0xdadadada
   10f18:	da6ada38 	.word	0xda6ada38
   10f1c:	dadada51 	.word	0xdadada51
   10f20:	dadadada 	.word	0xdadadada
   10f24:	dadadac0 	.word	0xdadadac0
   10f28:	dada      	.short	0xdada
   10f2a:	b6          	.byte	0xb6
   10f2b:	00          	.byte	0x00
		conv->flag_zero = false;
   10f2c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10f30:	f36f 1386 	bfc	r3, #6, #1
   10f34:	f88d 3020 	strb.w	r3, [sp, #32]
   10f38:	e78a      	b.n	10e50 <cbvprintf+0x108>
		conv->width_star = true;
   10f3a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f3e:	f043 0301 	orr.w	r3, r3, #1
   10f42:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   10f46:	4643      	mov	r3, r8
   10f48:	3301      	adds	r3, #1
   10f4a:	e7a7      	b.n	10e9c <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   10f4c:	2201      	movs	r2, #1
   10f4e:	e79d      	b.n	10e8c <cbvprintf+0x144>
		return sp;
   10f50:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10f54:	e7ca      	b.n	10eec <cbvprintf+0x1a4>
		conv->prec_star = true;
   10f56:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f5a:	f043 0304 	orr.w	r3, r3, #4
   10f5e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   10f62:	f102 0801 	add.w	r8, r2, #1
   10f66:	e7c1      	b.n	10eec <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   10f68:	2201      	movs	r2, #1
   10f6a:	e7b6      	b.n	10eda <cbvprintf+0x192>
		if (*++sp == 'h') {
   10f6c:	f108 0201 	add.w	r2, r8, #1
   10f70:	f898 3001 	ldrb.w	r3, [r8, #1]
   10f74:	2b68      	cmp	r3, #104	; 0x68
   10f76:	d008      	beq.n	10f8a <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   10f78:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f7c:	2102      	movs	r1, #2
   10f7e:	f361 03c6 	bfi	r3, r1, #3, #4
   10f82:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   10f86:	4690      	mov	r8, r2
   10f88:	e02b      	b.n	10fe2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   10f8a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f8e:	2201      	movs	r2, #1
   10f90:	f362 03c6 	bfi	r3, r2, #3, #4
   10f94:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   10f98:	f108 0802 	add.w	r8, r8, #2
   10f9c:	e021      	b.n	10fe2 <cbvprintf+0x29a>
		if (*++sp == 'l') {
   10f9e:	f108 0201 	add.w	r2, r8, #1
   10fa2:	f898 3001 	ldrb.w	r3, [r8, #1]
   10fa6:	2b6c      	cmp	r3, #108	; 0x6c
   10fa8:	d008      	beq.n	10fbc <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   10faa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10fae:	2103      	movs	r1, #3
   10fb0:	f361 03c6 	bfi	r3, r1, #3, #4
   10fb4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   10fb8:	4690      	mov	r8, r2
   10fba:	e012      	b.n	10fe2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   10fbc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10fc0:	2204      	movs	r2, #4
   10fc2:	f362 03c6 	bfi	r3, r2, #3, #4
   10fc6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   10fca:	f108 0802 	add.w	r8, r8, #2
   10fce:	e008      	b.n	10fe2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   10fd0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10fd4:	2205      	movs	r2, #5
   10fd6:	f362 03c6 	bfi	r3, r2, #3, #4
   10fda:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10fde:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   10fe2:	f818 3b01 	ldrb.w	r3, [r8], #1
   10fe6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   10fea:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   10fee:	2a37      	cmp	r2, #55	; 0x37
   10ff0:	f200 8150 	bhi.w	11294 <cbvprintf+0x54c>
   10ff4:	e8df f012 	tbh	[pc, r2, lsl #1]
   10ff8:	014e0126 	.word	0x014e0126
   10ffc:	014e014e 	.word	0x014e014e
   11000:	01260126 	.word	0x01260126
   11004:	014e0126 	.word	0x014e0126
   11008:	014e014e 	.word	0x014e014e
   1100c:	014e014e 	.word	0x014e014e
   11010:	014e014e 	.word	0x014e014e
   11014:	014e014e 	.word	0x014e014e
   11018:	014e014e 	.word	0x014e014e
   1101c:	014e014e 	.word	0x014e014e
   11020:	014e014e 	.word	0x014e014e
   11024:	0113014e 	.word	0x0113014e
   11028:	014e014e 	.word	0x014e014e
   1102c:	014e014e 	.word	0x014e014e
   11030:	014e014e 	.word	0x014e014e
   11034:	014e014e 	.word	0x014e014e
   11038:	014e0126 	.word	0x014e0126
   1103c:	00630113 	.word	0x00630113
   11040:	01260126 	.word	0x01260126
   11044:	014e0126 	.word	0x014e0126
   11048:	014e0063 	.word	0x014e0063
   1104c:	014e014e 	.word	0x014e014e
   11050:	012f014e 	.word	0x012f014e
   11054:	013f0113 	.word	0x013f0113
   11058:	014e014e 	.word	0x014e014e
   1105c:	014e013f 	.word	0x014e013f
   11060:	014e0113 	.word	0x014e0113
   11064:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   11068:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1106c:	2206      	movs	r2, #6
   1106e:	f362 03c6 	bfi	r3, r2, #3, #4
   11072:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   11076:	f108 0801 	add.w	r8, r8, #1
		break;
   1107a:	e7b2      	b.n	10fe2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   1107c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11080:	2207      	movs	r2, #7
   11082:	f362 03c6 	bfi	r3, r2, #3, #4
   11086:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1108a:	f108 0801 	add.w	r8, r8, #1
		break;
   1108e:	e7a8      	b.n	10fe2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   11090:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11094:	2208      	movs	r2, #8
   11096:	f362 03c6 	bfi	r3, r2, #3, #4
   1109a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1109e:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   110a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   110a6:	f043 0302 	orr.w	r3, r3, #2
   110aa:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   110ae:	e798      	b.n	10fe2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   110b0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   110b4:	f36f 03c6 	bfc	r3, #3, #4
   110b8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   110bc:	e791      	b.n	10fe2 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   110be:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   110c2:	2101      	movs	r1, #1
   110c4:	f361 0202 	bfi	r2, r1, #0, #3
   110c8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   110cc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   110d0:	f002 0278 	and.w	r2, r2, #120	; 0x78
   110d4:	2a40      	cmp	r2, #64	; 0x40
   110d6:	f000 80aa 	beq.w	1122e <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   110da:	2b63      	cmp	r3, #99	; 0x63
   110dc:	f000 80ae 	beq.w	1123c <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   110e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   110e4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   110e8:	4317      	orrs	r7, r2
   110ea:	f367 0341 	bfi	r3, r7, #1, #1
   110ee:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   110f2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   110f6:	f013 0f01 	tst.w	r3, #1
   110fa:	f000 80da 	beq.w	112b2 <cbvprintf+0x56a>
			width = va_arg(ap, int);
   110fe:	9b03      	ldr	r3, [sp, #12]
   11100:	1d1a      	adds	r2, r3, #4
   11102:	9203      	str	r2, [sp, #12]
   11104:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   11106:	2f00      	cmp	r7, #0
   11108:	f2c0 80cb 	blt.w	112a2 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1110c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11110:	f013 0f04 	tst.w	r3, #4
   11114:	f000 80df 	beq.w	112d6 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   11118:	9b03      	ldr	r3, [sp, #12]
   1111a:	1d1a      	adds	r2, r3, #4
   1111c:	9203      	str	r2, [sp, #12]
   1111e:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   11122:	f1bb 0f00 	cmp.w	fp, #0
   11126:	f2c0 80cd 	blt.w	112c4 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   1112a:	2300      	movs	r3, #0
   1112c:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   1112e:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   11130:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11134:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   11138:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   1113c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   11140:	2b01      	cmp	r3, #1
   11142:	f000 80d1 	beq.w	112e8 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   11146:	2b02      	cmp	r3, #2
   11148:	f000 8116 	beq.w	11378 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1114c:	2b04      	cmp	r3, #4
   1114e:	f000 8167 	beq.w	11420 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   11152:	2b03      	cmp	r3, #3
   11154:	f000 817e 	beq.w	11454 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   11158:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1115c:	f019 0303 	ands.w	r3, r9, #3
   11160:	9302      	str	r3, [sp, #8]
   11162:	f040 817d 	bne.w	11460 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   11166:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1116a:	3b25      	subs	r3, #37	; 0x25
   1116c:	2b53      	cmp	r3, #83	; 0x53
   1116e:	f200 8233 	bhi.w	115d8 <cbvprintf+0x890>
   11172:	e8df f013 	tbh	[pc, r3, lsl #1]
   11176:	0181      	.short	0x0181
   11178:	02310231 	.word	0x02310231
   1117c:	02310231 	.word	0x02310231
   11180:	02310231 	.word	0x02310231
   11184:	02310231 	.word	0x02310231
   11188:	02310231 	.word	0x02310231
   1118c:	02310231 	.word	0x02310231
   11190:	02310231 	.word	0x02310231
   11194:	02310231 	.word	0x02310231
   11198:	02310231 	.word	0x02310231
   1119c:	02310231 	.word	0x02310231
   111a0:	02310231 	.word	0x02310231
   111a4:	02310231 	.word	0x02310231
   111a8:	02310231 	.word	0x02310231
   111ac:	02310231 	.word	0x02310231
   111b0:	02310231 	.word	0x02310231
   111b4:	02310231 	.word	0x02310231
   111b8:	02310231 	.word	0x02310231
   111bc:	02310231 	.word	0x02310231
   111c0:	02310231 	.word	0x02310231
   111c4:	02310231 	.word	0x02310231
   111c8:	02310231 	.word	0x02310231
   111cc:	02310231 	.word	0x02310231
   111d0:	02310231 	.word	0x02310231
   111d4:	02310231 	.word	0x02310231
   111d8:	02310231 	.word	0x02310231
   111dc:	023101c7 	.word	0x023101c7
   111e0:	02310231 	.word	0x02310231
   111e4:	02310231 	.word	0x02310231
   111e8:	02310231 	.word	0x02310231
   111ec:	02310231 	.word	0x02310231
   111f0:	01a10231 	.word	0x01a10231
   111f4:	023101ab 	.word	0x023101ab
   111f8:	02310231 	.word	0x02310231
   111fc:	01ab0231 	.word	0x01ab0231
   11200:	02310231 	.word	0x02310231
   11204:	02310231 	.word	0x02310231
   11208:	01c70208 	.word	0x01c70208
   1120c:	023101ea 	.word	0x023101ea
   11210:	018f0231 	.word	0x018f0231
   11214:	01c70231 	.word	0x01c70231
   11218:	02310231 	.word	0x02310231
   1121c:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   1121e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   11222:	2102      	movs	r1, #2
   11224:	f361 0202 	bfi	r2, r1, #0, #3
   11228:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   1122c:	e74e      	b.n	110cc <cbvprintf+0x384>
			conv->invalid = true;
   1122e:	f89d 1020 	ldrb.w	r1, [sp, #32]
   11232:	f041 0101 	orr.w	r1, r1, #1
   11236:	f88d 1020 	strb.w	r1, [sp, #32]
   1123a:	e74e      	b.n	110da <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1123c:	1e17      	subs	r7, r2, #0
   1123e:	bf18      	it	ne
   11240:	2701      	movne	r7, #1
   11242:	e74d      	b.n	110e0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   11244:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11248:	2204      	movs	r2, #4
   1124a:	f362 0302 	bfi	r3, r2, #0, #3
   1124e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   11252:	2701      	movs	r7, #1
			break;
   11254:	e744      	b.n	110e0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   11256:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1125a:	2203      	movs	r2, #3
   1125c:	f362 0302 	bfi	r3, r2, #0, #3
   11260:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   11264:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11268:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1126c:	2b40      	cmp	r3, #64	; 0x40
   1126e:	f47f af37 	bne.w	110e0 <cbvprintf+0x398>
			unsupported = true;
   11272:	2701      	movs	r7, #1
   11274:	e734      	b.n	110e0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   11276:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1127a:	2203      	movs	r2, #3
   1127c:	f362 0302 	bfi	r3, r2, #0, #3
   11280:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   11284:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11288:	f013 0f78 	tst.w	r3, #120	; 0x78
   1128c:	f43f af28 	beq.w	110e0 <cbvprintf+0x398>
			unsupported = true;
   11290:	2701      	movs	r7, #1
   11292:	e725      	b.n	110e0 <cbvprintf+0x398>
		conv->invalid = true;
   11294:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11298:	f043 0301 	orr.w	r3, r3, #1
   1129c:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   112a0:	e71e      	b.n	110e0 <cbvprintf+0x398>
				conv->flag_dash = true;
   112a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   112a6:	f043 0304 	orr.w	r3, r3, #4
   112aa:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   112ae:	427f      	negs	r7, r7
   112b0:	e72c      	b.n	1110c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   112b2:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   112b6:	2b00      	cmp	r3, #0
   112b8:	db02      	blt.n	112c0 <cbvprintf+0x578>
		int width = -1;
   112ba:	f04f 37ff 	mov.w	r7, #4294967295
   112be:	e725      	b.n	1110c <cbvprintf+0x3c4>
			width = conv->width_value;
   112c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   112c2:	e723      	b.n	1110c <cbvprintf+0x3c4>
				conv->prec_present = false;
   112c4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   112c8:	f36f 0341 	bfc	r3, #1, #1
   112cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   112d0:	f04f 3bff 	mov.w	fp, #4294967295
   112d4:	e729      	b.n	1112a <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   112d6:	f013 0f02 	tst.w	r3, #2
   112da:	d002      	beq.n	112e2 <cbvprintf+0x59a>
			precision = conv->prec_value;
   112dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   112e0:	e723      	b.n	1112a <cbvprintf+0x3e2>
		int precision = -1;
   112e2:	f04f 3bff 	mov.w	fp, #4294967295
   112e6:	e720      	b.n	1112a <cbvprintf+0x3e2>
			switch (length_mod) {
   112e8:	1ecb      	subs	r3, r1, #3
   112ea:	2b04      	cmp	r3, #4
   112ec:	d804      	bhi.n	112f8 <cbvprintf+0x5b0>
   112ee:	e8df f003 	tbb	[pc, r3]
   112f2:	1d0b      	.short	0x1d0b
   112f4:	3529      	.short	0x3529
   112f6:	35          	.byte	0x35
   112f7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   112f8:	9b03      	ldr	r3, [sp, #12]
   112fa:	1d1a      	adds	r2, r3, #4
   112fc:	9203      	str	r2, [sp, #12]
   112fe:	681a      	ldr	r2, [r3, #0]
   11300:	17d3      	asrs	r3, r2, #31
   11302:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11306:	e006      	b.n	11316 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   11308:	9b03      	ldr	r3, [sp, #12]
   1130a:	1d1a      	adds	r2, r3, #4
   1130c:	9203      	str	r2, [sp, #12]
   1130e:	681a      	ldr	r2, [r3, #0]
   11310:	17d3      	asrs	r3, r2, #31
   11312:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   11316:	2901      	cmp	r1, #1
   11318:	d028      	beq.n	1136c <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   1131a:	2902      	cmp	r1, #2
   1131c:	f47f af1c 	bne.w	11158 <cbvprintf+0x410>
				value->sint = (short)value->sint;
   11320:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   11324:	17d3      	asrs	r3, r2, #31
   11326:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1132a:	e715      	b.n	11158 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   1132c:	9b03      	ldr	r3, [sp, #12]
   1132e:	3307      	adds	r3, #7
   11330:	f023 0307 	bic.w	r3, r3, #7
   11334:	f103 0208 	add.w	r2, r3, #8
   11338:	9203      	str	r2, [sp, #12]
   1133a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1133e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11342:	e7e8      	b.n	11316 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   11344:	9b03      	ldr	r3, [sp, #12]
   11346:	3307      	adds	r3, #7
   11348:	f023 0307 	bic.w	r3, r3, #7
   1134c:	f103 0208 	add.w	r2, r3, #8
   11350:	9203      	str	r2, [sp, #12]
   11352:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   11356:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1135a:	e7dc      	b.n	11316 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1135c:	9b03      	ldr	r3, [sp, #12]
   1135e:	1d1a      	adds	r2, r3, #4
   11360:	9203      	str	r2, [sp, #12]
   11362:	681a      	ldr	r2, [r3, #0]
   11364:	17d3      	asrs	r3, r2, #31
				value->sint =
   11366:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1136a:	e7d4      	b.n	11316 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   1136c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11370:	9306      	str	r3, [sp, #24]
   11372:	2300      	movs	r3, #0
   11374:	9307      	str	r3, [sp, #28]
   11376:	e6ef      	b.n	11158 <cbvprintf+0x410>
			switch (length_mod) {
   11378:	1ecb      	subs	r3, r1, #3
   1137a:	2b04      	cmp	r3, #4
   1137c:	d804      	bhi.n	11388 <cbvprintf+0x640>
   1137e:	e8df f003 	tbb	[pc, r3]
   11382:	1f0b      	.short	0x1f0b
   11384:	4135      	.short	0x4135
   11386:	41          	.byte	0x41
   11387:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   11388:	9b03      	ldr	r3, [sp, #12]
   1138a:	1d1a      	adds	r2, r3, #4
   1138c:	9203      	str	r2, [sp, #12]
   1138e:	681b      	ldr	r3, [r3, #0]
   11390:	9306      	str	r3, [sp, #24]
   11392:	2300      	movs	r3, #0
   11394:	9307      	str	r3, [sp, #28]
				break;
   11396:	e01e      	b.n	113d6 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   11398:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   1139c:	2b63      	cmp	r3, #99	; 0x63
   1139e:	d007      	beq.n	113b0 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   113a0:	9b03      	ldr	r3, [sp, #12]
   113a2:	1d1a      	adds	r2, r3, #4
   113a4:	9203      	str	r2, [sp, #12]
   113a6:	681b      	ldr	r3, [r3, #0]
   113a8:	9306      	str	r3, [sp, #24]
   113aa:	2300      	movs	r3, #0
   113ac:	9307      	str	r3, [sp, #28]
   113ae:	e012      	b.n	113d6 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   113b0:	9b03      	ldr	r3, [sp, #12]
   113b2:	1d1a      	adds	r2, r3, #4
   113b4:	9203      	str	r2, [sp, #12]
   113b6:	681b      	ldr	r3, [r3, #0]
   113b8:	9306      	str	r3, [sp, #24]
   113ba:	2300      	movs	r3, #0
   113bc:	9307      	str	r3, [sp, #28]
   113be:	e00a      	b.n	113d6 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   113c0:	9b03      	ldr	r3, [sp, #12]
   113c2:	3307      	adds	r3, #7
   113c4:	f023 0307 	bic.w	r3, r3, #7
   113c8:	f103 0208 	add.w	r2, r3, #8
   113cc:	9203      	str	r2, [sp, #12]
   113ce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   113d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   113d6:	2901      	cmp	r1, #1
   113d8:	d01c      	beq.n	11414 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   113da:	2902      	cmp	r1, #2
   113dc:	f47f aebc 	bne.w	11158 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   113e0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   113e4:	9306      	str	r3, [sp, #24]
   113e6:	2300      	movs	r3, #0
   113e8:	9307      	str	r3, [sp, #28]
   113ea:	e6b5      	b.n	11158 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   113ec:	9b03      	ldr	r3, [sp, #12]
   113ee:	3307      	adds	r3, #7
   113f0:	f023 0307 	bic.w	r3, r3, #7
   113f4:	f103 0208 	add.w	r2, r3, #8
   113f8:	9203      	str	r2, [sp, #12]
   113fa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   113fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11402:	e7e8      	b.n	113d6 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   11404:	9b03      	ldr	r3, [sp, #12]
   11406:	1d1a      	adds	r2, r3, #4
   11408:	9203      	str	r2, [sp, #12]
   1140a:	681b      	ldr	r3, [r3, #0]
				value->uint =
   1140c:	9306      	str	r3, [sp, #24]
   1140e:	2300      	movs	r3, #0
   11410:	9307      	str	r3, [sp, #28]
				break;
   11412:	e7e0      	b.n	113d6 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   11414:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11418:	9306      	str	r3, [sp, #24]
   1141a:	2300      	movs	r3, #0
   1141c:	9307      	str	r3, [sp, #28]
   1141e:	e69b      	b.n	11158 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   11420:	2908      	cmp	r1, #8
   11422:	d00b      	beq.n	1143c <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   11424:	9b03      	ldr	r3, [sp, #12]
   11426:	3307      	adds	r3, #7
   11428:	f023 0307 	bic.w	r3, r3, #7
   1142c:	f103 0208 	add.w	r2, r3, #8
   11430:	9203      	str	r2, [sp, #12]
   11432:	e9d3 2300 	ldrd	r2, r3, [r3]
   11436:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1143a:	e68d      	b.n	11158 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   1143c:	9b03      	ldr	r3, [sp, #12]
   1143e:	3307      	adds	r3, #7
   11440:	f023 0307 	bic.w	r3, r3, #7
   11444:	f103 0208 	add.w	r2, r3, #8
   11448:	9203      	str	r2, [sp, #12]
   1144a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1144e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11452:	e681      	b.n	11158 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   11454:	9b03      	ldr	r3, [sp, #12]
   11456:	1d1a      	adds	r2, r3, #4
   11458:	9203      	str	r2, [sp, #12]
   1145a:	681b      	ldr	r3, [r3, #0]
   1145c:	9306      	str	r3, [sp, #24]
   1145e:	e67b      	b.n	11158 <cbvprintf+0x410>
			OUTS(sp, fp);
   11460:	4643      	mov	r3, r8
   11462:	4652      	mov	r2, sl
   11464:	4629      	mov	r1, r5
   11466:	4630      	mov	r0, r6
   11468:	f017 faea 	bl	28a40 <outs>
   1146c:	2800      	cmp	r0, #0
   1146e:	f2c0 814f 	blt.w	11710 <cbvprintf+0x9c8>
   11472:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   11474:	46c2      	mov	sl, r8
			continue;
   11476:	e46f      	b.n	10d58 <cbvprintf+0x10>
		case '%':
			OUTC('%');
   11478:	4629      	mov	r1, r5
   1147a:	2025      	movs	r0, #37	; 0x25
   1147c:	47b0      	blx	r6
   1147e:	2800      	cmp	r0, #0
   11480:	f2c0 8146 	blt.w	11710 <cbvprintf+0x9c8>
   11484:	3401      	adds	r4, #1
		char sign = 0;
   11486:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1148a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1148e:	f04f 0a00 	mov.w	sl, #0
			break;
   11492:	e0a7      	b.n	115e4 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   11494:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   11498:	f1bb 0f00 	cmp.w	fp, #0
   1149c:	db08      	blt.n	114b0 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   1149e:	4659      	mov	r1, fp
   114a0:	4650      	mov	r0, sl
   114a2:	f019 f9a0 	bl	2a7e6 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   114a6:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   114aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   114ae:	e099      	b.n	115e4 <cbvprintf+0x89c>
				len = strlen(bps);
   114b0:	4650      	mov	r0, sl
   114b2:	f019 f990 	bl	2a7d6 <strlen>
   114b6:	e7f6      	b.n	114a6 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   114b8:	9b06      	ldr	r3, [sp, #24]
   114ba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   114be:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   114c2:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   114c6:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   114ca:	e08b      	b.n	115e4 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   114cc:	f019 0f08 	tst.w	r9, #8
   114d0:	d105      	bne.n	114de <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   114d2:	f019 0910 	ands.w	r9, r9, #16
   114d6:	d004      	beq.n	114e2 <cbvprintf+0x79a>
				sign = ' ';
   114d8:	f04f 0920 	mov.w	r9, #32
   114dc:	e001      	b.n	114e2 <cbvprintf+0x79a>
				sign = '+';
   114de:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   114e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   114e6:	2a00      	cmp	r2, #0
   114e8:	f173 0100 	sbcs.w	r1, r3, #0
   114ec:	db02      	blt.n	114f4 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   114ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   114f2:	e009      	b.n	11508 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   114f4:	4252      	negs	r2, r2
   114f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   114fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   114fe:	f04f 092d 	mov.w	r9, #45	; 0x2d
   11502:	e001      	b.n	11508 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   11504:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   11508:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1150c:	9300      	str	r3, [sp, #0]
   1150e:	ab0c      	add	r3, sp, #48	; 0x30
   11510:	aa08      	add	r2, sp, #32
   11512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11516:	f017 fa29 	bl	2896c <encode_uint>
   1151a:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   1151c:	f1bb 0f00 	cmp.w	fp, #0
   11520:	f2c0 8090 	blt.w	11644 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   11524:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   11528:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   1152c:	f89d 2020 	ldrb.w	r2, [sp, #32]
   11530:	f36f 1286 	bfc	r2, #6, #1
   11534:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   11538:	459b      	cmp	fp, r3
   1153a:	f240 8086 	bls.w	1164a <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   1153e:	ebab 0303 	sub.w	r3, fp, r3
   11542:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   11544:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   11548:	e04c      	b.n	115e4 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   1154a:	9806      	ldr	r0, [sp, #24]
   1154c:	b930      	cbnz	r0, 1155c <cbvprintf+0x814>
		char sign = 0;
   1154e:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   11552:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 11718 <cbvprintf+0x9d0>
			bps = "(nil)";
   11556:	f1ab 0a05 	sub.w	sl, fp, #5
   1155a:	e043      	b.n	115e4 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1155c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   11560:	9300      	str	r3, [sp, #0]
   11562:	ab0c      	add	r3, sp, #48	; 0x30
   11564:	aa08      	add	r2, sp, #32
   11566:	2100      	movs	r1, #0
   11568:	f017 fa00 	bl	2896c <encode_uint>
   1156c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1156e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11572:	f043 0310 	orr.w	r3, r3, #16
   11576:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   1157a:	2378      	movs	r3, #120	; 0x78
   1157c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   11580:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   11584:	e7ca      	b.n	1151c <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   11586:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   11588:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1158c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   11590:	2b07      	cmp	r3, #7
   11592:	d806      	bhi.n	115a2 <cbvprintf+0x85a>
   11594:	e8df f003 	tbb	[pc, r3]
   11598:	100e0c04 	.word	0x100e0c04
   1159c:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   115a0:	6014      	str	r4, [r2, #0]
		char sign = 0;
   115a2:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   115a6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   115aa:	f04f 0a00 	mov.w	sl, #0
}
   115ae:	e019      	b.n	115e4 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   115b0:	7014      	strb	r4, [r2, #0]
		break;
   115b2:	e7f6      	b.n	115a2 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   115b4:	8014      	strh	r4, [r2, #0]
		break;
   115b6:	e7f4      	b.n	115a2 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   115b8:	6014      	str	r4, [r2, #0]
		break;
   115ba:	e7f2      	b.n	115a2 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   115bc:	4620      	mov	r0, r4
   115be:	17e1      	asrs	r1, r4, #31
   115c0:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   115c4:	e7ed      	b.n	115a2 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   115c6:	4620      	mov	r0, r4
   115c8:	17e1      	asrs	r1, r4, #31
   115ca:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   115ce:	e7e8      	b.n	115a2 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   115d0:	6014      	str	r4, [r2, #0]
		break;
   115d2:	e7e6      	b.n	115a2 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   115d4:	6014      	str	r4, [r2, #0]
		break;
   115d6:	e7e4      	b.n	115a2 <cbvprintf+0x85a>
		switch (conv->specifier) {
   115d8:	f8dd 9008 	ldr.w	r9, [sp, #8]
   115dc:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   115e0:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   115e4:	f1ba 0f00 	cmp.w	sl, #0
   115e8:	f000 808e 	beq.w	11708 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   115ec:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   115f0:	f1b9 0f00 	cmp.w	r9, #0
   115f4:	d000      	beq.n	115f8 <cbvprintf+0x8b0>
			nj_len += 1U;
   115f6:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   115f8:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   115fc:	f011 0f10 	tst.w	r1, #16
   11600:	d026      	beq.n	11650 <cbvprintf+0x908>
			nj_len += 2U;
   11602:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   11604:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11606:	4413      	add	r3, r2
		if (conv->pad_fp) {
   11608:	f011 0f40 	tst.w	r1, #64	; 0x40
   1160c:	d001      	beq.n	11612 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   1160e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11610:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   11612:	2f00      	cmp	r7, #0
   11614:	dd32      	ble.n	1167c <cbvprintf+0x934>
			width -= (int)nj_len;
   11616:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   11618:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1161c:	f013 0f04 	tst.w	r3, #4
   11620:	d12c      	bne.n	1167c <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   11622:	f013 0f40 	tst.w	r3, #64	; 0x40
   11626:	d018      	beq.n	1165a <cbvprintf+0x912>
					if (sign != 0) {
   11628:	f1b9 0f00 	cmp.w	r9, #0
   1162c:	d018      	beq.n	11660 <cbvprintf+0x918>
						OUTC(sign);
   1162e:	4629      	mov	r1, r5
   11630:	4648      	mov	r0, r9
   11632:	47b0      	blx	r6
   11634:	2800      	cmp	r0, #0
   11636:	db6b      	blt.n	11710 <cbvprintf+0x9c8>
   11638:	3401      	adds	r4, #1
						sign = 0;
   1163a:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   1163e:	2330      	movs	r3, #48	; 0x30
   11640:	9302      	str	r3, [sp, #8]
   11642:	e00f      	b.n	11664 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   11644:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   11648:	e7cc      	b.n	115e4 <cbvprintf+0x89c>
   1164a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1164e:	e7c9      	b.n	115e4 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   11650:	f011 0f08 	tst.w	r1, #8
   11654:	d0d6      	beq.n	11604 <cbvprintf+0x8bc>
			nj_len += 1U;
   11656:	3201      	adds	r2, #1
   11658:	e7d4      	b.n	11604 <cbvprintf+0x8bc>
				char pad = ' ';
   1165a:	2320      	movs	r3, #32
   1165c:	9302      	str	r3, [sp, #8]
   1165e:	e001      	b.n	11664 <cbvprintf+0x91c>
					pad = '0';
   11660:	2330      	movs	r3, #48	; 0x30
   11662:	9302      	str	r3, [sp, #8]
   11664:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   11666:	1e5f      	subs	r7, r3, #1
   11668:	2b00      	cmp	r3, #0
   1166a:	dd07      	ble.n	1167c <cbvprintf+0x934>
					OUTC(pad);
   1166c:	4629      	mov	r1, r5
   1166e:	9802      	ldr	r0, [sp, #8]
   11670:	47b0      	blx	r6
   11672:	2800      	cmp	r0, #0
   11674:	db4c      	blt.n	11710 <cbvprintf+0x9c8>
   11676:	3401      	adds	r4, #1
				while (width-- > 0) {
   11678:	463b      	mov	r3, r7
   1167a:	e7f4      	b.n	11666 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   1167c:	f1b9 0f00 	cmp.w	r9, #0
   11680:	d005      	beq.n	1168e <cbvprintf+0x946>
			OUTC(sign);
   11682:	4629      	mov	r1, r5
   11684:	4648      	mov	r0, r9
   11686:	47b0      	blx	r6
   11688:	2800      	cmp	r0, #0
   1168a:	db41      	blt.n	11710 <cbvprintf+0x9c8>
   1168c:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   1168e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11692:	f3c3 1200 	ubfx	r2, r3, #4, #1
   11696:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1169a:	4313      	orrs	r3, r2
   1169c:	d005      	beq.n	116aa <cbvprintf+0x962>
				OUTC('0');
   1169e:	4629      	mov	r1, r5
   116a0:	2030      	movs	r0, #48	; 0x30
   116a2:	47b0      	blx	r6
   116a4:	2800      	cmp	r0, #0
   116a6:	db33      	blt.n	11710 <cbvprintf+0x9c8>
   116a8:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   116aa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   116ae:	f013 0f10 	tst.w	r3, #16
   116b2:	d006      	beq.n	116c2 <cbvprintf+0x97a>
				OUTC(conv->specifier);
   116b4:	4629      	mov	r1, r5
   116b6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   116ba:	47b0      	blx	r6
   116bc:	2800      	cmp	r0, #0
   116be:	db27      	blt.n	11710 <cbvprintf+0x9c8>
   116c0:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   116c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   116c4:	f103 39ff 	add.w	r9, r3, #4294967295
   116c8:	2b00      	cmp	r3, #0
   116ca:	dd07      	ble.n	116dc <cbvprintf+0x994>
				OUTC('0');
   116cc:	4629      	mov	r1, r5
   116ce:	2030      	movs	r0, #48	; 0x30
   116d0:	47b0      	blx	r6
   116d2:	2800      	cmp	r0, #0
   116d4:	db1c      	blt.n	11710 <cbvprintf+0x9c8>
   116d6:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   116d8:	464b      	mov	r3, r9
   116da:	e7f3      	b.n	116c4 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   116dc:	465b      	mov	r3, fp
   116de:	4652      	mov	r2, sl
   116e0:	4629      	mov	r1, r5
   116e2:	4630      	mov	r0, r6
   116e4:	f017 f9ac 	bl	28a40 <outs>
   116e8:	2800      	cmp	r0, #0
   116ea:	db11      	blt.n	11710 <cbvprintf+0x9c8>
   116ec:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   116ee:	2f00      	cmp	r7, #0
   116f0:	dd07      	ble.n	11702 <cbvprintf+0x9ba>
			OUTC(' ');
   116f2:	4629      	mov	r1, r5
   116f4:	2020      	movs	r0, #32
   116f6:	47b0      	blx	r6
   116f8:	2800      	cmp	r0, #0
   116fa:	db09      	blt.n	11710 <cbvprintf+0x9c8>
   116fc:	3401      	adds	r4, #1
			--width;
   116fe:	3f01      	subs	r7, #1
   11700:	e7f5      	b.n	116ee <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   11702:	46c2      	mov	sl, r8
   11704:	f7ff bb28 	b.w	10d58 <cbvprintf+0x10>
   11708:	46c2      	mov	sl, r8
   1170a:	f7ff bb25 	b.w	10d58 <cbvprintf+0x10>
		}
	}

	return count;
   1170e:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   11710:	b013      	add	sp, #76	; 0x4c
   11712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11716:	bf00      	nop
   11718:	0002f9f5 	.word	0x0002f9f5

0001171c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
   1171c:	b508      	push	{r3, lr}
   1171e:	4604      	mov	r4, r0
	__asm__ volatile(
   11720:	f04f 0240 	mov.w	r2, #64	; 0x40
   11724:	f3ef 8311 	mrs	r3, BASEPRI
   11728:	f382 8812 	msr	BASEPRI_MAX, r2
   1172c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   11730:	f01c fd50 	bl	2e1d4 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   11734:	4620      	mov	r0, r4
   11736:	f002 fb43 	bl	13dc0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1173a:	4803      	ldr	r0, [pc, #12]	; (11748 <sys_reboot+0x2c>)
   1173c:	f016 fe01 	bl	28342 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11740:	f001 fd30 	bl	131a4 <arch_cpu_idle>
   11744:	e7fc      	b.n	11740 <sys_reboot+0x24>
   11746:	bf00      	nop
   11748:	0002f9f8 	.word	0x0002f9f8

0001174c <minimal_hexdump_line_print>:
{
	vprintk(fmt, ap);
}

static void minimal_hexdump_line_print(const char *data, size_t length)
{
   1174c:	b570      	push	{r4, r5, r6, lr}
   1174e:	4606      	mov	r6, r0
   11750:	460d      	mov	r5, r1
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11752:	2400      	movs	r4, #0
   11754:	e003      	b.n	1175e <minimal_hexdump_line_print+0x12>
		if (i < length) {
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
		} else {
			printk("   ");
   11756:	4814      	ldr	r0, [pc, #80]	; (117a8 <minimal_hexdump_line_print+0x5c>)
   11758:	f016 fdf3 	bl	28342 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1175c:	3401      	adds	r4, #1
   1175e:	2c07      	cmp	r4, #7
   11760:	d806      	bhi.n	11770 <minimal_hexdump_line_print+0x24>
		if (i < length) {
   11762:	42ac      	cmp	r4, r5
   11764:	d2f7      	bcs.n	11756 <minimal_hexdump_line_print+0xa>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   11766:	5d31      	ldrb	r1, [r6, r4]
   11768:	4810      	ldr	r0, [pc, #64]	; (117ac <minimal_hexdump_line_print+0x60>)
   1176a:	f016 fdea 	bl	28342 <printk>
   1176e:	e7f5      	b.n	1175c <minimal_hexdump_line_print+0x10>
		}
	}

	printk("|");
   11770:	480f      	ldr	r0, [pc, #60]	; (117b0 <minimal_hexdump_line_print+0x64>)
   11772:	f016 fde6 	bl	28342 <printk>

	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11776:	2400      	movs	r4, #0
   11778:	e003      	b.n	11782 <minimal_hexdump_line_print+0x36>
		if (i < length) {
			unsigned char c = data[i];

			printk("%c", isprint((int)c) != 0 ? c : '.');
   1177a:	480e      	ldr	r0, [pc, #56]	; (117b4 <minimal_hexdump_line_print+0x68>)
   1177c:	f016 fde1 	bl	28342 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11780:	3401      	adds	r4, #1
   11782:	2c07      	cmp	r4, #7
   11784:	d80c      	bhi.n	117a0 <minimal_hexdump_line_print+0x54>
		if (i < length) {
   11786:	42ac      	cmp	r4, r5
   11788:	d206      	bcs.n	11798 <minimal_hexdump_line_print+0x4c>
			unsigned char c = data[i];
   1178a:	5d31      	ldrb	r1, [r6, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   1178c:	f1a1 0320 	sub.w	r3, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
   11790:	2b5e      	cmp	r3, #94	; 0x5e
   11792:	d9f2      	bls.n	1177a <minimal_hexdump_line_print+0x2e>
   11794:	212e      	movs	r1, #46	; 0x2e
   11796:	e7f0      	b.n	1177a <minimal_hexdump_line_print+0x2e>
		} else {
			printk(" ");
   11798:	4807      	ldr	r0, [pc, #28]	; (117b8 <minimal_hexdump_line_print+0x6c>)
   1179a:	f016 fdd2 	bl	28342 <printk>
   1179e:	e7ef      	b.n	11780 <minimal_hexdump_line_print+0x34>
		}
	}
	printk("\n");
   117a0:	4806      	ldr	r0, [pc, #24]	; (117bc <minimal_hexdump_line_print+0x70>)
   117a2:	f016 fdce 	bl	28342 <printk>
}
   117a6:	bd70      	pop	{r4, r5, r6, pc}
   117a8:	0002fa2c 	.word	0x0002fa2c
   117ac:	0002fa24 	.word	0x0002fa24
   117b0:	0002fa30 	.word	0x0002fa30
   117b4:	0002fa34 	.word	0x0002fa34
   117b8:	0002fa28 	.word	0x0002fa28
   117bc:	00033188 	.word	0x00033188

000117c0 <z_log_minimal_hexdump_print>:

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   117c0:	b570      	push	{r4, r5, r6, lr}
   117c2:	4606      	mov	r6, r0
   117c4:	460d      	mov	r5, r1
   117c6:	4614      	mov	r4, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   117c8:	e00d      	b.n	117e6 <z_log_minimal_hexdump_print+0x26>
   117ca:	2145      	movs	r1, #69	; 0x45
   117cc:	e000      	b.n	117d0 <z_log_minimal_hexdump_print+0x10>
	case LOG_LEVEL_ERR:
		return 'E';
	case LOG_LEVEL_WRN:
		return 'W';
	case LOG_LEVEL_INF:
		return 'I';
   117ce:	2149      	movs	r1, #73	; 0x49
		printk("%c: ", z_log_minimal_level_to_char(level));
   117d0:	4810      	ldr	r0, [pc, #64]	; (11814 <z_log_minimal_hexdump_print+0x54>)
   117d2:	f016 fdb6 	bl	28342 <printk>
		minimal_hexdump_line_print(data_buffer, size);
   117d6:	4621      	mov	r1, r4
   117d8:	4628      	mov	r0, r5
   117da:	f7ff ffb7 	bl	1174c <minimal_hexdump_line_print>

		if (size < HEXDUMP_BYTES_IN_LINE) {
   117de:	2c07      	cmp	r4, #7
   117e0:	d916      	bls.n	11810 <z_log_minimal_hexdump_print+0x50>
			break;
		}

		size -= HEXDUMP_BYTES_IN_LINE;
   117e2:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   117e4:	3508      	adds	r5, #8
	while (size > 0U) {
   117e6:	b19c      	cbz	r4, 11810 <z_log_minimal_hexdump_print+0x50>
	switch (level) {
   117e8:	1e73      	subs	r3, r6, #1
   117ea:	2b03      	cmp	r3, #3
   117ec:	d80c      	bhi.n	11808 <z_log_minimal_hexdump_print+0x48>
   117ee:	a201      	add	r2, pc, #4	; (adr r2, 117f4 <z_log_minimal_hexdump_print+0x34>)
   117f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   117f4:	000117cb 	.word	0x000117cb
   117f8:	0001180d 	.word	0x0001180d
   117fc:	000117cf 	.word	0x000117cf
   11800:	00011805 	.word	0x00011805
	case LOG_LEVEL_DBG:
		return 'D';
   11804:	2144      	movs	r1, #68	; 0x44
   11806:	e7e3      	b.n	117d0 <z_log_minimal_hexdump_print+0x10>
	default:
		return '?';
   11808:	213f      	movs	r1, #63	; 0x3f
   1180a:	e7e1      	b.n	117d0 <z_log_minimal_hexdump_print+0x10>
		return 'W';
   1180c:	2157      	movs	r1, #87	; 0x57
   1180e:	e7df      	b.n	117d0 <z_log_minimal_hexdump_print+0x10>
	}
}
   11810:	bd70      	pop	{r4, r5, r6, pc}
   11812:	bf00      	nop
   11814:	0002fa38 	.word	0x0002fa38

00011818 <nvs_startup>:
	}
	return 0;
}

static int nvs_startup(struct nvs_fs *fs)
{
   11818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1181c:	b087      	sub	sp, #28
   1181e:	4604      	mov	r4, r0
	size_t ate_size, empty_len;
	/* Initialize addr to 0 for the case fs->sector_count == 0. This
	 * should never happen as this is verified in nvs_init() but both
	 * Coverity and GCC believe the contrary.
	 */
	uint32_t addr = 0U;
   11820:	2300      	movs	r3, #0
   11822:	9303      	str	r3, [sp, #12]
	uint16_t i, closed_sectors = 0;
	uint8_t erase_value = fs->flash_parameters->erase_value;
   11824:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11826:	791f      	ldrb	r7, [r3, #4]

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   11828:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1182c:	f04f 32ff 	mov.w	r2, #4294967295
   11830:	f04f 33ff 	mov.w	r3, #4294967295
   11834:	4648      	mov	r0, r9
   11836:	f010 fd2d 	bl	22294 <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1183a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1183c:	681b      	ldr	r3, [r3, #0]
   1183e:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   11840:	2a01      	cmp	r2, #1
   11842:	d906      	bls.n	11852 <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11844:	1dd6      	adds	r6, r2, #7
   11846:	4253      	negs	r3, r2
   11848:	401e      	ands	r6, r3
	uint16_t i, closed_sectors = 0;
   1184a:	f04f 0800 	mov.w	r8, #0

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
	/* step through the sectors to find a open sector following
	 * a closed sector, this is where NVS can to write.
	 */
	for (i = 0; i < fs->sector_count; i++) {
   1184e:	4645      	mov	r5, r8
   11850:	e003      	b.n	1185a <nvs_startup+0x42>
		return len;
   11852:	2608      	movs	r6, #8
   11854:	e7f9      	b.n	1184a <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
   11856:	3501      	adds	r5, #1
   11858:	b2ad      	uxth	r5, r5
   1185a:	89e3      	ldrh	r3, [r4, #14]
   1185c:	42ab      	cmp	r3, r5
   1185e:	d91c      	bls.n	1189a <nvs_startup+0x82>
		addr = (i << ADDR_SECT_SHIFT) +
		       (uint16_t)(fs->sector_size - ate_size);
   11860:	89a1      	ldrh	r1, [r4, #12]
   11862:	1b89      	subs	r1, r1, r6
   11864:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
   11866:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   1186a:	9103      	str	r1, [sp, #12]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1186c:	2308      	movs	r3, #8
   1186e:	463a      	mov	r2, r7
   11870:	4620      	mov	r0, r4
   11872:	f017 f96c 	bl	28b4e <nvs_flash_cmp_const>
					 sizeof(struct nvs_ate));
		if (rc) {
   11876:	2800      	cmp	r0, #0
   11878:	d0ed      	beq.n	11856 <nvs_startup+0x3e>
			/* closed sector */
			closed_sectors++;
   1187a:	f108 0801 	add.w	r8, r8, #1
   1187e:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
   11882:	a903      	add	r1, sp, #12
   11884:	4620      	mov	r0, r4
   11886:	f017 f929 	bl	28adc <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1188a:	2308      	movs	r3, #8
   1188c:	463a      	mov	r2, r7
   1188e:	9903      	ldr	r1, [sp, #12]
   11890:	4620      	mov	r0, r4
   11892:	f017 f95c 	bl	28b4e <nvs_flash_cmp_const>
						 sizeof(struct nvs_ate));
			if (!rc) {
   11896:	2800      	cmp	r0, #0
   11898:	d1dd      	bne.n	11856 <nvs_startup+0x3e>
				break;
			}
		}
	}
	/* all sectors are closed, this is not a nvs fs */
	if (closed_sectors == fs->sector_count) {
   1189a:	89e3      	ldrh	r3, [r4, #14]
   1189c:	4543      	cmp	r3, r8
   1189e:	f000 80f2 	beq.w	11a86 <nvs_startup+0x26e>
		rc = -EDEADLK;
		goto end;
	}

	if (i == fs->sector_count) {
   118a2:	42ab      	cmp	r3, r5
   118a4:	d00d      	beq.n	118c2 <nvs_startup+0xaa>

	/* addr contains address of closing ate in the most recent sector,
	 * search for the last valid ate using the recover_last_ate routine
	 */

	rc = nvs_recover_last_ate(fs, &addr);
   118a6:	a903      	add	r1, sp, #12
   118a8:	4620      	mov	r0, r4
   118aa:	f017 f9d4 	bl	28c56 <nvs_recover_last_ate>
	if (rc) {
   118ae:	4605      	mov	r5, r0
   118b0:	2800      	cmp	r0, #0
   118b2:	f040 80c6 	bne.w	11a42 <nvs_startup+0x22a>

	/* addr contains address of the last valid ate in the most recent sector
	 * search for the first ate containing all cells erased, in the process
	 * also update fs->data_wra.
	 */
	fs->ate_wra = addr;
   118b6:	9b03      	ldr	r3, [sp, #12]
   118b8:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   118ba:	0c1b      	lsrs	r3, r3, #16
   118bc:	041b      	lsls	r3, r3, #16
   118be:	60a3      	str	r3, [r4, #8]

	while (fs->ate_wra >= fs->data_wra) {
   118c0:	e010      	b.n	118e4 <nvs_startup+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   118c2:	2308      	movs	r3, #8
   118c4:	463a      	mov	r2, r7
   118c6:	9903      	ldr	r1, [sp, #12]
   118c8:	1b89      	subs	r1, r1, r6
   118ca:	4620      	mov	r0, r4
   118cc:	f017 f93f 	bl	28b4e <nvs_flash_cmp_const>
		if (!rc) {
   118d0:	2800      	cmp	r0, #0
   118d2:	d1e8      	bne.n	118a6 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
   118d4:	a903      	add	r1, sp, #12
   118d6:	4620      	mov	r0, r4
   118d8:	f017 f900 	bl	28adc <nvs_sector_advance>
   118dc:	e7e3      	b.n	118a6 <nvs_startup+0x8e>
				rc = -ESPIPE;
				goto end;
			}
		}

		fs->ate_wra -= ate_size;
   118de:	6863      	ldr	r3, [r4, #4]
   118e0:	1b9b      	subs	r3, r3, r6
   118e2:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
   118e4:	6861      	ldr	r1, [r4, #4]
   118e6:	68a3      	ldr	r3, [r4, #8]
   118e8:	4299      	cmp	r1, r3
   118ea:	d32e      	bcc.n	1194a <nvs_startup+0x132>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
   118ec:	aa04      	add	r2, sp, #16
   118ee:	4620      	mov	r0, r4
   118f0:	f017 f8e3 	bl	28aba <nvs_flash_ate_rd>
		if (rc) {
   118f4:	4605      	mov	r5, r0
   118f6:	2800      	cmp	r0, #0
   118f8:	f040 80a3 	bne.w	11a42 <nvs_startup+0x22a>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
   118fc:	4639      	mov	r1, r7
   118fe:	a804      	add	r0, sp, #16
   11900:	f017 f8e0 	bl	28ac4 <nvs_ate_cmp_const>
		if (!rc) {
   11904:	b308      	cbz	r0, 1194a <nvs_startup+0x132>
		if (nvs_ate_valid(fs, &last_ate)) {
   11906:	a904      	add	r1, sp, #16
   11908:	4620      	mov	r0, r4
   1190a:	f017 f988 	bl	28c1e <nvs_ate_valid>
   1190e:	2800      	cmp	r0, #0
   11910:	d0e5      	beq.n	118de <nvs_startup+0xc6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   11912:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11916:	0419      	lsls	r1, r3, #16
   11918:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1191a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1191e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   11922:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   11924:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   11926:	6812      	ldr	r2, [r2, #0]
   11928:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
   1192a:	2d01      	cmp	r5, #1
   1192c:	d903      	bls.n	11936 <nvs_startup+0x11e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1192e:	442b      	add	r3, r5
   11930:	3b01      	subs	r3, #1
   11932:	426a      	negs	r2, r5
   11934:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   11936:	440b      	add	r3, r1
   11938:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1193a:	6862      	ldr	r2, [r4, #4]
   1193c:	4293      	cmp	r3, r2
   1193e:	d1ce      	bne.n	118de <nvs_startup+0xc6>
   11940:	2800      	cmp	r0, #0
   11942:	d0cc      	beq.n	118de <nvs_startup+0xc6>
				rc = -ESPIPE;
   11944:	f06f 051c 	mvn.w	r5, #28
   11948:	e082      	b.n	11a50 <nvs_startup+0x238>
	 * we might need to restart gc if it has not yet finished. Otherwise
	 * just erase the sector.
	 * When gc needs to be restarted, first erase the sector otherwise the
	 * data might not fit into the sector.
	 */
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1194a:	88e3      	ldrh	r3, [r4, #6]
   1194c:	041b      	lsls	r3, r3, #16
   1194e:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &addr);
   11950:	a903      	add	r1, sp, #12
   11952:	4620      	mov	r0, r4
   11954:	f017 f8c2 	bl	28adc <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   11958:	89a3      	ldrh	r3, [r4, #12]
   1195a:	463a      	mov	r2, r7
   1195c:	9903      	ldr	r1, [sp, #12]
   1195e:	4620      	mov	r0, r4
   11960:	f017 f8f5 	bl	28b4e <nvs_flash_cmp_const>
	if (rc < 0) {
   11964:	1e05      	subs	r5, r0, #0
   11966:	db6c      	blt.n	11a42 <nvs_startup+0x22a>
		goto end;
	}
	if (rc) {
   11968:	2d00      	cmp	r5, #0
   1196a:	d052      	beq.n	11a12 <nvs_startup+0x1fa>
		 * (gc_done_ate) that indicates that gc was finished.
		 */
		bool gc_done_marker = false;
		struct nvs_ate gc_done_ate;

		addr = fs->ate_wra + ate_size;
   1196c:	6863      	ldr	r3, [r4, #4]
   1196e:	4433      	add	r3, r6
   11970:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   11972:	e002      	b.n	1197a <nvs_startup+0x162>
			    (gc_done_ate.id == 0xffff) &&
			    (gc_done_ate.len == 0U)) {
				gc_done_marker = true;
				break;
			}
			addr += ate_size;
   11974:	9b03      	ldr	r3, [sp, #12]
   11976:	4433      	add	r3, r6
   11978:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1197a:	9903      	ldr	r1, [sp, #12]
   1197c:	b28a      	uxth	r2, r1
   1197e:	89a3      	ldrh	r3, [r4, #12]
   11980:	1b9b      	subs	r3, r3, r6
   11982:	429a      	cmp	r2, r3
   11984:	d218      	bcs.n	119b8 <nvs_startup+0x1a0>
			rc = nvs_flash_ate_rd(fs, addr, &gc_done_ate);
   11986:	aa01      	add	r2, sp, #4
   11988:	4620      	mov	r0, r4
   1198a:	f017 f896 	bl	28aba <nvs_flash_ate_rd>
			if (rc) {
   1198e:	4605      	mov	r5, r0
   11990:	2800      	cmp	r0, #0
   11992:	d156      	bne.n	11a42 <nvs_startup+0x22a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   11994:	a901      	add	r1, sp, #4
   11996:	4620      	mov	r0, r4
   11998:	f017 f941 	bl	28c1e <nvs_ate_valid>
   1199c:	2800      	cmp	r0, #0
   1199e:	d0e9      	beq.n	11974 <nvs_startup+0x15c>
			    (gc_done_ate.id == 0xffff) &&
   119a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   119a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   119a8:	429a      	cmp	r2, r3
   119aa:	d1e3      	bne.n	11974 <nvs_startup+0x15c>
			    (gc_done_ate.len == 0U)) {
   119ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			    (gc_done_ate.id == 0xffff) &&
   119b0:	2b00      	cmp	r3, #0
   119b2:	d1df      	bne.n	11974 <nvs_startup+0x15c>
				gc_done_marker = true;
   119b4:	2301      	movs	r3, #1
   119b6:	e000      	b.n	119ba <nvs_startup+0x1a2>
		bool gc_done_marker = false;
   119b8:	2300      	movs	r3, #0
		}

		if (gc_done_marker) {
   119ba:	b9cb      	cbnz	r3, 119f0 <nvs_startup+0x1d8>
			addr = fs->ate_wra & ADDR_SECT_MASK;
			nvs_sector_advance(fs, &addr);
			rc = nvs_flash_erase_sector(fs, addr);
			goto end;
		}
		LOG_INF("No GC Done marker found: restarting gc");
   119bc:	2149      	movs	r1, #73	; 0x49
   119be:	4833      	ldr	r0, [pc, #204]	; (11a8c <nvs_startup+0x274>)
   119c0:	f017 f860 	bl	28a84 <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   119c4:	6861      	ldr	r1, [r4, #4]
   119c6:	4620      	mov	r0, r4
   119c8:	f017 f8e6 	bl	28b98 <nvs_flash_erase_sector>
		if (rc) {
   119cc:	4605      	mov	r5, r0
   119ce:	2800      	cmp	r0, #0
   119d0:	d137      	bne.n	11a42 <nvs_startup+0x22a>
			goto end;
		}
		fs->ate_wra &= ADDR_SECT_MASK;
   119d2:	88e2      	ldrh	r2, [r4, #6]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   119d4:	89a3      	ldrh	r3, [r4, #12]
   119d6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   119da:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   119de:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   119e0:	0c1b      	lsrs	r3, r3, #16
   119e2:	041b      	lsls	r3, r3, #16
   119e4:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   119e6:	4620      	mov	r0, r4
   119e8:	f017 fabf 	bl	28f6a <nvs_gc>
   119ec:	4605      	mov	r5, r0
		goto end;
   119ee:	e028      	b.n	11a42 <nvs_startup+0x22a>
			LOG_INF("GC Done marker found");
   119f0:	2149      	movs	r1, #73	; 0x49
   119f2:	4827      	ldr	r0, [pc, #156]	; (11a90 <nvs_startup+0x278>)
   119f4:	f017 f846 	bl	28a84 <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   119f8:	88e3      	ldrh	r3, [r4, #6]
   119fa:	041b      	lsls	r3, r3, #16
   119fc:	9303      	str	r3, [sp, #12]
			nvs_sector_advance(fs, &addr);
   119fe:	a903      	add	r1, sp, #12
   11a00:	4620      	mov	r0, r4
   11a02:	f017 f86b 	bl	28adc <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   11a06:	9903      	ldr	r1, [sp, #12]
   11a08:	4620      	mov	r0, r4
   11a0a:	f017 f8c5 	bl	28b98 <nvs_flash_erase_sector>
   11a0e:	4605      	mov	r5, r0
			goto end;
   11a10:	e017      	b.n	11a42 <nvs_startup+0x22a>
	}

	/* possible data write after last ate write, update data_wra */
	while (fs->ate_wra > fs->data_wra) {
   11a12:	6863      	ldr	r3, [r4, #4]
   11a14:	68a1      	ldr	r1, [r4, #8]
   11a16:	428b      	cmp	r3, r1
   11a18:	d90d      	bls.n	11a36 <nvs_startup+0x21e>
		empty_len = fs->ate_wra - fs->data_wra;

		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   11a1a:	1a5b      	subs	r3, r3, r1
   11a1c:	463a      	mov	r2, r7
   11a1e:	4620      	mov	r0, r4
   11a20:	f017 f895 	bl	28b4e <nvs_flash_cmp_const>
				empty_len);
		if (rc < 0) {
   11a24:	1e05      	subs	r5, r0, #0
   11a26:	db0c      	blt.n	11a42 <nvs_startup+0x22a>
			goto end;
		}
		if (!rc) {
   11a28:	b12d      	cbz	r5, 11a36 <nvs_startup+0x21e>
			break;
		}

		fs->data_wra += fs->flash_parameters->write_block_size;
   11a2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11a2c:	681a      	ldr	r2, [r3, #0]
   11a2e:	68a3      	ldr	r3, [r4, #8]
   11a30:	4413      	add	r3, r2
   11a32:	60a3      	str	r3, [r4, #8]
   11a34:	e7ed      	b.n	11a12 <nvs_startup+0x1fa>

	/* If the ate_wra is pointing to the first ate write location in a
	 * sector and data_wra is not 0, erase the sector as it contains no
	 * valid data (this also avoids closing a sector without any data).
	 */
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   11a36:	6861      	ldr	r1, [r4, #4]
   11a38:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   11a3c:	89a3      	ldrh	r3, [r4, #12]
   11a3e:	429a      	cmp	r2, r3
   11a40:	d00d      	beq.n	11a5e <nvs_startup+0x246>

end:
	/* If the sector is empty add a gc done ate to avoid having insufficient
	 * space when doing gc.
	 */
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   11a42:	b92d      	cbnz	r5, 11a50 <nvs_startup+0x238>
   11a44:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   11a46:	89a3      	ldrh	r3, [r4, #12]
   11a48:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   11a4c:	42b2      	cmp	r2, r6
   11a4e:	d015      	beq.n	11a7c <nvs_startup+0x264>
	return z_impl_k_mutex_unlock(mutex);
   11a50:	4648      	mov	r0, r9
   11a52:	f010 fd15 	bl	22480 <z_impl_k_mutex_unlock>

		rc = nvs_add_gc_done_ate(fs);
	}
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   11a56:	4628      	mov	r0, r5
   11a58:	b007      	add	sp, #28
   11a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   11a5e:	68a2      	ldr	r2, [r4, #8]
   11a60:	0c0b      	lsrs	r3, r1, #16
   11a62:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   11a64:	429a      	cmp	r2, r3
   11a66:	d0ec      	beq.n	11a42 <nvs_startup+0x22a>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   11a68:	4620      	mov	r0, r4
   11a6a:	f017 f895 	bl	28b98 <nvs_flash_erase_sector>
		if (rc) {
   11a6e:	4605      	mov	r5, r0
   11a70:	2800      	cmp	r0, #0
   11a72:	d1e6      	bne.n	11a42 <nvs_startup+0x22a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   11a74:	88e3      	ldrh	r3, [r4, #6]
   11a76:	041b      	lsls	r3, r3, #16
   11a78:	60a3      	str	r3, [r4, #8]
   11a7a:	e7e2      	b.n	11a42 <nvs_startup+0x22a>
		rc = nvs_add_gc_done_ate(fs);
   11a7c:	4620      	mov	r0, r4
   11a7e:	f017 fa5e 	bl	28f3e <nvs_add_gc_done_ate>
   11a82:	4605      	mov	r5, r0
   11a84:	e7e4      	b.n	11a50 <nvs_startup+0x238>
		rc = -EDEADLK;
   11a86:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   11a8a:	e7e1      	b.n	11a50 <nvs_startup+0x238>
   11a8c:	0002fa5c 	.word	0x0002fa5c
   11a90:	0002fa40 	.word	0x0002fa40

00011a94 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   11a94:	b530      	push	{r4, r5, lr}
   11a96:	b085      	sub	sp, #20
   11a98:	4604      	mov	r4, r0
   11a9a:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   11a9c:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
   11a9e:	f01d f8d6 	bl	2ec4e <z_impl_k_mutex_init>
   11aa2:	4628      	mov	r0, r5
   11aa4:	f00f fe44 	bl	21730 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   11aa8:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   11aaa:	b328      	cbz	r0, 11af8 <nvs_init+0x64>
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   11aac:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   11aae:	691b      	ldr	r3, [r3, #16]
   11ab0:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   11ab2:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   11ab4:	b338      	cbz	r0, 11b06 <nvs_init+0x72>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
   11ab6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
   11ab8:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   11aba:	691b      	ldr	r3, [r3, #16]
   11abc:	4798      	blx	r3
   11abe:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   11ac0:	3b01      	subs	r3, #1
   11ac2:	2b1f      	cmp	r3, #31
   11ac4:	d826      	bhi.n	11b14 <nvs_init+0x80>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   11ac6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11ac8:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11aca:	aa01      	add	r2, sp, #4
   11acc:	f01c f9e5 	bl	2de9a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   11ad0:	bb38      	cbnz	r0, 11b22 <nvs_init+0x8e>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
   11ad2:	89a3      	ldrh	r3, [r4, #12]
   11ad4:	b363      	cbz	r3, 11b30 <nvs_init+0x9c>
   11ad6:	9902      	ldr	r1, [sp, #8]
   11ad8:	fbb3 f2f1 	udiv	r2, r3, r1
   11adc:	fb01 3312 	mls	r3, r1, r2, r3
   11ae0:	bb33      	cbnz	r3, 11b30 <nvs_init+0x9c>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
   11ae2:	89e3      	ldrh	r3, [r4, #14]
   11ae4:	2b01      	cmp	r3, #1
   11ae6:	d92a      	bls.n	11b3e <nvs_init+0xaa>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
   11ae8:	4620      	mov	r0, r4
   11aea:	f7ff fe95 	bl	11818 <nvs_startup>
	if (rc) {
   11aee:	4605      	mov	r5, r0
   11af0:	b360      	cbz	r0, 11b4c <nvs_init+0xb8>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   11af2:	4628      	mov	r0, r5
   11af4:	b005      	add	sp, #20
   11af6:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No valid flash device found");
   11af8:	2145      	movs	r1, #69	; 0x45
   11afa:	4820      	ldr	r0, [pc, #128]	; (11b7c <nvs_init+0xe8>)
   11afc:	f016 ffc2 	bl	28a84 <z_log_minimal_printk>
		return -ENXIO;
   11b00:	f06f 0505 	mvn.w	r5, #5
   11b04:	e7f5      	b.n	11af2 <nvs_init+0x5e>
		LOG_ERR("Could not obtain flash parameters");
   11b06:	2145      	movs	r1, #69	; 0x45
   11b08:	481d      	ldr	r0, [pc, #116]	; (11b80 <nvs_init+0xec>)
   11b0a:	f016 ffbb 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   11b0e:	f06f 0515 	mvn.w	r5, #21
   11b12:	e7ee      	b.n	11af2 <nvs_init+0x5e>
		LOG_ERR("Unsupported write block size");
   11b14:	2145      	movs	r1, #69	; 0x45
   11b16:	481b      	ldr	r0, [pc, #108]	; (11b84 <nvs_init+0xf0>)
   11b18:	f016 ffb4 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   11b1c:	f06f 0515 	mvn.w	r5, #21
   11b20:	e7e7      	b.n	11af2 <nvs_init+0x5e>
		LOG_ERR("Unable to get page info");
   11b22:	2145      	movs	r1, #69	; 0x45
   11b24:	4818      	ldr	r0, [pc, #96]	; (11b88 <nvs_init+0xf4>)
   11b26:	f016 ffad 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   11b2a:	f06f 0515 	mvn.w	r5, #21
   11b2e:	e7e0      	b.n	11af2 <nvs_init+0x5e>
		LOG_ERR("Invalid sector size");
   11b30:	2145      	movs	r1, #69	; 0x45
   11b32:	4816      	ldr	r0, [pc, #88]	; (11b8c <nvs_init+0xf8>)
   11b34:	f016 ffa6 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   11b38:	f06f 0515 	mvn.w	r5, #21
   11b3c:	e7d9      	b.n	11af2 <nvs_init+0x5e>
		LOG_ERR("Configuration error - sector count");
   11b3e:	2145      	movs	r1, #69	; 0x45
   11b40:	4813      	ldr	r0, [pc, #76]	; (11b90 <nvs_init+0xfc>)
   11b42:	f016 ff9f 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   11b46:	f06f 0515 	mvn.w	r5, #21
   11b4a:	e7d2      	b.n	11af2 <nvs_init+0x5e>
	fs->ready = true;
   11b4c:	2301      	movs	r3, #1
   11b4e:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   11b50:	89a3      	ldrh	r3, [r4, #12]
   11b52:	89e2      	ldrh	r2, [r4, #14]
   11b54:	2149      	movs	r1, #73	; 0x49
   11b56:	480f      	ldr	r0, [pc, #60]	; (11b94 <nvs_init+0x100>)
   11b58:	f016 ff94 	bl	28a84 <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   11b5c:	6862      	ldr	r2, [r4, #4]
   11b5e:	b293      	uxth	r3, r2
   11b60:	0c12      	lsrs	r2, r2, #16
   11b62:	2149      	movs	r1, #73	; 0x49
   11b64:	480c      	ldr	r0, [pc, #48]	; (11b98 <nvs_init+0x104>)
   11b66:	f016 ff8d 	bl	28a84 <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   11b6a:	68a2      	ldr	r2, [r4, #8]
   11b6c:	b293      	uxth	r3, r2
   11b6e:	0c12      	lsrs	r2, r2, #16
   11b70:	2149      	movs	r1, #73	; 0x49
   11b72:	480a      	ldr	r0, [pc, #40]	; (11b9c <nvs_init+0x108>)
   11b74:	f016 ff86 	bl	28a84 <z_log_minimal_printk>
	return 0;
   11b78:	e7bb      	b.n	11af2 <nvs_init+0x5e>
   11b7a:	bf00      	nop
   11b7c:	0002faa4 	.word	0x0002faa4
   11b80:	0002fac8 	.word	0x0002fac8
   11b84:	0002faf0 	.word	0x0002faf0
   11b88:	0002fb14 	.word	0x0002fb14
   11b8c:	0002fb34 	.word	0x0002fb34
   11b90:	0002fb50 	.word	0x0002fb50
   11b94:	0002fb78 	.word	0x0002fb78
   11b98:	0002fb94 	.word	0x0002fb94
   11b9c:	0002fbac 	.word	0x0002fbac

00011ba0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   11ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ba4:	b087      	sub	sp, #28
   11ba6:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   11ba8:	f890 b010 	ldrb.w	fp, [r0, #16]
   11bac:	f1bb 0f00 	cmp.w	fp, #0
   11bb0:	d026      	beq.n	11c00 <nvs_write+0x60>
   11bb2:	4604      	mov	r4, r0
   11bb4:	460e      	mov	r6, r1
   11bb6:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   11bb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11bba:	681b      	ldr	r3, [r3, #0]
   11bbc:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   11bbe:	2901      	cmp	r1, #1
   11bc0:	d925      	bls.n	11c0e <nvs_write+0x6e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11bc2:	f101 0a07 	add.w	sl, r1, #7
   11bc6:	424a      	negs	r2, r1
   11bc8:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
   11bcc:	2901      	cmp	r1, #1
   11bce:	d921      	bls.n	11c14 <nvs_write+0x74>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11bd0:	b2db      	uxtb	r3, r3
   11bd2:	eb03 0809 	add.w	r8, r3, r9
   11bd6:	f108 38ff 	add.w	r8, r8, #4294967295
   11bda:	425b      	negs	r3, r3
   11bdc:	ea08 0803 	and.w	r8, r8, r3

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   11be0:	89a3      	ldrh	r3, [r4, #12]
   11be2:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   11be6:	4599      	cmp	r9, r3
   11be8:	f200 808a 	bhi.w	11d00 <nvs_write+0x160>
   11bec:	f1b9 0f00 	cmp.w	r9, #0
   11bf0:	d003      	beq.n	11bfa <nvs_write+0x5a>
	    ((len > 0) && (data == NULL))) {
   11bf2:	9b01      	ldr	r3, [sp, #4]
   11bf4:	2b00      	cmp	r3, #0
   11bf6:	f000 8086 	beq.w	11d06 <nvs_write+0x166>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   11bfa:	6863      	ldr	r3, [r4, #4]
   11bfc:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
   11bfe:	e00f      	b.n	11c20 <nvs_write+0x80>
		LOG_ERR("NVS not initialized");
   11c00:	2145      	movs	r1, #69	; 0x45
   11c02:	4842      	ldr	r0, [pc, #264]	; (11d0c <nvs_write+0x16c>)
   11c04:	f016 ff3e 	bl	28a84 <z_log_minimal_printk>
		return -EACCES;
   11c08:	f06f 050c 	mvn.w	r5, #12
   11c0c:	e072      	b.n	11cf4 <nvs_write+0x154>
		return len;
   11c0e:	f04f 0a08 	mov.w	sl, #8
   11c12:	e7db      	b.n	11bcc <nvs_write+0x2c>
   11c14:	46c8      	mov	r8, r9
   11c16:	e7e3      	b.n	11be0 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   11c18:	6862      	ldr	r2, [r4, #4]
   11c1a:	9b03      	ldr	r3, [sp, #12]
   11c1c:	429a      	cmp	r2, r3
   11c1e:	d013      	beq.n	11c48 <nvs_write+0xa8>
		rd_addr = wlk_addr;
   11c20:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   11c22:	aa04      	add	r2, sp, #16
   11c24:	a903      	add	r1, sp, #12
   11c26:	4620      	mov	r0, r4
   11c28:	f017 f875 	bl	28d16 <nvs_prev_ate>
		if (rc) {
   11c2c:	4605      	mov	r5, r0
   11c2e:	2800      	cmp	r0, #0
   11c30:	d160      	bne.n	11cf4 <nvs_write+0x154>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   11c32:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   11c36:	429e      	cmp	r6, r3
   11c38:	d1ee      	bne.n	11c18 <nvs_write+0x78>
   11c3a:	a904      	add	r1, sp, #16
   11c3c:	4620      	mov	r0, r4
   11c3e:	f016 ffee 	bl	28c1e <nvs_ate_valid>
   11c42:	2800      	cmp	r0, #0
   11c44:	d0e8      	beq.n	11c18 <nvs_write+0x78>
   11c46:	e001      	b.n	11c4c <nvs_write+0xac>
	bool prev_found = false;
   11c48:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
   11c4c:	f1bb 0f00 	cmp.w	fp, #0
   11c50:	d018      	beq.n	11c84 <nvs_write+0xe4>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
   11c52:	0c3f      	lsrs	r7, r7, #16
   11c54:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
   11c56:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   11c5a:	4439      	add	r1, r7

		if (len == 0) {
   11c5c:	f1b9 0f00 	cmp.w	r9, #0
   11c60:	d103      	bne.n	11c6a <nvs_write+0xca>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
   11c62:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   11c66:	b983      	cbnz	r3, 11c8a <nvs_write+0xea>
   11c68:	e044      	b.n	11cf4 <nvs_write+0x154>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
   11c6a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   11c6e:	4599      	cmp	r9, r3
   11c70:	d10b      	bne.n	11c8a <nvs_write+0xea>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   11c72:	464b      	mov	r3, r9
   11c74:	9a01      	ldr	r2, [sp, #4]
   11c76:	4620      	mov	r0, r4
   11c78:	f016 ff3d 	bl	28af6 <nvs_flash_block_cmp>
			if (rc <= 0) {
   11c7c:	2800      	cmp	r0, #0
   11c7e:	dc04      	bgt.n	11c8a <nvs_write+0xea>
				return rc;
   11c80:	4605      	mov	r5, r0
   11c82:	e037      	b.n	11cf4 <nvs_write+0x154>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   11c84:	f1b9 0f00 	cmp.w	r9, #0
   11c88:	d034      	beq.n	11cf4 <nvs_write+0x154>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   11c8a:	f1b8 0f00 	cmp.w	r8, #0
   11c8e:	d00c      	beq.n	11caa <nvs_write+0x10a>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
   11c90:	fa1a f788 	uxtah	r7, sl, r8
   11c94:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   11c96:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   11c9a:	f04f 32ff 	mov.w	r2, #4294967295
   11c9e:	f04f 33ff 	mov.w	r3, #4294967295
   11ca2:	4640      	mov	r0, r8
   11ca4:	f010 faf6 	bl	22294 <z_impl_k_mutex_lock>

	gc_count = 0;
   11ca8:	e00c      	b.n	11cc4 <nvs_write+0x124>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
   11caa:	2700      	movs	r7, #0
   11cac:	e7f3      	b.n	11c96 <nvs_write+0xf6>
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {

			rc = nvs_flash_wrt_entry(fs, id, data, len);
   11cae:	464b      	mov	r3, r9
   11cb0:	9a01      	ldr	r2, [sp, #4]
   11cb2:	4631      	mov	r1, r6
   11cb4:	4620      	mov	r0, r4
   11cb6:	f017 f9f8 	bl	290aa <nvs_flash_wrt_entry>
			if (rc) {
   11cba:	4605      	mov	r5, r0
   11cbc:	b9b8      	cbnz	r0, 11cee <nvs_write+0x14e>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   11cbe:	464d      	mov	r5, r9
   11cc0:	e015      	b.n	11cee <nvs_write+0x14e>
		gc_count++;
   11cc2:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   11cc4:	89e3      	ldrh	r3, [r4, #14]
   11cc6:	429d      	cmp	r5, r3
   11cc8:	d00f      	beq.n	11cea <nvs_write+0x14a>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   11cca:	6862      	ldr	r2, [r4, #4]
   11ccc:	68a3      	ldr	r3, [r4, #8]
   11cce:	443b      	add	r3, r7
   11cd0:	429a      	cmp	r2, r3
   11cd2:	d2ec      	bcs.n	11cae <nvs_write+0x10e>
		rc = nvs_sector_close(fs);
   11cd4:	4620      	mov	r0, r4
   11cd6:	f017 fa07 	bl	290e8 <nvs_sector_close>
		if (rc) {
   11cda:	b978      	cbnz	r0, 11cfc <nvs_write+0x15c>
		rc = nvs_gc(fs);
   11cdc:	4620      	mov	r0, r4
   11cde:	f017 f944 	bl	28f6a <nvs_gc>
		if (rc) {
   11ce2:	2800      	cmp	r0, #0
   11ce4:	d0ed      	beq.n	11cc2 <nvs_write+0x122>
		rc = nvs_gc(fs);
   11ce6:	4605      	mov	r5, r0
   11ce8:	e001      	b.n	11cee <nvs_write+0x14e>
			rc = -ENOSPC;
   11cea:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
   11cee:	4640      	mov	r0, r8
   11cf0:	f010 fbc6 	bl	22480 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   11cf4:	4628      	mov	r0, r5
   11cf6:	b007      	add	sp, #28
   11cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
   11cfc:	4605      	mov	r5, r0
   11cfe:	e7f6      	b.n	11cee <nvs_write+0x14e>
		return -EINVAL;
   11d00:	f06f 0515 	mvn.w	r5, #21
   11d04:	e7f6      	b.n	11cf4 <nvs_write+0x154>
   11d06:	f06f 0515 	mvn.w	r5, #21
   11d0a:	e7f3      	b.n	11cf4 <nvs_write+0x154>
   11d0c:	0002fa88 	.word	0x0002fa88

00011d10 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   11d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d14:	b084      	sub	sp, #16
   11d16:	4699      	mov	r9, r3
   11d18:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   11d1c:	7c03      	ldrb	r3, [r0, #16]
   11d1e:	b1a3      	cbz	r3, 11d4a <nvs_read_hist+0x3a>
   11d20:	4604      	mov	r4, r0
   11d22:	460f      	mov	r7, r1
   11d24:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   11d26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11d28:	681b      	ldr	r3, [r3, #0]
   11d2a:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   11d2c:	2a01      	cmp	r2, #1
   11d2e:	d913      	bls.n	11d58 <nvs_read_hist+0x48>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11d30:	4613      	mov	r3, r2
   11d32:	3207      	adds	r2, #7
   11d34:	425b      	negs	r3, r3
   11d36:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
   11d38:	89a3      	ldrh	r3, [r4, #12]
   11d3a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   11d3e:	4599      	cmp	r9, r3
   11d40:	d84b      	bhi.n	11dda <nvs_read_hist+0xca>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   11d42:	6866      	ldr	r6, [r4, #4]
   11d44:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
   11d46:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   11d48:	e00c      	b.n	11d64 <nvs_read_hist+0x54>
		LOG_ERR("NVS not initialized");
   11d4a:	2145      	movs	r1, #69	; 0x45
   11d4c:	4827      	ldr	r0, [pc, #156]	; (11dec <nvs_read_hist+0xdc>)
   11d4e:	f016 fe99 	bl	28a84 <z_log_minimal_printk>
		return -EACCES;
   11d52:	f06f 030c 	mvn.w	r3, #12
   11d56:	e035      	b.n	11dc4 <nvs_read_hist+0xb4>
		return len;
   11d58:	2208      	movs	r2, #8
   11d5a:	e7ed      	b.n	11d38 <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
   11d5c:	6862      	ldr	r2, [r4, #4]
   11d5e:	9b03      	ldr	r3, [sp, #12]
   11d60:	429a      	cmp	r2, r3
   11d62:	d016      	beq.n	11d92 <nvs_read_hist+0x82>
	while (cnt_his <= cnt) {
   11d64:	45a8      	cmp	r8, r5
   11d66:	d314      	bcc.n	11d92 <nvs_read_hist+0x82>
		rd_addr = wlk_addr;
   11d68:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   11d6a:	aa01      	add	r2, sp, #4
   11d6c:	a903      	add	r1, sp, #12
   11d6e:	4620      	mov	r0, r4
   11d70:	f016 ffd1 	bl	28d16 <nvs_prev_ate>
		if (rc) {
   11d74:	4603      	mov	r3, r0
   11d76:	bb28      	cbnz	r0, 11dc4 <nvs_read_hist+0xb4>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   11d78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11d7c:	429f      	cmp	r7, r3
   11d7e:	d1ed      	bne.n	11d5c <nvs_read_hist+0x4c>
   11d80:	a901      	add	r1, sp, #4
   11d82:	4620      	mov	r0, r4
   11d84:	f016 ff4b 	bl	28c1e <nvs_ate_valid>
   11d88:	2800      	cmp	r0, #0
   11d8a:	d0e7      	beq.n	11d5c <nvs_read_hist+0x4c>
			cnt_his++;
   11d8c:	3501      	adds	r5, #1
   11d8e:	b2ad      	uxth	r5, r5
   11d90:	e7e4      	b.n	11d5c <nvs_read_hist+0x4c>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   11d92:	6862      	ldr	r2, [r4, #4]
   11d94:	9b03      	ldr	r3, [sp, #12]
   11d96:	429a      	cmp	r2, r3
   11d98:	d018      	beq.n	11dcc <nvs_read_hist+0xbc>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   11d9a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   11d9e:	b1fb      	cbz	r3, 11de0 <nvs_read_hist+0xd0>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   11da0:	45a8      	cmp	r8, r5
   11da2:	d820      	bhi.n	11de6 <nvs_read_hist+0xd6>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
   11da4:	0c36      	lsrs	r6, r6, #16
   11da6:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
   11da8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   11dac:	454b      	cmp	r3, r9
   11dae:	bf28      	it	cs
   11db0:	464b      	movcs	r3, r9
   11db2:	4652      	mov	r2, sl
   11db4:	4431      	add	r1, r6
   11db6:	4620      	mov	r0, r4
   11db8:	f016 fe72 	bl	28aa0 <nvs_flash_rd>
	if (rc) {
   11dbc:	4603      	mov	r3, r0
   11dbe:	b908      	cbnz	r0, 11dc4 <nvs_read_hist+0xb4>
		goto err;
	}

	return wlk_ate.len;
   11dc0:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
   11dc4:	4618      	mov	r0, r3
   11dc6:	b004      	add	sp, #16
   11dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   11dcc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11dd0:	429f      	cmp	r7, r3
   11dd2:	d0e2      	beq.n	11d9a <nvs_read_hist+0x8a>
		return -ENOENT;
   11dd4:	f06f 0301 	mvn.w	r3, #1
   11dd8:	e7f4      	b.n	11dc4 <nvs_read_hist+0xb4>
		return -EINVAL;
   11dda:	f06f 0315 	mvn.w	r3, #21
   11dde:	e7f1      	b.n	11dc4 <nvs_read_hist+0xb4>
		return -ENOENT;
   11de0:	f06f 0301 	mvn.w	r3, #1
   11de4:	e7ee      	b.n	11dc4 <nvs_read_hist+0xb4>
   11de6:	f06f 0301 	mvn.w	r3, #1
   11dea:	e7eb      	b.n	11dc4 <nvs_read_hist+0xb4>
   11dec:	0002fa88 	.word	0x0002fa88

00011df0 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
   11df0:	b410      	push	{r4}
   11df2:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
   11df4:	2300      	movs	r3, #0
   11df6:	4a08      	ldr	r2, [pc, #32]	; (11e18 <get_flash_area_from_id+0x28>)
   11df8:	6812      	ldr	r2, [r2, #0]
   11dfa:	429a      	cmp	r2, r3
   11dfc:	dd09      	ble.n	11e12 <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
   11dfe:	011a      	lsls	r2, r3, #4
   11e00:	4906      	ldr	r1, [pc, #24]	; (11e1c <get_flash_area_from_id+0x2c>)
   11e02:	6809      	ldr	r1, [r1, #0]
   11e04:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   11e08:	5c8a      	ldrb	r2, [r1, r2]
   11e0a:	42a2      	cmp	r2, r4
   11e0c:	d002      	beq.n	11e14 <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
   11e0e:	3301      	adds	r3, #1
   11e10:	e7f1      	b.n	11df6 <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
   11e12:	2000      	movs	r0, #0
}
   11e14:	bc10      	pop	{r4}
   11e16:	4770      	bx	lr
   11e18:	0002fc30 	.word	0x0002fc30
   11e1c:	20000480 	.word	0x20000480

00011e20 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   11e20:	4b08      	ldr	r3, [pc, #32]	; (11e44 <flash_area_open+0x24>)
   11e22:	681b      	ldr	r3, [r3, #0]
   11e24:	b13b      	cbz	r3, 11e36 <flash_area_open+0x16>
{
   11e26:	b510      	push	{r4, lr}
   11e28:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   11e2a:	f7ff ffe1 	bl	11df0 <get_flash_area_from_id>
	if (area == NULL) {
   11e2e:	b128      	cbz	r0, 11e3c <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   11e30:	6020      	str	r0, [r4, #0]
	return 0;
   11e32:	2000      	movs	r0, #0
}
   11e34:	bd10      	pop	{r4, pc}
		return -EACCES;
   11e36:	f06f 000c 	mvn.w	r0, #12
}
   11e3a:	4770      	bx	lr
		return -ENOENT;
   11e3c:	f06f 0001 	mvn.w	r0, #1
   11e40:	e7f8      	b.n	11e34 <flash_area_open+0x14>
   11e42:	bf00      	nop
   11e44:	20000480 	.word	0x20000480

00011e48 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   11e48:	b500      	push	{lr}
   11e4a:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   11e4c:	ab03      	add	r3, sp, #12
   11e4e:	9300      	str	r3, [sp, #0]
   11e50:	4b02      	ldr	r3, [pc, #8]	; (11e5c <flash_area_get_sectors+0x14>)
   11e52:	f017 f9c3 	bl	291dc <flash_area_layout>
}
   11e56:	b00b      	add	sp, #44	; 0x2c
   11e58:	f85d fb04 	ldr.w	pc, [sp], #4
   11e5c:	000291a1 	.word	0x000291a1

00011e60 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   11e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   11e64:	4b0f      	ldr	r3, [pc, #60]	; (11ea4 <settings_save_one+0x44>)
   11e66:	681d      	ldr	r5, [r3, #0]
	if (!cs) {
   11e68:	b1cd      	cbz	r5, 11e9e <settings_save_one+0x3e>
   11e6a:	4680      	mov	r8, r0
   11e6c:	460f      	mov	r7, r1
   11e6e:	4614      	mov	r4, r2
	return z_impl_k_mutex_lock(mutex, timeout);
   11e70:	4e0d      	ldr	r6, [pc, #52]	; (11ea8 <settings_save_one+0x48>)
   11e72:	f04f 32ff 	mov.w	r2, #4294967295
   11e76:	f04f 33ff 	mov.w	r3, #4294967295
   11e7a:	4630      	mov	r0, r6
   11e7c:	f010 fa0a 	bl	22294 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   11e80:	686b      	ldr	r3, [r5, #4]
   11e82:	f8d3 9008 	ldr.w	r9, [r3, #8]
   11e86:	4623      	mov	r3, r4
   11e88:	463a      	mov	r2, r7
   11e8a:	4641      	mov	r1, r8
   11e8c:	4628      	mov	r0, r5
   11e8e:	47c8      	blx	r9
   11e90:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11e92:	4630      	mov	r0, r6
   11e94:	f010 faf4 	bl	22480 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   11e98:	4620      	mov	r0, r4
   11e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   11e9e:	f06f 0401 	mvn.w	r4, #1
   11ea2:	e7f9      	b.n	11e98 <settings_save_one+0x38>
   11ea4:	200020ac 	.word	0x200020ac
   11ea8:	20000814 	.word	0x20000814

00011eac <settings_src_register>:
	parent->next = child;
   11eac:	2300      	movs	r3, #0
   11eae:	6003      	str	r3, [r0, #0]
	return list->tail;
   11eb0:	4b05      	ldr	r3, [pc, #20]	; (11ec8 <settings_src_register+0x1c>)
   11eb2:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   11eb4:	b11b      	cbz	r3, 11ebe <settings_src_register+0x12>
	parent->next = child;
   11eb6:	6018      	str	r0, [r3, #0]
	list->tail = node;
   11eb8:	4b03      	ldr	r3, [pc, #12]	; (11ec8 <settings_src_register+0x1c>)
   11eba:	6058      	str	r0, [r3, #4]
}
   11ebc:	4770      	bx	lr
   11ebe:	4b02      	ldr	r3, [pc, #8]	; (11ec8 <settings_src_register+0x1c>)
   11ec0:	6058      	str	r0, [r3, #4]
	list->head = node;
   11ec2:	6018      	str	r0, [r3, #0]
}
   11ec4:	4770      	bx	lr
   11ec6:	bf00      	nop
   11ec8:	200020a4 	.word	0x200020a4

00011ecc <settings_dst_register>:
	settings_save_dst = cs;
   11ecc:	4b01      	ldr	r3, [pc, #4]	; (11ed4 <settings_dst_register+0x8>)
   11ece:	6018      	str	r0, [r3, #0]
}
   11ed0:	4770      	bx	lr
   11ed2:	bf00      	nop
   11ed4:	200020ac 	.word	0x200020ac

00011ed8 <settings_load_subtree>:
{
   11ed8:	b530      	push	{r4, r5, lr}
   11eda:	b085      	sub	sp, #20
   11edc:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   11ede:	2300      	movs	r3, #0
   11ee0:	9302      	str	r3, [sp, #8]
   11ee2:	9303      	str	r3, [sp, #12]
   11ee4:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11ee6:	f04f 32ff 	mov.w	r2, #4294967295
   11eea:	f04f 33ff 	mov.w	r3, #4294967295
   11eee:	480d      	ldr	r0, [pc, #52]	; (11f24 <settings_load_subtree+0x4c>)
   11ef0:	f010 f9d0 	bl	22294 <z_impl_k_mutex_lock>
	return list->head;
   11ef4:	4b0c      	ldr	r3, [pc, #48]	; (11f28 <settings_load_subtree+0x50>)
   11ef6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11ef8:	b14c      	cbz	r4, 11f0e <settings_load_subtree+0x36>
		cs->cs_itf->csi_load(cs, &arg);
   11efa:	6863      	ldr	r3, [r4, #4]
   11efc:	681b      	ldr	r3, [r3, #0]
   11efe:	a901      	add	r1, sp, #4
   11f00:	4620      	mov	r0, r4
   11f02:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11f04:	2c00      	cmp	r4, #0
   11f06:	d0f7      	beq.n	11ef8 <settings_load_subtree+0x20>
	return node->next;
   11f08:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11f0a:	2c00      	cmp	r4, #0
   11f0c:	d1f4      	bne.n	11ef8 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   11f0e:	4628      	mov	r0, r5
   11f10:	f000 f8ec 	bl	120ec <settings_commit_subtree>
   11f14:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11f16:	4803      	ldr	r0, [pc, #12]	; (11f24 <settings_load_subtree+0x4c>)
   11f18:	f010 fab2 	bl	22480 <z_impl_k_mutex_unlock>
}
   11f1c:	4620      	mov	r0, r4
   11f1e:	b005      	add	sp, #20
   11f20:	bd30      	pop	{r4, r5, pc}
   11f22:	bf00      	nop
   11f24:	20000814 	.word	0x20000814
   11f28:	200020a4 	.word	0x200020a4

00011f2c <settings_load_subtree_direct>:
{
   11f2c:	b510      	push	{r4, lr}
   11f2e:	b084      	sub	sp, #16
	const struct settings_load_arg arg = {
   11f30:	9001      	str	r0, [sp, #4]
   11f32:	9102      	str	r1, [sp, #8]
   11f34:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   11f36:	f04f 32ff 	mov.w	r2, #4294967295
   11f3a:	f04f 33ff 	mov.w	r3, #4294967295
   11f3e:	480b      	ldr	r0, [pc, #44]	; (11f6c <settings_load_subtree_direct+0x40>)
   11f40:	f010 f9a8 	bl	22294 <z_impl_k_mutex_lock>
	return list->head;
   11f44:	4b0a      	ldr	r3, [pc, #40]	; (11f70 <settings_load_subtree_direct+0x44>)
   11f46:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11f48:	b14c      	cbz	r4, 11f5e <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   11f4a:	6863      	ldr	r3, [r4, #4]
   11f4c:	681b      	ldr	r3, [r3, #0]
   11f4e:	a901      	add	r1, sp, #4
   11f50:	4620      	mov	r0, r4
   11f52:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11f54:	2c00      	cmp	r4, #0
   11f56:	d0f7      	beq.n	11f48 <settings_load_subtree_direct+0x1c>
	return node->next;
   11f58:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11f5a:	2c00      	cmp	r4, #0
   11f5c:	d1f4      	bne.n	11f48 <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
   11f5e:	4803      	ldr	r0, [pc, #12]	; (11f6c <settings_load_subtree_direct+0x40>)
   11f60:	f010 fa8e 	bl	22480 <z_impl_k_mutex_unlock>
}
   11f64:	2000      	movs	r0, #0
   11f66:	b004      	add	sp, #16
   11f68:	bd10      	pop	{r4, pc}
   11f6a:	bf00      	nop
   11f6c:	20000814 	.word	0x20000814
   11f70:	200020a4 	.word	0x200020a4

00011f74 <settings_store_init>:
	list->head = NULL;
   11f74:	4b02      	ldr	r3, [pc, #8]	; (11f80 <settings_store_init+0xc>)
   11f76:	2200      	movs	r2, #0
   11f78:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   11f7a:	605a      	str	r2, [r3, #4]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   11f7c:	4770      	bx	lr
   11f7e:	bf00      	nop
   11f80:	200020a4 	.word	0x200020a4

00011f84 <settings_init>:


void settings_store_init(void);

void settings_init(void)
{
   11f84:	b508      	push	{r3, lr}
	list->head = NULL;
   11f86:	4b03      	ldr	r3, [pc, #12]	; (11f94 <settings_init+0x10>)
   11f88:	2200      	movs	r2, #0
   11f8a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   11f8c:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   11f8e:	f7ff fff1 	bl	11f74 <settings_store_init>
}
   11f92:	bd08      	pop	{r3, pc}
   11f94:	200020b0 	.word	0x200020b0

00011f98 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   11f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f9c:	b082      	sub	sp, #8
   11f9e:	4606      	mov	r6, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   11fa0:	460f      	mov	r7, r1
   11fa2:	b109      	cbz	r1, 11fa8 <settings_parse_and_lookup+0x10>
		*next = NULL;
   11fa4:	2300      	movs	r3, #0
   11fa6:	600b      	str	r3, [r1, #0]
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
   11fa8:	4c2e      	ldr	r4, [pc, #184]	; (12064 <settings_parse_and_lookup+0xcc>)
   11faa:	2500      	movs	r5, #0
   11fac:	e004      	b.n	11fb8 <settings_parse_and_lookup+0x20>
			if (next) {
   11fae:	b10f      	cbz	r7, 11fb4 <settings_parse_and_lookup+0x1c>
				*next = tmpnext;
   11fb0:	9b01      	ldr	r3, [sp, #4]
   11fb2:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   11fb4:	4625      	mov	r5, r4
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11fb6:	3414      	adds	r4, #20
   11fb8:	4b2b      	ldr	r3, [pc, #172]	; (12068 <settings_parse_and_lookup+0xd0>)
   11fba:	429c      	cmp	r4, r3
   11fbc:	d819      	bhi.n	11ff2 <settings_parse_and_lookup+0x5a>
   11fbe:	4b2a      	ldr	r3, [pc, #168]	; (12068 <settings_parse_and_lookup+0xd0>)
   11fc0:	429c      	cmp	r4, r3
   11fc2:	d222      	bcs.n	1200a <settings_parse_and_lookup+0x72>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   11fc4:	aa01      	add	r2, sp, #4
   11fc6:	6821      	ldr	r1, [r4, #0]
   11fc8:	4630      	mov	r0, r6
   11fca:	f017 f939 	bl	29240 <settings_name_steq>
   11fce:	2800      	cmp	r0, #0
   11fd0:	d0f1      	beq.n	11fb6 <settings_parse_and_lookup+0x1e>
		if (!bestmatch) {
   11fd2:	2d00      	cmp	r5, #0
   11fd4:	d0eb      	beq.n	11fae <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   11fd6:	2200      	movs	r2, #0
   11fd8:	6829      	ldr	r1, [r5, #0]
   11fda:	6820      	ldr	r0, [r4, #0]
   11fdc:	f017 f930 	bl	29240 <settings_name_steq>
   11fe0:	2800      	cmp	r0, #0
   11fe2:	d0e8      	beq.n	11fb6 <settings_parse_and_lookup+0x1e>
			if (next) {
   11fe4:	b11f      	cbz	r7, 11fee <settings_parse_and_lookup+0x56>
				*next = tmpnext;
   11fe6:	9b01      	ldr	r3, [sp, #4]
   11fe8:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   11fea:	4625      	mov	r5, r4
   11fec:	e7e3      	b.n	11fb6 <settings_parse_and_lookup+0x1e>
   11fee:	4625      	mov	r5, r4
   11ff0:	e7e1      	b.n	11fb6 <settings_parse_and_lookup+0x1e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11ff2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 12074 <settings_parse_and_lookup+0xdc>
   11ff6:	2294      	movs	r2, #148	; 0x94
   11ff8:	4641      	mov	r1, r8
   11ffa:	481c      	ldr	r0, [pc, #112]	; (1206c <settings_parse_and_lookup+0xd4>)
   11ffc:	f016 f9a1 	bl	28342 <printk>
   12000:	2194      	movs	r1, #148	; 0x94
   12002:	4640      	mov	r0, r8
   12004:	f016 fd36 	bl	28a74 <assert_post_action>
   12008:	e7d9      	b.n	11fbe <settings_parse_and_lookup+0x26>
	return list->head;
   1200a:	4b19      	ldr	r3, [pc, #100]	; (12070 <settings_parse_and_lookup+0xd8>)
   1200c:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1200e:	b15c      	cbz	r4, 12028 <settings_parse_and_lookup+0x90>
   12010:	3c14      	subs	r4, #20
   12012:	e009      	b.n	12028 <settings_parse_and_lookup+0x90>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
			continue;
		}
		if (!bestmatch) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   12014:	b10f      	cbz	r7, 1201a <settings_parse_and_lookup+0x82>
				*next = tmpnext;
   12016:	9b01      	ldr	r3, [sp, #4]
   12018:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
   1201a:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1201c:	f114 0314 	adds.w	r3, r4, #20
   12020:	d01a      	beq.n	12058 <settings_parse_and_lookup+0xc0>
	return node->next;
   12022:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12024:	b104      	cbz	r4, 12028 <settings_parse_and_lookup+0x90>
   12026:	3c14      	subs	r4, #20
   12028:	b1c4      	cbz	r4, 1205c <settings_parse_and_lookup+0xc4>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1202a:	aa01      	add	r2, sp, #4
   1202c:	6821      	ldr	r1, [r4, #0]
   1202e:	4630      	mov	r0, r6
   12030:	f017 f906 	bl	29240 <settings_name_steq>
   12034:	2800      	cmp	r0, #0
   12036:	d0f1      	beq.n	1201c <settings_parse_and_lookup+0x84>
		if (!bestmatch) {
   12038:	2d00      	cmp	r5, #0
   1203a:	d0eb      	beq.n	12014 <settings_parse_and_lookup+0x7c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1203c:	2200      	movs	r2, #0
   1203e:	6829      	ldr	r1, [r5, #0]
   12040:	6820      	ldr	r0, [r4, #0]
   12042:	f017 f8fd 	bl	29240 <settings_name_steq>
   12046:	2800      	cmp	r0, #0
   12048:	d0e8      	beq.n	1201c <settings_parse_and_lookup+0x84>
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   1204a:	b11f      	cbz	r7, 12054 <settings_parse_and_lookup+0xbc>
				*next = tmpnext;
   1204c:	9b01      	ldr	r3, [sp, #4]
   1204e:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
   12050:	4625      	mov	r5, r4
   12052:	e7e3      	b.n	1201c <settings_parse_and_lookup+0x84>
   12054:	4625      	mov	r5, r4
   12056:	e7e1      	b.n	1201c <settings_parse_and_lookup+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12058:	461c      	mov	r4, r3
   1205a:	e7e5      	b.n	12028 <settings_parse_and_lookup+0x90>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   1205c:	4628      	mov	r0, r5
   1205e:	b002      	add	sp, #8
   12060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12064:	0002f2dc 	.word	0x0002f2dc
   12068:	0002f354 	.word	0x0002f354
   1206c:	0002f968 	.word	0x0002f968
   12070:	200020b0 	.word	0x200020b0
   12074:	0002fc34 	.word	0x0002fc34

00012078 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   12078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1207c:	b085      	sub	sp, #20
   1207e:	4604      	mov	r4, r0
   12080:	4688      	mov	r8, r1
   12082:	4617      	mov	r7, r2
   12084:	461e      	mov	r6, r3
   12086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   12088:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
   1208a:	b12d      	cbz	r5, 12098 <settings_call_set_handler+0x20>
   1208c:	6829      	ldr	r1, [r5, #0]
   1208e:	b119      	cbz	r1, 12098 <settings_call_set_handler+0x20>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   12090:	aa03      	add	r2, sp, #12
   12092:	f017 f8d5 	bl	29240 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   12096:	b160      	cbz	r0, 120b2 <settings_call_set_handler+0x3a>
		return 0;
	}

	if (load_arg && load_arg->cb) {
   12098:	b175      	cbz	r5, 120b8 <settings_call_set_handler+0x40>
   1209a:	f8d5 9004 	ldr.w	r9, [r5, #4]
   1209e:	f1b9 0f00 	cmp.w	r9, #0
   120a2:	d009      	beq.n	120b8 <settings_call_set_handler+0x40>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   120a4:	68ab      	ldr	r3, [r5, #8]
   120a6:	9300      	str	r3, [sp, #0]
   120a8:	4633      	mov	r3, r6
   120aa:	463a      	mov	r2, r7
   120ac:	4641      	mov	r1, r8
   120ae:	9803      	ldr	r0, [sp, #12]
   120b0:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   120b2:	b005      	add	sp, #20
   120b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ch = settings_parse_and_lookup(name, &name_key);
   120b8:	a903      	add	r1, sp, #12
   120ba:	4620      	mov	r0, r4
   120bc:	f7ff ff6c 	bl	11f98 <settings_parse_and_lookup>
		if (!ch) {
   120c0:	b178      	cbz	r0, 120e2 <settings_call_set_handler+0x6a>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   120c2:	6885      	ldr	r5, [r0, #8]
   120c4:	4633      	mov	r3, r6
   120c6:	463a      	mov	r2, r7
   120c8:	4641      	mov	r1, r8
   120ca:	9803      	ldr	r0, [sp, #12]
   120cc:	47a8      	blx	r5
   120ce:	4603      	mov	r3, r0
		if (rc != 0) {
   120d0:	2800      	cmp	r0, #0
   120d2:	d0ee      	beq.n	120b2 <settings_call_set_handler+0x3a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   120d4:	4622      	mov	r2, r4
   120d6:	2145      	movs	r1, #69	; 0x45
   120d8:	4803      	ldr	r0, [pc, #12]	; (120e8 <settings_call_set_handler+0x70>)
   120da:	f016 fcd3 	bl	28a84 <z_log_minimal_printk>
			rc = 0;
   120de:	2000      	movs	r0, #0
   120e0:	e7e7      	b.n	120b2 <settings_call_set_handler+0x3a>
			return 0;
   120e2:	2000      	movs	r0, #0
   120e4:	e7e5      	b.n	120b2 <settings_call_set_handler+0x3a>
   120e6:	bf00      	nop
   120e8:	0002fc68 	.word	0x0002fc68

000120ec <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   120ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120ee:	4605      	mov	r5, r0
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   120f0:	4c22      	ldr	r4, [pc, #136]	; (1217c <settings_commit_subtree+0x90>)
	rc = 0;
   120f2:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   120f4:	e000      	b.n	120f8 <settings_commit_subtree+0xc>
   120f6:	3414      	adds	r4, #20
   120f8:	4b21      	ldr	r3, [pc, #132]	; (12180 <settings_commit_subtree+0x94>)
   120fa:	429c      	cmp	r4, r3
   120fc:	d812      	bhi.n	12124 <settings_commit_subtree+0x38>
   120fe:	4b20      	ldr	r3, [pc, #128]	; (12180 <settings_commit_subtree+0x94>)
   12100:	429c      	cmp	r4, r3
   12102:	d21a      	bcs.n	1213a <settings_commit_subtree+0x4e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   12104:	b135      	cbz	r5, 12114 <settings_commit_subtree+0x28>
   12106:	2200      	movs	r2, #0
   12108:	4629      	mov	r1, r5
   1210a:	6820      	ldr	r0, [r4, #0]
   1210c:	f017 f898 	bl	29240 <settings_name_steq>
   12110:	2800      	cmp	r0, #0
   12112:	d0f0      	beq.n	120f6 <settings_commit_subtree+0xa>
			continue;
		}
		if (ch->h_commit) {
   12114:	68e3      	ldr	r3, [r4, #12]
   12116:	2b00      	cmp	r3, #0
   12118:	d0ed      	beq.n	120f6 <settings_commit_subtree+0xa>
			rc2 = ch->h_commit();
   1211a:	4798      	blx	r3
			if (!rc) {
   1211c:	2e00      	cmp	r6, #0
   1211e:	d1ea      	bne.n	120f6 <settings_commit_subtree+0xa>
				rc = rc2;
   12120:	4606      	mov	r6, r0
   12122:	e7e8      	b.n	120f6 <settings_commit_subtree+0xa>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12124:	4f17      	ldr	r7, [pc, #92]	; (12184 <settings_commit_subtree+0x98>)
   12126:	22f4      	movs	r2, #244	; 0xf4
   12128:	4639      	mov	r1, r7
   1212a:	4817      	ldr	r0, [pc, #92]	; (12188 <settings_commit_subtree+0x9c>)
   1212c:	f016 f909 	bl	28342 <printk>
   12130:	21f4      	movs	r1, #244	; 0xf4
   12132:	4638      	mov	r0, r7
   12134:	f016 fc9e 	bl	28a74 <assert_post_action>
   12138:	e7e1      	b.n	120fe <settings_commit_subtree+0x12>
	return list->head;
   1213a:	4b14      	ldr	r3, [pc, #80]	; (1218c <settings_commit_subtree+0xa0>)
   1213c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1213e:	b13c      	cbz	r4, 12150 <settings_commit_subtree+0x64>
   12140:	3c14      	subs	r4, #20
   12142:	e005      	b.n	12150 <settings_commit_subtree+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12144:	f114 0314 	adds.w	r3, r4, #20
   12148:	d013      	beq.n	12172 <settings_commit_subtree+0x86>
	return node->next;
   1214a:	6964      	ldr	r4, [r4, #20]
   1214c:	b104      	cbz	r4, 12150 <settings_commit_subtree+0x64>
   1214e:	3c14      	subs	r4, #20
   12150:	b18c      	cbz	r4, 12176 <settings_commit_subtree+0x8a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   12152:	b135      	cbz	r5, 12162 <settings_commit_subtree+0x76>
   12154:	2200      	movs	r2, #0
   12156:	4629      	mov	r1, r5
   12158:	6820      	ldr	r0, [r4, #0]
   1215a:	f017 f871 	bl	29240 <settings_name_steq>
   1215e:	2800      	cmp	r0, #0
   12160:	d0f0      	beq.n	12144 <settings_commit_subtree+0x58>
			continue;
		}
		if (ch->h_commit) {
   12162:	68e3      	ldr	r3, [r4, #12]
   12164:	2b00      	cmp	r3, #0
   12166:	d0ed      	beq.n	12144 <settings_commit_subtree+0x58>
			rc2 = ch->h_commit();
   12168:	4798      	blx	r3
			if (!rc) {
   1216a:	2e00      	cmp	r6, #0
   1216c:	d1ea      	bne.n	12144 <settings_commit_subtree+0x58>
				rc = rc2;
   1216e:	4606      	mov	r6, r0
   12170:	e7e8      	b.n	12144 <settings_commit_subtree+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12172:	461c      	mov	r4, r3
   12174:	e7ec      	b.n	12150 <settings_commit_subtree+0x64>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   12176:	4630      	mov	r0, r6
   12178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1217a:	bf00      	nop
   1217c:	0002f2dc 	.word	0x0002f2dc
   12180:	0002f354 	.word	0x0002f354
   12184:	0002fc34 	.word	0x0002fc34
   12188:	0002f968 	.word	0x0002f968
   1218c:	200020b0 	.word	0x200020b0

00012190 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   12190:	b508      	push	{r3, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   12192:	4b07      	ldr	r3, [pc, #28]	; (121b0 <settings_subsys_init+0x20>)
   12194:	781b      	ldrb	r3, [r3, #0]
   12196:	b10b      	cbz	r3, 1219c <settings_subsys_init+0xc>
		return 0;
   12198:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   1219a:	bd08      	pop	{r3, pc}
	settings_init();
   1219c:	f7ff fef2 	bl	11f84 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   121a0:	f000 f87c 	bl	1229c <settings_backend_init>
	if (!err) {
   121a4:	2800      	cmp	r0, #0
   121a6:	d1f8      	bne.n	1219a <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   121a8:	4b01      	ldr	r3, [pc, #4]	; (121b0 <settings_subsys_init+0x20>)
   121aa:	2201      	movs	r2, #1
   121ac:	701a      	strb	r2, [r3, #0]
   121ae:	e7f4      	b.n	1219a <settings_subsys_init+0xa>
   121b0:	20003f6f 	.word	0x20003f6f

000121b4 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   121b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   121b8:	b098      	sub	sp, #96	; 0x60
   121ba:	4680      	mov	r8, r0
   121bc:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   121be:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   121c2:	3401      	adds	r4, #1
   121c4:	b2a4      	uxth	r4, r4
	int ret = 0;
   121c6:	f04f 0a00 	mov.w	sl, #0
   121ca:	e00f      	b.n	121ec <settings_nvs_load+0x38>
		 */
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
			       &buf, sizeof(buf));

		if ((rc1 <= 0) && (rc2 <= 0)) {
   121cc:	2800      	cmp	r0, #0
   121ce:	dc28      	bgt.n	12222 <settings_nvs_load+0x6e>
   121d0:	e00b      	b.n	121ea <settings_nvs_load+0x36>
			/* Settings item is not stored correctly in the NVS.
			 * NVS entry for its name or value is either missing
			 * or deleted. Clean dirty entries to make space for
			 * future settings item.
			 */
			if (name_id == cf->last_name_id) {
   121d2:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   121d6:	42ab      	cmp	r3, r5
   121d8:	d03e      	beq.n	12258 <settings_nvs_load+0xa4>
				cf->last_name_id--;
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
					  &cf->last_name_id, sizeof(uint16_t));
			}
			nvs_delete(&cf->cf_nvs, name_id);
   121da:	4629      	mov	r1, r5
   121dc:	4638      	mov	r0, r7
   121de:	f016 ffb3 	bl	29148 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   121e2:	4621      	mov	r1, r4
   121e4:	4638      	mov	r0, r7
   121e6:	f016 ffaf 	bl	29148 <nvs_delete>
{
   121ea:	462c      	mov	r4, r5
		name_id--;
   121ec:	1e65      	subs	r5, r4, #1
   121ee:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   121f0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   121f4:	d02c      	beq.n	12250 <settings_nvs_load+0x9c>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   121f6:	f108 0708 	add.w	r7, r8, #8
   121fa:	234a      	movs	r3, #74	; 0x4a
   121fc:	aa03      	add	r2, sp, #12
   121fe:	4629      	mov	r1, r5
   12200:	4638      	mov	r0, r7
   12202:	f016 ffa7 	bl	29154 <nvs_read>
   12206:	4606      	mov	r6, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   12208:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1220c:	343f      	adds	r4, #63	; 0x3f
   1220e:	b2a4      	uxth	r4, r4
   12210:	2301      	movs	r3, #1
   12212:	f10d 020b 	add.w	r2, sp, #11
   12216:	4621      	mov	r1, r4
   12218:	4638      	mov	r0, r7
   1221a:	f016 ff9b 	bl	29154 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1221e:	2e00      	cmp	r6, #0
   12220:	ddd4      	ble.n	121cc <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   12222:	2e00      	cmp	r6, #0
   12224:	ddd5      	ble.n	121d2 <settings_nvs_load+0x1e>
   12226:	2800      	cmp	r0, #0
   12228:	ddd3      	ble.n	121d2 <settings_nvs_load+0x1e>
			continue;
		}

		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
   1222a:	ab18      	add	r3, sp, #96	; 0x60
   1222c:	441e      	add	r6, r3
   1222e:	2300      	movs	r3, #0
   12230:	f806 3c54 	strb.w	r3, [r6, #-84]
		read_fn_arg.fs = &cf->cf_nvs;
   12234:	9716      	str	r7, [sp, #88]	; 0x58
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   12236:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c

		ret = settings_call_set_handler(
   1223a:	f8cd 9000 	str.w	r9, [sp]
   1223e:	ab16      	add	r3, sp, #88	; 0x58
   12240:	4a0b      	ldr	r2, [pc, #44]	; (12270 <settings_nvs_load+0xbc>)
   12242:	4601      	mov	r1, r0
   12244:	a803      	add	r0, sp, #12
   12246:	f7ff ff17 	bl	12078 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   1224a:	4682      	mov	sl, r0
   1224c:	2800      	cmp	r0, #0
   1224e:	d0cc      	beq.n	121ea <settings_nvs_load+0x36>
			break;
		}
	}
	return ret;
}
   12250:	4650      	mov	r0, sl
   12252:	b018      	add	sp, #96	; 0x60
   12254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				cf->last_name_id--;
   12258:	3b01      	subs	r3, #1
   1225a:	4642      	mov	r2, r8
   1225c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   12260:	2302      	movs	r3, #2
   12262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12266:	4638      	mov	r0, r7
   12268:	f7ff fc9a 	bl	11ba0 <nvs_write>
   1226c:	e7b5      	b.n	121da <settings_nvs_load+0x26>
   1226e:	bf00      	nop
   12270:	000292cd 	.word	0x000292cd

00012274 <settings_nvs_src>:
{
   12274:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   12276:	4b03      	ldr	r3, [pc, #12]	; (12284 <settings_nvs_src+0x10>)
   12278:	6043      	str	r3, [r0, #4]
	settings_src_register(&cf->cf_store);
   1227a:	f7ff fe17 	bl	11eac <settings_src_register>
}
   1227e:	2000      	movs	r0, #0
   12280:	bd08      	pop	{r3, pc}
   12282:	bf00      	nop
   12284:	20000484 	.word	0x20000484

00012288 <settings_nvs_dst>:
{
   12288:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1228a:	4b03      	ldr	r3, [pc, #12]	; (12298 <settings_nvs_dst+0x10>)
   1228c:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
   1228e:	f7ff fe1d 	bl	11ecc <settings_dst_register>
}
   12292:	2000      	movs	r0, #0
   12294:	bd08      	pop	{r3, pc}
   12296:	bf00      	nop
   12298:	20000484 	.word	0x20000484

0001229c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   1229c:	b510      	push	{r4, lr}
   1229e:	b084      	sub	sp, #16
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   122a0:	2301      	movs	r3, #1
   122a2:	9300      	str	r3, [sp, #0]

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   122a4:	a903      	add	r1, sp, #12
   122a6:	2004      	movs	r0, #4
   122a8:	f7ff fdba 	bl	11e20 <flash_area_open>
	if (rc) {
   122ac:	4603      	mov	r3, r0
   122ae:	b110      	cbz	r0, 122b6 <settings_backend_init+0x1a>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   122b0:	4618      	mov	r0, r3
   122b2:	b004      	add	sp, #16
   122b4:	bd10      	pop	{r4, pc}
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   122b6:	aa01      	add	r2, sp, #4
   122b8:	4669      	mov	r1, sp
   122ba:	2004      	movs	r0, #4
   122bc:	f7ff fdc4 	bl	11e48 <flash_area_get_sectors>
   122c0:	4603      	mov	r3, r0
	if (rc == -ENODEV) {
   122c2:	f110 0f13 	cmn.w	r0, #19
   122c6:	d0f3      	beq.n	122b0 <settings_backend_init+0x14>
	} else if (rc != 0 && rc != -ENOMEM) {
   122c8:	b140      	cbz	r0, 122dc <settings_backend_init+0x40>
   122ca:	f110 0f0c 	cmn.w	r0, #12
   122ce:	d005      	beq.n	122dc <settings_backend_init+0x40>
		k_panic();
   122d0:	4040      	eors	r0, r0
   122d2:	f380 8811 	msr	BASEPRI, r0
   122d6:	f04f 0004 	mov.w	r0, #4
   122da:	df02      	svc	2
	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   122dc:	9c02      	ldr	r4, [sp, #8]
	if (nvs_sector_size > UINT16_MAX) {
   122de:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   122e2:	d223      	bcs.n	1232c <settings_backend_init+0x90>
	size_t nvs_sector_size, nvs_size = 0;
   122e4:	2200      	movs	r2, #0
	uint16_t cnt = 0;
   122e6:	4613      	mov	r3, r2
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   122e8:	2b07      	cmp	r3, #7
   122ea:	d807      	bhi.n	122fc <settings_backend_init+0x60>
		nvs_size += nvs_sector_size;
   122ec:	4422      	add	r2, r4
		if (nvs_size > fa->fa_size) {
   122ee:	9903      	ldr	r1, [sp, #12]
   122f0:	6889      	ldr	r1, [r1, #8]
   122f2:	4291      	cmp	r1, r2
   122f4:	d302      	bcc.n	122fc <settings_backend_init+0x60>
		cnt++;
   122f6:	3301      	adds	r3, #1
   122f8:	b29b      	uxth	r3, r3
   122fa:	e7f5      	b.n	122e8 <settings_backend_init+0x4c>
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   122fc:	480d      	ldr	r0, [pc, #52]	; (12334 <settings_backend_init+0x98>)
   122fe:	8284      	strh	r4, [r0, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   12300:	82c3      	strh	r3, [r0, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   12302:	9b03      	ldr	r3, [sp, #12]
   12304:	685a      	ldr	r2, [r3, #4]
   12306:	6082      	str	r2, [r0, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   12308:	68db      	ldr	r3, [r3, #12]
   1230a:	63c3      	str	r3, [r0, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   1230c:	f017 f88d 	bl	2942a <settings_nvs_backend_init>
	if (rc) {
   12310:	4603      	mov	r3, r0
   12312:	2800      	cmp	r0, #0
   12314:	d1cc      	bne.n	122b0 <settings_backend_init+0x14>
	rc = settings_nvs_src(&default_settings_nvs);
   12316:	4807      	ldr	r0, [pc, #28]	; (12334 <settings_backend_init+0x98>)
   12318:	f7ff ffac 	bl	12274 <settings_nvs_src>
	if (rc) {
   1231c:	4603      	mov	r3, r0
   1231e:	2800      	cmp	r0, #0
   12320:	d1c6      	bne.n	122b0 <settings_backend_init+0x14>
	rc = settings_nvs_dst(&default_settings_nvs);
   12322:	4804      	ldr	r0, [pc, #16]	; (12334 <settings_backend_init+0x98>)
   12324:	f7ff ffb0 	bl	12288 <settings_nvs_dst>
   12328:	4603      	mov	r3, r0
	return rc;
   1232a:	e7c1      	b.n	122b0 <settings_backend_init+0x14>
		return -EDOM;
   1232c:	f06f 0320 	mvn.w	r3, #32
   12330:	e7be      	b.n	122b0 <settings_backend_init+0x14>
   12332:	bf00      	nop
   12334:	200020b8 	.word	0x200020b8

00012338 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   12338:	4b2c      	ldr	r3, [pc, #176]	; (123ec <pm_system_resume+0xb4>)
   1233a:	681b      	ldr	r3, [r3, #0]
   1233c:	2b00      	cmp	r3, #0
   1233e:	d154      	bne.n	123ea <pm_system_resume+0xb2>
{
   12340:	b530      	push	{r4, r5, lr}
   12342:	b085      	sub	sp, #20
		post_ops_done = 1;
   12344:	4b29      	ldr	r3, [pc, #164]	; (123ec <pm_system_resume+0xb4>)
   12346:	2201      	movs	r2, #1
   12348:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   1234a:	4b29      	ldr	r3, [pc, #164]	; (123f0 <pm_system_resume+0xb8>)
   1234c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12350:	ab04      	add	r3, sp, #16
   12352:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12356:	4b27      	ldr	r3, [pc, #156]	; (123f4 <pm_system_resume+0xbc>)
   12358:	b19b      	cbz	r3, 12382 <pm_system_resume+0x4a>
		pm_power_state_exit_post_ops(info);
   1235a:	f018 faf7 	bl	2a94c <pm_power_state_exit_post_ops>
   1235e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12362:	f3ef 8511 	mrs	r5, BASEPRI
   12366:	f383 8812 	msr	BASEPRI_MAX, r3
   1236a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1236e:	4822      	ldr	r0, [pc, #136]	; (123f8 <pm_system_resume+0xc0>)
   12370:	f00f fd92 	bl	21e98 <z_spin_lock_valid>
   12374:	b158      	cbz	r0, 1238e <pm_system_resume+0x56>
	z_spin_lock_set_owner(l);
   12376:	4820      	ldr	r0, [pc, #128]	; (123f8 <pm_system_resume+0xc0>)
   12378:	f00f fdae 	bl	21ed8 <z_spin_lock_set_owner>
	return list->head;
   1237c:	4b1f      	ldr	r3, [pc, #124]	; (123fc <pm_system_resume+0xc4>)
   1237e:	681c      	ldr	r4, [r3, #0]
   12380:	e015      	b.n	123ae <pm_system_resume+0x76>
	__asm__ volatile(
   12382:	2300      	movs	r3, #0
   12384:	f383 8811 	msr	BASEPRI, r3
   12388:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1238c:	e7e7      	b.n	1235e <pm_system_resume+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1238e:	4c1c      	ldr	r4, [pc, #112]	; (12400 <pm_system_resume+0xc8>)
   12390:	2281      	movs	r2, #129	; 0x81
   12392:	4621      	mov	r1, r4
   12394:	481b      	ldr	r0, [pc, #108]	; (12404 <pm_system_resume+0xcc>)
   12396:	f015 ffd4 	bl	28342 <printk>
   1239a:	2181      	movs	r1, #129	; 0x81
   1239c:	4620      	mov	r0, r4
   1239e:	f016 fb69 	bl	28a74 <assert_post_action>
   123a2:	e7e8      	b.n	12376 <pm_system_resume+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   123a4:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   123a6:	b10c      	cbz	r4, 123ac <pm_system_resume+0x74>
	return node->next;
   123a8:	6823      	ldr	r3, [r4, #0]
   123aa:	b143      	cbz	r3, 123be <pm_system_resume+0x86>
{
   123ac:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   123ae:	b134      	cbz	r4, 123be <pm_system_resume+0x86>
			callback = notifier->state_exit;
   123b0:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
   123b2:	2b00      	cmp	r3, #0
   123b4:	d0f6      	beq.n	123a4 <pm_system_resume+0x6c>
			callback(z_power_state.state);
   123b6:	4a0e      	ldr	r2, [pc, #56]	; (123f0 <pm_system_resume+0xb8>)
   123b8:	7810      	ldrb	r0, [r2, #0]
   123ba:	4798      	blx	r3
   123bc:	e7f2      	b.n	123a4 <pm_system_resume+0x6c>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
   123be:	462c      	mov	r4, r5
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   123c0:	480d      	ldr	r0, [pc, #52]	; (123f8 <pm_system_resume+0xc0>)
   123c2:	f00f fd79 	bl	21eb8 <z_spin_unlock_valid>
   123c6:	b128      	cbz	r0, 123d4 <pm_system_resume+0x9c>
	__asm__ volatile(
   123c8:	f384 8811 	msr	BASEPRI, r4
   123cc:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
   123d0:	b005      	add	sp, #20
   123d2:	bd30      	pop	{r4, r5, pc}
   123d4:	4d0a      	ldr	r5, [pc, #40]	; (12400 <pm_system_resume+0xc8>)
   123d6:	22ac      	movs	r2, #172	; 0xac
   123d8:	4629      	mov	r1, r5
   123da:	480a      	ldr	r0, [pc, #40]	; (12404 <pm_system_resume+0xcc>)
   123dc:	f015 ffb1 	bl	28342 <printk>
   123e0:	21ac      	movs	r1, #172	; 0xac
   123e2:	4628      	mov	r0, r5
   123e4:	f016 fb46 	bl	28a74 <assert_post_action>
   123e8:	e7ee      	b.n	123c8 <pm_system_resume+0x90>
   123ea:	4770      	bx	lr
   123ec:	20000494 	.word	0x20000494
   123f0:	20002104 	.word	0x20002104
   123f4:	0002a94d 	.word	0x0002a94d
   123f8:	200020f8 	.word	0x200020f8
   123fc:	200020fc 	.word	0x200020fc
   12400:	0002f9a4 	.word	0x0002f9a4
   12404:	0002f968 	.word	0x0002f968

00012408 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   12408:	b570      	push	{r4, r5, r6, lr}
   1240a:	b088      	sub	sp, #32
   1240c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   1240e:	4d42      	ldr	r5, [pc, #264]	; (12518 <pm_system_suspend+0x110>)
   12410:	466e      	mov	r6, sp
   12412:	4601      	mov	r1, r0
   12414:	4630      	mov	r0, r6
   12416:	f017 f828 	bl	2946a <pm_policy_next_state>
   1241a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1241e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   12422:	7828      	ldrb	r0, [r5, #0]
   12424:	2800      	cmp	r0, #0
   12426:	d06a      	beq.n	124fe <pm_system_suspend+0xf6>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   12428:	4b3c      	ldr	r3, [pc, #240]	; (1251c <pm_system_suspend+0x114>)
   1242a:	2200      	movs	r2, #0
   1242c:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   1242e:	f1b4 3fff 	cmp.w	r4, #4294967295
   12432:	d014      	beq.n	1245e <pm_system_suspend+0x56>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   12434:	68ab      	ldr	r3, [r5, #8]
   12436:	4299      	cmp	r1, r3
   12438:	d325      	bcc.n	12486 <pm_system_suspend+0x7e>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
   1243a:	4b37      	ldr	r3, [pc, #220]	; (12518 <pm_system_suspend+0x110>)
   1243c:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1243e:	0c59      	lsrs	r1, r3, #17
   12440:	03d8      	lsls	r0, r3, #15
   12442:	4d37      	ldr	r5, [pc, #220]	; (12520 <pm_system_suspend+0x118>)
   12444:	4a37      	ldr	r2, [pc, #220]	; (12524 <pm_system_suspend+0x11c>)
   12446:	2300      	movs	r3, #0
   12448:	1940      	adds	r0, r0, r5
   1244a:	f04f 0500 	mov.w	r5, #0
   1244e:	eb45 0101 	adc.w	r1, r5, r1
   12452:	f7ed fe55 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   12456:	2101      	movs	r1, #1
   12458:	1a20      	subs	r0, r4, r0
   1245a:	f012 fb59 	bl	24b10 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1245e:	f011 f8fb 	bl	23658 <k_sched_lock>
	__asm__ volatile(
   12462:	f04f 0340 	mov.w	r3, #64	; 0x40
   12466:	f3ef 8511 	mrs	r5, BASEPRI
   1246a:	f383 8812 	msr	BASEPRI_MAX, r3
   1246e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12472:	482d      	ldr	r0, [pc, #180]	; (12528 <pm_system_suspend+0x120>)
   12474:	f00f fd10 	bl	21e98 <z_spin_lock_valid>
   12478:	b180      	cbz	r0, 1249c <pm_system_suspend+0x94>
	z_spin_lock_set_owner(l);
   1247a:	482b      	ldr	r0, [pc, #172]	; (12528 <pm_system_suspend+0x120>)
   1247c:	f00f fd2c 	bl	21ed8 <z_spin_lock_set_owner>
	return list->head;
   12480:	4b2a      	ldr	r3, [pc, #168]	; (1252c <pm_system_suspend+0x124>)
   12482:	681c      	ldr	r4, [r3, #0]
   12484:	e01a      	b.n	124bc <pm_system_suspend+0xb4>
		__ASSERT(z_power_state.min_residency_us >=
   12486:	4d2a      	ldr	r5, [pc, #168]	; (12530 <pm_system_suspend+0x128>)
   12488:	22ca      	movs	r2, #202	; 0xca
   1248a:	4629      	mov	r1, r5
   1248c:	4829      	ldr	r0, [pc, #164]	; (12534 <pm_system_suspend+0x12c>)
   1248e:	f015 ff58 	bl	28342 <printk>
   12492:	21ca      	movs	r1, #202	; 0xca
   12494:	4628      	mov	r0, r5
   12496:	f016 faed 	bl	28a74 <assert_post_action>
   1249a:	e7ce      	b.n	1243a <pm_system_suspend+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1249c:	4c26      	ldr	r4, [pc, #152]	; (12538 <pm_system_suspend+0x130>)
   1249e:	2281      	movs	r2, #129	; 0x81
   124a0:	4621      	mov	r1, r4
   124a2:	4824      	ldr	r0, [pc, #144]	; (12534 <pm_system_suspend+0x12c>)
   124a4:	f015 ff4d 	bl	28342 <printk>
   124a8:	2181      	movs	r1, #129	; 0x81
   124aa:	4620      	mov	r0, r4
   124ac:	f016 fae2 	bl	28a74 <assert_post_action>
   124b0:	e7e3      	b.n	1247a <pm_system_suspend+0x72>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   124b2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   124b4:	b10c      	cbz	r4, 124ba <pm_system_suspend+0xb2>
	return node->next;
   124b6:	6823      	ldr	r3, [r4, #0]
   124b8:	b143      	cbz	r3, 124cc <pm_system_suspend+0xc4>
{
   124ba:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   124bc:	b134      	cbz	r4, 124cc <pm_system_suspend+0xc4>
			callback = notifier->state_entry;
   124be:	6863      	ldr	r3, [r4, #4]
		if (callback) {
   124c0:	2b00      	cmp	r3, #0
   124c2:	d0f6      	beq.n	124b2 <pm_system_suspend+0xaa>
			callback(z_power_state.state);
   124c4:	4a14      	ldr	r2, [pc, #80]	; (12518 <pm_system_suspend+0x110>)
   124c6:	7810      	ldrb	r0, [r2, #0]
   124c8:	4798      	blx	r3
   124ca:	e7f2      	b.n	124b2 <pm_system_suspend+0xaa>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
   124cc:	462c      	mov	r4, r5
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   124ce:	4816      	ldr	r0, [pc, #88]	; (12528 <pm_system_suspend+0x120>)
   124d0:	f00f fcf2 	bl	21eb8 <z_spin_unlock_valid>
   124d4:	b1a8      	cbz	r0, 12502 <pm_system_suspend+0xfa>
	__asm__ volatile(
   124d6:	f384 8811 	msr	BASEPRI, r4
   124da:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
   124de:	4b0e      	ldr	r3, [pc, #56]	; (12518 <pm_system_suspend+0x110>)
   124e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   124e4:	ab08      	add	r3, sp, #32
   124e6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   124ea:	4b14      	ldr	r3, [pc, #80]	; (1253c <pm_system_suspend+0x134>)
   124ec:	b10b      	cbz	r3, 124f2 <pm_system_suspend+0xea>
		pm_power_state_set(info);
   124ee:	f018 fa1a 	bl	2a926 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   124f2:	f7ff ff21 	bl	12338 <pm_system_resume>
	k_sched_unlock();
   124f6:	f011 fd9f 	bl	24038 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   124fa:	4b07      	ldr	r3, [pc, #28]	; (12518 <pm_system_suspend+0x110>)
   124fc:	7818      	ldrb	r0, [r3, #0]
}
   124fe:	b008      	add	sp, #32
   12500:	bd70      	pop	{r4, r5, r6, pc}
   12502:	4d0d      	ldr	r5, [pc, #52]	; (12538 <pm_system_suspend+0x130>)
   12504:	22ac      	movs	r2, #172	; 0xac
   12506:	4629      	mov	r1, r5
   12508:	480a      	ldr	r0, [pc, #40]	; (12534 <pm_system_suspend+0x12c>)
   1250a:	f015 ff1a 	bl	28342 <printk>
   1250e:	21ac      	movs	r1, #172	; 0xac
   12510:	4628      	mov	r0, r5
   12512:	f016 faaf 	bl	28a74 <assert_post_action>
   12516:	e7de      	b.n	124d6 <pm_system_suspend+0xce>
   12518:	20002104 	.word	0x20002104
   1251c:	20000494 	.word	0x20000494
   12520:	000f423f 	.word	0x000f423f
   12524:	000f4240 	.word	0x000f4240
   12528:	200020f8 	.word	0x200020f8
   1252c:	200020fc 	.word	0x200020fc
   12530:	0002fca0 	.word	0x0002fca0
   12534:	0002f968 	.word	0x0002f968
   12538:	0002f9a4 	.word	0x0002f9a4
   1253c:	0002a927 	.word	0x0002a927

00012540 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   12540:	2901      	cmp	r1, #1
   12542:	bf14      	ite	ne
   12544:	2100      	movne	r1, #0
   12546:	2101      	moveq	r1, #1
   12548:	4b01      	ldr	r3, [pc, #4]	; (12550 <lbslc_ccc_cfg_changed+0x10>)
   1254a:	7019      	strb	r1, [r3, #0]
}
   1254c:	4770      	bx	lr
   1254e:	bf00      	nop
   12550:	20003f71 	.word	0x20003f71

00012554 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   12554:	b510      	push	{r4, lr}
   12556:	461c      	mov	r4, r3
   12558:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 1U) {
   1255c:	2c01      	cmp	r4, #1
   1255e:	d10c      	bne.n	1257a <write_led+0x26>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   12560:	b973      	cbnz	r3, 12580 <write_led+0x2c>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
   12562:	4b0a      	ldr	r3, [pc, #40]	; (1258c <write_led+0x38>)
   12564:	681b      	ldr	r3, [r3, #0]
   12566:	b133      	cbz	r3, 12576 <write_led+0x22>
		uint8_t val = *((uint8_t *)buf);
   12568:	7810      	ldrb	r0, [r2, #0]

		if (val == 0x00 || val == 0x01) {
   1256a:	2801      	cmp	r0, #1
   1256c:	d80b      	bhi.n	12586 <write_led+0x32>
			lbs_cb.led_cb(val ? true : false);
   1256e:	3800      	subs	r0, #0
   12570:	bf18      	it	ne
   12572:	2001      	movne	r0, #1
   12574:	4798      	blx	r3
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
   12576:	4620      	mov	r0, r4
}
   12578:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1257a:	f06f 000c 	mvn.w	r0, #12
   1257e:	e7fb      	b.n	12578 <write_led+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12580:	f06f 0006 	mvn.w	r0, #6
   12584:	e7f8      	b.n	12578 <write_led+0x24>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   12586:	f06f 0012 	mvn.w	r0, #18
   1258a:	e7f5      	b.n	12578 <write_led+0x24>
   1258c:	20002110 	.word	0x20002110

00012590 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   12590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12594:	b084      	sub	sp, #16
   12596:	460c      	mov	r4, r1
	const char *value = attr->user_data;
   12598:	f8d1 800c 	ldr.w	r8, [r1, #12]

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (lbs_cb.button_cb) {
   1259c:	490d      	ldr	r1, [pc, #52]	; (125d4 <read_button+0x44>)
   1259e:	6849      	ldr	r1, [r1, #4]
   125a0:	b1a9      	cbz	r1, 125ce <read_button+0x3e>
   125a2:	4605      	mov	r5, r0
   125a4:	4617      	mov	r7, r2
   125a6:	461e      	mov	r6, r3
		button_state = lbs_cb.button_cb();
   125a8:	4788      	blx	r1
   125aa:	4b0b      	ldr	r3, [pc, #44]	; (125d8 <read_button+0x48>)
   125ac:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   125ae:	2301      	movs	r3, #1
   125b0:	9302      	str	r3, [sp, #8]
   125b2:	f8cd 8004 	str.w	r8, [sp, #4]
   125b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   125ba:	9300      	str	r3, [sp, #0]
   125bc:	4633      	mov	r3, r6
   125be:	463a      	mov	r2, r7
   125c0:	4621      	mov	r1, r4
   125c2:	4628      	mov	r0, r5
   125c4:	f01a f9e6 	bl	2c994 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   125c8:	b004      	add	sp, #16
   125ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   125ce:	2000      	movs	r0, #0
   125d0:	e7fa      	b.n	125c8 <read_button+0x38>
   125d2:	bf00      	nop
   125d4:	20002110 	.word	0x20002110
   125d8:	20003f70 	.word	0x20003f70

000125dc <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
   125dc:	b120      	cbz	r0, 125e8 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
   125de:	6801      	ldr	r1, [r0, #0]
   125e0:	4a02      	ldr	r2, [pc, #8]	; (125ec <bt_lbs_init+0x10>)
   125e2:	6011      	str	r1, [r2, #0]
		lbs_cb.button_cb = callbacks->button_cb;
   125e4:	6843      	ldr	r3, [r0, #4]
   125e6:	6053      	str	r3, [r2, #4]
	}

	return 0;
}
   125e8:	2000      	movs	r0, #0
   125ea:	4770      	bx	lr
   125ec:	20002110 	.word	0x20002110

000125f0 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
   125f0:	b500      	push	{lr}
   125f2:	b089      	sub	sp, #36	; 0x24
   125f4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
   125f8:	4b0c      	ldr	r3, [pc, #48]	; (1262c <bt_lbs_send_button_state+0x3c>)
   125fa:	781b      	ldrb	r3, [r3, #0]
   125fc:	b19b      	cbz	r3, 12626 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   125fe:	2218      	movs	r2, #24
   12600:	2100      	movs	r1, #0
   12602:	a802      	add	r0, sp, #8
   12604:	f018 f96f 	bl	2a8e6 <memset>

	params.attr = attr;
   12608:	4b09      	ldr	r3, [pc, #36]	; (12630 <bt_lbs_send_button_state+0x40>)
   1260a:	9303      	str	r3, [sp, #12]
	params.data = data;
   1260c:	f10d 0307 	add.w	r3, sp, #7
   12610:	9304      	str	r3, [sp, #16]
	params.len = len;
   12612:	2301      	movs	r3, #1
   12614:	f8ad 3014 	strh.w	r3, [sp, #20]

	return bt_gatt_notify_cb(conn, &params);
   12618:	a902      	add	r1, sp, #8
   1261a:	2000      	movs	r0, #0
   1261c:	f007 ff18 	bl	1a450 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
   12620:	b009      	add	sp, #36	; 0x24
   12622:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   12626:	f06f 000c 	mvn.w	r0, #12
   1262a:	e7f9      	b.n	12620 <bt_lbs_send_button_state+0x30>
   1262c:	20003f71 	.word	0x20003f71
   12630:	0002fd00 	.word	0x0002fd00

00012634 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   12634:	4b01      	ldr	r3, [pc, #4]	; (1263c <uECC_get_rng+0x8>)
   12636:	6818      	ldr	r0, [r3, #0]
   12638:	4770      	bx	lr
   1263a:	bf00      	nop
   1263c:	20000534 	.word	0x20000534

00012640 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   12640:	b5f0      	push	{r4, r5, r6, r7, lr}
   12642:	b089      	sub	sp, #36	; 0x24
   12644:	4605      	mov	r5, r0
   12646:	460c      	mov	r4, r1
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   12648:	2208      	movs	r2, #8
   1264a:	f017 f8b2 	bl	297b2 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   1264e:	2700      	movs	r7, #0
   12650:	9702      	str	r7, [sp, #8]
   12652:	9701      	str	r7, [sp, #4]
   12654:	9700      	str	r7, [sp, #0]
	tmp[3] = product[11];
   12656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12658:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   1265a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1265c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   1265e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12660:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   12662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12664:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   12666:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12668:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1266a:	2308      	movs	r3, #8
   1266c:	466a      	mov	r2, sp
   1266e:	4669      	mov	r1, sp
   12670:	4668      	mov	r0, sp
   12672:	f017 f8e3 	bl	2983c <uECC_vli_add>
   12676:	4606      	mov	r6, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12678:	2308      	movs	r3, #8
   1267a:	466a      	mov	r2, sp
   1267c:	4629      	mov	r1, r5
   1267e:	4628      	mov	r0, r5
   12680:	f017 f8dc 	bl	2983c <uECC_vli_add>
   12684:	4406      	add	r6, r0

	/* s2 */
	tmp[3] = product[12];
   12686:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12688:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   1268a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1268c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   1268e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12690:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   12692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12694:	9306      	str	r3, [sp, #24]
	tmp[7] = 0;
   12696:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12698:	2308      	movs	r3, #8
   1269a:	466a      	mov	r2, sp
   1269c:	4669      	mov	r1, sp
   1269e:	4668      	mov	r0, sp
   126a0:	f017 f8cc 	bl	2983c <uECC_vli_add>
   126a4:	4406      	add	r6, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   126a6:	2308      	movs	r3, #8
   126a8:	466a      	mov	r2, sp
   126aa:	4629      	mov	r1, r5
   126ac:	4628      	mov	r0, r5
   126ae:	f017 f8c5 	bl	2983c <uECC_vli_add>
   126b2:	4406      	add	r6, r0

	/* s3 */
	tmp[0] = product[8];
   126b4:	6a23      	ldr	r3, [r4, #32]
   126b6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   126b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   126ba:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   126bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   126be:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   126c0:	9705      	str	r7, [sp, #20]
   126c2:	9704      	str	r7, [sp, #16]
   126c4:	9703      	str	r7, [sp, #12]
	tmp[6] = product[14];
   126c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   126c8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   126ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   126cc:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   126ce:	2308      	movs	r3, #8
   126d0:	466a      	mov	r2, sp
   126d2:	4629      	mov	r1, r5
   126d4:	4628      	mov	r0, r5
   126d6:	f017 f8b1 	bl	2983c <uECC_vli_add>
   126da:	4406      	add	r6, r0

	/* s4 */
	tmp[0] = product[9];
   126dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   126de:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   126e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   126e2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   126e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   126e6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   126e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   126ea:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
   126ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   126ee:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
   126f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   126f2:	9205      	str	r2, [sp, #20]
	tmp[6] = product[13];
   126f4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[8];
   126f6:	6a23      	ldr	r3, [r4, #32]
   126f8:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   126fa:	2308      	movs	r3, #8
   126fc:	466a      	mov	r2, sp
   126fe:	4629      	mov	r1, r5
   12700:	4628      	mov	r0, r5
   12702:	f017 f89b 	bl	2983c <uECC_vli_add>
   12706:	4406      	add	r6, r0

	/* d1 */
	tmp[0] = product[11];
   12708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1270a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   1270c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1270e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   12710:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12712:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   12714:	9705      	str	r7, [sp, #20]
   12716:	9704      	str	r7, [sp, #16]
   12718:	9703      	str	r7, [sp, #12]
	tmp[6] = product[8];
   1271a:	6a23      	ldr	r3, [r4, #32]
   1271c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   1271e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12720:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12722:	2308      	movs	r3, #8
   12724:	466a      	mov	r2, sp
   12726:	4629      	mov	r1, r5
   12728:	4628      	mov	r0, r5
   1272a:	f017 f8c7 	bl	298bc <uECC_vli_sub>
   1272e:	1a36      	subs	r6, r6, r0

	/* d2 */
	tmp[0] = product[12];
   12730:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12732:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   12734:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12736:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   12738:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1273a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   1273c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1273e:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
   12740:	9705      	str	r7, [sp, #20]
   12742:	9704      	str	r7, [sp, #16]
	tmp[6] = product[9];
   12744:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12746:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   12748:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1274a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1274c:	2308      	movs	r3, #8
   1274e:	466a      	mov	r2, sp
   12750:	4629      	mov	r1, r5
   12752:	4628      	mov	r0, r5
   12754:	f017 f8b2 	bl	298bc <uECC_vli_sub>
   12758:	1a36      	subs	r6, r6, r0

	/* d3 */
	tmp[0] = product[13];
   1275a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1275c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   1275e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12760:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   12762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12764:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   12766:	6a23      	ldr	r3, [r4, #32]
   12768:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   1276a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1276c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   1276e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12770:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   12772:	9706      	str	r7, [sp, #24]
	tmp[7] = product[12];
   12774:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12776:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12778:	2308      	movs	r3, #8
   1277a:	466a      	mov	r2, sp
   1277c:	4629      	mov	r1, r5
   1277e:	4628      	mov	r0, r5
   12780:	f017 f89c 	bl	298bc <uECC_vli_sub>
   12784:	1a36      	subs	r6, r6, r0

	/* d4 */
	tmp[0] = product[14];
   12786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12788:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   1278a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1278c:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
   1278e:	9702      	str	r7, [sp, #8]
	tmp[3] = product[9];
   12790:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12792:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   12794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12796:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   12798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1279a:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   1279c:	9706      	str	r7, [sp, #24]
	tmp[7] = product[13];
   1279e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   127a0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   127a2:	2308      	movs	r3, #8
   127a4:	466a      	mov	r2, sp
   127a6:	4629      	mov	r1, r5
   127a8:	4628      	mov	r0, r5
   127aa:	f017 f887 	bl	298bc <uECC_vli_sub>

	if (carry < 0) {
   127ae:	1a36      	subs	r6, r6, r0
   127b0:	d50f      	bpl.n	127d2 <vli_mmod_fast_secp256r1+0x192>
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   127b2:	2308      	movs	r3, #8
   127b4:	4a0c      	ldr	r2, [pc, #48]	; (127e8 <vli_mmod_fast_secp256r1+0x1a8>)
   127b6:	4629      	mov	r1, r5
   127b8:	4628      	mov	r0, r5
   127ba:	f017 f83f 	bl	2983c <uECC_vli_add>
		}
		while (carry < 0);
   127be:	1836      	adds	r6, r6, r0
   127c0:	d4f7      	bmi.n	127b2 <vli_mmod_fast_secp256r1+0x172>
   127c2:	e00f      	b.n	127e4 <vli_mmod_fast_secp256r1+0x1a4>
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   127c4:	2308      	movs	r3, #8
   127c6:	4a08      	ldr	r2, [pc, #32]	; (127e8 <vli_mmod_fast_secp256r1+0x1a8>)
   127c8:	4629      	mov	r1, r5
   127ca:	4628      	mov	r0, r5
   127cc:	f017 f876 	bl	298bc <uECC_vli_sub>
   127d0:	1a36      	subs	r6, r6, r0
		while (carry || 
   127d2:	2e00      	cmp	r6, #0
   127d4:	d1f6      	bne.n	127c4 <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   127d6:	2208      	movs	r2, #8
   127d8:	4629      	mov	r1, r5
   127da:	4803      	ldr	r0, [pc, #12]	; (127e8 <vli_mmod_fast_secp256r1+0x1a8>)
   127dc:	f016 fff8 	bl	297d0 <uECC_vli_cmp_unsafe>
		while (carry || 
   127e0:	2801      	cmp	r0, #1
   127e2:	d1ef      	bne.n	127c4 <vli_mmod_fast_secp256r1+0x184>
		}
	}
}
   127e4:	b009      	add	sp, #36	; 0x24
   127e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127e8:	0002fd54 	.word	0x0002fd54

000127ec <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   127ec:	b4f0      	push	{r4, r5, r6, r7}
   127ee:	b08c      	sub	sp, #48	; 0x30
   127f0:	4607      	mov	r7, r0
   127f2:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   127f4:	ac01      	add	r4, sp, #4
   127f6:	4d2a      	ldr	r5, [pc, #168]	; (128a0 <tc_aes128_set_encrypt_key+0xb4>)
   127f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   127fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   127fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   127fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   12804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   12808:	2f00      	cmp	r7, #0
   1280a:	d045      	beq.n	12898 <tc_aes128_set_encrypt_key+0xac>
   1280c:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1280e:	2e00      	cmp	r6, #0
   12810:	d044      	beq.n	1289c <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   12812:	2300      	movs	r3, #0
   12814:	e00f      	b.n	12836 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12816:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   1281a:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   1281e:	784a      	ldrb	r2, [r1, #1]
   12820:	0412      	lsls	r2, r2, #16
   12822:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12826:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12828:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1282c:	78c9      	ldrb	r1, [r1, #3]
   1282e:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12830:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   12834:	3301      	adds	r3, #1
   12836:	2b03      	cmp	r3, #3
   12838:	d9ed      	bls.n	12816 <tc_aes128_set_encrypt_key+0x2a>
   1283a:	e006      	b.n	1284a <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1283c:	1f19      	subs	r1, r3, #4
   1283e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   12842:	404a      	eors	r2, r1
   12844:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12848:	3301      	adds	r3, #1
   1284a:	2b2b      	cmp	r3, #43	; 0x2b
   1284c:	d820      	bhi.n	12890 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   1284e:	1e5a      	subs	r2, r3, #1
   12850:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   12854:	f013 0f03 	tst.w	r3, #3
   12858:	d1f0      	bne.n	1283c <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   1285a:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1285e:	0e11      	lsrs	r1, r2, #24
   12860:	4c10      	ldr	r4, [pc, #64]	; (128a4 <tc_aes128_set_encrypt_key+0xb8>)
   12862:	5c65      	ldrb	r5, [r4, r1]
   12864:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12868:	5c61      	ldrb	r1, [r4, r1]
   1286a:	0409      	lsls	r1, r1, #16
   1286c:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   12870:	f3c2 2507 	ubfx	r5, r2, #8, #8
   12874:	5d65      	ldrb	r5, [r4, r5]
   12876:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1287a:	b2d2      	uxtb	r2, r2
   1287c:	5ca2      	ldrb	r2, [r4, r2]
   1287e:	4311      	orrs	r1, r2
   12880:	f023 0203 	bic.w	r2, r3, #3
   12884:	ac0c      	add	r4, sp, #48	; 0x30
   12886:	4422      	add	r2, r4
   12888:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   1288c:	404a      	eors	r2, r1
   1288e:	e7d5      	b.n	1283c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   12890:	2001      	movs	r0, #1
}
   12892:	b00c      	add	sp, #48	; 0x30
   12894:	bcf0      	pop	{r4, r5, r6, r7}
   12896:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12898:	2000      	movs	r0, #0
   1289a:	e7fa      	b.n	12892 <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   1289c:	2000      	movs	r0, #0
   1289e:	e7f8      	b.n	12892 <tc_aes128_set_encrypt_key+0xa6>
   128a0:	0002f514 	.word	0x0002f514
   128a4:	0002fe00 	.word	0x0002fe00

000128a8 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   128a8:	2800      	cmp	r0, #0
   128aa:	f000 839a 	beq.w	12fe2 <tc_aes_encrypt+0x73a>
{
   128ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128b2:	b088      	sub	sp, #32
   128b4:	4616      	mov	r6, r2
   128b6:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   128b8:	2900      	cmp	r1, #0
   128ba:	f000 8394 	beq.w	12fe6 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   128be:	2a00      	cmp	r2, #0
   128c0:	f000 8393 	beq.w	12fea <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   128c4:	2310      	movs	r3, #16
   128c6:	460a      	mov	r2, r1
   128c8:	4619      	mov	r1, r3
   128ca:	eb0d 0003 	add.w	r0, sp, r3
   128ce:	f016 fdd1 	bl	29474 <_copy>
	add_round_key(state, s->words);
   128d2:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   128d4:	6833      	ldr	r3, [r6, #0]
   128d6:	f89d 2010 	ldrb.w	r2, [sp, #16]
   128da:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   128de:	f88d 2010 	strb.w	r2, [sp, #16]
   128e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   128e6:	f89d 1011 	ldrb.w	r1, [sp, #17]
   128ea:	404a      	eors	r2, r1
   128ec:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   128f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   128f4:	f89d 1012 	ldrb.w	r1, [sp, #18]
   128f8:	404a      	eors	r2, r1
   128fa:	f88d 2012 	strb.w	r2, [sp, #18]
   128fe:	b2db      	uxtb	r3, r3
   12900:	f89d 2013 	ldrb.w	r2, [sp, #19]
   12904:	4053      	eors	r3, r2
   12906:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1290a:	6873      	ldr	r3, [r6, #4]
   1290c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12910:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12914:	f88d 2014 	strb.w	r2, [sp, #20]
   12918:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1291c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   12920:	404a      	eors	r2, r1
   12922:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12926:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1292a:	f89d 1016 	ldrb.w	r1, [sp, #22]
   1292e:	404a      	eors	r2, r1
   12930:	f88d 2016 	strb.w	r2, [sp, #22]
   12934:	b2db      	uxtb	r3, r3
   12936:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1293a:	4053      	eors	r3, r2
   1293c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12940:	68b3      	ldr	r3, [r6, #8]
   12942:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12946:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1294a:	f88d 2018 	strb.w	r2, [sp, #24]
   1294e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12952:	f89d 1019 	ldrb.w	r1, [sp, #25]
   12956:	404a      	eors	r2, r1
   12958:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1295c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12960:	f89d 101a 	ldrb.w	r1, [sp, #26]
   12964:	404a      	eors	r2, r1
   12966:	f88d 201a 	strb.w	r2, [sp, #26]
   1296a:	b2db      	uxtb	r3, r3
   1296c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   12970:	4053      	eors	r3, r2
   12972:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12976:	68f3      	ldr	r3, [r6, #12]
   12978:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1297c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12980:	f88d 201c 	strb.w	r2, [sp, #28]
   12984:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12988:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1298c:	404a      	eors	r2, r1
   1298e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12992:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12996:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1299a:	404a      	eors	r2, r1
   1299c:	f88d 201e 	strb.w	r2, [sp, #30]
   129a0:	b2db      	uxtb	r3, r3
   129a2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   129a6:	4053      	eors	r3, r2
   129a8:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   129ac:	2400      	movs	r4, #0
}
   129ae:	e239      	b.n	12e24 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   129b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   129b4:	f88d 3000 	strb.w	r3, [sp]
   129b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   129bc:	f88d 3001 	strb.w	r3, [sp, #1]
   129c0:	f89d 301a 	ldrb.w	r3, [sp, #26]
   129c4:	f88d 3002 	strb.w	r3, [sp, #2]
   129c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   129cc:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   129d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   129d4:	f88d 3004 	strb.w	r3, [sp, #4]
   129d8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   129dc:	f88d 3005 	strb.w	r3, [sp, #5]
   129e0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   129e4:	f88d 3006 	strb.w	r3, [sp, #6]
   129e8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   129ec:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   129f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   129f4:	f88d 3008 	strb.w	r3, [sp, #8]
   129f8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   129fc:	f88d 3009 	strb.w	r3, [sp, #9]
   12a00:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12a04:	f88d 300a 	strb.w	r3, [sp, #10]
   12a08:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12a0c:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12a10:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12a14:	f88d 300c 	strb.w	r3, [sp, #12]
   12a18:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12a1c:	f88d 300d 	strb.w	r3, [sp, #13]
   12a20:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12a24:	f88d 300e 	strb.w	r3, [sp, #14]
   12a28:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12a2c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12a30:	2310      	movs	r3, #16
   12a32:	466a      	mov	r2, sp
   12a34:	4619      	mov	r1, r3
   12a36:	eb0d 0003 	add.w	r0, sp, r3
   12a3a:	f016 fd1b 	bl	29474 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12a3e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12a42:	f016 fd28 	bl	29496 <_double_byte>
   12a46:	4680      	mov	r8, r0
   12a48:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12a4c:	f016 fd23 	bl	29496 <_double_byte>
   12a50:	4601      	mov	r1, r0
   12a52:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12a56:	f89d 2012 	ldrb.w	r2, [sp, #18]
   12a5a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12a5e:	4041      	eors	r1, r0
   12a60:	ea88 0801 	eor.w	r8, r8, r1
   12a64:	ea82 0208 	eor.w	r2, r2, r8
   12a68:	4053      	eors	r3, r2
   12a6a:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12a6e:	f89d 8010 	ldrb.w	r8, [sp, #16]
   12a72:	f016 fd10 	bl	29496 <_double_byte>
   12a76:	ea88 0800 	eor.w	r8, r8, r0
   12a7a:	fa5f f888 	uxtb.w	r8, r8
   12a7e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12a82:	f016 fd08 	bl	29496 <_double_byte>
   12a86:	4602      	mov	r2, r0
   12a88:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12a8c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12a90:	4042      	eors	r2, r0
   12a92:	ea88 0802 	eor.w	r8, r8, r2
   12a96:	ea83 0308 	eor.w	r3, r3, r8
   12a9a:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12a9e:	f89d 8010 	ldrb.w	r8, [sp, #16]
   12aa2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12aa6:	ea88 0803 	eor.w	r8, r8, r3
   12aaa:	f016 fcf4 	bl	29496 <_double_byte>
   12aae:	ea88 0800 	eor.w	r8, r8, r0
   12ab2:	fa5f f888 	uxtb.w	r8, r8
   12ab6:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12aba:	f016 fcec 	bl	29496 <_double_byte>
   12abe:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12ac2:	4058      	eors	r0, r3
   12ac4:	ea88 0800 	eor.w	r8, r8, r0
   12ac8:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12acc:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12ad0:	f016 fce1 	bl	29496 <_double_byte>
   12ad4:	f89d 2010 	ldrb.w	r2, [sp, #16]
   12ad8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12adc:	f89d 8012 	ldrb.w	r8, [sp, #18]
   12ae0:	4050      	eors	r0, r2
   12ae2:	4043      	eors	r3, r0
   12ae4:	ea88 0803 	eor.w	r8, r8, r3
   12ae8:	fa5f f888 	uxtb.w	r8, r8
   12aec:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12af0:	f016 fcd1 	bl	29496 <_double_byte>
   12af4:	ea88 0800 	eor.w	r8, r8, r0
   12af8:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12afc:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12b00:	f016 fcc9 	bl	29496 <_double_byte>
   12b04:	4680      	mov	r8, r0
   12b06:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12b0a:	f016 fcc4 	bl	29496 <_double_byte>
   12b0e:	4601      	mov	r1, r0
   12b10:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12b14:	f89d 2016 	ldrb.w	r2, [sp, #22]
   12b18:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12b1c:	4041      	eors	r1, r0
   12b1e:	ea88 0801 	eor.w	r8, r8, r1
   12b22:	ea82 0208 	eor.w	r2, r2, r8
   12b26:	4053      	eors	r3, r2
   12b28:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12b2c:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12b30:	f016 fcb1 	bl	29496 <_double_byte>
   12b34:	ea88 0800 	eor.w	r8, r8, r0
   12b38:	fa5f f888 	uxtb.w	r8, r8
   12b3c:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12b40:	f016 fca9 	bl	29496 <_double_byte>
   12b44:	4602      	mov	r2, r0
   12b46:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12b4a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12b4e:	4042      	eors	r2, r0
   12b50:	ea88 0802 	eor.w	r8, r8, r2
   12b54:	ea83 0308 	eor.w	r3, r3, r8
   12b58:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12b5c:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12b60:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12b64:	ea88 0803 	eor.w	r8, r8, r3
   12b68:	f016 fc95 	bl	29496 <_double_byte>
   12b6c:	ea88 0800 	eor.w	r8, r8, r0
   12b70:	fa5f f888 	uxtb.w	r8, r8
   12b74:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12b78:	f016 fc8d 	bl	29496 <_double_byte>
   12b7c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12b80:	4058      	eors	r0, r3
   12b82:	ea88 0800 	eor.w	r8, r8, r0
   12b86:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12b8a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12b8e:	f016 fc82 	bl	29496 <_double_byte>
   12b92:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12b96:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12b9a:	f89d 8016 	ldrb.w	r8, [sp, #22]
   12b9e:	4050      	eors	r0, r2
   12ba0:	4043      	eors	r3, r0
   12ba2:	ea88 0803 	eor.w	r8, r8, r3
   12ba6:	fa5f f888 	uxtb.w	r8, r8
   12baa:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12bae:	f016 fc72 	bl	29496 <_double_byte>
   12bb2:	ea88 0800 	eor.w	r8, r8, r0
   12bb6:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12bba:	f89d 0018 	ldrb.w	r0, [sp, #24]
   12bbe:	f016 fc6a 	bl	29496 <_double_byte>
   12bc2:	4680      	mov	r8, r0
   12bc4:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12bc8:	f016 fc65 	bl	29496 <_double_byte>
   12bcc:	4601      	mov	r1, r0
   12bce:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12bd2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   12bd6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12bda:	4041      	eors	r1, r0
   12bdc:	ea88 0801 	eor.w	r8, r8, r1
   12be0:	ea82 0208 	eor.w	r2, r2, r8
   12be4:	4053      	eors	r3, r2
   12be6:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12bea:	f89d 8018 	ldrb.w	r8, [sp, #24]
   12bee:	f016 fc52 	bl	29496 <_double_byte>
   12bf2:	ea88 0800 	eor.w	r8, r8, r0
   12bf6:	fa5f f888 	uxtb.w	r8, r8
   12bfa:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12bfe:	f016 fc4a 	bl	29496 <_double_byte>
   12c02:	4602      	mov	r2, r0
   12c04:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12c08:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12c0c:	4042      	eors	r2, r0
   12c0e:	ea88 0802 	eor.w	r8, r8, r2
   12c12:	ea83 0308 	eor.w	r3, r3, r8
   12c16:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12c1a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   12c1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12c22:	ea88 0803 	eor.w	r8, r8, r3
   12c26:	f016 fc36 	bl	29496 <_double_byte>
   12c2a:	ea88 0800 	eor.w	r8, r8, r0
   12c2e:	fa5f f888 	uxtb.w	r8, r8
   12c32:	f89d 001b 	ldrb.w	r0, [sp, #27]
   12c36:	f016 fc2e 	bl	29496 <_double_byte>
   12c3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12c3e:	4058      	eors	r0, r3
   12c40:	ea88 0800 	eor.w	r8, r8, r0
   12c44:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12c48:	f89d 0018 	ldrb.w	r0, [sp, #24]
   12c4c:	f016 fc23 	bl	29496 <_double_byte>
   12c50:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12c54:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12c58:	f89d 801a 	ldrb.w	r8, [sp, #26]
   12c5c:	4050      	eors	r0, r2
   12c5e:	4043      	eors	r3, r0
   12c60:	ea88 0803 	eor.w	r8, r8, r3
   12c64:	fa5f f888 	uxtb.w	r8, r8
   12c68:	f89d 001b 	ldrb.w	r0, [sp, #27]
   12c6c:	f016 fc13 	bl	29496 <_double_byte>
   12c70:	ea88 0800 	eor.w	r8, r8, r0
   12c74:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12c78:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12c7c:	f016 fc0b 	bl	29496 <_double_byte>
   12c80:	4680      	mov	r8, r0
   12c82:	f89d 001d 	ldrb.w	r0, [sp, #29]
   12c86:	f016 fc06 	bl	29496 <_double_byte>
   12c8a:	4601      	mov	r1, r0
   12c8c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   12c90:	f89d 201e 	ldrb.w	r2, [sp, #30]
   12c94:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12c98:	4041      	eors	r1, r0
   12c9a:	ea88 0801 	eor.w	r8, r8, r1
   12c9e:	ea82 0208 	eor.w	r2, r2, r8
   12ca2:	4053      	eors	r3, r2
   12ca4:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12ca8:	f89d 801c 	ldrb.w	r8, [sp, #28]
   12cac:	f016 fbf3 	bl	29496 <_double_byte>
   12cb0:	ea88 0800 	eor.w	r8, r8, r0
   12cb4:	fa5f f888 	uxtb.w	r8, r8
   12cb8:	f89d 001e 	ldrb.w	r0, [sp, #30]
   12cbc:	f016 fbeb 	bl	29496 <_double_byte>
   12cc0:	4602      	mov	r2, r0
   12cc2:	f89d 001e 	ldrb.w	r0, [sp, #30]
   12cc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12cca:	4042      	eors	r2, r0
   12ccc:	ea88 0802 	eor.w	r8, r8, r2
   12cd0:	ea83 0308 	eor.w	r3, r3, r8
   12cd4:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12cd8:	f89d 801c 	ldrb.w	r8, [sp, #28]
   12cdc:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12ce0:	ea88 0803 	eor.w	r8, r8, r3
   12ce4:	f016 fbd7 	bl	29496 <_double_byte>
   12ce8:	ea88 0800 	eor.w	r8, r8, r0
   12cec:	fa5f f888 	uxtb.w	r8, r8
   12cf0:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12cf4:	f016 fbcf 	bl	29496 <_double_byte>
   12cf8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12cfc:	4058      	eors	r0, r3
   12cfe:	ea88 0800 	eor.w	r8, r8, r0
   12d02:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12d06:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12d0a:	f016 fbc4 	bl	29496 <_double_byte>
   12d0e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12d12:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12d16:	f89d 801e 	ldrb.w	r8, [sp, #30]
   12d1a:	4050      	eors	r0, r2
   12d1c:	4043      	eors	r3, r0
   12d1e:	ea88 0803 	eor.w	r8, r8, r3
   12d22:	fa5f f888 	uxtb.w	r8, r8
   12d26:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12d2a:	f016 fbb4 	bl	29496 <_double_byte>
   12d2e:	ea88 0800 	eor.w	r8, r8, r0
   12d32:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12d36:	2310      	movs	r3, #16
   12d38:	466a      	mov	r2, sp
   12d3a:	4619      	mov	r1, r3
   12d3c:	eb0d 0003 	add.w	r0, sp, r3
   12d40:	f016 fb98 	bl	29474 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   12d44:	3401      	adds	r4, #1
   12d46:	0123      	lsls	r3, r4, #4
   12d48:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12d4c:	58eb      	ldr	r3, [r5, r3]
   12d4e:	f89d 1010 	ldrb.w	r1, [sp, #16]
   12d52:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12d56:	f88d 1010 	strb.w	r1, [sp, #16]
   12d5a:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12d5e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12d62:	4041      	eors	r1, r0
   12d64:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12d68:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12d6c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12d70:	4041      	eors	r1, r0
   12d72:	f88d 1012 	strb.w	r1, [sp, #18]
   12d76:	b2db      	uxtb	r3, r3
   12d78:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12d7c:	404b      	eors	r3, r1
   12d7e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12d82:	6853      	ldr	r3, [r2, #4]
   12d84:	f89d 1014 	ldrb.w	r1, [sp, #20]
   12d88:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12d8c:	f88d 1014 	strb.w	r1, [sp, #20]
   12d90:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12d94:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12d98:	4041      	eors	r1, r0
   12d9a:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12d9e:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12da2:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12da6:	4041      	eors	r1, r0
   12da8:	f88d 1016 	strb.w	r1, [sp, #22]
   12dac:	b2db      	uxtb	r3, r3
   12dae:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12db2:	404b      	eors	r3, r1
   12db4:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12db8:	6893      	ldr	r3, [r2, #8]
   12dba:	f89d 1018 	ldrb.w	r1, [sp, #24]
   12dbe:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12dc2:	f88d 1018 	strb.w	r1, [sp, #24]
   12dc6:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12dca:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12dce:	4041      	eors	r1, r0
   12dd0:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12dd4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12dd8:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12ddc:	4041      	eors	r1, r0
   12dde:	f88d 101a 	strb.w	r1, [sp, #26]
   12de2:	b2db      	uxtb	r3, r3
   12de4:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12de8:	404b      	eors	r3, r1
   12dea:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12dee:	68d3      	ldr	r3, [r2, #12]
   12df0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12df4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12df8:	f88d 201c 	strb.w	r2, [sp, #28]
   12dfc:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12e00:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12e04:	404a      	eors	r2, r1
   12e06:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12e0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12e0e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   12e12:	404a      	eors	r2, r1
   12e14:	f88d 201e 	strb.w	r2, [sp, #30]
   12e18:	b2db      	uxtb	r3, r3
   12e1a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12e1e:	4053      	eors	r3, r2
   12e20:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   12e24:	2c08      	cmp	r4, #8
   12e26:	d80a      	bhi.n	12e3e <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   12e28:	2300      	movs	r3, #0
   12e2a:	2b0f      	cmp	r3, #15
   12e2c:	f63f adc0 	bhi.w	129b0 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   12e30:	a904      	add	r1, sp, #16
   12e32:	5cc8      	ldrb	r0, [r1, r3]
   12e34:	4a6e      	ldr	r2, [pc, #440]	; (12ff0 <tc_aes_encrypt+0x748>)
   12e36:	5c10      	ldrb	r0, [r2, r0]
   12e38:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12e3a:	3301      	adds	r3, #1
   12e3c:	e7f5      	b.n	12e2a <tc_aes_encrypt+0x582>
   12e3e:	2300      	movs	r3, #0
   12e40:	e005      	b.n	12e4e <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   12e42:	aa04      	add	r2, sp, #16
   12e44:	5cd1      	ldrb	r1, [r2, r3]
   12e46:	486a      	ldr	r0, [pc, #424]	; (12ff0 <tc_aes_encrypt+0x748>)
   12e48:	5c41      	ldrb	r1, [r0, r1]
   12e4a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12e4c:	3301      	adds	r3, #1
   12e4e:	2b0f      	cmp	r3, #15
   12e50:	d9f7      	bls.n	12e42 <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12e52:	f89d 3010 	ldrb.w	r3, [sp, #16]
   12e56:	f88d 3000 	strb.w	r3, [sp]
   12e5a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12e5e:	f88d 3001 	strb.w	r3, [sp, #1]
   12e62:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12e66:	f88d 3002 	strb.w	r3, [sp, #2]
   12e6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12e6e:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   12e72:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12e76:	f88d 3004 	strb.w	r3, [sp, #4]
   12e7a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12e7e:	f88d 3005 	strb.w	r3, [sp, #5]
   12e82:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12e86:	f88d 3006 	strb.w	r3, [sp, #6]
   12e8a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12e8e:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12e92:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12e96:	f88d 3008 	strb.w	r3, [sp, #8]
   12e9a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12e9e:	f88d 3009 	strb.w	r3, [sp, #9]
   12ea2:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12ea6:	f88d 300a 	strb.w	r3, [sp, #10]
   12eaa:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12eae:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12eb2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12eb6:	f88d 300c 	strb.w	r3, [sp, #12]
   12eba:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12ebe:	f88d 300d 	strb.w	r3, [sp, #13]
   12ec2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12ec6:	f88d 300e 	strb.w	r3, [sp, #14]
   12eca:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12ece:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12ed2:	2310      	movs	r3, #16
   12ed4:	466a      	mov	r2, sp
   12ed6:	4619      	mov	r1, r3
   12ed8:	eb0d 0003 	add.w	r0, sp, r3
   12edc:	f016 faca 	bl	29474 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   12ee0:	1c63      	adds	r3, r4, #1
   12ee2:	011a      	lsls	r2, r3, #4
   12ee4:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12ee8:	58b2      	ldr	r2, [r6, r2]
   12eea:	f89d 1010 	ldrb.w	r1, [sp, #16]
   12eee:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12ef2:	f88d 1010 	strb.w	r1, [sp, #16]
   12ef6:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12efa:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12efe:	4041      	eors	r1, r0
   12f00:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12f04:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12f08:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12f0c:	4041      	eors	r1, r0
   12f0e:	f88d 1012 	strb.w	r1, [sp, #18]
   12f12:	b2d2      	uxtb	r2, r2
   12f14:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12f18:	404a      	eors	r2, r1
   12f1a:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12f1e:	685a      	ldr	r2, [r3, #4]
   12f20:	f89d 1014 	ldrb.w	r1, [sp, #20]
   12f24:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12f28:	f88d 1014 	strb.w	r1, [sp, #20]
   12f2c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12f30:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12f34:	4041      	eors	r1, r0
   12f36:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12f3a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12f3e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12f42:	4041      	eors	r1, r0
   12f44:	f88d 1016 	strb.w	r1, [sp, #22]
   12f48:	b2d2      	uxtb	r2, r2
   12f4a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12f4e:	404a      	eors	r2, r1
   12f50:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12f54:	689a      	ldr	r2, [r3, #8]
   12f56:	f89d 1018 	ldrb.w	r1, [sp, #24]
   12f5a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12f5e:	f88d 1018 	strb.w	r1, [sp, #24]
   12f62:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12f66:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12f6a:	4041      	eors	r1, r0
   12f6c:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12f70:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12f74:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12f78:	4041      	eors	r1, r0
   12f7a:	f88d 101a 	strb.w	r1, [sp, #26]
   12f7e:	b2d2      	uxtb	r2, r2
   12f80:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12f84:	404a      	eors	r2, r1
   12f86:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12f8a:	68db      	ldr	r3, [r3, #12]
   12f8c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12f90:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12f94:	f88d 201c 	strb.w	r2, [sp, #28]
   12f98:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12f9c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12fa0:	404a      	eors	r2, r1
   12fa2:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12fa6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12faa:	f89d 101e 	ldrb.w	r1, [sp, #30]
   12fae:	404a      	eors	r2, r1
   12fb0:	f88d 201e 	strb.w	r2, [sp, #30]
   12fb4:	b2db      	uxtb	r3, r3
   12fb6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12fba:	4053      	eors	r3, r2
   12fbc:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   12fc0:	2310      	movs	r3, #16
   12fc2:	eb0d 0203 	add.w	r2, sp, r3
   12fc6:	4619      	mov	r1, r3
   12fc8:	4638      	mov	r0, r7
   12fca:	f016 fa53 	bl	29474 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   12fce:	2210      	movs	r2, #16
   12fd0:	2100      	movs	r1, #0
   12fd2:	eb0d 0002 	add.w	r0, sp, r2
   12fd6:	f016 fa5a 	bl	2948e <_set>

	return TC_CRYPTO_SUCCESS;
   12fda:	2001      	movs	r0, #1
}
   12fdc:	b008      	add	sp, #32
   12fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   12fe2:	2000      	movs	r0, #0
}
   12fe4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12fe6:	2000      	movs	r0, #0
   12fe8:	e7f8      	b.n	12fdc <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   12fea:	2000      	movs	r0, #0
   12fec:	e7f6      	b.n	12fdc <tc_aes_encrypt+0x734>
   12fee:	bf00      	nop
   12ff0:	0002fe00 	.word	0x0002fe00

00012ff4 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   12ff4:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   12ff6:	4802      	ldr	r0, [pc, #8]	; (13000 <nrf_cc3xx_platform_abort_init+0xc>)
   12ff8:	f012 fd16 	bl	25a28 <nrf_cc3xx_platform_set_abort>
}
   12ffc:	bd08      	pop	{r3, pc}
   12ffe:	bf00      	nop
   13000:	0002ff00 	.word	0x0002ff00

00013004 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13004:	b1d0      	cbz	r0, 1303c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13006:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13008:	6842      	ldr	r2, [r0, #4]
   1300a:	2a04      	cmp	r2, #4
   1300c:	d005      	beq.n	1301a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1300e:	b1d2      	cbz	r2, 13046 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   13010:	6800      	ldr	r0, [r0, #0]
   13012:	f00f fa35 	bl	22480 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   13016:	2000      	movs	r0, #0
    }
}
   13018:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   1301a:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1301c:	2200      	movs	r2, #0
   1301e:	f3bf 8f5b 	dmb	ish
   13022:	e853 1f00 	ldrex	r1, [r3]
   13026:	2901      	cmp	r1, #1
   13028:	d103      	bne.n	13032 <mutex_unlock_platform+0x2e>
   1302a:	e843 2000 	strex	r0, r2, [r3]
   1302e:	2800      	cmp	r0, #0
   13030:	d1f7      	bne.n	13022 <mutex_unlock_platform+0x1e>
   13032:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13036:	d104      	bne.n	13042 <mutex_unlock_platform+0x3e>
   13038:	4610      	mov	r0, r2
   1303a:	e7ed      	b.n	13018 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1303c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   13040:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13042:	4802      	ldr	r0, [pc, #8]	; (1304c <mutex_unlock_platform+0x48>)
   13044:	e7e8      	b.n	13018 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13046:	4802      	ldr	r0, [pc, #8]	; (13050 <mutex_unlock_platform+0x4c>)
   13048:	e7e6      	b.n	13018 <mutex_unlock_platform+0x14>
   1304a:	bf00      	nop
   1304c:	ffff8fe9 	.word	0xffff8fe9
   13050:	ffff8fea 	.word	0xffff8fea

00013054 <mutex_lock_platform>:
    if(mutex == NULL) {
   13054:	b320      	cbz	r0, 130a0 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13056:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   13058:	6842      	ldr	r2, [r0, #4]
   1305a:	2a04      	cmp	r2, #4
   1305c:	d002      	beq.n	13064 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1305e:	b992      	cbnz	r2, 13086 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13060:	4811      	ldr	r0, [pc, #68]	; (130a8 <mutex_lock_platform+0x54>)
   13062:	e00f      	b.n	13084 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   13064:	6803      	ldr	r3, [r0, #0]
   13066:	2201      	movs	r2, #1
   13068:	f3bf 8f5b 	dmb	ish
   1306c:	e853 1f00 	ldrex	r1, [r3]
   13070:	2900      	cmp	r1, #0
   13072:	d103      	bne.n	1307c <mutex_lock_platform+0x28>
   13074:	e843 2000 	strex	r0, r2, [r3]
   13078:	2800      	cmp	r0, #0
   1307a:	d1f7      	bne.n	1306c <mutex_lock_platform+0x18>
   1307c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13080:	d10c      	bne.n	1309c <mutex_lock_platform+0x48>
   13082:	2000      	movs	r0, #0
}
   13084:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   13086:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13088:	f04f 32ff 	mov.w	r2, #4294967295
   1308c:	f04f 33ff 	mov.w	r3, #4294967295
   13090:	f00f f900 	bl	22294 <z_impl_k_mutex_lock>
        if (ret == 0) {
   13094:	2800      	cmp	r0, #0
   13096:	d0f5      	beq.n	13084 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   13098:	4804      	ldr	r0, [pc, #16]	; (130ac <mutex_lock_platform+0x58>)
   1309a:	e7f3      	b.n	13084 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1309c:	4803      	ldr	r0, [pc, #12]	; (130ac <mutex_lock_platform+0x58>)
   1309e:	e7f1      	b.n	13084 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   130a0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   130a4:	4770      	bx	lr
   130a6:	bf00      	nop
   130a8:	ffff8fea 	.word	0xffff8fea
   130ac:	ffff8fe9 	.word	0xffff8fe9

000130b0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   130b0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   130b2:	4604      	mov	r4, r0
   130b4:	b188      	cbz	r0, 130da <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   130b6:	6863      	ldr	r3, [r4, #4]
   130b8:	2b04      	cmp	r3, #4
   130ba:	d00d      	beq.n	130d8 <mutex_free_platform+0x28>
   130bc:	2b08      	cmp	r3, #8
   130be:	d00b      	beq.n	130d8 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   130c0:	b153      	cbz	r3, 130d8 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   130c2:	f013 0f02 	tst.w	r3, #2
   130c6:	d00d      	beq.n	130e4 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   130c8:	4621      	mov	r1, r4
   130ca:	4809      	ldr	r0, [pc, #36]	; (130f0 <mutex_free_platform+0x40>)
   130cc:	f00e fe6a 	bl	21da4 <k_mem_slab_free>
        mutex->mutex = NULL;
   130d0:	2300      	movs	r3, #0
   130d2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   130d4:	2300      	movs	r3, #0
   130d6:	6063      	str	r3, [r4, #4]
}
   130d8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   130da:	4b06      	ldr	r3, [pc, #24]	; (130f4 <mutex_free_platform+0x44>)
   130dc:	685b      	ldr	r3, [r3, #4]
   130de:	4806      	ldr	r0, [pc, #24]	; (130f8 <mutex_free_platform+0x48>)
   130e0:	4798      	blx	r3
   130e2:	e7e8      	b.n	130b6 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   130e4:	2214      	movs	r2, #20
   130e6:	2100      	movs	r1, #0
   130e8:	6820      	ldr	r0, [r4, #0]
   130ea:	f017 fbfc 	bl	2a8e6 <memset>
   130ee:	e7f1      	b.n	130d4 <mutex_free_platform+0x24>
   130f0:	20002118 	.word	0x20002118
   130f4:	200006c4 	.word	0x200006c4
   130f8:	0002ff08 	.word	0x0002ff08

000130fc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   130fc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   130fe:	4604      	mov	r4, r0
   13100:	b178      	cbz	r0, 13122 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13102:	6863      	ldr	r3, [r4, #4]
   13104:	2b04      	cmp	r3, #4
   13106:	d00b      	beq.n	13120 <mutex_init_platform+0x24>
   13108:	2b08      	cmp	r3, #8
   1310a:	d009      	beq.n	13120 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1310c:	b90b      	cbnz	r3, 13112 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   1310e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   13110:	b163      	cbz	r3, 1312c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   13112:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   13114:	f01b fd9b 	bl	2ec4e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   13118:	6863      	ldr	r3, [r4, #4]
   1311a:	f043 0301 	orr.w	r3, r3, #1
   1311e:	6063      	str	r3, [r4, #4]
}
   13120:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   13122:	4b0f      	ldr	r3, [pc, #60]	; (13160 <mutex_init_platform+0x64>)
   13124:	685b      	ldr	r3, [r3, #4]
   13126:	480f      	ldr	r0, [pc, #60]	; (13164 <mutex_init_platform+0x68>)
   13128:	4798      	blx	r3
   1312a:	e7ea      	b.n	13102 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   1312c:	f04f 32ff 	mov.w	r2, #4294967295
   13130:	f04f 33ff 	mov.w	r3, #4294967295
   13134:	4621      	mov	r1, r4
   13136:	480c      	ldr	r0, [pc, #48]	; (13168 <mutex_init_platform+0x6c>)
   13138:	f00e fdd2 	bl	21ce0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1313c:	b908      	cbnz	r0, 13142 <mutex_init_platform+0x46>
   1313e:	6823      	ldr	r3, [r4, #0]
   13140:	b91b      	cbnz	r3, 1314a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   13142:	4b07      	ldr	r3, [pc, #28]	; (13160 <mutex_init_platform+0x64>)
   13144:	685b      	ldr	r3, [r3, #4]
   13146:	4809      	ldr	r0, [pc, #36]	; (1316c <mutex_init_platform+0x70>)
   13148:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1314a:	2214      	movs	r2, #20
   1314c:	2100      	movs	r1, #0
   1314e:	6820      	ldr	r0, [r4, #0]
   13150:	f017 fbc9 	bl	2a8e6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   13154:	6863      	ldr	r3, [r4, #4]
   13156:	f043 0302 	orr.w	r3, r3, #2
   1315a:	6063      	str	r3, [r4, #4]
   1315c:	e7d9      	b.n	13112 <mutex_init_platform+0x16>
   1315e:	bf00      	nop
   13160:	200006c4 	.word	0x200006c4
   13164:	0002ff08 	.word	0x0002ff08
   13168:	20002118 	.word	0x20002118
   1316c:	0002ff30 	.word	0x0002ff30

00013170 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13170:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   13172:	2340      	movs	r3, #64	; 0x40
   13174:	2214      	movs	r2, #20
   13176:	4904      	ldr	r1, [pc, #16]	; (13188 <nrf_cc3xx_platform_mutex_init+0x18>)
   13178:	4804      	ldr	r0, [pc, #16]	; (1318c <nrf_cc3xx_platform_mutex_init+0x1c>)
   1317a:	f01b fd14 	bl	2eba6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1317e:	4904      	ldr	r1, [pc, #16]	; (13190 <nrf_cc3xx_platform_mutex_init+0x20>)
   13180:	4804      	ldr	r0, [pc, #16]	; (13194 <nrf_cc3xx_platform_mutex_init+0x24>)
   13182:	f012 fd09 	bl	25b98 <nrf_cc3xx_platform_set_mutexes>
}
   13186:	bd08      	pop	{r3, pc}
   13188:	20002138 	.word	0x20002138
   1318c:	20002118 	.word	0x20002118
   13190:	0002ff70 	.word	0x0002ff70
   13194:	0002ff60 	.word	0x0002ff60

00013198 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13198:	4901      	ldr	r1, [pc, #4]	; (131a0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1319a:	2210      	movs	r2, #16
	str	r2, [r1]
   1319c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1319e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   131a0:	e000ed10 	.word	0xe000ed10

000131a4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   131a4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   131a6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   131a8:	f380 8811 	msr	BASEPRI, r0
	isb
   131ac:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   131b0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   131b4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   131b6:	b662      	cpsie	i
	isb
   131b8:	f3bf 8f6f 	isb	sy

	bx	lr
   131bc:	4770      	bx	lr
   131be:	bf00      	nop

000131c0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   131c0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   131c2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   131c4:	f381 8811 	msr	BASEPRI, r1

	wfe
   131c8:	bf20      	wfe

	msr	BASEPRI, r0
   131ca:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   131ce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   131d0:	4770      	bx	lr
   131d2:	bf00      	nop

000131d4 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   131d4:	b510      	push	{r4, lr}
   131d6:	b082      	sub	sp, #8
   131d8:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   131da:	6883      	ldr	r3, [r0, #8]
   131dc:	9300      	str	r3, [sp, #0]
   131de:	6843      	ldr	r3, [r0, #4]
   131e0:	6802      	ldr	r2, [r0, #0]
   131e2:	2145      	movs	r1, #69	; 0x45
   131e4:	480b      	ldr	r0, [pc, #44]	; (13214 <esf_dump+0x40>)
   131e6:	f015 fc4d 	bl	28a84 <z_log_minimal_printk>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   131ea:	6963      	ldr	r3, [r4, #20]
   131ec:	9300      	str	r3, [sp, #0]
   131ee:	6923      	ldr	r3, [r4, #16]
   131f0:	68e2      	ldr	r2, [r4, #12]
   131f2:	2145      	movs	r1, #69	; 0x45
   131f4:	4808      	ldr	r0, [pc, #32]	; (13218 <esf_dump+0x44>)
   131f6:	f015 fc45 	bl	28a84 <z_log_minimal_printk>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   131fa:	69e2      	ldr	r2, [r4, #28]
   131fc:	2145      	movs	r1, #69	; 0x45
   131fe:	4807      	ldr	r0, [pc, #28]	; (1321c <esf_dump+0x48>)
   13200:	f015 fc40 	bl	28a84 <z_log_minimal_printk>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13204:	69a2      	ldr	r2, [r4, #24]
   13206:	2145      	movs	r1, #69	; 0x45
   13208:	4805      	ldr	r0, [pc, #20]	; (13220 <esf_dump+0x4c>)
   1320a:	f015 fc3b 	bl	28a84 <z_log_minimal_printk>
		esf->basic.pc);
}
   1320e:	b002      	add	sp, #8
   13210:	bd10      	pop	{r4, pc}
   13212:	bf00      	nop
   13214:	0002ff84 	.word	0x0002ff84
   13218:	0002ffb8 	.word	0x0002ffb8
   1321c:	0002ffec 	.word	0x0002ffec
   13220:	00030000 	.word	0x00030000

00013224 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13224:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13226:	2b00      	cmp	r3, #0
   13228:	db08      	blt.n	1323c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1322a:	f000 001f 	and.w	r0, r0, #31
   1322e:	095b      	lsrs	r3, r3, #5
   13230:	2201      	movs	r2, #1
   13232:	fa02 f000 	lsl.w	r0, r2, r0
   13236:	4a02      	ldr	r2, [pc, #8]	; (13240 <arch_irq_enable+0x1c>)
   13238:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1323c:	4770      	bx	lr
   1323e:	bf00      	nop
   13240:	e000e100 	.word	0xe000e100

00013244 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13244:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13246:	2b00      	cmp	r3, #0
   13248:	db0d      	blt.n	13266 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1324a:	f000 001f 	and.w	r0, r0, #31
   1324e:	095b      	lsrs	r3, r3, #5
   13250:	2201      	movs	r2, #1
   13252:	fa02 f000 	lsl.w	r0, r2, r0
   13256:	3320      	adds	r3, #32
   13258:	4a03      	ldr	r2, [pc, #12]	; (13268 <arch_irq_disable+0x24>)
   1325a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1325e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13262:	f3bf 8f6f 	isb	sy
}
   13266:	4770      	bx	lr
   13268:	e000e100 	.word	0xe000e100

0001326c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1326c:	0942      	lsrs	r2, r0, #5
   1326e:	4b05      	ldr	r3, [pc, #20]	; (13284 <arch_irq_is_enabled+0x18>)
   13270:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13274:	f000 001f 	and.w	r0, r0, #31
   13278:	2301      	movs	r3, #1
   1327a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1327e:	4010      	ands	r0, r2
   13280:	4770      	bx	lr
   13282:	bf00      	nop
   13284:	e000e100 	.word	0xe000e100

00013288 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   13288:	b570      	push	{r4, r5, r6, lr}
   1328a:	4605      	mov	r5, r0
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1328c:	f012 0f01 	tst.w	r2, #1
   13290:	d10d      	bne.n	132ae <z_arm_irq_priority_set+0x26>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13292:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   13294:	2c07      	cmp	r4, #7
   13296:	d90b      	bls.n	132b0 <z_arm_irq_priority_set+0x28>
   13298:	4e0f      	ldr	r6, [pc, #60]	; (132d8 <z_arm_irq_priority_set+0x50>)
   1329a:	2258      	movs	r2, #88	; 0x58
   1329c:	4631      	mov	r1, r6
   1329e:	480f      	ldr	r0, [pc, #60]	; (132dc <z_arm_irq_priority_set+0x54>)
   132a0:	f015 f84f 	bl	28342 <printk>
   132a4:	2158      	movs	r1, #88	; 0x58
   132a6:	4630      	mov	r0, r6
   132a8:	f015 fbe4 	bl	28a74 <assert_post_action>
   132ac:	e000      	b.n	132b0 <z_arm_irq_priority_set+0x28>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   132ae:	2400      	movs	r4, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   132b0:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   132b2:	2b00      	cmp	r3, #0
   132b4:	db08      	blt.n	132c8 <z_arm_irq_priority_set+0x40>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   132b6:	0164      	lsls	r4, r4, #5
   132b8:	b2e4      	uxtb	r4, r4
   132ba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   132be:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   132c2:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
   132c6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   132c8:	f005 050f 	and.w	r5, r5, #15
   132cc:	0164      	lsls	r4, r4, #5
   132ce:	b2e4      	uxtb	r4, r4
   132d0:	4b03      	ldr	r3, [pc, #12]	; (132e0 <z_arm_irq_priority_set+0x58>)
   132d2:	555c      	strb	r4, [r3, r5]
   132d4:	e7f7      	b.n	132c6 <z_arm_irq_priority_set+0x3e>
   132d6:	bf00      	nop
   132d8:	00030034 	.word	0x00030034
   132dc:	0002f968 	.word	0x0002f968
   132e0:	e000ed14 	.word	0xe000ed14

000132e4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   132e4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   132e6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   132e8:	4b04      	ldr	r3, [pc, #16]	; (132fc <_arch_isr_direct_pm+0x18>)
   132ea:	6998      	ldr	r0, [r3, #24]
   132ec:	b908      	cbnz	r0, 132f2 <_arch_isr_direct_pm+0xe>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   132ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   132f0:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   132f2:	2200      	movs	r2, #0
   132f4:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   132f6:	f01b fc8e 	bl	2ec16 <z_pm_save_idle_exit>
   132fa:	e7f8      	b.n	132ee <_arch_isr_direct_pm+0xa>
   132fc:	2000360c 	.word	0x2000360c

00013300 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13300:	bf30      	wfi
    b z_SysNmiOnReset
   13302:	f7ff bffd 	b.w	13300 <z_SysNmiOnReset>
   13306:	bf00      	nop

00013308 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13308:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1330a:	4b0b      	ldr	r3, [pc, #44]	; (13338 <z_arm_prep_c+0x30>)
   1330c:	4a0b      	ldr	r2, [pc, #44]	; (1333c <z_arm_prep_c+0x34>)
   1330e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13312:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13318:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1331c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13320:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13328:	f00e fb62 	bl	219f0 <z_bss_zero>
	z_data_copy();
   1332c:	f011 fa22 	bl	24774 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13330:	f000 fb76 	bl	13a20 <z_arm_interrupt_init>
	z_cstart();
   13334:	f00e fb68 	bl	21a08 <z_cstart>
   13338:	e000ed00 	.word	0xe000ed00
   1333c:	00000000 	.word	0x00000000

00013340 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13340:	4a0a      	ldr	r2, [pc, #40]	; (1336c <arch_swap+0x2c>)
   13342:	6893      	ldr	r3, [r2, #8]
   13344:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   13348:	4909      	ldr	r1, [pc, #36]	; (13370 <arch_swap+0x30>)
   1334a:	6809      	ldr	r1, [r1, #0]
   1334c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13350:	4908      	ldr	r1, [pc, #32]	; (13374 <arch_swap+0x34>)
   13352:	684b      	ldr	r3, [r1, #4]
   13354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13358:	604b      	str	r3, [r1, #4]
   1335a:	2300      	movs	r3, #0
   1335c:	f383 8811 	msr	BASEPRI, r3
   13360:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13364:	6893      	ldr	r3, [r2, #8]
}
   13366:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   1336a:	4770      	bx	lr
   1336c:	2000360c 	.word	0x2000360c
   13370:	000330c8 	.word	0x000330c8
   13374:	e000ed00 	.word	0xe000ed00

00013378 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13378:	4913      	ldr	r1, [pc, #76]	; (133c8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1337a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1337c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13380:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13382:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13386:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1338a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1338c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13390:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13394:	4f0d      	ldr	r7, [pc, #52]	; (133cc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13396:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1339a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1339c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1339e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   133a0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   133a4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   133a6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   133aa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   133ae:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   133b0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   133b2:	f000 fbd7 	bl	13b64 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   133b6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   133ba:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   133be:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   133c2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   133c6:	4770      	bx	lr
    ldr r1, =_kernel
   133c8:	2000360c 	.word	0x2000360c
    ldr v4, =_SCS_ICSR
   133cc:	e000ed04 	.word	0xe000ed04

000133d0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   133d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   133d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   133d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   133da:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   133de:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   133e0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   133e4:	2902      	cmp	r1, #2
    beq _oops
   133e6:	d0ff      	beq.n	133e8 <_oops>

000133e8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   133e8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   133ea:	f017 f8e7 	bl	2a5bc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   133ee:	bd01      	pop	{r0, pc}

000133f0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   133f0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   133f2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   133f6:	490d      	ldr	r1, [pc, #52]	; (1342c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   133f8:	f021 0101 	bic.w	r1, r1, #1
   133fc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   13400:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13404:	9b01      	ldr	r3, [sp, #4]
   13406:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1340a:	9b02      	ldr	r3, [sp, #8]
   1340c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13410:	9b03      	ldr	r3, [sp, #12]
   13412:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1341a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   1341e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13420:	2300      	movs	r3, #0
   13422:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13426:	bc10      	pop	{r4}
   13428:	4770      	bx	lr
   1342a:	bf00      	nop
   1342c:	000284b3 	.word	0x000284b3

00013430 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13430:	4b16      	ldr	r3, [pc, #88]	; (1348c <z_check_thread_stack_fail+0x5c>)
   13432:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   13434:	b1da      	cbz	r2, 1346e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13436:	f110 0f16 	cmn.w	r0, #22
   1343a:	d01a      	beq.n	13472 <z_check_thread_stack_fail+0x42>
{
   1343c:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1343e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13442:	f1a3 0420 	sub.w	r4, r3, #32
   13446:	4284      	cmp	r4, r0
   13448:	d805      	bhi.n	13456 <z_check_thread_stack_fail+0x26>
   1344a:	4283      	cmp	r3, r0
   1344c:	d908      	bls.n	13460 <z_check_thread_stack_fail+0x30>
   1344e:	428b      	cmp	r3, r1
   13450:	d808      	bhi.n	13464 <z_check_thread_stack_fail+0x34>
   13452:	2100      	movs	r1, #0
   13454:	e000      	b.n	13458 <z_check_thread_stack_fail+0x28>
   13456:	2100      	movs	r1, #0
   13458:	b931      	cbnz	r1, 13468 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1345a:	2000      	movs	r0, #0
}
   1345c:	bc10      	pop	{r4}
   1345e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13460:	2100      	movs	r1, #0
   13462:	e7f9      	b.n	13458 <z_check_thread_stack_fail+0x28>
   13464:	2101      	movs	r1, #1
   13466:	e7f7      	b.n	13458 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   13468:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1346c:	e7f6      	b.n	1345c <z_check_thread_stack_fail+0x2c>
		return 0;
   1346e:	2000      	movs	r0, #0
   13470:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13472:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13476:	428b      	cmp	r3, r1
   13478:	bf94      	ite	ls
   1347a:	2100      	movls	r1, #0
   1347c:	2101      	movhi	r1, #1
   1347e:	b909      	cbnz	r1, 13484 <z_check_thread_stack_fail+0x54>
	return 0;
   13480:	2000      	movs	r0, #0
}
   13482:	4770      	bx	lr
		return thread->stack_info.start;
   13484:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   13488:	4770      	bx	lr
   1348a:	bf00      	nop
   1348c:	2000360c 	.word	0x2000360c

00013490 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13490:	b508      	push	{r3, lr}
   13492:	460d      	mov	r5, r1
   13494:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13496:	4b08      	ldr	r3, [pc, #32]	; (134b8 <arch_switch_to_main_thread+0x28>)
   13498:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1349a:	f000 fb63 	bl	13b64 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1349e:	4620      	mov	r0, r4
   134a0:	f385 8809 	msr	PSP, r5
   134a4:	2100      	movs	r1, #0
   134a6:	b663      	cpsie	if
   134a8:	f381 8811 	msr	BASEPRI, r1
   134ac:	f3bf 8f6f 	isb	sy
   134b0:	2200      	movs	r2, #0
   134b2:	2300      	movs	r3, #0
   134b4:	f014 fffd 	bl	284b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   134b8:	2000360c 	.word	0x2000360c

000134bc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   134bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   134be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   134c0:	4a0b      	ldr	r2, [pc, #44]	; (134f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   134c2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   134c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   134c6:	bf1e      	ittt	ne
	movne	r1, #0
   134c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   134ca:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   134cc:	f01b fba3 	blne	2ec16 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   134d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   134d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   134d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   134da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   134de:	4905      	ldr	r1, [pc, #20]	; (134f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   134e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   134e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   134e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   134e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   134ea:	4903      	ldr	r1, [pc, #12]	; (134f8 <_isr_wrapper+0x3c>)
	bx r1
   134ec:	4708      	bx	r1
   134ee:	0000      	.short	0x0000
	ldr r2, =_kernel
   134f0:	2000360c 	.word	0x2000360c
	ldr r1, =_sw_isr_table
   134f4:	0002f120 	.word	0x0002f120
	ldr r1, =z_arm_int_exit
   134f8:	000134fd 	.word	0x000134fd

000134fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   134fc:	4b04      	ldr	r3, [pc, #16]	; (13510 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   134fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13500:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13502:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13504:	d003      	beq.n	1350e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13506:	4903      	ldr	r1, [pc, #12]	; (13514 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1350c:	600a      	str	r2, [r1, #0]

0001350e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1350e:	4770      	bx	lr
	ldr r3, =_kernel
   13510:	2000360c 	.word	0x2000360c
	ldr r1, =_SCS_ICSR
   13514:	e000ed04 	.word	0xe000ed04

00013518 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   13518:	b570      	push	{r4, r5, r6, lr}
   1351a:	4605      	mov	r5, r0
   1351c:	460e      	mov	r6, r1
   1351e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   13520:	2145      	movs	r1, #69	; 0x45
   13522:	482e      	ldr	r0, [pc, #184]	; (135dc <bus_fault+0xc4>)
   13524:	f015 faae 	bl	28a84 <z_log_minimal_printk>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13528:	4b2d      	ldr	r3, [pc, #180]	; (135e0 <bus_fault+0xc8>)
   1352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1352c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   13530:	d124      	bne.n	1357c <bus_fault+0x64>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13532:	4b2b      	ldr	r3, [pc, #172]	; (135e0 <bus_fault+0xc8>)
   13534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13536:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1353a:	d124      	bne.n	13586 <bus_fault+0x6e>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1353c:	4b28      	ldr	r3, [pc, #160]	; (135e0 <bus_fault+0xc8>)
   1353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13540:	f413 7f00 	tst.w	r3, #512	; 0x200
   13544:	d124      	bne.n	13590 <bus_fault+0x78>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13546:	4b26      	ldr	r3, [pc, #152]	; (135e0 <bus_fault+0xc8>)
   13548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1354a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1354e:	d135      	bne.n	135bc <bus_fault+0xa4>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13550:	4b23      	ldr	r3, [pc, #140]	; (135e0 <bus_fault+0xc8>)
   13552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13554:	f413 7f80 	tst.w	r3, #256	; 0x100
   13558:	d135      	bne.n	135c6 <bus_fault+0xae>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1355a:	4b21      	ldr	r3, [pc, #132]	; (135e0 <bus_fault+0xc8>)
   1355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1355e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   13562:	d135      	bne.n	135d0 <bus_fault+0xb8>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13564:	4a1e      	ldr	r2, [pc, #120]	; (135e0 <bus_fault+0xc8>)
   13566:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13568:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1356c:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   1356e:	2101      	movs	r1, #1
   13570:	4628      	mov	r0, r5
   13572:	f017 f835 	bl	2a5e0 <memory_fault_recoverable>
   13576:	7020      	strb	r0, [r4, #0]

	return reason;
}
   13578:	2000      	movs	r0, #0
   1357a:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
   1357c:	2145      	movs	r1, #69	; 0x45
   1357e:	4819      	ldr	r0, [pc, #100]	; (135e4 <bus_fault+0xcc>)
   13580:	f015 fa80 	bl	28a84 <z_log_minimal_printk>
   13584:	e7d5      	b.n	13532 <bus_fault+0x1a>
		PR_FAULT_INFO("  Unstacking error");
   13586:	2145      	movs	r1, #69	; 0x45
   13588:	4817      	ldr	r0, [pc, #92]	; (135e8 <bus_fault+0xd0>)
   1358a:	f015 fa7b 	bl	28a84 <z_log_minimal_printk>
   1358e:	e7d5      	b.n	1353c <bus_fault+0x24>
		PR_FAULT_INFO("  Precise data bus error");
   13590:	2145      	movs	r1, #69	; 0x45
   13592:	4816      	ldr	r0, [pc, #88]	; (135ec <bus_fault+0xd4>)
   13594:	f015 fa76 	bl	28a84 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   13598:	4b11      	ldr	r3, [pc, #68]	; (135e0 <bus_fault+0xc8>)
   1359a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1359e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   135a2:	d0d0      	beq.n	13546 <bus_fault+0x2e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   135a4:	2145      	movs	r1, #69	; 0x45
   135a6:	4812      	ldr	r0, [pc, #72]	; (135f0 <bus_fault+0xd8>)
   135a8:	f015 fa6c 	bl	28a84 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   135ac:	2e00      	cmp	r6, #0
   135ae:	d0ca      	beq.n	13546 <bus_fault+0x2e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   135b0:	4a0b      	ldr	r2, [pc, #44]	; (135e0 <bus_fault+0xc8>)
   135b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   135b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   135b8:	6293      	str	r3, [r2, #40]	; 0x28
   135ba:	e7c4      	b.n	13546 <bus_fault+0x2e>
		PR_FAULT_INFO("  Imprecise data bus error");
   135bc:	2145      	movs	r1, #69	; 0x45
   135be:	480d      	ldr	r0, [pc, #52]	; (135f4 <bus_fault+0xdc>)
   135c0:	f015 fa60 	bl	28a84 <z_log_minimal_printk>
   135c4:	e7c4      	b.n	13550 <bus_fault+0x38>
		PR_FAULT_INFO("  Instruction bus error");
   135c6:	2145      	movs	r1, #69	; 0x45
   135c8:	480b      	ldr	r0, [pc, #44]	; (135f8 <bus_fault+0xe0>)
   135ca:	f015 fa5b 	bl	28a84 <z_log_minimal_printk>
   135ce:	e7c9      	b.n	13564 <bus_fault+0x4c>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   135d0:	2145      	movs	r1, #69	; 0x45
   135d2:	480a      	ldr	r0, [pc, #40]	; (135fc <bus_fault+0xe4>)
   135d4:	f015 fa56 	bl	28a84 <z_log_minimal_printk>
   135d8:	e7c4      	b.n	13564 <bus_fault+0x4c>
   135da:	bf00      	nop
   135dc:	0003006c 	.word	0x0003006c
   135e0:	e000ed00 	.word	0xe000ed00
   135e4:	00030088 	.word	0x00030088
   135e8:	000300a0 	.word	0x000300a0
   135ec:	000300b8 	.word	0x000300b8
   135f0:	000300d8 	.word	0x000300d8
   135f4:	000300f4 	.word	0x000300f4
   135f8:	00030114 	.word	0x00030114
   135fc:	00030134 	.word	0x00030134

00013600 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   13600:	b508      	push	{r3, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   13602:	2145      	movs	r1, #69	; 0x45
   13604:	4823      	ldr	r0, [pc, #140]	; (13694 <usage_fault+0x94>)
   13606:	f015 fa3d 	bl	28a84 <z_log_minimal_printk>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1360a:	4b23      	ldr	r3, [pc, #140]	; (13698 <usage_fault+0x98>)
   1360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1360e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   13612:	d121      	bne.n	13658 <usage_fault+0x58>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13614:	4b20      	ldr	r3, [pc, #128]	; (13698 <usage_fault+0x98>)
   13616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13618:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   1361c:	d121      	bne.n	13662 <usage_fault+0x62>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1361e:	4b1e      	ldr	r3, [pc, #120]	; (13698 <usage_fault+0x98>)
   13620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13622:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   13626:	d121      	bne.n	1366c <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13628:	4b1b      	ldr	r3, [pc, #108]	; (13698 <usage_fault+0x98>)
   1362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1362c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   13630:	d121      	bne.n	13676 <usage_fault+0x76>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13632:	4b19      	ldr	r3, [pc, #100]	; (13698 <usage_fault+0x98>)
   13634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13636:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1363a:	d121      	bne.n	13680 <usage_fault+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1363c:	4b16      	ldr	r3, [pc, #88]	; (13698 <usage_fault+0x98>)
   1363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13640:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13644:	d121      	bne.n	1368a <usage_fault+0x8a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13646:	4a14      	ldr	r2, [pc, #80]	; (13698 <usage_fault+0x98>)
   13648:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1364a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1364e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13652:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13654:	2000      	movs	r0, #0
   13656:	bd08      	pop	{r3, pc}
		PR_FAULT_INFO("  Division by zero");
   13658:	2145      	movs	r1, #69	; 0x45
   1365a:	4810      	ldr	r0, [pc, #64]	; (1369c <usage_fault+0x9c>)
   1365c:	f015 fa12 	bl	28a84 <z_log_minimal_printk>
   13660:	e7d8      	b.n	13614 <usage_fault+0x14>
		PR_FAULT_INFO("  Unaligned memory access");
   13662:	2145      	movs	r1, #69	; 0x45
   13664:	480e      	ldr	r0, [pc, #56]	; (136a0 <usage_fault+0xa0>)
   13666:	f015 fa0d 	bl	28a84 <z_log_minimal_printk>
   1366a:	e7d8      	b.n	1361e <usage_fault+0x1e>
		PR_FAULT_INFO("  No coprocessor instructions");
   1366c:	2145      	movs	r1, #69	; 0x45
   1366e:	480d      	ldr	r0, [pc, #52]	; (136a4 <usage_fault+0xa4>)
   13670:	f015 fa08 	bl	28a84 <z_log_minimal_printk>
   13674:	e7d8      	b.n	13628 <usage_fault+0x28>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13676:	2145      	movs	r1, #69	; 0x45
   13678:	480b      	ldr	r0, [pc, #44]	; (136a8 <usage_fault+0xa8>)
   1367a:	f015 fa03 	bl	28a84 <z_log_minimal_printk>
   1367e:	e7d8      	b.n	13632 <usage_fault+0x32>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13680:	2145      	movs	r1, #69	; 0x45
   13682:	480a      	ldr	r0, [pc, #40]	; (136ac <usage_fault+0xac>)
   13684:	f015 f9fe 	bl	28a84 <z_log_minimal_printk>
   13688:	e7d8      	b.n	1363c <usage_fault+0x3c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1368a:	2145      	movs	r1, #69	; 0x45
   1368c:	4808      	ldr	r0, [pc, #32]	; (136b0 <usage_fault+0xb0>)
   1368e:	f015 f9f9 	bl	28a84 <z_log_minimal_printk>
   13692:	e7d8      	b.n	13646 <usage_fault+0x46>
   13694:	00030168 	.word	0x00030168
   13698:	e000ed00 	.word	0xe000ed00
   1369c:	00030188 	.word	0x00030188
   136a0:	000301a0 	.word	0x000301a0
   136a4:	000301c0 	.word	0x000301c0
   136a8:	000301e4 	.word	0x000301e4
   136ac:	00030210 	.word	0x00030210
   136b0:	00030230 	.word	0x00030230

000136b4 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   136b4:	b508      	push	{r3, lr}
	*recoverable = false;
   136b6:	2300      	movs	r3, #0
   136b8:	700b      	strb	r3, [r1, #0]

	PR_FAULT_INFO(
   136ba:	2145      	movs	r1, #69	; 0x45
   136bc:	4801      	ldr	r0, [pc, #4]	; (136c4 <debug_monitor+0x10>)
   136be:	f015 f9e1 	bl	28a84 <z_log_minimal_printk>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   136c2:	bd08      	pop	{r3, pc}
   136c4:	00030260 	.word	0x00030260

000136c8 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   136c8:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   136ca:	290f      	cmp	r1, #15
   136cc:	dc07      	bgt.n	136de <reserved_exception+0x16>
   136ce:	4a05      	ldr	r2, [pc, #20]	; (136e4 <reserved_exception+0x1c>)
   136d0:	f1a1 0310 	sub.w	r3, r1, #16
   136d4:	2145      	movs	r1, #69	; 0x45
   136d6:	4804      	ldr	r0, [pc, #16]	; (136e8 <reserved_exception+0x20>)
   136d8:	f015 f9d4 	bl	28a84 <z_log_minimal_printk>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   136dc:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   136de:	4a03      	ldr	r2, [pc, #12]	; (136ec <reserved_exception+0x24>)
   136e0:	e7f6      	b.n	136d0 <reserved_exception+0x8>
   136e2:	bf00      	nop
   136e4:	000302a8 	.word	0x000302a8
   136e8:	000302c0 	.word	0x000302c0
   136ec:	0003028c 	.word	0x0003028c

000136f0 <mem_manage_fault>:
{
   136f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136f2:	4605      	mov	r5, r0
   136f4:	460c      	mov	r4, r1
   136f6:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   136f8:	2145      	movs	r1, #69	; 0x45
   136fa:	4842      	ldr	r0, [pc, #264]	; (13804 <mem_manage_fault+0x114>)
   136fc:	f015 f9c2 	bl	28a84 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13700:	4b41      	ldr	r3, [pc, #260]	; (13808 <mem_manage_fault+0x118>)
   13702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13704:	f013 0f10 	tst.w	r3, #16
   13708:	d130      	bne.n	1376c <mem_manage_fault+0x7c>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1370a:	4b3f      	ldr	r3, [pc, #252]	; (13808 <mem_manage_fault+0x118>)
   1370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1370e:	f013 0f08 	tst.w	r3, #8
   13712:	d130      	bne.n	13776 <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13714:	4b3c      	ldr	r3, [pc, #240]	; (13808 <mem_manage_fault+0x118>)
   13716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13718:	f013 0f02 	tst.w	r3, #2
   1371c:	d130      	bne.n	13780 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   1371e:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13722:	4b39      	ldr	r3, [pc, #228]	; (13808 <mem_manage_fault+0x118>)
   13724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13726:	f013 0f01 	tst.w	r3, #1
   1372a:	d143      	bne.n	137b4 <mem_manage_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1372c:	4b36      	ldr	r3, [pc, #216]	; (13808 <mem_manage_fault+0x118>)
   1372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13730:	f013 0f20 	tst.w	r3, #32
   13734:	d143      	bne.n	137be <mem_manage_fault+0xce>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13736:	4b34      	ldr	r3, [pc, #208]	; (13808 <mem_manage_fault+0x118>)
   13738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1373a:	f013 0f10 	tst.w	r3, #16
   1373e:	d104      	bne.n	1374a <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13740:	4b31      	ldr	r3, [pc, #196]	; (13808 <mem_manage_fault+0x118>)
   13742:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13744:	f014 0402 	ands.w	r4, r4, #2
   13748:	d004      	beq.n	13754 <mem_manage_fault+0x64>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1374a:	4b2f      	ldr	r3, [pc, #188]	; (13808 <mem_manage_fault+0x118>)
   1374c:	685c      	ldr	r4, [r3, #4]
   1374e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   13752:	d139      	bne.n	137c8 <mem_manage_fault+0xd8>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13754:	492c      	ldr	r1, [pc, #176]	; (13808 <mem_manage_fault+0x118>)
   13756:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   13758:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1375c:	628b      	str	r3, [r1, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1375e:	2101      	movs	r1, #1
   13760:	4628      	mov	r0, r5
   13762:	f016 ff3d 	bl	2a5e0 <memory_fault_recoverable>
   13766:	7030      	strb	r0, [r6, #0]
}
   13768:	4620      	mov	r0, r4
   1376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   1376c:	2145      	movs	r1, #69	; 0x45
   1376e:	4827      	ldr	r0, [pc, #156]	; (1380c <mem_manage_fault+0x11c>)
   13770:	f015 f988 	bl	28a84 <z_log_minimal_printk>
   13774:	e7c9      	b.n	1370a <mem_manage_fault+0x1a>
		PR_FAULT_INFO("  Unstacking error");
   13776:	2145      	movs	r1, #69	; 0x45
   13778:	4825      	ldr	r0, [pc, #148]	; (13810 <mem_manage_fault+0x120>)
   1377a:	f015 f983 	bl	28a84 <z_log_minimal_printk>
   1377e:	e7c9      	b.n	13714 <mem_manage_fault+0x24>
		PR_FAULT_INFO("  Data Access Violation");
   13780:	2145      	movs	r1, #69	; 0x45
   13782:	4824      	ldr	r0, [pc, #144]	; (13814 <mem_manage_fault+0x124>)
   13784:	f015 f97e 	bl	28a84 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   13788:	4b1f      	ldr	r3, [pc, #124]	; (13808 <mem_manage_fault+0x118>)
   1378a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1378e:	f013 0f80 	tst.w	r3, #128	; 0x80
   13792:	d102      	bne.n	1379a <mem_manage_fault+0xaa>
	uint32_t mmfar = -EINVAL;
   13794:	f06f 0715 	mvn.w	r7, #21
   13798:	e7c3      	b.n	13722 <mem_manage_fault+0x32>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1379a:	463a      	mov	r2, r7
   1379c:	2145      	movs	r1, #69	; 0x45
   1379e:	481e      	ldr	r0, [pc, #120]	; (13818 <mem_manage_fault+0x128>)
   137a0:	f015 f970 	bl	28a84 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   137a4:	2c00      	cmp	r4, #0
   137a6:	d0bc      	beq.n	13722 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   137a8:	4a17      	ldr	r2, [pc, #92]	; (13808 <mem_manage_fault+0x118>)
   137aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   137ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   137b0:	6293      	str	r3, [r2, #40]	; 0x28
   137b2:	e7b6      	b.n	13722 <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Instruction Access Violation");
   137b4:	2145      	movs	r1, #69	; 0x45
   137b6:	4819      	ldr	r0, [pc, #100]	; (1381c <mem_manage_fault+0x12c>)
   137b8:	f015 f964 	bl	28a84 <z_log_minimal_printk>
   137bc:	e7b6      	b.n	1372c <mem_manage_fault+0x3c>
		PR_FAULT_INFO(
   137be:	2145      	movs	r1, #69	; 0x45
   137c0:	4817      	ldr	r0, [pc, #92]	; (13820 <mem_manage_fault+0x130>)
   137c2:	f015 f95f 	bl	28a84 <z_log_minimal_printk>
   137c6:	e7b6      	b.n	13736 <mem_manage_fault+0x46>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   137c8:	4629      	mov	r1, r5
   137ca:	4638      	mov	r0, r7
   137cc:	f7ff fe30 	bl	13430 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   137d0:	4607      	mov	r7, r0
   137d2:	b990      	cbnz	r0, 137fa <mem_manage_fault+0x10a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   137d4:	4b0c      	ldr	r3, [pc, #48]	; (13808 <mem_manage_fault+0x118>)
   137d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   137d8:	f014 0410 	ands.w	r4, r4, #16
   137dc:	d0ba      	beq.n	13754 <mem_manage_fault+0x64>
   137de:	4c11      	ldr	r4, [pc, #68]	; (13824 <mem_manage_fault+0x134>)
   137e0:	f240 1249 	movw	r2, #329	; 0x149
   137e4:	4621      	mov	r1, r4
   137e6:	4810      	ldr	r0, [pc, #64]	; (13828 <mem_manage_fault+0x138>)
   137e8:	f014 fdab 	bl	28342 <printk>
   137ec:	f240 1149 	movw	r1, #329	; 0x149
   137f0:	4620      	mov	r0, r4
   137f2:	f015 f93f 	bl	28a74 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   137f6:	463c      	mov	r4, r7
   137f8:	e7ac      	b.n	13754 <mem_manage_fault+0x64>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   137fa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   137fe:	2402      	movs	r4, #2
   13800:	e7a8      	b.n	13754 <mem_manage_fault+0x64>
   13802:	bf00      	nop
   13804:	000302d8 	.word	0x000302d8
   13808:	e000ed00 	.word	0xe000ed00
   1380c:	000302f4 	.word	0x000302f4
   13810:	000300a0 	.word	0x000300a0
   13814:	0003032c 	.word	0x0003032c
   13818:	0003034c 	.word	0x0003034c
   1381c:	00030368 	.word	0x00030368
   13820:	00030134 	.word	0x00030134
   13824:	0003038c 	.word	0x0003038c
   13828:	0002f968 	.word	0x0002f968

0001382c <hard_fault>:
{
   1382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1382e:	4607      	mov	r7, r0
   13830:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   13832:	2145      	movs	r1, #69	; 0x45
   13834:	4836      	ldr	r0, [pc, #216]	; (13910 <hard_fault+0xe4>)
   13836:	f015 f925 	bl	28a84 <z_log_minimal_printk>
	*recoverable = false;
   1383a:	2300      	movs	r3, #0
   1383c:	7033      	strb	r3, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1383e:	4b35      	ldr	r3, [pc, #212]	; (13914 <hard_fault+0xe8>)
   13840:	6add      	ldr	r5, [r3, #44]	; 0x2c
   13842:	f015 0502 	ands.w	r5, r5, #2
   13846:	d125      	bne.n	13894 <hard_fault+0x68>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13848:	4b32      	ldr	r3, [pc, #200]	; (13914 <hard_fault+0xe8>)
   1384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1384c:	2b00      	cmp	r3, #0
   1384e:	db28      	blt.n	138a2 <hard_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13850:	4b30      	ldr	r3, [pc, #192]	; (13914 <hard_fault+0xe8>)
   13852:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13854:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   13858:	d04c      	beq.n	138f4 <hard_fault+0xc8>
		PR_EXC("  Fault escalation (see below)");
   1385a:	2145      	movs	r1, #69	; 0x45
   1385c:	482e      	ldr	r0, [pc, #184]	; (13918 <hard_fault+0xec>)
   1385e:	f015 f911 	bl	28a84 <z_log_minimal_printk>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   13862:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   13864:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13868:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1386c:	429a      	cmp	r2, r3
   1386e:	d01e      	beq.n	138ae <hard_fault+0x82>
		} else if (SCB_MMFSR != 0) {
   13870:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13874:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   13878:	781b      	ldrb	r3, [r3, #0]
   1387a:	b9fb      	cbnz	r3, 138bc <hard_fault+0x90>
		} else if (SCB_BFSR != 0) {
   1387c:	4b27      	ldr	r3, [pc, #156]	; (1391c <hard_fault+0xf0>)
   1387e:	781b      	ldrb	r3, [r3, #0]
   13880:	bb1b      	cbnz	r3, 138ca <hard_fault+0x9e>
		} else if (SCB_UFSR != 0) {
   13882:	4b27      	ldr	r3, [pc, #156]	; (13920 <hard_fault+0xf4>)
   13884:	881b      	ldrh	r3, [r3, #0]
   13886:	b29b      	uxth	r3, r3
   13888:	b333      	cbz	r3, 138d8 <hard_fault+0xac>
			reason = usage_fault(esf);
   1388a:	4638      	mov	r0, r7
   1388c:	f7ff feb8 	bl	13600 <usage_fault>
   13890:	4604      	mov	r4, r0
   13892:	e004      	b.n	1389e <hard_fault+0x72>
		PR_EXC("  Bus fault on vector table read");
   13894:	2145      	movs	r1, #69	; 0x45
   13896:	4823      	ldr	r0, [pc, #140]	; (13924 <hard_fault+0xf8>)
   13898:	f015 f8f4 	bl	28a84 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1389c:	2400      	movs	r4, #0
}
   1389e:	4620      	mov	r0, r4
   138a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
   138a2:	2145      	movs	r1, #69	; 0x45
   138a4:	4820      	ldr	r0, [pc, #128]	; (13928 <hard_fault+0xfc>)
   138a6:	f015 f8ed 	bl	28a84 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   138aa:	462c      	mov	r4, r5
   138ac:	e7f7      	b.n	1389e <hard_fault+0x72>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   138ae:	683a      	ldr	r2, [r7, #0]
   138b0:	2145      	movs	r1, #69	; 0x45
   138b2:	481e      	ldr	r0, [pc, #120]	; (1392c <hard_fault+0x100>)
   138b4:	f015 f8e6 	bl	28a84 <z_log_minimal_printk>
			reason = esf->basic.r0;
   138b8:	683c      	ldr	r4, [r7, #0]
   138ba:	e7f0      	b.n	1389e <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
   138bc:	4632      	mov	r2, r6
   138be:	2101      	movs	r1, #1
   138c0:	4638      	mov	r0, r7
   138c2:	f7ff ff15 	bl	136f0 <mem_manage_fault>
   138c6:	4604      	mov	r4, r0
   138c8:	e7e9      	b.n	1389e <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
   138ca:	4632      	mov	r2, r6
   138cc:	2101      	movs	r1, #1
   138ce:	4638      	mov	r0, r7
   138d0:	f7ff fe22 	bl	13518 <bus_fault>
   138d4:	4604      	mov	r4, r0
   138d6:	e7e2      	b.n	1389e <hard_fault+0x72>
			__ASSERT(0,
   138d8:	4c15      	ldr	r4, [pc, #84]	; (13930 <hard_fault+0x104>)
   138da:	f240 22c3 	movw	r2, #707	; 0x2c3
   138de:	4621      	mov	r1, r4
   138e0:	4814      	ldr	r0, [pc, #80]	; (13934 <hard_fault+0x108>)
   138e2:	f014 fd2e 	bl	28342 <printk>
   138e6:	f240 21c3 	movw	r1, #707	; 0x2c3
   138ea:	4620      	mov	r0, r4
   138ec:	f015 f8c2 	bl	28a74 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   138f0:	462c      	mov	r4, r5
   138f2:	e7d4      	b.n	1389e <hard_fault+0x72>
		__ASSERT(0,
   138f4:	4d0e      	ldr	r5, [pc, #56]	; (13930 <hard_fault+0x104>)
   138f6:	f240 22c7 	movw	r2, #711	; 0x2c7
   138fa:	4629      	mov	r1, r5
   138fc:	480d      	ldr	r0, [pc, #52]	; (13934 <hard_fault+0x108>)
   138fe:	f014 fd20 	bl	28342 <printk>
   13902:	f240 21c7 	movw	r1, #711	; 0x2c7
   13906:	4628      	mov	r0, r5
   13908:	f015 f8b4 	bl	28a74 <assert_post_action>
	return reason;
   1390c:	e7c7      	b.n	1389e <hard_fault+0x72>
   1390e:	bf00      	nop
   13910:	000303c8 	.word	0x000303c8
   13914:	e000ed00 	.word	0xe000ed00
   13918:	00030420 	.word	0x00030420
   1391c:	e000ed29 	.word	0xe000ed29
   13920:	e000ed2a 	.word	0xe000ed2a
   13924:	000303e4 	.word	0x000303e4
   13928:	0003040c 	.word	0x0003040c
   1392c:	00030444 	.word	0x00030444
   13930:	0003038c 	.word	0x0003038c
   13934:	0002f968 	.word	0x0002f968

00013938 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1393a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1393c:	4b2b      	ldr	r3, [pc, #172]	; (139ec <z_arm_fault+0xb4>)
   1393e:	685d      	ldr	r5, [r3, #4]
   13940:	f3c5 0508 	ubfx	r5, r5, #0, #9
   13944:	2300      	movs	r3, #0
   13946:	f383 8811 	msr	BASEPRI, r3
   1394a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1394e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13952:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13956:	d114      	bne.n	13982 <z_arm_fault+0x4a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13958:	f002 030c 	and.w	r3, r2, #12
   1395c:	2b08      	cmp	r3, #8
   1395e:	d006      	beq.n	1396e <z_arm_fault+0x36>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13960:	f012 0f08 	tst.w	r2, #8
   13964:	d00a      	beq.n	1397c <z_arm_fault+0x44>
			ptr_esf =  (z_arch_esf_t *)psp;
   13966:	460c      	mov	r4, r1
	*nested_exc = false;
   13968:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1396a:	b9c4      	cbnz	r4, 1399e <z_arm_fault+0x66>
   1396c:	e00b      	b.n	13986 <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   1396e:	2145      	movs	r1, #69	; 0x45
   13970:	481f      	ldr	r0, [pc, #124]	; (139f0 <z_arm_fault+0xb8>)
   13972:	f015 f887 	bl	28a84 <z_log_minimal_printk>
	*nested_exc = false;
   13976:	2600      	movs	r6, #0
		return NULL;
   13978:	4634      	mov	r4, r6
   1397a:	e004      	b.n	13986 <z_arm_fault+0x4e>
			ptr_esf = (z_arch_esf_t *)msp;
   1397c:	4604      	mov	r4, r0
			*nested_exc = true;
   1397e:	2601      	movs	r6, #1
   13980:	e7f3      	b.n	1396a <z_arm_fault+0x32>
	*nested_exc = false;
   13982:	2600      	movs	r6, #0
		return NULL;
   13984:	4634      	mov	r4, r6
	__ASSERT(esf != NULL,
   13986:	4f1b      	ldr	r7, [pc, #108]	; (139f4 <z_arm_fault+0xbc>)
   13988:	f240 32f2 	movw	r2, #1010	; 0x3f2
   1398c:	4639      	mov	r1, r7
   1398e:	481a      	ldr	r0, [pc, #104]	; (139f8 <z_arm_fault+0xc0>)
   13990:	f014 fcd7 	bl	28342 <printk>
   13994:	f240 31f2 	movw	r1, #1010	; 0x3f2
   13998:	4638      	mov	r0, r7
   1399a:	f015 f86b 	bl	28a74 <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1399e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   139a2:	4629      	mov	r1, r5
   139a4:	4620      	mov	r0, r4
   139a6:	f016 fe1d 	bl	2a5e4 <fault_handle>
   139aa:	4605      	mov	r5, r0
	if (recoverable) {
   139ac:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   139b0:	b10b      	cbz	r3, 139b6 <z_arm_fault+0x7e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   139b2:	b00b      	add	sp, #44	; 0x2c
   139b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   139b6:	2220      	movs	r2, #32
   139b8:	4621      	mov	r1, r4
   139ba:	a801      	add	r0, sp, #4
   139bc:	f016 ff6f 	bl	2a89e <memcpy>
	if (nested_exc) {
   139c0:	b14e      	cbz	r6, 139d6 <z_arm_fault+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   139c2:	9b08      	ldr	r3, [sp, #32]
   139c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   139c8:	b95a      	cbnz	r2, 139e2 <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   139ca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   139ce:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   139d2:	9308      	str	r3, [sp, #32]
   139d4:	e005      	b.n	139e2 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   139d6:	9b08      	ldr	r3, [sp, #32]
   139d8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   139dc:	f023 0301 	bic.w	r3, r3, #1
   139e0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   139e2:	a901      	add	r1, sp, #4
   139e4:	4628      	mov	r0, r5
   139e6:	f016 fddd 	bl	2a5a4 <z_arm_fatal_error>
   139ea:	e7e2      	b.n	139b2 <z_arm_fault+0x7a>
   139ec:	e000ed00 	.word	0xe000ed00
   139f0:	00030468 	.word	0x00030468
   139f4:	0003038c 	.word	0x0003038c
   139f8:	0002f968 	.word	0x0002f968

000139fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   139fc:	4a02      	ldr	r2, [pc, #8]	; (13a08 <z_arm_fault_init+0xc>)
   139fe:	6953      	ldr	r3, [r2, #20]
   13a00:	f043 0310 	orr.w	r3, r3, #16
   13a04:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13a06:	4770      	bx	lr
   13a08:	e000ed00 	.word	0xe000ed00

00013a0c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13a0c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13a10:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13a14:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13a16:	4672      	mov	r2, lr
	bl z_arm_fault
   13a18:	f7ff ff8e 	bl	13938 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13a1c:	bd01      	pop	{r0, pc}
   13a1e:	bf00      	nop

00013a20 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13a20:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13a22:	e006      	b.n	13a32 <z_arm_interrupt_init+0x12>
   13a24:	f002 010f 	and.w	r1, r2, #15
   13a28:	4b09      	ldr	r3, [pc, #36]	; (13a50 <z_arm_interrupt_init+0x30>)
   13a2a:	440b      	add	r3, r1
   13a2c:	2140      	movs	r1, #64	; 0x40
   13a2e:	7619      	strb	r1, [r3, #24]
   13a30:	3201      	adds	r2, #1
   13a32:	2a2f      	cmp	r2, #47	; 0x2f
   13a34:	dc0a      	bgt.n	13a4c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   13a36:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   13a38:	2b00      	cmp	r3, #0
   13a3a:	dbf3      	blt.n	13a24 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a3c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13a40:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13a44:	2140      	movs	r1, #64	; 0x40
   13a46:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13a4a:	e7f1      	b.n	13a30 <z_arm_interrupt_init+0x10>
	}
}
   13a4c:	4770      	bx	lr
   13a4e:	bf00      	nop
   13a50:	e000ecfc 	.word	0xe000ecfc

00013a54 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13a54:	2000      	movs	r0, #0
    msr CONTROL, r0
   13a56:	f380 8814 	msr	CONTROL, r0
    isb
   13a5a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13a5e:	f01b fa7d 	bl	2ef5c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13a62:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13a64:	490d      	ldr	r1, [pc, #52]	; (13a9c <__start+0x48>)
    str r0, [r1]
   13a66:	6008      	str	r0, [r1, #0]
    dsb
   13a68:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13a6c:	480c      	ldr	r0, [pc, #48]	; (13aa0 <__start+0x4c>)
    msr msp, r0
   13a6e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13a72:	f000 f829 	bl	13ac8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13a76:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13a78:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13a7c:	4809      	ldr	r0, [pc, #36]	; (13aa4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13a7e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13a82:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13a84:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13a88:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13a8c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13a8e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13a90:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13a94:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13a98:	f7ff fc36 	bl	13308 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13a9c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13aa0:	20006500 	.word	0x20006500
    ldr r0, =z_interrupt_stacks
   13aa4:	20006680 	.word	0x20006680

00013aa8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13aa8:	4b06      	ldr	r3, [pc, #24]	; (13ac4 <z_arm_clear_arm_mpu_config+0x1c>)
   13aaa:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   13aac:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13ab0:	2300      	movs	r3, #0
   13ab2:	4283      	cmp	r3, r0
   13ab4:	da05      	bge.n	13ac2 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13ab6:	4a03      	ldr	r2, [pc, #12]	; (13ac4 <z_arm_clear_arm_mpu_config+0x1c>)
   13ab8:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13aba:	2100      	movs	r1, #0
   13abc:	6111      	str	r1, [r2, #16]
   13abe:	3301      	adds	r3, #1
   13ac0:	e7f7      	b.n	13ab2 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   13ac2:	4770      	bx	lr
   13ac4:	e000ed90 	.word	0xe000ed90

00013ac8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13ac8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13aca:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13acc:	2400      	movs	r4, #0
   13ace:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13ad2:	f7ff ffe9 	bl	13aa8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13ad6:	4623      	mov	r3, r4
   13ad8:	e008      	b.n	13aec <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   13ada:	f103 0120 	add.w	r1, r3, #32
   13ade:	4a0e      	ldr	r2, [pc, #56]	; (13b18 <z_arm_init_arch_hw_at_boot+0x50>)
   13ae0:	f04f 30ff 	mov.w	r0, #4294967295
   13ae4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13ae8:	3301      	adds	r3, #1
   13aea:	b2db      	uxtb	r3, r3
   13aec:	2b07      	cmp	r3, #7
   13aee:	d9f4      	bls.n	13ada <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13af0:	2300      	movs	r3, #0
   13af2:	e008      	b.n	13b06 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13af4:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13af8:	4a07      	ldr	r2, [pc, #28]	; (13b18 <z_arm_init_arch_hw_at_boot+0x50>)
   13afa:	f04f 30ff 	mov.w	r0, #4294967295
   13afe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13b02:	3301      	adds	r3, #1
   13b04:	b2db      	uxtb	r3, r3
   13b06:	2b07      	cmp	r3, #7
   13b08:	d9f4      	bls.n	13af4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13b0a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13b10:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13b14:	bd10      	pop	{r4, pc}
   13b16:	bf00      	nop
   13b18:	e000e100 	.word	0xe000e100

00013b1c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13b1c:	b508      	push	{r3, lr}
	if (_current == thread) {
   13b1e:	4b08      	ldr	r3, [pc, #32]	; (13b40 <z_impl_k_thread_abort+0x24>)
   13b20:	689b      	ldr	r3, [r3, #8]
   13b22:	4283      	cmp	r3, r0
   13b24:	d002      	beq.n	13b2c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   13b26:	f010 fd33 	bl	24590 <z_thread_abort>
}
   13b2a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13b2c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13b30:	2b00      	cmp	r3, #0
   13b32:	d0f8      	beq.n	13b26 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13b34:	4a03      	ldr	r2, [pc, #12]	; (13b44 <z_impl_k_thread_abort+0x28>)
   13b36:	6853      	ldr	r3, [r2, #4]
   13b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13b3c:	6053      	str	r3, [r2, #4]
   13b3e:	e7f2      	b.n	13b26 <z_impl_k_thread_abort+0xa>
   13b40:	2000360c 	.word	0x2000360c
   13b44:	e000ed00 	.word	0xe000ed00

00013b48 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13b48:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13b4a:	4b03      	ldr	r3, [pc, #12]	; (13b58 <z_arm_configure_static_mpu_regions+0x10>)
   13b4c:	4a03      	ldr	r2, [pc, #12]	; (13b5c <z_arm_configure_static_mpu_regions+0x14>)
   13b4e:	2101      	movs	r1, #1
   13b50:	4803      	ldr	r0, [pc, #12]	; (13b60 <z_arm_configure_static_mpu_regions+0x18>)
   13b52:	f000 f89f 	bl	13c94 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13b56:	bd08      	pop	{r3, pc}
   13b58:	20040000 	.word	0x20040000
   13b5c:	20000000 	.word	0x20000000
   13b60:	0003049c 	.word	0x0003049c

00013b64 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13b64:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13b66:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   13b6a:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13b6c:	4804      	ldr	r0, [pc, #16]	; (13b80 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13b6e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   13b70:	2320      	movs	r3, #32
   13b72:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13b74:	4b03      	ldr	r3, [pc, #12]	; (13b84 <z_arm_configure_dynamic_mpu_regions+0x20>)
   13b76:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13b78:	2101      	movs	r1, #1
   13b7a:	f000 f8a3 	bl	13cc4 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   13b7e:	bd08      	pop	{r3, pc}
   13b80:	20002638 	.word	0x20002638
   13b84:	150b0000 	.word	0x150b0000

00013b88 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13b88:	4a06      	ldr	r2, [pc, #24]	; (13ba4 <region_init+0x1c>)
   13b8a:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13b8c:	680b      	ldr	r3, [r1, #0]
   13b8e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13b92:	4303      	orrs	r3, r0
   13b94:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13b98:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13b9a:	688b      	ldr	r3, [r1, #8]
   13b9c:	f043 0301 	orr.w	r3, r3, #1
   13ba0:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   13ba2:	4770      	bx	lr
   13ba4:	e000ed90 	.word	0xe000ed90

00013ba8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   13ba8:	b510      	push	{r4, lr}
   13baa:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   13bac:	2807      	cmp	r0, #7
   13bae:	d803      	bhi.n	13bb8 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   13bb0:	f7ff ffea 	bl	13b88 <region_init>

	return index;
   13bb4:	4620      	mov	r0, r4
}
   13bb6:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13bb8:	4602      	mov	r2, r0
   13bba:	2145      	movs	r1, #69	; 0x45
   13bbc:	4802      	ldr	r0, [pc, #8]	; (13bc8 <region_allocate_and_init+0x20>)
   13bbe:	f014 ff61 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   13bc2:	f06f 0015 	mvn.w	r0, #21
   13bc6:	e7f6      	b.n	13bb6 <region_allocate_and_init+0xe>
   13bc8:	000304a8 	.word	0x000304a8

00013bcc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13bd0:	4680      	mov	r8, r0
   13bd2:	460f      	mov	r7, r1
   13bd4:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
   13bd6:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   13bd8:	2500      	movs	r5, #0
   13bda:	e009      	b.n	13bf0 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13bdc:	4621      	mov	r1, r4
   13bde:	b2f0      	uxtb	r0, r6
   13be0:	f016 fd36 	bl	2a650 <mpu_configure_region>
   13be4:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   13be6:	f110 0f16 	cmn.w	r0, #22
   13bea:	d019      	beq.n	13c20 <mpu_configure_regions+0x54>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   13bec:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   13bee:	3501      	adds	r5, #1
   13bf0:	42bd      	cmp	r5, r7
   13bf2:	da15      	bge.n	13c20 <mpu_configure_regions+0x54>
		if (regions[i].size == 0U) {
   13bf4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   13bf8:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   13bfc:	6862      	ldr	r2, [r4, #4]
   13bfe:	2a00      	cmp	r2, #0
   13c00:	d0f5      	beq.n	13bee <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   13c02:	f1b9 0f00 	cmp.w	r9, #0
   13c06:	d0e9      	beq.n	13bdc <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   13c08:	4620      	mov	r0, r4
   13c0a:	f016 fd10 	bl	2a62e <mpu_partition_is_valid>
		if (do_sanity_check &&
   13c0e:	2800      	cmp	r0, #0
   13c10:	d1e4      	bne.n	13bdc <mpu_configure_regions+0x10>
			LOG_ERR("Partition %u: sanity check failed.", i);
   13c12:	462a      	mov	r2, r5
   13c14:	2145      	movs	r1, #69	; 0x45
   13c16:	4804      	ldr	r0, [pc, #16]	; (13c28 <mpu_configure_regions+0x5c>)
   13c18:	f014 ff34 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   13c1c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   13c20:	4630      	mov	r0, r6
   13c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13c26:	bf00      	nop
   13c28:	000304d4 	.word	0x000304d4

00013c2c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   13c2c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   13c2e:	4c03      	ldr	r4, [pc, #12]	; (13c3c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13c30:	2301      	movs	r3, #1
   13c32:	7822      	ldrb	r2, [r4, #0]
   13c34:	f7ff ffca 	bl	13bcc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13c38:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   13c3a:	bd10      	pop	{r4, pc}
   13c3c:	20003f72 	.word	0x20003f72

00013c40 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13c40:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13c42:	2300      	movs	r3, #0
   13c44:	4a08      	ldr	r2, [pc, #32]	; (13c68 <mpu_configure_dynamic_mpu_regions+0x28>)
   13c46:	7812      	ldrb	r2, [r2, #0]
   13c48:	f7ff ffc0 	bl	13bcc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13c4c:	f110 0f16 	cmn.w	r0, #22
   13c50:	d008      	beq.n	13c64 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13c52:	4603      	mov	r3, r0
   13c54:	2b07      	cmp	r3, #7
   13c56:	dc05      	bgt.n	13c64 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   13c58:	4a04      	ldr	r2, [pc, #16]	; (13c6c <mpu_configure_dynamic_mpu_regions+0x2c>)
   13c5a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13c5c:	2100      	movs	r1, #0
   13c5e:	6111      	str	r1, [r2, #16]
   13c60:	3301      	adds	r3, #1
   13c62:	e7f7      	b.n	13c54 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   13c64:	bd08      	pop	{r3, pc}
   13c66:	bf00      	nop
   13c68:	20003f72 	.word	0x20003f72
   13c6c:	e000ed90 	.word	0xe000ed90

00013c70 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13c70:	4b03      	ldr	r3, [pc, #12]	; (13c80 <arm_core_mpu_enable+0x10>)
   13c72:	2205      	movs	r2, #5
   13c74:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13c7a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13c7e:	4770      	bx	lr
   13c80:	e000ed90 	.word	0xe000ed90

00013c84 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13c84:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13c88:	4b01      	ldr	r3, [pc, #4]	; (13c90 <arm_core_mpu_disable+0xc>)
   13c8a:	2200      	movs	r2, #0
   13c8c:	605a      	str	r2, [r3, #4]
}
   13c8e:	4770      	bx	lr
   13c90:	e000ed90 	.word	0xe000ed90

00013c94 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13c94:	b510      	push	{r4, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   13c96:	f7ff ffc9 	bl	13c2c <mpu_configure_static_mpu_regions>
   13c9a:	f110 0f16 	cmn.w	r0, #22
   13c9e:	d000      	beq.n	13ca2 <arm_core_mpu_configure_static_mpu_regions+0xe>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   13ca0:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   13ca2:	4c06      	ldr	r4, [pc, #24]	; (13cbc <arm_core_mpu_configure_static_mpu_regions+0x28>)
   13ca4:	f240 1211 	movw	r2, #273	; 0x111
   13ca8:	4621      	mov	r1, r4
   13caa:	4805      	ldr	r0, [pc, #20]	; (13cc0 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
   13cac:	f014 fb49 	bl	28342 <printk>
   13cb0:	f240 1111 	movw	r1, #273	; 0x111
   13cb4:	4620      	mov	r0, r4
   13cb6:	f014 fedd 	bl	28a74 <assert_post_action>
}
   13cba:	e7f1      	b.n	13ca0 <arm_core_mpu_configure_static_mpu_regions+0xc>
   13cbc:	000304fc 	.word	0x000304fc
   13cc0:	0002f968 	.word	0x0002f968

00013cc4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13cc4:	b510      	push	{r4, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   13cc6:	f7ff ffbb 	bl	13c40 <mpu_configure_dynamic_mpu_regions>
   13cca:	f110 0f16 	cmn.w	r0, #22
   13cce:	d000      	beq.n	13cd2 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13cd0:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   13cd2:	4c06      	ldr	r4, [pc, #24]	; (13cec <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13cd4:	f44f 7298 	mov.w	r2, #304	; 0x130
   13cd8:	4621      	mov	r1, r4
   13cda:	4805      	ldr	r0, [pc, #20]	; (13cf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
   13cdc:	f014 fb31 	bl	28342 <printk>
   13ce0:	f44f 7198 	mov.w	r1, #304	; 0x130
   13ce4:	4620      	mov	r0, r4
   13ce6:	f014 fec5 	bl	28a74 <assert_post_action>
}
   13cea:	e7f1      	b.n	13cd0 <arm_core_mpu_configure_dynamic_mpu_regions+0xc>
   13cec:	000304fc 	.word	0x000304fc
   13cf0:	0002f968 	.word	0x0002f968

00013cf4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   13cf4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13cf6:	4b1e      	ldr	r3, [pc, #120]	; (13d70 <z_arm_mpu_init+0x7c>)
   13cf8:	681d      	ldr	r5, [r3, #0]
   13cfa:	2d08      	cmp	r5, #8
   13cfc:	d803      	bhi.n	13d06 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13cfe:	f7ff ffc1 	bl	13c84 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13d02:	2400      	movs	r4, #0
   13d04:	e018      	b.n	13d38 <z_arm_mpu_init+0x44>
		__ASSERT(0,
   13d06:	4c1b      	ldr	r4, [pc, #108]	; (13d74 <z_arm_mpu_init+0x80>)
   13d08:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13d0c:	4621      	mov	r1, r4
   13d0e:	481a      	ldr	r0, [pc, #104]	; (13d78 <z_arm_mpu_init+0x84>)
   13d10:	f014 fb17 	bl	28342 <printk>
   13d14:	f44f 71a4 	mov.w	r1, #328	; 0x148
   13d18:	4620      	mov	r0, r4
   13d1a:	f014 feab 	bl	28a74 <assert_post_action>
		return -1;
   13d1e:	f04f 30ff 	mov.w	r0, #4294967295
   13d22:	e016      	b.n	13d52 <z_arm_mpu_init+0x5e>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   13d24:	4b12      	ldr	r3, [pc, #72]	; (13d70 <z_arm_mpu_init+0x7c>)
   13d26:	6859      	ldr	r1, [r3, #4]
   13d28:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   13d2c:	0093      	lsls	r3, r2, #2
   13d2e:	4419      	add	r1, r3
   13d30:	4620      	mov	r0, r4
   13d32:	f7ff ff29 	bl	13b88 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13d36:	3401      	adds	r4, #1
   13d38:	42a5      	cmp	r5, r4
   13d3a:	d8f3      	bhi.n	13d24 <z_arm_mpu_init+0x30>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13d3c:	4b0f      	ldr	r3, [pc, #60]	; (13d7c <z_arm_mpu_init+0x88>)
   13d3e:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   13d40:	f7ff ff96 	bl	13c70 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   13d44:	4b0e      	ldr	r3, [pc, #56]	; (13d80 <z_arm_mpu_init+0x8c>)
   13d46:	681b      	ldr	r3, [r3, #0]
   13d48:	f3c3 2307 	ubfx	r3, r3, #8, #8
   13d4c:	2b08      	cmp	r3, #8
   13d4e:	d101      	bne.n	13d54 <z_arm_mpu_init+0x60>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13d50:	2000      	movs	r0, #0
}
   13d52:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
   13d54:	4c07      	ldr	r4, [pc, #28]	; (13d74 <z_arm_mpu_init+0x80>)
   13d56:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
   13d5a:	4621      	mov	r1, r4
   13d5c:	4806      	ldr	r0, [pc, #24]	; (13d78 <z_arm_mpu_init+0x84>)
   13d5e:	f014 faf0 	bl	28342 <printk>
   13d62:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   13d66:	4620      	mov	r0, r4
   13d68:	f014 fe84 	bl	28a74 <assert_post_action>
	return 0;
   13d6c:	2000      	movs	r0, #0
   13d6e:	e7f0      	b.n	13d52 <z_arm_mpu_init+0x5e>
   13d70:	00030544 	.word	0x00030544
   13d74:	000304fc 	.word	0x000304fc
   13d78:	0002f968 	.word	0x0002f968
   13d7c:	20003f72 	.word	0x20003f72
   13d80:	e000ed90 	.word	0xe000ed90

00013d84 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13d84:	4b01      	ldr	r3, [pc, #4]	; (13d8c <__stdout_hook_install+0x8>)
   13d86:	6018      	str	r0, [r3, #0]
}
   13d88:	4770      	bx	lr
   13d8a:	bf00      	nop
   13d8c:	20000558 	.word	0x20000558

00013d90 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13d90:	f04f 0340 	mov.w	r3, #64	; 0x40
   13d94:	f3ef 8211 	mrs	r2, BASEPRI
   13d98:	f383 8812 	msr	BASEPRI_MAX, r3
   13d9c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13da0:	2301      	movs	r3, #1
   13da2:	4906      	ldr	r1, [pc, #24]	; (13dbc <nordicsemi_nrf52_init+0x2c>)
   13da4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13da8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13dac:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   13db0:	f382 8811 	msr	BASEPRI, r2
   13db4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13db8:	2000      	movs	r0, #0
   13dba:	4770      	bx	lr
   13dbc:	4001e000 	.word	0x4001e000

00013dc0 <sys_arch_reboot>:
    *p_gpregret = val;
   13dc0:	b2c0      	uxtb	r0, r0
   13dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13dc6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13dca:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13dce:	4905      	ldr	r1, [pc, #20]	; (13de4 <sys_arch_reboot+0x24>)
   13dd0:	68ca      	ldr	r2, [r1, #12]
   13dd2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13dd6:	4b04      	ldr	r3, [pc, #16]	; (13de8 <sys_arch_reboot+0x28>)
   13dd8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13dda:	60cb      	str	r3, [r1, #12]
   13ddc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13de0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13de2:	e7fd      	b.n	13de0 <sys_arch_reboot+0x20>
   13de4:	e000ed00 	.word	0xe000ed00
   13de8:	05fa0004 	.word	0x05fa0004

00013dec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13dec:	b130      	cbz	r0, 13dfc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   13dee:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13df0:	0180      	lsls	r0, r0, #6
   13df2:	4b03      	ldr	r3, [pc, #12]	; (13e00 <arch_busy_wait+0x14>)
   13df4:	f043 0301 	orr.w	r3, r3, #1
   13df8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   13dfa:	bd08      	pop	{r3, pc}
   13dfc:	4770      	bx	lr
   13dfe:	bf00      	nop
   13e00:	0002f5b0 	.word	0x0002f5b0

00013e04 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13e04:	2940      	cmp	r1, #64	; 0x40
   13e06:	bf28      	it	cs
   13e08:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   13e0a:	2300      	movs	r3, #0
   13e0c:	428b      	cmp	r3, r1
   13e0e:	d217      	bcs.n	13e40 <bt_hex_real+0x3c>
{
   13e10:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   13e12:	5cc4      	ldrb	r4, [r0, r3]
   13e14:	0924      	lsrs	r4, r4, #4
   13e16:	005a      	lsls	r2, r3, #1
   13e18:	4e0c      	ldr	r6, [pc, #48]	; (13e4c <bt_hex_real+0x48>)
   13e1a:	5d34      	ldrb	r4, [r6, r4]
   13e1c:	4d0c      	ldr	r5, [pc, #48]	; (13e50 <bt_hex_real+0x4c>)
   13e1e:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13e22:	5cc4      	ldrb	r4, [r0, r3]
   13e24:	f004 040f 	and.w	r4, r4, #15
   13e28:	3201      	adds	r2, #1
   13e2a:	5d34      	ldrb	r4, [r6, r4]
   13e2c:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   13e2e:	3301      	adds	r3, #1
   13e30:	428b      	cmp	r3, r1
   13e32:	d3ee      	bcc.n	13e12 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   13e34:	4806      	ldr	r0, [pc, #24]	; (13e50 <bt_hex_real+0x4c>)
   13e36:	2200      	movs	r2, #0
   13e38:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   13e3c:	bc70      	pop	{r4, r5, r6}
   13e3e:	4770      	bx	lr
	str[i * 2] = '\0';
   13e40:	4803      	ldr	r0, [pc, #12]	; (13e50 <bt_hex_real+0x4c>)
   13e42:	2200      	movs	r2, #0
   13e44:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   13e48:	4770      	bx	lr
   13e4a:	bf00      	nop
   13e4c:	00030568 	.word	0x00030568
   13e50:	20002644 	.word	0x20002644

00013e54 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   13e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e56:	b08b      	sub	sp, #44	; 0x2c
   13e58:	4604      	mov	r4, r0
	switch (addr->type) {
   13e5a:	7803      	ldrb	r3, [r0, #0]
   13e5c:	2b03      	cmp	r3, #3
   13e5e:	d82c      	bhi.n	13eba <bt_addr_le_str_real+0x66>
   13e60:	e8df f003 	tbb	[pc, r3]
   13e64:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   13e68:	4917      	ldr	r1, [pc, #92]	; (13ec8 <bt_addr_le_str_real+0x74>)
   13e6a:	a807      	add	r0, sp, #28
   13e6c:	f016 fc90 	bl	2a790 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   13e70:	7963      	ldrb	r3, [r4, #5]
   13e72:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   13e74:	78e1      	ldrb	r1, [r4, #3]
   13e76:	78a0      	ldrb	r0, [r4, #2]
   13e78:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13e7a:	4d14      	ldr	r5, [pc, #80]	; (13ecc <bt_addr_le_str_real+0x78>)
   13e7c:	af07      	add	r7, sp, #28
   13e7e:	9705      	str	r7, [sp, #20]
   13e80:	9604      	str	r6, [sp, #16]
   13e82:	9003      	str	r0, [sp, #12]
   13e84:	9102      	str	r1, [sp, #8]
   13e86:	9201      	str	r2, [sp, #4]
   13e88:	9300      	str	r3, [sp, #0]
   13e8a:	79a3      	ldrb	r3, [r4, #6]
   13e8c:	4a10      	ldr	r2, [pc, #64]	; (13ed0 <bt_addr_le_str_real+0x7c>)
   13e8e:	211e      	movs	r1, #30
   13e90:	4628      	mov	r0, r5
   13e92:	f014 fa64 	bl	2835e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   13e96:	4628      	mov	r0, r5
   13e98:	b00b      	add	sp, #44	; 0x2c
   13e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   13e9c:	490d      	ldr	r1, [pc, #52]	; (13ed4 <bt_addr_le_str_real+0x80>)
   13e9e:	a807      	add	r0, sp, #28
   13ea0:	f016 fc76 	bl	2a790 <strcpy>
		break;
   13ea4:	e7e4      	b.n	13e70 <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
   13ea6:	490c      	ldr	r1, [pc, #48]	; (13ed8 <bt_addr_le_str_real+0x84>)
   13ea8:	a807      	add	r0, sp, #28
   13eaa:	f016 fc71 	bl	2a790 <strcpy>
		break;
   13eae:	e7df      	b.n	13e70 <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
   13eb0:	490a      	ldr	r1, [pc, #40]	; (13edc <bt_addr_le_str_real+0x88>)
   13eb2:	a807      	add	r0, sp, #28
   13eb4:	f016 fc6c 	bl	2a790 <strcpy>
		break;
   13eb8:	e7da      	b.n	13e70 <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   13eba:	4a09      	ldr	r2, [pc, #36]	; (13ee0 <bt_addr_le_str_real+0x8c>)
   13ebc:	210a      	movs	r1, #10
   13ebe:	a807      	add	r0, sp, #28
   13ec0:	f014 fa4d 	bl	2835e <snprintk>
		break;
   13ec4:	e7d4      	b.n	13e70 <bt_addr_le_str_real+0x1c>
   13ec6:	bf00      	nop
   13ec8:	0002f5b8 	.word	0x0002f5b8
   13ecc:	200026c8 	.word	0x200026c8
   13ed0:	0002f5e8 	.word	0x0002f5e8
   13ed4:	0002f5c0 	.word	0x0002f5c0
   13ed8:	0002f5c8 	.word	0x0002f5c8
   13edc:	0002f5d4 	.word	0x0002f5d4
   13ee0:	0002f5e0 	.word	0x0002f5e0

00013ee4 <le_p256_pub_key>:
	net_buf_unref(buf);
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
}

static void le_p256_pub_key(struct net_buf *buf)
{
   13ee4:	b508      	push	{r3, lr}
	uint8_t status;

	net_buf_unref(buf);
   13ee6:	f009 f8f7 	bl	1d0d8 <net_buf_unref>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13eea:	f3bf 8f5b 	dmb	ish
   13eee:	4b12      	ldr	r3, [pc, #72]	; (13f38 <le_p256_pub_key+0x54>)
   13ef0:	681b      	ldr	r3, [r3, #0]
   13ef2:	f3bf 8f5b 	dmb	ish

	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   13ef6:	f013 0f02 	tst.w	r3, #2
   13efa:	d005      	beq.n	13f08 <le_p256_pub_key+0x24>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   13efc:	210c      	movs	r1, #12
	} else {
		k_sem_give(&cmd_sem);
		status = BT_HCI_ERR_SUCCESS;
	}

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   13efe:	f242 0025 	movw	r0, #8229	; 0x2025
   13f02:	f016 fd6e 	bl	2a9e2 <send_cmd_status>
}
   13f06:	bd08      	pop	{r3, pc}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13f08:	4b0b      	ldr	r3, [pc, #44]	; (13f38 <le_p256_pub_key+0x54>)
   13f0a:	f3bf 8f5b 	dmb	ish
   13f0e:	e853 2f00 	ldrex	r2, [r3]
   13f12:	f042 0101 	orr.w	r1, r2, #1
   13f16:	e843 1000 	strex	r0, r1, [r3]
   13f1a:	2800      	cmp	r0, #0
   13f1c:	d1f7      	bne.n	13f0e <le_p256_pub_key+0x2a>
   13f1e:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   13f22:	f012 0f01 	tst.w	r2, #1
   13f26:	d001      	beq.n	13f2c <le_p256_pub_key+0x48>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   13f28:	210c      	movs	r1, #12
   13f2a:	e7e8      	b.n	13efe <le_p256_pub_key+0x1a>
	z_impl_k_sem_give(sem);
   13f2c:	4803      	ldr	r0, [pc, #12]	; (13f3c <le_p256_pub_key+0x58>)
   13f2e:	f00e fcb3 	bl	22898 <z_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
   13f32:	2100      	movs	r1, #0
   13f34:	e7e3      	b.n	13efe <le_p256_pub_key+0x1a>
   13f36:	bf00      	nop
   13f38:	20002748 	.word	0x20002748
   13f3c:	2000083c 	.word	0x2000083c

00013f40 <generate_keys>:
{
   13f40:	b508      	push	{r3, lr}
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   13f42:	490b      	ldr	r1, [pc, #44]	; (13f70 <generate_keys+0x30>)
   13f44:	4a0b      	ldr	r2, [pc, #44]	; (13f74 <generate_keys+0x34>)
   13f46:	f101 0020 	add.w	r0, r1, #32
   13f4a:	f015 faad 	bl	294a8 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   13f4e:	b140      	cbz	r0, 13f62 <generate_keys+0x22>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   13f50:	2220      	movs	r2, #32
   13f52:	4909      	ldr	r1, [pc, #36]	; (13f78 <generate_keys+0x38>)
   13f54:	4806      	ldr	r0, [pc, #24]	; (13f70 <generate_keys+0x30>)
   13f56:	f016 fc75 	bl	2a844 <memcmp>
   13f5a:	2800      	cmp	r0, #0
   13f5c:	d0f1      	beq.n	13f42 <generate_keys+0x2>
	return 0;
   13f5e:	2000      	movs	r0, #0
   13f60:	e004      	b.n	13f6c <generate_keys+0x2c>
			BT_ERR("Failed to create ECC public/private pair");
   13f62:	2145      	movs	r1, #69	; 0x45
   13f64:	4805      	ldr	r0, [pc, #20]	; (13f7c <generate_keys+0x3c>)
   13f66:	f014 fd8d 	bl	28a84 <z_log_minimal_printk>
			return BT_HCI_ERR_UNSPECIFIED;
   13f6a:	201f      	movs	r0, #31
}
   13f6c:	bd08      	pop	{r3, pc}
   13f6e:	bf00      	nop
   13f70:	200026e8 	.word	0x200026e8
   13f74:	00030650 	.word	0x00030650
   13f78:	00030700 	.word	0x00030700
   13f7c:	00030584 	.word	0x00030584

00013f80 <emulate_le_p256_public_key_cmd>:
{
   13f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	status = generate_keys();
   13f82:	f7ff ffdd 	bl	13f40 <generate_keys>
   13f86:	4606      	mov	r6, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   13f88:	f04f 32ff 	mov.w	r2, #4294967295
   13f8c:	f04f 33ff 	mov.w	r3, #4294967295
   13f90:	2001      	movs	r0, #1
   13f92:	f000 fb99 	bl	146c8 <bt_buf_get_rx>
   13f96:	4604      	mov	r4, r0
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   13f98:	f100 0508 	add.w	r5, r0, #8
   13f9c:	2102      	movs	r1, #2
   13f9e:	4628      	mov	r0, r5
   13fa0:	f009 f9b2 	bl	1d308 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   13fa4:	223e      	movs	r2, #62	; 0x3e
   13fa6:	7002      	strb	r2, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   13fa8:	2242      	movs	r2, #66	; 0x42
   13faa:	7042      	strb	r2, [r0, #1]
   13fac:	2101      	movs	r1, #1
   13fae:	4628      	mov	r0, r5
   13fb0:	f009 f9aa 	bl	1d308 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   13fb4:	2308      	movs	r3, #8
   13fb6:	7003      	strb	r3, [r0, #0]
   13fb8:	2141      	movs	r1, #65	; 0x41
   13fba:	4628      	mov	r0, r5
   13fbc:	f009 f9a4 	bl	1d308 <net_buf_simple_add>
   13fc0:	4605      	mov	r5, r0
	evt->status = status;
   13fc2:	7006      	strb	r6, [r0, #0]
	if (status) {
   13fc4:	b1ae      	cbz	r6, 13ff2 <emulate_le_p256_public_key_cmd+0x72>
		(void)memset(evt->key, 0, sizeof(evt->key));
   13fc6:	2240      	movs	r2, #64	; 0x40
   13fc8:	2100      	movs	r1, #0
   13fca:	3001      	adds	r0, #1
   13fcc:	f016 fc8b 	bl	2a8e6 <memset>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13fd0:	4b2e      	ldr	r3, [pc, #184]	; (1408c <emulate_le_p256_public_key_cmd+0x10c>)
   13fd2:	f3bf 8f5b 	dmb	ish
   13fd6:	e853 2f00 	ldrex	r2, [r3]
   13fda:	f022 0201 	bic.w	r2, r2, #1
   13fde:	e843 2100 	strex	r1, r2, [r3]
   13fe2:	2900      	cmp	r1, #0
   13fe4:	d1f7      	bne.n	13fd6 <emulate_le_p256_public_key_cmd+0x56>
   13fe6:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   13fea:	4620      	mov	r0, r4
   13fec:	f001 ff54 	bl	15e98 <bt_recv>
}
   13ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   13ff2:	1c46      	adds	r6, r0, #1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   13ff4:	4b26      	ldr	r3, [pc, #152]	; (14090 <emulate_le_p256_public_key_cmd+0x110>)
   13ff6:	429e      	cmp	r6, r3
   13ff8:	d902      	bls.n	14000 <emulate_le_p256_public_key_cmd+0x80>
   13ffa:	3320      	adds	r3, #32
   13ffc:	429e      	cmp	r6, r3
   13ffe:	d213      	bcs.n	14028 <emulate_le_p256_public_key_cmd+0xa8>
   14000:	4b23      	ldr	r3, [pc, #140]	; (14090 <emulate_le_p256_public_key_cmd+0x110>)
   14002:	429e      	cmp	r6, r3
   14004:	d204      	bcs.n	14010 <emulate_le_p256_public_key_cmd+0x90>
   14006:	f106 0320 	add.w	r3, r6, #32
   1400a:	4a21      	ldr	r2, [pc, #132]	; (14090 <emulate_le_p256_public_key_cmd+0x110>)
   1400c:	4293      	cmp	r3, r2
   1400e:	d90b      	bls.n	14028 <emulate_le_p256_public_key_cmd+0xa8>
   14010:	4f20      	ldr	r7, [pc, #128]	; (14094 <emulate_le_p256_public_key_cmd+0x114>)
   14012:	f240 2217 	movw	r2, #535	; 0x217
   14016:	4639      	mov	r1, r7
   14018:	481f      	ldr	r0, [pc, #124]	; (14098 <emulate_le_p256_public_key_cmd+0x118>)
   1401a:	f014 f992 	bl	28342 <printk>
   1401e:	f240 2117 	movw	r1, #535	; 0x217
   14022:	4638      	mov	r0, r7
   14024:	f014 fd26 	bl	28a74 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   14028:	4b1c      	ldr	r3, [pc, #112]	; (1409c <emulate_le_p256_public_key_cmd+0x11c>)

	for (; length > 0; length--) {
   1402a:	2120      	movs	r1, #32
   1402c:	b139      	cbz	r1, 1403e <emulate_le_p256_public_key_cmd+0xbe>
		*pdst++ = *psrc--;
   1402e:	4632      	mov	r2, r6
   14030:	f813 0901 	ldrb.w	r0, [r3], #-1
   14034:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   14038:	3901      	subs	r1, #1
		*pdst++ = *psrc--;
   1403a:	4616      	mov	r6, r2
   1403c:	e7f6      	b.n	1402c <emulate_le_p256_public_key_cmd+0xac>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   1403e:	3521      	adds	r5, #33	; 0x21
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14040:	4b17      	ldr	r3, [pc, #92]	; (140a0 <emulate_le_p256_public_key_cmd+0x120>)
   14042:	429d      	cmp	r5, r3
   14044:	d902      	bls.n	1404c <emulate_le_p256_public_key_cmd+0xcc>
   14046:	3320      	adds	r3, #32
   14048:	429d      	cmp	r5, r3
   1404a:	d213      	bcs.n	14074 <emulate_le_p256_public_key_cmd+0xf4>
   1404c:	4b14      	ldr	r3, [pc, #80]	; (140a0 <emulate_le_p256_public_key_cmd+0x120>)
   1404e:	429d      	cmp	r5, r3
   14050:	d204      	bcs.n	1405c <emulate_le_p256_public_key_cmd+0xdc>
   14052:	f105 0320 	add.w	r3, r5, #32
   14056:	4a12      	ldr	r2, [pc, #72]	; (140a0 <emulate_le_p256_public_key_cmd+0x120>)
   14058:	4293      	cmp	r3, r2
   1405a:	d90b      	bls.n	14074 <emulate_le_p256_public_key_cmd+0xf4>
   1405c:	4e0d      	ldr	r6, [pc, #52]	; (14094 <emulate_le_p256_public_key_cmd+0x114>)
   1405e:	f240 2217 	movw	r2, #535	; 0x217
   14062:	4631      	mov	r1, r6
   14064:	480c      	ldr	r0, [pc, #48]	; (14098 <emulate_le_p256_public_key_cmd+0x118>)
   14066:	f014 f96c 	bl	28342 <printk>
   1406a:	f240 2117 	movw	r1, #535	; 0x217
   1406e:	4630      	mov	r0, r6
   14070:	f014 fd00 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   14074:	4b0b      	ldr	r3, [pc, #44]	; (140a4 <emulate_le_p256_public_key_cmd+0x124>)
	for (; length > 0; length--) {
   14076:	2120      	movs	r1, #32
   14078:	2900      	cmp	r1, #0
   1407a:	d0a9      	beq.n	13fd0 <emulate_le_p256_public_key_cmd+0x50>
		*pdst++ = *psrc--;
   1407c:	462a      	mov	r2, r5
   1407e:	f813 0901 	ldrb.w	r0, [r3], #-1
   14082:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   14086:	3901      	subs	r1, #1
		*pdst++ = *psrc--;
   14088:	4615      	mov	r5, r2
   1408a:	e7f5      	b.n	14078 <emulate_le_p256_public_key_cmd+0xf8>
   1408c:	20002748 	.word	0x20002748
   14090:	20002708 	.word	0x20002708
   14094:	000305b4 	.word	0x000305b4
   14098:	0002f968 	.word	0x0002f968
   1409c:	20002727 	.word	0x20002727
   140a0:	20002728 	.word	0x20002728
   140a4:	20002747 	.word	0x20002747

000140a8 <emulate_le_generate_dhkey>:
{
   140a8:	b570      	push	{r4, r5, r6, lr}
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   140aa:	493d      	ldr	r1, [pc, #244]	; (141a0 <emulate_le_generate_dhkey+0xf8>)
   140ac:	483d      	ldr	r0, [pc, #244]	; (141a4 <emulate_le_generate_dhkey+0xfc>)
   140ae:	f016 f949 	bl	2a344 <uECC_valid_public_key>
	if (ret < 0) {
   140b2:	1e02      	subs	r2, r0, #0
   140b4:	db44      	blt.n	14140 <emulate_le_generate_dhkey+0x98>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   140b6:	f3bf 8f5b 	dmb	ish
   140ba:	4b3b      	ldr	r3, [pc, #236]	; (141a8 <emulate_le_generate_dhkey+0x100>)
   140bc:	681b      	ldr	r3, [r3, #0]
   140be:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   140c2:	f013 0f04 	tst.w	r3, #4
   140c6:	d041      	beq.n	1414c <emulate_le_generate_dhkey+0xa4>
   140c8:	4938      	ldr	r1, [pc, #224]	; (141ac <emulate_le_generate_dhkey+0x104>)
   140ca:	4836      	ldr	r0, [pc, #216]	; (141a4 <emulate_le_generate_dhkey+0xfc>)
   140cc:	4b34      	ldr	r3, [pc, #208]	; (141a0 <emulate_le_generate_dhkey+0xf8>)
   140ce:	4602      	mov	r2, r0
   140d0:	f015 fa3b 	bl	2954a <uECC_shared_secret>
   140d4:	4606      	mov	r6, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   140d6:	f04f 32ff 	mov.w	r2, #4294967295
   140da:	f04f 33ff 	mov.w	r3, #4294967295
   140de:	2001      	movs	r0, #1
   140e0:	f000 faf2 	bl	146c8 <bt_buf_get_rx>
   140e4:	4605      	mov	r5, r0
   140e6:	f100 0408 	add.w	r4, r0, #8
   140ea:	2102      	movs	r1, #2
   140ec:	4620      	mov	r0, r4
   140ee:	f009 f90b 	bl	1d308 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   140f2:	233e      	movs	r3, #62	; 0x3e
   140f4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   140f6:	2322      	movs	r3, #34	; 0x22
   140f8:	7043      	strb	r3, [r0, #1]
   140fa:	2101      	movs	r1, #1
   140fc:	4620      	mov	r0, r4
   140fe:	f009 f903 	bl	1d308 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   14102:	2309      	movs	r3, #9
   14104:	7003      	strb	r3, [r0, #0]
   14106:	2121      	movs	r1, #33	; 0x21
   14108:	4620      	mov	r0, r4
   1410a:	f009 f8fd 	bl	1d308 <net_buf_simple_add>
	if (ret == TC_CRYPTO_FAIL) {
   1410e:	b9fe      	cbnz	r6, 14150 <emulate_le_generate_dhkey+0xa8>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   14110:	231f      	movs	r3, #31
   14112:	f800 3b01 	strb.w	r3, [r0], #1
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   14116:	2220      	movs	r2, #32
   14118:	21ff      	movs	r1, #255	; 0xff
   1411a:	f016 fbe4 	bl	2a8e6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1411e:	4b22      	ldr	r3, [pc, #136]	; (141a8 <emulate_le_generate_dhkey+0x100>)
   14120:	f3bf 8f5b 	dmb	ish
   14124:	e853 2f00 	ldrex	r2, [r3]
   14128:	f022 0202 	bic.w	r2, r2, #2
   1412c:	e843 2100 	strex	r1, r2, [r3]
   14130:	2900      	cmp	r1, #0
   14132:	d1f7      	bne.n	14124 <emulate_le_generate_dhkey+0x7c>
   14134:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   14138:	4628      	mov	r0, r5
   1413a:	f001 fead 	bl	15e98 <bt_recv>
}
   1413e:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("public key is not valid (ret %d)", ret);
   14140:	2145      	movs	r1, #69	; 0x45
   14142:	481b      	ldr	r0, [pc, #108]	; (141b0 <emulate_le_generate_dhkey+0x108>)
   14144:	f014 fc9e 	bl	28a84 <z_log_minimal_printk>
		ret = TC_CRYPTO_FAIL;
   14148:	2600      	movs	r6, #0
   1414a:	e7c4      	b.n	140d6 <emulate_le_generate_dhkey+0x2e>
		ret = uECC_shared_secret(ecc.public_key_be,
   1414c:	4919      	ldr	r1, [pc, #100]	; (141b4 <emulate_le_generate_dhkey+0x10c>)
   1414e:	e7bc      	b.n	140ca <emulate_le_generate_dhkey+0x22>
		evt->status = 0U;
   14150:	4604      	mov	r4, r0
   14152:	2300      	movs	r3, #0
   14154:	f804 3b01 	strb.w	r3, [r4], #1
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14158:	4b12      	ldr	r3, [pc, #72]	; (141a4 <emulate_le_generate_dhkey+0xfc>)
   1415a:	429c      	cmp	r4, r3
   1415c:	d902      	bls.n	14164 <emulate_le_generate_dhkey+0xbc>
   1415e:	3320      	adds	r3, #32
   14160:	429c      	cmp	r4, r3
   14162:	d213      	bcs.n	1418c <emulate_le_generate_dhkey+0xe4>
   14164:	4b0f      	ldr	r3, [pc, #60]	; (141a4 <emulate_le_generate_dhkey+0xfc>)
   14166:	429c      	cmp	r4, r3
   14168:	d204      	bcs.n	14174 <emulate_le_generate_dhkey+0xcc>
   1416a:	f104 0320 	add.w	r3, r4, #32
   1416e:	4a0d      	ldr	r2, [pc, #52]	; (141a4 <emulate_le_generate_dhkey+0xfc>)
   14170:	4293      	cmp	r3, r2
   14172:	d90b      	bls.n	1418c <emulate_le_generate_dhkey+0xe4>
   14174:	4e10      	ldr	r6, [pc, #64]	; (141b8 <emulate_le_generate_dhkey+0x110>)
   14176:	f240 2217 	movw	r2, #535	; 0x217
   1417a:	4631      	mov	r1, r6
   1417c:	480f      	ldr	r0, [pc, #60]	; (141bc <emulate_le_generate_dhkey+0x114>)
   1417e:	f014 f8e0 	bl	28342 <printk>
   14182:	f240 2117 	movw	r1, #535	; 0x217
   14186:	4630      	mov	r0, r6
   14188:	f014 fc74 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1418c:	4b0c      	ldr	r3, [pc, #48]	; (141c0 <emulate_le_generate_dhkey+0x118>)
	for (; length > 0; length--) {
   1418e:	2220      	movs	r2, #32
   14190:	2a00      	cmp	r2, #0
   14192:	d0c4      	beq.n	1411e <emulate_le_generate_dhkey+0x76>
		*pdst++ = *psrc--;
   14194:	f813 1901 	ldrb.w	r1, [r3], #-1
   14198:	f804 1b01 	strb.w	r1, [r4], #1
	for (; length > 0; length--) {
   1419c:	3a01      	subs	r2, #1
   1419e:	e7f7      	b.n	14190 <emulate_le_generate_dhkey+0xe8>
   141a0:	00030650 	.word	0x00030650
   141a4:	20002708 	.word	0x20002708
   141a8:	20002748 	.word	0x20002748
   141ac:	00030700 	.word	0x00030700
   141b0:	000305e0 	.word	0x000305e0
   141b4:	200026e8 	.word	0x200026e8
   141b8:	000305b4 	.word	0x000305b4
   141bc:	0002f968 	.word	0x0002f968
   141c0:	20002727 	.word	0x20002727

000141c4 <ecc_thread>:
{
   141c4:	b510      	push	{r4, lr}
   141c6:	e00a      	b.n	141de <ecc_thread+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   141c8:	f3bf 8f5b 	dmb	ish
   141cc:	4b13      	ldr	r3, [pc, #76]	; (1421c <ecc_thread+0x58>)
   141ce:	681b      	ldr	r3, [r3, #0]
   141d0:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   141d4:	f013 0f02 	tst.w	r3, #2
   141d8:	d014      	beq.n	14204 <ecc_thread+0x40>
			emulate_le_generate_dhkey();
   141da:	f7ff ff65 	bl	140a8 <emulate_le_generate_dhkey>
	return z_impl_k_sem_take(sem, timeout);
   141de:	f04f 32ff 	mov.w	r2, #4294967295
   141e2:	f04f 33ff 	mov.w	r3, #4294967295
   141e6:	480e      	ldr	r0, [pc, #56]	; (14220 <ecc_thread+0x5c>)
   141e8:	f00e fb96 	bl	22918 <z_impl_k_sem_take>
   141ec:	f3bf 8f5b 	dmb	ish
   141f0:	4b0a      	ldr	r3, [pc, #40]	; (1421c <ecc_thread+0x58>)
   141f2:	681b      	ldr	r3, [r3, #0]
   141f4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   141f8:	f013 0f01 	tst.w	r3, #1
   141fc:	d0e4      	beq.n	141c8 <ecc_thread+0x4>
			emulate_le_p256_public_key_cmd();
   141fe:	f7ff febf 	bl	13f80 <emulate_le_p256_public_key_cmd>
   14202:	e7ec      	b.n	141de <ecc_thread+0x1a>
			__ASSERT(0, "Unhandled ECC command");
   14204:	4c07      	ldr	r4, [pc, #28]	; (14224 <ecc_thread+0x60>)
   14206:	22dd      	movs	r2, #221	; 0xdd
   14208:	4621      	mov	r1, r4
   1420a:	4807      	ldr	r0, [pc, #28]	; (14228 <ecc_thread+0x64>)
   1420c:	f014 f899 	bl	28342 <printk>
   14210:	21dd      	movs	r1, #221	; 0xdd
   14212:	4620      	mov	r0, r4
   14214:	f014 fc2e 	bl	28a74 <assert_post_action>
	while (true) {
   14218:	e7e1      	b.n	141de <ecc_thread+0x1a>
   1421a:	bf00      	nop
   1421c:	20002748 	.word	0x20002748
   14220:	2000083c 	.word	0x2000083c
   14224:	00030608 	.word	0x00030608
   14228:	0002f968 	.word	0x0002f968

0001422c <le_gen_dhkey>:
   1422c:	f3bf 8f5b 	dmb	ish
   14230:	4b48      	ldr	r3, [pc, #288]	; (14354 <le_gen_dhkey+0x128>)
   14232:	681b      	ldr	r3, [r3, #0]
   14234:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   14238:	f013 0f01 	tst.w	r3, #1
   1423c:	f040 8083 	bne.w	14346 <le_gen_dhkey+0x11a>
{
   14240:	b570      	push	{r4, r5, r6, lr}
   14242:	4604      	mov	r4, r0
   14244:	460d      	mov	r5, r1
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   14246:	2901      	cmp	r1, #1
   14248:	d87f      	bhi.n	1434a <le_gen_dhkey+0x11e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1424a:	4b42      	ldr	r3, [pc, #264]	; (14354 <le_gen_dhkey+0x128>)
   1424c:	f3bf 8f5b 	dmb	ish
   14250:	e853 2f00 	ldrex	r2, [r3]
   14254:	f042 0102 	orr.w	r1, r2, #2
   14258:	e843 1000 	strex	r0, r1, [r3]
   1425c:	2800      	cmp	r0, #0
   1425e:	d1f7      	bne.n	14250 <le_gen_dhkey+0x24>
   14260:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   14264:	f012 0f02 	tst.w	r2, #2
   14268:	d171      	bne.n	1434e <le_gen_dhkey+0x122>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1426a:	4b3b      	ldr	r3, [pc, #236]	; (14358 <le_gen_dhkey+0x12c>)
   1426c:	429c      	cmp	r4, r3
   1426e:	d204      	bcs.n	1427a <le_gen_dhkey+0x4e>
   14270:	f104 0320 	add.w	r3, r4, #32
   14274:	4a38      	ldr	r2, [pc, #224]	; (14358 <le_gen_dhkey+0x12c>)
   14276:	4293      	cmp	r3, r2
   14278:	d911      	bls.n	1429e <le_gen_dhkey+0x72>
   1427a:	4b37      	ldr	r3, [pc, #220]	; (14358 <le_gen_dhkey+0x12c>)
   1427c:	429c      	cmp	r4, r3
   1427e:	d902      	bls.n	14286 <le_gen_dhkey+0x5a>
   14280:	3320      	adds	r3, #32
   14282:	429c      	cmp	r4, r3
   14284:	d20b      	bcs.n	1429e <le_gen_dhkey+0x72>
   14286:	4e35      	ldr	r6, [pc, #212]	; (1435c <le_gen_dhkey+0x130>)
   14288:	f240 2217 	movw	r2, #535	; 0x217
   1428c:	4631      	mov	r1, r6
   1428e:	4834      	ldr	r0, [pc, #208]	; (14360 <le_gen_dhkey+0x134>)
   14290:	f014 f857 	bl	28342 <printk>
   14294:	f240 2117 	movw	r1, #535	; 0x217
   14298:	4630      	mov	r0, r6
   1429a:	f014 fbeb 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1429e:	f104 021f 	add.w	r2, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
   142a2:	4b2d      	ldr	r3, [pc, #180]	; (14358 <le_gen_dhkey+0x12c>)
	for (; length > 0; length--) {
   142a4:	2120      	movs	r1, #32
   142a6:	b129      	cbz	r1, 142b4 <le_gen_dhkey+0x88>
		*pdst++ = *psrc--;
   142a8:	f812 0901 	ldrb.w	r0, [r2], #-1
   142ac:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   142b0:	3901      	subs	r1, #1
   142b2:	e7f8      	b.n	142a6 <le_gen_dhkey+0x7a>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   142b4:	3420      	adds	r4, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   142b6:	4b2b      	ldr	r3, [pc, #172]	; (14364 <le_gen_dhkey+0x138>)
   142b8:	429c      	cmp	r4, r3
   142ba:	d204      	bcs.n	142c6 <le_gen_dhkey+0x9a>
   142bc:	f104 0320 	add.w	r3, r4, #32
   142c0:	4a28      	ldr	r2, [pc, #160]	; (14364 <le_gen_dhkey+0x138>)
   142c2:	4293      	cmp	r3, r2
   142c4:	d911      	bls.n	142ea <le_gen_dhkey+0xbe>
   142c6:	4b27      	ldr	r3, [pc, #156]	; (14364 <le_gen_dhkey+0x138>)
   142c8:	429c      	cmp	r4, r3
   142ca:	d902      	bls.n	142d2 <le_gen_dhkey+0xa6>
   142cc:	3320      	adds	r3, #32
   142ce:	429c      	cmp	r4, r3
   142d0:	d20b      	bcs.n	142ea <le_gen_dhkey+0xbe>
   142d2:	4e22      	ldr	r6, [pc, #136]	; (1435c <le_gen_dhkey+0x130>)
   142d4:	f240 2217 	movw	r2, #535	; 0x217
   142d8:	4631      	mov	r1, r6
   142da:	4821      	ldr	r0, [pc, #132]	; (14360 <le_gen_dhkey+0x134>)
   142dc:	f014 f831 	bl	28342 <printk>
   142e0:	f240 2117 	movw	r1, #535	; 0x217
   142e4:	4630      	mov	r0, r6
   142e6:	f014 fbc5 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   142ea:	f104 001f 	add.w	r0, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
   142ee:	4b1d      	ldr	r3, [pc, #116]	; (14364 <le_gen_dhkey+0x138>)
	for (; length > 0; length--) {
   142f0:	2220      	movs	r2, #32
   142f2:	e004      	b.n	142fe <le_gen_dhkey+0xd2>
		*pdst++ = *psrc--;
   142f4:	f810 1901 	ldrb.w	r1, [r0], #-1
   142f8:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   142fc:	3a01      	subs	r2, #1
   142fe:	2a00      	cmp	r2, #0
   14300:	d1f8      	bne.n	142f4 <le_gen_dhkey+0xc8>
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   14302:	2d01      	cmp	r5, #1
   14304:	d111      	bne.n	1432a <le_gen_dhkey+0xfe>
   14306:	4b13      	ldr	r3, [pc, #76]	; (14354 <le_gen_dhkey+0x128>)
   14308:	f3bf 8f5b 	dmb	ish
   1430c:	e853 2f00 	ldrex	r2, [r3]
   14310:	f042 0204 	orr.w	r2, r2, #4
   14314:	e843 2100 	strex	r1, r2, [r3]
   14318:	2900      	cmp	r1, #0
   1431a:	d1f7      	bne.n	1430c <le_gen_dhkey+0xe0>
   1431c:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   14320:	4811      	ldr	r0, [pc, #68]	; (14368 <le_gen_dhkey+0x13c>)
   14322:	f00e fab9 	bl	22898 <z_impl_k_sem_give>
	return BT_HCI_ERR_SUCCESS;
   14326:	2000      	movs	r0, #0
   14328:	e010      	b.n	1434c <le_gen_dhkey+0x120>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1432a:	4b0a      	ldr	r3, [pc, #40]	; (14354 <le_gen_dhkey+0x128>)
   1432c:	f3bf 8f5b 	dmb	ish
   14330:	e853 2f00 	ldrex	r2, [r3]
   14334:	f022 0204 	bic.w	r2, r2, #4
   14338:	e843 2100 	strex	r1, r2, [r3]
   1433c:	2900      	cmp	r1, #0
   1433e:	d1f7      	bne.n	14330 <le_gen_dhkey+0x104>
   14340:	f3bf 8f5b 	dmb	ish
   14344:	e7ec      	b.n	14320 <le_gen_dhkey+0xf4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14346:	200c      	movs	r0, #12
}
   14348:	4770      	bx	lr
		return BT_HCI_ERR_INVALID_PARAM;
   1434a:	2012      	movs	r0, #18
}
   1434c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1434e:	200c      	movs	r0, #12
   14350:	e7fc      	b.n	1434c <le_gen_dhkey+0x120>
   14352:	bf00      	nop
   14354:	20002748 	.word	0x20002748
   14358:	20002708 	.word	0x20002708
   1435c:	000305b4 	.word	0x000305b4
   14360:	0002f968 	.word	0x0002f968
   14364:	20002728 	.word	0x20002728
   14368:	2000083c 	.word	0x2000083c

0001436c <bt_hci_ecc_send>:

int bt_hci_ecc_send(struct net_buf *buf)
{
   1436c:	b510      	push	{r4, lr}
   1436e:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14370:	7d03      	ldrb	r3, [r0, #20]
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   14372:	bb7b      	cbnz	r3, 143d4 <bt_hci_ecc_send+0x68>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   14374:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   14376:	881b      	ldrh	r3, [r3, #0]
   14378:	f242 0226 	movw	r2, #8230	; 0x2026
   1437c:	4293      	cmp	r3, r2
   1437e:	d01e      	beq.n	143be <bt_hci_ecc_send+0x52>
   14380:	d810      	bhi.n	143a4 <bt_hci_ecc_send+0x38>
   14382:	f242 0201 	movw	r2, #8193	; 0x2001
   14386:	4293      	cmp	r3, r2
   14388:	d022      	beq.n	143d0 <bt_hci_ecc_send+0x64>
   1438a:	f242 0225 	movw	r2, #8229	; 0x2025
   1438e:	4293      	cmp	r3, r2
   14390:	d120      	bne.n	143d4 <bt_hci_ecc_send+0x68>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   14392:	2103      	movs	r1, #3
   14394:	3008      	adds	r0, #8
   14396:	f008 ff59 	bl	1d24c <net_buf_simple_pull>
		case BT_HCI_OP_LE_P256_PUBLIC_KEY:
			net_buf_pull(buf, sizeof(*chdr));
			le_p256_pub_key(buf);
   1439a:	4620      	mov	r0, r4
   1439c:	f7ff fda2 	bl	13ee4 <le_p256_pub_key>
			return 0;
   143a0:	2000      	movs	r0, #0
   143a2:	e01d      	b.n	143e0 <bt_hci_ecc_send+0x74>
		switch (sys_le16_to_cpu(chdr->opcode)) {
   143a4:	f242 025e 	movw	r2, #8286	; 0x205e
   143a8:	4293      	cmp	r3, r2
   143aa:	d113      	bne.n	143d4 <bt_hci_ecc_send+0x68>
   143ac:	2103      	movs	r1, #3
   143ae:	3008      	adds	r0, #8
   143b0:	f008 ff4c 	bl	1d24c <net_buf_simple_pull>
			net_buf_pull(buf, sizeof(*chdr));
			le_gen_dhkey_v1(buf);
			return 0;
		case BT_HCI_OP_LE_GENERATE_DHKEY_V2:
			net_buf_pull(buf, sizeof(*chdr));
			le_gen_dhkey_v2(buf);
   143b4:	4620      	mov	r0, r4
   143b6:	f016 fb48 	bl	2aa4a <le_gen_dhkey_v2>
			return 0;
   143ba:	2000      	movs	r0, #0
   143bc:	e010      	b.n	143e0 <bt_hci_ecc_send+0x74>
   143be:	2103      	movs	r1, #3
   143c0:	3008      	adds	r0, #8
   143c2:	f008 ff43 	bl	1d24c <net_buf_simple_pull>
			le_gen_dhkey_v1(buf);
   143c6:	4620      	mov	r0, r4
   143c8:	f016 fb2f 	bl	2aa2a <le_gen_dhkey_v1>
			return 0;
   143cc:	2000      	movs	r0, #0
   143ce:	e007      	b.n	143e0 <bt_hci_ecc_send+0x74>
		case BT_HCI_OP_LE_SET_EVENT_MASK:
			clear_ecc_events(buf);
   143d0:	f016 fafd 	bl	2a9ce <clear_ecc_events>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   143d4:	4b03      	ldr	r3, [pc, #12]	; (143e4 <bt_hci_ecc_send+0x78>)
   143d6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
   143da:	691b      	ldr	r3, [r3, #16]
   143dc:	4620      	mov	r0, r4
   143de:	4798      	blx	r3
}
   143e0:	bd10      	pop	{r4, pc}
   143e2:	bf00      	nop
   143e4:	200002a8 	.word	0x200002a8

000143e8 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   143e8:	b510      	push	{r4, lr}
   143ea:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   143ec:	4c0c      	ldr	r4, [pc, #48]	; (14420 <bt_hci_ecc_init+0x38>)
   143ee:	2200      	movs	r2, #0
   143f0:	2300      	movs	r3, #0
   143f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   143f6:	2300      	movs	r3, #0
   143f8:	9304      	str	r3, [sp, #16]
   143fa:	220a      	movs	r2, #10
   143fc:	9203      	str	r2, [sp, #12]
   143fe:	9302      	str	r3, [sp, #8]
   14400:	9301      	str	r3, [sp, #4]
   14402:	9300      	str	r3, [sp, #0]
   14404:	4b07      	ldr	r3, [pc, #28]	; (14424 <bt_hci_ecc_init+0x3c>)
   14406:	f44f 628f 	mov.w	r2, #1144	; 0x478
   1440a:	4907      	ldr	r1, [pc, #28]	; (14428 <bt_hci_ecc_init+0x40>)
   1440c:	4620      	mov	r0, r4
   1440e:	f00d fe5d 	bl	220cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14412:	4906      	ldr	r1, [pc, #24]	; (1442c <bt_hci_ecc_init+0x44>)
   14414:	4620      	mov	r0, r4
   14416:	f00d fd1b 	bl	21e50 <z_impl_k_thread_name_set>
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   1441a:	b008      	add	sp, #32
   1441c:	bd10      	pop	{r4, pc}
   1441e:	bf00      	nop
   14420:	200015d0 	.word	0x200015d0
   14424:	000141c5 	.word	0x000141c5
   14428:	20004140 	.word	0x20004140
   1442c:	0003063c 	.word	0x0003063c

00014430 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   14430:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   14432:	2149      	movs	r1, #73	; 0x49
   14434:	4808      	ldr	r0, [pc, #32]	; (14458 <save_id+0x28>)
   14436:	f014 fb25 	bl	28a84 <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   1443a:	4908      	ldr	r1, [pc, #32]	; (1445c <save_id+0x2c>)
   1443c:	79ca      	ldrb	r2, [r1, #7]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   1443e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   14442:	4807      	ldr	r0, [pc, #28]	; (14460 <save_id+0x30>)
   14444:	f7fd fd0c 	bl	11e60 <settings_save_one>
	if (err) {
   14448:	b900      	cbnz	r0, 1444c <save_id+0x1c>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   1444a:	bd08      	pop	{r3, pc}
   1444c:	4602      	mov	r2, r0
		BT_ERR("Failed to save ID (err %d)", err);
   1444e:	2145      	movs	r1, #69	; 0x45
   14450:	4804      	ldr	r0, [pc, #16]	; (14464 <save_id+0x34>)
   14452:	f014 fb17 	bl	28a84 <z_log_minimal_printk>
}
   14456:	e7f8      	b.n	1444a <save_id+0x1a>
   14458:	00030720 	.word	0x00030720
   1445c:	200002a8 	.word	0x200002a8
   14460:	00030730 	.word	0x00030730
   14464:	00030738 	.word	0x00030738

00014468 <set>:
{
   14468:	b5f0      	push	{r4, r5, r6, r7, lr}
   1446a:	b083      	sub	sp, #12
	if (!name) {
   1446c:	b378      	cbz	r0, 144ce <set+0x66>
   1446e:	4616      	mov	r6, r2
   14470:	461d      	mov	r5, r3
   14472:	4604      	mov	r4, r0
	len = settings_name_next(name, &next);
   14474:	a901      	add	r1, sp, #4
   14476:	f014 ff0d 	bl	29294 <settings_name_next>
   1447a:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   1447c:	4926      	ldr	r1, [pc, #152]	; (14518 <set+0xb0>)
   1447e:	4620      	mov	r0, r4
   14480:	f016 f9c5 	bl	2a80e <strncmp>
   14484:	4607      	mov	r7, r0
   14486:	2800      	cmp	r0, #0
   14488:	d143      	bne.n	14512 <set+0xaa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1448a:	f3bf 8f5b 	dmb	ish
   1448e:	4b23      	ldr	r3, [pc, #140]	; (1451c <set+0xb4>)
   14490:	6819      	ldr	r1, [r3, #0]
   14492:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14496:	f3c1 0480 	ubfx	r4, r1, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   1449a:	f011 0f04 	tst.w	r1, #4
   1449e:	d11d      	bne.n	144dc <set+0x74>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   144a0:	2207      	movs	r2, #7
   144a2:	491f      	ldr	r1, [pc, #124]	; (14520 <set+0xb8>)
   144a4:	4628      	mov	r0, r5
   144a6:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   144a8:	2806      	cmp	r0, #6
   144aa:	d823      	bhi.n	144f4 <set+0x8c>
			if (len < 0) {
   144ac:	2800      	cmp	r0, #0
   144ae:	db1b      	blt.n	144e8 <set+0x80>
				BT_ERR("Invalid length ID address in storage");
   144b0:	2145      	movs	r1, #69	; 0x45
   144b2:	481c      	ldr	r0, [pc, #112]	; (14524 <set+0xbc>)
   144b4:	f014 fae6 	bl	28a84 <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   144b8:	4d19      	ldr	r5, [pc, #100]	; (14520 <set+0xb8>)
   144ba:	2207      	movs	r2, #7
   144bc:	2100      	movs	r1, #0
   144be:	4628      	mov	r0, r5
   144c0:	f016 fa11 	bl	2a8e6 <memset>
			bt_dev.id_count = 0U;
   144c4:	2300      	movs	r3, #0
   144c6:	71eb      	strb	r3, [r5, #7]
}
   144c8:	4620      	mov	r0, r4
   144ca:	b003      	add	sp, #12
   144cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Insufficient number of arguments");
   144ce:	2145      	movs	r1, #69	; 0x45
   144d0:	4815      	ldr	r0, [pc, #84]	; (14528 <set+0xc0>)
   144d2:	f014 fad7 	bl	28a84 <z_log_minimal_printk>
		return -ENOENT;
   144d6:	f06f 0401 	mvn.w	r4, #1
   144da:	e7f5      	b.n	144c8 <set+0x60>
			BT_WARN("Ignoring identities stored in flash");
   144dc:	2157      	movs	r1, #87	; 0x57
   144de:	4813      	ldr	r0, [pc, #76]	; (1452c <set+0xc4>)
   144e0:	f014 fad0 	bl	28a84 <z_log_minimal_printk>
			return 0;
   144e4:	463c      	mov	r4, r7
   144e6:	e7ef      	b.n	144c8 <set+0x60>
				BT_ERR("Failed to read ID address from storage"
   144e8:	4602      	mov	r2, r0
   144ea:	2145      	movs	r1, #69	; 0x45
   144ec:	4810      	ldr	r0, [pc, #64]	; (14530 <set+0xc8>)
   144ee:	f014 fac9 	bl	28a84 <z_log_minimal_printk>
   144f2:	e7e1      	b.n	144b8 <set+0x50>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   144f4:	4b0f      	ldr	r3, [pc, #60]	; (14534 <set+0xcc>)
   144f6:	fba3 2300 	umull	r2, r3, r3, r0
   144fa:	1ac2      	subs	r2, r0, r3
   144fc:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   14500:	f3c2 0287 	ubfx	r2, r2, #2, #8
   14504:	4b06      	ldr	r3, [pc, #24]	; (14520 <set+0xb8>)
   14506:	71da      	strb	r2, [r3, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   14508:	4623      	mov	r3, r4
   1450a:	4293      	cmp	r3, r2
   1450c:	dadc      	bge.n	144c8 <set+0x60>
   1450e:	3301      	adds	r3, #1
   14510:	e7fb      	b.n	1450a <set+0xa2>
	return -ENOENT;
   14512:	f06f 0401 	mvn.w	r4, #1
   14516:	e7d7      	b.n	144c8 <set+0x60>
   14518:	00030780 	.word	0x00030780
   1451c:	20000374 	.word	0x20000374
   14520:	200002a8 	.word	0x200002a8
   14524:	000307e8 	.word	0x000307e8
   14528:	00030758 	.word	0x00030758
   1452c:	00030784 	.word	0x00030784
   14530:	000307b0 	.word	0x000307b0
   14534:	24924925 	.word	0x24924925

00014538 <bt_settings_encode_key>:
{
   14538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1453c:	b088      	sub	sp, #32
   1453e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	if (key) {
   14540:	b1dc      	cbz	r4, 1457a <bt_settings_encode_key+0x42>
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   14542:	799d      	ldrb	r5, [r3, #6]
   14544:	795e      	ldrb	r6, [r3, #5]
   14546:	791f      	ldrb	r7, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   14548:	f893 c003 	ldrb.w	ip, [r3, #3]
   1454c:	f893 e002 	ldrb.w	lr, [r3, #2]
   14550:	f893 8001 	ldrb.w	r8, [r3, #1]
			 addr->type, key);
   14554:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   14556:	9407      	str	r4, [sp, #28]
   14558:	9306      	str	r3, [sp, #24]
   1455a:	f8cd 8014 	str.w	r8, [sp, #20]
   1455e:	f8cd e010 	str.w	lr, [sp, #16]
   14562:	f8cd c00c 	str.w	ip, [sp, #12]
   14566:	9702      	str	r7, [sp, #8]
   14568:	9601      	str	r6, [sp, #4]
   1456a:	9500      	str	r5, [sp, #0]
   1456c:	4613      	mov	r3, r2
   1456e:	4a0e      	ldr	r2, [pc, #56]	; (145a8 <bt_settings_encode_key+0x70>)
   14570:	f013 fef5 	bl	2835e <snprintk>
}
   14574:	b008      	add	sp, #32
   14576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1457a:	799c      	ldrb	r4, [r3, #6]
   1457c:	795d      	ldrb	r5, [r3, #5]
   1457e:	791e      	ldrb	r6, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   14580:	78df      	ldrb	r7, [r3, #3]
   14582:	f893 c002 	ldrb.w	ip, [r3, #2]
   14586:	f893 e001 	ldrb.w	lr, [r3, #1]
			 addr->type);
   1458a:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   1458c:	9306      	str	r3, [sp, #24]
   1458e:	f8cd e014 	str.w	lr, [sp, #20]
   14592:	f8cd c010 	str.w	ip, [sp, #16]
   14596:	9703      	str	r7, [sp, #12]
   14598:	9602      	str	r6, [sp, #8]
   1459a:	9501      	str	r5, [sp, #4]
   1459c:	9400      	str	r4, [sp, #0]
   1459e:	4613      	mov	r3, r2
   145a0:	4a02      	ldr	r2, [pc, #8]	; (145ac <bt_settings_encode_key+0x74>)
   145a2:	f013 fedc 	bl	2835e <snprintk>
}
   145a6:	e7e5      	b.n	14574 <bt_settings_encode_key+0x3c>
   145a8:	00030814 	.word	0x00030814
   145ac:	00030838 	.word	0x00030838

000145b0 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
   145b0:	b508      	push	{r3, lr}
	k_work_submit(&save_id_work);
   145b2:	4802      	ldr	r0, [pc, #8]	; (145bc <bt_settings_save_id+0xc>)
   145b4:	f00e fd16 	bl	22fe4 <k_work_submit>
}
   145b8:	bd08      	pop	{r3, pc}
   145ba:	bf00      	nop
   145bc:	2000055c 	.word	0x2000055c

000145c0 <commit>:

static int commit(void)
{
   145c0:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   145c2:	4b1d      	ldr	r3, [pc, #116]	; (14638 <commit+0x78>)
   145c4:	79db      	ldrb	r3, [r3, #7]
   145c6:	b30b      	cbz	r3, 1460c <commit+0x4c>
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!bt_dev.id_count) {
   145c8:	4b1b      	ldr	r3, [pc, #108]	; (14638 <commit+0x78>)
   145ca:	79db      	ldrb	r3, [r3, #7]
   145cc:	b91b      	cbnz	r3, 145d6 <commit+0x16>
		err = bt_setup_random_id_addr();
   145ce:	f002 f883 	bl	166d8 <bt_setup_random_id_addr>
		if (err) {
   145d2:	4604      	mov	r4, r0
   145d4:	bb20      	cbnz	r0, 14620 <commit+0x60>
   145d6:	f3bf 8f5b 	dmb	ish
   145da:	4b18      	ldr	r3, [pc, #96]	; (1463c <commit+0x7c>)
   145dc:	681b      	ldr	r3, [r3, #0]
   145de:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   145e2:	f013 0f02 	tst.w	r3, #2
   145e6:	d020      	beq.n	1462a <commit+0x6a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145e8:	4b14      	ldr	r3, [pc, #80]	; (1463c <commit+0x7c>)
   145ea:	f3bf 8f5b 	dmb	ish
   145ee:	e853 4f00 	ldrex	r4, [r3]
   145f2:	f424 4280 	bic.w	r2, r4, #16384	; 0x4000
   145f6:	e843 2100 	strex	r1, r2, [r3]
   145fa:	2900      	cmp	r1, #0
   145fc:	d1f7      	bne.n	145ee <commit+0x2e>
   145fe:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   14602:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   14606:	d113      	bne.n	14630 <commit+0x70>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   14608:	4620      	mov	r0, r4
   1460a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   1460c:	f002 f80c 	bl	16628 <bt_setup_public_id_addr>
		if (err) {
   14610:	4604      	mov	r4, r0
   14612:	2800      	cmp	r0, #0
   14614:	d0d8      	beq.n	145c8 <commit+0x8>
			BT_ERR("Unable to setup an identity address");
   14616:	2145      	movs	r1, #69	; 0x45
   14618:	4809      	ldr	r0, [pc, #36]	; (14640 <commit+0x80>)
   1461a:	f014 fa33 	bl	28a84 <z_log_minimal_printk>
			return err;
   1461e:	e7f3      	b.n	14608 <commit+0x48>
			BT_ERR("Unable to setup an identity address");
   14620:	2145      	movs	r1, #69	; 0x45
   14622:	4807      	ldr	r0, [pc, #28]	; (14640 <commit+0x80>)
   14624:	f014 fa2e 	bl	28a84 <z_log_minimal_printk>
			return err;
   14628:	e7ee      	b.n	14608 <commit+0x48>
		bt_finalize_init();
   1462a:	f001 fc91 	bl	15f50 <bt_finalize_init>
   1462e:	e7db      	b.n	145e8 <commit+0x28>
		bt_settings_save_id();
   14630:	f7ff ffbe 	bl	145b0 <bt_settings_save_id>
	return 0;
   14634:	2400      	movs	r4, #0
   14636:	e7e7      	b.n	14608 <commit+0x48>
   14638:	200002a8 	.word	0x200002a8
   1463c:	20000374 	.word	0x20000374
   14640:	0003085c 	.word	0x0003085c

00014644 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   14644:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   14646:	f7fd fda3 	bl	12190 <settings_subsys_init>
	if (err) {
   1464a:	4604      	mov	r4, r0
   1464c:	b908      	cbnz	r0, 14652 <bt_settings_init+0xe>
		BT_ERR("settings_subsys_init failed (err %d)", err);
		return err;
	}

	return 0;
}
   1464e:	4620      	mov	r0, r4
   14650:	bd10      	pop	{r4, pc}
		BT_ERR("settings_subsys_init failed (err %d)", err);
   14652:	4602      	mov	r2, r0
   14654:	2145      	movs	r1, #69	; 0x45
   14656:	4802      	ldr	r0, [pc, #8]	; (14660 <bt_settings_init+0x1c>)
   14658:	f014 fa14 	bl	28a84 <z_log_minimal_printk>
		return err;
   1465c:	e7f7      	b.n	1464e <bt_settings_init+0xa>
   1465e:	bf00      	nop
   14660:	00030888 	.word	0x00030888

00014664 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14664:	b570      	push	{r4, r5, r6, lr}
   14666:	4605      	mov	r5, r0
   14668:	460c      	mov	r4, r1
	switch (src->type) {
   1466a:	7803      	ldrb	r3, [r0, #0]
   1466c:	2b01      	cmp	r3, #1
   1466e:	d010      	beq.n	14692 <uuid_to_uuid128+0x2e>
   14670:	2b02      	cmp	r3, #2
   14672:	d020      	beq.n	146b6 <uuid_to_uuid128+0x52>
   14674:	b103      	cbz	r3, 14678 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14676:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
   14678:	4e12      	ldr	r6, [pc, #72]	; (146c4 <uuid_to_uuid128+0x60>)
   1467a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1467c:	6020      	str	r0, [r4, #0]
   1467e:	6061      	str	r1, [r4, #4]
   14680:	60a2      	str	r2, [r4, #8]
   14682:	60e3      	str	r3, [r4, #12]
   14684:	7833      	ldrb	r3, [r6, #0]
   14686:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   14688:	886b      	ldrh	r3, [r5, #2]
	dst[0] = val;
   1468a:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   1468c:	0a1b      	lsrs	r3, r3, #8
   1468e:	73a3      	strb	r3, [r4, #14]
}
   14690:	e7f1      	b.n	14676 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   14692:	4e0c      	ldr	r6, [pc, #48]	; (146c4 <uuid_to_uuid128+0x60>)
   14694:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14696:	6020      	str	r0, [r4, #0]
   14698:	6061      	str	r1, [r4, #4]
   1469a:	60a2      	str	r2, [r4, #8]
   1469c:	60e3      	str	r3, [r4, #12]
   1469e:	7833      	ldrb	r3, [r6, #0]
   146a0:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   146a2:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   146a4:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   146a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   146aa:	73a2      	strb	r2, [r4, #14]
	sys_put_le16(val >> 16, &dst[2]);
   146ac:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   146ae:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   146b0:	0e1b      	lsrs	r3, r3, #24
   146b2:	7423      	strb	r3, [r4, #16]
}
   146b4:	e7df      	b.n	14676 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   146b6:	2211      	movs	r2, #17
   146b8:	4601      	mov	r1, r0
   146ba:	4620      	mov	r0, r4
   146bc:	f016 f8ef 	bl	2a89e <memcpy>
		return;
   146c0:	e7d9      	b.n	14676 <uuid_to_uuid128+0x12>
   146c2:	bf00      	nop
   146c4:	000308c4 	.word	0x000308c4

000146c8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   146c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146ca:	4604      	mov	r4, r0
   146cc:	4616      	mov	r6, r2
   146ce:	461d      	mov	r5, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   146d0:	2801      	cmp	r0, #1
   146d2:	d003      	beq.n	146dc <bt_buf_get_rx+0x14>
   146d4:	2803      	cmp	r0, #3
   146d6:	d001      	beq.n	146dc <bt_buf_get_rx+0x14>
   146d8:	2805      	cmp	r0, #5
   146da:	d10d      	bne.n	146f8 <bt_buf_get_rx+0x30>
	return net_buf_alloc_fixed(pool, timeout);
   146dc:	4632      	mov	r2, r6
   146de:	462b      	mov	r3, r5
   146e0:	480b      	ldr	r0, [pc, #44]	; (14710 <bt_buf_get_rx+0x48>)
   146e2:	f019 f9d8 	bl	2da96 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   146e6:	4605      	mov	r5, r0
   146e8:	b120      	cbz	r0, 146f4 <bt_buf_get_rx+0x2c>
	net_buf_simple_reserve(&buf->b, reserve);
   146ea:	2100      	movs	r1, #0
   146ec:	3008      	adds	r0, #8
   146ee:	f008 fc99 	bl	1d024 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   146f2:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   146f4:	4628      	mov	r0, r5
   146f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   146f8:	4f06      	ldr	r7, [pc, #24]	; (14714 <bt_buf_get_rx+0x4c>)
   146fa:	2242      	movs	r2, #66	; 0x42
   146fc:	4639      	mov	r1, r7
   146fe:	4806      	ldr	r0, [pc, #24]	; (14718 <bt_buf_get_rx+0x50>)
   14700:	f013 fe1f 	bl	28342 <printk>
   14704:	2142      	movs	r1, #66	; 0x42
   14706:	4638      	mov	r0, r7
   14708:	f014 f9b4 	bl	28a74 <assert_post_action>
   1470c:	e7e6      	b.n	146dc <bt_buf_get_rx+0x14>
   1470e:	bf00      	nop
   14710:	20000968 	.word	0x20000968
   14714:	000308d8 	.word	0x000308d8
   14718:	0002f968 	.word	0x0002f968

0001471c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1471c:	b510      	push	{r4, lr}
   1471e:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   14720:	4b0a      	ldr	r3, [pc, #40]	; (1474c <bt_buf_get_cmd_complete+0x30>)
   14722:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   14726:	b158      	cbz	r0, 14740 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   14728:	f008 fd0e 	bl	1d148 <net_buf_ref>
   1472c:	4604      	mov	r4, r0
   1472e:	2301      	movs	r3, #1
   14730:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   14732:	2100      	movs	r1, #0
   14734:	8181      	strh	r1, [r0, #12]
   14736:	3008      	adds	r0, #8
   14738:	f008 fc74 	bl	1d024 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1473c:	4620      	mov	r0, r4
   1473e:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14740:	460b      	mov	r3, r1
   14742:	2001      	movs	r0, #1
   14744:	f7ff ffc0 	bl	146c8 <bt_buf_get_rx>
   14748:	4604      	mov	r4, r0
   1474a:	e7f7      	b.n	1473c <bt_buf_get_cmd_complete+0x20>
   1474c:	200002a8 	.word	0x200002a8

00014750 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14750:	b510      	push	{r4, lr}
	switch (evt) {
   14752:	280f      	cmp	r0, #15
   14754:	d90d      	bls.n	14772 <bt_buf_get_evt+0x22>
   14756:	2813      	cmp	r0, #19
   14758:	d10d      	bne.n	14776 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   1475a:	4814      	ldr	r0, [pc, #80]	; (147ac <bt_buf_get_evt+0x5c>)
   1475c:	f019 f99b 	bl	2da96 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   14760:	4604      	mov	r4, r0
   14762:	b198      	cbz	r0, 1478c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   14764:	2100      	movs	r1, #0
   14766:	3008      	adds	r0, #8
   14768:	f008 fc5c 	bl	1d024 <net_buf_simple_reserve>
   1476c:	2301      	movs	r3, #1
   1476e:	7523      	strb	r3, [r4, #20]
}
   14770:	e00c      	b.n	1478c <bt_buf_get_evt+0x3c>
	switch (evt) {
   14772:	280e      	cmp	r0, #14
   14774:	d205      	bcs.n	14782 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   14776:	b959      	cbnz	r1, 14790 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14778:	2001      	movs	r0, #1
   1477a:	f7ff ffa5 	bl	146c8 <bt_buf_get_rx>
   1477e:	4604      	mov	r4, r0
   14780:	e004      	b.n	1478c <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   14782:	4610      	mov	r0, r2
   14784:	4619      	mov	r1, r3
   14786:	f7ff ffc9 	bl	1471c <bt_buf_get_cmd_complete>
   1478a:	4604      	mov	r4, r0
	}
}
   1478c:	4620      	mov	r0, r4
   1478e:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14790:	4807      	ldr	r0, [pc, #28]	; (147b0 <bt_buf_get_evt+0x60>)
   14792:	f019 f980 	bl	2da96 <net_buf_alloc_fixed>
			if (buf) {
   14796:	4604      	mov	r4, r0
   14798:	2800      	cmp	r0, #0
   1479a:	d0f7      	beq.n	1478c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1479c:	2100      	movs	r1, #0
   1479e:	3008      	adds	r0, #8
   147a0:	f008 fc40 	bl	1d024 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   147a4:	2301      	movs	r3, #1
   147a6:	7523      	strb	r3, [r4, #20]
			return buf;
   147a8:	e7f0      	b.n	1478c <bt_buf_get_evt+0x3c>
   147aa:	bf00      	nop
   147ac:	20000994 	.word	0x20000994
   147b0:	200008e4 	.word	0x200008e4

000147b4 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   147b4:	2300      	movs	r3, #0
   147b6:	2b00      	cmp	r3, #0
   147b8:	dd00      	ble.n	147bc <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   147ba:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   147bc:	4a05      	ldr	r2, [pc, #20]	; (147d4 <conn_handle_disconnected+0x20>)
   147be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   147c2:	b922      	cbnz	r2, 147ce <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   147c4:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   147c8:	4902      	ldr	r1, [pc, #8]	; (147d4 <conn_handle_disconnected+0x20>)
   147ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   147ce:	3301      	adds	r3, #1
   147d0:	e7f1      	b.n	147b6 <conn_handle_disconnected+0x2>
   147d2:	bf00      	nop
   147d4:	20002764 	.word	0x20002764

000147d8 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   147d8:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   147dc:	2300      	movs	r3, #0
   147de:	2b00      	cmp	r3, #0
   147e0:	dd01      	ble.n	147e6 <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   147e2:	2000      	movs	r0, #0
}
   147e4:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   147e6:	4a06      	ldr	r2, [pc, #24]	; (14800 <conn_handle_is_disconnected+0x28>)
   147e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   147ec:	4282      	cmp	r2, r0
   147ee:	d001      	beq.n	147f4 <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   147f0:	3301      	adds	r3, #1
   147f2:	e7f4      	b.n	147de <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   147f4:	4a02      	ldr	r2, [pc, #8]	; (14800 <conn_handle_is_disconnected+0x28>)
   147f6:	2100      	movs	r1, #0
   147f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   147fc:	2001      	movs	r0, #1
   147fe:	4770      	bx	lr
   14800:	20002764 	.word	0x20002764

00014804 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   14804:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   14806:	7851      	ldrb	r1, [r2, #1]
   14808:	4b08      	ldr	r3, [pc, #32]	; (1482c <read_local_ver_complete+0x28>)
   1480a:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1480e:	8851      	ldrh	r1, [r2, #2]
   14810:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   14814:	7911      	ldrb	r1, [r2, #4]
   14816:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1481a:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   1481e:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14822:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   14826:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   1482a:	4770      	bx	lr
   1482c:	200002a8 	.word	0x200002a8

00014830 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   14830:	6883      	ldr	r3, [r0, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   14832:	7a19      	ldrb	r1, [r3, #8]
   14834:	79da      	ldrb	r2, [r3, #7]
   14836:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   1483a:	7998      	ldrb	r0, [r3, #6]
   1483c:	795a      	ldrb	r2, [r3, #5]
   1483e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   14842:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   14846:	7918      	ldrb	r0, [r3, #4]
   14848:	78d9      	ldrb	r1, [r3, #3]
   1484a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1484e:	7898      	ldrb	r0, [r3, #2]
   14850:	785b      	ldrb	r3, [r3, #1]
   14852:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   14856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   1485a:	4903      	ldr	r1, [pc, #12]	; (14868 <le_read_supp_states_complete+0x38>)
   1485c:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   14860:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   14864:	4770      	bx	lr
   14866:	bf00      	nop
   14868:	200002a8 	.word	0x200002a8

0001486c <le_read_resolving_list_size_complete>:

#if defined(CONFIG_BT_SMP)
static void le_read_resolving_list_size_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_rl_size *rp = (void *)buf->data;
   1486c:	6883      	ldr	r3, [r0, #8]

	BT_DBG("Resolving List size %u", rp->rl_size);

	bt_dev.le.rl_size = rp->rl_size;
   1486e:	785a      	ldrb	r2, [r3, #1]
   14870:	4b01      	ldr	r3, [pc, #4]	; (14878 <le_read_resolving_list_size_complete+0xc>)
   14872:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   14876:	4770      	bx	lr
   14878:	200002a8 	.word	0x200002a8

0001487c <hci_data_buf_overflow>:
{
   1487c:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   1487e:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   14880:	781a      	ldrb	r2, [r3, #0]
   14882:	2157      	movs	r1, #87	; 0x57
   14884:	4801      	ldr	r0, [pc, #4]	; (1488c <hci_data_buf_overflow+0x10>)
   14886:	f014 f8fd 	bl	28a84 <z_log_minimal_printk>
}
   1488a:	bd08      	pop	{r3, pc}
   1488c:	00030940 	.word	0x00030940

00014890 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   14890:	6883      	ldr	r3, [r0, #8]
   14892:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   14894:	b993      	cbnz	r3, 148bc <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14896:	f3bf 8f5b 	dmb	ish
   1489a:	4b09      	ldr	r3, [pc, #36]	; (148c0 <hci_reset_complete+0x30>)
   1489c:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   148a0:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   148a4:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   148a8:	f3bf 8f5b 	dmb	ish
   148ac:	e853 1f00 	ldrex	r1, [r3]
   148b0:	e843 2000 	strex	r0, r2, [r3]
   148b4:	2800      	cmp	r0, #0
   148b6:	d1f9      	bne.n	148ac <hci_reset_complete+0x1c>
   148b8:	f3bf 8f5b 	dmb	ish
}
   148bc:	4770      	bx	lr
   148be:	bf00      	nop
   148c0:	200002a8 	.word	0x200002a8

000148c4 <read_local_features_complete>:
{
   148c4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   148c6:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   148c8:	2208      	movs	r2, #8
   148ca:	3101      	adds	r1, #1
   148cc:	4801      	ldr	r0, [pc, #4]	; (148d4 <read_local_features_complete+0x10>)
   148ce:	f015 ffe6 	bl	2a89e <memcpy>
}
   148d2:	bd08      	pop	{r3, pc}
   148d4:	20000318 	.word	0x20000318

000148d8 <read_le_features_complete>:
{
   148d8:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   148da:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   148dc:	2208      	movs	r2, #8
   148de:	3101      	adds	r1, #1
   148e0:	4801      	ldr	r0, [pc, #4]	; (148e8 <read_le_features_complete+0x10>)
   148e2:	f015 ffdc 	bl	2a89e <memcpy>
}
   148e6:	bd08      	pop	{r3, pc}
   148e8:	20000378 	.word	0x20000378

000148ec <read_supported_commands_complete>:
{
   148ec:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   148ee:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   148f0:	4c04      	ldr	r4, [pc, #16]	; (14904 <read_supported_commands_complete+0x18>)
   148f2:	2240      	movs	r2, #64	; 0x40
   148f4:	3101      	adds	r1, #1
   148f6:	4620      	mov	r0, r4
   148f8:	f015 ffd1 	bl	2a89e <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   148fc:	4620      	mov	r0, r4
   148fe:	f016 f8b5 	bl	2aa6c <bt_hci_ecc_supported_commands>
}
   14902:	bd10      	pop	{r4, pc}
   14904:	20000320 	.word	0x20000320

00014908 <le_read_buffer_size_complete>:
{
   14908:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1490a:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1490c:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14910:	b299      	uxth	r1, r3
   14912:	4806      	ldr	r0, [pc, #24]	; (1492c <le_read_buffer_size_complete+0x24>)
   14914:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   14918:	b901      	cbnz	r1, 1491c <le_read_buffer_size_complete+0x14>
}
   1491a:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1491c:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1491e:	460a      	mov	r2, r1
   14920:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14924:	f01a f9d5 	bl	2ecd2 <z_impl_k_sem_init>
   14928:	e7f7      	b.n	1491a <le_read_buffer_size_complete+0x12>
   1492a:	bf00      	nop
   1492c:	200002a8 	.word	0x200002a8

00014930 <read_buffer_size_complete>:
{
   14930:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   14932:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   14934:	4b08      	ldr	r3, [pc, #32]	; (14958 <read_buffer_size_complete+0x28>)
   14936:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1493a:	b103      	cbz	r3, 1493e <read_buffer_size_complete+0xe>
}
   1493c:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1493e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14942:	4805      	ldr	r0, [pc, #20]	; (14958 <read_buffer_size_complete+0x28>)
   14944:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   14948:	8891      	ldrh	r1, [r2, #4]
   1494a:	460a      	mov	r2, r1
   1494c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14950:	f01a f9bf 	bl	2ecd2 <z_impl_k_sem_init>
   14954:	e7f2      	b.n	1493c <read_buffer_size_complete+0xc>
   14956:	bf00      	nop
   14958:	200002a8 	.word	0x200002a8

0001495c <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1495c:	2801      	cmp	r0, #1
   1495e:	d001      	beq.n	14964 <find_pending_connect+0x8>
	return NULL;
   14960:	2000      	movs	r0, #0
}
   14962:	4770      	bx	lr
{
   14964:	b500      	push	{lr}
   14966:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14968:	2205      	movs	r2, #5
   1496a:	4b0d      	ldr	r3, [pc, #52]	; (149a0 <find_pending_connect+0x44>)
   1496c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14970:	f003 f980 	bl	17c74 <bt_conn_lookup_state_le>
		if (!conn) {
   14974:	b110      	cbz	r0, 1497c <find_pending_connect+0x20>
}
   14976:	b003      	add	sp, #12
   14978:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   1497c:	4b09      	ldr	r3, [pc, #36]	; (149a4 <find_pending_connect+0x48>)
   1497e:	e893 0003 	ldmia.w	r3, {r0, r1}
   14982:	9000      	str	r0, [sp, #0]
   14984:	f8ad 1004 	strh.w	r1, [sp, #4]
   14988:	0c09      	lsrs	r1, r1, #16
   1498a:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1498e:	2204      	movs	r2, #4
   14990:	4669      	mov	r1, sp
   14992:	4b03      	ldr	r3, [pc, #12]	; (149a0 <find_pending_connect+0x44>)
   14994:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14998:	f003 f96c 	bl	17c74 <bt_conn_lookup_state_le>
		return conn;
   1499c:	e7eb      	b.n	14976 <find_pending_connect+0x1a>
   1499e:	bf00      	nop
   149a0:	200002a8 	.word	0x200002a8
   149a4:	0002f540 	.word	0x0002f540

000149a8 <le_conn_complete_adv_timeout>:
{
   149a8:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   149aa:	f002 f849 	bl	16a40 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   149ae:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   149b0:	f3bf 8f5b 	dmb	ish
   149b4:	e850 3f00 	ldrex	r3, [r0]
   149b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   149bc:	e840 3200 	strex	r2, r3, [r0]
   149c0:	2a00      	cmp	r2, #0
   149c2:	d1f7      	bne.n	149b4 <le_conn_complete_adv_timeout+0xc>
   149c4:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   149c8:	2100      	movs	r1, #0
   149ca:	2001      	movs	r0, #1
   149cc:	f7ff ffc6 	bl	1495c <find_pending_connect>
		if (!conn) {
   149d0:	4604      	mov	r4, r0
   149d2:	b140      	cbz	r0, 149e6 <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   149d4:	233c      	movs	r3, #60	; 0x3c
   149d6:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   149d8:	2100      	movs	r1, #0
   149da:	f002 fe7b 	bl	176d4 <bt_conn_set_state>
		bt_conn_unref(conn);
   149de:	4620      	mov	r0, r4
   149e0:	f002 fe3c 	bl	1765c <bt_conn_unref>
}
   149e4:	bd10      	pop	{r4, pc}
			BT_ERR("No pending peripheral connection");
   149e6:	2145      	movs	r1, #69	; 0x45
   149e8:	4801      	ldr	r0, [pc, #4]	; (149f0 <le_conn_complete_adv_timeout+0x48>)
   149ea:	f014 f84b 	bl	28a84 <z_log_minimal_printk>
			return;
   149ee:	e7f9      	b.n	149e4 <le_conn_complete_adv_timeout+0x3c>
   149f0:	00030970 	.word	0x00030970

000149f4 <hci_disconn_complete>:
{
   149f4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   149f6:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   149f8:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   149fc:	7823      	ldrb	r3, [r4, #0]
   149fe:	b103      	cbz	r3, 14a02 <hci_disconn_complete+0xe>
}
   14a00:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   14a02:	4630      	mov	r0, r6
   14a04:	f002 fe5c 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   14a08:	4605      	mov	r5, r0
   14a0a:	b158      	cbz	r0, 14a24 <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   14a0c:	78e3      	ldrb	r3, [r4, #3]
   14a0e:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14a10:	2100      	movs	r1, #0
   14a12:	f002 fe5f 	bl	176d4 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   14a16:	78ab      	ldrb	r3, [r5, #2]
   14a18:	2b01      	cmp	r3, #1
   14a1a:	d009      	beq.n	14a30 <hci_disconn_complete+0x3c>
		bt_conn_unref(conn);
   14a1c:	4628      	mov	r0, r5
   14a1e:	f002 fe1d 	bl	1765c <bt_conn_unref>
		return;
   14a22:	e7ed      	b.n	14a00 <hci_disconn_complete+0xc>
		BT_ERR("Unable to look up conn with handle %u", handle);
   14a24:	4632      	mov	r2, r6
   14a26:	2145      	movs	r1, #69	; 0x45
   14a28:	4803      	ldr	r0, [pc, #12]	; (14a38 <hci_disconn_complete+0x44>)
   14a2a:	f014 f82b 	bl	28a84 <z_log_minimal_printk>
		return;
   14a2e:	e7e7      	b.n	14a00 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   14a30:	4628      	mov	r0, r5
   14a32:	f002 fe13 	bl	1765c <bt_conn_unref>
   14a36:	e7e3      	b.n	14a00 <hci_disconn_complete+0xc>
   14a38:	00030998 	.word	0x00030998

00014a3c <le_data_len_change>:
{
   14a3c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   14a3e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14a40:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   14a42:	4620      	mov	r0, r4
   14a44:	f002 fe3c 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   14a48:	b110      	cbz	r0, 14a50 <le_data_len_change+0x14>
	bt_conn_unref(conn);
   14a4a:	f002 fe07 	bl	1765c <bt_conn_unref>
}
   14a4e:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14a50:	4622      	mov	r2, r4
   14a52:	2145      	movs	r1, #69	; 0x45
   14a54:	4801      	ldr	r0, [pc, #4]	; (14a5c <le_data_len_change+0x20>)
   14a56:	f014 f815 	bl	28a84 <z_log_minimal_printk>
		return;
   14a5a:	e7f8      	b.n	14a4e <le_data_len_change+0x12>
   14a5c:	000309c4 	.word	0x000309c4

00014a60 <hci_num_completed_packets>:
{
   14a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14a64:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   14a68:	2700      	movs	r7, #0
   14a6a:	e051      	b.n	14b10 <hci_num_completed_packets+0xb0>
				conn->pending_no_cb--;
   14a6c:	3b01      	subs	r3, #1
   14a6e:	61e3      	str	r3, [r4, #28]
   14a70:	f382 8811 	msr	BASEPRI, r2
   14a74:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   14a78:	4620      	mov	r0, r4
   14a7a:	f002 fc07 	bl	1728c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   14a7e:	f00d ff0b 	bl	22898 <z_impl_k_sem_give>
				continue;
   14a82:	e025      	b.n	14ad0 <hci_num_completed_packets+0x70>
	list->tail = node;
   14a84:	61a1      	str	r1, [r4, #24]
   14a86:	f382 8811 	msr	BASEPRI, r2
   14a8a:	f3bf 8f6f 	isb	sy
			if (!node) {
   14a8e:	2b00      	cmp	r3, #0
   14a90:	d036      	beq.n	14b00 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   14a92:	f04f 0240 	mov.w	r2, #64	; 0x40
   14a96:	f3ef 8111 	mrs	r1, BASEPRI
   14a9a:	f382 8812 	msr	BASEPRI_MAX, r2
   14a9e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   14aa2:	68da      	ldr	r2, [r3, #12]
   14aa4:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   14aa6:	2200      	movs	r2, #0
   14aa8:	60da      	str	r2, [r3, #12]
	parent->next = child;
   14aaa:	601a      	str	r2, [r3, #0]
	return list->tail;
   14aac:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   14aae:	2a00      	cmp	r2, #0
   14ab0:	d044      	beq.n	14b3c <hci_num_completed_packets+0xdc>
	parent->next = child;
   14ab2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14ab4:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   14ab6:	f381 8811 	msr	BASEPRI, r1
   14aba:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   14abe:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14ac2:	f00e fa8f 	bl	22fe4 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   14ac6:	4620      	mov	r0, r4
   14ac8:	f002 fbe0 	bl	1728c <bt_conn_get_pkts>
   14acc:	f00d fee4 	bl	22898 <z_impl_k_sem_give>
{
   14ad0:	462e      	mov	r6, r5
		while (count--) {
   14ad2:	1e75      	subs	r5, r6, #1
   14ad4:	b2ad      	uxth	r5, r5
   14ad6:	b1be      	cbz	r6, 14b08 <hci_num_completed_packets+0xa8>
	__asm__ volatile(
   14ad8:	f04f 0340 	mov.w	r3, #64	; 0x40
   14adc:	f3ef 8211 	mrs	r2, BASEPRI
   14ae0:	f383 8812 	msr	BASEPRI_MAX, r3
   14ae4:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14ae8:	69e3      	ldr	r3, [r4, #28]
   14aea:	2b00      	cmp	r3, #0
   14aec:	d1be      	bne.n	14a6c <hci_num_completed_packets+0xc>
	return list->head;
   14aee:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14af0:	2b00      	cmp	r3, #0
   14af2:	d0c8      	beq.n	14a86 <hci_num_completed_packets+0x26>
	return node->next;
   14af4:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   14af6:	6161      	str	r1, [r4, #20]
	return list->tail;
   14af8:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14afa:	4298      	cmp	r0, r3
   14afc:	d1c3      	bne.n	14a86 <hci_num_completed_packets+0x26>
   14afe:	e7c1      	b.n	14a84 <hci_num_completed_packets+0x24>
				BT_ERR("packets count mismatch");
   14b00:	2145      	movs	r1, #69	; 0x45
   14b02:	4811      	ldr	r0, [pc, #68]	; (14b48 <hci_num_completed_packets+0xe8>)
   14b04:	f013 ffbe 	bl	28a84 <z_log_minimal_printk>
		bt_conn_unref(conn);
   14b08:	4620      	mov	r0, r4
   14b0a:	f002 fda7 	bl	1765c <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   14b0e:	3701      	adds	r7, #1
   14b10:	f898 3000 	ldrb.w	r3, [r8]
   14b14:	429f      	cmp	r7, r3
   14b16:	da14      	bge.n	14b42 <hci_num_completed_packets+0xe2>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14b18:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   14b1c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14b20:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   14b24:	4628      	mov	r0, r5
   14b26:	f002 fdcb 	bl	176c0 <bt_conn_lookup_handle>
		if (!conn) {
   14b2a:	4604      	mov	r4, r0
   14b2c:	2800      	cmp	r0, #0
   14b2e:	d1d0      	bne.n	14ad2 <hci_num_completed_packets+0x72>
			BT_ERR("No connection for handle %u", handle);
   14b30:	462a      	mov	r2, r5
   14b32:	2145      	movs	r1, #69	; 0x45
   14b34:	4805      	ldr	r0, [pc, #20]	; (14b4c <hci_num_completed_packets+0xec>)
   14b36:	f013 ffa5 	bl	28a84 <z_log_minimal_printk>
			continue;
   14b3a:	e7e8      	b.n	14b0e <hci_num_completed_packets+0xae>
	list->tail = node;
   14b3c:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   14b3e:	6223      	str	r3, [r4, #32]
}
   14b40:	e7b9      	b.n	14ab6 <hci_num_completed_packets+0x56>
}
   14b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b46:	bf00      	nop
   14b48:	00030a14 	.word	0x00030a14
   14b4c:	000309f0 	.word	0x000309f0

00014b50 <hci_cmd_done>:
{
   14b50:	b570      	push	{r4, r5, r6, lr}
   14b52:	b082      	sub	sp, #8
   14b54:	4605      	mov	r5, r0
   14b56:	460e      	mov	r6, r1
   14b58:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14b5a:	7990      	ldrb	r0, [r2, #6]
   14b5c:	f008 f952 	bl	1ce04 <net_buf_pool_get>
   14b60:	4b47      	ldr	r3, [pc, #284]	; (14c80 <hci_cmd_done+0x130>)
   14b62:	4283      	cmp	r3, r0
   14b64:	d00e      	beq.n	14b84 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   14b66:	79a4      	ldrb	r4, [r4, #6]
   14b68:	4620      	mov	r0, r4
   14b6a:	f008 f94b 	bl	1ce04 <net_buf_pool_get>
   14b6e:	4b44      	ldr	r3, [pc, #272]	; (14c80 <hci_cmd_done+0x130>)
   14b70:	9301      	str	r3, [sp, #4]
   14b72:	9000      	str	r0, [sp, #0]
   14b74:	4623      	mov	r3, r4
   14b76:	462a      	mov	r2, r5
   14b78:	2157      	movs	r1, #87	; 0x57
   14b7a:	4842      	ldr	r0, [pc, #264]	; (14c84 <hci_cmd_done+0x134>)
   14b7c:	f013 ff82 	bl	28a84 <z_log_minimal_printk>
}
   14b80:	b002      	add	sp, #8
   14b82:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   14b84:	4620      	mov	r0, r4
   14b86:	f008 f945 	bl	1ce14 <net_buf_id>
   14b8a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   14b8e:	483e      	ldr	r0, [pc, #248]	; (14c88 <hci_cmd_done+0x138>)
   14b90:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14b94:	8843      	ldrh	r3, [r0, #2]
   14b96:	42ab      	cmp	r3, r5
   14b98:	d132      	bne.n	14c00 <hci_cmd_done+0xb0>
	if (bt_dev.sent_cmd) {
   14b9a:	4b3c      	ldr	r3, [pc, #240]	; (14c8c <hci_cmd_done+0x13c>)
   14b9c:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   14ba0:	b128      	cbz	r0, 14bae <hci_cmd_done+0x5e>
		net_buf_unref(bt_dev.sent_cmd);
   14ba2:	f008 fa99 	bl	1d0d8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14ba6:	4b39      	ldr	r3, [pc, #228]	; (14c8c <hci_cmd_done+0x13c>)
   14ba8:	2200      	movs	r2, #0
   14baa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   14bae:	4620      	mov	r0, r4
   14bb0:	f008 f930 	bl	1ce14 <net_buf_id>
   14bb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14bb8:	4b33      	ldr	r3, [pc, #204]	; (14c88 <hci_cmd_done+0x138>)
   14bba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14bbe:	6843      	ldr	r3, [r0, #4]
   14bc0:	b103      	cbz	r3, 14bc4 <hci_cmd_done+0x74>
   14bc2:	b366      	cbz	r6, 14c1e <hci_cmd_done+0xce>
	if (cmd(buf)->sync) {
   14bc4:	4620      	mov	r0, r4
   14bc6:	f008 f925 	bl	1ce14 <net_buf_id>
   14bca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14bce:	4b2e      	ldr	r3, [pc, #184]	; (14c88 <hci_cmd_done+0x138>)
   14bd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14bd4:	6883      	ldr	r3, [r0, #8]
   14bd6:	2b00      	cmp	r3, #0
   14bd8:	d0d2      	beq.n	14b80 <hci_cmd_done+0x30>
		cmd(buf)->status = status;
   14bda:	4620      	mov	r0, r4
   14bdc:	f008 f91a 	bl	1ce14 <net_buf_id>
   14be0:	4d29      	ldr	r5, [pc, #164]	; (14c88 <hci_cmd_done+0x138>)
   14be2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14be6:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   14bea:	4620      	mov	r0, r4
   14bec:	f008 f912 	bl	1ce14 <net_buf_id>
   14bf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14bf4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   14bf8:	68a8      	ldr	r0, [r5, #8]
   14bfa:	f00d fe4d 	bl	22898 <z_impl_k_sem_give>
}
   14bfe:	e7bf      	b.n	14b80 <hci_cmd_done+0x30>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   14c00:	4620      	mov	r0, r4
   14c02:	f008 f907 	bl	1ce14 <net_buf_id>
   14c06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14c0a:	4b1f      	ldr	r3, [pc, #124]	; (14c88 <hci_cmd_done+0x138>)
   14c0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14c10:	8843      	ldrh	r3, [r0, #2]
   14c12:	462a      	mov	r2, r5
   14c14:	2157      	movs	r1, #87	; 0x57
   14c16:	481e      	ldr	r0, [pc, #120]	; (14c90 <hci_cmd_done+0x140>)
   14c18:	f013 ff34 	bl	28a84 <z_log_minimal_printk>
		return;
   14c1c:	e7b0      	b.n	14b80 <hci_cmd_done+0x30>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14c1e:	4620      	mov	r0, r4
   14c20:	f008 f8f8 	bl	1ce14 <net_buf_id>
   14c24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14c28:	4b17      	ldr	r3, [pc, #92]	; (14c88 <hci_cmd_done+0x138>)
   14c2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14c2e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14c30:	6813      	ldr	r3, [r2, #0]
   14c32:	6851      	ldr	r1, [r2, #4]
   14c34:	7a10      	ldrb	r0, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   14c36:	f001 051f 	and.w	r5, r1, #31
   14c3a:	2201      	movs	r2, #1
   14c3c:	40aa      	lsls	r2, r5
	if (val) {
   14c3e:	b170      	cbz	r0, 14c5e <hci_cmd_done+0x10e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14c40:	0949      	lsrs	r1, r1, #5
   14c42:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c46:	f3bf 8f5b 	dmb	ish
   14c4a:	e853 1f00 	ldrex	r1, [r3]
   14c4e:	4311      	orrs	r1, r2
   14c50:	e843 1000 	strex	r0, r1, [r3]
   14c54:	2800      	cmp	r0, #0
   14c56:	d1f8      	bne.n	14c4a <hci_cmd_done+0xfa>
   14c58:	f3bf 8f5b 	dmb	ish
   14c5c:	e7b2      	b.n	14bc4 <hci_cmd_done+0x74>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14c5e:	0949      	lsrs	r1, r1, #5
   14c60:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14c64:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14c66:	f3bf 8f5b 	dmb	ish
   14c6a:	e853 1f00 	ldrex	r1, [r3]
   14c6e:	4011      	ands	r1, r2
   14c70:	e843 1000 	strex	r0, r1, [r3]
   14c74:	2800      	cmp	r0, #0
   14c76:	d1f8      	bne.n	14c6a <hci_cmd_done+0x11a>
   14c78:	f3bf 8f5b 	dmb	ish
	}
}
   14c7c:	e7a2      	b.n	14bc4 <hci_cmd_done+0x74>
   14c7e:	bf00      	nop
   14c80:	2000093c 	.word	0x2000093c
   14c84:	00030a30 	.word	0x00030a30
   14c88:	2000274c 	.word	0x2000274c
   14c8c:	200002a8 	.word	0x200002a8
   14c90:	00030a6c 	.word	0x00030a6c

00014c94 <hci_cmd_status>:
{
   14c94:	b538      	push	{r3, r4, r5, lr}
   14c96:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   14c98:	2104      	movs	r1, #4
   14c9a:	3008      	adds	r0, #8
   14c9c:	f008 faf4 	bl	1d288 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14ca0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   14ca2:	4622      	mov	r2, r4
   14ca4:	7801      	ldrb	r1, [r0, #0]
   14ca6:	8840      	ldrh	r0, [r0, #2]
   14ca8:	f7ff ff52 	bl	14b50 <hci_cmd_done>
	if (ncmd) {
   14cac:	b905      	cbnz	r5, 14cb0 <hci_cmd_status+0x1c>
}
   14cae:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   14cb0:	4801      	ldr	r0, [pc, #4]	; (14cb8 <hci_cmd_status+0x24>)
   14cb2:	f00d fdf1 	bl	22898 <z_impl_k_sem_give>
   14cb6:	e7fa      	b.n	14cae <hci_cmd_status+0x1a>
   14cb8:	200003c8 	.word	0x200003c8

00014cbc <hci_cmd_complete>:
{
   14cbc:	b538      	push	{r3, r4, r5, lr}
   14cbe:	4604      	mov	r4, r0
   14cc0:	2103      	movs	r1, #3
   14cc2:	3008      	adds	r0, #8
   14cc4:	f008 fae0 	bl	1d288 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14cc8:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   14cca:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   14ccc:	4622      	mov	r2, r4
   14cce:	7819      	ldrb	r1, [r3, #0]
   14cd0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14cd4:	f7ff ff3c 	bl	14b50 <hci_cmd_done>
	if (ncmd) {
   14cd8:	b905      	cbnz	r5, 14cdc <hci_cmd_complete+0x20>
}
   14cda:	bd38      	pop	{r3, r4, r5, pc}
   14cdc:	4801      	ldr	r0, [pc, #4]	; (14ce4 <hci_cmd_complete+0x28>)
   14cde:	f00d fddb 	bl	22898 <z_impl_k_sem_give>
   14ce2:	e7fa      	b.n	14cda <hci_cmd_complete+0x1e>
   14ce4:	200003c8 	.word	0x200003c8

00014ce8 <hci_hardware_error>:
{
   14ce8:	b508      	push	{r3, lr}
   14cea:	2101      	movs	r1, #1
   14cec:	3008      	adds	r0, #8
   14cee:	f008 facb 	bl	1d288 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   14cf2:	7802      	ldrb	r2, [r0, #0]
   14cf4:	2145      	movs	r1, #69	; 0x45
   14cf6:	4802      	ldr	r0, [pc, #8]	; (14d00 <hci_hardware_error+0x18>)
   14cf8:	f013 fec4 	bl	28a84 <z_log_minimal_printk>
}
   14cfc:	bd08      	pop	{r3, pc}
   14cfe:	bf00      	nop
   14d00:	00030aa4 	.word	0x00030aa4

00014d04 <hci_vendor_event>:
{
   14d04:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   14d06:	8981      	ldrh	r1, [r0, #12]
   14d08:	6880      	ldr	r0, [r0, #8]
   14d0a:	f7ff f87b 	bl	13e04 <bt_hex_real>
   14d0e:	4602      	mov	r2, r0
   14d10:	2157      	movs	r1, #87	; 0x57
   14d12:	4802      	ldr	r0, [pc, #8]	; (14d1c <hci_vendor_event+0x18>)
   14d14:	f013 feb6 	bl	28a84 <z_log_minimal_printk>
}
   14d18:	bd08      	pop	{r3, pc}
   14d1a:	bf00      	nop
   14d1c:	00030acc 	.word	0x00030acc

00014d20 <hci_acl>:
{
   14d20:	b570      	push	{r4, r5, r6, lr}
   14d22:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14d24:	8983      	ldrh	r3, [r0, #12]
   14d26:	2b03      	cmp	r3, #3
   14d28:	d917      	bls.n	14d5a <hci_acl+0x3a>
   14d2a:	2104      	movs	r1, #4
   14d2c:	f104 0008 	add.w	r0, r4, #8
   14d30:	f008 faaa 	bl	1d288 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   14d34:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14d36:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   14d38:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   14d3a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   14d3e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14d40:	22ff      	movs	r2, #255	; 0xff
   14d42:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   14d44:	89a2      	ldrh	r2, [r4, #12]
   14d46:	429a      	cmp	r2, r3
   14d48:	d014      	beq.n	14d74 <hci_acl+0x54>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   14d4a:	2145      	movs	r1, #69	; 0x45
   14d4c:	4816      	ldr	r0, [pc, #88]	; (14da8 <hci_acl+0x88>)
   14d4e:	f013 fe99 	bl	28a84 <z_log_minimal_printk>
		net_buf_unref(buf);
   14d52:	4620      	mov	r0, r4
   14d54:	f008 f9c0 	bl	1d0d8 <net_buf_unref>
}
   14d58:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14d5a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   14d5e:	4913      	ldr	r1, [pc, #76]	; (14dac <hci_acl+0x8c>)
   14d60:	4813      	ldr	r0, [pc, #76]	; (14db0 <hci_acl+0x90>)
   14d62:	f013 faee 	bl	28342 <printk>
   14d66:	4040      	eors	r0, r0
   14d68:	f380 8811 	msr	BASEPRI, r0
   14d6c:	f04f 0003 	mov.w	r0, #3
   14d70:	df02      	svc	2
   14d72:	e7da      	b.n	14d2a <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14d74:	f002 fca4 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   14d78:	4605      	mov	r5, r0
   14d7a:	b158      	cbz	r0, 14d94 <hci_acl+0x74>
	acl(buf)->index = bt_conn_index(conn);
   14d7c:	f002 fd7c 	bl	17878 <bt_conn_index>
   14d80:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   14d82:	4632      	mov	r2, r6
   14d84:	4621      	mov	r1, r4
   14d86:	4628      	mov	r0, r5
   14d88:	f016 fbe5 	bl	2b556 <bt_conn_recv>
	bt_conn_unref(conn);
   14d8c:	4628      	mov	r0, r5
   14d8e:	f002 fc65 	bl	1765c <bt_conn_unref>
   14d92:	e7e1      	b.n	14d58 <hci_acl+0x38>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14d94:	8ae2      	ldrh	r2, [r4, #22]
   14d96:	2145      	movs	r1, #69	; 0x45
   14d98:	4806      	ldr	r0, [pc, #24]	; (14db4 <hci_acl+0x94>)
   14d9a:	f013 fe73 	bl	28a84 <z_log_minimal_printk>
		net_buf_unref(buf);
   14d9e:	4620      	mov	r0, r4
   14da0:	f008 f99a 	bl	1d0d8 <net_buf_unref>
		return;
   14da4:	e7d8      	b.n	14d58 <hci_acl+0x38>
   14da6:	bf00      	nop
   14da8:	00030b2c 	.word	0x00030b2c
   14dac:	00030af8 	.word	0x00030af8
   14db0:	0002f968 	.word	0x0002f968
   14db4:	00030b58 	.word	0x00030b58

00014db8 <le_conn_update_complete>:
{
   14db8:	b570      	push	{r4, r5, r6, lr}
   14dba:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   14dbc:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14dbe:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   14dc2:	4630      	mov	r0, r6
   14dc4:	f002 fc7c 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   14dc8:	b148      	cbz	r0, 14dde <le_conn_update_complete+0x26>
   14dca:	4605      	mov	r5, r0
	if (!evt->status) {
   14dcc:	7823      	ldrb	r3, [r4, #0]
   14dce:	b163      	cbz	r3, 14dea <le_conn_update_complete+0x32>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14dd0:	2b1a      	cmp	r3, #26
   14dd2:	d019      	beq.n	14e08 <le_conn_update_complete+0x50>
	bt_conn_unref(conn);
   14dd4:	4628      	mov	r0, r5
   14dd6:	f002 fc41 	bl	1765c <bt_conn_unref>
}
   14dda:	b002      	add	sp, #8
   14ddc:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14dde:	4632      	mov	r2, r6
   14de0:	2145      	movs	r1, #69	; 0x45
   14de2:	481d      	ldr	r0, [pc, #116]	; (14e58 <le_conn_update_complete+0xa0>)
   14de4:	f013 fe4e 	bl	28a84 <z_log_minimal_printk>
		return;
   14de8:	e7f7      	b.n	14dda <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   14dea:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   14dee:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   14df2:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   14df6:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14dfa:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   14dfe:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   14e02:	f002 fd8f 	bl	17924 <notify_le_param_updated>
   14e06:	e7e5      	b.n	14dd4 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   14e08:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14e0a:	2b01      	cmp	r3, #1
   14e0c:	d1e2      	bne.n	14dd4 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   14e0e:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14e10:	f3bf 8f5b 	dmb	ish
   14e14:	e853 2f00 	ldrex	r2, [r3]
   14e18:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   14e1c:	e843 1000 	strex	r0, r1, [r3]
   14e20:	2800      	cmp	r0, #0
   14e22:	d1f7      	bne.n	14e14 <le_conn_update_complete+0x5c>
   14e24:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   14e28:	f412 6f80 	tst.w	r2, #1024	; 0x400
   14e2c:	d1d2      	bne.n	14dd4 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   14e2e:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   14e32:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   14e36:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   14e3a:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   14e3e:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
   14e42:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   14e46:	f8b5 30b2 	ldrh.w	r3, [r5, #178]	; 0xb2
   14e4a:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   14e4e:	4669      	mov	r1, sp
   14e50:	4628      	mov	r0, r5
   14e52:	f016 fdc0 	bl	2b9d6 <bt_l2cap_update_conn_param>
   14e56:	e7bd      	b.n	14dd4 <le_conn_update_complete+0x1c>
   14e58:	000309c4 	.word	0x000309c4

00014e5c <hci_le_meta_event>:
{
   14e5c:	b570      	push	{r4, r5, r6, lr}
   14e5e:	b082      	sub	sp, #8
   14e60:	4604      	mov	r4, r0
   14e62:	2101      	movs	r1, #1
   14e64:	3008      	adds	r0, #8
   14e66:	f008 fa0f 	bl	1d288 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14e6a:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   14e6c:	2300      	movs	r3, #0
   14e6e:	2b09      	cmp	r3, #9
   14e70:	d817      	bhi.n	14ea2 <hci_le_meta_event+0x46>
		const struct event_handler *handler = &handlers[i];
   14e72:	4a12      	ldr	r2, [pc, #72]	; (14ebc <hci_le_meta_event+0x60>)
   14e74:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   14e78:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14e7c:	4295      	cmp	r5, r2
   14e7e:	d108      	bne.n	14e92 <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   14e80:	89a2      	ldrh	r2, [r4, #12]
   14e82:	784b      	ldrb	r3, [r1, #1]
   14e84:	429a      	cmp	r2, r3
   14e86:	d306      	bcc.n	14e96 <hci_le_meta_event+0x3a>
		handler->handler(buf);
   14e88:	684b      	ldr	r3, [r1, #4]
   14e8a:	4620      	mov	r0, r4
   14e8c:	4798      	blx	r3
}
   14e8e:	b002      	add	sp, #8
   14e90:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < num_handlers; i++) {
   14e92:	3301      	adds	r3, #1
   14e94:	e7eb      	b.n	14e6e <hci_le_meta_event+0x12>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14e96:	462b      	mov	r3, r5
   14e98:	2145      	movs	r1, #69	; 0x45
   14e9a:	4809      	ldr	r0, [pc, #36]	; (14ec0 <hci_le_meta_event+0x64>)
   14e9c:	f013 fdf2 	bl	28a84 <z_log_minimal_printk>
			return;
   14ea0:	e7f5      	b.n	14e8e <hci_le_meta_event+0x32>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14ea2:	89a6      	ldrh	r6, [r4, #12]
   14ea4:	4631      	mov	r1, r6
   14ea6:	68a0      	ldr	r0, [r4, #8]
   14ea8:	f7fe ffac 	bl	13e04 <bt_hex_real>
   14eac:	9000      	str	r0, [sp, #0]
   14eae:	4633      	mov	r3, r6
   14eb0:	462a      	mov	r2, r5
   14eb2:	2157      	movs	r1, #87	; 0x57
   14eb4:	4803      	ldr	r0, [pc, #12]	; (14ec4 <hci_le_meta_event+0x68>)
   14eb6:	f013 fde5 	bl	28a84 <z_log_minimal_printk>
}
   14eba:	e7e8      	b.n	14e8e <hci_le_meta_event+0x32>
   14ebc:	00030f0c 	.word	0x00030f0c
   14ec0:	00030b80 	.word	0x00030b80
   14ec4:	00030ba8 	.word	0x00030ba8

00014ec8 <hci_event>:
{
   14ec8:	b570      	push	{r4, r5, r6, lr}
   14eca:	b082      	sub	sp, #8
   14ecc:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14ece:	8983      	ldrh	r3, [r0, #12]
   14ed0:	2b01      	cmp	r3, #1
   14ed2:	d916      	bls.n	14f02 <hci_event+0x3a>
   14ed4:	2102      	movs	r1, #2
   14ed6:	f104 0008 	add.w	r0, r4, #8
   14eda:	f008 f9d5 	bl	1d288 <net_buf_simple_pull_mem>
   14ede:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14ee0:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   14ee2:	3b05      	subs	r3, #5
   14ee4:	2b15      	cmp	r3, #21
   14ee6:	d81b      	bhi.n	14f20 <hci_event+0x58>
   14ee8:	e8df f003 	tbb	[pc, r3]
   14eec:	1a1a1a18 	.word	0x1a1a1a18
   14ef0:	1a1a1a1a 	.word	0x1a1a1a1a
   14ef4:	1a35351a 	.word	0x1a35351a
   14ef8:	1a351a1a 	.word	0x1a351a1a
   14efc:	1a1a1a1a 	.word	0x1a1a1a1a
   14f00:	351a      	.short	0x351a
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14f02:	f640 120d 	movw	r2, #2317	; 0x90d
   14f06:	4926      	ldr	r1, [pc, #152]	; (14fa0 <hci_event+0xd8>)
   14f08:	4826      	ldr	r0, [pc, #152]	; (14fa4 <hci_event+0xdc>)
   14f0a:	f013 fa1a 	bl	28342 <printk>
   14f0e:	4040      	eors	r0, r0
   14f10:	f380 8811 	msr	BASEPRI, r0
   14f14:	f04f 0003 	mov.w	r0, #3
   14f18:	df02      	svc	2
   14f1a:	e7db      	b.n	14ed4 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14f1c:	2303      	movs	r3, #3
   14f1e:	e000      	b.n	14f22 <hci_event+0x5a>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   14f20:	2302      	movs	r3, #2
   14f22:	f013 0f02 	tst.w	r3, #2
   14f26:	d018      	beq.n	14f5a <hci_event+0x92>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14f28:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   14f2a:	2300      	movs	r3, #0
   14f2c:	2b05      	cmp	r3, #5
   14f2e:	d829      	bhi.n	14f84 <hci_event+0xbc>
		const struct event_handler *handler = &handlers[i];
   14f30:	4a1d      	ldr	r2, [pc, #116]	; (14fa8 <hci_event+0xe0>)
   14f32:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   14f36:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14f3a:	4295      	cmp	r5, r2
   14f3c:	d11a      	bne.n	14f74 <hci_event+0xac>
		if (buf->len < handler->min_len) {
   14f3e:	89a2      	ldrh	r2, [r4, #12]
   14f40:	784b      	ldrb	r3, [r1, #1]
   14f42:	429a      	cmp	r2, r3
   14f44:	d318      	bcc.n	14f78 <hci_event+0xb0>
		handler->handler(buf);
   14f46:	684b      	ldr	r3, [r1, #4]
   14f48:	4620      	mov	r0, r4
   14f4a:	4798      	blx	r3
	net_buf_unref(buf);
   14f4c:	4620      	mov	r0, r4
   14f4e:	f008 f8c3 	bl	1d0d8 <net_buf_unref>
}
   14f52:	b002      	add	sp, #8
   14f54:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   14f56:	2301      	movs	r3, #1
   14f58:	e7e3      	b.n	14f22 <hci_event+0x5a>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14f5a:	f640 1211 	movw	r2, #2321	; 0x911
   14f5e:	4910      	ldr	r1, [pc, #64]	; (14fa0 <hci_event+0xd8>)
   14f60:	4810      	ldr	r0, [pc, #64]	; (14fa4 <hci_event+0xdc>)
   14f62:	f013 f9ee 	bl	28342 <printk>
   14f66:	4040      	eors	r0, r0
   14f68:	f380 8811 	msr	BASEPRI, r0
   14f6c:	f04f 0003 	mov.w	r0, #3
   14f70:	df02      	svc	2
   14f72:	e7d9      	b.n	14f28 <hci_event+0x60>
	for (i = 0; i < num_handlers; i++) {
   14f74:	3301      	adds	r3, #1
   14f76:	e7d9      	b.n	14f2c <hci_event+0x64>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14f78:	462b      	mov	r3, r5
   14f7a:	2145      	movs	r1, #69	; 0x45
   14f7c:	480b      	ldr	r0, [pc, #44]	; (14fac <hci_event+0xe4>)
   14f7e:	f013 fd81 	bl	28a84 <z_log_minimal_printk>
			return;
   14f82:	e7e3      	b.n	14f4c <hci_event+0x84>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14f84:	89a6      	ldrh	r6, [r4, #12]
   14f86:	4631      	mov	r1, r6
   14f88:	68a0      	ldr	r0, [r4, #8]
   14f8a:	f7fe ff3b 	bl	13e04 <bt_hex_real>
   14f8e:	9000      	str	r0, [sp, #0]
   14f90:	4633      	mov	r3, r6
   14f92:	462a      	mov	r2, r5
   14f94:	2157      	movs	r1, #87	; 0x57
   14f96:	4806      	ldr	r0, [pc, #24]	; (14fb0 <hci_event+0xe8>)
   14f98:	f013 fd74 	bl	28a84 <z_log_minimal_printk>
   14f9c:	e7d6      	b.n	14f4c <hci_event+0x84>
   14f9e:	bf00      	nop
   14fa0:	00030af8 	.word	0x00030af8
   14fa4:	0002f968 	.word	0x0002f968
   14fa8:	00030f6c 	.word	0x00030f6c
   14fac:	00030b80 	.word	0x00030b80
   14fb0:	00030ba8 	.word	0x00030ba8

00014fb4 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   14fb4:	b510      	push	{r4, lr}
   14fb6:	e003      	b.n	14fc0 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   14fb8:	f7ff ff86 	bl	14ec8 <hci_event>
	z_impl_k_yield();
   14fbc:	f00f f95e 	bl	2427c <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14fc0:	f04f 32ff 	mov.w	r2, #4294967295
   14fc4:	f04f 33ff 	mov.w	r3, #4294967295
   14fc8:	4809      	ldr	r0, [pc, #36]	; (14ff0 <hci_rx_thread+0x3c>)
   14fca:	f007 fffd 	bl	1cfc8 <net_buf_get>
   14fce:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14fd0:	7d02      	ldrb	r2, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   14fd2:	2a01      	cmp	r2, #1
   14fd4:	d0f0      	beq.n	14fb8 <hci_rx_thread+0x4>
   14fd6:	2a03      	cmp	r2, #3
   14fd8:	d102      	bne.n	14fe0 <hci_rx_thread+0x2c>
			hci_acl(buf);
   14fda:	f7ff fea1 	bl	14d20 <hci_acl>
			break;
   14fde:	e7ed      	b.n	14fbc <hci_rx_thread+0x8>
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14fe0:	2145      	movs	r1, #69	; 0x45
   14fe2:	4804      	ldr	r0, [pc, #16]	; (14ff4 <hci_rx_thread+0x40>)
   14fe4:	f013 fd4e 	bl	28a84 <z_log_minimal_printk>
			net_buf_unref(buf);
   14fe8:	4620      	mov	r0, r4
   14fea:	f008 f875 	bl	1d0d8 <net_buf_unref>
			break;
   14fee:	e7e5      	b.n	14fbc <hci_rx_thread+0x8>
   14ff0:	200003e4 	.word	0x200003e4
   14ff4:	00030bd0 	.word	0x00030bd0

00014ff8 <bt_hci_cmd_state_set_init>:
{
   14ff8:	b510      	push	{r4, lr}
   14ffa:	460c      	mov	r4, r1
	state->target = target;
   14ffc:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   14ffe:	604b      	str	r3, [r1, #4]
	state->val = val;
   15000:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15004:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   15006:	f007 ff05 	bl	1ce14 <net_buf_id>
   1500a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1500e:	4b02      	ldr	r3, [pc, #8]	; (15018 <bt_hci_cmd_state_set_init+0x20>)
   15010:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15014:	6044      	str	r4, [r0, #4]
}
   15016:	bd10      	pop	{r4, pc}
   15018:	2000274c 	.word	0x2000274c

0001501c <bt_hci_cmd_create>:
{
   1501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15020:	4682      	mov	sl, r0
   15022:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   15024:	f04f 32ff 	mov.w	r2, #4294967295
   15028:	f04f 33ff 	mov.w	r3, #4294967295
   1502c:	481d      	ldr	r0, [pc, #116]	; (150a4 <bt_hci_cmd_create+0x88>)
   1502e:	f018 fd32 	bl	2da96 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   15032:	4604      	mov	r4, r0
   15034:	b358      	cbz	r0, 1508e <bt_hci_cmd_create+0x72>
	net_buf_simple_reserve(&buf->b, reserve);
   15036:	f104 0808 	add.w	r8, r4, #8
   1503a:	2100      	movs	r1, #0
   1503c:	4640      	mov	r0, r8
   1503e:	f007 fff1 	bl	1d024 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15042:	2700      	movs	r7, #0
   15044:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   15046:	4620      	mov	r0, r4
   15048:	f007 fee4 	bl	1ce14 <net_buf_id>
   1504c:	4d16      	ldr	r5, [pc, #88]	; (150a8 <bt_hci_cmd_create+0x8c>)
   1504e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15052:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   15056:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   1505a:	4620      	mov	r0, r4
   1505c:	f007 feda 	bl	1ce14 <net_buf_id>
   15060:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15064:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   15068:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1506a:	4620      	mov	r0, r4
   1506c:	f007 fed2 	bl	1ce14 <net_buf_id>
   15070:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15074:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   15078:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   1507a:	2103      	movs	r1, #3
   1507c:	4640      	mov	r0, r8
   1507e:	f008 f943 	bl	1d308 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   15082:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   15086:	7086      	strb	r6, [r0, #2]
}
   15088:	4620      	mov	r0, r4
   1508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT_NO_MSG(buf);
   1508e:	4d07      	ldr	r5, [pc, #28]	; (150ac <bt_hci_cmd_create+0x90>)
   15090:	22e9      	movs	r2, #233	; 0xe9
   15092:	4629      	mov	r1, r5
   15094:	4806      	ldr	r0, [pc, #24]	; (150b0 <bt_hci_cmd_create+0x94>)
   15096:	f013 f954 	bl	28342 <printk>
   1509a:	21e9      	movs	r1, #233	; 0xe9
   1509c:	4628      	mov	r0, r5
   1509e:	f013 fce9 	bl	28a74 <assert_post_action>
   150a2:	e7c8      	b.n	15036 <bt_hci_cmd_create+0x1a>
   150a4:	2000093c 	.word	0x2000093c
   150a8:	2000274c 	.word	0x2000274c
   150ac:	00030af8 	.word	0x00030af8
   150b0:	0002f968 	.word	0x0002f968

000150b4 <bt_hci_cmd_send_sync>:
{
   150b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   150b6:	b087      	sub	sp, #28
   150b8:	4606      	mov	r6, r0
   150ba:	4615      	mov	r5, r2
	if (!buf) {
   150bc:	460c      	mov	r4, r1
   150be:	b351      	cbz	r1, 15116 <bt_hci_cmd_send_sync+0x62>
	return z_impl_k_sem_init(sem, initial_count, limit);
   150c0:	2201      	movs	r2, #1
   150c2:	2100      	movs	r1, #0
   150c4:	4668      	mov	r0, sp
   150c6:	f019 fe04 	bl	2ecd2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   150ca:	4620      	mov	r0, r4
   150cc:	f007 fea2 	bl	1ce14 <net_buf_id>
   150d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   150d4:	4b25      	ldr	r3, [pc, #148]	; (1516c <bt_hci_cmd_send_sync+0xb8>)
   150d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   150da:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   150de:	4620      	mov	r0, r4
   150e0:	f008 f832 	bl	1d148 <net_buf_ref>
   150e4:	4601      	mov	r1, r0
   150e6:	4822      	ldr	r0, [pc, #136]	; (15170 <bt_hci_cmd_send_sync+0xbc>)
   150e8:	f007 ffc4 	bl	1d074 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   150ec:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   150f0:	2300      	movs	r3, #0
   150f2:	4668      	mov	r0, sp
   150f4:	f00d fc10 	bl	22918 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   150f8:	b9a8      	cbnz	r0, 15126 <bt_hci_cmd_send_sync+0x72>
	status = cmd(buf)->status;
   150fa:	4620      	mov	r0, r4
   150fc:	f007 fe8a 	bl	1ce14 <net_buf_id>
   15100:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15104:	4b19      	ldr	r3, [pc, #100]	; (1516c <bt_hci_cmd_send_sync+0xb8>)
   15106:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   1510a:	b9cf      	cbnz	r7, 15140 <bt_hci_cmd_send_sync+0x8c>
	if (rsp) {
   1510c:	b34d      	cbz	r5, 15162 <bt_hci_cmd_send_sync+0xae>
		*rsp = buf;
   1510e:	602c      	str	r4, [r5, #0]
	return 0;
   15110:	2000      	movs	r0, #0
}
   15112:	b007      	add	sp, #28
   15114:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   15116:	f7ff ff81 	bl	1501c <bt_hci_cmd_create>
		if (!buf) {
   1511a:	4604      	mov	r4, r0
   1511c:	2800      	cmp	r0, #0
   1511e:	d1cf      	bne.n	150c0 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   15120:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15124:	e7f5      	b.n	15112 <bt_hci_cmd_send_sync+0x5e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   15126:	f44f 7299 	mov.w	r2, #306	; 0x132
   1512a:	4912      	ldr	r1, [pc, #72]	; (15174 <bt_hci_cmd_send_sync+0xc0>)
   1512c:	4812      	ldr	r0, [pc, #72]	; (15178 <bt_hci_cmd_send_sync+0xc4>)
   1512e:	f013 f908 	bl	28342 <printk>
   15132:	4040      	eors	r0, r0
   15134:	f380 8811 	msr	BASEPRI, r0
   15138:	f04f 0003 	mov.w	r0, #3
   1513c:	df02      	svc	2
   1513e:	e7dc      	b.n	150fa <bt_hci_cmd_send_sync+0x46>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   15140:	463b      	mov	r3, r7
   15142:	4632      	mov	r2, r6
   15144:	2157      	movs	r1, #87	; 0x57
   15146:	480d      	ldr	r0, [pc, #52]	; (1517c <bt_hci_cmd_send_sync+0xc8>)
   15148:	f013 fc9c 	bl	28a84 <z_log_minimal_printk>
		net_buf_unref(buf);
   1514c:	4620      	mov	r0, r4
   1514e:	f007 ffc3 	bl	1d0d8 <net_buf_unref>
		switch (status) {
   15152:	2f09      	cmp	r7, #9
   15154:	d002      	beq.n	1515c <bt_hci_cmd_send_sync+0xa8>
			return -EIO;
   15156:	f06f 0004 	mvn.w	r0, #4
   1515a:	e7da      	b.n	15112 <bt_hci_cmd_send_sync+0x5e>
			return -ECONNREFUSED;
   1515c:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   15160:	e7d7      	b.n	15112 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
   15162:	4620      	mov	r0, r4
   15164:	f007 ffb8 	bl	1d0d8 <net_buf_unref>
	return 0;
   15168:	2000      	movs	r0, #0
   1516a:	e7d2      	b.n	15112 <bt_hci_cmd_send_sync+0x5e>
   1516c:	2000274c 	.word	0x2000274c
   15170:	20000400 	.word	0x20000400
   15174:	00030af8 	.word	0x00030af8
   15178:	0002f968 	.word	0x0002f968
   1517c:	00030bec 	.word	0x00030bec

00015180 <common_init>:
{
   15180:	b510      	push	{r4, lr}
   15182:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   15184:	4b22      	ldr	r3, [pc, #136]	; (15210 <common_init+0x90>)
   15186:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
   1518a:	689b      	ldr	r3, [r3, #8]
   1518c:	f013 0f01 	tst.w	r3, #1
   15190:	d10d      	bne.n	151ae <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   15192:	aa01      	add	r2, sp, #4
   15194:	2100      	movs	r1, #0
   15196:	f640 4003 	movw	r0, #3075	; 0xc03
   1519a:	f7ff ff8b 	bl	150b4 <bt_hci_cmd_send_sync>
		if (err) {
   1519e:	4604      	mov	r4, r0
   151a0:	b968      	cbnz	r0, 151be <common_init+0x3e>
		hci_reset_complete(rsp);
   151a2:	9801      	ldr	r0, [sp, #4]
   151a4:	f7ff fb74 	bl	14890 <hci_reset_complete>
		net_buf_unref(rsp);
   151a8:	9801      	ldr	r0, [sp, #4]
   151aa:	f007 ff95 	bl	1d0d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   151ae:	aa01      	add	r2, sp, #4
   151b0:	2100      	movs	r1, #0
   151b2:	f241 0003 	movw	r0, #4099	; 0x1003
   151b6:	f7ff ff7d 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   151ba:	4604      	mov	r4, r0
   151bc:	b110      	cbz	r0, 151c4 <common_init+0x44>
}
   151be:	4620      	mov	r0, r4
   151c0:	b002      	add	sp, #8
   151c2:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   151c4:	9801      	ldr	r0, [sp, #4]
   151c6:	f7ff fb7d 	bl	148c4 <read_local_features_complete>
	net_buf_unref(rsp);
   151ca:	9801      	ldr	r0, [sp, #4]
   151cc:	f007 ff84 	bl	1d0d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   151d0:	aa01      	add	r2, sp, #4
   151d2:	2100      	movs	r1, #0
   151d4:	f241 0001 	movw	r0, #4097	; 0x1001
   151d8:	f7ff ff6c 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   151dc:	4604      	mov	r4, r0
   151de:	2800      	cmp	r0, #0
   151e0:	d1ed      	bne.n	151be <common_init+0x3e>
	read_local_ver_complete(rsp);
   151e2:	9801      	ldr	r0, [sp, #4]
   151e4:	f7ff fb0e 	bl	14804 <read_local_ver_complete>
	net_buf_unref(rsp);
   151e8:	9801      	ldr	r0, [sp, #4]
   151ea:	f007 ff75 	bl	1d0d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   151ee:	aa01      	add	r2, sp, #4
   151f0:	2100      	movs	r1, #0
   151f2:	f241 0002 	movw	r0, #4098	; 0x1002
   151f6:	f7ff ff5d 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   151fa:	4604      	mov	r4, r0
   151fc:	2800      	cmp	r0, #0
   151fe:	d1de      	bne.n	151be <common_init+0x3e>
	read_supported_commands_complete(rsp);
   15200:	9801      	ldr	r0, [sp, #4]
   15202:	f7ff fb73 	bl	148ec <read_supported_commands_complete>
	net_buf_unref(rsp);
   15206:	9801      	ldr	r0, [sp, #4]
   15208:	f007 ff66 	bl	1d0d8 <net_buf_unref>
	return 0;
   1520c:	e7d7      	b.n	151be <common_init+0x3e>
   1520e:	bf00      	nop
   15210:	200002a8 	.word	0x200002a8

00015214 <hci_le_read_max_data_len>:
{
   15214:	b570      	push	{r4, r5, r6, lr}
   15216:	b082      	sub	sp, #8
   15218:	4605      	mov	r5, r0
   1521a:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1521c:	aa01      	add	r2, sp, #4
   1521e:	2100      	movs	r1, #0
   15220:	f242 002f 	movw	r0, #8239	; 0x202f
   15224:	f7ff ff46 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   15228:	4606      	mov	r6, r0
   1522a:	b960      	cbnz	r0, 15246 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   1522c:	9801      	ldr	r0, [sp, #4]
   1522e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15230:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15234:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15236:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1523a:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   1523c:	f007 ff4c 	bl	1d0d8 <net_buf_unref>
}
   15240:	4630      	mov	r0, r6
   15242:	b002      	add	sp, #8
   15244:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
   15246:	2145      	movs	r1, #69	; 0x45
   15248:	4801      	ldr	r0, [pc, #4]	; (15250 <hci_le_read_max_data_len+0x3c>)
   1524a:	f013 fc1b 	bl	28a84 <z_log_minimal_printk>
		return err;
   1524e:	e7f7      	b.n	15240 <hci_le_read_max_data_len+0x2c>
   15250:	00030c10 	.word	0x00030c10

00015254 <le_set_event_mask>:
{
   15254:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   15256:	2108      	movs	r1, #8
   15258:	f242 0001 	movw	r0, #8193	; 0x2001
   1525c:	f7ff fede 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   15260:	2800      	cmp	r0, #0
   15262:	d04b      	beq.n	152fc <le_set_event_mask+0xa8>
   15264:	4604      	mov	r4, r0
   15266:	2108      	movs	r1, #8
   15268:	4408      	add	r0, r1
   1526a:	f008 f84d 	bl	1d308 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   1526e:	4b25      	ldr	r3, [pc, #148]	; (15304 <le_set_event_mask+0xb0>)
   15270:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
		if ((IS_ENABLED(CONFIG_BT_SMP) &&
   15274:	f011 0f40 	tst.w	r1, #64	; 0x40
   15278:	d03a      	beq.n	152f0 <le_set_event_mask+0x9c>
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
   1527a:	f240 2602 	movw	r6, #514	; 0x202
   1527e:	2500      	movs	r5, #0
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   15280:	f046 030c 	orr.w	r3, r6, #12
   15284:	462a      	mov	r2, r5
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   15286:	f011 0f02 	tst.w	r1, #2
   1528a:	d001      	beq.n	15290 <le_set_event_mask+0x3c>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1528c:	f046 032c 	orr.w	r3, r6, #44	; 0x2c
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   15290:	f011 0f20 	tst.w	r1, #32
   15294:	d001      	beq.n	1529a <le_set_event_mask+0x46>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   15296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   1529a:	4d1a      	ldr	r5, [pc, #104]	; (15304 <le_set_event_mask+0xb0>)
   1529c:	f895 50d1 	ldrb.w	r5, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   152a0:	f015 0f09 	tst.w	r5, #9
   152a4:	d001      	beq.n	152aa <le_set_event_mask+0x56>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   152a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   152aa:	f011 0f01 	tst.w	r1, #1
   152ae:	d001      	beq.n	152b4 <le_set_event_mask+0x60>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   152b0:	f043 0310 	orr.w	r3, r3, #16
	    (BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
   152b4:	4913      	ldr	r1, [pc, #76]	; (15304 <le_set_event_mask+0xb0>)
   152b6:	f891 109a 	ldrb.w	r1, [r1, #154]	; 0x9a
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   152ba:	f001 0106 	and.w	r1, r1, #6
   152be:	2906      	cmp	r1, #6
   152c0:	d019      	beq.n	152f6 <le_set_event_mask+0xa2>
	dst[0] = val;
   152c2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   152c4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   152c8:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   152ca:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
   152cc:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   152ce:	0e1b      	lsrs	r3, r3, #24
   152d0:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   152d2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   152d4:	f3c2 2307 	ubfx	r3, r2, #8, #8
   152d8:	7143      	strb	r3, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   152da:	0c13      	lsrs	r3, r2, #16
	dst[0] = val;
   152dc:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
   152de:	0e12      	lsrs	r2, r2, #24
   152e0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   152e2:	2200      	movs	r2, #0
   152e4:	4621      	mov	r1, r4
   152e6:	f242 0001 	movw	r0, #8193	; 0x2001
   152ea:	f7ff fee3 	bl	150b4 <bt_hci_cmd_send_sync>
}
   152ee:	bd70      	pop	{r4, r5, r6, pc}
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   152f0:	2603      	movs	r6, #3
   152f2:	2500      	movs	r5, #0
   152f4:	e7c4      	b.n	15280 <le_set_event_mask+0x2c>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   152f6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
   152fa:	e7e2      	b.n	152c2 <le_set_event_mask+0x6e>
		return -ENOBUFS;
   152fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15300:	e7f5      	b.n	152ee <le_set_event_mask+0x9a>
   15302:	bf00      	nop
   15304:	200002a8 	.word	0x200002a8

00015308 <le_init>:
{
   15308:	b510      	push	{r4, lr}
   1530a:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   1530c:	4b54      	ldr	r3, [pc, #336]	; (15460 <le_init+0x158>)
   1530e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15312:	f013 0f40 	tst.w	r3, #64	; 0x40
   15316:	d00a      	beq.n	1532e <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   15318:	aa01      	add	r2, sp, #4
   1531a:	2100      	movs	r1, #0
   1531c:	f242 0003 	movw	r0, #8195	; 0x2003
   15320:	f7ff fec8 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   15324:	4603      	mov	r3, r0
   15326:	b148      	cbz	r0, 1533c <le_init+0x34>
}
   15328:	4618      	mov	r0, r3
   1532a:	b002      	add	sp, #8
   1532c:	bd10      	pop	{r4, pc}
		BT_ERR("Non-LE capable controller detected!");
   1532e:	2145      	movs	r1, #69	; 0x45
   15330:	484c      	ldr	r0, [pc, #304]	; (15464 <le_init+0x15c>)
   15332:	f013 fba7 	bl	28a84 <z_log_minimal_printk>
		return -ENODEV;
   15336:	f06f 0312 	mvn.w	r3, #18
   1533a:	e7f5      	b.n	15328 <le_init+0x20>
	read_le_features_complete(rsp);
   1533c:	9801      	ldr	r0, [sp, #4]
   1533e:	f7ff facb 	bl	148d8 <read_le_features_complete>
	net_buf_unref(rsp);
   15342:	9801      	ldr	r0, [sp, #4]
   15344:	f007 fec8 	bl	1d0d8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   15348:	aa01      	add	r2, sp, #4
   1534a:	2100      	movs	r1, #0
   1534c:	f242 0002 	movw	r0, #8194	; 0x2002
   15350:	f7ff feb0 	bl	150b4 <bt_hci_cmd_send_sync>
		if (err) {
   15354:	4603      	mov	r3, r0
   15356:	2800      	cmp	r0, #0
   15358:	d1e6      	bne.n	15328 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   1535a:	9801      	ldr	r0, [sp, #4]
   1535c:	f7ff fad4 	bl	14908 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   15360:	9801      	ldr	r0, [sp, #4]
   15362:	f007 feb9 	bl	1d0d8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15366:	4b3e      	ldr	r3, [pc, #248]	; (15460 <le_init+0x158>)
   15368:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1536c:	f013 0f20 	tst.w	r3, #32
   15370:	d024      	beq.n	153bc <le_init+0xb4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   15372:	4b3b      	ldr	r3, [pc, #236]	; (15460 <le_init+0x158>)
   15374:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   15378:	f013 0f08 	tst.w	r3, #8
   1537c:	d137      	bne.n	153ee <le_init+0xe6>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   1537e:	4b38      	ldr	r3, [pc, #224]	; (15460 <le_init+0x158>)
   15380:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   15384:	f013 0f20 	tst.w	r3, #32
   15388:	d141      	bne.n	1540e <le_init+0x106>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1538a:	4b35      	ldr	r3, [pc, #212]	; (15460 <le_init+0x158>)
   1538c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15390:	f013 0f40 	tst.w	r3, #64	; 0x40
   15394:	d00e      	beq.n	153b4 <le_init+0xac>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   15396:	aa01      	add	r2, sp, #4
   15398:	2100      	movs	r1, #0
   1539a:	f242 002a 	movw	r0, #8234	; 0x202a
   1539e:	f7ff fe89 	bl	150b4 <bt_hci_cmd_send_sync>
		if (err) {
   153a2:	4603      	mov	r3, r0
   153a4:	2800      	cmp	r0, #0
   153a6:	d1bf      	bne.n	15328 <le_init+0x20>
		le_read_resolving_list_size_complete(rsp);
   153a8:	9801      	ldr	r0, [sp, #4]
   153aa:	f7ff fa5f 	bl	1486c <le_read_resolving_list_size_complete>
		net_buf_unref(rsp);
   153ae:	9801      	ldr	r0, [sp, #4]
   153b0:	f007 fe92 	bl	1d0d8 <net_buf_unref>
	return  le_set_event_mask();
   153b4:	f7ff ff4e 	bl	15254 <le_set_event_mask>
   153b8:	4603      	mov	r3, r0
   153ba:	e7b5      	b.n	15328 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   153bc:	2102      	movs	r1, #2
   153be:	f640 406d 	movw	r0, #3181	; 0xc6d
   153c2:	f7ff fe2b 	bl	1501c <bt_hci_cmd_create>
		if (!buf) {
   153c6:	4604      	mov	r4, r0
   153c8:	2800      	cmp	r0, #0
   153ca:	d046      	beq.n	1545a <le_init+0x152>
   153cc:	2102      	movs	r1, #2
   153ce:	3008      	adds	r0, #8
   153d0:	f007 ff9a 	bl	1d308 <net_buf_simple_add>
		cp_le->le = 0x01;
   153d4:	2301      	movs	r3, #1
   153d6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   153d8:	2200      	movs	r2, #0
   153da:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   153dc:	4621      	mov	r1, r4
   153de:	f640 406d 	movw	r0, #3181	; 0xc6d
   153e2:	f7ff fe67 	bl	150b4 <bt_hci_cmd_send_sync>
		if (err) {
   153e6:	4603      	mov	r3, r0
   153e8:	2800      	cmp	r0, #0
   153ea:	d0c2      	beq.n	15372 <le_init+0x6a>
   153ec:	e79c      	b.n	15328 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   153ee:	aa01      	add	r2, sp, #4
   153f0:	2100      	movs	r1, #0
   153f2:	f242 001c 	movw	r0, #8220	; 0x201c
   153f6:	f7ff fe5d 	bl	150b4 <bt_hci_cmd_send_sync>
		if (err) {
   153fa:	4603      	mov	r3, r0
   153fc:	2800      	cmp	r0, #0
   153fe:	d193      	bne.n	15328 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   15400:	9801      	ldr	r0, [sp, #4]
   15402:	f7ff fa15 	bl	14830 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   15406:	9801      	ldr	r0, [sp, #4]
   15408:	f007 fe66 	bl	1d0d8 <net_buf_unref>
   1540c:	e7b7      	b.n	1537e <le_init+0x76>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1540e:	f10d 0102 	add.w	r1, sp, #2
   15412:	4668      	mov	r0, sp
   15414:	f7ff fefe 	bl	15214 <hci_le_read_max_data_len>
		if (err) {
   15418:	4603      	mov	r3, r0
   1541a:	2800      	cmp	r0, #0
   1541c:	d184      	bne.n	15328 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1541e:	2104      	movs	r1, #4
   15420:	f242 0024 	movw	r0, #8228	; 0x2024
   15424:	f7ff fdfa 	bl	1501c <bt_hci_cmd_create>
		if (!buf) {
   15428:	4604      	mov	r4, r0
   1542a:	b198      	cbz	r0, 15454 <le_init+0x14c>
   1542c:	2104      	movs	r1, #4
   1542e:	3008      	adds	r0, #8
   15430:	f007 ff6a 	bl	1d308 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   15434:	f8bd 3000 	ldrh.w	r3, [sp]
   15438:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1543a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1543e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15440:	2200      	movs	r2, #0
   15442:	4621      	mov	r1, r4
   15444:	f242 0024 	movw	r0, #8228	; 0x2024
   15448:	f7ff fe34 	bl	150b4 <bt_hci_cmd_send_sync>
		if (err) {
   1544c:	4603      	mov	r3, r0
   1544e:	2800      	cmp	r0, #0
   15450:	d09b      	beq.n	1538a <le_init+0x82>
   15452:	e769      	b.n	15328 <le_init+0x20>
			return -ENOBUFS;
   15454:	f06f 0368 	mvn.w	r3, #104	; 0x68
   15458:	e766      	b.n	15328 <le_init+0x20>
			return -ENOBUFS;
   1545a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1545e:	e763      	b.n	15328 <le_init+0x20>
   15460:	200002a8 	.word	0x200002a8
   15464:	00030c38 	.word	0x00030c38

00015468 <bt_br_init>:
{
   15468:	b510      	push	{r4, lr}
   1546a:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   1546c:	4b0b      	ldr	r3, [pc, #44]	; (1549c <bt_br_init+0x34>)
   1546e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   15472:	b11b      	cbz	r3, 1547c <bt_br_init+0x14>
		return 0;
   15474:	2400      	movs	r4, #0
}
   15476:	4620      	mov	r0, r4
   15478:	b002      	add	sp, #8
   1547a:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1547c:	aa01      	add	r2, sp, #4
   1547e:	2100      	movs	r1, #0
   15480:	f241 0005 	movw	r0, #4101	; 0x1005
   15484:	f7ff fe16 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   15488:	4604      	mov	r4, r0
   1548a:	2800      	cmp	r0, #0
   1548c:	d1f3      	bne.n	15476 <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   1548e:	9801      	ldr	r0, [sp, #4]
   15490:	f7ff fa4e 	bl	14930 <read_buffer_size_complete>
	net_buf_unref(rsp);
   15494:	9801      	ldr	r0, [sp, #4]
   15496:	f007 fe1f 	bl	1d0d8 <net_buf_unref>
	return 0;
   1549a:	e7ec      	b.n	15476 <bt_br_init+0xe>
   1549c:	200002a8 	.word	0x200002a8

000154a0 <set_event_mask>:
{
   154a0:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   154a2:	2108      	movs	r1, #8
   154a4:	f640 4001 	movw	r0, #3073	; 0xc01
   154a8:	f7ff fdb8 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   154ac:	b338      	cbz	r0, 154fe <set_event_mask+0x5e>
   154ae:	4604      	mov	r4, r0
   154b0:	2108      	movs	r1, #8
   154b2:	4408      	add	r0, r1
   154b4:	f007 ff28 	bl	1d308 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
   154b8:	4b12      	ldr	r3, [pc, #72]	; (15504 <set_event_mask+0x64>)
   154ba:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   154be:	f013 0f01 	tst.w	r3, #1
   154c2:	d119      	bne.n	154f8 <set_event_mask+0x58>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   154c4:	4a10      	ldr	r2, [pc, #64]	; (15508 <set_event_mask+0x68>)
   154c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
   154ca:	b291      	uxth	r1, r2
	dst[0] = val;
   154cc:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   154ce:	0a09      	lsrs	r1, r1, #8
   154d0:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   154d2:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   154d4:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   154d6:	0e12      	lsrs	r2, r2, #24
   154d8:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   154da:	b29a      	uxth	r2, r3
	dst[0] = val;
   154dc:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   154de:	0a12      	lsrs	r2, r2, #8
   154e0:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   154e2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   154e4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   154e6:	0e1b      	lsrs	r3, r3, #24
   154e8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   154ea:	2200      	movs	r2, #0
   154ec:	4621      	mov	r1, r4
   154ee:	f640 4001 	movw	r0, #3073	; 0xc01
   154f2:	f7ff fddf 	bl	150b4 <bt_hci_cmd_send_sync>
}
   154f6:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   154f8:	4a04      	ldr	r2, [pc, #16]	; (1550c <set_event_mask+0x6c>)
   154fa:	4b05      	ldr	r3, [pc, #20]	; (15510 <set_event_mask+0x70>)
   154fc:	e7e5      	b.n	154ca <set_event_mask+0x2a>
		return -ENOBUFS;
   154fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15502:	e7f8      	b.n	154f6 <set_event_mask+0x56>
   15504:	200002a8 	.word	0x200002a8
   15508:	02008810 	.word	0x02008810
   1550c:	02008890 	.word	0x02008890
   15510:	20008000 	.word	0x20008000

00015514 <hci_vs_init>:
{
   15514:	b510      	push	{r4, lr}
   15516:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   15518:	aa01      	add	r2, sp, #4
   1551a:	2100      	movs	r1, #0
   1551c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   15520:	f7ff fdc8 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   15524:	bb60      	cbnz	r0, 15580 <hci_vs_init+0x6c>
	net_buf_unref(rsp);
   15526:	9801      	ldr	r0, [sp, #4]
   15528:	f007 fdd6 	bl	1d0d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1552c:	aa01      	add	r2, sp, #4
   1552e:	2100      	movs	r1, #0
   15530:	f64f 4002 	movw	r0, #64514	; 0xfc02
   15534:	f7ff fdbe 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   15538:	bb40      	cbnz	r0, 1558c <hci_vs_init+0x78>
	rp.cmds = (void *)rsp->data;
   1553a:	9b01      	ldr	r3, [sp, #4]
   1553c:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1553e:	4c18      	ldr	r4, [pc, #96]	; (155a0 <hci_vs_init+0x8c>)
   15540:	2202      	movs	r2, #2
   15542:	3101      	adds	r1, #1
   15544:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   15548:	f015 f9a9 	bl	2a89e <memcpy>
	net_buf_unref(rsp);
   1554c:	9801      	ldr	r0, [sp, #4]
   1554e:	f007 fdc3 	bl	1d0d8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   15552:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   15556:	f013 0f04 	tst.w	r3, #4
   1555a:	d015      	beq.n	15588 <hci_vs_init+0x74>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1555c:	aa01      	add	r2, sp, #4
   1555e:	2100      	movs	r1, #0
   15560:	f64f 4003 	movw	r0, #64515	; 0xfc03
   15564:	f7ff fda6 	bl	150b4 <bt_hci_cmd_send_sync>
		if (err) {
   15568:	b9a8      	cbnz	r0, 15596 <hci_vs_init+0x82>
		rp.feat = (void *)rsp->data;
   1556a:	9b01      	ldr	r3, [sp, #4]
   1556c:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1556e:	2201      	movs	r2, #1
   15570:	4411      	add	r1, r2
   15572:	480c      	ldr	r0, [pc, #48]	; (155a4 <hci_vs_init+0x90>)
   15574:	f015 f993 	bl	2a89e <memcpy>
		net_buf_unref(rsp);
   15578:	9801      	ldr	r0, [sp, #4]
   1557a:	f007 fdad 	bl	1d0d8 <net_buf_unref>
   1557e:	e003      	b.n	15588 <hci_vs_init+0x74>
		BT_WARN("Vendor HCI extensions not available");
   15580:	2157      	movs	r1, #87	; 0x57
   15582:	4809      	ldr	r0, [pc, #36]	; (155a8 <hci_vs_init+0x94>)
   15584:	f013 fa7e 	bl	28a84 <z_log_minimal_printk>
}
   15588:	b002      	add	sp, #8
   1558a:	bd10      	pop	{r4, pc}
		BT_WARN("Failed to read supported vendor commands");
   1558c:	2157      	movs	r1, #87	; 0x57
   1558e:	4807      	ldr	r0, [pc, #28]	; (155ac <hci_vs_init+0x98>)
   15590:	f013 fa78 	bl	28a84 <z_log_minimal_printk>
		return;
   15594:	e7f8      	b.n	15588 <hci_vs_init+0x74>
			BT_WARN("Failed to read supported vendor features");
   15596:	2157      	movs	r1, #87	; 0x57
   15598:	4805      	ldr	r0, [pc, #20]	; (155b0 <hci_vs_init+0x9c>)
   1559a:	f013 fa73 	bl	28a84 <z_log_minimal_printk>
			return;
   1559e:	e7f3      	b.n	15588 <hci_vs_init+0x74>
   155a0:	200002a8 	.word	0x200002a8
   155a4:	20000360 	.word	0x20000360
   155a8:	00030c64 	.word	0x00030c64
   155ac:	00030c90 	.word	0x00030c90
   155b0:	00030cc0 	.word	0x00030cc0

000155b4 <hci_init>:
{
   155b4:	b508      	push	{r3, lr}
	err = common_init();
   155b6:	f7ff fde3 	bl	15180 <common_init>
	if (err) {
   155ba:	4603      	mov	r3, r0
   155bc:	b108      	cbz	r0, 155c2 <hci_init+0xe>
}
   155be:	4618      	mov	r0, r3
   155c0:	bd08      	pop	{r3, pc}
	err = le_init();
   155c2:	f7ff fea1 	bl	15308 <le_init>
	if (err) {
   155c6:	4603      	mov	r3, r0
   155c8:	2800      	cmp	r0, #0
   155ca:	d1f8      	bne.n	155be <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   155cc:	4b0a      	ldr	r3, [pc, #40]	; (155f8 <hci_init+0x44>)
   155ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   155d2:	f013 0f20 	tst.w	r3, #32
   155d6:	d104      	bne.n	155e2 <hci_init+0x2e>
		err = bt_br_init();
   155d8:	f7ff ff46 	bl	15468 <bt_br_init>
		if (err) {
   155dc:	4603      	mov	r3, r0
   155de:	2800      	cmp	r0, #0
   155e0:	d1ed      	bne.n	155be <hci_init+0xa>
	err = set_event_mask();
   155e2:	f7ff ff5d 	bl	154a0 <set_event_mask>
	if (err) {
   155e6:	4603      	mov	r3, r0
   155e8:	2800      	cmp	r0, #0
   155ea:	d1e8      	bne.n	155be <hci_init+0xa>
	hci_vs_init();
   155ec:	f7ff ff92 	bl	15514 <hci_vs_init>
	err = bt_id_init();
   155f0:	f015 fd23 	bl	2b03a <bt_id_init>
   155f4:	4603      	mov	r3, r0
	if (err) {
   155f6:	e7e2      	b.n	155be <hci_init+0xa>
   155f8:	200002a8 	.word	0x200002a8

000155fc <hci_encrypt_key_refresh_complete>:
{
   155fc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   155fe:	6883      	ldr	r3, [r0, #8]
	uint8_t status = evt->status;
   15600:	781c      	ldrb	r4, [r3, #0]
	handle = sys_le16_to_cpu(evt->handle);
   15602:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15606:	4630      	mov	r0, r6
   15608:	f002 f85a 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   1560c:	b188      	cbz	r0, 15632 <hci_encrypt_key_refresh_complete+0x36>
   1560e:	4605      	mov	r5, r0
	if (status) {
   15610:	b9ac      	cbnz	r4, 1563e <hci_encrypt_key_refresh_complete+0x42>
	if (conn->type == BT_CONN_TYPE_LE) {
   15612:	7883      	ldrb	r3, [r0, #2]
   15614:	2b01      	cmp	r3, #1
   15616:	d01e      	beq.n	15656 <hci_encrypt_key_refresh_complete+0x5a>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15618:	4620      	mov	r0, r4
   1561a:	f015 fb44 	bl	2aca6 <bt_security_err_get>
   1561e:	4602      	mov	r2, r0
   15620:	4621      	mov	r1, r4
   15622:	4628      	mov	r0, r5
   15624:	f002 fa76 	bl	17b14 <bt_conn_security_changed>
	if (status) {
   15628:	b9f4      	cbnz	r4, 15668 <hci_encrypt_key_refresh_complete+0x6c>
	bt_conn_unref(conn);
   1562a:	4628      	mov	r0, r5
   1562c:	f002 f816 	bl	1765c <bt_conn_unref>
}
   15630:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15632:	4632      	mov	r2, r6
   15634:	2145      	movs	r1, #69	; 0x45
   15636:	4811      	ldr	r0, [pc, #68]	; (1567c <hci_encrypt_key_refresh_complete+0x80>)
   15638:	f013 fa24 	bl	28a84 <z_log_minimal_printk>
		return;
   1563c:	e7f8      	b.n	15630 <hci_encrypt_key_refresh_complete+0x34>
		bt_conn_security_changed(conn, status,
   1563e:	4620      	mov	r0, r4
   15640:	f015 fb31 	bl	2aca6 <bt_security_err_get>
   15644:	4602      	mov	r2, r0
   15646:	4621      	mov	r1, r4
   15648:	4628      	mov	r0, r5
   1564a:	f002 fa63 	bl	17b14 <bt_conn_security_changed>
		bt_conn_unref(conn);
   1564e:	4628      	mov	r0, r5
   15650:	f002 f804 	bl	1765c <bt_conn_unref>
		return;
   15654:	e7ec      	b.n	15630 <hci_encrypt_key_refresh_complete+0x34>
		bt_smp_update_keys(conn);
   15656:	f007 f923 	bl	1c8a0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1565a:	4628      	mov	r0, r5
   1565c:	f015 faac 	bl	2abb8 <update_sec_level>
   15660:	2800      	cmp	r0, #0
   15662:	d1d9      	bne.n	15618 <hci_encrypt_key_refresh_complete+0x1c>
			status = BT_HCI_ERR_AUTH_FAIL;
   15664:	2405      	movs	r4, #5
   15666:	e7d7      	b.n	15618 <hci_encrypt_key_refresh_complete+0x1c>
		BT_ERR("Failed to set required security level");
   15668:	2145      	movs	r1, #69	; 0x45
   1566a:	4805      	ldr	r0, [pc, #20]	; (15680 <hci_encrypt_key_refresh_complete+0x84>)
   1566c:	f013 fa0a 	bl	28a84 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   15670:	4621      	mov	r1, r4
   15672:	4628      	mov	r0, r5
   15674:	f015 ffe6 	bl	2b644 <bt_conn_disconnect>
   15678:	e7d7      	b.n	1562a <hci_encrypt_key_refresh_complete+0x2e>
   1567a:	bf00      	nop
   1567c:	00030998 	.word	0x00030998
   15680:	00030cf0 	.word	0x00030cf0

00015684 <hci_encrypt_change>:
{
   15684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   15686:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15688:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   1568c:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1568e:	4638      	mov	r0, r7
   15690:	f002 f816 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   15694:	b198      	cbz	r0, 156be <hci_encrypt_change+0x3a>
   15696:	4604      	mov	r4, r0
	if (status) {
   15698:	b9bd      	cbnz	r5, 156ca <hci_encrypt_change+0x46>
	conn->encrypt = evt->encrypt;
   1569a:	78f3      	ldrb	r3, [r6, #3]
   1569c:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1569e:	7882      	ldrb	r2, [r0, #2]
   156a0:	2a01      	cmp	r2, #1
   156a2:	d01e      	beq.n	156e2 <hci_encrypt_change+0x5e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   156a4:	4628      	mov	r0, r5
   156a6:	f015 fafe 	bl	2aca6 <bt_security_err_get>
   156aa:	4602      	mov	r2, r0
   156ac:	4629      	mov	r1, r5
   156ae:	4620      	mov	r0, r4
   156b0:	f002 fa30 	bl	17b14 <bt_conn_security_changed>
	if (status) {
   156b4:	bb05      	cbnz	r5, 156f8 <hci_encrypt_change+0x74>
	bt_conn_unref(conn);
   156b6:	4620      	mov	r0, r4
   156b8:	f001 ffd0 	bl	1765c <bt_conn_unref>
}
   156bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to look up conn with handle %u", handle);
   156be:	463a      	mov	r2, r7
   156c0:	2145      	movs	r1, #69	; 0x45
   156c2:	4812      	ldr	r0, [pc, #72]	; (1570c <hci_encrypt_change+0x88>)
   156c4:	f013 f9de 	bl	28a84 <z_log_minimal_printk>
		return;
   156c8:	e7f8      	b.n	156bc <hci_encrypt_change+0x38>
		bt_conn_security_changed(conn, status,
   156ca:	4628      	mov	r0, r5
   156cc:	f015 faeb 	bl	2aca6 <bt_security_err_get>
   156d0:	4602      	mov	r2, r0
   156d2:	4629      	mov	r1, r5
   156d4:	4620      	mov	r0, r4
   156d6:	f002 fa1d 	bl	17b14 <bt_conn_security_changed>
		bt_conn_unref(conn);
   156da:	4620      	mov	r0, r4
   156dc:	f001 ffbe 	bl	1765c <bt_conn_unref>
		return;
   156e0:	e7ec      	b.n	156bc <hci_encrypt_change+0x38>
		if (conn->encrypt) {
   156e2:	b933      	cbnz	r3, 156f2 <hci_encrypt_change+0x6e>
		if (!update_sec_level(conn)) {
   156e4:	4620      	mov	r0, r4
   156e6:	f015 fa67 	bl	2abb8 <update_sec_level>
   156ea:	2800      	cmp	r0, #0
   156ec:	d1da      	bne.n	156a4 <hci_encrypt_change+0x20>
			status = BT_HCI_ERR_AUTH_FAIL;
   156ee:	2505      	movs	r5, #5
   156f0:	e7d8      	b.n	156a4 <hci_encrypt_change+0x20>
			bt_smp_update_keys(conn);
   156f2:	f007 f8d5 	bl	1c8a0 <bt_smp_update_keys>
   156f6:	e7f5      	b.n	156e4 <hci_encrypt_change+0x60>
		BT_ERR("Failed to set required security level");
   156f8:	2145      	movs	r1, #69	; 0x45
   156fa:	4805      	ldr	r0, [pc, #20]	; (15710 <hci_encrypt_change+0x8c>)
   156fc:	f013 f9c2 	bl	28a84 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   15700:	4629      	mov	r1, r5
   15702:	4620      	mov	r0, r4
   15704:	f015 ff9e 	bl	2b644 <bt_conn_disconnect>
   15708:	e7d5      	b.n	156b6 <hci_encrypt_change+0x32>
   1570a:	bf00      	nop
   1570c:	00030998 	.word	0x00030998
   15710:	00030cf0 	.word	0x00030cf0

00015714 <bt_hci_cmd_send>:
{
   15714:	b538      	push	{r3, r4, r5, lr}
   15716:	4604      	mov	r4, r0
	if (!buf) {
   15718:	460d      	mov	r5, r1
   1571a:	b151      	cbz	r1, 15732 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1571c:	f640 4335 	movw	r3, #3125	; 0xc35
   15720:	429c      	cmp	r4, r3
   15722:	d00e      	beq.n	15742 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15724:	4629      	mov	r1, r5
   15726:	480e      	ldr	r0, [pc, #56]	; (15760 <bt_hci_cmd_send+0x4c>)
   15728:	f007 fca4 	bl	1d074 <net_buf_put>
	return 0;
   1572c:	2400      	movs	r4, #0
}
   1572e:	4620      	mov	r0, r4
   15730:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   15732:	f7ff fc73 	bl	1501c <bt_hci_cmd_create>
		if (!buf) {
   15736:	4605      	mov	r5, r0
   15738:	2800      	cmp	r0, #0
   1573a:	d1ef      	bne.n	1571c <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   1573c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15740:	e7f5      	b.n	1572e <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   15742:	4628      	mov	r0, r5
   15744:	f015 fad4 	bl	2acf0 <bt_send>
		if (err) {
   15748:	4604      	mov	r4, r0
   1574a:	2800      	cmp	r0, #0
   1574c:	d0ef      	beq.n	1572e <bt_hci_cmd_send+0x1a>
			BT_ERR("Unable to send to driver (err %d)", err);
   1574e:	4602      	mov	r2, r0
   15750:	2145      	movs	r1, #69	; 0x45
   15752:	4804      	ldr	r0, [pc, #16]	; (15764 <bt_hci_cmd_send+0x50>)
   15754:	f013 f996 	bl	28a84 <z_log_minimal_printk>
			net_buf_unref(buf);
   15758:	4628      	mov	r0, r5
   1575a:	f007 fcbd 	bl	1d0d8 <net_buf_unref>
		return err;
   1575e:	e7e6      	b.n	1572e <bt_hci_cmd_send+0x1a>
   15760:	20000400 	.word	0x20000400
   15764:	00030d1c 	.word	0x00030d1c

00015768 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   15768:	7b43      	ldrb	r3, [r0, #13]
   1576a:	2b07      	cmp	r3, #7
   1576c:	d000      	beq.n	15770 <conn_auto_initiate+0x8>
   1576e:	4770      	bx	lr
{
   15770:	b530      	push	{r4, r5, lr}
   15772:	b085      	sub	sp, #20
   15774:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15776:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15778:	f3bf 8f5b 	dmb	ish
   1577c:	6843      	ldr	r3, [r0, #4]
   1577e:	f3bf 8f5b 	dmb	ish
   15782:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15786:	d10b      	bne.n	157a0 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15788:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1578a:	b12b      	cbz	r3, 15798 <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   1578c:	4b2b      	ldr	r3, [pc, #172]	; (1583c <conn_auto_initiate+0xd4>)
   1578e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15792:	f013 0f08 	tst.w	r3, #8
   15796:	d003      	beq.n	157a0 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   15798:	4620      	mov	r0, r4
   1579a:	f015 faed 	bl	2ad78 <hci_le_read_remote_features>
		if (!err) {
   1579e:	b1d0      	cbz	r0, 157d6 <conn_auto_initiate+0x6e>
   157a0:	f3bf 8f5b 	dmb	ish
   157a4:	6863      	ldr	r3, [r4, #4]
   157a6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   157aa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   157ae:	d105      	bne.n	157bc <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   157b0:	4b22      	ldr	r3, [pc, #136]	; (1583c <conn_auto_initiate+0xd4>)
   157b2:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   157b6:	f013 0f01 	tst.w	r3, #1
   157ba:	d10e      	bne.n	157da <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   157bc:	4b1f      	ldr	r3, [pc, #124]	; (1583c <conn_auto_initiate+0xd4>)
   157be:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   157c2:	f013 0f20 	tst.w	r3, #32
   157c6:	d006      	beq.n	157d6 <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   157c8:	4b1c      	ldr	r3, [pc, #112]	; (1583c <conn_auto_initiate+0xd4>)
   157ca:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
   157ce:	689b      	ldr	r3, [r3, #8]
   157d0:	f013 0f02 	tst.w	r3, #2
   157d4:	d11c      	bne.n	15810 <conn_auto_initiate+0xa8>
}
   157d6:	b005      	add	sp, #20
   157d8:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   157da:	2100      	movs	r1, #0
   157dc:	9100      	str	r1, [sp, #0]
   157de:	2302      	movs	r3, #2
   157e0:	461a      	mov	r2, r3
   157e2:	4620      	mov	r0, r4
   157e4:	f015 faa4 	bl	2ad30 <bt_le_set_phy>
		if (!err) {
   157e8:	4602      	mov	r2, r0
   157ea:	b120      	cbz	r0, 157f6 <conn_auto_initiate+0x8e>
		BT_ERR("Failed to set LE PHY (%d)", err);
   157ec:	2145      	movs	r1, #69	; 0x45
   157ee:	4814      	ldr	r0, [pc, #80]	; (15840 <conn_auto_initiate+0xd8>)
   157f0:	f013 f948 	bl	28a84 <z_log_minimal_printk>
   157f4:	e7e2      	b.n	157bc <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   157f6:	f3bf 8f5b 	dmb	ish
   157fa:	e855 3f00 	ldrex	r3, [r5]
   157fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15802:	e845 3200 	strex	r2, r3, [r5]
   15806:	2a00      	cmp	r2, #0
   15808:	d1f7      	bne.n	157fa <conn_auto_initiate+0x92>
   1580a:	f3bf 8f5b 	dmb	ish
			return;
   1580e:	e7e2      	b.n	157d6 <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15810:	f10d 010e 	add.w	r1, sp, #14
   15814:	a803      	add	r0, sp, #12
   15816:	f7ff fcfd 	bl	15214 <hci_le_read_max_data_len>
			if (!err) {
   1581a:	2800      	cmp	r0, #0
   1581c:	d1db      	bne.n	157d6 <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   1581e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   15822:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15826:	4620      	mov	r0, r4
   15828:	f015 fa66 	bl	2acf8 <bt_le_set_data_len>
				if (err) {
   1582c:	4602      	mov	r2, r0
   1582e:	2800      	cmp	r0, #0
   15830:	d0d1      	beq.n	157d6 <conn_auto_initiate+0x6e>
					BT_ERR("Failed to set data len (%d)", err);
   15832:	2145      	movs	r1, #69	; 0x45
   15834:	4803      	ldr	r0, [pc, #12]	; (15844 <conn_auto_initiate+0xdc>)
   15836:	f013 f925 	bl	28a84 <z_log_minimal_printk>
		}
   1583a:	e7cc      	b.n	157d6 <conn_auto_initiate+0x6e>
   1583c:	200002a8 	.word	0x200002a8
   15840:	00030d44 	.word	0x00030d44
   15844:	00030d64 	.word	0x00030d64

00015848 <bt_hci_le_enh_conn_complete>:
{
   15848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1584c:	b084      	sub	sp, #16
   1584e:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15850:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   15854:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   15858:	4640      	mov	r0, r8
   1585a:	f7fe ffbd 	bl	147d8 <conn_handle_is_disconnected>
   1585e:	4606      	mov	r6, r0
	bt_id_pending_keys_update();
   15860:	f000 fd22 	bl	162a8 <bt_id_pending_keys_update>
	if (evt->status) {
   15864:	7820      	ldrb	r0, [r4, #0]
   15866:	b150      	cbz	r0, 1587e <bt_hci_le_enh_conn_complete+0x36>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15868:	283c      	cmp	r0, #60	; 0x3c
   1586a:	d005      	beq.n	15878 <bt_hci_le_enh_conn_complete+0x30>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1586c:	4602      	mov	r2, r0
   1586e:	2157      	movs	r1, #87	; 0x57
   15870:	4855      	ldr	r0, [pc, #340]	; (159c8 <bt_hci_le_enh_conn_complete+0x180>)
   15872:	f013 f907 	bl	28a84 <z_log_minimal_printk>
		return;
   15876:	e04a      	b.n	1590e <bt_hci_le_enh_conn_complete+0xc6>
			le_conn_complete_adv_timeout();
   15878:	f7ff f896 	bl	149a8 <le_conn_complete_adv_timeout>
			return;
   1587c:	e047      	b.n	1590e <bt_hci_le_enh_conn_complete+0xc6>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1587e:	7923      	ldrb	r3, [r4, #4]
   15880:	3b02      	subs	r3, #2
   15882:	b2db      	uxtb	r3, r3
   15884:	2b01      	cmp	r3, #1
   15886:	d945      	bls.n	15914 <bt_hci_le_enh_conn_complete+0xcc>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15888:	78e3      	ldrb	r3, [r4, #3]
   1588a:	2b01      	cmp	r3, #1
   1588c:	d057      	beq.n	1593e <bt_hci_le_enh_conn_complete+0xf6>
				bt_lookup_id_addr(id, &evt->peer_addr));
   1588e:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   15890:	4629      	mov	r1, r5
   15892:	f015 fb98 	bl	2afc6 <bt_lookup_id_addr>
   15896:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   15898:	2207      	movs	r2, #7
   1589a:	4668      	mov	r0, sp
   1589c:	f014 ffff 	bl	2a89e <memcpy>
   158a0:	2207      	movs	r2, #7
   158a2:	4629      	mov	r1, r5
   158a4:	a802      	add	r0, sp, #8
   158a6:	f014 fffa 	bl	2a89e <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   158aa:	4669      	mov	r1, sp
   158ac:	78e0      	ldrb	r0, [r4, #3]
   158ae:	f7ff f855 	bl	1495c <find_pending_connect>
   158b2:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   158b4:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   158b6:	2b01      	cmp	r3, #1
   158b8:	d045      	beq.n	15946 <bt_hci_le_enh_conn_complete+0xfe>
	if (!conn) {
   158ba:	2d00      	cmp	r5, #0
   158bc:	d056      	beq.n	1596c <bt_hci_le_enh_conn_complete+0x124>
	conn->handle = handle;
   158be:	4628      	mov	r0, r5
   158c0:	f820 7b90 	strh.w	r7, [r0], #144
   158c4:	2207      	movs	r2, #7
   158c6:	4669      	mov	r1, sp
   158c8:	f014 ffe9 	bl	2a89e <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   158cc:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   158d0:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   158d4:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   158d8:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   158dc:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   158e0:	f8a5 30ae 	strh.w	r3, [r5, #174]	; 0xae
	conn->role = evt->role;
   158e4:	78e3      	ldrb	r3, [r4, #3]
   158e6:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   158e8:	2200      	movs	r2, #0
   158ea:	732a      	strb	r2, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   158ec:	2b01      	cmp	r3, #1
   158ee:	d04a      	beq.n	15986 <bt_hci_le_enh_conn_complete+0x13e>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   158f0:	2107      	movs	r1, #7
   158f2:	4628      	mov	r0, r5
   158f4:	f001 feee 	bl	176d4 <bt_conn_set_state>
	if (is_disconnected) {
   158f8:	2e00      	cmp	r6, #0
   158fa:	d160      	bne.n	159be <bt_hci_le_enh_conn_complete+0x176>
	bt_conn_connected(conn);
   158fc:	4628      	mov	r0, r5
   158fe:	f015 fe99 	bl	2b634 <bt_conn_connected>
	conn_auto_initiate(conn);
   15902:	4628      	mov	r0, r5
   15904:	f7ff ff30 	bl	15768 <conn_auto_initiate>
	bt_conn_unref(conn);
   15908:	4628      	mov	r0, r5
   1590a:	f001 fea7 	bl	1765c <bt_conn_unref>
}
   1590e:	b004      	add	sp, #16
   15910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15914:	2207      	movs	r2, #7
   15916:	1d21      	adds	r1, r4, #4
   15918:	4668      	mov	r0, sp
   1591a:	f014 ffc0 	bl	2a89e <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1591e:	f89d 3000 	ldrb.w	r3, [sp]
   15922:	3b02      	subs	r3, #2
   15924:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   15928:	2206      	movs	r2, #6
   1592a:	f104 0111 	add.w	r1, r4, #17
   1592e:	f10d 0009 	add.w	r0, sp, #9
   15932:	f014 ffb4 	bl	2a89e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15936:	2301      	movs	r3, #1
   15938:	f88d 3008 	strb.w	r3, [sp, #8]
   1593c:	e7b5      	b.n	158aa <bt_hci_le_enh_conn_complete+0x62>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1593e:	4b23      	ldr	r3, [pc, #140]	; (159cc <bt_hci_le_enh_conn_complete+0x184>)
   15940:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   15944:	e7a3      	b.n	1588e <bt_hci_le_enh_conn_complete+0x46>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15946:	f001 f87b 	bl	16a40 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   1594a:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1594e:	f3bf 8f5b 	dmb	ish
   15952:	e853 2f00 	ldrex	r2, [r3]
   15956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1595a:	e843 2100 	strex	r1, r2, [r3]
   1595e:	2900      	cmp	r1, #0
   15960:	d1f7      	bne.n	15952 <bt_hci_le_enh_conn_complete+0x10a>
   15962:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   15966:	f015 fcb2 	bl	2b2ce <bt_le_lim_adv_cancel_timeout>
   1596a:	e7a6      	b.n	158ba <bt_hci_le_enh_conn_complete+0x72>
		BT_ERR("No pending conn for peer %s",
   1596c:	1d20      	adds	r0, r4, #4
   1596e:	f7fe fa71 	bl	13e54 <bt_addr_le_str_real>
   15972:	4602      	mov	r2, r0
   15974:	2145      	movs	r1, #69	; 0x45
   15976:	4816      	ldr	r0, [pc, #88]	; (159d0 <bt_hci_le_enh_conn_complete+0x188>)
   15978:	f013 f884 	bl	28a84 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1597c:	211f      	movs	r1, #31
   1597e:	4640      	mov	r0, r8
   15980:	f015 f94d 	bl	2ac1e <bt_hci_disconnect>
		return;
   15984:	e7c3      	b.n	1590e <bt_hci_le_enh_conn_complete+0xc6>
	memcpy(dst, src, sizeof(*dst));
   15986:	2207      	movs	r2, #7
   15988:	a902      	add	r1, sp, #8
   1598a:	f105 0097 	add.w	r0, r5, #151	; 0x97
   1598e:	f014 ff86 	bl	2a89e <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15992:	f001 f855 	bl	16a40 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   15996:	7a29      	ldrb	r1, [r5, #8]
   15998:	4c0c      	ldr	r4, [pc, #48]	; (159cc <bt_hci_le_enh_conn_complete+0x184>)
   1599a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1599e:	2207      	movs	r2, #7
   159a0:	4421      	add	r1, r4
   159a2:	f105 009e 	add.w	r0, r5, #158	; 0x9e
   159a6:	f014 ff7a 	bl	2a89e <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   159aa:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   159ae:	2200      	movs	r2, #0
   159b0:	f001 0340 	and.w	r3, r1, #64	; 0x40
   159b4:	4313      	orrs	r3, r2
   159b6:	d09b      	beq.n	158f0 <bt_hci_le_enh_conn_complete+0xa8>
			bt_le_adv_resume();
   159b8:	f015 fc8e 	bl	2b2d8 <bt_le_adv_resume>
   159bc:	e798      	b.n	158f0 <bt_hci_le_enh_conn_complete+0xa8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   159be:	2101      	movs	r1, #1
   159c0:	4628      	mov	r0, r5
   159c2:	f001 fe87 	bl	176d4 <bt_conn_set_state>
   159c6:	e799      	b.n	158fc <bt_hci_le_enh_conn_complete+0xb4>
   159c8:	00030d88 	.word	0x00030d88
   159cc:	200002a8 	.word	0x200002a8
   159d0:	00030da8 	.word	0x00030da8

000159d4 <le_phy_update_complete>:
{
   159d4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   159d6:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   159d8:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   159dc:	4628      	mov	r0, r5
   159de:	f001 fe6f 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   159e2:	b1a0      	cbz	r0, 15a0e <le_phy_update_complete+0x3a>
   159e4:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   159e6:	1d03      	adds	r3, r0, #4
   159e8:	f3bf 8f5b 	dmb	ish
   159ec:	e853 2f00 	ldrex	r2, [r3]
   159f0:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   159f4:	e843 1000 	strex	r0, r1, [r3]
   159f8:	2800      	cmp	r0, #0
   159fa:	d1f7      	bne.n	159ec <le_phy_update_complete+0x18>
   159fc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15a00:	f012 0f80 	tst.w	r2, #128	; 0x80
   15a04:	d109      	bne.n	15a1a <le_phy_update_complete+0x46>
	bt_conn_unref(conn);
   15a06:	4620      	mov	r0, r4
   15a08:	f001 fe28 	bl	1765c <bt_conn_unref>
}
   15a0c:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15a0e:	462a      	mov	r2, r5
   15a10:	2145      	movs	r1, #69	; 0x45
   15a12:	480a      	ldr	r0, [pc, #40]	; (15a3c <le_phy_update_complete+0x68>)
   15a14:	f013 f836 	bl	28a84 <z_log_minimal_printk>
		return;
   15a18:	e7f8      	b.n	15a0c <le_phy_update_complete+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15a1a:	f3bf 8f5b 	dmb	ish
   15a1e:	e853 2f00 	ldrex	r2, [r3]
   15a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   15a26:	e843 2100 	strex	r1, r2, [r3]
   15a2a:	2900      	cmp	r1, #0
   15a2c:	d1f7      	bne.n	15a1e <le_phy_update_complete+0x4a>
   15a2e:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   15a32:	4620      	mov	r0, r4
   15a34:	f7ff fe98 	bl	15768 <conn_auto_initiate>
   15a38:	e7e5      	b.n	15a06 <le_phy_update_complete+0x32>
   15a3a:	bf00      	nop
   15a3c:	000309c4 	.word	0x000309c4

00015a40 <le_remote_feat_complete>:
{
   15a40:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   15a42:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15a44:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15a48:	4630      	mov	r0, r6
   15a4a:	f001 fe39 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   15a4e:	b1b0      	cbz	r0, 15a7e <le_remote_feat_complete+0x3e>
   15a50:	4604      	mov	r4, r0
	if (!evt->status) {
   15a52:	782b      	ldrb	r3, [r5, #0]
   15a54:	b1cb      	cbz	r3, 15a8a <le_remote_feat_complete+0x4a>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   15a56:	1d23      	adds	r3, r4, #4
   15a58:	f3bf 8f5b 	dmb	ish
   15a5c:	e853 2f00 	ldrex	r2, [r3]
   15a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15a64:	e843 2100 	strex	r1, r2, [r3]
   15a68:	2900      	cmp	r1, #0
   15a6a:	d1f7      	bne.n	15a5c <le_remote_feat_complete+0x1c>
   15a6c:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   15a70:	4620      	mov	r0, r4
   15a72:	f7ff fe79 	bl	15768 <conn_auto_initiate>
	bt_conn_unref(conn);
   15a76:	4620      	mov	r0, r4
   15a78:	f001 fdf0 	bl	1765c <bt_conn_unref>
}
   15a7c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15a7e:	4632      	mov	r2, r6
   15a80:	2145      	movs	r1, #69	; 0x45
   15a82:	4805      	ldr	r0, [pc, #20]	; (15a98 <le_remote_feat_complete+0x58>)
   15a84:	f012 fffe 	bl	28a84 <z_log_minimal_printk>
		return;
   15a88:	e7f8      	b.n	15a7c <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
   15a8a:	2208      	movs	r2, #8
   15a8c:	1ce9      	adds	r1, r5, #3
   15a8e:	30b4      	adds	r0, #180	; 0xb4
   15a90:	f014 ff05 	bl	2a89e <memcpy>
   15a94:	e7df      	b.n	15a56 <le_remote_feat_complete+0x16>
   15a96:	bf00      	nop
   15a98:	000309c4 	.word	0x000309c4

00015a9c <le_ltk_reply>:
{
   15a9c:	b570      	push	{r4, r5, r6, lr}
   15a9e:	4605      	mov	r5, r0
   15aa0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   15aa2:	2112      	movs	r1, #18
   15aa4:	f242 001a 	movw	r0, #8218	; 0x201a
   15aa8:	f7ff fab8 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   15aac:	b180      	cbz	r0, 15ad0 <le_ltk_reply+0x34>
   15aae:	4606      	mov	r6, r0
   15ab0:	2112      	movs	r1, #18
   15ab2:	3008      	adds	r0, #8
   15ab4:	f007 fc28 	bl	1d308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   15ab8:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   15abc:	2210      	movs	r2, #16
   15abe:	4621      	mov	r1, r4
   15ac0:	f014 feed 	bl	2a89e <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   15ac4:	4631      	mov	r1, r6
   15ac6:	f242 001a 	movw	r0, #8218	; 0x201a
   15aca:	f7ff fe23 	bl	15714 <bt_hci_cmd_send>
}
   15ace:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Out of command buffers");
   15ad0:	2145      	movs	r1, #69	; 0x45
   15ad2:	4802      	ldr	r0, [pc, #8]	; (15adc <le_ltk_reply+0x40>)
   15ad4:	f012 ffd6 	bl	28a84 <z_log_minimal_printk>
		return;
   15ad8:	e7f9      	b.n	15ace <le_ltk_reply+0x32>
   15ada:	bf00      	nop
   15adc:	00030dcc 	.word	0x00030dcc

00015ae0 <le_ltk_neg_reply>:
{
   15ae0:	b538      	push	{r3, r4, r5, lr}
   15ae2:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   15ae4:	2102      	movs	r1, #2
   15ae6:	f242 001b 	movw	r0, #8219	; 0x201b
   15aea:	f7ff fa97 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   15aee:	b158      	cbz	r0, 15b08 <le_ltk_neg_reply+0x28>
   15af0:	4605      	mov	r5, r0
   15af2:	2102      	movs	r1, #2
   15af4:	3008      	adds	r0, #8
   15af6:	f007 fc07 	bl	1d308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   15afa:	8004      	strh	r4, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15afc:	4629      	mov	r1, r5
   15afe:	f242 001b 	movw	r0, #8219	; 0x201b
   15b02:	f7ff fe07 	bl	15714 <bt_hci_cmd_send>
}
   15b06:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Out of command buffers");
   15b08:	2145      	movs	r1, #69	; 0x45
   15b0a:	4802      	ldr	r0, [pc, #8]	; (15b14 <le_ltk_neg_reply+0x34>)
   15b0c:	f012 ffba 	bl	28a84 <z_log_minimal_printk>
		return;
   15b10:	e7f9      	b.n	15b06 <le_ltk_neg_reply+0x26>
   15b12:	bf00      	nop
   15b14:	00030dcc 	.word	0x00030dcc

00015b18 <le_ltk_request>:
{
   15b18:	b570      	push	{r4, r5, r6, lr}
   15b1a:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   15b1c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15b1e:	8825      	ldrh	r5, [r4, #0]
	conn = bt_conn_lookup_handle(handle);
   15b20:	4628      	mov	r0, r5
   15b22:	f001 fdcd 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   15b26:	b1a0      	cbz	r0, 15b52 <le_ltk_request+0x3a>
   15b28:	4606      	mov	r6, r0
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   15b2a:	f8d4 2002 	ldr.w	r2, [r4, #2]
   15b2e:	f8d4 3006 	ldr.w	r3, [r4, #6]
   15b32:	a902      	add	r1, sp, #8
   15b34:	9101      	str	r1, [sp, #4]
   15b36:	8961      	ldrh	r1, [r4, #10]
   15b38:	9100      	str	r1, [sp, #0]
   15b3a:	f017 fcf6 	bl	2d52a <bt_smp_request_ltk>
   15b3e:	b170      	cbz	r0, 15b5e <le_ltk_request+0x46>
		le_ltk_reply(handle, ltk);
   15b40:	a902      	add	r1, sp, #8
   15b42:	4628      	mov	r0, r5
   15b44:	f7ff ffaa 	bl	15a9c <le_ltk_reply>
	bt_conn_unref(conn);
   15b48:	4630      	mov	r0, r6
   15b4a:	f001 fd87 	bl	1765c <bt_conn_unref>
}
   15b4e:	b006      	add	sp, #24
   15b50:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15b52:	462a      	mov	r2, r5
   15b54:	2145      	movs	r1, #69	; 0x45
   15b56:	4804      	ldr	r0, [pc, #16]	; (15b68 <le_ltk_request+0x50>)
   15b58:	f012 ff94 	bl	28a84 <z_log_minimal_printk>
		return;
   15b5c:	e7f7      	b.n	15b4e <le_ltk_request+0x36>
		le_ltk_neg_reply(handle);
   15b5e:	4628      	mov	r0, r5
   15b60:	f7ff ffbe 	bl	15ae0 <le_ltk_neg_reply>
   15b64:	e7f0      	b.n	15b48 <le_ltk_request+0x30>
   15b66:	bf00      	nop
   15b68:	000309c4 	.word	0x000309c4

00015b6c <le_conn_param_neg_reply>:
{
   15b6c:	b570      	push	{r4, r5, r6, lr}
   15b6e:	4605      	mov	r5, r0
   15b70:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   15b72:	2103      	movs	r1, #3
   15b74:	f242 0021 	movw	r0, #8225	; 0x2021
   15b78:	f7ff fa50 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   15b7c:	b160      	cbz	r0, 15b98 <le_conn_param_neg_reply+0x2c>
   15b7e:	4606      	mov	r6, r0
   15b80:	2103      	movs	r1, #3
   15b82:	3008      	adds	r0, #8
   15b84:	f007 fbc0 	bl	1d308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   15b88:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   15b8a:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   15b8c:	4631      	mov	r1, r6
   15b8e:	f242 0021 	movw	r0, #8225	; 0x2021
   15b92:	f7ff fdbf 	bl	15714 <bt_hci_cmd_send>
}
   15b96:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate buffer");
   15b98:	2145      	movs	r1, #69	; 0x45
   15b9a:	4802      	ldr	r0, [pc, #8]	; (15ba4 <le_conn_param_neg_reply+0x38>)
   15b9c:	f012 ff72 	bl	28a84 <z_log_minimal_printk>
		return;
   15ba0:	e7f9      	b.n	15b96 <le_conn_param_neg_reply+0x2a>
   15ba2:	bf00      	nop
   15ba4:	00030de8 	.word	0x00030de8

00015ba8 <le_conn_param_req>:
{
   15ba8:	b530      	push	{r4, r5, lr}
   15baa:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   15bac:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15bae:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15bb0:	885a      	ldrh	r2, [r3, #2]
   15bb2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   15bb6:	889a      	ldrh	r2, [r3, #4]
   15bb8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   15bbc:	88da      	ldrh	r2, [r3, #6]
   15bbe:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15bc2:	891b      	ldrh	r3, [r3, #8]
   15bc4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   15bc8:	4620      	mov	r0, r4
   15bca:	f001 fd79 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   15bce:	b168      	cbz	r0, 15bec <le_conn_param_req+0x44>
   15bd0:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   15bd2:	4669      	mov	r1, sp
   15bd4:	f001 ff0c 	bl	179f0 <le_param_req>
   15bd8:	b990      	cbnz	r0, 15c00 <le_conn_param_req+0x58>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   15bda:	211e      	movs	r1, #30
   15bdc:	4620      	mov	r0, r4
   15bde:	f7ff ffc5 	bl	15b6c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   15be2:	4628      	mov	r0, r5
   15be4:	f001 fd3a 	bl	1765c <bt_conn_unref>
}
   15be8:	b003      	add	sp, #12
   15bea:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15bec:	4622      	mov	r2, r4
   15bee:	2145      	movs	r1, #69	; 0x45
   15bf0:	4806      	ldr	r0, [pc, #24]	; (15c0c <le_conn_param_req+0x64>)
   15bf2:	f012 ff47 	bl	28a84 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   15bf6:	2102      	movs	r1, #2
   15bf8:	4620      	mov	r0, r4
   15bfa:	f7ff ffb7 	bl	15b6c <le_conn_param_neg_reply>
		return;
   15bfe:	e7f3      	b.n	15be8 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   15c00:	4669      	mov	r1, sp
   15c02:	4620      	mov	r0, r4
   15c04:	f015 f913 	bl	2ae2e <le_conn_param_req_reply>
   15c08:	e7eb      	b.n	15be2 <le_conn_param_req+0x3a>
   15c0a:	bf00      	nop
   15c0c:	000309c4 	.word	0x000309c4

00015c10 <send_cmd>:
{
   15c10:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   15c12:	2200      	movs	r2, #0
   15c14:	2300      	movs	r3, #0
   15c16:	482b      	ldr	r0, [pc, #172]	; (15cc4 <send_cmd+0xb4>)
   15c18:	f007 f9d6 	bl	1cfc8 <net_buf_get>
	BT_ASSERT(buf);
   15c1c:	4604      	mov	r4, r0
   15c1e:	b310      	cbz	r0, 15c66 <send_cmd+0x56>
   15c20:	4d29      	ldr	r5, [pc, #164]	; (15cc8 <send_cmd+0xb8>)
   15c22:	f04f 32ff 	mov.w	r2, #4294967295
   15c26:	f04f 33ff 	mov.w	r3, #4294967295
   15c2a:	f505 7090 	add.w	r0, r5, #288	; 0x120
   15c2e:	f00c fe73 	bl	22918 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   15c32:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   15c36:	b153      	cbz	r3, 15c4e <send_cmd+0x3e>
		BT_ERR("Uncleared pending sent_cmd");
   15c38:	2145      	movs	r1, #69	; 0x45
   15c3a:	4824      	ldr	r0, [pc, #144]	; (15ccc <send_cmd+0xbc>)
   15c3c:	f012 ff22 	bl	28a84 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   15c40:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   15c44:	f007 fa48 	bl	1d0d8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15c48:	2300      	movs	r3, #0
   15c4a:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   15c4e:	4620      	mov	r0, r4
   15c50:	f007 fa7a 	bl	1d148 <net_buf_ref>
   15c54:	4b1c      	ldr	r3, [pc, #112]	; (15cc8 <send_cmd+0xb8>)
   15c56:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
	err = bt_send(buf);
   15c5a:	4620      	mov	r0, r4
   15c5c:	f015 f848 	bl	2acf0 <bt_send>
	if (err) {
   15c60:	4602      	mov	r2, r0
   15c62:	b968      	cbnz	r0, 15c80 <send_cmd+0x70>
}
   15c64:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   15c66:	f44f 6212 	mov.w	r2, #2336	; 0x920
   15c6a:	4919      	ldr	r1, [pc, #100]	; (15cd0 <send_cmd+0xc0>)
   15c6c:	4819      	ldr	r0, [pc, #100]	; (15cd4 <send_cmd+0xc4>)
   15c6e:	f012 fb68 	bl	28342 <printk>
   15c72:	4040      	eors	r0, r0
   15c74:	f380 8811 	msr	BASEPRI, r0
   15c78:	f04f 0003 	mov.w	r0, #3
   15c7c:	df02      	svc	2
   15c7e:	e7cf      	b.n	15c20 <send_cmd+0x10>
		BT_ERR("Unable to send to driver (err %d)", err);
   15c80:	2145      	movs	r1, #69	; 0x45
   15c82:	4815      	ldr	r0, [pc, #84]	; (15cd8 <send_cmd+0xc8>)
   15c84:	f012 fefe 	bl	28a84 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   15c88:	4d0f      	ldr	r5, [pc, #60]	; (15cc8 <send_cmd+0xb8>)
   15c8a:	f505 7090 	add.w	r0, r5, #288	; 0x120
   15c8e:	f00c fe03 	bl	22898 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   15c92:	4620      	mov	r0, r4
   15c94:	f007 f8be 	bl	1ce14 <net_buf_id>
   15c98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15c9c:	4b0f      	ldr	r3, [pc, #60]	; (15cdc <send_cmd+0xcc>)
   15c9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15ca2:	4622      	mov	r2, r4
   15ca4:	211f      	movs	r1, #31
   15ca6:	8840      	ldrh	r0, [r0, #2]
   15ca8:	f7fe ff52 	bl	14b50 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   15cac:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
   15cb0:	f007 fa12 	bl	1d0d8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15cb4:	2300      	movs	r3, #0
   15cb6:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
   15cba:	4620      	mov	r0, r4
   15cbc:	f007 fa0c 	bl	1d0d8 <net_buf_unref>
   15cc0:	e7d0      	b.n	15c64 <send_cmd+0x54>
   15cc2:	bf00      	nop
   15cc4:	20000400 	.word	0x20000400
   15cc8:	200002a8 	.word	0x200002a8
   15ccc:	00030e08 	.word	0x00030e08
   15cd0:	00030af8 	.word	0x00030af8
   15cd4:	0002f968 	.word	0x0002f968
   15cd8:	00030d1c 	.word	0x00030d1c
   15cdc:	2000274c 	.word	0x2000274c

00015ce0 <process_events>:
{
   15ce0:	b538      	push	{r3, r4, r5, lr}
   15ce2:	4604      	mov	r4, r0
   15ce4:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   15ce6:	e008      	b.n	15cfa <process_events+0x1a>
				send_cmd();
   15ce8:	f7ff ff92 	bl	15c10 <send_cmd>
   15cec:	e003      	b.n	15cf6 <process_events+0x16>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   15cee:	2157      	movs	r1, #87	; 0x57
   15cf0:	480b      	ldr	r0, [pc, #44]	; (15d20 <process_events+0x40>)
   15cf2:	f012 fec7 	bl	28a84 <z_log_minimal_printk>
	for (; count; ev++, count--) {
   15cf6:	3414      	adds	r4, #20
   15cf8:	3d01      	subs	r5, #1
   15cfa:	b185      	cbz	r5, 15d1e <process_events+0x3e>
		switch (ev->state) {
   15cfc:	68e2      	ldr	r2, [r4, #12]
   15cfe:	f3c2 3245 	ubfx	r2, r2, #13, #6
   15d02:	2a01      	cmp	r2, #1
   15d04:	d9f7      	bls.n	15cf6 <process_events+0x16>
   15d06:	2a04      	cmp	r2, #4
   15d08:	d1f1      	bne.n	15cee <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15d0a:	7b23      	ldrb	r3, [r4, #12]
   15d0c:	2b00      	cmp	r3, #0
   15d0e:	d0eb      	beq.n	15ce8 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   15d10:	2b01      	cmp	r3, #1
   15d12:	d1f0      	bne.n	15cf6 <process_events+0x16>
					conn = CONTAINER_OF(ev->fifo,
   15d14:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   15d16:	3838      	subs	r0, #56	; 0x38
   15d18:	f002 f8e8 	bl	17eec <bt_conn_process_tx>
   15d1c:	e7eb      	b.n	15cf6 <process_events+0x16>
}
   15d1e:	bd38      	pop	{r3, r4, r5, pc}
   15d20:	00030e28 	.word	0x00030e28

00015d24 <hci_tx_thread>:
{
   15d24:	b538      	push	{r3, r4, r5, lr}
   15d26:	e005      	b.n	15d34 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   15d28:	4621      	mov	r1, r4
   15d2a:	4813      	ldr	r0, [pc, #76]	; (15d78 <hci_tx_thread+0x54>)
   15d2c:	f7ff ffd8 	bl	15ce0 <process_events>
	z_impl_k_yield();
   15d30:	f00e faa4 	bl	2427c <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   15d34:	4d10      	ldr	r5, [pc, #64]	; (15d78 <hci_tx_thread+0x54>)
   15d36:	68eb      	ldr	r3, [r5, #12]
   15d38:	f36f 3352 	bfc	r3, #13, #6
   15d3c:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15d3e:	f105 0014 	add.w	r0, r5, #20
   15d42:	f001 fc6b 	bl	1761c <bt_conn_prepare_events>
   15d46:	1c44      	adds	r4, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   15d48:	f04f 32ff 	mov.w	r2, #4294967295
   15d4c:	f04f 33ff 	mov.w	r3, #4294967295
   15d50:	4621      	mov	r1, r4
   15d52:	4628      	mov	r0, r5
   15d54:	f00f f8b4 	bl	24ec0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   15d58:	2800      	cmp	r0, #0
   15d5a:	d0e5      	beq.n	15d28 <hci_tx_thread+0x4>
   15d5c:	f640 1289 	movw	r2, #2441	; 0x989
   15d60:	4906      	ldr	r1, [pc, #24]	; (15d7c <hci_tx_thread+0x58>)
   15d62:	4807      	ldr	r0, [pc, #28]	; (15d80 <hci_tx_thread+0x5c>)
   15d64:	f012 faed 	bl	28342 <printk>
   15d68:	4040      	eors	r0, r0
   15d6a:	f380 8811 	msr	BASEPRI, r0
   15d6e:	f04f 0003 	mov.w	r0, #3
   15d72:	df02      	svc	2
   15d74:	e7d8      	b.n	15d28 <hci_tx_thread+0x4>
   15d76:	bf00      	nop
   15d78:	2000056c 	.word	0x2000056c
   15d7c:	00030af8 	.word	0x00030af8
   15d80:	0002f968 	.word	0x0002f968

00015d84 <hci_event_prio>:
{
   15d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d86:	b085      	sub	sp, #20
   15d88:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15d8a:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15d8e:	4628      	mov	r0, r5
   15d90:	f017 fe90 	bl	2dab4 <net_buf_simple_headroom>
   15d94:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   15d98:	89a3      	ldrh	r3, [r4, #12]
   15d9a:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15d9e:	2b01      	cmp	r3, #1
   15da0:	d915      	bls.n	15dce <hci_event_prio+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   15da2:	2102      	movs	r1, #2
   15da4:	4628      	mov	r0, r5
   15da6:	f007 fa6f 	bl	1d288 <net_buf_simple_pull_mem>
   15daa:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15dac:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   15dae:	3b05      	subs	r3, #5
   15db0:	2b15      	cmp	r3, #21
   15db2:	d81b      	bhi.n	15dec <hci_event_prio+0x68>
   15db4:	e8df f003 	tbb	[pc, r3]
   15db8:	1a1a1a18 	.word	0x1a1a1a18
   15dbc:	1a1a1a1a 	.word	0x1a1a1a1a
   15dc0:	1a3d3d1a 	.word	0x1a3d3d1a
   15dc4:	1a3d1a1a 	.word	0x1a3d1a1a
   15dc8:	1a1a1a1a 	.word	0x1a1a1a1a
   15dcc:	3d1a      	.short	0x3d1a
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15dce:	f640 5215 	movw	r2, #3349	; 0xd15
   15dd2:	492c      	ldr	r1, [pc, #176]	; (15e84 <hci_event_prio+0x100>)
   15dd4:	482c      	ldr	r0, [pc, #176]	; (15e88 <hci_event_prio+0x104>)
   15dd6:	f012 fab4 	bl	28342 <printk>
   15dda:	4040      	eors	r0, r0
   15ddc:	f380 8811 	msr	BASEPRI, r0
   15de0:	f04f 0003 	mov.w	r0, #3
   15de4:	df02      	svc	2
   15de6:	e7dc      	b.n	15da2 <hci_event_prio+0x1e>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15de8:	2603      	movs	r6, #3
   15dea:	e000      	b.n	15dee <hci_event_prio+0x6a>
		return BT_HCI_EVT_FLAG_RECV;
   15dec:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15dee:	f016 0f01 	tst.w	r6, #1
   15df2:	d020      	beq.n	15e36 <hci_event_prio+0xb2>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15df4:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   15df6:	2300      	movs	r3, #0
   15df8:	2b04      	cmp	r3, #4
   15dfa:	d831      	bhi.n	15e60 <hci_event_prio+0xdc>
		const struct event_handler *handler = &handlers[i];
   15dfc:	4a23      	ldr	r2, [pc, #140]	; (15e8c <hci_event_prio+0x108>)
   15dfe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   15e02:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   15e06:	4295      	cmp	r5, r2
   15e08:	d122      	bne.n	15e50 <hci_event_prio+0xcc>
		if (buf->len < handler->min_len) {
   15e0a:	89a2      	ldrh	r2, [r4, #12]
   15e0c:	784b      	ldrb	r3, [r1, #1]
   15e0e:	429a      	cmp	r2, r3
   15e10:	d320      	bcc.n	15e54 <hci_event_prio+0xd0>
		handler->handler(buf);
   15e12:	684b      	ldr	r3, [r1, #4]
   15e14:	4620      	mov	r0, r4
   15e16:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15e18:	f016 0f02 	tst.w	r6, #2
   15e1c:	d02d      	beq.n	15e7a <hci_event_prio+0xf6>
	buf->data = buf->__buf + state->offset;
   15e1e:	6923      	ldr	r3, [r4, #16]
   15e20:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   15e24:	4413      	add	r3, r2
   15e26:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   15e28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   15e2c:	81a3      	strh	r3, [r4, #12]
}
   15e2e:	b005      	add	sp, #20
   15e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   15e32:	2601      	movs	r6, #1
   15e34:	e7db      	b.n	15dee <hci_event_prio+0x6a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15e36:	f640 5219 	movw	r2, #3353	; 0xd19
   15e3a:	4912      	ldr	r1, [pc, #72]	; (15e84 <hci_event_prio+0x100>)
   15e3c:	4812      	ldr	r0, [pc, #72]	; (15e88 <hci_event_prio+0x104>)
   15e3e:	f012 fa80 	bl	28342 <printk>
   15e42:	4040      	eors	r0, r0
   15e44:	f380 8811 	msr	BASEPRI, r0
   15e48:	f04f 0003 	mov.w	r0, #3
   15e4c:	df02      	svc	2
   15e4e:	e7d1      	b.n	15df4 <hci_event_prio+0x70>
	for (i = 0; i < num_handlers; i++) {
   15e50:	3301      	adds	r3, #1
   15e52:	e7d1      	b.n	15df8 <hci_event_prio+0x74>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15e54:	462b      	mov	r3, r5
   15e56:	2145      	movs	r1, #69	; 0x45
   15e58:	480d      	ldr	r0, [pc, #52]	; (15e90 <hci_event_prio+0x10c>)
   15e5a:	f012 fe13 	bl	28a84 <z_log_minimal_printk>
			return;
   15e5e:	e7db      	b.n	15e18 <hci_event_prio+0x94>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15e60:	89a7      	ldrh	r7, [r4, #12]
   15e62:	4639      	mov	r1, r7
   15e64:	68a0      	ldr	r0, [r4, #8]
   15e66:	f7fd ffcd 	bl	13e04 <bt_hex_real>
   15e6a:	9000      	str	r0, [sp, #0]
   15e6c:	463b      	mov	r3, r7
   15e6e:	462a      	mov	r2, r5
   15e70:	2157      	movs	r1, #87	; 0x57
   15e72:	4808      	ldr	r0, [pc, #32]	; (15e94 <hci_event_prio+0x110>)
   15e74:	f012 fe06 	bl	28a84 <z_log_minimal_printk>
   15e78:	e7ce      	b.n	15e18 <hci_event_prio+0x94>
		net_buf_unref(buf);
   15e7a:	4620      	mov	r0, r4
   15e7c:	f007 f92c 	bl	1d0d8 <net_buf_unref>
}
   15e80:	e7d5      	b.n	15e2e <hci_event_prio+0xaa>
   15e82:	bf00      	nop
   15e84:	00030af8 	.word	0x00030af8
   15e88:	0002f968 	.word	0x0002f968
   15e8c:	00030f9c 	.word	0x00030f9c
   15e90:	00030b80 	.word	0x00030b80
   15e94:	00030ba8 	.word	0x00030ba8

00015e98 <bt_recv>:
{
   15e98:	b538      	push	{r3, r4, r5, lr}
   15e9a:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15e9c:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15e9e:	2d01      	cmp	r5, #1
   15ea0:	d008      	beq.n	15eb4 <bt_recv+0x1c>
   15ea2:	462a      	mov	r2, r5
   15ea4:	2d03      	cmp	r5, #3
   15ea6:	d12c      	bne.n	15f02 <bt_recv+0x6a>
		net_buf_put(&bt_dev.rx_queue, buf);
   15ea8:	4601      	mov	r1, r0
   15eaa:	481b      	ldr	r0, [pc, #108]	; (15f18 <bt_recv+0x80>)
   15eac:	f007 f8e2 	bl	1d074 <net_buf_put>
		return 0;
   15eb0:	2000      	movs	r0, #0
}
   15eb2:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   15eb4:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15eb6:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   15eb8:	3b05      	subs	r3, #5
   15eba:	2b15      	cmp	r3, #21
   15ebc:	d80e      	bhi.n	15edc <bt_recv+0x44>
   15ebe:	e8df f003 	tbb	[pc, r3]
   15ec2:	0d0b      	.short	0x0d0b
   15ec4:	0d0d0d0d 	.word	0x0d0d0d0d
   15ec8:	0e0d0d0d 	.word	0x0e0d0d0d
   15ecc:	0d0d0d0e 	.word	0x0d0d0d0e
   15ed0:	0d0d0d0e 	.word	0x0d0d0d0e
   15ed4:	0e0d0d0d 	.word	0x0e0d0d0d
   15ed8:	2503      	movs	r5, #3
   15eda:	e000      	b.n	15ede <bt_recv+0x46>
		return BT_HCI_EVT_FLAG_RECV;
   15edc:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15ede:	f015 0f01 	tst.w	r5, #1
   15ee2:	d104      	bne.n	15eee <bt_recv+0x56>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15ee4:	f015 0f02 	tst.w	r5, #2
   15ee8:	d105      	bne.n	15ef6 <bt_recv+0x5e>
		return 0;
   15eea:	2000      	movs	r0, #0
   15eec:	e7e1      	b.n	15eb2 <bt_recv+0x1a>
			hci_event_prio(buf);
   15eee:	4620      	mov	r0, r4
   15ef0:	f7ff ff48 	bl	15d84 <hci_event_prio>
   15ef4:	e7f6      	b.n	15ee4 <bt_recv+0x4c>
			net_buf_put(&bt_dev.rx_queue, buf);
   15ef6:	4621      	mov	r1, r4
   15ef8:	4807      	ldr	r0, [pc, #28]	; (15f18 <bt_recv+0x80>)
   15efa:	f007 f8bb 	bl	1d074 <net_buf_put>
		return 0;
   15efe:	2000      	movs	r0, #0
   15f00:	e7d7      	b.n	15eb2 <bt_recv+0x1a>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15f02:	2145      	movs	r1, #69	; 0x45
   15f04:	4805      	ldr	r0, [pc, #20]	; (15f1c <bt_recv+0x84>)
   15f06:	f012 fdbd 	bl	28a84 <z_log_minimal_printk>
		net_buf_unref(buf);
   15f0a:	4620      	mov	r0, r4
   15f0c:	f007 f8e4 	bl	1d0d8 <net_buf_unref>
		return -EINVAL;
   15f10:	f06f 0015 	mvn.w	r0, #21
   15f14:	e7cd      	b.n	15eb2 <bt_recv+0x1a>
   15f16:	bf00      	nop
   15f18:	200003e4 	.word	0x200003e4
   15f1c:	00030e50 	.word	0x00030e50

00015f20 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15f20:	4b0a      	ldr	r3, [pc, #40]	; (15f4c <bt_hci_driver_register+0x2c>)
   15f22:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
   15f26:	b943      	cbnz	r3, 15f3a <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   15f28:	68c3      	ldr	r3, [r0, #12]
   15f2a:	b14b      	cbz	r3, 15f40 <bt_hci_driver_register+0x20>
   15f2c:	6903      	ldr	r3, [r0, #16]
   15f2e:	b153      	cbz	r3, 15f46 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   15f30:	4b06      	ldr	r3, [pc, #24]	; (15f4c <bt_hci_driver_register+0x2c>)
   15f32:	f8c3 0174 	str.w	r0, [r3, #372]	; 0x174
	return 0;
   15f36:	2000      	movs	r0, #0
   15f38:	4770      	bx	lr
		return -EALREADY;
   15f3a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15f3e:	4770      	bx	lr
		return -EINVAL;
   15f40:	f06f 0015 	mvn.w	r0, #21
   15f44:	4770      	bx	lr
   15f46:	f06f 0015 	mvn.w	r0, #21
}
   15f4a:	4770      	bx	lr
   15f4c:	200002a8 	.word	0x200002a8

00015f50 <bt_finalize_init>:
   15f50:	4b06      	ldr	r3, [pc, #24]	; (15f6c <bt_finalize_init+0x1c>)
   15f52:	f3bf 8f5b 	dmb	ish
   15f56:	e853 2f00 	ldrex	r2, [r3]
   15f5a:	f042 0202 	orr.w	r2, r2, #2
   15f5e:	e843 2100 	strex	r1, r2, [r3]
   15f62:	2900      	cmp	r1, #0
   15f64:	d1f7      	bne.n	15f56 <bt_finalize_init+0x6>
   15f66:	f3bf 8f5b 	dmb	ish
}
   15f6a:	4770      	bx	lr
   15f6c:	20000374 	.word	0x20000374

00015f70 <bt_init>:
{
   15f70:	b510      	push	{r4, lr}
	err = hci_init();
   15f72:	f7ff fb1f 	bl	155b4 <hci_init>
	if (err) {
   15f76:	4604      	mov	r4, r0
   15f78:	b9a8      	cbnz	r0, 15fa6 <bt_init+0x36>
		err = bt_conn_init();
   15f7a:	f002 f81b 	bl	17fb4 <bt_conn_init>
		if (err) {
   15f7e:	4604      	mov	r4, r0
   15f80:	b988      	cbnz	r0, 15fa6 <bt_init+0x36>
		if (!bt_dev.id_count) {
   15f82:	4b0c      	ldr	r3, [pc, #48]	; (15fb4 <bt_init+0x44>)
   15f84:	79db      	ldrb	r3, [r3, #7]
   15f86:	b183      	cbz	r3, 15faa <bt_init+0x3a>
   15f88:	4b0b      	ldr	r3, [pc, #44]	; (15fb8 <bt_init+0x48>)
   15f8a:	f3bf 8f5b 	dmb	ish
   15f8e:	e853 2f00 	ldrex	r2, [r3]
   15f92:	f042 0204 	orr.w	r2, r2, #4
   15f96:	e843 2100 	strex	r1, r2, [r3]
   15f9a:	2900      	cmp	r1, #0
   15f9c:	d1f7      	bne.n	15f8e <bt_init+0x1e>
   15f9e:	f3bf 8f5b 	dmb	ish
	bt_finalize_init();
   15fa2:	f7ff ffd5 	bl	15f50 <bt_finalize_init>
}
   15fa6:	4620      	mov	r0, r4
   15fa8:	bd10      	pop	{r4, pc}
			BT_INFO("No ID address. App must call settings_load()");
   15faa:	2149      	movs	r1, #73	; 0x49
   15fac:	4803      	ldr	r0, [pc, #12]	; (15fbc <bt_init+0x4c>)
   15fae:	f012 fd69 	bl	28a84 <z_log_minimal_printk>
			return 0;
   15fb2:	e7f8      	b.n	15fa6 <bt_init+0x36>
   15fb4:	200002a8 	.word	0x200002a8
   15fb8:	20000374 	.word	0x20000374
   15fbc:	00030e6c 	.word	0x00030e6c

00015fc0 <init_work>:
{
   15fc0:	b508      	push	{r3, lr}
	err = bt_init();
   15fc2:	f7ff ffd5 	bl	15f70 <bt_init>
	if (ready_cb) {
   15fc6:	4b02      	ldr	r3, [pc, #8]	; (15fd0 <init_work+0x10>)
   15fc8:	681b      	ldr	r3, [r3, #0]
   15fca:	b103      	cbz	r3, 15fce <init_work+0xe>
		ready_cb(err);
   15fcc:	4798      	blx	r3
}
   15fce:	bd08      	pop	{r3, pc}
   15fd0:	20002768 	.word	0x20002768

00015fd4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   15fd4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15fd8:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   15fda:	4b38      	ldr	r3, [pc, #224]	; (160bc <bt_enable+0xe8>)
   15fdc:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
   15fe0:	b1c3      	cbz	r3, 16014 <bt_enable+0x40>
   15fe2:	4605      	mov	r5, r0
   15fe4:	4b36      	ldr	r3, [pc, #216]	; (160c0 <bt_enable+0xec>)
   15fe6:	f3bf 8f5b 	dmb	ish
   15fea:	e853 2f00 	ldrex	r2, [r3]
   15fee:	f042 0101 	orr.w	r1, r2, #1
   15ff2:	e843 1000 	strex	r0, r1, [r3]
   15ff6:	2800      	cmp	r0, #0
   15ff8:	d1f7      	bne.n	15fea <bt_enable+0x16>
   15ffa:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15ffe:	f012 0f01 	tst.w	r2, #1
   16002:	d157      	bne.n	160b4 <bt_enable+0xe0>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   16004:	f7fe fb1e 	bl	14644 <bt_settings_init>
		if (err) {
   16008:	4604      	mov	r4, r0
   1600a:	b150      	cbz	r0, 16022 <bt_enable+0x4e>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1600c:	4620      	mov	r0, r4
   1600e:	b008      	add	sp, #32
   16010:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		BT_ERR("No HCI driver registered");
   16014:	2145      	movs	r1, #69	; 0x45
   16016:	482b      	ldr	r0, [pc, #172]	; (160c4 <bt_enable+0xf0>)
   16018:	f012 fd34 	bl	28a84 <z_log_minimal_printk>
		return -ENODEV;
   1601c:	f06f 0412 	mvn.w	r4, #18
   16020:	e7f4      	b.n	1600c <bt_enable+0x38>
	ready_cb = cb;
   16022:	4b29      	ldr	r3, [pc, #164]	; (160c8 <bt_enable+0xf4>)
   16024:	601d      	str	r5, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   16026:	f04f 0800 	mov.w	r8, #0
   1602a:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1602e:	4e27      	ldr	r6, [pc, #156]	; (160cc <bt_enable+0xf8>)
   16030:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16034:	2400      	movs	r4, #0
   16036:	9404      	str	r4, [sp, #16]
   16038:	f06f 0308 	mvn.w	r3, #8
   1603c:	9303      	str	r3, [sp, #12]
   1603e:	9402      	str	r4, [sp, #8]
   16040:	9401      	str	r4, [sp, #4]
   16042:	9400      	str	r4, [sp, #0]
   16044:	4b22      	ldr	r3, [pc, #136]	; (160d0 <bt_enable+0xfc>)
   16046:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1604a:	4922      	ldr	r1, [pc, #136]	; (160d4 <bt_enable+0x100>)
   1604c:	4630      	mov	r0, r6
   1604e:	f00c f83d 	bl	220cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16052:	4921      	ldr	r1, [pc, #132]	; (160d8 <bt_enable+0x104>)
   16054:	4630      	mov	r0, r6
   16056:	f00b fefb 	bl	21e50 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1605a:	4e20      	ldr	r6, [pc, #128]	; (160dc <bt_enable+0x108>)
   1605c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16060:	9404      	str	r4, [sp, #16]
   16062:	f06f 0307 	mvn.w	r3, #7
   16066:	9303      	str	r3, [sp, #12]
   16068:	9402      	str	r4, [sp, #8]
   1606a:	9401      	str	r4, [sp, #4]
   1606c:	9400      	str	r4, [sp, #0]
   1606e:	4b1c      	ldr	r3, [pc, #112]	; (160e0 <bt_enable+0x10c>)
   16070:	f640 0298 	movw	r2, #2200	; 0x898
   16074:	491b      	ldr	r1, [pc, #108]	; (160e4 <bt_enable+0x110>)
   16076:	4630      	mov	r0, r6
   16078:	f00c f828 	bl	220cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1607c:	491a      	ldr	r1, [pc, #104]	; (160e8 <bt_enable+0x114>)
   1607e:	4630      	mov	r0, r6
   16080:	f00b fee6 	bl	21e50 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   16084:	f7fe f9b0 	bl	143e8 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   16088:	4b0c      	ldr	r3, [pc, #48]	; (160bc <bt_enable+0xe8>)
   1608a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
   1608e:	68db      	ldr	r3, [r3, #12]
   16090:	4798      	blx	r3
	if (err) {
   16092:	4604      	mov	r4, r0
   16094:	b920      	cbnz	r0, 160a0 <bt_enable+0xcc>
	if (!cb) {
   16096:	b14d      	cbz	r5, 160ac <bt_enable+0xd8>
	k_work_submit(&bt_dev.init);
   16098:	4814      	ldr	r0, [pc, #80]	; (160ec <bt_enable+0x118>)
   1609a:	f00c ffa3 	bl	22fe4 <k_work_submit>
	return 0;
   1609e:	e7b5      	b.n	1600c <bt_enable+0x38>
		BT_ERR("HCI driver open failed (%d)", err);
   160a0:	4602      	mov	r2, r0
   160a2:	2145      	movs	r1, #69	; 0x45
   160a4:	4812      	ldr	r0, [pc, #72]	; (160f0 <bt_enable+0x11c>)
   160a6:	f012 fced 	bl	28a84 <z_log_minimal_printk>
		return err;
   160aa:	e7af      	b.n	1600c <bt_enable+0x38>
		return bt_init();
   160ac:	f7ff ff60 	bl	15f70 <bt_init>
   160b0:	4604      	mov	r4, r0
   160b2:	e7ab      	b.n	1600c <bt_enable+0x38>
		return -EALREADY;
   160b4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   160b8:	e7a8      	b.n	1600c <bt_enable+0x38>
   160ba:	bf00      	nop
   160bc:	200002a8 	.word	0x200002a8
   160c0:	20000374 	.word	0x20000374
   160c4:	00030ea0 	.word	0x00030ea0
   160c8:	20002768 	.word	0x20002768
   160cc:	20001740 	.word	0x20001740
   160d0:	00015d25 	.word	0x00015d25
   160d4:	20004ea0 	.word	0x20004ea0
   160d8:	00030ec0 	.word	0x00030ec0
   160dc:	20001688 	.word	0x20001688
   160e0:	00014fb5 	.word	0x00014fb5
   160e4:	200045e0 	.word	0x200045e0
   160e8:	00030ec8 	.word	0x00030ec8
   160ec:	20000364 	.word	0x20000364
   160f0:	00030ed0 	.word	0x00030ed0

000160f4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   160f4:	4800      	ldr	r0, [pc, #0]	; (160f8 <bt_get_name+0x4>)
   160f6:	4770      	bx	lr
   160f8:	00030ef4 	.word	0x00030ef4

000160fc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   160fc:	b570      	push	{r4, r5, r6, lr}
   160fe:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16100:	2400      	movs	r4, #0
   16102:	4b0a      	ldr	r3, [pc, #40]	; (1612c <id_find+0x30>)
   16104:	79db      	ldrb	r3, [r3, #7]
   16106:	42a3      	cmp	r3, r4
   16108:	d90c      	bls.n	16124 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1610a:	4626      	mov	r6, r4
   1610c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   16110:	2207      	movs	r2, #7
   16112:	4b06      	ldr	r3, [pc, #24]	; (1612c <id_find+0x30>)
   16114:	4419      	add	r1, r3
   16116:	4628      	mov	r0, r5
   16118:	f014 fb94 	bl	2a844 <memcmp>
   1611c:	b120      	cbz	r0, 16128 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   1611e:	3401      	adds	r4, #1
   16120:	b2e4      	uxtb	r4, r4
   16122:	e7ee      	b.n	16102 <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   16124:	f06f 0601 	mvn.w	r6, #1
}
   16128:	4630      	mov	r0, r6
   1612a:	bd70      	pop	{r4, r5, r6, pc}
   1612c:	200002a8 	.word	0x200002a8

00016130 <set_random_address>:
{
   16130:	b570      	push	{r4, r5, r6, lr}
   16132:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   16134:	2206      	movs	r2, #6
   16136:	4914      	ldr	r1, [pc, #80]	; (16188 <set_random_address+0x58>)
   16138:	f014 fb84 	bl	2a844 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1613c:	4605      	mov	r5, r0
   1613e:	b908      	cbnz	r0, 16144 <set_random_address+0x14>
}
   16140:	4628      	mov	r0, r5
   16142:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   16144:	2106      	movs	r1, #6
   16146:	f242 0005 	movw	r0, #8197	; 0x2005
   1614a:	f7fe ff67 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   1614e:	4605      	mov	r5, r0
   16150:	b1b8      	cbz	r0, 16182 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16152:	2206      	movs	r2, #6
   16154:	4621      	mov	r1, r4
   16156:	3008      	adds	r0, #8
   16158:	f017 fcb9 	bl	2dace <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1615c:	2200      	movs	r2, #0
   1615e:	4629      	mov	r1, r5
   16160:	f242 0005 	movw	r0, #8197	; 0x2005
   16164:	f7fe ffa6 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   16168:	4605      	mov	r5, r0
   1616a:	2800      	cmp	r0, #0
   1616c:	d1e8      	bne.n	16140 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   1616e:	4e06      	ldr	r6, [pc, #24]	; (16188 <set_random_address+0x58>)
   16170:	2206      	movs	r2, #6
   16172:	4621      	mov	r1, r4
   16174:	4630      	mov	r0, r6
   16176:	f014 fb92 	bl	2a89e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1617a:	2301      	movs	r3, #1
   1617c:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   16180:	e7de      	b.n	16140 <set_random_address+0x10>
		return -ENOBUFS;
   16182:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16186:	e7db      	b.n	16140 <set_random_address+0x10>
   16188:	20000309 	.word	0x20000309

0001618c <le_set_privacy_mode>:
{
   1618c:	b510      	push	{r4, lr}
   1618e:	b082      	sub	sp, #8
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   16190:	4b15      	ldr	r3, [pc, #84]	; (161e8 <le_set_privacy_mode+0x5c>)
   16192:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   16196:	f013 0f04 	tst.w	r3, #4
   1619a:	d01b      	beq.n	161d4 <le_set_privacy_mode+0x48>
   1619c:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
   1619e:	2207      	movs	r2, #7
   161a0:	4601      	mov	r1, r0
   161a2:	4668      	mov	r0, sp
   161a4:	f014 fb7b 	bl	2a89e <memcpy>
	cp.mode = mode;
   161a8:	f88d 4007 	strb.w	r4, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   161ac:	2108      	movs	r1, #8
   161ae:	f242 004e 	movw	r0, #8270	; 0x204e
   161b2:	f7fe ff33 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   161b6:	4604      	mov	r4, r0
   161b8:	b190      	cbz	r0, 161e0 <le_set_privacy_mode+0x54>
   161ba:	2208      	movs	r2, #8
   161bc:	4669      	mov	r1, sp
   161be:	4410      	add	r0, r2
   161c0:	f017 fc85 	bl	2dace <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   161c4:	2200      	movs	r2, #0
   161c6:	4621      	mov	r1, r4
   161c8:	f242 004e 	movw	r0, #8270	; 0x204e
   161cc:	f7fe ff72 	bl	150b4 <bt_hci_cmd_send_sync>
}
   161d0:	b002      	add	sp, #8
   161d2:	bd10      	pop	{r4, pc}
		BT_WARN("Set privacy mode command is not supported");
   161d4:	2157      	movs	r1, #87	; 0x57
   161d6:	4805      	ldr	r0, [pc, #20]	; (161ec <le_set_privacy_mode+0x60>)
   161d8:	f012 fc54 	bl	28a84 <z_log_minimal_printk>
		return 0;
   161dc:	2000      	movs	r0, #0
   161de:	e7f7      	b.n	161d0 <le_set_privacy_mode+0x44>
		return -ENOBUFS;
   161e0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   161e4:	e7f4      	b.n	161d0 <le_set_privacy_mode+0x44>
   161e6:	bf00      	nop
   161e8:	200002a8 	.word	0x200002a8
   161ec:	00030fc4 	.word	0x00030fc4

000161f0 <bt_id_pending_keys_update_set>:
   161f0:	4b08      	ldr	r3, [pc, #32]	; (16214 <bt_id_pending_keys_update_set+0x24>)
   161f2:	f3bf 8f5b 	dmb	ish
   161f6:	e853 2f00 	ldrex	r2, [r3]
   161fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   161fe:	e843 2c00 	strex	ip, r2, [r3]
   16202:	f1bc 0f00 	cmp.w	ip, #0
   16206:	d1f6      	bne.n	161f6 <bt_id_pending_keys_update_set+0x6>
   16208:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   1620c:	7a03      	ldrb	r3, [r0, #8]
   1620e:	4319      	orrs	r1, r3
   16210:	7201      	strb	r1, [r0, #8]
}
   16212:	4770      	bx	lr
   16214:	20000374 	.word	0x20000374

00016218 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   16218:	b530      	push	{r4, r5, lr}
   1621a:	b085      	sub	sp, #20
   1621c:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1621e:	460d      	mov	r5, r1
   16220:	b149      	cbz	r1, 16236 <id_create+0x1e>
   16222:	2300      	movs	r3, #0
   16224:	9302      	str	r3, [sp, #8]
   16226:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   1622a:	2207      	movs	r2, #7
   1622c:	a902      	add	r1, sp, #8
   1622e:	4628      	mov	r0, r5
   16230:	f014 fb08 	bl	2a844 <memcmp>
   16234:	bb30      	cbnz	r0, 16284 <id_create+0x6c>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   16236:	4668      	mov	r0, sp
   16238:	f014 fcb0 	bl	2ab9c <bt_addr_le_create_static>
			if (err) {
   1623c:	4603      	mov	r3, r0
   1623e:	b9f0      	cbnz	r0, 1627e <id_create+0x66>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   16240:	4668      	mov	r0, sp
   16242:	f7ff ff5b 	bl	160fc <id_find>
   16246:	2800      	cmp	r0, #0
   16248:	daf5      	bge.n	16236 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1624a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1624e:	4b14      	ldr	r3, [pc, #80]	; (162a0 <id_create+0x88>)
   16250:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   16252:	2207      	movs	r2, #7
   16254:	4669      	mov	r1, sp
   16256:	4620      	mov	r0, r4
   16258:	f014 fb21 	bl	2a89e <memcpy>

		if (addr) {
   1625c:	b125      	cbz	r5, 16268 <id_create+0x50>
   1625e:	2207      	movs	r2, #7
   16260:	4621      	mov	r1, r4
   16262:	4628      	mov	r0, r5
   16264:	f014 fb1b 	bl	2a89e <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16268:	f3bf 8f5b 	dmb	ish
   1626c:	4b0d      	ldr	r3, [pc, #52]	; (162a4 <id_create+0x8c>)
   1626e:	681a      	ldr	r2, [r3, #0]
   16270:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16274:	f3c2 0340 	ubfx	r3, r2, #1, #1
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16278:	f012 0f02 	tst.w	r2, #2
   1627c:	d10b      	bne.n	16296 <id_create+0x7e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   1627e:	4618      	mov	r0, r3
   16280:	b005      	add	sp, #20
   16282:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16284:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16288:	2207      	movs	r2, #7
   1628a:	4629      	mov	r1, r5
   1628c:	4804      	ldr	r0, [pc, #16]	; (162a0 <id_create+0x88>)
   1628e:	4420      	add	r0, r4
   16290:	f014 fb05 	bl	2a89e <memcpy>
}
   16294:	e7e8      	b.n	16268 <id_create+0x50>
		bt_settings_save_id();
   16296:	f7fe f98b 	bl	145b0 <bt_settings_save_id>
	return 0;
   1629a:	2300      	movs	r3, #0
   1629c:	e7ef      	b.n	1627e <id_create+0x66>
   1629e:	bf00      	nop
   162a0:	200002a8 	.word	0x200002a8
   162a4:	20000374 	.word	0x20000374

000162a8 <bt_id_pending_keys_update>:
{
   162a8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   162aa:	4b0b      	ldr	r3, [pc, #44]	; (162d8 <bt_id_pending_keys_update+0x30>)
   162ac:	f3bf 8f5b 	dmb	ish
   162b0:	e853 2f00 	ldrex	r2, [r3]
   162b4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   162b8:	e843 1000 	strex	r0, r1, [r3]
   162bc:	2800      	cmp	r0, #0
   162be:	d1f7      	bne.n	162b0 <bt_id_pending_keys_update+0x8>
   162c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   162c4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   162c8:	d100      	bne.n	162cc <bt_id_pending_keys_update+0x24>
}
   162ca:	bd08      	pop	{r3, pc}
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   162cc:	2200      	movs	r2, #0
   162ce:	4903      	ldr	r1, [pc, #12]	; (162dc <bt_id_pending_keys_update+0x34>)
   162d0:	2002      	movs	r0, #2
   162d2:	f006 fbcd 	bl	1ca70 <bt_keys_foreach>
}
   162d6:	e7f8      	b.n	162ca <bt_id_pending_keys_update+0x22>
   162d8:	20000374 	.word	0x20000374
   162dc:	0002b011 	.word	0x0002b011

000162e0 <bt_id_add>:
{
   162e0:	b538      	push	{r3, r4, r5, lr}
   162e2:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   162e4:	4b40      	ldr	r3, [pc, #256]	; (163e8 <bt_id_add+0x108>)
   162e6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   162ea:	b123      	cbz	r3, 162f6 <bt_id_add+0x16>
   162ec:	4a3e      	ldr	r2, [pc, #248]	; (163e8 <bt_id_add+0x108>)
   162ee:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   162f2:	4293      	cmp	r3, r2
   162f4:	d20a      	bcs.n	1630c <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   162f6:	4a3c      	ldr	r2, [pc, #240]	; (163e8 <bt_id_add+0x108>)
   162f8:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   162fc:	3301      	adds	r3, #1
   162fe:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   16302:	7a23      	ldrb	r3, [r4, #8]
   16304:	f043 0304 	orr.w	r3, r3, #4
   16308:	7223      	strb	r3, [r4, #8]
}
   1630a:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   1630c:	2206      	movs	r2, #6
   1630e:	2100      	movs	r1, #0
   16310:	4608      	mov	r0, r1
   16312:	f001 fcaf 	bl	17c74 <bt_conn_lookup_state_le>
	if (conn) {
   16316:	4605      	mov	r5, r0
   16318:	b138      	cbz	r0, 1632a <bt_id_add+0x4a>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_ADD);
   1631a:	2101      	movs	r1, #1
   1631c:	4620      	mov	r0, r4
   1631e:	f7ff ff67 	bl	161f0 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   16322:	4628      	mov	r0, r5
   16324:	f001 f99a 	bl	1765c <bt_conn_unref>
		return;
   16328:	e7ef      	b.n	1630a <bt_id_add+0x2a>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1632a:	2100      	movs	r1, #0
   1632c:	482f      	ldr	r0, [pc, #188]	; (163ec <bt_id_add+0x10c>)
   1632e:	f000 fb7f 	bl	16a30 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   16332:	4b2d      	ldr	r3, [pc, #180]	; (163e8 <bt_id_add+0x108>)
   16334:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   16338:	bb33      	cbnz	r3, 16388 <bt_id_add+0xa8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1633a:	4b2b      	ldr	r3, [pc, #172]	; (163e8 <bt_id_add+0x108>)
   1633c:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
   16340:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   16344:	429a      	cmp	r2, r3
   16346:	d029      	beq.n	1639c <bt_id_add+0xbc>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   16348:	1c65      	adds	r5, r4, #1
   1634a:	4622      	mov	r2, r4
   1634c:	f812 0b2a 	ldrb.w	r0, [r2], #42
   16350:	4629      	mov	r1, r5
   16352:	f014 fdd0 	bl	2aef6 <hci_id_add>
	if (err) {
   16356:	2800      	cmp	r0, #0
   16358:	d13b      	bne.n	163d2 <bt_id_add+0xf2>
	bt_dev.le.rl_entries++;
   1635a:	4a23      	ldr	r2, [pc, #140]	; (163e8 <bt_id_add+0x108>)
   1635c:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   16360:	3301      	adds	r3, #1
   16362:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   16366:	7a23      	ldrb	r3, [r4, #8]
   16368:	f043 0304 	orr.w	r3, r3, #4
   1636c:	7223      	strb	r3, [r4, #8]
	err = le_set_privacy_mode(&keys->addr, BT_HCI_LE_PRIVACY_MODE_DEVICE);
   1636e:	2101      	movs	r1, #1
   16370:	4628      	mov	r0, r5
   16372:	f7ff ff0b 	bl	1618c <le_set_privacy_mode>
	if (err) {
   16376:	bb88      	cbnz	r0, 163dc <bt_id_add+0xfc>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16378:	2001      	movs	r0, #1
   1637a:	f014 fe0d 	bl	2af98 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1637e:	2100      	movs	r1, #0
   16380:	481b      	ldr	r0, [pc, #108]	; (163f0 <bt_id_add+0x110>)
   16382:	f000 fb55 	bl	16a30 <bt_le_ext_adv_foreach>
   16386:	e7c0      	b.n	1630a <bt_id_add+0x2a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16388:	2000      	movs	r0, #0
   1638a:	f014 fe05 	bl	2af98 <addr_res_enable>
		if (err) {
   1638e:	2800      	cmp	r0, #0
   16390:	d0d3      	beq.n	1633a <bt_id_add+0x5a>
			BT_WARN("Failed to disable address resolution");
   16392:	2157      	movs	r1, #87	; 0x57
   16394:	4817      	ldr	r0, [pc, #92]	; (163f4 <bt_id_add+0x114>)
   16396:	f012 fb75 	bl	28a84 <z_log_minimal_printk>
			goto done;
   1639a:	e7ed      	b.n	16378 <bt_id_add+0x98>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   1639c:	2157      	movs	r1, #87	; 0x57
   1639e:	4816      	ldr	r0, [pc, #88]	; (163f8 <bt_id_add+0x118>)
   163a0:	f012 fb70 	bl	28a84 <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   163a4:	2200      	movs	r2, #0
   163a6:	4611      	mov	r1, r2
   163a8:	f242 0029 	movw	r0, #8233	; 0x2029
   163ac:	f7fe fe82 	bl	150b4 <bt_hci_cmd_send_sync>
		if (err) {
   163b0:	b950      	cbnz	r0, 163c8 <bt_id_add+0xe8>
		bt_dev.le.rl_entries++;
   163b2:	4a0d      	ldr	r2, [pc, #52]	; (163e8 <bt_id_add+0x108>)
   163b4:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   163b8:	3301      	adds	r3, #1
   163ba:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   163be:	7a23      	ldrb	r3, [r4, #8]
   163c0:	f043 0304 	orr.w	r3, r3, #4
   163c4:	7223      	strb	r3, [r4, #8]
		goto done;
   163c6:	e7d7      	b.n	16378 <bt_id_add+0x98>
			BT_ERR("Failed to clear resolution list");
   163c8:	2145      	movs	r1, #69	; 0x45
   163ca:	480c      	ldr	r0, [pc, #48]	; (163fc <bt_id_add+0x11c>)
   163cc:	f012 fb5a 	bl	28a84 <z_log_minimal_printk>
			goto done;
   163d0:	e7d2      	b.n	16378 <bt_id_add+0x98>
		BT_ERR("Failed to add IRK to controller");
   163d2:	2145      	movs	r1, #69	; 0x45
   163d4:	480a      	ldr	r0, [pc, #40]	; (16400 <bt_id_add+0x120>)
   163d6:	f012 fb55 	bl	28a84 <z_log_minimal_printk>
		goto done;
   163da:	e7cd      	b.n	16378 <bt_id_add+0x98>
		BT_ERR("Failed to set privacy mode");
   163dc:	2145      	movs	r1, #69	; 0x45
   163de:	4809      	ldr	r0, [pc, #36]	; (16404 <bt_id_add+0x124>)
   163e0:	f012 fb50 	bl	28a84 <z_log_minimal_printk>
		goto done;
   163e4:	e7c8      	b.n	16378 <bt_id_add+0x98>
   163e6:	bf00      	nop
   163e8:	200002a8 	.word	0x200002a8
   163ec:	0002aec1 	.word	0x0002aec1
   163f0:	0002ae91 	.word	0x0002ae91
   163f4:	00030ff4 	.word	0x00030ff4
   163f8:	00031020 	.word	0x00031020
   163fc:	00031058 	.word	0x00031058
   16400:	00031080 	.word	0x00031080
   16404:	000310a8 	.word	0x000310a8

00016408 <bt_id_del>:
{
   16408:	b538      	push	{r3, r4, r5, lr}
   1640a:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   1640c:	4b33      	ldr	r3, [pc, #204]	; (164dc <bt_id_del+0xd4>)
   1640e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   16412:	b12b      	cbz	r3, 16420 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16414:	4a31      	ldr	r2, [pc, #196]	; (164dc <bt_id_del+0xd4>)
   16416:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   1641a:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
   1641c:	429a      	cmp	r2, r3
   1641e:	dd0a      	ble.n	16436 <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
   16420:	4a2e      	ldr	r2, [pc, #184]	; (164dc <bt_id_del+0xd4>)
   16422:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   16426:	3b01      	subs	r3, #1
   16428:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1642c:	7a23      	ldrb	r3, [r4, #8]
   1642e:	f023 0304 	bic.w	r3, r3, #4
   16432:	7223      	strb	r3, [r4, #8]
}
   16434:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   16436:	2206      	movs	r2, #6
   16438:	2100      	movs	r1, #0
   1643a:	4608      	mov	r0, r1
   1643c:	f001 fc1a 	bl	17c74 <bt_conn_lookup_state_le>
	if (conn) {
   16440:	4605      	mov	r5, r0
   16442:	b138      	cbz	r0, 16454 <bt_id_del+0x4c>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
   16444:	2102      	movs	r1, #2
   16446:	4620      	mov	r0, r4
   16448:	f7ff fed2 	bl	161f0 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   1644c:	4628      	mov	r0, r5
   1644e:	f001 f905 	bl	1765c <bt_conn_unref>
		return;
   16452:	e7ef      	b.n	16434 <bt_id_del+0x2c>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16454:	2100      	movs	r1, #0
   16456:	4822      	ldr	r0, [pc, #136]	; (164e0 <bt_id_del+0xd8>)
   16458:	f000 faea 	bl	16a30 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1645c:	2000      	movs	r0, #0
   1645e:	f014 fd9b 	bl	2af98 <addr_res_enable>
	if (err) {
   16462:	4602      	mov	r2, r0
   16464:	b9e8      	cbnz	r0, 164a2 <bt_id_del+0x9a>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16466:	4a1d      	ldr	r2, [pc, #116]	; (164dc <bt_id_del+0xd4>)
   16468:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   1646c:	f892 2118 	ldrb.w	r2, [r2, #280]	; 0x118
   16470:	4293      	cmp	r3, r2
   16472:	d81b      	bhi.n	164ac <bt_id_del+0xa4>
	err = hci_id_del(&keys->addr);
   16474:	1c60      	adds	r0, r4, #1
   16476:	f014 fd74 	bl	2af62 <hci_id_del>
	if (err) {
   1647a:	bb28      	cbnz	r0, 164c8 <bt_id_del+0xc0>
	bt_dev.le.rl_entries--;
   1647c:	4a17      	ldr	r2, [pc, #92]	; (164dc <bt_id_del+0xd4>)
   1647e:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   16482:	3b01      	subs	r3, #1
   16484:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   16488:	7a23      	ldrb	r3, [r4, #8]
   1648a:	f023 0304 	bic.w	r3, r3, #4
   1648e:	7223      	strb	r3, [r4, #8]
	if (bt_dev.le.rl_entries) {
   16490:	4b12      	ldr	r3, [pc, #72]	; (164dc <bt_id_del+0xd4>)
   16492:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   16496:	b9e3      	cbnz	r3, 164d2 <bt_id_del+0xca>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16498:	2100      	movs	r1, #0
   1649a:	4812      	ldr	r0, [pc, #72]	; (164e4 <bt_id_del+0xdc>)
   1649c:	f000 fac8 	bl	16a30 <bt_le_ext_adv_foreach>
   164a0:	e7c8      	b.n	16434 <bt_id_del+0x2c>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   164a2:	2145      	movs	r1, #69	; 0x45
   164a4:	4810      	ldr	r0, [pc, #64]	; (164e8 <bt_id_del+0xe0>)
   164a6:	f012 faed 	bl	28a84 <z_log_minimal_printk>
		goto done;
   164aa:	e7f1      	b.n	16490 <bt_id_del+0x88>
		bt_dev.le.rl_entries--;
   164ac:	3b01      	subs	r3, #1
   164ae:	4a0b      	ldr	r2, [pc, #44]	; (164dc <bt_id_del+0xd4>)
   164b0:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   164b4:	7a23      	ldrb	r3, [r4, #8]
   164b6:	f023 0304 	bic.w	r3, r3, #4
   164ba:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   164bc:	2200      	movs	r2, #0
   164be:	490b      	ldr	r1, [pc, #44]	; (164ec <bt_id_del+0xe4>)
   164c0:	2002      	movs	r0, #2
   164c2:	f006 fad5 	bl	1ca70 <bt_keys_foreach>
		goto done;
   164c6:	e7e3      	b.n	16490 <bt_id_del+0x88>
		BT_ERR("Failed to remove IRK from controller");
   164c8:	2145      	movs	r1, #69	; 0x45
   164ca:	4809      	ldr	r0, [pc, #36]	; (164f0 <bt_id_del+0xe8>)
   164cc:	f012 fada 	bl	28a84 <z_log_minimal_printk>
		goto done;
   164d0:	e7de      	b.n	16490 <bt_id_del+0x88>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   164d2:	2001      	movs	r0, #1
   164d4:	f014 fd60 	bl	2af98 <addr_res_enable>
   164d8:	e7de      	b.n	16498 <bt_id_del+0x90>
   164da:	bf00      	nop
   164dc:	200002a8 	.word	0x200002a8
   164e0:	0002aec1 	.word	0x0002aec1
   164e4:	0002ae91 	.word	0x0002ae91
   164e8:	000310c8 	.word	0x000310c8
   164ec:	0002af47 	.word	0x0002af47
   164f0:	000310fc 	.word	0x000310fc

000164f4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   164f4:	b570      	push	{r4, r5, r6, lr}
   164f6:	b084      	sub	sp, #16
   164f8:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   164fa:	4605      	mov	r5, r0
   164fc:	b1e0      	cbz	r0, 16538 <bt_id_create+0x44>
   164fe:	2300      	movs	r3, #0
   16500:	9300      	str	r3, [sp, #0]
   16502:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   16506:	2207      	movs	r2, #7
   16508:	4669      	mov	r1, sp
   1650a:	f014 f99b 	bl	2a844 <memcmp>
   1650e:	b198      	cbz	r0, 16538 <bt_id_create+0x44>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16510:	782b      	ldrb	r3, [r5, #0]
   16512:	2b01      	cmp	r3, #1
   16514:	d104      	bne.n	16520 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   16516:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16518:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1651c:	2bc0      	cmp	r3, #192	; 0xc0
   1651e:	d006      	beq.n	1652e <bt_id_create+0x3a>
			BT_ERR("Only static random identity address supported");
   16520:	2145      	movs	r1, #69	; 0x45
   16522:	481e      	ldr	r0, [pc, #120]	; (1659c <bt_id_create+0xa8>)
   16524:	f012 faae 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   16528:	f06f 0015 	mvn.w	r0, #21
   1652c:	e028      	b.n	16580 <bt_id_create+0x8c>
		}

		if (id_find(addr) >= 0) {
   1652e:	4628      	mov	r0, r5
   16530:	f7ff fde4 	bl	160fc <id_find>
   16534:	2800      	cmp	r0, #0
   16536:	da25      	bge.n	16584 <bt_id_create+0x90>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   16538:	bb54      	cbnz	r4, 16590 <bt_id_create+0x9c>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1653a:	4b19      	ldr	r3, [pc, #100]	; (165a0 <bt_id_create+0xac>)
   1653c:	79db      	ldrb	r3, [r3, #7]
   1653e:	2b01      	cmp	r3, #1
   16540:	d029      	beq.n	16596 <bt_id_create+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16542:	f3bf 8f5b 	dmb	ish
   16546:	4b17      	ldr	r3, [pc, #92]	; (165a4 <bt_id_create+0xb0>)
   16548:	681b      	ldr	r3, [r3, #0]
   1654a:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1654e:	f013 0f01 	tst.w	r3, #1
   16552:	d10a      	bne.n	1656a <bt_id_create+0x76>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   16554:	b1cd      	cbz	r5, 1658a <bt_id_create+0x96>
   16556:	2300      	movs	r3, #0
   16558:	9302      	str	r3, [sp, #8]
   1655a:	f8cd 300b 	str.w	r3, [sp, #11]
   1655e:	2207      	movs	r2, #7
   16560:	a902      	add	r1, sp, #8
   16562:	4628      	mov	r0, r5
   16564:	f014 f96e 	bl	2a844 <memcmp>
   16568:	b178      	cbz	r0, 1658a <bt_id_create+0x96>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   1656a:	4b0d      	ldr	r3, [pc, #52]	; (165a0 <bt_id_create+0xac>)
   1656c:	79de      	ldrb	r6, [r3, #7]
   1656e:	1c72      	adds	r2, r6, #1
   16570:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   16572:	4622      	mov	r2, r4
   16574:	4629      	mov	r1, r5
   16576:	4630      	mov	r0, r6
   16578:	f7ff fe4e 	bl	16218 <id_create>
	if (err) {
   1657c:	b900      	cbnz	r0, 16580 <bt_id_create+0x8c>
		return err;
	}

	return new_id;
   1657e:	4630      	mov	r0, r6
}
   16580:	b004      	add	sp, #16
   16582:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   16584:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16588:	e7fa      	b.n	16580 <bt_id_create+0x8c>
			return -EINVAL;
   1658a:	f06f 0015 	mvn.w	r0, #21
   1658e:	e7f7      	b.n	16580 <bt_id_create+0x8c>
		return -EINVAL;
   16590:	f06f 0015 	mvn.w	r0, #21
   16594:	e7f4      	b.n	16580 <bt_id_create+0x8c>
		return -ENOMEM;
   16596:	f06f 000b 	mvn.w	r0, #11
   1659a:	e7f1      	b.n	16580 <bt_id_create+0x8c>
   1659c:	00031128 	.word	0x00031128
   165a0:	200002a8 	.word	0x200002a8
   165a4:	20000374 	.word	0x20000374

000165a8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   165a8:	b530      	push	{r4, r5, lr}
   165aa:	b087      	sub	sp, #28
   165ac:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   165ae:	aa01      	add	r2, sp, #4
   165b0:	2100      	movs	r1, #0
   165b2:	f241 0009 	movw	r0, #4105	; 0x1009
   165b6:	f7fe fd7d 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   165ba:	b9f0      	cbnz	r0, 165fa <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   165bc:	9b01      	ldr	r3, [sp, #4]
   165be:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   165c0:	3401      	adds	r4, #1
   165c2:	2300      	movs	r3, #0
   165c4:	9302      	str	r3, [sp, #8]
   165c6:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   165ca:	2206      	movs	r2, #6
   165cc:	a902      	add	r1, sp, #8
   165ce:	4620      	mov	r0, r4
   165d0:	f014 f938 	bl	2a844 <memcmp>
   165d4:	b158      	cbz	r0, 165ee <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   165d6:	4b12      	ldr	r3, [pc, #72]	; (16620 <bt_id_read_public_addr+0x78>)
   165d8:	e893 0003 	ldmia.w	r3, {r0, r1}
   165dc:	9004      	str	r0, [sp, #16]
   165de:	f8ad 1014 	strh.w	r1, [sp, #20]
   165e2:	2206      	movs	r2, #6
   165e4:	a904      	add	r1, sp, #16
   165e6:	4620      	mov	r0, r4
   165e8:	f014 f92c 	bl	2a844 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   165ec:	b958      	cbnz	r0, 16606 <bt_id_read_public_addr+0x5e>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   165ee:	9801      	ldr	r0, [sp, #4]
   165f0:	f006 fd72 	bl	1d0d8 <net_buf_unref>
		return 0U;
   165f4:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   165f6:	b007      	add	sp, #28
   165f8:	bd30      	pop	{r4, r5, pc}
		BT_WARN("Failed to read public address");
   165fa:	2157      	movs	r1, #87	; 0x57
   165fc:	4809      	ldr	r0, [pc, #36]	; (16624 <bt_id_read_public_addr+0x7c>)
   165fe:	f012 fa41 	bl	28a84 <z_log_minimal_printk>
		return 0U;
   16602:	2000      	movs	r0, #0
   16604:	e7f7      	b.n	165f6 <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
   16606:	2206      	movs	r2, #6
   16608:	4621      	mov	r1, r4
   1660a:	1c68      	adds	r0, r5, #1
   1660c:	f014 f947 	bl	2a89e <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   16610:	2300      	movs	r3, #0
   16612:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   16614:	9801      	ldr	r0, [sp, #4]
   16616:	f006 fd5f 	bl	1d0d8 <net_buf_unref>
	return 1U;
   1661a:	2001      	movs	r0, #1
   1661c:	e7eb      	b.n	165f6 <bt_id_read_public_addr+0x4e>
   1661e:	bf00      	nop
   16620:	0002f548 	.word	0x0002f548
   16624:	0003115c 	.word	0x0003115c

00016628 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   16628:	b500      	push	{lr}
   1662a:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1662c:	4668      	mov	r0, sp
   1662e:	f7ff ffbb 	bl	165a8 <bt_id_read_public_addr>
   16632:	4b06      	ldr	r3, [pc, #24]	; (1664c <bt_setup_public_id_addr+0x24>)
   16634:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   16636:	b918      	cbnz	r0, 16640 <bt_setup_public_id_addr+0x18>
		return 0;
   16638:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   1663a:	b003      	add	sp, #12
   1663c:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   16640:	2200      	movs	r2, #0
   16642:	4669      	mov	r1, sp
   16644:	4610      	mov	r0, r2
   16646:	f7ff fde7 	bl	16218 <id_create>
   1664a:	e7f6      	b.n	1663a <bt_setup_public_id_addr+0x12>
   1664c:	200002a8 	.word	0x200002a8

00016650 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16654:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16656:	4b1c      	ldr	r3, [pc, #112]	; (166c8 <bt_read_static_addr+0x78>)
   16658:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   1665c:	f015 0501 	ands.w	r5, r5, #1
   16660:	d010      	beq.n	16684 <bt_read_static_addr+0x34>
   16662:	4606      	mov	r6, r0
   16664:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   16666:	aa01      	add	r2, sp, #4
   16668:	2100      	movs	r1, #0
   1666a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1666e:	f7fe fd21 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   16672:	4604      	mov	r4, r0
   16674:	b958      	cbnz	r0, 1668e <bt_read_static_addr+0x3e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   16676:	9b01      	ldr	r3, [sp, #4]
   16678:	689f      	ldr	r7, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1667a:	787d      	ldrb	r5, [r7, #1]
   1667c:	4545      	cmp	r5, r8
   1667e:	bf28      	it	cs
   16680:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   16682:	e011      	b.n	166a8 <bt_read_static_addr+0x58>
		BT_WARN("Read Static Addresses command not available");
   16684:	2157      	movs	r1, #87	; 0x57
   16686:	4811      	ldr	r0, [pc, #68]	; (166cc <bt_read_static_addr+0x7c>)
   16688:	f012 f9fc 	bl	28a84 <z_log_minimal_printk>
		return 0;
   1668c:	e012      	b.n	166b4 <bt_read_static_addr+0x64>
		BT_WARN("Failed to read static addresses");
   1668e:	2157      	movs	r1, #87	; 0x57
   16690:	480f      	ldr	r0, [pc, #60]	; (166d0 <bt_read_static_addr+0x80>)
   16692:	f012 f9f7 	bl	28a84 <z_log_minimal_printk>
		return 0;
   16696:	2500      	movs	r5, #0
   16698:	e00c      	b.n	166b4 <bt_read_static_addr+0x64>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1669a:	2216      	movs	r2, #22
   1669c:	1cb9      	adds	r1, r7, #2
   1669e:	fb02 6004 	mla	r0, r2, r4, r6
   166a2:	f014 f8fc 	bl	2a89e <memcpy>
	for (i = 0; i < cnt; i++) {
   166a6:	3401      	adds	r4, #1
   166a8:	42a5      	cmp	r5, r4
   166aa:	dcf6      	bgt.n	1669a <bt_read_static_addr+0x4a>
	}

	net_buf_unref(rsp);
   166ac:	9801      	ldr	r0, [sp, #4]
   166ae:	f006 fd13 	bl	1d0d8 <net_buf_unref>
	if (!cnt) {
   166b2:	b11d      	cbz	r5, 166bc <bt_read_static_addr+0x6c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   166b4:	4628      	mov	r0, r5
   166b6:	b002      	add	sp, #8
   166b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No static addresses stored in controller");
   166bc:	2157      	movs	r1, #87	; 0x57
   166be:	4805      	ldr	r0, [pc, #20]	; (166d4 <bt_read_static_addr+0x84>)
   166c0:	f012 f9e0 	bl	28a84 <z_log_minimal_printk>
   166c4:	e7f6      	b.n	166b4 <bt_read_static_addr+0x64>
   166c6:	bf00      	nop
   166c8:	200002a8 	.word	0x200002a8
   166cc:	00031180 	.word	0x00031180
   166d0:	000311b4 	.word	0x000311b4
   166d4:	000311dc 	.word	0x000311dc

000166d8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   166d8:	b510      	push	{r4, lr}
   166da:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   166dc:	4b17      	ldr	r3, [pc, #92]	; (1673c <bt_setup_random_id_addr+0x64>)
   166de:	79dc      	ldrb	r4, [r3, #7]
   166e0:	b934      	cbnz	r4, 166f0 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   166e2:	2101      	movs	r1, #1
   166e4:	a802      	add	r0, sp, #8
   166e6:	f7ff ffb3 	bl	16650 <bt_read_static_addr>
   166ea:	4b14      	ldr	r3, [pc, #80]	; (1673c <bt_setup_random_id_addr+0x64>)
   166ec:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   166ee:	b938      	cbnz	r0, 16700 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   166f0:	2100      	movs	r1, #0
   166f2:	4608      	mov	r0, r1
   166f4:	f7ff fefe 	bl	164f4 <bt_id_create>
   166f8:	4603      	mov	r3, r0
}
   166fa:	4618      	mov	r0, r3
   166fc:	b008      	add	sp, #32
   166fe:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16700:	4b0e      	ldr	r3, [pc, #56]	; (1673c <bt_setup_random_id_addr+0x64>)
   16702:	79db      	ldrb	r3, [r3, #7]
   16704:	42a3      	cmp	r3, r4
   16706:	d916      	bls.n	16736 <bt_setup_random_id_addr+0x5e>
   16708:	2206      	movs	r2, #6
   1670a:	2116      	movs	r1, #22
   1670c:	ab02      	add	r3, sp, #8
   1670e:	fb01 3104 	mla	r1, r1, r4, r3
   16712:	f10d 0001 	add.w	r0, sp, #1
   16716:	f014 f8c2 	bl	2a89e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1671a:	2301      	movs	r3, #1
   1671c:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   16720:	2200      	movs	r2, #0
   16722:	4669      	mov	r1, sp
   16724:	4620      	mov	r0, r4
   16726:	f7ff fd77 	bl	16218 <id_create>
				if (err) {
   1672a:	4603      	mov	r3, r0
   1672c:	2800      	cmp	r0, #0
   1672e:	d1e4      	bne.n	166fa <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16730:	3401      	adds	r4, #1
   16732:	b2e4      	uxtb	r4, r4
   16734:	e7e4      	b.n	16700 <bt_setup_random_id_addr+0x28>
			return 0;
   16736:	2300      	movs	r3, #0
   16738:	e7df      	b.n	166fa <bt_setup_random_id_addr+0x22>
   1673a:	bf00      	nop
   1673c:	200002a8 	.word	0x200002a8

00016740 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   16740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16742:	460d      	mov	r5, r1
   16744:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   16746:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16748:	f011 0f01 	tst.w	r1, #1
   1674c:	d027      	beq.n	1679e <bt_id_set_adv_own_addr+0x5e>
   1674e:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16750:	b142      	cbz	r2, 16764 <bt_id_set_adv_own_addr+0x24>
   16752:	f011 0f20 	tst.w	r1, #32
   16756:	d005      	beq.n	16764 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   16758:	4b22      	ldr	r3, [pc, #136]	; (167e4 <bt_id_set_adv_own_addr+0xa4>)
   1675a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1675e:	f013 0f40 	tst.w	r3, #64	; 0x40
   16762:	d038      	beq.n	167d6 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16764:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16768:	4a1e      	ldr	r2, [pc, #120]	; (167e4 <bt_id_set_adv_own_addr+0xa4>)
   1676a:	5cd3      	ldrb	r3, [r2, r3]
   1676c:	2b01      	cmp	r3, #1
   1676e:	d00d      	beq.n	1678c <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   16770:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16774:	4b1b      	ldr	r3, [pc, #108]	; (167e4 <bt_id_set_adv_own_addr+0xa4>)
   16776:	5d1b      	ldrb	r3, [r3, r4]
   16778:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1677a:	b37f      	cbz	r7, 167dc <bt_id_set_adv_own_addr+0x9c>
   1677c:	f015 0f20 	tst.w	r5, #32
   16780:	d02e      	beq.n	167e0 <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16782:	f043 0302 	orr.w	r3, r3, #2
   16786:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   16788:	2000      	movs	r0, #0
   1678a:	e017      	b.n	167bc <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1678c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   16790:	4411      	add	r1, r2
   16792:	3101      	adds	r1, #1
   16794:	f014 fc20 	bl	2afd8 <bt_id_set_adv_random_addr>
				if (err) {
   16798:	2800      	cmp	r0, #0
   1679a:	d0e9      	beq.n	16770 <bt_id_set_adv_own_addr+0x30>
   1679c:	e00e      	b.n	167bc <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1679e:	f011 0f04 	tst.w	r1, #4
   167a2:	d013      	beq.n	167cc <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   167a4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   167a8:	4a0e      	ldr	r2, [pc, #56]	; (167e4 <bt_id_set_adv_own_addr+0xa4>)
   167aa:	5cd3      	ldrb	r3, [r2, r3]
   167ac:	2b01      	cmp	r3, #1
   167ae:	d006      	beq.n	167be <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   167b0:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   167b2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   167b6:	4b0b      	ldr	r3, [pc, #44]	; (167e4 <bt_id_set_adv_own_addr+0xa4>)
   167b8:	5d1b      	ldrb	r3, [r3, r4]
   167ba:	7033      	strb	r3, [r6, #0]
}
   167bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   167be:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   167c2:	4411      	add	r1, r2
   167c4:	3101      	adds	r1, #1
   167c6:	f014 fc07 	bl	2afd8 <bt_id_set_adv_random_addr>
   167ca:	e7f2      	b.n	167b2 <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   167cc:	f014 fc09 	bl	2afe2 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   167d0:	2301      	movs	r3, #1
   167d2:	7033      	strb	r3, [r6, #0]
		if (err) {
   167d4:	e7f2      	b.n	167bc <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   167d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   167da:	e7ef      	b.n	167bc <bt_id_set_adv_own_addr+0x7c>
	return 0;
   167dc:	2000      	movs	r0, #0
   167de:	e7ed      	b.n	167bc <bt_id_set_adv_own_addr+0x7c>
   167e0:	2000      	movs	r0, #0
   167e2:	e7eb      	b.n	167bc <bt_id_set_adv_own_addr+0x7c>
   167e4:	200002a8 	.word	0x200002a8

000167e8 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   167e8:	4800      	ldr	r0, [pc, #0]	; (167ec <adv_new_legacy+0x4>)
   167ea:	4770      	bx	lr
   167ec:	200002c0 	.word	0x200002c0

000167f0 <set_data_add_complete>:
	size_t len;
};

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   167f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f4:	b083      	sub	sp, #12
   167f6:	4605      	mov	r5, r0
   167f8:	4688      	mov	r8, r1
   167fa:	9201      	str	r2, [sp, #4]
   167fc:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   167fe:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   16802:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   16804:	9a00      	ldr	r2, [sp, #0]
   16806:	4552      	cmp	r2, sl
   16808:	d93f      	bls.n	1688a <set_data_add_complete+0x9a>
		const struct bt_data *data = ad[i].data;
   1680a:	9a01      	ldr	r2, [sp, #4]
   1680c:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   16810:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   16814:	2400      	movs	r4, #0
   16816:	e016      	b.n	16846 <set_data_add_complete+0x56>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
   16818:	f04f 0c08 	mov.w	ip, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
   1681c:	b2d6      	uxtb	r6, r2
   1681e:	1c59      	adds	r1, r3, #1
   16820:	b2c9      	uxtb	r1, r1
   16822:	f106 0b01 	add.w	fp, r6, #1
   16826:	f805 b00e 	strb.w	fp, [r5, lr]
			set_data[set_data_len++] = type;
   1682a:	3302      	adds	r3, #2
   1682c:	fa5f fb83 	uxtb.w	fp, r3
   16830:	f805 c001 	strb.w	ip, [r5, r1]

			memcpy(&set_data[set_data_len], data[j].data, len);
   16834:	6841      	ldr	r1, [r0, #4]
   16836:	eb05 000b 	add.w	r0, r5, fp
   1683a:	f014 f830 	bl	2a89e <memcpy>
			set_data_len += len;
   1683e:	eb0b 0306 	add.w	r3, fp, r6
   16842:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   16844:	3401      	adds	r4, #1
   16846:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1684a:	4294      	cmp	r4, r2
   1684c:	d21a      	bcs.n	16884 <set_data_add_complete+0x94>
			size_t len = data[j].data_len;
   1684e:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   16852:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   16854:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   16858:	469e      	mov	lr, r3
   1685a:	1899      	adds	r1, r3, r2
   1685c:	3102      	adds	r1, #2
   1685e:	4541      	cmp	r1, r8
   16860:	d9dc      	bls.n	1681c <set_data_add_complete+0x2c>
				ssize_t shortened_len = set_data_len_max -
   16862:	eba8 0203 	sub.w	r2, r8, r3
   16866:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16868:	f1bc 0f09 	cmp.w	ip, #9
   1686c:	d101      	bne.n	16872 <set_data_add_complete+0x82>
   1686e:	2a00      	cmp	r2, #0
   16870:	dcd2      	bgt.n	16818 <set_data_add_complete+0x28>
					BT_ERR("Too big advertising data");
   16872:	2145      	movs	r1, #69	; 0x45
   16874:	4807      	ldr	r0, [pc, #28]	; (16894 <set_data_add_complete+0xa4>)
   16876:	f012 f905 	bl	28a84 <z_log_minimal_printk>
					return -EINVAL;
   1687a:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   1687e:	b003      	add	sp, #12
   16880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
   16884:	f10a 0a01 	add.w	sl, sl, #1
   16888:	e7bc      	b.n	16804 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   1688a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1688c:	7013      	strb	r3, [r2, #0]
	return 0;
   1688e:	2000      	movs	r0, #0
   16890:	e7f5      	b.n	1687e <set_data_add_complete+0x8e>
   16892:	bf00      	nop
   16894:	00031214 	.word	0x00031214

00016898 <valid_adv_ext_param>:
{
   16898:	b510      	push	{r4, lr}
   1689a:	b082      	sub	sp, #8
   1689c:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   1689e:	7800      	ldrb	r0, [r0, #0]
   168a0:	4b23      	ldr	r3, [pc, #140]	; (16930 <valid_adv_ext_param+0x98>)
   168a2:	79db      	ldrb	r3, [r3, #7]
   168a4:	4298      	cmp	r0, r3
   168a6:	d302      	bcc.n	168ae <valid_adv_ext_param+0x16>
		return false;
   168a8:	2000      	movs	r0, #0
}
   168aa:	b002      	add	sp, #8
   168ac:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   168ae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   168b2:	2300      	movs	r3, #0
   168b4:	9300      	str	r3, [sp, #0]
   168b6:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   168ba:	2207      	movs	r2, #7
   168bc:	4669      	mov	r1, sp
   168be:	4b1c      	ldr	r3, [pc, #112]	; (16930 <valid_adv_ext_param+0x98>)
   168c0:	4418      	add	r0, r3
   168c2:	f013 ffbf 	bl	2a844 <memcmp>
	if (param->id >= bt_dev.id_count ||
   168c6:	2800      	cmp	r0, #0
   168c8:	d0ee      	beq.n	168a8 <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   168ca:	6863      	ldr	r3, [r4, #4]
   168cc:	f013 0f01 	tst.w	r3, #1
   168d0:	d107      	bne.n	168e2 <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   168d2:	4a17      	ldr	r2, [pc, #92]	; (16930 <valid_adv_ext_param+0x98>)
   168d4:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   168d8:	2a08      	cmp	r2, #8
   168da:	d802      	bhi.n	168e2 <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   168dc:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   168de:	2a9f      	cmp	r2, #159	; 0x9f
   168e0:	d91b      	bls.n	1691a <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   168e2:	f013 0f30 	tst.w	r3, #48	; 0x30
   168e6:	d001      	beq.n	168ec <valid_adv_ext_param+0x54>
	    !param->peer) {
   168e8:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   168ea:	b1c2      	cbz	r2, 1691e <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   168ec:	f013 0f10 	tst.w	r3, #16
   168f0:	d108      	bne.n	16904 <valid_adv_ext_param+0x6c>
	    !param->peer) {
   168f2:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   168f4:	b132      	cbz	r2, 16904 <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   168f6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   168fa:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   168fe:	d014      	beq.n	1692a <valid_adv_ext_param+0x92>
	return true;
   16900:	2001      	movs	r0, #1
   16902:	e7d2      	b.n	168aa <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   16904:	68a2      	ldr	r2, [r4, #8]
   16906:	68e1      	ldr	r1, [r4, #12]
   16908:	428a      	cmp	r2, r1
   1690a:	d80a      	bhi.n	16922 <valid_adv_ext_param+0x8a>
   1690c:	2a1f      	cmp	r2, #31
   1690e:	d90a      	bls.n	16926 <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   16910:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   16914:	d9ef      	bls.n	168f6 <valid_adv_ext_param+0x5e>
			return false;
   16916:	2000      	movs	r0, #0
   16918:	e7c7      	b.n	168aa <valid_adv_ext_param+0x12>
			return false;
   1691a:	2000      	movs	r0, #0
   1691c:	e7c5      	b.n	168aa <valid_adv_ext_param+0x12>
		return false;
   1691e:	2000      	movs	r0, #0
   16920:	e7c3      	b.n	168aa <valid_adv_ext_param+0x12>
			return false;
   16922:	2000      	movs	r0, #0
   16924:	e7c1      	b.n	168aa <valid_adv_ext_param+0x12>
   16926:	2000      	movs	r0, #0
   16928:	e7bf      	b.n	168aa <valid_adv_ext_param+0x12>
		return false;
   1692a:	2000      	movs	r0, #0
   1692c:	e7bd      	b.n	168aa <valid_adv_ext_param+0x12>
   1692e:	bf00      	nop
   16930:	200002a8 	.word	0x200002a8

00016934 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16934:	b5f0      	push	{r4, r5, r6, r7, lr}
   16936:	b085      	sub	sp, #20
   16938:	4604      	mov	r4, r0
   1693a:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1693c:	4605      	mov	r5, r0
   1693e:	f815 2b09 	ldrb.w	r2, [r5], #9
   16942:	4b1f      	ldr	r3, [pc, #124]	; (169c0 <le_adv_start_add_conn+0x8c>)
   16944:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16948:	2300      	movs	r3, #0
   1694a:	9300      	str	r3, [sp, #0]
   1694c:	f8cd 3003 	str.w	r3, [sp, #3]
   16950:	2207      	movs	r2, #7
   16952:	4669      	mov	r1, sp
   16954:	4628      	mov	r0, r5
   16956:	f013 ff75 	bl	2a844 <memcmp>
   1695a:	b9b8      	cbnz	r0, 1698c <le_adv_start_add_conn+0x58>
   1695c:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1695e:	4b19      	ldr	r3, [pc, #100]	; (169c4 <le_adv_start_add_conn+0x90>)
   16960:	e893 0003 	ldmia.w	r3, {r0, r1}
   16964:	9002      	str	r0, [sp, #8]
   16966:	f8ad 100c 	strh.w	r1, [sp, #12]
   1696a:	0c09      	lsrs	r1, r1, #16
   1696c:	f88d 100e 	strb.w	r1, [sp, #14]
   16970:	a902      	add	r1, sp, #8
   16972:	7820      	ldrb	r0, [r4, #0]
   16974:	f014 feb9 	bl	2b6ea <bt_conn_add_le>
		if (!conn) {
   16978:	4604      	mov	r4, r0
   1697a:	b120      	cbz	r0, 16986 <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   1697c:	2104      	movs	r1, #4
   1697e:	f000 fea9 	bl	176d4 <bt_conn_set_state>
		*out_conn = conn;
   16982:	603c      	str	r4, [r7, #0]
		return 0;
   16984:	e012      	b.n	169ac <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   16986:	f06f 060b 	mvn.w	r6, #11
   1698a:	e00f      	b.n	169ac <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1698c:	4629      	mov	r1, r5
   1698e:	7820      	ldrb	r0, [r4, #0]
   16990:	f001 f92c 	bl	17bec <bt_conn_exists_le>
   16994:	b968      	cbnz	r0, 169b2 <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   16996:	4629      	mov	r1, r5
   16998:	7820      	ldrb	r0, [r4, #0]
   1699a:	f014 fea6 	bl	2b6ea <bt_conn_add_le>
	if (!conn) {
   1699e:	4604      	mov	r4, r0
   169a0:	b150      	cbz	r0, 169b8 <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   169a2:	2105      	movs	r1, #5
   169a4:	f000 fe96 	bl	176d4 <bt_conn_set_state>
	*out_conn = conn;
   169a8:	603c      	str	r4, [r7, #0]
	return 0;
   169aa:	2600      	movs	r6, #0
}
   169ac:	4630      	mov	r0, r6
   169ae:	b005      	add	sp, #20
   169b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   169b2:	f06f 0615 	mvn.w	r6, #21
   169b6:	e7f9      	b.n	169ac <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   169b8:	f06f 060b 	mvn.w	r6, #11
   169bc:	e7f6      	b.n	169ac <le_adv_start_add_conn+0x78>
   169be:	bf00      	nop
   169c0:	200002a8 	.word	0x200002a8
   169c4:	0002f550 	.word	0x0002f550

000169c8 <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   169c8:	b570      	push	{r4, r5, r6, lr}
   169ca:	b084      	sub	sp, #16
   169cc:	4604      	mov	r4, r0
   169ce:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   169d0:	f100 0509 	add.w	r5, r0, #9
   169d4:	2300      	movs	r3, #0
   169d6:	9300      	str	r3, [sp, #0]
   169d8:	f8cd 3003 	str.w	r3, [sp, #3]
   169dc:	2207      	movs	r2, #7
   169de:	4669      	mov	r1, sp
   169e0:	4628      	mov	r0, r5
   169e2:	f013 ff2f 	bl	2a844 <memcmp>
   169e6:	b9c8      	cbnz	r0, 16a1c <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   169e8:	4b10      	ldr	r3, [pc, #64]	; (16a2c <le_adv_stop_free_conn+0x64>)
   169ea:	e893 0003 	ldmia.w	r3, {r0, r1}
   169ee:	9002      	str	r0, [sp, #8]
   169f0:	f8ad 100c 	strh.w	r1, [sp, #12]
   169f4:	0c09      	lsrs	r1, r1, #16
   169f6:	f88d 100e 	strb.w	r1, [sp, #14]
   169fa:	2204      	movs	r2, #4
   169fc:	a902      	add	r1, sp, #8
   169fe:	7820      	ldrb	r0, [r4, #0]
   16a00:	f001 f938 	bl	17c74 <bt_conn_lookup_state_le>
   16a04:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECT_DIR_ADV);
	}

	if (conn) {
   16a06:	b13c      	cbz	r4, 16a18 <le_adv_stop_free_conn+0x50>
		conn->err = status;
   16a08:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16a0a:	2100      	movs	r1, #0
   16a0c:	4620      	mov	r0, r4
   16a0e:	f000 fe61 	bl	176d4 <bt_conn_set_state>
		bt_conn_unref(conn);
   16a12:	4620      	mov	r0, r4
   16a14:	f000 fe22 	bl	1765c <bt_conn_unref>
	}
}
   16a18:	b004      	add	sp, #16
   16a1a:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16a1c:	2205      	movs	r2, #5
   16a1e:	4629      	mov	r1, r5
   16a20:	7820      	ldrb	r0, [r4, #0]
   16a22:	f001 f927 	bl	17c74 <bt_conn_lookup_state_le>
   16a26:	4604      	mov	r4, r0
   16a28:	e7ed      	b.n	16a06 <le_adv_stop_free_conn+0x3e>
   16a2a:	bf00      	nop
   16a2c:	0002f550 	.word	0x0002f550

00016a30 <bt_le_ext_adv_foreach>:
{
   16a30:	b508      	push	{r3, lr}
   16a32:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   16a34:	4801      	ldr	r0, [pc, #4]	; (16a3c <bt_le_ext_adv_foreach+0xc>)
   16a36:	4798      	blx	r3
}
   16a38:	bd08      	pop	{r3, pc}
   16a3a:	bf00      	nop
   16a3c:	200002c0 	.word	0x200002c0

00016a40 <bt_le_adv_lookup_legacy>:
}
   16a40:	4800      	ldr	r0, [pc, #0]	; (16a44 <bt_le_adv_lookup_legacy+0x4>)
   16a42:	4770      	bx	lr
   16a44:	200002c0 	.word	0x200002c0

00016a48 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   16a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a4c:	b08f      	sub	sp, #60	; 0x3c
   16a4e:	9205      	str	r2, [sp, #20]
   16a50:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   16a52:	2300      	movs	r3, #0
   16a54:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   16a56:	690f      	ldr	r7, [r1, #16]
   16a58:	ebb7 0b03 	subs.w	fp, r7, r3
   16a5c:	bf18      	it	ne
   16a5e:	f04f 0b01 	movne.w	fp, #1
   16a62:	f3bf 8f5b 	dmb	ish
   16a66:	4bc4      	ldr	r3, [pc, #784]	; (16d78 <bt_le_adv_start_legacy+0x330>)
   16a68:	681b      	ldr	r3, [r3, #0]
   16a6a:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16a6e:	f013 0f02 	tst.w	r3, #2
   16a72:	f000 81ae 	beq.w	16dd2 <bt_le_adv_start_legacy+0x38a>
   16a76:	4605      	mov	r5, r0
   16a78:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   16a7a:	4608      	mov	r0, r1
   16a7c:	f014 fbd6 	bl	2b22c <valid_adv_param>
   16a80:	2800      	cmp	r0, #0
   16a82:	f000 81a9 	beq.w	16dd8 <bt_le_adv_start_legacy+0x390>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   16a86:	4620      	mov	r0, r4
   16a88:	f014 fac0 	bl	2b00c <bt_id_adv_random_addr_check>
   16a8c:	4682      	mov	sl, r0
   16a8e:	2800      	cmp	r0, #0
   16a90:	f000 81a5 	beq.w	16dde <bt_le_adv_start_legacy+0x396>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16a94:	f105 0610 	add.w	r6, r5, #16
   16a98:	f3bf 8f5b 	dmb	ish
   16a9c:	692b      	ldr	r3, [r5, #16]
   16a9e:	f3bf 8f5b 	dmb	ish
   16aa2:	f013 0f40 	tst.w	r3, #64	; 0x40
   16aa6:	f040 819d 	bne.w	16de4 <bt_le_adv_start_legacy+0x39c>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   16aaa:	220f      	movs	r2, #15
   16aac:	2100      	movs	r1, #0
   16aae:	a808      	add	r0, sp, #32
   16ab0:	f013 ff19 	bl	2a8e6 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   16ab4:	68a3      	ldr	r3, [r4, #8]
   16ab6:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   16aba:	68e3      	ldr	r3, [r4, #12]
   16abc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   16ac0:	f8d4 9004 	ldr.w	r9, [r4, #4]
   16ac4:	4648      	mov	r0, r9
   16ac6:	f014 fada 	bl	2b07e <get_adv_channel_map>
   16aca:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   16ace:	4648      	mov	r0, r9
   16ad0:	f014 fad3 	bl	2b07a <get_filter_policy>
   16ad4:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   16ad8:	782a      	ldrb	r2, [r5, #0]
   16ada:	7823      	ldrb	r3, [r4, #0]
   16adc:	429a      	cmp	r2, r3
   16ade:	d00c      	beq.n	16afa <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16ae0:	4ba5      	ldr	r3, [pc, #660]	; (16d78 <bt_le_adv_start_legacy+0x330>)
   16ae2:	f3bf 8f5b 	dmb	ish
   16ae6:	e853 2f00 	ldrex	r2, [r3]
   16aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   16aee:	e843 2100 	strex	r1, r2, [r3]
   16af2:	2900      	cmp	r1, #0
   16af4:	d1f7      	bne.n	16ae6 <bt_le_adv_start_legacy+0x9e>
   16af6:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   16afa:	7823      	ldrb	r3, [r4, #0]
   16afc:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   16afe:	4a9f      	ldr	r2, [pc, #636]	; (16d7c <bt_le_adv_start_legacy+0x334>)
   16b00:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   16b04:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   16b08:	465a      	mov	r2, fp
   16b0a:	6861      	ldr	r1, [r4, #4]
   16b0c:	4628      	mov	r0, r5
   16b0e:	f7ff fe17 	bl	16740 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   16b12:	4681      	mov	r9, r0
   16b14:	2800      	cmp	r0, #0
   16b16:	f040 80ed 	bne.w	16cf4 <bt_le_adv_start_legacy+0x2ac>
		return err;
	}

	if (dir_adv) {
   16b1a:	b1ef      	cbz	r7, 16b58 <bt_le_adv_start_legacy+0x110>
	memcpy(dst, src, sizeof(*dst));
   16b1c:	2207      	movs	r2, #7
   16b1e:	6921      	ldr	r1, [r4, #16]
   16b20:	f105 0009 	add.w	r0, r5, #9
   16b24:	f013 febb 	bl	2a89e <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   16b28:	4620      	mov	r0, r4
   16b2a:	f014 fb90 	bl	2b24e <get_adv_name_type_param>
   16b2e:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16b30:	6863      	ldr	r3, [r4, #4]
   16b32:	f013 0f01 	tst.w	r3, #1
   16b36:	d022      	beq.n	16b7e <bt_le_adv_start_legacy+0x136>
		if (dir_adv) {
   16b38:	b1ef      	cbz	r7, 16b76 <bt_le_adv_start_legacy+0x12e>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   16b3a:	f013 0f10 	tst.w	r3, #16
   16b3e:	d016      	beq.n	16b6e <bt_le_adv_start_legacy+0x126>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   16b40:	2304      	movs	r3, #4
   16b42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16b46:	2207      	movs	r2, #7
   16b48:	6921      	ldr	r1, [r4, #16]
   16b4a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   16b4e:	f013 fea6 	bl	2a89e <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   16b52:	f04f 0a00 	mov.w	sl, #0
}
   16b56:	e01a      	b.n	16b8e <bt_le_adv_start_legacy+0x146>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   16b58:	2300      	movs	r3, #0
   16b5a:	930c      	str	r3, [sp, #48]	; 0x30
   16b5c:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
	memcpy(dst, src, sizeof(*dst));
   16b60:	2207      	movs	r2, #7
   16b62:	a90c      	add	r1, sp, #48	; 0x30
   16b64:	f105 0009 	add.w	r0, r5, #9
   16b68:	f013 fe99 	bl	2a89e <memcpy>
   16b6c:	e7dc      	b.n	16b28 <bt_le_adv_start_legacy+0xe0>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   16b6e:	2301      	movs	r3, #1
   16b70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16b74:	e7e7      	b.n	16b46 <bt_le_adv_start_legacy+0xfe>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   16b76:	2300      	movs	r3, #0
   16b78:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16b7c:	e007      	b.n	16b8e <bt_le_adv_start_legacy+0x146>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   16b7e:	f413 7f00 	tst.w	r3, #512	; 0x200
   16b82:	d101      	bne.n	16b88 <bt_le_adv_start_legacy+0x140>
   16b84:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16b86:	b35b      	cbz	r3, 16be0 <bt_le_adv_start_legacy+0x198>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   16b88:	2302      	movs	r3, #2
   16b8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   16b8e:	210f      	movs	r1, #15
   16b90:	f242 0006 	movw	r0, #8198	; 0x2006
   16b94:	f7fe fa42 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   16b98:	4681      	mov	r9, r0
   16b9a:	2800      	cmp	r0, #0
   16b9c:	f000 8125 	beq.w	16dea <bt_le_adv_start_legacy+0x3a2>
   16ba0:	220f      	movs	r2, #15
   16ba2:	a908      	add	r1, sp, #32
   16ba4:	3008      	adds	r0, #8
   16ba6:	f016 ff92 	bl	2dace <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   16baa:	2200      	movs	r2, #0
   16bac:	4649      	mov	r1, r9
   16bae:	f242 0006 	movw	r0, #8198	; 0x2006
   16bb2:	f7fe fa7f 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   16bb6:	4681      	mov	r9, r0
   16bb8:	2800      	cmp	r0, #0
   16bba:	f040 809b 	bne.w	16cf4 <bt_le_adv_start_legacy+0x2ac>
		return err;
	}

	if (!dir_adv) {
   16bbe:	b1bf      	cbz	r7, 16bf0 <bt_le_adv_start_legacy+0x1a8>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16bc0:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16bc2:	f013 0f01 	tst.w	r3, #1
   16bc6:	d02b      	beq.n	16c20 <bt_le_adv_start_legacy+0x1d8>
		err = le_adv_start_add_conn(adv, &conn);
   16bc8:	a907      	add	r1, sp, #28
   16bca:	4628      	mov	r0, r5
   16bcc:	f7ff feb2 	bl	16934 <le_adv_start_add_conn>
		if (err) {
   16bd0:	b330      	cbz	r0, 16c20 <bt_le_adv_start_legacy+0x1d8>
			if (err == -ENOMEM && !dir_adv &&
   16bd2:	f110 0f0c 	cmn.w	r0, #12
   16bd6:	f040 810b 	bne.w	16df0 <bt_le_adv_start_legacy+0x3a8>
   16bda:	b1df      	cbz	r7, 16c14 <bt_le_adv_start_legacy+0x1cc>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   16bdc:	4681      	mov	r9, r0
   16bde:	e089      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   16be0:	2802      	cmp	r0, #2
   16be2:	d0d1      	beq.n	16b88 <bt_le_adv_start_legacy+0x140>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16be4:	2303      	movs	r3, #3
   16be6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   16bea:	f04f 0a00 	mov.w	sl, #0
   16bee:	e7ce      	b.n	16b8e <bt_le_adv_start_legacy+0x146>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   16bf0:	f8cd b00c 	str.w	fp, [sp, #12]
   16bf4:	f8cd a008 	str.w	sl, [sp, #8]
   16bf8:	2300      	movs	r3, #0
   16bfa:	9301      	str	r3, [sp, #4]
   16bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16bfe:	9300      	str	r3, [sp, #0]
   16c00:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16c02:	4642      	mov	r2, r8
   16c04:	9905      	ldr	r1, [sp, #20]
   16c06:	4628      	mov	r0, r5
   16c08:	f014 fa85 	bl	2b116 <le_adv_update>
		if (err) {
   16c0c:	2800      	cmp	r0, #0
   16c0e:	d0d7      	beq.n	16bc0 <bt_le_adv_start_legacy+0x178>
			return err;
   16c10:	4681      	mov	r9, r0
   16c12:	e06f      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   16c14:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   16c16:	f012 0f02 	tst.w	r2, #2
   16c1a:	d00c      	beq.n	16c36 <bt_le_adv_start_legacy+0x1ee>
			return err;
   16c1c:	4681      	mov	r9, r0
   16c1e:	e069      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   16c20:	2101      	movs	r1, #1
   16c22:	4628      	mov	r0, r5
   16c24:	f014 fb4f 	bl	2b2c6 <bt_le_adv_set_enable>
	if (err) {
   16c28:	4605      	mov	r5, r0
   16c2a:	2800      	cmp	r0, #0
   16c2c:	d166      	bne.n	16cfc <bt_le_adv_start_legacy+0x2b4>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16c2e:	9807      	ldr	r0, [sp, #28]
   16c30:	b108      	cbz	r0, 16c36 <bt_le_adv_start_legacy+0x1ee>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   16c32:	f000 fd13 	bl	1765c <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16c36:	2f00      	cmp	r7, #0
   16c38:	d06e      	beq.n	16d18 <bt_le_adv_start_legacy+0x2d0>
   16c3a:	464b      	mov	r3, r9
	if (val) {
   16c3c:	f013 0f01 	tst.w	r3, #1
   16c40:	d072      	beq.n	16d28 <bt_le_adv_start_legacy+0x2e0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c42:	f3bf 8f5b 	dmb	ish
   16c46:	e856 3f00 	ldrex	r3, [r6]
   16c4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   16c4e:	e846 3200 	strex	r2, r3, [r6]
   16c52:	2a00      	cmp	r2, #0
   16c54:	d1f7      	bne.n	16c46 <bt_le_adv_start_legacy+0x1fe>
   16c56:	f3bf 8f5b 	dmb	ish
   16c5a:	f1bb 0f01 	cmp.w	fp, #1
   16c5e:	d170      	bne.n	16d42 <bt_le_adv_start_legacy+0x2fa>
   16c60:	f3bf 8f5b 	dmb	ish
   16c64:	e856 3f00 	ldrex	r3, [r6]
   16c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16c6c:	e846 3200 	strex	r2, r3, [r6]
   16c70:	2a00      	cmp	r2, #0
   16c72:	d1f7      	bne.n	16c64 <bt_le_adv_start_legacy+0x21c>
   16c74:	f3bf 8f5b 	dmb	ish
   16c78:	f1bb 0f02 	cmp.w	fp, #2
   16c7c:	d16e      	bne.n	16d5c <bt_le_adv_start_legacy+0x314>
   16c7e:	f3bf 8f5b 	dmb	ish
   16c82:	e856 3f00 	ldrex	r3, [r6]
   16c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16c8a:	e846 3200 	strex	r2, r3, [r6]
   16c8e:	2a00      	cmp	r2, #0
   16c90:	d1f7      	bne.n	16c82 <bt_le_adv_start_legacy+0x23a>
   16c92:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   16c96:	6863      	ldr	r3, [r4, #4]
   16c98:	f013 0f01 	tst.w	r3, #1
   16c9c:	d072      	beq.n	16d84 <bt_le_adv_start_legacy+0x33c>
   16c9e:	f3bf 8f5b 	dmb	ish
   16ca2:	e856 3f00 	ldrex	r3, [r6]
   16ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   16caa:	e846 3200 	strex	r2, r3, [r6]
   16cae:	2a00      	cmp	r2, #0
   16cb0:	d1f7      	bne.n	16ca2 <bt_le_adv_start_legacy+0x25a>
   16cb2:	f3bf 8f5b 	dmb	ish
   16cb6:	f1ba 0f00 	cmp.w	sl, #0
   16cba:	d070      	beq.n	16d9e <bt_le_adv_start_legacy+0x356>
   16cbc:	f3bf 8f5b 	dmb	ish
   16cc0:	e856 3f00 	ldrex	r3, [r6]
   16cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   16cc8:	e846 3200 	strex	r2, r3, [r6]
   16ccc:	2a00      	cmp	r2, #0
   16cce:	d1f7      	bne.n	16cc0 <bt_le_adv_start_legacy+0x278>
   16cd0:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   16cd4:	6863      	ldr	r3, [r4, #4]
   16cd6:	f013 0f04 	tst.w	r3, #4
   16cda:	d06d      	beq.n	16db8 <bt_le_adv_start_legacy+0x370>
   16cdc:	f3bf 8f5b 	dmb	ish
   16ce0:	e856 3f00 	ldrex	r3, [r6]
   16ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   16ce8:	e846 3200 	strex	r2, r3, [r6]
   16cec:	2a00      	cmp	r2, #0
   16cee:	d1f7      	bne.n	16ce0 <bt_le_adv_start_legacy+0x298>
   16cf0:	f3bf 8f5b 	dmb	ish

	return 0;
}
   16cf4:	4648      	mov	r0, r9
   16cf6:	b00f      	add	sp, #60	; 0x3c
   16cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("Failed to start advertiser");
   16cfc:	2145      	movs	r1, #69	; 0x45
   16cfe:	4820      	ldr	r0, [pc, #128]	; (16d80 <bt_le_adv_start_legacy+0x338>)
   16d00:	f011 fec0 	bl	28a84 <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16d04:	9807      	ldr	r0, [sp, #28]
   16d06:	b128      	cbz	r0, 16d14 <bt_le_adv_start_legacy+0x2cc>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16d08:	2100      	movs	r1, #0
   16d0a:	f000 fce3 	bl	176d4 <bt_conn_set_state>
			bt_conn_unref(conn);
   16d0e:	9807      	ldr	r0, [sp, #28]
   16d10:	f000 fca4 	bl	1765c <bt_conn_unref>
		return err;
   16d14:	46a9      	mov	r9, r5
   16d16:	e7ed      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   16d18:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16d1a:	f013 0f02 	tst.w	r3, #2
   16d1e:	d001      	beq.n	16d24 <bt_le_adv_start_legacy+0x2dc>
   16d20:	464b      	mov	r3, r9
   16d22:	e78b      	b.n	16c3c <bt_le_adv_start_legacy+0x1f4>
   16d24:	2301      	movs	r3, #1
   16d26:	e789      	b.n	16c3c <bt_le_adv_start_legacy+0x1f4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16d28:	f3bf 8f5b 	dmb	ish
   16d2c:	e856 3f00 	ldrex	r3, [r6]
   16d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   16d34:	e846 3200 	strex	r2, r3, [r6]
   16d38:	2a00      	cmp	r2, #0
   16d3a:	d1f7      	bne.n	16d2c <bt_le_adv_start_legacy+0x2e4>
   16d3c:	f3bf 8f5b 	dmb	ish
   16d40:	e78b      	b.n	16c5a <bt_le_adv_start_legacy+0x212>
   16d42:	f3bf 8f5b 	dmb	ish
   16d46:	e856 3f00 	ldrex	r3, [r6]
   16d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16d4e:	e846 3200 	strex	r2, r3, [r6]
   16d52:	2a00      	cmp	r2, #0
   16d54:	d1f7      	bne.n	16d46 <bt_le_adv_start_legacy+0x2fe>
   16d56:	f3bf 8f5b 	dmb	ish
   16d5a:	e78d      	b.n	16c78 <bt_le_adv_start_legacy+0x230>
   16d5c:	f3bf 8f5b 	dmb	ish
   16d60:	e856 3f00 	ldrex	r3, [r6]
   16d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   16d68:	e846 3200 	strex	r2, r3, [r6]
   16d6c:	2a00      	cmp	r2, #0
   16d6e:	d1f7      	bne.n	16d60 <bt_le_adv_start_legacy+0x318>
   16d70:	f3bf 8f5b 	dmb	ish
   16d74:	e78f      	b.n	16c96 <bt_le_adv_start_legacy+0x24e>
   16d76:	bf00      	nop
   16d78:	20000374 	.word	0x20000374
   16d7c:	200002a8 	.word	0x200002a8
   16d80:	00031234 	.word	0x00031234
   16d84:	f3bf 8f5b 	dmb	ish
   16d88:	e856 3f00 	ldrex	r3, [r6]
   16d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   16d90:	e846 3200 	strex	r2, r3, [r6]
   16d94:	2a00      	cmp	r2, #0
   16d96:	d1f7      	bne.n	16d88 <bt_le_adv_start_legacy+0x340>
   16d98:	f3bf 8f5b 	dmb	ish
   16d9c:	e78b      	b.n	16cb6 <bt_le_adv_start_legacy+0x26e>
   16d9e:	f3bf 8f5b 	dmb	ish
   16da2:	e856 3f00 	ldrex	r3, [r6]
   16da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   16daa:	e846 3200 	strex	r2, r3, [r6]
   16dae:	2a00      	cmp	r2, #0
   16db0:	d1f7      	bne.n	16da2 <bt_le_adv_start_legacy+0x35a>
   16db2:	f3bf 8f5b 	dmb	ish
   16db6:	e78d      	b.n	16cd4 <bt_le_adv_start_legacy+0x28c>
   16db8:	f3bf 8f5b 	dmb	ish
   16dbc:	e856 3f00 	ldrex	r3, [r6]
   16dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   16dc4:	e846 3200 	strex	r2, r3, [r6]
   16dc8:	2a00      	cmp	r2, #0
   16dca:	d1f7      	bne.n	16dbc <bt_le_adv_start_legacy+0x374>
   16dcc:	f3bf 8f5b 	dmb	ish
}
   16dd0:	e790      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
		return -EAGAIN;
   16dd2:	f06f 090a 	mvn.w	r9, #10
   16dd6:	e78d      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
		return -EINVAL;
   16dd8:	f06f 0915 	mvn.w	r9, #21
   16ddc:	e78a      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
		return -EINVAL;
   16dde:	f06f 0915 	mvn.w	r9, #21
   16de2:	e787      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
		return -EALREADY;
   16de4:	f06f 0977 	mvn.w	r9, #119	; 0x77
   16de8:	e784      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
		return -ENOBUFS;
   16dea:	f06f 0968 	mvn.w	r9, #104	; 0x68
   16dee:	e781      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>
			return err;
   16df0:	4681      	mov	r9, r0
   16df2:	e77f      	b.n	16cf4 <bt_le_adv_start_legacy+0x2ac>

00016df4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   16df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16df8:	b082      	sub	sp, #8
   16dfa:	4606      	mov	r6, r0
   16dfc:	460c      	mov	r4, r1
   16dfe:	4615      	mov	r5, r2
   16e00:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   16e02:	f7ff fcf1 	bl	167e8 <adv_new_legacy>
	int err;

	if (!adv) {
   16e06:	b1f8      	cbz	r0, 16e48 <bt_le_adv_start+0x54>
   16e08:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16e0a:	9b08      	ldr	r3, [sp, #32]
   16e0c:	9301      	str	r3, [sp, #4]
   16e0e:	9700      	str	r7, [sp, #0]
   16e10:	462b      	mov	r3, r5
   16e12:	4622      	mov	r2, r4
   16e14:	4631      	mov	r1, r6
   16e16:	f7ff fe17 	bl	16a48 <bt_le_adv_start_legacy>
   16e1a:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   16e1c:	4629      	mov	r1, r5
   16e1e:	4620      	mov	r0, r4
   16e20:	f014 f90d 	bl	2b03e <ad_is_limited>
   16e24:	b918      	cbnz	r0, 16e2e <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   16e26:	4630      	mov	r0, r6
   16e28:	b002      	add	sp, #8
   16e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   16e2e:	f108 0818 	add.w	r8, r8, #24
   16e32:	4907      	ldr	r1, [pc, #28]	; (16e50 <bt_le_adv_start+0x5c>)
   16e34:	4640      	mov	r0, r8
   16e36:	f00c f95b 	bl	230f0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   16e3a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16e3e:	2300      	movs	r3, #0
   16e40:	4640      	mov	r0, r8
   16e42:	f00c fa49 	bl	232d8 <k_work_reschedule>
   16e46:	e7ee      	b.n	16e26 <bt_le_adv_start+0x32>
		return -ENOMEM;
   16e48:	f06f 060b 	mvn.w	r6, #11
   16e4c:	e7eb      	b.n	16e26 <bt_le_adv_start+0x32>
   16e4e:	bf00      	nop
   16e50:	00016ec9 	.word	0x00016ec9

00016e54 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16e54:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16e56:	f7ff fdf3 	bl	16a40 <bt_le_adv_lookup_legacy>
   16e5a:	4604      	mov	r4, r0
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   16e5c:	f014 fa37 	bl	2b2ce <bt_le_lim_adv_cancel_timeout>

	if (!adv) {
   16e60:	b1c4      	cbz	r4, 16e94 <bt_le_adv_stop+0x40>
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   16e62:	f104 0310 	add.w	r3, r4, #16
   16e66:	f3bf 8f5b 	dmb	ish
   16e6a:	e853 2f00 	ldrex	r2, [r3]
   16e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   16e72:	e843 2100 	strex	r1, r2, [r3]
   16e76:	2900      	cmp	r1, #0
   16e78:	d1f7      	bne.n	16e6a <bt_le_adv_stop+0x16>
   16e7a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e7e:	f3bf 8f5b 	dmb	ish
   16e82:	6923      	ldr	r3, [r4, #16]
   16e84:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16e88:	f3c3 1080 	ubfx	r0, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16e8c:	f013 0f40 	tst.w	r3, #64	; 0x40
   16e90:	d106      	bne.n	16ea0 <bt_le_adv_stop+0x4c>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16e92:	bd10      	pop	{r4, pc}
		BT_ERR("No valid legacy adv");
   16e94:	2145      	movs	r1, #69	; 0x45
   16e96:	480b      	ldr	r0, [pc, #44]	; (16ec4 <bt_le_adv_stop+0x70>)
   16e98:	f011 fdf4 	bl	28a84 <z_log_minimal_printk>
		return 0;
   16e9c:	2000      	movs	r0, #0
   16e9e:	e7f8      	b.n	16e92 <bt_le_adv_stop+0x3e>
   16ea0:	f3bf 8f5b 	dmb	ish
   16ea4:	6923      	ldr	r3, [r4, #16]
   16ea6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16eaa:	f413 7f00 	tst.w	r3, #512	; 0x200
   16eae:	d104      	bne.n	16eba <bt_le_adv_stop+0x66>
		err = bt_le_adv_set_enable_legacy(adv, false);
   16eb0:	2100      	movs	r1, #0
   16eb2:	4620      	mov	r0, r4
   16eb4:	f014 f9df 	bl	2b276 <bt_le_adv_set_enable_legacy>
		if (err) {
   16eb8:	e7eb      	b.n	16e92 <bt_le_adv_stop+0x3e>
		le_adv_stop_free_conn(adv, 0);
   16eba:	2100      	movs	r1, #0
   16ebc:	4620      	mov	r0, r4
   16ebe:	f7ff fd83 	bl	169c8 <le_adv_stop_free_conn>
   16ec2:	e7f5      	b.n	16eb0 <bt_le_adv_stop+0x5c>
   16ec4:	00031254 	.word	0x00031254

00016ec8 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   16ec8:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   16eca:	f7ff ffc3 	bl	16e54 <bt_le_adv_stop>
   16ece:	4602      	mov	r2, r0
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   16ed0:	2157      	movs	r1, #87	; 0x57
   16ed2:	4802      	ldr	r0, [pc, #8]	; (16edc <adv_timeout+0x14>)
   16ed4:	f011 fdd6 	bl	28a84 <z_log_minimal_printk>
}
   16ed8:	bd08      	pop	{r3, pc}
   16eda:	bf00      	nop
   16edc:	00031270 	.word	0x00031270

00016ee0 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   16ee0:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   16ee2:	2240      	movs	r2, #64	; 0x40
   16ee4:	4903      	ldr	r1, [pc, #12]	; (16ef4 <bt_pub_key_is_debug+0x14>)
   16ee6:	f013 fcad 	bl	2a844 <memcmp>
}
   16eea:	fab0 f080 	clz	r0, r0
   16eee:	0940      	lsrs	r0, r0, #5
   16ef0:	bd08      	pop	{r3, pc}
   16ef2:	bf00      	nop
   16ef4:	00031344 	.word	0x00031344

00016ef8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   16ef8:	b538      	push	{r3, r4, r5, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   16efa:	4b42      	ldr	r3, [pc, #264]	; (17004 <bt_pub_key_gen+0x10c>)
   16efc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   16f00:	f003 0306 	and.w	r3, r3, #6
   16f04:	2b06      	cmp	r3, #6
   16f06:	d106      	bne.n	16f16 <bt_pub_key_gen+0x1e>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   16f08:	2800      	cmp	r0, #0
   16f0a:	d077      	beq.n	16ffc <bt_pub_key_gen+0x104>
	return list->head;
   16f0c:	4b3e      	ldr	r3, [pc, #248]	; (17008 <bt_pub_key_gen+0x110>)
   16f0e:	6819      	ldr	r1, [r3, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f10:	b179      	cbz	r1, 16f32 <bt_pub_key_gen+0x3a>
   16f12:	1f0b      	subs	r3, r1, #4
   16f14:	e010      	b.n	16f38 <bt_pub_key_gen+0x40>
		BT_WARN("ECC HCI commands not available");
   16f16:	2157      	movs	r1, #87	; 0x57
   16f18:	483c      	ldr	r0, [pc, #240]	; (1700c <bt_pub_key_gen+0x114>)
   16f1a:	f011 fdb3 	bl	28a84 <z_log_minimal_printk>
		return -ENOTSUP;
   16f1e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   16f22:	e041      	b.n	16fa8 <bt_pub_key_gen+0xb0>
		if (cb == new_cb) {
			BT_WARN("Callback already registered");
   16f24:	2157      	movs	r1, #87	; 0x57
   16f26:	483a      	ldr	r0, [pc, #232]	; (17010 <bt_pub_key_gen+0x118>)
   16f28:	f011 fdac 	bl	28a84 <z_log_minimal_printk>
			return -EALREADY;
   16f2c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   16f30:	e03a      	b.n	16fa8 <bt_pub_key_gen+0xb0>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f32:	460b      	mov	r3, r1
   16f34:	e000      	b.n	16f38 <bt_pub_key_gen+0x40>
   16f36:	4613      	mov	r3, r2
   16f38:	b13b      	cbz	r3, 16f4a <bt_pub_key_gen+0x52>
		if (cb == new_cb) {
   16f3a:	4298      	cmp	r0, r3
   16f3c:	d0f2      	beq.n	16f24 <bt_pub_key_gen+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16f3e:	1d1a      	adds	r2, r3, #4
   16f40:	d0f9      	beq.n	16f36 <bt_pub_key_gen+0x3e>
	return node->next;
   16f42:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f44:	b10b      	cbz	r3, 16f4a <bt_pub_key_gen+0x52>
   16f46:	3b04      	subs	r3, #4
   16f48:	e7f6      	b.n	16f38 <bt_pub_key_gen+0x40>
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   16f4a:	1d02      	adds	r2, r0, #4
	parent->next = child;
   16f4c:	6041      	str	r1, [r0, #4]
	list->head = node;
   16f4e:	4b2e      	ldr	r3, [pc, #184]	; (17008 <bt_pub_key_gen+0x110>)
   16f50:	601a      	str	r2, [r3, #0]
	return list->tail;
   16f52:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   16f54:	b18b      	cbz	r3, 16f7a <bt_pub_key_gen+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16f56:	4b2f      	ldr	r3, [pc, #188]	; (17014 <bt_pub_key_gen+0x11c>)
   16f58:	f3bf 8f5b 	dmb	ish
   16f5c:	e853 2f00 	ldrex	r2, [r3]
   16f60:	f042 0110 	orr.w	r1, r2, #16
   16f64:	e843 1000 	strex	r0, r1, [r3]
   16f68:	2800      	cmp	r0, #0
   16f6a:	d1f7      	bne.n	16f5c <bt_pub_key_gen+0x64>
   16f6c:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16f70:	f012 0f10 	tst.w	r2, #16
   16f74:	d004      	beq.n	16f80 <bt_pub_key_gen+0x88>
		return 0;
   16f76:	2500      	movs	r5, #0
   16f78:	e016      	b.n	16fa8 <bt_pub_key_gen+0xb0>
	list->tail = node;
   16f7a:	4b23      	ldr	r3, [pc, #140]	; (17008 <bt_pub_key_gen+0x110>)
   16f7c:	605a      	str	r2, [r3, #4]
}
   16f7e:	e7ea      	b.n	16f56 <bt_pub_key_gen+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f80:	f3bf 8f5b 	dmb	ish
   16f84:	e853 2f00 	ldrex	r2, [r3]
   16f88:	f022 0208 	bic.w	r2, r2, #8
   16f8c:	e843 2100 	strex	r1, r2, [r3]
   16f90:	2900      	cmp	r1, #0
   16f92:	d1f7      	bne.n	16f84 <bt_pub_key_gen+0x8c>
   16f94:	f3bf 8f5b 	dmb	ish
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   16f98:	2200      	movs	r2, #0
   16f9a:	4611      	mov	r1, r2
   16f9c:	f242 0025 	movw	r0, #8229	; 0x2025
   16fa0:	f7fe f888 	bl	150b4 <bt_hci_cmd_send_sync>
	if (err) {
   16fa4:	4605      	mov	r5, r0
   16fa6:	b908      	cbnz	r0, 16fac <bt_pub_key_gen+0xb4>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   16fa8:	4628      	mov	r0, r5
   16faa:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Sending LE P256 Public Key command failed");
   16fac:	2145      	movs	r1, #69	; 0x45
   16fae:	481a      	ldr	r0, [pc, #104]	; (17018 <bt_pub_key_gen+0x120>)
   16fb0:	f011 fd68 	bl	28a84 <z_log_minimal_printk>
   16fb4:	4b17      	ldr	r3, [pc, #92]	; (17014 <bt_pub_key_gen+0x11c>)
   16fb6:	f3bf 8f5b 	dmb	ish
   16fba:	e853 2f00 	ldrex	r2, [r3]
   16fbe:	f022 0210 	bic.w	r2, r2, #16
   16fc2:	e843 2100 	strex	r1, r2, [r3]
   16fc6:	2900      	cmp	r1, #0
   16fc8:	d1f7      	bne.n	16fba <bt_pub_key_gen+0xc2>
   16fca:	f3bf 8f5b 	dmb	ish
	return list->head;
   16fce:	4b0e      	ldr	r3, [pc, #56]	; (17008 <bt_pub_key_gen+0x110>)
   16fd0:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16fd2:	b13c      	cbz	r4, 16fe4 <bt_pub_key_gen+0xec>
   16fd4:	3c04      	subs	r4, #4
   16fd6:	e005      	b.n	16fe4 <bt_pub_key_gen+0xec>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16fd8:	f114 0f04 	cmn.w	r4, #4
   16fdc:	d009      	beq.n	16ff2 <bt_pub_key_gen+0xfa>
	return node->next;
   16fde:	6864      	ldr	r4, [r4, #4]
   16fe0:	b13c      	cbz	r4, 16ff2 <bt_pub_key_gen+0xfa>
   16fe2:	3c04      	subs	r4, #4
   16fe4:	b12c      	cbz	r4, 16ff2 <bt_pub_key_gen+0xfa>
			if (cb->func) {
   16fe6:	6823      	ldr	r3, [r4, #0]
   16fe8:	2b00      	cmp	r3, #0
   16fea:	d0f5      	beq.n	16fd8 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   16fec:	2000      	movs	r0, #0
   16fee:	4798      	blx	r3
   16ff0:	e7f2      	b.n	16fd8 <bt_pub_key_gen+0xe0>
	list->head = NULL;
   16ff2:	4b05      	ldr	r3, [pc, #20]	; (17008 <bt_pub_key_gen+0x110>)
   16ff4:	2200      	movs	r2, #0
   16ff6:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   16ff8:	605a      	str	r2, [r3, #4]
		return err;
   16ffa:	e7d5      	b.n	16fa8 <bt_pub_key_gen+0xb0>
		return -EINVAL;
   16ffc:	f06f 0515 	mvn.w	r5, #21
   17000:	e7d2      	b.n	16fa8 <bt_pub_key_gen+0xb0>
   17002:	bf00      	nop
   17004:	200002a8 	.word	0x200002a8
   17008:	200027b0 	.word	0x200027b0
   1700c:	0003129c 	.word	0x0003129c
   17010:	000312c0 	.word	0x000312c0
   17014:	20000374 	.word	0x20000374
   17018:	000312e4 	.word	0x000312e4

0001701c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1701c:	f3bf 8f5b 	dmb	ish
   17020:	4b05      	ldr	r3, [pc, #20]	; (17038 <bt_pub_key_get+0x1c>)
   17022:	681b      	ldr	r3, [r3, #0]
   17024:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		return debug_public_key;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17028:	f013 0f08 	tst.w	r3, #8
   1702c:	d001      	beq.n	17032 <bt_pub_key_get+0x16>
		return pub_key;
   1702e:	4803      	ldr	r0, [pc, #12]	; (1703c <bt_pub_key_get+0x20>)
	}

	return NULL;
}
   17030:	4770      	bx	lr
	return NULL;
   17032:	2000      	movs	r0, #0
   17034:	4770      	bx	lr
   17036:	bf00      	nop
   17038:	20000374 	.word	0x20000374
   1703c:	20002770 	.word	0x20002770

00017040 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   17040:	b510      	push	{r4, lr}
	int err;

	if (dh_key_cb == cb) {
   17042:	4b18      	ldr	r3, [pc, #96]	; (170a4 <bt_dh_key_gen+0x64>)
   17044:	681b      	ldr	r3, [r3, #0]
   17046:	428b      	cmp	r3, r1
   17048:	d026      	beq.n	17098 <bt_dh_key_gen+0x58>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1704a:	b9cb      	cbnz	r3, 17080 <bt_dh_key_gen+0x40>
   1704c:	f3bf 8f5b 	dmb	ish
   17050:	4b15      	ldr	r3, [pc, #84]	; (170a8 <bt_dh_key_gen+0x68>)
   17052:	681b      	ldr	r3, [r3, #0]
   17054:	f3bf 8f5b 	dmb	ish
   17058:	f013 0f10 	tst.w	r3, #16
   1705c:	d110      	bne.n	17080 <bt_dh_key_gen+0x40>
   1705e:	f3bf 8f5b 	dmb	ish
   17062:	4b11      	ldr	r3, [pc, #68]	; (170a8 <bt_dh_key_gen+0x68>)
   17064:	681b      	ldr	r3, [r3, #0]
   17066:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1706a:	f013 0f08 	tst.w	r3, #8
   1706e:	d016      	beq.n	1709e <bt_dh_key_gen+0x5e>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
   17070:	4b0c      	ldr	r3, [pc, #48]	; (170a4 <bt_dh_key_gen+0x64>)
   17072:	6019      	str	r1, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		err = hci_generate_dhkey_v2(remote_pk,
					    BT_HCI_LE_KEY_TYPE_DEBUG);
	} else {
		err = hci_generate_dhkey_v1(remote_pk);
   17074:	f014 f982 	bl	2b37c <hci_generate_dhkey_v1>
	}

	if (err) {
   17078:	4604      	mov	r4, r0
   1707a:	b920      	cbnz	r0, 17086 <bt_dh_key_gen+0x46>
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1707c:	4620      	mov	r0, r4
   1707e:	bd10      	pop	{r4, pc}
		return -EBUSY;
   17080:	f06f 040f 	mvn.w	r4, #15
   17084:	e7fa      	b.n	1707c <bt_dh_key_gen+0x3c>
		dh_key_cb = NULL;
   17086:	4b07      	ldr	r3, [pc, #28]	; (170a4 <bt_dh_key_gen+0x64>)
   17088:	2200      	movs	r2, #0
   1708a:	601a      	str	r2, [r3, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1708c:	4602      	mov	r2, r0
   1708e:	2157      	movs	r1, #87	; 0x57
   17090:	4806      	ldr	r0, [pc, #24]	; (170ac <bt_dh_key_gen+0x6c>)
   17092:	f011 fcf7 	bl	28a84 <z_log_minimal_printk>
		return err;
   17096:	e7f1      	b.n	1707c <bt_dh_key_gen+0x3c>
		return -EALREADY;
   17098:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1709c:	e7ee      	b.n	1707c <bt_dh_key_gen+0x3c>
		return -EADDRNOTAVAIL;
   1709e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   170a2:	e7eb      	b.n	1707c <bt_dh_key_gen+0x3c>
   170a4:	2000276c 	.word	0x2000276c
   170a8:	20000374 	.word	0x20000374
   170ac:	00031314 	.word	0x00031314

000170b0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   170b0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   170b2:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   170b4:	4b1e      	ldr	r3, [pc, #120]	; (17130 <bt_hci_evt_le_pkey_complete+0x80>)
   170b6:	f3bf 8f5b 	dmb	ish
   170ba:	e853 2f00 	ldrex	r2, [r3]
   170be:	f022 0210 	bic.w	r2, r2, #16
   170c2:	e843 2100 	strex	r1, r2, [r3]
   170c6:	2900      	cmp	r1, #0
   170c8:	d1f7      	bne.n	170ba <bt_hci_evt_le_pkey_complete+0xa>
   170ca:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   170ce:	782b      	ldrb	r3, [r5, #0]
   170d0:	b123      	cbz	r3, 170dc <bt_hci_evt_le_pkey_complete+0x2c>
	return list->head;
   170d2:	4b18      	ldr	r3, [pc, #96]	; (17134 <bt_hci_evt_le_pkey_complete+0x84>)
   170d4:	681c      	ldr	r4, [r3, #0]
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   170d6:	b1dc      	cbz	r4, 17110 <bt_hci_evt_le_pkey_complete+0x60>
   170d8:	3c04      	subs	r4, #4
   170da:	e019      	b.n	17110 <bt_hci_evt_le_pkey_complete+0x60>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   170dc:	2240      	movs	r2, #64	; 0x40
   170de:	1c69      	adds	r1, r5, #1
   170e0:	4815      	ldr	r0, [pc, #84]	; (17138 <bt_hci_evt_le_pkey_complete+0x88>)
   170e2:	f013 fbdc 	bl	2a89e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   170e6:	4b12      	ldr	r3, [pc, #72]	; (17130 <bt_hci_evt_le_pkey_complete+0x80>)
   170e8:	f3bf 8f5b 	dmb	ish
   170ec:	e853 2f00 	ldrex	r2, [r3]
   170f0:	f042 0208 	orr.w	r2, r2, #8
   170f4:	e843 2100 	strex	r1, r2, [r3]
   170f8:	2900      	cmp	r1, #0
   170fa:	d1f7      	bne.n	170ec <bt_hci_evt_le_pkey_complete+0x3c>
   170fc:	f3bf 8f5b 	dmb	ish
}
   17100:	e7e7      	b.n	170d2 <bt_hci_evt_le_pkey_complete+0x22>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   17102:	2000      	movs	r0, #0
   17104:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   17106:	1d23      	adds	r3, r4, #4
   17108:	d00b      	beq.n	17122 <bt_hci_evt_le_pkey_complete+0x72>
	return node->next;
   1710a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1710c:	b15c      	cbz	r4, 17126 <bt_hci_evt_le_pkey_complete+0x76>
   1710e:	3c04      	subs	r4, #4
   17110:	b14c      	cbz	r4, 17126 <bt_hci_evt_le_pkey_complete+0x76>
		if (cb->func) {
   17112:	6823      	ldr	r3, [r4, #0]
   17114:	2b00      	cmp	r3, #0
   17116:	d0f6      	beq.n	17106 <bt_hci_evt_le_pkey_complete+0x56>
			cb->func(evt->status ? NULL : pub_key);
   17118:	782a      	ldrb	r2, [r5, #0]
   1711a:	2a00      	cmp	r2, #0
   1711c:	d1f1      	bne.n	17102 <bt_hci_evt_le_pkey_complete+0x52>
   1711e:	4806      	ldr	r0, [pc, #24]	; (17138 <bt_hci_evt_le_pkey_complete+0x88>)
   17120:	e7f0      	b.n	17104 <bt_hci_evt_le_pkey_complete+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17122:	461c      	mov	r4, r3
   17124:	e7f4      	b.n	17110 <bt_hci_evt_le_pkey_complete+0x60>
	list->head = NULL;
   17126:	4b03      	ldr	r3, [pc, #12]	; (17134 <bt_hci_evt_le_pkey_complete+0x84>)
   17128:	2200      	movs	r2, #0
   1712a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1712c:	605a      	str	r2, [r3, #4]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1712e:	bd38      	pop	{r3, r4, r5, pc}
   17130:	20000374 	.word	0x20000374
   17134:	200027b0 	.word	0x200027b0
   17138:	20002770 	.word	0x20002770

0001713c <bt_hci_evt_le_dhkey_complete>:

void bt_hci_evt_le_dhkey_complete(struct net_buf *buf)
{
   1713c:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1713e:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   17140:	4b06      	ldr	r3, [pc, #24]	; (1715c <bt_hci_evt_le_dhkey_complete+0x20>)
   17142:	681b      	ldr	r3, [r3, #0]
   17144:	b133      	cbz	r3, 17154 <bt_hci_evt_le_dhkey_complete+0x18>
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   17146:	4a05      	ldr	r2, [pc, #20]	; (1715c <bt_hci_evt_le_dhkey_complete+0x20>)
   17148:	2100      	movs	r1, #0
   1714a:	6011      	str	r1, [r2, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1714c:	7802      	ldrb	r2, [r0, #0]
   1714e:	b912      	cbnz	r2, 17156 <bt_hci_evt_le_dhkey_complete+0x1a>
   17150:	3001      	adds	r0, #1
   17152:	4798      	blx	r3
	}
}
   17154:	bd08      	pop	{r3, pc}
		cb(evt->status ? NULL : evt->dhkey);
   17156:	2000      	movs	r0, #0
   17158:	e7fb      	b.n	17152 <bt_hci_evt_le_dhkey_complete+0x16>
   1715a:	bf00      	nop
   1715c:	2000276c 	.word	0x2000276c

00017160 <tx_free>:
		return "(unknown)";
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
   17160:	b508      	push	{r3, lr}
   17162:	4601      	mov	r1, r0
	tx->cb = NULL;
   17164:	2300      	movs	r3, #0
   17166:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   17168:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1716a:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1716c:	4801      	ldr	r0, [pc, #4]	; (17174 <tx_free+0x14>)
   1716e:	f017 fd99 	bl	2eca4 <k_queue_append>
}
   17172:	bd08      	pop	{r3, pc}
   17174:	2000089c 	.word	0x2000089c

00017178 <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   17178:	b570      	push	{r4, r5, r6, lr}
   1717a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1717c:	4b14      	ldr	r3, [pc, #80]	; (171d0 <notify_disconnected+0x58>)
   1717e:	681c      	ldr	r4, [r3, #0]
   17180:	e000      	b.n	17184 <notify_disconnected+0xc>
   17182:	69a4      	ldr	r4, [r4, #24]
   17184:	b134      	cbz	r4, 17194 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   17186:	6863      	ldr	r3, [r4, #4]
   17188:	2b00      	cmp	r3, #0
   1718a:	d0fa      	beq.n	17182 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   1718c:	7b29      	ldrb	r1, [r5, #12]
   1718e:	4628      	mov	r0, r5
   17190:	4798      	blx	r3
   17192:	e7f6      	b.n	17182 <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17194:	4c0f      	ldr	r4, [pc, #60]	; (171d4 <notify_disconnected+0x5c>)
   17196:	e000      	b.n	1719a <notify_disconnected+0x22>
   17198:	341c      	adds	r4, #28
   1719a:	4b0f      	ldr	r3, [pc, #60]	; (171d8 <notify_disconnected+0x60>)
   1719c:	429c      	cmp	r4, r3
   1719e:	d809      	bhi.n	171b4 <notify_disconnected+0x3c>
   171a0:	4b0d      	ldr	r3, [pc, #52]	; (171d8 <notify_disconnected+0x60>)
   171a2:	429c      	cmp	r4, r3
   171a4:	d213      	bcs.n	171ce <notify_disconnected+0x56>
		if (cb->disconnected) {
   171a6:	6863      	ldr	r3, [r4, #4]
   171a8:	2b00      	cmp	r3, #0
   171aa:	d0f5      	beq.n	17198 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   171ac:	7b29      	ldrb	r1, [r5, #12]
   171ae:	4628      	mov	r0, r5
   171b0:	4798      	blx	r3
   171b2:	e7f1      	b.n	17198 <notify_disconnected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   171b4:	4e09      	ldr	r6, [pc, #36]	; (171dc <notify_disconnected+0x64>)
   171b6:	f240 5212 	movw	r2, #1298	; 0x512
   171ba:	4631      	mov	r1, r6
   171bc:	4808      	ldr	r0, [pc, #32]	; (171e0 <notify_disconnected+0x68>)
   171be:	f011 f8c0 	bl	28342 <printk>
   171c2:	f240 5112 	movw	r1, #1298	; 0x512
   171c6:	4630      	mov	r0, r6
   171c8:	f011 fc54 	bl	28a74 <assert_post_action>
   171cc:	e7e8      	b.n	171a0 <notify_disconnected+0x28>
		}
	}
}
   171ce:	bd70      	pop	{r4, r5, r6, pc}
   171d0:	200027bc 	.word	0x200027bc
   171d4:	0002f2c4 	.word	0x0002f2c4
   171d8:	0002f2c4 	.word	0x0002f2c4
   171dc:	00031384 	.word	0x00031384
   171e0:	0002f968 	.word	0x0002f968

000171e4 <conn_tx_alloc>:
{
   171e4:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   171e6:	f00d f9bd 	bl	24564 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   171ea:	4b08      	ldr	r3, [pc, #32]	; (1720c <conn_tx_alloc+0x28>)
   171ec:	4283      	cmp	r3, r0
   171ee:	d007      	beq.n	17200 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   171f0:	f04f 32ff 	mov.w	r2, #4294967295
   171f4:	f04f 33ff 	mov.w	r3, #4294967295
   171f8:	4805      	ldr	r0, [pc, #20]	; (17210 <conn_tx_alloc+0x2c>)
   171fa:	f00b fad7 	bl	227ac <z_impl_k_queue_get>
}
   171fe:	bd08      	pop	{r3, pc}
   17200:	2200      	movs	r2, #0
   17202:	2300      	movs	r3, #0
   17204:	4802      	ldr	r0, [pc, #8]	; (17210 <conn_tx_alloc+0x2c>)
   17206:	f00b fad1 	bl	227ac <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1720a:	e7f8      	b.n	171fe <conn_tx_alloc+0x1a>
   1720c:	20001fc0 	.word	0x20001fc0
   17210:	2000089c 	.word	0x2000089c

00017214 <notify_connected>:
{
   17214:	b570      	push	{r4, r5, r6, lr}
   17216:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17218:	4b17      	ldr	r3, [pc, #92]	; (17278 <notify_connected+0x64>)
   1721a:	681c      	ldr	r4, [r3, #0]
   1721c:	e000      	b.n	17220 <notify_connected+0xc>
   1721e:	69a4      	ldr	r4, [r4, #24]
   17220:	b134      	cbz	r4, 17230 <notify_connected+0x1c>
		if (cb->connected) {
   17222:	6823      	ldr	r3, [r4, #0]
   17224:	2b00      	cmp	r3, #0
   17226:	d0fa      	beq.n	1721e <notify_connected+0xa>
			cb->connected(conn, conn->err);
   17228:	7b29      	ldrb	r1, [r5, #12]
   1722a:	4628      	mov	r0, r5
   1722c:	4798      	blx	r3
   1722e:	e7f6      	b.n	1721e <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17230:	4c12      	ldr	r4, [pc, #72]	; (1727c <notify_connected+0x68>)
   17232:	e000      	b.n	17236 <notify_connected+0x22>
   17234:	341c      	adds	r4, #28
   17236:	4b12      	ldr	r3, [pc, #72]	; (17280 <notify_connected+0x6c>)
   17238:	429c      	cmp	r4, r3
   1723a:	d809      	bhi.n	17250 <notify_connected+0x3c>
   1723c:	4b10      	ldr	r3, [pc, #64]	; (17280 <notify_connected+0x6c>)
   1723e:	429c      	cmp	r4, r3
   17240:	d213      	bcs.n	1726a <notify_connected+0x56>
		if (cb->connected) {
   17242:	6823      	ldr	r3, [r4, #0]
   17244:	2b00      	cmp	r3, #0
   17246:	d0f5      	beq.n	17234 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   17248:	7b29      	ldrb	r1, [r5, #12]
   1724a:	4628      	mov	r0, r5
   1724c:	4798      	blx	r3
   1724e:	e7f1      	b.n	17234 <notify_connected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17250:	4e0c      	ldr	r6, [pc, #48]	; (17284 <notify_connected+0x70>)
   17252:	f240 42fd 	movw	r2, #1277	; 0x4fd
   17256:	4631      	mov	r1, r6
   17258:	480b      	ldr	r0, [pc, #44]	; (17288 <notify_connected+0x74>)
   1725a:	f011 f872 	bl	28342 <printk>
   1725e:	f240 41fd 	movw	r1, #1277	; 0x4fd
   17262:	4630      	mov	r0, r6
   17264:	f011 fc06 	bl	28a74 <assert_post_action>
   17268:	e7e8      	b.n	1723c <notify_connected+0x28>
	if (!conn->err) {
   1726a:	7b2b      	ldrb	r3, [r5, #12]
   1726c:	b103      	cbz	r3, 17270 <notify_connected+0x5c>
}
   1726e:	bd70      	pop	{r4, r5, r6, pc}
		bt_gatt_connected(conn);
   17270:	4628      	mov	r0, r5
   17272:	f003 fa7d 	bl	1a770 <bt_gatt_connected>
}
   17276:	e7fa      	b.n	1726e <notify_connected+0x5a>
   17278:	200027bc 	.word	0x200027bc
   1727c:	0002f2c4 	.word	0x0002f2c4
   17280:	0002f2c4 	.word	0x0002f2c4
   17284:	00031384 	.word	0x00031384
   17288:	0002f968 	.word	0x0002f968

0001728c <bt_conn_get_pkts>:
}
   1728c:	4800      	ldr	r0, [pc, #0]	; (17290 <bt_conn_get_pkts+0x4>)
   1728e:	4770      	bx	lr
   17290:	200003a8 	.word	0x200003a8

00017294 <send_frag>:
{
   17294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17298:	4605      	mov	r5, r0
   1729a:	460e      	mov	r6, r1
   1729c:	4691      	mov	r9, r2
   1729e:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   172a0:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   172a2:	f7ff fff3 	bl	1728c <bt_conn_get_pkts>
   172a6:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   172a8:	f04f 32ff 	mov.w	r2, #4294967295
   172ac:	f04f 33ff 	mov.w	r3, #4294967295
   172b0:	f00b fb32 	bl	22918 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   172b4:	7b6b      	ldrb	r3, [r5, #13]
   172b6:	2b07      	cmp	r3, #7
   172b8:	d14d      	bne.n	17356 <send_frag+0xc2>
   172ba:	f04f 0240 	mov.w	r2, #64	; 0x40
   172be:	f3ef 8311 	mrs	r3, BASEPRI
   172c2:	f382 8812 	msr	BASEPRI_MAX, r2
   172c6:	f3bf 8f6f 	isb	sy
	if (tx) {
   172ca:	b1af      	cbz	r7, 172f8 <send_frag+0x64>
	parent->next = child;
   172cc:	2200      	movs	r2, #0
   172ce:	603a      	str	r2, [r7, #0]
	return list->tail;
   172d0:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   172d2:	b172      	cbz	r2, 172f2 <send_frag+0x5e>
	parent->next = child;
   172d4:	6017      	str	r7, [r2, #0]
	list->tail = node;
   172d6:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   172d8:	f383 8811 	msr	BASEPRI, r3
   172dc:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   172e0:	464a      	mov	r2, r9
   172e2:	4631      	mov	r1, r6
   172e4:	4628      	mov	r0, r5
   172e6:	f014 f891 	bl	2b40c <send_acl>
	if (err) {
   172ea:	4602      	mov	r2, r0
   172ec:	b988      	cbnz	r0, 17312 <send_frag+0x7e>
	return true;
   172ee:	2001      	movs	r0, #1
   172f0:	e03a      	b.n	17368 <send_frag+0xd4>
   172f2:	61af      	str	r7, [r5, #24]
	list->head = node;
   172f4:	616f      	str	r7, [r5, #20]
}
   172f6:	e7ef      	b.n	172d8 <send_frag+0x44>
	return list->tail;
   172f8:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   172fa:	b13a      	cbz	r2, 1730c <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   172fc:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   17300:	f8da 2000 	ldr.w	r2, [sl]
   17304:	3201      	adds	r2, #1
   17306:	f8ca 2000 	str.w	r2, [sl]
   1730a:	e7e5      	b.n	172d8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1730c:	f105 0a1c 	add.w	sl, r5, #28
   17310:	e7f6      	b.n	17300 <send_frag+0x6c>
		BT_ERR("Unable to send to driver (err %d)", err);
   17312:	2145      	movs	r1, #69	; 0x45
   17314:	4827      	ldr	r0, [pc, #156]	; (173b4 <send_frag+0x120>)
   17316:	f011 fbb5 	bl	28a84 <z_log_minimal_printk>
	__asm__ volatile(
   1731a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1731e:	f3ef 8911 	mrs	r9, BASEPRI
   17322:	f383 8812 	msr	BASEPRI_MAX, r3
   17326:	f3bf 8f6f 	isb	sy
		if (tx) {
   1732a:	b347      	cbz	r7, 1737e <send_frag+0xea>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1732c:	4639      	mov	r1, r7
	return list->head;
   1732e:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17330:	2200      	movs	r2, #0
   17332:	b163      	cbz	r3, 1734e <send_frag+0xba>
   17334:	428b      	cmp	r3, r1
   17336:	d002      	beq.n	1733e <send_frag+0xaa>
   17338:	461a      	mov	r2, r3
   1733a:	681b      	ldr	r3, [r3, #0]
   1733c:	e7f9      	b.n	17332 <send_frag+0x9e>
Z_GENLIST_REMOVE(slist, snode)
   1733e:	b1aa      	cbz	r2, 1736c <send_frag+0xd8>
	return node->next;
   17340:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   17342:	6013      	str	r3, [r2, #0]
	return list->tail;
   17344:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   17346:	42bb      	cmp	r3, r7
   17348:	d017      	beq.n	1737a <send_frag+0xe6>
	parent->next = child;
   1734a:	2300      	movs	r3, #0
   1734c:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   1734e:	f389 8811 	msr	BASEPRI, r9
   17352:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   17356:	4640      	mov	r0, r8
   17358:	f00b fa9e 	bl	22898 <z_impl_k_sem_give>
	if (tx) {
   1735c:	b117      	cbz	r7, 17364 <send_frag+0xd0>
		tx_free(tx);
   1735e:	4638      	mov	r0, r7
   17360:	f7ff fefe 	bl	17160 <tx_free>
	if (always_consume) {
   17364:	bb0c      	cbnz	r4, 173aa <send_frag+0x116>
	return false;
   17366:	4620      	mov	r0, r4
}
   17368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   1736c:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   1736e:	616b      	str	r3, [r5, #20]
	return list->tail;
   17370:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   17372:	42ba      	cmp	r2, r7
   17374:	d1e9      	bne.n	1734a <send_frag+0xb6>
	list->tail = node;
   17376:	61ab      	str	r3, [r5, #24]
}
   17378:	e7e7      	b.n	1734a <send_frag+0xb6>
	list->tail = node;
   1737a:	61aa      	str	r2, [r5, #24]
}
   1737c:	e7e5      	b.n	1734a <send_frag+0xb6>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1737e:	f8da 3000 	ldr.w	r3, [sl]
   17382:	b12b      	cbz	r3, 17390 <send_frag+0xfc>
			(*pending_no_cb)--;
   17384:	f8da 3000 	ldr.w	r3, [sl]
   17388:	3b01      	subs	r3, #1
   1738a:	f8ca 3000 	str.w	r3, [sl]
   1738e:	e7de      	b.n	1734e <send_frag+0xba>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   17390:	4d09      	ldr	r5, [pc, #36]	; (173b8 <send_frag+0x124>)
   17392:	f240 2207 	movw	r2, #519	; 0x207
   17396:	4629      	mov	r1, r5
   17398:	4808      	ldr	r0, [pc, #32]	; (173bc <send_frag+0x128>)
   1739a:	f010 ffd2 	bl	28342 <printk>
   1739e:	f240 2107 	movw	r1, #519	; 0x207
   173a2:	4628      	mov	r0, r5
   173a4:	f011 fb66 	bl	28a74 <assert_post_action>
   173a8:	e7ec      	b.n	17384 <send_frag+0xf0>
		net_buf_unref(buf);
   173aa:	4630      	mov	r0, r6
   173ac:	f005 fe94 	bl	1d0d8 <net_buf_unref>
	return false;
   173b0:	2000      	movs	r0, #0
   173b2:	e7d9      	b.n	17368 <send_frag+0xd4>
   173b4:	00030d1c 	.word	0x00030d1c
   173b8:	00031384 	.word	0x00031384
   173bc:	0002f968 	.word	0x0002f968

000173c0 <bt_conn_new>:
{
   173c0:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   173c2:	2300      	movs	r3, #0
   173c4:	428b      	cmp	r3, r1
   173c6:	d227      	bcs.n	17418 <bt_conn_new+0x58>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   173c8:	24c8      	movs	r4, #200	; 0xc8
   173ca:	fb04 0403 	mla	r4, r4, r3, r0
   173ce:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   173d2:	2501      	movs	r5, #1
   173d4:	f3bf 8f5b 	dmb	ish
   173d8:	e852 6f00 	ldrex	r6, [r2]
   173dc:	2e00      	cmp	r6, #0
   173de:	d104      	bne.n	173ea <bt_conn_new+0x2a>
   173e0:	e842 5c00 	strex	ip, r5, [r2]
   173e4:	f1bc 0f00 	cmp.w	ip, #0
   173e8:	d1f6      	bne.n	173d8 <bt_conn_new+0x18>
   173ea:	f3bf 8f5b 	dmb	ish
   173ee:	d111      	bne.n	17414 <bt_conn_new+0x54>
	if (!conn) {
   173f0:	b174      	cbz	r4, 17410 <bt_conn_new+0x50>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   173f2:	22c0      	movs	r2, #192	; 0xc0
   173f4:	2100      	movs	r1, #0
   173f6:	4620      	mov	r0, r4
   173f8:	f013 fa75 	bl	2a8e6 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   173fc:	4907      	ldr	r1, [pc, #28]	; (1741c <bt_conn_new+0x5c>)
   173fe:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17402:	f00b fe75 	bl	230f0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17406:	4906      	ldr	r1, [pc, #24]	; (17420 <bt_conn_new+0x60>)
   17408:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1740c:	f00b fd6a 	bl	22ee4 <k_work_init>
}
   17410:	4620      	mov	r0, r4
   17412:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   17414:	442b      	add	r3, r5
   17416:	e7d5      	b.n	173c4 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   17418:	2400      	movs	r4, #0
   1741a:	e7e9      	b.n	173f0 <bt_conn_new+0x30>
   1741c:	00017d4d 	.word	0x00017d4d
   17420:	0002b403 	.word	0x0002b403

00017424 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   17424:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   17426:	2101      	movs	r1, #1
   17428:	4801      	ldr	r0, [pc, #4]	; (17430 <acl_conn_new+0xc>)
   1742a:	f7ff ffc9 	bl	173c0 <bt_conn_new>
}
   1742e:	bd08      	pop	{r3, pc}
   17430:	200017f8 	.word	0x200017f8

00017434 <bt_acl_recv>:
{
   17434:	b570      	push	{r4, r5, r6, lr}
   17436:	4604      	mov	r4, r0
   17438:	460d      	mov	r5, r1
	switch (flags) {
   1743a:	2a01      	cmp	r2, #1
   1743c:	d020      	beq.n	17480 <bt_acl_recv+0x4c>
   1743e:	2a02      	cmp	r2, #2
   17440:	d14f      	bne.n	174e2 <bt_acl_recv+0xae>
		if (conn->rx) {
   17442:	6903      	ldr	r3, [r0, #16]
   17444:	b133      	cbz	r3, 17454 <bt_acl_recv+0x20>
			BT_ERR("Unexpected first L2CAP frame");
   17446:	2145      	movs	r1, #69	; 0x45
   17448:	482f      	ldr	r0, [pc, #188]	; (17508 <bt_acl_recv+0xd4>)
   1744a:	f011 fb1b 	bl	28a84 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   1744e:	4620      	mov	r0, r4
   17450:	f014 f843 	bl	2b4da <bt_conn_reset_rx_state>
		conn->rx = buf;
   17454:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17456:	6921      	ldr	r1, [r4, #16]
   17458:	898a      	ldrh	r2, [r1, #12]
   1745a:	2a01      	cmp	r2, #1
   1745c:	d94b      	bls.n	174f6 <bt_acl_recv+0xc2>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1745e:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   17460:	7845      	ldrb	r5, [r0, #1]
   17462:	7803      	ldrb	r3, [r0, #0]
   17464:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   17468:	3304      	adds	r3, #4
   1746a:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1746c:	429a      	cmp	r2, r3
   1746e:	d342      	bcc.n	174f6 <bt_acl_recv+0xc2>
	if (conn->rx->len > acl_total_len) {
   17470:	d842      	bhi.n	174f8 <bt_acl_recv+0xc4>
	conn->rx = NULL;
   17472:	2300      	movs	r3, #0
   17474:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17476:	2201      	movs	r2, #1
   17478:	4620      	mov	r0, r4
   1747a:	f000 fee1 	bl	18240 <bt_l2cap_recv>
   1747e:	e03a      	b.n	174f6 <bt_acl_recv+0xc2>
		if (!conn->rx) {
   17480:	6900      	ldr	r0, [r0, #16]
   17482:	b180      	cbz	r0, 174a6 <bt_acl_recv+0x72>
		if (!buf->len) {
   17484:	898e      	ldrh	r6, [r1, #12]
   17486:	b1ce      	cbz	r6, 174bc <bt_acl_recv+0x88>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   17488:	3008      	adds	r0, #8
   1748a:	f016 fb17 	bl	2dabc <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1748e:	4286      	cmp	r6, r0
   17490:	d818      	bhi.n	174c4 <bt_acl_recv+0x90>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   17492:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17494:	89aa      	ldrh	r2, [r5, #12]
   17496:	68a9      	ldr	r1, [r5, #8]
   17498:	3008      	adds	r0, #8
   1749a:	f016 fb18 	bl	2dace <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1749e:	4628      	mov	r0, r5
   174a0:	f005 fe1a 	bl	1d0d8 <net_buf_unref>
		break;
   174a4:	e7d7      	b.n	17456 <bt_acl_recv+0x22>
			BT_ERR("Unexpected L2CAP continuation");
   174a6:	2145      	movs	r1, #69	; 0x45
   174a8:	4818      	ldr	r0, [pc, #96]	; (1750c <bt_acl_recv+0xd8>)
   174aa:	f011 faeb 	bl	28a84 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   174ae:	4620      	mov	r0, r4
   174b0:	f014 f813 	bl	2b4da <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   174b4:	4628      	mov	r0, r5
   174b6:	f005 fe0f 	bl	1d0d8 <net_buf_unref>
			return;
   174ba:	e01c      	b.n	174f6 <bt_acl_recv+0xc2>
			net_buf_unref(buf);
   174bc:	4608      	mov	r0, r1
   174be:	f005 fe0b 	bl	1d0d8 <net_buf_unref>
			return;
   174c2:	e018      	b.n	174f6 <bt_acl_recv+0xc2>
			BT_ERR("Not enough buffer space for L2CAP data");
   174c4:	2145      	movs	r1, #69	; 0x45
   174c6:	4812      	ldr	r0, [pc, #72]	; (17510 <bt_acl_recv+0xdc>)
   174c8:	f011 fadc 	bl	28a84 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   174cc:	2200      	movs	r2, #0
   174ce:	6921      	ldr	r1, [r4, #16]
   174d0:	4620      	mov	r0, r4
   174d2:	f000 feb5 	bl	18240 <bt_l2cap_recv>
			conn->rx = NULL;
   174d6:	2300      	movs	r3, #0
   174d8:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   174da:	4628      	mov	r0, r5
   174dc:	f005 fdfc 	bl	1d0d8 <net_buf_unref>
			return;
   174e0:	e009      	b.n	174f6 <bt_acl_recv+0xc2>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   174e2:	2145      	movs	r1, #69	; 0x45
   174e4:	480b      	ldr	r0, [pc, #44]	; (17514 <bt_acl_recv+0xe0>)
   174e6:	f011 facd 	bl	28a84 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   174ea:	4620      	mov	r0, r4
   174ec:	f013 fff5 	bl	2b4da <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   174f0:	4628      	mov	r0, r5
   174f2:	f005 fdf1 	bl	1d0d8 <net_buf_unref>
}
   174f6:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("ACL len mismatch (%u > %u)",
   174f8:	2145      	movs	r1, #69	; 0x45
   174fa:	4807      	ldr	r0, [pc, #28]	; (17518 <bt_acl_recv+0xe4>)
   174fc:	f011 fac2 	bl	28a84 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   17500:	4620      	mov	r0, r4
   17502:	f013 ffea 	bl	2b4da <bt_conn_reset_rx_state>
		return;
   17506:	e7f6      	b.n	174f6 <bt_acl_recv+0xc2>
   17508:	000313b4 	.word	0x000313b4
   1750c:	000313d8 	.word	0x000313d8
   17510:	000313fc 	.word	0x000313fc
   17514:	00031428 	.word	0x00031428
   17518:	0003144c 	.word	0x0003144c

0001751c <conn_cleanup>:
{
   1751c:	b538      	push	{r3, r4, r5, lr}
   1751e:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   17520:	e004      	b.n	1752c <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   17522:	f7ff fe1d 	bl	17160 <tx_free>
		net_buf_unref(buf);
   17526:	4620      	mov	r0, r4
   17528:	f005 fdd6 	bl	1d0d8 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1752c:	2200      	movs	r2, #0
   1752e:	2300      	movs	r3, #0
   17530:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17534:	f005 fd48 	bl	1cfc8 <net_buf_get>
   17538:	4604      	mov	r4, r0
   1753a:	b118      	cbz	r0, 17544 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   1753c:	6960      	ldr	r0, [r4, #20]
   1753e:	2800      	cmp	r0, #0
   17540:	d1ef      	bne.n	17522 <conn_cleanup+0x6>
   17542:	e7f0      	b.n	17526 <conn_cleanup+0xa>
	return list->head;
   17544:	696b      	ldr	r3, [r5, #20]
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   17546:	b15b      	cbz	r3, 17560 <conn_cleanup+0x44>
   17548:	4c12      	ldr	r4, [pc, #72]	; (17594 <conn_cleanup+0x78>)
   1754a:	f240 228a 	movw	r2, #650	; 0x28a
   1754e:	4621      	mov	r1, r4
   17550:	4811      	ldr	r0, [pc, #68]	; (17598 <conn_cleanup+0x7c>)
   17552:	f010 fef6 	bl	28342 <printk>
   17556:	f240 218a 	movw	r1, #650	; 0x28a
   1755a:	4620      	mov	r0, r4
   1755c:	f011 fa8a 	bl	28a74 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   17560:	69eb      	ldr	r3, [r5, #28]
   17562:	b94b      	cbnz	r3, 17578 <conn_cleanup+0x5c>
	bt_conn_reset_rx_state(conn);
   17564:	4628      	mov	r0, r5
   17566:	f013 ffb8 	bl	2b4da <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1756a:	2200      	movs	r2, #0
   1756c:	2300      	movs	r3, #0
   1756e:	f105 0060 	add.w	r0, r5, #96	; 0x60
   17572:	f00b feb1 	bl	232d8 <k_work_reschedule>
}
   17576:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   17578:	4c06      	ldr	r4, [pc, #24]	; (17594 <conn_cleanup+0x78>)
   1757a:	f240 228b 	movw	r2, #651	; 0x28b
   1757e:	4621      	mov	r1, r4
   17580:	4805      	ldr	r0, [pc, #20]	; (17598 <conn_cleanup+0x7c>)
   17582:	f010 fede 	bl	28342 <printk>
   17586:	f240 218b 	movw	r1, #651	; 0x28b
   1758a:	4620      	mov	r0, r4
   1758c:	f011 fa72 	bl	28a74 <assert_post_action>
   17590:	e7e8      	b.n	17564 <conn_cleanup+0x48>
   17592:	bf00      	nop
   17594:	00031384 	.word	0x00031384
   17598:	0002f968 	.word	0x0002f968

0001759c <bt_conn_send_cb>:
{
   1759c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175a0:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   175a2:	7b43      	ldrb	r3, [r0, #13]
   175a4:	2b07      	cmp	r3, #7
   175a6:	d117      	bne.n	175d8 <bt_conn_send_cb+0x3c>
   175a8:	4604      	mov	r4, r0
   175aa:	460d      	mov	r5, r1
   175ac:	4616      	mov	r6, r2
	if (cb) {
   175ae:	b35a      	cbz	r2, 17608 <bt_conn_send_cb+0x6c>
		tx = conn_tx_alloc();
   175b0:	f7ff fe18 	bl	171e4 <conn_tx_alloc>
		if (!tx) {
   175b4:	4680      	mov	r8, r0
   175b6:	b1b0      	cbz	r0, 175e6 <bt_conn_send_cb+0x4a>
		if (conn->state != BT_CONN_CONNECTED) {
   175b8:	7b63      	ldrb	r3, [r4, #13]
   175ba:	2b07      	cmp	r3, #7
   175bc:	d11a      	bne.n	175f4 <bt_conn_send_cb+0x58>
		tx->cb = cb;
   175be:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   175c0:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   175c2:	2300      	movs	r3, #0
   175c4:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   175c6:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   175c8:	4629      	mov	r1, r5
   175ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   175ce:	f005 fd51 	bl	1d074 <net_buf_put>
	return 0;
   175d2:	2000      	movs	r0, #0
}
   175d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("not connected!");
   175d8:	2145      	movs	r1, #69	; 0x45
   175da:	480d      	ldr	r0, [pc, #52]	; (17610 <bt_conn_send_cb+0x74>)
   175dc:	f011 fa52 	bl	28a84 <z_log_minimal_printk>
		return -ENOTCONN;
   175e0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   175e4:	e7f6      	b.n	175d4 <bt_conn_send_cb+0x38>
			BT_ERR("Unable to allocate TX context");
   175e6:	2145      	movs	r1, #69	; 0x45
   175e8:	480a      	ldr	r0, [pc, #40]	; (17614 <bt_conn_send_cb+0x78>)
   175ea:	f011 fa4b 	bl	28a84 <z_log_minimal_printk>
			return -ENOBUFS;
   175ee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   175f2:	e7ef      	b.n	175d4 <bt_conn_send_cb+0x38>
			BT_WARN("Disconnected while allocating context");
   175f4:	2157      	movs	r1, #87	; 0x57
   175f6:	4808      	ldr	r0, [pc, #32]	; (17618 <bt_conn_send_cb+0x7c>)
   175f8:	f011 fa44 	bl	28a84 <z_log_minimal_printk>
			tx_free(tx);
   175fc:	4640      	mov	r0, r8
   175fe:	f7ff fdaf 	bl	17160 <tx_free>
			return -ENOTCONN;
   17602:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17606:	e7e5      	b.n	175d4 <bt_conn_send_cb+0x38>
		tx_data(buf)->tx = NULL;
   17608:	2300      	movs	r3, #0
   1760a:	614b      	str	r3, [r1, #20]
   1760c:	e7dc      	b.n	175c8 <bt_conn_send_cb+0x2c>
   1760e:	bf00      	nop
   17610:	0003146c 	.word	0x0003146c
   17614:	00031480 	.word	0x00031480
   17618:	000314a4 	.word	0x000314a4

0001761c <bt_conn_prepare_events>:
{
   1761c:	b570      	push	{r4, r5, r6, lr}
   1761e:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   17620:	4b0c      	ldr	r3, [pc, #48]	; (17654 <bt_conn_prepare_events+0x38>)
   17622:	2400      	movs	r4, #0
   17624:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17626:	4622      	mov	r2, r4
   17628:	2101      	movs	r1, #1
   1762a:	f00d fc01 	bl	24e30 <k_poll_event_init>
   1762e:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17630:	2c00      	cmp	r4, #0
   17632:	dd01      	ble.n	17638 <bt_conn_prepare_events+0x1c>
}
   17634:	4628      	mov	r0, r5
   17636:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn_prepare_events(conn, &events[ev_count])) {
   17638:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   1763c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   17640:	4b05      	ldr	r3, [pc, #20]	; (17658 <bt_conn_prepare_events+0x3c>)
   17642:	20c8      	movs	r0, #200	; 0xc8
   17644:	fb00 3004 	mla	r0, r0, r4, r3
   17648:	f013 ff50 	bl	2b4ec <conn_prepare_events>
   1764c:	b900      	cbnz	r0, 17650 <bt_conn_prepare_events+0x34>
			ev_count++;
   1764e:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17650:	3401      	adds	r4, #1
   17652:	e7ed      	b.n	17630 <bt_conn_prepare_events+0x14>
   17654:	200005a8 	.word	0x200005a8
   17658:	200017f8 	.word	0x200017f8

0001765c <bt_conn_unref>:
{
   1765c:	b538      	push	{r3, r4, r5, lr}
   1765e:	4604      	mov	r4, r0
	old = atomic_dec(&conn->ref);
   17660:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17664:	f3bf 8f5b 	dmb	ish
   17668:	e853 2f00 	ldrex	r2, [r3]
   1766c:	1e51      	subs	r1, r2, #1
   1766e:	e843 1000 	strex	r0, r1, [r3]
   17672:	2800      	cmp	r0, #0
   17674:	d1f8      	bne.n	17668 <bt_conn_unref+0xc>
   17676:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   1767a:	2a00      	cmp	r2, #0
   1767c:	dd03      	ble.n	17686 <bt_conn_unref+0x2a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1767e:	78a3      	ldrb	r3, [r4, #2]
   17680:	2b01      	cmp	r3, #1
   17682:	d00d      	beq.n	176a0 <bt_conn_unref+0x44>
}
   17684:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(old > 0, "Conn reference counter is 0");
   17686:	4d0c      	ldr	r5, [pc, #48]	; (176b8 <bt_conn_unref+0x5c>)
   17688:	f240 4246 	movw	r2, #1094	; 0x446
   1768c:	4629      	mov	r1, r5
   1768e:	480b      	ldr	r0, [pc, #44]	; (176bc <bt_conn_unref+0x60>)
   17690:	f010 fe57 	bl	28342 <printk>
   17694:	f240 4146 	movw	r1, #1094	; 0x446
   17698:	4628      	mov	r0, r5
   1769a:	f011 f9eb 	bl	28a74 <assert_post_action>
   1769e:	e7ee      	b.n	1767e <bt_conn_unref+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   176a0:	f3bf 8f5b 	dmb	ish
   176a4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   176a8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   176ac:	2b00      	cmp	r3, #0
   176ae:	d1e9      	bne.n	17684 <bt_conn_unref+0x28>
		bt_le_adv_resume();
   176b0:	f013 fe12 	bl	2b2d8 <bt_le_adv_resume>
}
   176b4:	e7e6      	b.n	17684 <bt_conn_unref+0x28>
   176b6:	bf00      	nop
   176b8:	00031384 	.word	0x00031384
   176bc:	0002f968 	.word	0x0002f968

000176c0 <bt_conn_lookup_handle>:
{
   176c0:	b508      	push	{r3, lr}
   176c2:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   176c4:	2101      	movs	r1, #1
   176c6:	4802      	ldr	r0, [pc, #8]	; (176d0 <bt_conn_lookup_handle+0x10>)
   176c8:	f013 ff78 	bl	2b5bc <conn_lookup_handle>
}
   176cc:	bd08      	pop	{r3, pc}
   176ce:	bf00      	nop
   176d0:	200017f8 	.word	0x200017f8

000176d4 <bt_conn_set_state>:
{
   176d4:	b570      	push	{r4, r5, r6, lr}
   176d6:	460d      	mov	r5, r1
	if (conn->state == state) {
   176d8:	7b46      	ldrb	r6, [r0, #13]
   176da:	428e      	cmp	r6, r1
   176dc:	d010      	beq.n	17700 <bt_conn_set_state+0x2c>
   176de:	4604      	mov	r4, r0
	conn->state = state;
   176e0:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   176e2:	b916      	cbnz	r6, 176ea <bt_conn_set_state+0x16>
		if (conn->type != BT_CONN_TYPE_ISO) {
   176e4:	7883      	ldrb	r3, [r0, #2]
   176e6:	2b08      	cmp	r3, #8
   176e8:	d12b      	bne.n	17742 <bt_conn_set_state+0x6e>
	switch (conn->state) {
   176ea:	7b63      	ldrb	r3, [r4, #13]
   176ec:	2b08      	cmp	r3, #8
   176ee:	f200 80a1 	bhi.w	17834 <bt_conn_set_state+0x160>
   176f2:	e8df f003 	tbb	[pc, r3]
   176f6:	9b42      	.short	0x9b42
   176f8:	9e9e9e9e 	.word	0x9e9e9e9e
   176fc:	299e      	.short	0x299e
   176fe:	9e          	.byte	0x9e
   176ff:	00          	.byte	0x00
	switch (state) {
   17700:	2908      	cmp	r1, #8
   17702:	d81a      	bhi.n	1773a <bt_conn_set_state+0x66>
   17704:	e8df f001 	tbb	[pc, r1]
   17708:	11071b05 	.word	0x11071b05
   1770c:	15130d0f 	.word	0x15130d0f
   17710:	17          	.byte	0x17
   17711:	00          	.byte	0x00
	if (conn->state == state) {
   17712:	4a4b      	ldr	r2, [pc, #300]	; (17840 <bt_conn_set_state+0x16c>)
   17714:	e000      	b.n	17718 <bt_conn_set_state+0x44>
		return "connect-scan";
   17716:	4a4b      	ldr	r2, [pc, #300]	; (17844 <bt_conn_set_state+0x170>)
		BT_WARN("no transition %s", state2str(state));
   17718:	2157      	movs	r1, #87	; 0x57
   1771a:	484b      	ldr	r0, [pc, #300]	; (17848 <bt_conn_set_state+0x174>)
   1771c:	f011 f9b2 	bl	28a84 <z_log_minimal_printk>
		return;
   17720:	e087      	b.n	17832 <bt_conn_set_state+0x15e>
		return "connect-dir-adv";
   17722:	4a4a      	ldr	r2, [pc, #296]	; (1784c <bt_conn_set_state+0x178>)
   17724:	e7f8      	b.n	17718 <bt_conn_set_state+0x44>
		return "connect-adv";
   17726:	4a4a      	ldr	r2, [pc, #296]	; (17850 <bt_conn_set_state+0x17c>)
   17728:	e7f6      	b.n	17718 <bt_conn_set_state+0x44>
		return "connect-auto";
   1772a:	4a4a      	ldr	r2, [pc, #296]	; (17854 <bt_conn_set_state+0x180>)
   1772c:	e7f4      	b.n	17718 <bt_conn_set_state+0x44>
		return "connect";
   1772e:	4a4a      	ldr	r2, [pc, #296]	; (17858 <bt_conn_set_state+0x184>)
   17730:	e7f2      	b.n	17718 <bt_conn_set_state+0x44>
		return "connected";
   17732:	4a4a      	ldr	r2, [pc, #296]	; (1785c <bt_conn_set_state+0x188>)
   17734:	e7f0      	b.n	17718 <bt_conn_set_state+0x44>
		return "disconnect";
   17736:	4a4a      	ldr	r2, [pc, #296]	; (17860 <bt_conn_set_state+0x18c>)
   17738:	e7ee      	b.n	17718 <bt_conn_set_state+0x44>
		return "(unknown)";
   1773a:	4a4a      	ldr	r2, [pc, #296]	; (17864 <bt_conn_set_state+0x190>)
   1773c:	e7ec      	b.n	17718 <bt_conn_set_state+0x44>
		return "disconnect-complete";
   1773e:	4a4a      	ldr	r2, [pc, #296]	; (17868 <bt_conn_set_state+0x194>)
   17740:	e7ea      	b.n	17718 <bt_conn_set_state+0x44>
			bt_conn_ref(conn);
   17742:	f013 ff14 	bl	2b56e <bt_conn_ref>
   17746:	e7d0      	b.n	176ea <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17748:	78a3      	ldrb	r3, [r4, #2]
   1774a:	2b04      	cmp	r3, #4
   1774c:	d071      	beq.n	17832 <bt_conn_set_state+0x15e>
		k_fifo_init(&conn->tx_queue);
   1774e:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   17752:	f017 fa9a 	bl	2ec8a <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   17756:	2100      	movs	r1, #0
   17758:	4844      	ldr	r0, [pc, #272]	; (1786c <bt_conn_set_state+0x198>)
   1775a:	f00e f86f 	bl	2583c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1775e:	2300      	movs	r3, #0
   17760:	6563      	str	r3, [r4, #84]	; 0x54
	list->tail = NULL;
   17762:	65a3      	str	r3, [r4, #88]	; 0x58
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   17764:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17766:	2b01      	cmp	r3, #1
   17768:	d163      	bne.n	17832 <bt_conn_set_state+0x15e>
			k_work_schedule(&conn->deferred_work,
   1776a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1776e:	2300      	movs	r3, #0
   17770:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17774:	f00b fd46 	bl	23204 <k_work_schedule>
   17778:	e05b      	b.n	17832 <bt_conn_set_state+0x15e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1777a:	78a3      	ldrb	r3, [r4, #2]
   1777c:	2b04      	cmp	r3, #4
   1777e:	d008      	beq.n	17792 <bt_conn_set_state+0xbe>
		switch (old_state) {
   17780:	2e08      	cmp	r6, #8
   17782:	d856      	bhi.n	17832 <bt_conn_set_state+0x15e>
   17784:	e8df f006 	tbb	[pc, r6]
   17788:	4430094c 	.word	0x4430094c
   1778c:	4c263a48 	.word	0x4c263a48
   17790:	4c          	.byte	0x4c
   17791:	00          	.byte	0x00
			bt_conn_unref(conn);
   17792:	4620      	mov	r0, r4
   17794:	f7ff ff62 	bl	1765c <bt_conn_unref>
			break;
   17798:	e04b      	b.n	17832 <bt_conn_set_state+0x15e>
			tx_notify(conn);
   1779a:	4620      	mov	r0, r4
   1779c:	f013 fe0c 	bl	2b3b8 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   177a0:	78a3      	ldrb	r3, [r4, #2]
   177a2:	2b01      	cmp	r3, #1
   177a4:	d011      	beq.n	177ca <bt_conn_set_state+0xf6>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   177a6:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   177a8:	f3bf 8f5b 	dmb	ish
   177ac:	e854 3f00 	ldrex	r3, [r4]
   177b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   177b4:	e844 3200 	strex	r2, r3, [r4]
   177b8:	2a00      	cmp	r2, #0
   177ba:	d1f7      	bne.n	177ac <bt_conn_set_state+0xd8>
   177bc:	f3bf 8f5b 	dmb	ish
   177c0:	2100      	movs	r1, #0
   177c2:	482a      	ldr	r0, [pc, #168]	; (1786c <bt_conn_set_state+0x198>)
   177c4:	f00e f83a 	bl	2583c <z_impl_k_poll_signal_raise>
   177c8:	e033      	b.n	17832 <bt_conn_set_state+0x15e>
				k_work_cancel_delayable(&conn->deferred_work);
   177ca:	f104 0060 	add.w	r0, r4, #96	; 0x60
   177ce:	f00b fd8b 	bl	232e8 <k_work_cancel_delayable>
   177d2:	e7e8      	b.n	177a6 <bt_conn_set_state+0xd2>
			if (conn->err) {
   177d4:	7b23      	ldrb	r3, [r4, #12]
   177d6:	b91b      	cbnz	r3, 177e0 <bt_conn_set_state+0x10c>
			bt_conn_unref(conn);
   177d8:	4620      	mov	r0, r4
   177da:	f7ff ff3f 	bl	1765c <bt_conn_unref>
			break;
   177de:	e028      	b.n	17832 <bt_conn_set_state+0x15e>
				notify_connected(conn);
   177e0:	4620      	mov	r0, r4
   177e2:	f7ff fd17 	bl	17214 <notify_connected>
   177e6:	e7f7      	b.n	177d8 <bt_conn_set_state+0x104>
			if (conn->err) {
   177e8:	7b23      	ldrb	r3, [r4, #12]
   177ea:	b91b      	cbnz	r3, 177f4 <bt_conn_set_state+0x120>
			bt_conn_unref(conn);
   177ec:	4620      	mov	r0, r4
   177ee:	f7ff ff35 	bl	1765c <bt_conn_unref>
			break;
   177f2:	e01e      	b.n	17832 <bt_conn_set_state+0x15e>
				notify_connected(conn);
   177f4:	4620      	mov	r0, r4
   177f6:	f7ff fd0d 	bl	17214 <notify_connected>
   177fa:	e7f7      	b.n	177ec <bt_conn_set_state+0x118>
			if (conn->err) {
   177fc:	7b23      	ldrb	r3, [r4, #12]
   177fe:	b91b      	cbnz	r3, 17808 <bt_conn_set_state+0x134>
			bt_conn_unref(conn);
   17800:	4620      	mov	r0, r4
   17802:	f7ff ff2b 	bl	1765c <bt_conn_unref>
			break;
   17806:	e014      	b.n	17832 <bt_conn_set_state+0x15e>
				notify_connected(conn);
   17808:	4620      	mov	r0, r4
   1780a:	f7ff fd03 	bl	17214 <notify_connected>
   1780e:	e7f7      	b.n	17800 <bt_conn_set_state+0x12c>
			bt_conn_unref(conn);
   17810:	4620      	mov	r0, r4
   17812:	f7ff ff23 	bl	1765c <bt_conn_unref>
			break;
   17816:	e00c      	b.n	17832 <bt_conn_set_state+0x15e>
			bt_conn_unref(conn);
   17818:	4620      	mov	r0, r4
   1781a:	f7ff ff1f 	bl	1765c <bt_conn_unref>
			break;
   1781e:	e008      	b.n	17832 <bt_conn_set_state+0x15e>
			BT_WARN("Invalid (%u) old state", state);
   17820:	462a      	mov	r2, r5
   17822:	2157      	movs	r1, #87	; 0x57
   17824:	4812      	ldr	r0, [pc, #72]	; (17870 <bt_conn_set_state+0x19c>)
   17826:	f011 f92d 	bl	28a84 <z_log_minimal_printk>
   1782a:	e002      	b.n	17832 <bt_conn_set_state+0x15e>
		process_unack_tx(conn);
   1782c:	4620      	mov	r0, r4
   1782e:	f013 fe13 	bl	2b458 <process_unack_tx>
}
   17832:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("no valid (%u) state was set", state);
   17834:	462a      	mov	r2, r5
   17836:	2157      	movs	r1, #87	; 0x57
   17838:	480e      	ldr	r0, [pc, #56]	; (17874 <bt_conn_set_state+0x1a0>)
   1783a:	f011 f923 	bl	28a84 <z_log_minimal_printk>
   1783e:	e7f8      	b.n	17832 <bt_conn_set_state+0x15e>
   17840:	0003154c 	.word	0x0003154c
   17844:	000314f0 	.word	0x000314f0
   17848:	0003155c 	.word	0x0003155c
   1784c:	00031500 	.word	0x00031500
   17850:	00031510 	.word	0x00031510
   17854:	0003151c 	.word	0x0003151c
   17858:	0003152c 	.word	0x0003152c
   1785c:	00031534 	.word	0x00031534
   17860:	00031540 	.word	0x00031540
   17864:	000314d0 	.word	0x000314d0
   17868:	000314dc 	.word	0x000314dc
   1786c:	200005a8 	.word	0x200005a8
   17870:	00031574 	.word	0x00031574
   17874:	00031590 	.word	0x00031590

00017878 <bt_conn_index>:
{
   17878:	b538      	push	{r3, r4, r5, lr}
		index = conn - acl_conns;
   1787a:	4a0b      	ldr	r2, [pc, #44]	; (178a8 <bt_conn_index+0x30>)
   1787c:	1a84      	subs	r4, r0, r2
   1787e:	10e3      	asrs	r3, r4, #3
   17880:	4c0a      	ldr	r4, [pc, #40]	; (178ac <bt_conn_index+0x34>)
   17882:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17886:	4290      	cmp	r0, r2
   17888:	d00b      	beq.n	178a2 <bt_conn_index+0x2a>
   1788a:	4d09      	ldr	r5, [pc, #36]	; (178b0 <bt_conn_index+0x38>)
   1788c:	f240 4264 	movw	r2, #1124	; 0x464
   17890:	4629      	mov	r1, r5
   17892:	4808      	ldr	r0, [pc, #32]	; (178b4 <bt_conn_index+0x3c>)
   17894:	f010 fd55 	bl	28342 <printk>
   17898:	f240 4164 	movw	r1, #1124	; 0x464
   1789c:	4628      	mov	r0, r5
   1789e:	f011 f8e9 	bl	28a74 <assert_post_action>
}
   178a2:	b2e0      	uxtb	r0, r4
   178a4:	bd38      	pop	{r3, r4, r5, pc}
   178a6:	bf00      	nop
   178a8:	200017f8 	.word	0x200017f8
   178ac:	c28f5c29 	.word	0xc28f5c29
   178b0:	00031384 	.word	0x00031384
   178b4:	0002f968 	.word	0x0002f968

000178b8 <bt_conn_create_pdu_timeout>:
{
   178b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178bc:	4604      	mov	r4, r0
   178be:	460f      	mov	r7, r1
   178c0:	4616      	mov	r6, r2
   178c2:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   178c4:	f017 f990 	bl	2ebe8 <k_is_in_isr>
   178c8:	b970      	cbnz	r0, 178e8 <bt_conn_create_pdu_timeout+0x30>
	if (!pool) {
   178ca:	b1dc      	cbz	r4, 17904 <bt_conn_create_pdu_timeout+0x4c>
	return net_buf_alloc_fixed(pool, timeout);
   178cc:	4632      	mov	r2, r6
   178ce:	462b      	mov	r3, r5
   178d0:	4620      	mov	r0, r4
   178d2:	f016 f8e0 	bl	2da96 <net_buf_alloc_fixed>
	if (!buf) {
   178d6:	4604      	mov	r4, r0
   178d8:	b1b0      	cbz	r0, 17908 <bt_conn_create_pdu_timeout+0x50>
	net_buf_simple_reserve(&buf->b, reserve);
   178da:	1d39      	adds	r1, r7, #4
   178dc:	3008      	adds	r0, #8
   178de:	f005 fba1 	bl	1d024 <net_buf_simple_reserve>
}
   178e2:	4620      	mov	r0, r4
   178e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(!k_is_in_isr());
   178e8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 17920 <bt_conn_create_pdu_timeout+0x68>
   178ec:	f44f 6290 	mov.w	r2, #1152	; 0x480
   178f0:	4641      	mov	r1, r8
   178f2:	4808      	ldr	r0, [pc, #32]	; (17914 <bt_conn_create_pdu_timeout+0x5c>)
   178f4:	f010 fd25 	bl	28342 <printk>
   178f8:	f44f 6190 	mov.w	r1, #1152	; 0x480
   178fc:	4640      	mov	r0, r8
   178fe:	f011 f8b9 	bl	28a74 <assert_post_action>
   17902:	e7e2      	b.n	178ca <bt_conn_create_pdu_timeout+0x12>
		pool = &acl_tx_pool;
   17904:	4c04      	ldr	r4, [pc, #16]	; (17918 <bt_conn_create_pdu_timeout+0x60>)
   17906:	e7e1      	b.n	178cc <bt_conn_create_pdu_timeout+0x14>
		BT_WARN("Unable to allocate buffer within timeout");
   17908:	2157      	movs	r1, #87	; 0x57
   1790a:	4804      	ldr	r0, [pc, #16]	; (1791c <bt_conn_create_pdu_timeout+0x64>)
   1790c:	f011 f8ba 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   17910:	e7e7      	b.n	178e2 <bt_conn_create_pdu_timeout+0x2a>
   17912:	bf00      	nop
   17914:	0002f968 	.word	0x0002f968
   17918:	200008b8 	.word	0x200008b8
   1791c:	000315b4 	.word	0x000315b4
   17920:	00031384 	.word	0x00031384

00017924 <notify_le_param_updated>:
{
   17924:	b570      	push	{r4, r5, r6, lr}
   17926:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17928:	f3bf 8f5b 	dmb	ish
   1792c:	6843      	ldr	r3, [r0, #4]
   1792e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17932:	f413 7f00 	tst.w	r3, #512	; 0x200
   17936:	d010      	beq.n	1795a <notify_le_param_updated+0x36>
   17938:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   1793a:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   1793e:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17942:	428b      	cmp	r3, r1
   17944:	d309      	bcc.n	1795a <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   17946:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
	    conn->le.interval >= conn->le.interval_min &&
   1794a:	428b      	cmp	r3, r1
   1794c:	d805      	bhi.n	1795a <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   1794e:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
   17952:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
   17956:	4299      	cmp	r1, r3
   17958:	d002      	beq.n	17960 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   1795a:	4b20      	ldr	r3, [pc, #128]	; (179dc <notify_le_param_updated+0xb8>)
   1795c:	681d      	ldr	r5, [r3, #0]
   1795e:	e00d      	b.n	1797c <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17960:	f3bf 8f5b 	dmb	ish
   17964:	e852 3f00 	ldrex	r3, [r2]
   17968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1796c:	e842 3100 	strex	r1, r3, [r2]
   17970:	2900      	cmp	r1, #0
   17972:	d1f7      	bne.n	17964 <notify_le_param_updated+0x40>
   17974:	f3bf 8f5b 	dmb	ish
}
   17978:	e7ef      	b.n	1795a <notify_le_param_updated+0x36>
   1797a:	69ad      	ldr	r5, [r5, #24]
   1797c:	b15d      	cbz	r5, 17996 <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   1797e:	68ee      	ldr	r6, [r5, #12]
   17980:	2e00      	cmp	r6, #0
   17982:	d0fa      	beq.n	1797a <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   17984:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   17988:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1798c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   17990:	4620      	mov	r0, r4
   17992:	47b0      	blx	r6
   17994:	e7f1      	b.n	1797a <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17996:	4d12      	ldr	r5, [pc, #72]	; (179e0 <notify_le_param_updated+0xbc>)
   17998:	e000      	b.n	1799c <notify_le_param_updated+0x78>
   1799a:	351c      	adds	r5, #28
   1799c:	4b11      	ldr	r3, [pc, #68]	; (179e4 <notify_le_param_updated+0xc0>)
   1799e:	429d      	cmp	r5, r3
   179a0:	d80e      	bhi.n	179c0 <notify_le_param_updated+0x9c>
   179a2:	4b10      	ldr	r3, [pc, #64]	; (179e4 <notify_le_param_updated+0xc0>)
   179a4:	429d      	cmp	r5, r3
   179a6:	d218      	bcs.n	179da <notify_le_param_updated+0xb6>
		if (cb->le_param_updated) {
   179a8:	68ee      	ldr	r6, [r5, #12]
   179aa:	2e00      	cmp	r6, #0
   179ac:	d0f5      	beq.n	1799a <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   179ae:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   179b2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   179b6:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   179ba:	4620      	mov	r0, r4
   179bc:	47b0      	blx	r6
   179be:	e7ec      	b.n	1799a <notify_le_param_updated+0x76>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   179c0:	4e09      	ldr	r6, [pc, #36]	; (179e8 <notify_le_param_updated+0xc4>)
   179c2:	f240 524b 	movw	r2, #1355	; 0x54b
   179c6:	4631      	mov	r1, r6
   179c8:	4808      	ldr	r0, [pc, #32]	; (179ec <notify_le_param_updated+0xc8>)
   179ca:	f010 fcba 	bl	28342 <printk>
   179ce:	f240 514b 	movw	r1, #1355	; 0x54b
   179d2:	4630      	mov	r0, r6
   179d4:	f011 f84e 	bl	28a74 <assert_post_action>
   179d8:	e7e3      	b.n	179a2 <notify_le_param_updated+0x7e>
}
   179da:	bd70      	pop	{r4, r5, r6, pc}
   179dc:	200027bc 	.word	0x200027bc
   179e0:	0002f2c4 	.word	0x0002f2c4
   179e4:	0002f2c4 	.word	0x0002f2c4
   179e8:	00031384 	.word	0x00031384
   179ec:	0002f968 	.word	0x0002f968

000179f0 <le_param_req>:
{
   179f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179f4:	4606      	mov	r6, r0
   179f6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   179f8:	4608      	mov	r0, r1
   179fa:	f013 f92a 	bl	2ac52 <bt_le_conn_params_valid>
   179fe:	4607      	mov	r7, r0
   17a00:	2800      	cmp	r0, #0
   17a02:	d034      	beq.n	17a6e <le_param_req+0x7e>
	for (cb = callback_list; cb; cb = cb->_next) {
   17a04:	4b1d      	ldr	r3, [pc, #116]	; (17a7c <le_param_req+0x8c>)
   17a06:	681c      	ldr	r4, [r3, #0]
   17a08:	e000      	b.n	17a0c <le_param_req+0x1c>
   17a0a:	69a4      	ldr	r4, [r4, #24]
   17a0c:	b16c      	cbz	r4, 17a2a <le_param_req+0x3a>
		if (!cb->le_param_req) {
   17a0e:	68a3      	ldr	r3, [r4, #8]
   17a10:	2b00      	cmp	r3, #0
   17a12:	d0fa      	beq.n	17a0a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   17a14:	4629      	mov	r1, r5
   17a16:	4630      	mov	r0, r6
   17a18:	4798      	blx	r3
   17a1a:	b338      	cbz	r0, 17a6c <le_param_req+0x7c>
		if (!bt_le_conn_params_valid(param)) {
   17a1c:	4628      	mov	r0, r5
   17a1e:	f013 f918 	bl	2ac52 <bt_le_conn_params_valid>
   17a22:	2800      	cmp	r0, #0
   17a24:	d1f1      	bne.n	17a0a <le_param_req+0x1a>
			return false;
   17a26:	4607      	mov	r7, r0
   17a28:	e021      	b.n	17a6e <le_param_req+0x7e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17a2a:	4c15      	ldr	r4, [pc, #84]	; (17a80 <le_param_req+0x90>)
   17a2c:	e01a      	b.n	17a64 <le_param_req+0x74>
   17a2e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 17a8c <le_param_req+0x9c>
   17a32:	f240 5293 	movw	r2, #1427	; 0x593
   17a36:	4641      	mov	r1, r8
   17a38:	4812      	ldr	r0, [pc, #72]	; (17a84 <le_param_req+0x94>)
   17a3a:	f010 fc82 	bl	28342 <printk>
   17a3e:	f240 5193 	movw	r1, #1427	; 0x593
   17a42:	4640      	mov	r0, r8
   17a44:	f011 f816 	bl	28a74 <assert_post_action>
   17a48:	4b0f      	ldr	r3, [pc, #60]	; (17a88 <le_param_req+0x98>)
   17a4a:	429c      	cmp	r4, r3
   17a4c:	d20f      	bcs.n	17a6e <le_param_req+0x7e>
		if (!cb->le_param_req) {
   17a4e:	68a3      	ldr	r3, [r4, #8]
   17a50:	b13b      	cbz	r3, 17a62 <le_param_req+0x72>
		if (!cb->le_param_req(conn, param)) {
   17a52:	4629      	mov	r1, r5
   17a54:	4630      	mov	r0, r6
   17a56:	4798      	blx	r3
   17a58:	b160      	cbz	r0, 17a74 <le_param_req+0x84>
		if (!bt_le_conn_params_valid(param)) {
   17a5a:	4628      	mov	r0, r5
   17a5c:	f013 f8f9 	bl	2ac52 <bt_le_conn_params_valid>
   17a60:	b150      	cbz	r0, 17a78 <le_param_req+0x88>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17a62:	341c      	adds	r4, #28
   17a64:	4b08      	ldr	r3, [pc, #32]	; (17a88 <le_param_req+0x98>)
   17a66:	429c      	cmp	r4, r3
   17a68:	d9ee      	bls.n	17a48 <le_param_req+0x58>
   17a6a:	e7e0      	b.n	17a2e <le_param_req+0x3e>
			return false;
   17a6c:	4607      	mov	r7, r0
}
   17a6e:	4638      	mov	r0, r7
   17a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
   17a74:	4607      	mov	r7, r0
   17a76:	e7fa      	b.n	17a6e <le_param_req+0x7e>
			return false;
   17a78:	4607      	mov	r7, r0
   17a7a:	e7f8      	b.n	17a6e <le_param_req+0x7e>
   17a7c:	200027bc 	.word	0x200027bc
   17a80:	0002f2c4 	.word	0x0002f2c4
   17a84:	0002f968 	.word	0x0002f968
   17a88:	0002f2c4 	.word	0x0002f2c4
   17a8c:	00031384 	.word	0x00031384

00017a90 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   17a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a92:	4605      	mov	r5, r0
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17a94:	78c3      	ldrb	r3, [r0, #3]
   17a96:	b923      	cbnz	r3, 17aa2 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
   17a98:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17a9c:	4b18      	ldr	r3, [pc, #96]	; (17b00 <bt_conn_identity_resolved+0x70>)
   17a9e:	681c      	ldr	r4, [r3, #0]
   17aa0:	e003      	b.n	17aaa <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
   17aa2:	f100 0697 	add.w	r6, r0, #151	; 0x97
   17aa6:	e7f9      	b.n	17a9c <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
   17aa8:	69a4      	ldr	r4, [r4, #24]
   17aaa:	b144      	cbz	r4, 17abe <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
   17aac:	6923      	ldr	r3, [r4, #16]
   17aae:	2b00      	cmp	r3, #0
   17ab0:	d0fa      	beq.n	17aa8 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17ab2:	f105 0290 	add.w	r2, r5, #144	; 0x90
   17ab6:	4631      	mov	r1, r6
   17ab8:	4628      	mov	r0, r5
   17aba:	4798      	blx	r3
   17abc:	e7f4      	b.n	17aa8 <bt_conn_identity_resolved+0x18>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17abe:	4c11      	ldr	r4, [pc, #68]	; (17b04 <bt_conn_identity_resolved+0x74>)
   17ac0:	e000      	b.n	17ac4 <bt_conn_identity_resolved+0x34>
   17ac2:	341c      	adds	r4, #28
   17ac4:	4b10      	ldr	r3, [pc, #64]	; (17b08 <bt_conn_identity_resolved+0x78>)
   17ac6:	429c      	cmp	r4, r3
   17ac8:	d80b      	bhi.n	17ae2 <bt_conn_identity_resolved+0x52>
   17aca:	4b0f      	ldr	r3, [pc, #60]	; (17b08 <bt_conn_identity_resolved+0x78>)
   17acc:	429c      	cmp	r4, r3
   17ace:	d215      	bcs.n	17afc <bt_conn_identity_resolved+0x6c>
		if (cb->identity_resolved) {
   17ad0:	6923      	ldr	r3, [r4, #16]
   17ad2:	2b00      	cmp	r3, #0
   17ad4:	d0f5      	beq.n	17ac2 <bt_conn_identity_resolved+0x32>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17ad6:	f105 0290 	add.w	r2, r5, #144	; 0x90
   17ada:	4631      	mov	r1, r6
   17adc:	4628      	mov	r0, r5
   17ade:	4798      	blx	r3
   17ae0:	e7ef      	b.n	17ac2 <bt_conn_identity_resolved+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17ae2:	4f0a      	ldr	r7, [pc, #40]	; (17b0c <bt_conn_identity_resolved+0x7c>)
   17ae4:	f44f 62eb 	mov.w	r2, #1880	; 0x758
   17ae8:	4639      	mov	r1, r7
   17aea:	4809      	ldr	r0, [pc, #36]	; (17b10 <bt_conn_identity_resolved+0x80>)
   17aec:	f010 fc29 	bl	28342 <printk>
   17af0:	f44f 61eb 	mov.w	r1, #1880	; 0x758
   17af4:	4638      	mov	r0, r7
   17af6:	f010 ffbd 	bl	28a74 <assert_post_action>
   17afa:	e7e6      	b.n	17aca <bt_conn_identity_resolved+0x3a>
		}
	}
}
   17afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17afe:	bf00      	nop
   17b00:	200027bc 	.word	0x200027bc
   17b04:	0002f2c4 	.word	0x0002f2c4
   17b08:	0002f2c4 	.word	0x0002f2c4
   17b0c:	00031384 	.word	0x00031384
   17b10:	0002f968 	.word	0x0002f968

00017b14 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   17b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b16:	4605      	mov	r5, r0
   17b18:	460c      	mov	r4, r1
   17b1a:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
   17b1c:	f013 fc49 	bl	2b3b2 <reset_pairing>
	bt_l2cap_security_changed(conn, hci_err);
   17b20:	4621      	mov	r1, r4
   17b22:	4628      	mov	r0, r5
   17b24:	f013 fec5 	bl	2b8b2 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   17b28:	4b15      	ldr	r3, [pc, #84]	; (17b80 <bt_conn_security_changed+0x6c>)
   17b2a:	681c      	ldr	r4, [r3, #0]
   17b2c:	e000      	b.n	17b30 <bt_conn_security_changed+0x1c>
   17b2e:	69a4      	ldr	r4, [r4, #24]
   17b30:	b13c      	cbz	r4, 17b42 <bt_conn_security_changed+0x2e>
		if (cb->security_changed) {
   17b32:	6963      	ldr	r3, [r4, #20]
   17b34:	2b00      	cmp	r3, #0
   17b36:	d0fa      	beq.n	17b2e <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
   17b38:	4632      	mov	r2, r6
   17b3a:	7a69      	ldrb	r1, [r5, #9]
   17b3c:	4628      	mov	r0, r5
   17b3e:	4798      	blx	r3
   17b40:	e7f5      	b.n	17b2e <bt_conn_security_changed+0x1a>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b42:	4c10      	ldr	r4, [pc, #64]	; (17b84 <bt_conn_security_changed+0x70>)
   17b44:	e000      	b.n	17b48 <bt_conn_security_changed+0x34>
   17b46:	341c      	adds	r4, #28
   17b48:	4b0f      	ldr	r3, [pc, #60]	; (17b88 <bt_conn_security_changed+0x74>)
   17b4a:	429c      	cmp	r4, r3
   17b4c:	d80a      	bhi.n	17b64 <bt_conn_security_changed+0x50>
   17b4e:	4b0e      	ldr	r3, [pc, #56]	; (17b88 <bt_conn_security_changed+0x74>)
   17b50:	429c      	cmp	r4, r3
   17b52:	d214      	bcs.n	17b7e <bt_conn_security_changed+0x6a>
		if (cb->security_changed) {
   17b54:	6963      	ldr	r3, [r4, #20]
   17b56:	2b00      	cmp	r3, #0
   17b58:	d0f5      	beq.n	17b46 <bt_conn_security_changed+0x32>
			cb->security_changed(conn, conn->sec_level, err);
   17b5a:	4632      	mov	r2, r6
   17b5c:	7a69      	ldrb	r1, [r5, #9]
   17b5e:	4628      	mov	r0, r5
   17b60:	4798      	blx	r3
   17b62:	e7f0      	b.n	17b46 <bt_conn_security_changed+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b64:	4f09      	ldr	r7, [pc, #36]	; (17b8c <bt_conn_security_changed+0x78>)
   17b66:	f240 72c1 	movw	r2, #1985	; 0x7c1
   17b6a:	4639      	mov	r1, r7
   17b6c:	4808      	ldr	r0, [pc, #32]	; (17b90 <bt_conn_security_changed+0x7c>)
   17b6e:	f010 fbe8 	bl	28342 <printk>
   17b72:	f240 71c1 	movw	r1, #1985	; 0x7c1
   17b76:	4638      	mov	r0, r7
   17b78:	f010 ff7c 	bl	28a74 <assert_post_action>
   17b7c:	e7e7      	b.n	17b4e <bt_conn_security_changed+0x3a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   17b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17b80:	200027bc 	.word	0x200027bc
   17b84:	0002f2c4 	.word	0x0002f2c4
   17b88:	0002f2c4 	.word	0x0002f2c4
   17b8c:	00031384 	.word	0x00031384
   17b90:	0002f968 	.word	0x0002f968

00017b94 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   17b94:	4b02      	ldr	r3, [pc, #8]	; (17ba0 <bt_conn_cb_register+0xc>)
   17b96:	681a      	ldr	r2, [r3, #0]
   17b98:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   17b9a:	6018      	str	r0, [r3, #0]
}
   17b9c:	4770      	bx	lr
   17b9e:	bf00      	nop
   17ba0:	200027bc 	.word	0x200027bc

00017ba4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   17ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ba6:	4607      	mov	r7, r0
   17ba8:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17baa:	2400      	movs	r4, #0
   17bac:	2c00      	cmp	r4, #0
   17bae:	dd02      	ble.n	17bb6 <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   17bb0:	2500      	movs	r5, #0
}
   17bb2:	4628      	mov	r0, r5
   17bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17bb6:	4b0c      	ldr	r3, [pc, #48]	; (17be8 <bt_conn_lookup_addr_le+0x44>)
   17bb8:	20c8      	movs	r0, #200	; 0xc8
   17bba:	fb00 3004 	mla	r0, r0, r4, r3
   17bbe:	f013 fcd6 	bl	2b56e <bt_conn_ref>
		if (!conn) {
   17bc2:	4605      	mov	r5, r0
   17bc4:	b170      	cbz	r0, 17be4 <bt_conn_lookup_addr_le+0x40>
		if (conn->type != BT_CONN_TYPE_LE) {
   17bc6:	7883      	ldrb	r3, [r0, #2]
   17bc8:	2b01      	cmp	r3, #1
   17bca:	d109      	bne.n	17be0 <bt_conn_lookup_addr_le+0x3c>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   17bcc:	4632      	mov	r2, r6
   17bce:	4639      	mov	r1, r7
   17bd0:	f013 fda4 	bl	2b71c <bt_conn_is_peer_addr_le>
   17bd4:	2800      	cmp	r0, #0
   17bd6:	d1ec      	bne.n	17bb2 <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   17bd8:	4628      	mov	r0, r5
   17bda:	f7ff fd3f 	bl	1765c <bt_conn_unref>
			continue;
   17bde:	e001      	b.n	17be4 <bt_conn_lookup_addr_le+0x40>
			bt_conn_unref(conn);
   17be0:	f7ff fd3c 	bl	1765c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17be4:	3401      	adds	r4, #1
   17be6:	e7e1      	b.n	17bac <bt_conn_lookup_addr_le+0x8>
   17be8:	200017f8 	.word	0x200017f8

00017bec <bt_conn_exists_le>:
{
   17bec:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   17bee:	f7ff ffd9 	bl	17ba4 <bt_conn_lookup_addr_le>
	if (conn) {
   17bf2:	b908      	cbnz	r0, 17bf8 <bt_conn_exists_le+0xc>
	return false;
   17bf4:	2000      	movs	r0, #0
}
   17bf6:	bd10      	pop	{r4, pc}
   17bf8:	4604      	mov	r4, r0
		BT_WARN("Found valid connection in %s state",
   17bfa:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   17bfc:	2b08      	cmp	r3, #8
   17bfe:	d81e      	bhi.n	17c3e <bt_conn_exists_le+0x52>
   17c00:	e8df f003 	tbb	[pc, r3]
   17c04:	150f1f05 	.word	0x150f1f05
   17c08:	19171113 	.word	0x19171113
   17c0c:	1b          	.byte	0x1b
   17c0d:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   17c0e:	4a0e      	ldr	r2, [pc, #56]	; (17c48 <bt_conn_exists_le+0x5c>)
   17c10:	2157      	movs	r1, #87	; 0x57
   17c12:	480e      	ldr	r0, [pc, #56]	; (17c4c <bt_conn_exists_le+0x60>)
   17c14:	f010 ff36 	bl	28a84 <z_log_minimal_printk>
		bt_conn_unref(conn);
   17c18:	4620      	mov	r0, r4
   17c1a:	f7ff fd1f 	bl	1765c <bt_conn_unref>
		return true;
   17c1e:	2001      	movs	r0, #1
   17c20:	e7e9      	b.n	17bf6 <bt_conn_exists_le+0xa>
		return "connect-scan";
   17c22:	4a0b      	ldr	r2, [pc, #44]	; (17c50 <bt_conn_exists_le+0x64>)
   17c24:	e7f4      	b.n	17c10 <bt_conn_exists_le+0x24>
		return "connect-dir-adv";
   17c26:	4a0b      	ldr	r2, [pc, #44]	; (17c54 <bt_conn_exists_le+0x68>)
   17c28:	e7f2      	b.n	17c10 <bt_conn_exists_le+0x24>
		return "connect-adv";
   17c2a:	4a0b      	ldr	r2, [pc, #44]	; (17c58 <bt_conn_exists_le+0x6c>)
   17c2c:	e7f0      	b.n	17c10 <bt_conn_exists_le+0x24>
		return "connect-auto";
   17c2e:	4a0b      	ldr	r2, [pc, #44]	; (17c5c <bt_conn_exists_le+0x70>)
   17c30:	e7ee      	b.n	17c10 <bt_conn_exists_le+0x24>
		return "connect";
   17c32:	4a0b      	ldr	r2, [pc, #44]	; (17c60 <bt_conn_exists_le+0x74>)
   17c34:	e7ec      	b.n	17c10 <bt_conn_exists_le+0x24>
		return "connected";
   17c36:	4a0b      	ldr	r2, [pc, #44]	; (17c64 <bt_conn_exists_le+0x78>)
   17c38:	e7ea      	b.n	17c10 <bt_conn_exists_le+0x24>
		return "disconnect";
   17c3a:	4a0b      	ldr	r2, [pc, #44]	; (17c68 <bt_conn_exists_le+0x7c>)
   17c3c:	e7e8      	b.n	17c10 <bt_conn_exists_le+0x24>
		return "(unknown)";
   17c3e:	4a0b      	ldr	r2, [pc, #44]	; (17c6c <bt_conn_exists_le+0x80>)
   17c40:	e7e6      	b.n	17c10 <bt_conn_exists_le+0x24>
		return "disconnect-complete";
   17c42:	4a0b      	ldr	r2, [pc, #44]	; (17c70 <bt_conn_exists_le+0x84>)
   17c44:	e7e4      	b.n	17c10 <bt_conn_exists_le+0x24>
   17c46:	bf00      	nop
   17c48:	0003154c 	.word	0x0003154c
   17c4c:	000315e4 	.word	0x000315e4
   17c50:	000314f0 	.word	0x000314f0
   17c54:	00031500 	.word	0x00031500
   17c58:	00031510 	.word	0x00031510
   17c5c:	0003151c 	.word	0x0003151c
   17c60:	0003152c 	.word	0x0003152c
   17c64:	00031534 	.word	0x00031534
   17c68:	00031540 	.word	0x00031540
   17c6c:	000314d0 	.word	0x000314d0
   17c70:	000314dc 	.word	0x000314dc

00017c74 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c78:	4680      	mov	r8, r0
   17c7a:	460f      	mov	r7, r1
   17c7c:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17c7e:	2400      	movs	r4, #0
   17c80:	2c00      	cmp	r4, #0
   17c82:	dd03      	ble.n	17c8c <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   17c84:	2500      	movs	r5, #0
}
   17c86:	4628      	mov	r0, r5
   17c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17c8c:	4b11      	ldr	r3, [pc, #68]	; (17cd4 <bt_conn_lookup_state_le+0x60>)
   17c8e:	20c8      	movs	r0, #200	; 0xc8
   17c90:	fb00 3004 	mla	r0, r0, r4, r3
   17c94:	f013 fc6b 	bl	2b56e <bt_conn_ref>
		if (!conn) {
   17c98:	4605      	mov	r5, r0
   17c9a:	b188      	cbz	r0, 17cc0 <bt_conn_lookup_state_le+0x4c>
		if (conn->type != BT_CONN_TYPE_LE) {
   17c9c:	7883      	ldrb	r3, [r0, #2]
   17c9e:	2b01      	cmp	r3, #1
   17ca0:	d110      	bne.n	17cc4 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17ca2:	b127      	cbz	r7, 17cae <bt_conn_lookup_state_le+0x3a>
   17ca4:	463a      	mov	r2, r7
   17ca6:	4641      	mov	r1, r8
   17ca8:	f013 fd38 	bl	2b71c <bt_conn_is_peer_addr_le>
   17cac:	b168      	cbz	r0, 17cca <bt_conn_lookup_state_le+0x56>
		if (!(conn->state == state && conn->id == id)) {
   17cae:	7b6b      	ldrb	r3, [r5, #13]
   17cb0:	42b3      	cmp	r3, r6
   17cb2:	d102      	bne.n	17cba <bt_conn_lookup_state_le+0x46>
   17cb4:	7a2b      	ldrb	r3, [r5, #8]
   17cb6:	4543      	cmp	r3, r8
   17cb8:	d0e5      	beq.n	17c86 <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   17cba:	4628      	mov	r0, r5
   17cbc:	f7ff fcce 	bl	1765c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17cc0:	3401      	adds	r4, #1
   17cc2:	e7dd      	b.n	17c80 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   17cc4:	f7ff fcca 	bl	1765c <bt_conn_unref>
			continue;
   17cc8:	e7fa      	b.n	17cc0 <bt_conn_lookup_state_le+0x4c>
			bt_conn_unref(conn);
   17cca:	4628      	mov	r0, r5
   17ccc:	f7ff fcc6 	bl	1765c <bt_conn_unref>
			continue;
   17cd0:	e7f6      	b.n	17cc0 <bt_conn_lookup_state_le+0x4c>
   17cd2:	bf00      	nop
   17cd4:	200017f8 	.word	0x200017f8

00017cd8 <send_conn_le_param_update>:
{
   17cd8:	b538      	push	{r3, r4, r5, lr}
   17cda:	4604      	mov	r4, r0
   17cdc:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17cde:	4608      	mov	r0, r1
   17ce0:	f012 ffb7 	bl	2ac52 <bt_le_conn_params_valid>
   17ce4:	b360      	cbz	r0, 17d40 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17ce6:	4b18      	ldr	r3, [pc, #96]	; (17d48 <send_conn_le_param_update+0x70>)
   17ce8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   17cec:	f013 0f02 	tst.w	r3, #2
   17cf0:	d004      	beq.n	17cfc <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17cf2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17cf6:	f013 0f02 	tst.w	r3, #2
   17cfa:	d113      	bne.n	17d24 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   17cfc:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   17cfe:	b9d3      	cbnz	r3, 17d36 <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   17d00:	4629      	mov	r1, r5
   17d02:	4620      	mov	r0, r4
   17d04:	f013 fd33 	bl	2b76e <bt_conn_le_conn_update>
		if (rc == 0) {
   17d08:	b9c8      	cbnz	r0, 17d3e <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   17d0a:	882b      	ldrh	r3, [r5, #0]
   17d0c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   17d10:	886b      	ldrh	r3, [r5, #2]
   17d12:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   17d16:	88ab      	ldrh	r3, [r5, #4]
   17d18:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   17d1c:	88eb      	ldrh	r3, [r5, #6]
   17d1e:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
		return rc;
   17d22:	e00c      	b.n	17d3e <send_conn_le_param_update+0x66>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d24:	f3bf 8f5b 	dmb	ish
   17d28:	6863      	ldr	r3, [r4, #4]
   17d2a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17d2e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   17d32:	d1e3      	bne.n	17cfc <send_conn_le_param_update+0x24>
   17d34:	e7e4      	b.n	17d00 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   17d36:	4629      	mov	r1, r5
   17d38:	4620      	mov	r0, r4
   17d3a:	f013 fe4c 	bl	2b9d6 <bt_l2cap_update_conn_param>
}
   17d3e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17d40:	f06f 0015 	mvn.w	r0, #21
   17d44:	e7fb      	b.n	17d3e <send_conn_le_param_update+0x66>
   17d46:	bf00      	nop
   17d48:	200002a8 	.word	0x200002a8

00017d4c <deferred_work>:
{
   17d4c:	b530      	push	{r4, r5, lr}
   17d4e:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   17d50:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   17d54:	f810 3c53 	ldrb.w	r3, [r0, #-83]
   17d58:	b3b3      	cbz	r3, 17dc8 <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   17d5a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   17d5e:	2b01      	cmp	r3, #1
   17d60:	d130      	bne.n	17dc4 <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   17d62:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17d66:	f3bf 8f5b 	dmb	ish
   17d6a:	e855 3f00 	ldrex	r3, [r5]
   17d6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   17d72:	e845 2100 	strex	r1, r2, [r5]
   17d76:	2900      	cmp	r1, #0
   17d78:	d1f7      	bne.n	17d6a <deferred_work+0x1e>
   17d7a:	f3bf 8f5b 	dmb	ish
   17d7e:	f413 7f00 	tst.w	r3, #512	; 0x200
   17d82:	d02b      	beq.n	17ddc <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17d84:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   17d88:	f8ad 3000 	strh.w	r3, [sp]
   17d8c:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   17d90:	f8ad 3002 	strh.w	r3, [sp, #2]
   17d94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   17d98:	f8ad 3004 	strh.w	r3, [sp, #4]
   17d9c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   17da0:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   17da4:	4669      	mov	r1, sp
   17da6:	4620      	mov	r0, r4
   17da8:	f7ff ff96 	bl	17cd8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17dac:	f3bf 8f5b 	dmb	ish
   17db0:	e855 3f00 	ldrex	r3, [r5]
   17db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17db8:	e845 3200 	strex	r2, r3, [r5]
   17dbc:	2a00      	cmp	r2, #0
   17dbe:	d1f7      	bne.n	17db0 <deferred_work+0x64>
   17dc0:	f3bf 8f5b 	dmb	ish
}
   17dc4:	b005      	add	sp, #20
   17dc6:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   17dc8:	4620      	mov	r0, r4
   17dca:	f013 fd51 	bl	2b870 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   17dce:	4620      	mov	r0, r4
   17dd0:	f7ff f9d2 	bl	17178 <notify_disconnected>
		bt_conn_unref(conn);
   17dd4:	4620      	mov	r0, r4
   17dd6:	f7ff fc41 	bl	1765c <bt_conn_unref>
		return;
   17dda:	e7f3      	b.n	17dc4 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   17ddc:	4a05      	ldr	r2, [pc, #20]	; (17df4 <deferred_work+0xa8>)
   17dde:	ab02      	add	r3, sp, #8
   17de0:	e892 0003 	ldmia.w	r2, {r0, r1}
   17de4:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   17de8:	4619      	mov	r1, r3
   17dea:	4620      	mov	r0, r4
   17dec:	f7ff ff74 	bl	17cd8 <send_conn_le_param_update>
   17df0:	e7dc      	b.n	17dac <deferred_work+0x60>
   17df2:	bf00      	nop
   17df4:	0002f558 	.word	0x0002f558

00017df8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   17df8:	b508      	push	{r3, lr}
   17dfa:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   17dfc:	4801      	ldr	r0, [pc, #4]	; (17e04 <bt_conn_create_frag_timeout+0xc>)
   17dfe:	f7ff fd5b 	bl	178b8 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   17e02:	bd08      	pop	{r3, pc}
   17e04:	20000910 	.word	0x20000910

00017e08 <create_frag>:
{
   17e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e0a:	4606      	mov	r6, r0
   17e0c:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   17e0e:	f04f 32ff 	mov.w	r2, #4294967295
   17e12:	f04f 33ff 	mov.w	r3, #4294967295
   17e16:	2000      	movs	r0, #0
   17e18:	f7ff ffee 	bl	17df8 <bt_conn_create_frag_timeout>
   17e1c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17e1e:	7b73      	ldrb	r3, [r6, #13]
   17e20:	2b07      	cmp	r3, #7
   17e22:	d11a      	bne.n	17e5a <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   17e24:	2300      	movs	r3, #0
   17e26:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   17e28:	4b10      	ldr	r3, [pc, #64]	; (17e6c <create_frag+0x64>)
   17e2a:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   17e2e:	f100 0708 	add.w	r7, r0, #8
   17e32:	4638      	mov	r0, r7
   17e34:	f015 fe42 	bl	2dabc <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17e38:	4286      	cmp	r6, r0
   17e3a:	d212      	bcs.n	17e62 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   17e3c:	4b0b      	ldr	r3, [pc, #44]	; (17e6c <create_frag+0x64>)
   17e3e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17e42:	4632      	mov	r2, r6
   17e44:	f855 1f08 	ldr.w	r1, [r5, #8]!
   17e48:	4638      	mov	r0, r7
   17e4a:	f015 fe40 	bl	2dace <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17e4e:	4631      	mov	r1, r6
   17e50:	4628      	mov	r0, r5
   17e52:	f005 f9fb 	bl	1d24c <net_buf_simple_pull>
}
   17e56:	4620      	mov	r0, r4
   17e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   17e5a:	f005 f93d 	bl	1d0d8 <net_buf_unref>
		return NULL;
   17e5e:	2400      	movs	r4, #0
   17e60:	e7f9      	b.n	17e56 <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   17e62:	4638      	mov	r0, r7
   17e64:	f015 fe2a 	bl	2dabc <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17e68:	b286      	uxth	r6, r0
   17e6a:	e7ea      	b.n	17e42 <create_frag+0x3a>
   17e6c:	200002a8 	.word	0x200002a8

00017e70 <send_buf>:
{
   17e70:	b538      	push	{r3, r4, r5, lr}
   17e72:	4605      	mov	r5, r0
   17e74:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   17e76:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   17e78:	4a1b      	ldr	r2, [pc, #108]	; (17ee8 <send_buf+0x78>)
   17e7a:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   17e7e:	429a      	cmp	r2, r3
   17e80:	d21f      	bcs.n	17ec2 <send_buf+0x52>
	frag = create_frag(conn, buf);
   17e82:	f7ff ffc1 	bl	17e08 <create_frag>
	if (!frag) {
   17e86:	4601      	mov	r1, r0
   17e88:	b350      	cbz	r0, 17ee0 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17e8a:	2301      	movs	r3, #1
   17e8c:	2200      	movs	r2, #0
   17e8e:	4628      	mov	r0, r5
   17e90:	f7ff fa00 	bl	17294 <send_frag>
   17e94:	4603      	mov	r3, r0
   17e96:	b1c8      	cbz	r0, 17ecc <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   17e98:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   17e9a:	4a13      	ldr	r2, [pc, #76]	; (17ee8 <send_buf+0x78>)
   17e9c:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   17ea0:	429a      	cmp	r2, r3
   17ea2:	d215      	bcs.n	17ed0 <send_buf+0x60>
		frag = create_frag(conn, buf);
   17ea4:	4621      	mov	r1, r4
   17ea6:	4628      	mov	r0, r5
   17ea8:	f7ff ffae 	bl	17e08 <create_frag>
		if (!frag) {
   17eac:	4601      	mov	r1, r0
   17eae:	b1c8      	cbz	r0, 17ee4 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17eb0:	2301      	movs	r3, #1
   17eb2:	461a      	mov	r2, r3
   17eb4:	4628      	mov	r0, r5
   17eb6:	f7ff f9ed 	bl	17294 <send_frag>
   17eba:	4603      	mov	r3, r0
   17ebc:	2800      	cmp	r0, #0
   17ebe:	d1eb      	bne.n	17e98 <send_buf+0x28>
   17ec0:	e004      	b.n	17ecc <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   17ec2:	2300      	movs	r3, #0
   17ec4:	2202      	movs	r2, #2
   17ec6:	f7ff f9e5 	bl	17294 <send_frag>
   17eca:	4603      	mov	r3, r0
}
   17ecc:	4618      	mov	r0, r3
   17ece:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   17ed0:	2300      	movs	r3, #0
   17ed2:	2203      	movs	r2, #3
   17ed4:	4621      	mov	r1, r4
   17ed6:	4628      	mov	r0, r5
   17ed8:	f7ff f9dc 	bl	17294 <send_frag>
   17edc:	4603      	mov	r3, r0
   17ede:	e7f5      	b.n	17ecc <send_buf+0x5c>
		return false;
   17ee0:	2300      	movs	r3, #0
   17ee2:	e7f3      	b.n	17ecc <send_buf+0x5c>
			return false;
   17ee4:	2300      	movs	r3, #0
   17ee6:	e7f1      	b.n	17ecc <send_buf+0x5c>
   17ee8:	200002a8 	.word	0x200002a8

00017eec <bt_conn_process_tx>:
{
   17eec:	b538      	push	{r3, r4, r5, lr}
   17eee:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   17ef0:	7b43      	ldrb	r3, [r0, #13]
   17ef2:	b97b      	cbnz	r3, 17f14 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   17ef4:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17ef6:	f3bf 8f5b 	dmb	ish
   17efa:	e853 2f00 	ldrex	r2, [r3]
   17efe:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   17f02:	e843 1000 	strex	r0, r1, [r3]
   17f06:	2800      	cmp	r0, #0
   17f08:	d1f7      	bne.n	17efa <bt_conn_process_tx+0xe>
   17f0a:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   17f0e:	f012 0f40 	tst.w	r2, #64	; 0x40
   17f12:	d10d      	bne.n	17f30 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   17f14:	2200      	movs	r2, #0
   17f16:	2300      	movs	r3, #0
   17f18:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17f1c:	f005 f854 	bl	1cfc8 <net_buf_get>
	BT_ASSERT(buf);
   17f20:	4605      	mov	r5, r0
   17f22:	b148      	cbz	r0, 17f38 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   17f24:	4629      	mov	r1, r5
   17f26:	4620      	mov	r0, r4
   17f28:	f7ff ffa2 	bl	17e70 <send_buf>
   17f2c:	b188      	cbz	r0, 17f52 <bt_conn_process_tx+0x66>
}
   17f2e:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   17f30:	4620      	mov	r0, r4
   17f32:	f7ff faf3 	bl	1751c <conn_cleanup>
		return;
   17f36:	e7fa      	b.n	17f2e <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   17f38:	f240 22df 	movw	r2, #735	; 0x2df
   17f3c:	4907      	ldr	r1, [pc, #28]	; (17f5c <bt_conn_process_tx+0x70>)
   17f3e:	4808      	ldr	r0, [pc, #32]	; (17f60 <bt_conn_process_tx+0x74>)
   17f40:	f010 f9ff 	bl	28342 <printk>
   17f44:	4040      	eors	r0, r0
   17f46:	f380 8811 	msr	BASEPRI, r0
   17f4a:	f04f 0003 	mov.w	r0, #3
   17f4e:	df02      	svc	2
   17f50:	e7e8      	b.n	17f24 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   17f52:	4628      	mov	r0, r5
   17f54:	f005 f8c0 	bl	1d0d8 <net_buf_unref>
   17f58:	e7e9      	b.n	17f2e <bt_conn_process_tx+0x42>
   17f5a:	bf00      	nop
   17f5c:	00031384 	.word	0x00031384
   17f60:	0002f968 	.word	0x0002f968

00017f64 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   17f64:	4603      	mov	r3, r0
   17f66:	b140      	cbz	r0, 17f7a <bt_conn_auth_cb_register+0x16>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   17f68:	4a11      	ldr	r2, [pc, #68]	; (17fb0 <bt_conn_auth_cb_register+0x4c>)
   17f6a:	6812      	ldr	r2, [r2, #0]
   17f6c:	b9a2      	cbnz	r2, 17f98 <bt_conn_auth_cb_register+0x34>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   17f6e:	6902      	ldr	r2, [r0, #16]
   17f70:	b132      	cbz	r2, 17f80 <bt_conn_auth_cb_register+0x1c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   17f72:	4a0f      	ldr	r2, [pc, #60]	; (17fb0 <bt_conn_auth_cb_register+0x4c>)
   17f74:	6013      	str	r3, [r2, #0]
	return 0;
   17f76:	2000      	movs	r0, #0
   17f78:	4770      	bx	lr
		bt_auth = NULL;
   17f7a:	4b0d      	ldr	r3, [pc, #52]	; (17fb0 <bt_conn_auth_cb_register+0x4c>)
   17f7c:	6018      	str	r0, [r3, #0]
		return 0;
   17f7e:	4770      	bx	lr
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   17f80:	6802      	ldr	r2, [r0, #0]
	if (!cb->cancel &&
   17f82:	b962      	cbnz	r2, 17f9e <bt_conn_auth_cb_register+0x3a>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   17f84:	6842      	ldr	r2, [r0, #4]
   17f86:	b96a      	cbnz	r2, 17fa4 <bt_conn_auth_cb_register+0x40>
   17f88:	6882      	ldr	r2, [r0, #8]
   17f8a:	b972      	cbnz	r2, 17faa <bt_conn_auth_cb_register+0x46>
	     cb->pairing_confirm)) {
   17f8c:	6942      	ldr	r2, [r0, #20]
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   17f8e:	2a00      	cmp	r2, #0
   17f90:	d0ef      	beq.n	17f72 <bt_conn_auth_cb_register+0xe>
		return -EINVAL;
   17f92:	f06f 0015 	mvn.w	r0, #21
}
   17f96:	4770      	bx	lr
		return -EALREADY;
   17f98:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17f9c:	4770      	bx	lr
		return -EINVAL;
   17f9e:	f06f 0015 	mvn.w	r0, #21
   17fa2:	4770      	bx	lr
   17fa4:	f06f 0015 	mvn.w	r0, #21
   17fa8:	4770      	bx	lr
   17faa:	f06f 0015 	mvn.w	r0, #21
   17fae:	4770      	bx	lr
   17fb0:	200027b8 	.word	0x200027b8

00017fb4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17fb4:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   17fb6:	2400      	movs	r4, #0
   17fb8:	e006      	b.n	17fc8 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   17fba:	490a      	ldr	r1, [pc, #40]	; (17fe4 <bt_conn_init+0x30>)
   17fbc:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   17fc0:	4809      	ldr	r0, [pc, #36]	; (17fe8 <bt_conn_init+0x34>)
   17fc2:	f016 fe6f 	bl	2eca4 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   17fc6:	3401      	adds	r4, #1
   17fc8:	2c02      	cmp	r4, #2
   17fca:	ddf6      	ble.n	17fba <bt_conn_init+0x6>
	}

	bt_att_init();
   17fcc:	f014 fa55 	bl	2c47a <bt_att_init>

	err = bt_smp_init();
   17fd0:	f004 fcf6 	bl	1c9c0 <bt_smp_init>
	if (err) {
   17fd4:	4604      	mov	r4, r0
   17fd6:	b108      	cbz	r0, 17fdc <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17fd8:	4620      	mov	r0, r4
   17fda:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   17fdc:	f013 fd28 	bl	2ba30 <bt_l2cap_init>
	return 0;
   17fe0:	e7fa      	b.n	17fd8 <bt_conn_init+0x24>
   17fe2:	bf00      	nop
   17fe4:	200027c0 	.word	0x200027c0
   17fe8:	2000089c 	.word	0x2000089c

00017fec <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   17fec:	4a05      	ldr	r2, [pc, #20]	; (18004 <get_ident+0x18>)
   17fee:	7813      	ldrb	r3, [r2, #0]
   17ff0:	3301      	adds	r3, #1
   17ff2:	b2db      	uxtb	r3, r3
   17ff4:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   17ff6:	b90b      	cbnz	r3, 17ffc <get_ident+0x10>
		ident++;
   17ff8:	3301      	adds	r3, #1
   17ffa:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   17ffc:	4b01      	ldr	r3, [pc, #4]	; (18004 <get_ident+0x18>)
   17ffe:	7818      	ldrb	r0, [r3, #0]
   18000:	4770      	bx	lr
   18002:	bf00      	nop
   18004:	20003f73 	.word	0x20003f73

00018008 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18008:	b510      	push	{r4, lr}
   1800a:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1800c:	2300      	movs	r3, #0
   1800e:	2b00      	cmp	r3, #0
   18010:	dd06      	ble.n	18020 <l2cap_accept+0x18>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   18012:	2145      	movs	r1, #69	; 0x45
   18014:	480b      	ldr	r0, [pc, #44]	; (18044 <l2cap_accept+0x3c>)
   18016:	f010 fd35 	bl	28a84 <z_log_minimal_printk>

	return -ENOMEM;
   1801a:	f06f 000b 	mvn.w	r0, #11
}
   1801e:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   18020:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   18024:	0100      	lsls	r0, r0, #4
   18026:	4c08      	ldr	r4, [pc, #32]	; (18048 <l2cap_accept+0x40>)
   18028:	5820      	ldr	r0, [r4, r0]
   1802a:	b108      	cbz	r0, 18030 <l2cap_accept+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1802c:	3301      	adds	r3, #1
   1802e:	e7ee      	b.n	1800e <l2cap_accept+0x6>
		l2cap->chan.chan.ops = &ops;
   18030:	4a05      	ldr	r2, [pc, #20]	; (18048 <l2cap_accept+0x40>)
   18032:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   18036:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   1803a:	4c04      	ldr	r4, [pc, #16]	; (1804c <l2cap_accept+0x44>)
   1803c:	6044      	str	r4, [r0, #4]
		*chan = &l2cap->chan.chan;
   1803e:	6008      	str	r0, [r1, #0]
		return 0;
   18040:	2000      	movs	r0, #0
   18042:	e7ec      	b.n	1801e <l2cap_accept+0x16>
   18044:	00031634 	.word	0x00031634
   18048:	200018c0 	.word	0x200018c0
   1804c:	00031828 	.word	0x00031828

00018050 <le_conn_param_rsp>:
{
   18050:	b508      	push	{r3, lr}
	if (buf->len < sizeof(*rsp)) {
   18052:	898b      	ldrh	r3, [r1, #12]
   18054:	2b01      	cmp	r3, #1
   18056:	d900      	bls.n	1805a <le_conn_param_rsp+0xa>
}
   18058:	bd08      	pop	{r3, pc}
		BT_ERR("Too small LE conn param rsp");
   1805a:	2145      	movs	r1, #69	; 0x45
   1805c:	4801      	ldr	r0, [pc, #4]	; (18064 <le_conn_param_rsp+0x14>)
   1805e:	f010 fd11 	bl	28a84 <z_log_minimal_printk>
		return;
   18062:	e7f9      	b.n	18058 <le_conn_param_rsp+0x8>
   18064:	00031660 	.word	0x00031660

00018068 <l2cap_rtx_timeout>:
{
   18068:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   1806a:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   1806e:	f850 5c10 	ldr.w	r5, [r0, #-16]
	BT_ERR("chan %p timeout", chan);
   18072:	4622      	mov	r2, r4
   18074:	2145      	movs	r1, #69	; 0x45
   18076:	4805      	ldr	r0, [pc, #20]	; (1808c <l2cap_rtx_timeout+0x24>)
   18078:	f010 fd04 	bl	28a84 <z_log_minimal_printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1807c:	4621      	mov	r1, r4
   1807e:	4628      	mov	r0, r5
   18080:	f013 fbab 	bl	2b7da <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   18084:	4620      	mov	r0, r4
   18086:	f013 fbd0 	bl	2b82a <bt_l2cap_chan_del>
}
   1808a:	bd38      	pop	{r3, r4, r5, pc}
   1808c:	00031684 	.word	0x00031684

00018090 <l2cap_chan_add>:
{
   18090:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   18092:	b1d9      	cbz	r1, 180cc <l2cap_chan_add+0x3c>
   18094:	4604      	mov	r4, r0
   18096:	4615      	mov	r5, r2
   18098:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1809a:	490f      	ldr	r1, [pc, #60]	; (180d8 <l2cap_chan_add+0x48>)
   1809c:	f106 0010 	add.w	r0, r6, #16
   180a0:	f00b f826 	bl	230f0 <k_work_init_delayable>
	atomic_clear(chan->status);
   180a4:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   180a8:	2200      	movs	r2, #0
   180aa:	f3bf 8f5b 	dmb	ish
   180ae:	e853 1f00 	ldrex	r1, [r3]
   180b2:	e843 2000 	strex	r0, r2, [r3]
   180b6:	2800      	cmp	r0, #0
   180b8:	d1f9      	bne.n	180ae <l2cap_chan_add+0x1e>
   180ba:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   180be:	462a      	mov	r2, r5
   180c0:	4631      	mov	r1, r6
   180c2:	4620      	mov	r0, r4
   180c4:	f013 fbc4 	bl	2b850 <bt_l2cap_chan_add>
	return true;
   180c8:	2001      	movs	r0, #1
}
   180ca:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate L2CAP channel ID");
   180cc:	2145      	movs	r1, #69	; 0x45
   180ce:	4803      	ldr	r0, [pc, #12]	; (180dc <l2cap_chan_add+0x4c>)
   180d0:	f010 fcd8 	bl	28a84 <z_log_minimal_printk>
		return false;
   180d4:	2000      	movs	r0, #0
   180d6:	e7f8      	b.n	180ca <l2cap_chan_add+0x3a>
   180d8:	00018069 	.word	0x00018069
   180dc:	0003169c 	.word	0x0003169c

000180e0 <bt_l2cap_connected>:
{
   180e0:	b570      	push	{r4, r5, r6, lr}
   180e2:	b082      	sub	sp, #8
   180e4:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   180e6:	4c22      	ldr	r4, [pc, #136]	; (18170 <bt_l2cap_connected+0x90>)
   180e8:	e000      	b.n	180ec <bt_l2cap_connected+0xc>
   180ea:	340c      	adds	r4, #12
   180ec:	4b21      	ldr	r3, [pc, #132]	; (18174 <bt_l2cap_connected+0x94>)
   180ee:	429c      	cmp	r4, r3
   180f0:	d82f      	bhi.n	18152 <bt_l2cap_connected+0x72>
   180f2:	4b20      	ldr	r3, [pc, #128]	; (18174 <bt_l2cap_connected+0x94>)
   180f4:	429c      	cmp	r4, r3
   180f6:	d239      	bcs.n	1816c <bt_l2cap_connected+0x8c>
		if (fchan->accept(conn, &chan) < 0) {
   180f8:	6863      	ldr	r3, [r4, #4]
   180fa:	a901      	add	r1, sp, #4
   180fc:	4628      	mov	r0, r5
   180fe:	4798      	blx	r3
   18100:	2800      	cmp	r0, #0
   18102:	dbf2      	blt.n	180ea <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   18104:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   18106:	8823      	ldrh	r3, [r4, #0]
   18108:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1810c:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18110:	68a2      	ldr	r2, [r4, #8]
   18112:	4628      	mov	r0, r5
   18114:	f7ff ffbc 	bl	18090 <l2cap_chan_add>
   18118:	b340      	cbz	r0, 1816c <bt_l2cap_connected+0x8c>
		if (chan->ops->connected) {
   1811a:	9801      	ldr	r0, [sp, #4]
   1811c:	6843      	ldr	r3, [r0, #4]
   1811e:	681b      	ldr	r3, [r3, #0]
   18120:	b103      	cbz	r3, 18124 <bt_l2cap_connected+0x44>
			chan->ops->connected(chan);
   18122:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   18124:	9b01      	ldr	r3, [sp, #4]
   18126:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18128:	f3bf 8f5b 	dmb	ish
   1812c:	e853 2f00 	ldrex	r2, [r3]
   18130:	f042 0201 	orr.w	r2, r2, #1
   18134:	e843 2100 	strex	r1, r2, [r3]
   18138:	2900      	cmp	r1, #0
   1813a:	d1f7      	bne.n	1812c <bt_l2cap_connected+0x4c>
   1813c:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18140:	9801      	ldr	r0, [sp, #4]
   18142:	6843      	ldr	r3, [r0, #4]
   18144:	699b      	ldr	r3, [r3, #24]
   18146:	2b00      	cmp	r3, #0
   18148:	d0cf      	beq.n	180ea <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1814a:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1814e:	4798      	blx	r3
   18150:	e7cb      	b.n	180ea <bt_l2cap_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18152:	4e09      	ldr	r6, [pc, #36]	; (18178 <bt_l2cap_connected+0x98>)
   18154:	f240 1265 	movw	r2, #357	; 0x165
   18158:	4631      	mov	r1, r6
   1815a:	4808      	ldr	r0, [pc, #32]	; (1817c <bt_l2cap_connected+0x9c>)
   1815c:	f010 f8f1 	bl	28342 <printk>
   18160:	f240 1165 	movw	r1, #357	; 0x165
   18164:	4630      	mov	r0, r6
   18166:	f010 fc85 	bl	28a74 <assert_post_action>
   1816a:	e7c2      	b.n	180f2 <bt_l2cap_connected+0x12>
}
   1816c:	b002      	add	sp, #8
   1816e:	bd70      	pop	{r4, r5, r6, pc}
   18170:	0002f2a0 	.word	0x0002f2a0
   18174:	0002f2c4 	.word	0x0002f2c4
   18178:	000316c8 	.word	0x000316c8
   1817c:	0002f968 	.word	0x0002f968

00018180 <l2cap_create_le_sig_pdu>:
{
   18180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18182:	460c      	mov	r4, r1
   18184:	4616      	mov	r6, r2
   18186:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   18188:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1818c:	2300      	movs	r3, #0
   1818e:	2100      	movs	r1, #0
   18190:	4608      	mov	r0, r1
   18192:	f013 fbb3 	bl	2b8fc <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18196:	4607      	mov	r7, r0
   18198:	b140      	cbz	r0, 181ac <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   1819a:	2104      	movs	r1, #4
   1819c:	3008      	adds	r0, #8
   1819e:	f005 f8b3 	bl	1d308 <net_buf_simple_add>
	hdr->code = code;
   181a2:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   181a4:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   181a6:	8045      	strh	r5, [r0, #2]
}
   181a8:	4638      	mov	r0, r7
   181aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   181ac:	4622      	mov	r2, r4
   181ae:	2145      	movs	r1, #69	; 0x45
   181b0:	4801      	ldr	r0, [pc, #4]	; (181b8 <l2cap_create_le_sig_pdu+0x38>)
   181b2:	f010 fc67 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   181b6:	e7f7      	b.n	181a8 <l2cap_create_le_sig_pdu+0x28>
   181b8:	000316fc 	.word	0x000316fc

000181bc <l2cap_recv>:
{
   181bc:	b570      	push	{r4, r5, r6, lr}
   181be:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   181c0:	898b      	ldrh	r3, [r1, #12]
   181c2:	2b03      	cmp	r3, #3
   181c4:	d917      	bls.n	181f6 <l2cap_recv+0x3a>
   181c6:	4606      	mov	r6, r0
   181c8:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   181ca:	2104      	movs	r1, #4
   181cc:	f104 0008 	add.w	r0, r4, #8
   181d0:	f005 f85a 	bl	1d288 <net_buf_simple_pull_mem>
   181d4:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   181d6:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   181d8:	89a2      	ldrh	r2, [r4, #12]
   181da:	429a      	cmp	r2, r3
   181dc:	d112      	bne.n	18204 <l2cap_recv+0x48>
	if (!hdr->ident) {
   181de:	7843      	ldrb	r3, [r0, #1]
   181e0:	b1ab      	cbz	r3, 1820e <l2cap_recv+0x52>
	switch (hdr->code) {
   181e2:	7802      	ldrb	r2, [r0, #0]
   181e4:	2a01      	cmp	r2, #1
   181e6:	d00a      	beq.n	181fe <l2cap_recv+0x42>
   181e8:	2a13      	cmp	r2, #19
   181ea:	d115      	bne.n	18218 <l2cap_recv+0x5c>
		le_conn_param_rsp(l2cap, buf);
   181ec:	4621      	mov	r1, r4
   181ee:	4630      	mov	r0, r6
   181f0:	f7ff ff2e 	bl	18050 <le_conn_param_rsp>
		break;
   181f4:	e003      	b.n	181fe <l2cap_recv+0x42>
		BT_ERR("Too small L2CAP signaling PDU");
   181f6:	2145      	movs	r1, #69	; 0x45
   181f8:	480d      	ldr	r0, [pc, #52]	; (18230 <l2cap_recv+0x74>)
   181fa:	f010 fc43 	bl	28a84 <z_log_minimal_printk>
}
   181fe:	2000      	movs	r0, #0
   18200:	b002      	add	sp, #8
   18202:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18204:	2145      	movs	r1, #69	; 0x45
   18206:	480b      	ldr	r0, [pc, #44]	; (18234 <l2cap_recv+0x78>)
   18208:	f010 fc3c 	bl	28a84 <z_log_minimal_printk>
		return 0;
   1820c:	e7f7      	b.n	181fe <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1820e:	2145      	movs	r1, #69	; 0x45
   18210:	4809      	ldr	r0, [pc, #36]	; (18238 <l2cap_recv+0x7c>)
   18212:	f010 fc37 	bl	28a84 <z_log_minimal_printk>
		return 0;
   18216:	e7f2      	b.n	181fe <l2cap_recv+0x42>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18218:	2157      	movs	r1, #87	; 0x57
   1821a:	4808      	ldr	r0, [pc, #32]	; (1823c <l2cap_recv+0x80>)
   1821c:	f010 fc32 	bl	28a84 <z_log_minimal_printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   18220:	7869      	ldrb	r1, [r5, #1]
   18222:	2200      	movs	r2, #0
   18224:	9200      	str	r2, [sp, #0]
   18226:	4613      	mov	r3, r2
   18228:	6830      	ldr	r0, [r6, #0]
   1822a:	f013 fb81 	bl	2b930 <l2cap_send_reject>
		break;
   1822e:	e7e6      	b.n	181fe <l2cap_recv+0x42>
   18230:	0003172c 	.word	0x0003172c
   18234:	00031750 	.word	0x00031750
   18238:	00031778 	.word	0x00031778
   1823c:	000317a0 	.word	0x000317a0

00018240 <bt_l2cap_recv>:
{
   18240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18242:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18244:	898b      	ldrh	r3, [r1, #12]
   18246:	2b03      	cmp	r3, #3
   18248:	d911      	bls.n	1826e <bt_l2cap_recv+0x2e>
   1824a:	4605      	mov	r5, r0
   1824c:	4616      	mov	r6, r2
   1824e:	2104      	movs	r1, #4
   18250:	f104 0008 	add.w	r0, r4, #8
   18254:	f005 f818 	bl	1d288 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18258:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1825a:	4639      	mov	r1, r7
   1825c:	4628      	mov	r0, r5
   1825e:	f013 fba7 	bl	2b9b0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18262:	b160      	cbz	r0, 1827e <bt_l2cap_recv+0x3e>
	l2cap_chan_recv(chan, buf, complete);
   18264:	4632      	mov	r2, r6
   18266:	4621      	mov	r1, r4
   18268:	f013 faa9 	bl	2b7be <l2cap_chan_recv>
}
   1826c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Too small L2CAP PDU received");
   1826e:	2145      	movs	r1, #69	; 0x45
   18270:	4807      	ldr	r0, [pc, #28]	; (18290 <bt_l2cap_recv+0x50>)
   18272:	f010 fc07 	bl	28a84 <z_log_minimal_printk>
		net_buf_unref(buf);
   18276:	4620      	mov	r0, r4
   18278:	f004 ff2e 	bl	1d0d8 <net_buf_unref>
		return;
   1827c:	e7f6      	b.n	1826c <bt_l2cap_recv+0x2c>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1827e:	463a      	mov	r2, r7
   18280:	2157      	movs	r1, #87	; 0x57
   18282:	4804      	ldr	r0, [pc, #16]	; (18294 <bt_l2cap_recv+0x54>)
   18284:	f010 fbfe 	bl	28a84 <z_log_minimal_printk>
		net_buf_unref(buf);
   18288:	4620      	mov	r0, r4
   1828a:	f004 ff25 	bl	1d0d8 <net_buf_unref>
		return;
   1828e:	e7ed      	b.n	1826c <bt_l2cap_recv+0x2c>
   18290:	000317c4 	.word	0x000317c4
   18294:	000317e8 	.word	0x000317e8

00018298 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   18298:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1829a:	4b03      	ldr	r3, [pc, #12]	; (182a8 <att_cfm_sent+0x10>)
   1829c:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   182a0:	f013 fbc7 	bl	2ba32 <att_sent>
}
   182a4:	bd08      	pop	{r3, pc}
   182a6:	bf00      	nop
   182a8:	0002bd1b 	.word	0x0002bd1b

000182ac <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   182ac:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   182ae:	4b03      	ldr	r3, [pc, #12]	; (182bc <att_rsp_sent+0x10>)
   182b0:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   182b4:	f013 fbbd 	bl	2ba32 <att_sent>
}
   182b8:	bd08      	pop	{r3, pc}
   182ba:	bf00      	nop
   182bc:	0002bd37 	.word	0x0002bd37

000182c0 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   182c0:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   182c2:	4b03      	ldr	r3, [pc, #12]	; (182d0 <att_req_sent+0x10>)
   182c4:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   182c8:	f013 fbb3 	bl	2ba32 <att_sent>
}
   182cc:	bd08      	pop	{r3, pc}
   182ce:	bf00      	nop
   182d0:	0002bd03 	.word	0x0002bd03

000182d4 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   182d4:	4b08      	ldr	r3, [pc, #32]	; (182f8 <att_cb+0x24>)
   182d6:	4298      	cmp	r0, r3
   182d8:	d009      	beq.n	182ee <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   182da:	4b08      	ldr	r3, [pc, #32]	; (182fc <att_cb+0x28>)
   182dc:	4298      	cmp	r0, r3
   182de:	d008      	beq.n	182f2 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   182e0:	4b07      	ldr	r3, [pc, #28]	; (18300 <att_cb+0x2c>)
   182e2:	4298      	cmp	r0, r3
   182e4:	d001      	beq.n	182ea <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   182e6:	4807      	ldr	r0, [pc, #28]	; (18304 <att_cb+0x30>)
	}
}
   182e8:	4770      	bx	lr
		return att_req_sent;
   182ea:	4807      	ldr	r0, [pc, #28]	; (18308 <att_cb+0x34>)
   182ec:	4770      	bx	lr
		return att_rsp_sent;
   182ee:	4807      	ldr	r0, [pc, #28]	; (1830c <att_cb+0x38>)
   182f0:	4770      	bx	lr
		return att_cfm_sent;
   182f2:	4807      	ldr	r0, [pc, #28]	; (18310 <att_cb+0x3c>)
   182f4:	4770      	bx	lr
   182f6:	bf00      	nop
   182f8:	0002bd37 	.word	0x0002bd37
   182fc:	0002bd1b 	.word	0x0002bd1b
   18300:	0002bd03 	.word	0x0002bd03
   18304:	0002ba33 	.word	0x0002ba33
   18308:	000182c1 	.word	0x000182c1
   1830c:	000182ad 	.word	0x000182ad
   18310:	00018299 	.word	0x00018299

00018314 <chan_cb>:
{
   18314:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   18316:	6883      	ldr	r3, [r0, #8]
   18318:	7818      	ldrb	r0, [r3, #0]
   1831a:	f013 fbd3 	bl	2bac4 <att_op_get_type>
   1831e:	3801      	subs	r0, #1
   18320:	2804      	cmp	r0, #4
   18322:	d808      	bhi.n	18336 <chan_cb+0x22>
   18324:	e8df f000 	tbb	[pc, r0]
   18328:	09070305 	.word	0x09070305
   1832c:	05          	.byte	0x05
   1832d:	00          	.byte	0x00
   1832e:	4804      	ldr	r0, [pc, #16]	; (18340 <chan_cb+0x2c>)
   18330:	e000      	b.n	18334 <chan_cb+0x20>
		return chan_req_sent;
   18332:	4804      	ldr	r0, [pc, #16]	; (18344 <chan_cb+0x30>)
}
   18334:	bd08      	pop	{r3, pc}
		return NULL;
   18336:	2000      	movs	r0, #0
   18338:	e7fc      	b.n	18334 <chan_cb+0x20>
		return chan_cfm_sent;
   1833a:	4803      	ldr	r0, [pc, #12]	; (18348 <chan_cb+0x34>)
   1833c:	e7fa      	b.n	18334 <chan_cb+0x20>
   1833e:	bf00      	nop
   18340:	0002bd37 	.word	0x0002bd37
   18344:	0002bd03 	.word	0x0002bd03
   18348:	0002bd1b 	.word	0x0002bd1b

0001834c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1834c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1834e:	7b43      	ldrb	r3, [r0, #13]
   18350:	2b07      	cmp	r3, #7
   18352:	d111      	bne.n	18378 <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18354:	2104      	movs	r1, #4
   18356:	f013 fb2b 	bl	2b9b0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1835a:	4604      	mov	r4, r0
   1835c:	b190      	cbz	r0, 18384 <att_get+0x38>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1835e:	f3bf 8f5b 	dmb	ish
   18362:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   18366:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1836a:	f013 0f04 	tst.w	r3, #4
   1836e:	d10e      	bne.n	1838e <att_get+0x42>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   18370:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   18374:	4620      	mov	r0, r4
   18376:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
   18378:	2157      	movs	r1, #87	; 0x57
   1837a:	4808      	ldr	r0, [pc, #32]	; (1839c <att_get+0x50>)
   1837c:	f010 fb82 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   18380:	2400      	movs	r4, #0
   18382:	e7f7      	b.n	18374 <att_get+0x28>
		BT_ERR("Unable to find ATT channel");
   18384:	2145      	movs	r1, #69	; 0x45
   18386:	4806      	ldr	r0, [pc, #24]	; (183a0 <att_get+0x54>)
   18388:	f010 fb7c 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   1838c:	e7f2      	b.n	18374 <att_get+0x28>
		BT_WARN("ATT channel flagged as disconnected");
   1838e:	2157      	movs	r1, #87	; 0x57
   18390:	4804      	ldr	r0, [pc, #16]	; (183a4 <att_get+0x58>)
   18392:	f010 fb77 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   18396:	2400      	movs	r4, #0
   18398:	e7ec      	b.n	18374 <att_get+0x28>
   1839a:	bf00      	nop
   1839c:	0003184c 	.word	0x0003184c
   183a0:	00031860 	.word	0x00031860
   183a4:	00031880 	.word	0x00031880

000183a8 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   183a8:	b570      	push	{r4, r5, r6, lr}
   183aa:	b082      	sub	sp, #8
   183ac:	4605      	mov	r5, r0
   183ae:	460e      	mov	r6, r1
	return list->head;
   183b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   183b2:	b10b      	cbz	r3, 183b8 <att_chan_new+0x10>
   183b4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   183b8:	9301      	str	r3, [sp, #4]
	int quota = 0;
   183ba:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   183bc:	e008      	b.n	183d0 <att_chan_new+0x28>
		if (chan->att == att) {
			quota++;
   183be:	3201      	adds	r2, #1
   183c0:	e00b      	b.n	183da <att_chan_new+0x32>
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   183c2:	2145      	movs	r1, #69	; 0x45
   183c4:	4821      	ldr	r0, [pc, #132]	; (1844c <att_chan_new+0xa4>)
   183c6:	f010 fb5d 	bl	28a84 <z_log_minimal_printk>
			return NULL;
   183ca:	2400      	movs	r4, #0
   183cc:	e034      	b.n	18438 <att_chan_new+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   183ce:	9301      	str	r3, [sp, #4]
   183d0:	9c01      	ldr	r4, [sp, #4]
   183d2:	b174      	cbz	r4, 183f2 <att_chan_new+0x4a>
		if (chan->att == att) {
   183d4:	6823      	ldr	r3, [r4, #0]
   183d6:	42ab      	cmp	r3, r5
   183d8:	d0f1      	beq.n	183be <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   183da:	2a01      	cmp	r2, #1
   183dc:	d0f1      	beq.n	183c2 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   183de:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   183e2:	d0f4      	beq.n	183ce <att_chan_new+0x26>
	return node->next;
   183e4:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   183e8:	2b00      	cmp	r3, #0
   183ea:	d0f0      	beq.n	183ce <att_chan_new+0x26>
   183ec:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   183f0:	e7ed      	b.n	183ce <att_chan_new+0x26>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   183f2:	2200      	movs	r2, #0
   183f4:	2300      	movs	r3, #0
   183f6:	a901      	add	r1, sp, #4
   183f8:	4815      	ldr	r0, [pc, #84]	; (18450 <att_chan_new+0xa8>)
   183fa:	f009 fc71 	bl	21ce0 <k_mem_slab_alloc>
   183fe:	b9f0      	cbnz	r0, 1843e <att_chan_new+0x96>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   18400:	f44f 72ac 	mov.w	r2, #344	; 0x158
   18404:	2100      	movs	r1, #0
   18406:	9801      	ldr	r0, [sp, #4]
   18408:	f012 fa6d 	bl	2a8e6 <memset>
	chan->chan.chan.ops = &ops;
   1840c:	9801      	ldr	r0, [sp, #4]
   1840e:	4b11      	ldr	r3, [pc, #68]	; (18454 <att_chan_new+0xac>)
   18410:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   18412:	f500 7080 	add.w	r0, r0, #256	; 0x100
	z_impl_k_queue_init(queue);
   18416:	f016 fc38 	bl	2ec8a <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1841a:	9b01      	ldr	r3, [sp, #4]
   1841c:	33f8      	adds	r3, #248	; 0xf8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1841e:	f3bf 8f5b 	dmb	ish
   18422:	e853 2f00 	ldrex	r2, [r3]
   18426:	e843 6100 	strex	r1, r6, [r3]
   1842a:	2900      	cmp	r1, #0
   1842c:	d1f9      	bne.n	18422 <att_chan_new+0x7a>
   1842e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18432:	9b01      	ldr	r3, [sp, #4]
   18434:	601d      	str	r5, [r3, #0]

	return chan;
   18436:	9c01      	ldr	r4, [sp, #4]
}
   18438:	4620      	mov	r0, r4
   1843a:	b002      	add	sp, #8
   1843c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1843e:	682a      	ldr	r2, [r5, #0]
   18440:	2145      	movs	r1, #69	; 0x45
   18442:	4805      	ldr	r0, [pc, #20]	; (18458 <att_chan_new+0xb0>)
   18444:	f010 fb1e 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   18448:	e7f6      	b.n	18438 <att_chan_new+0x90>
   1844a:	bf00      	nop
   1844c:	000318ac 	.word	0x000318ac
   18450:	20000784 	.word	0x20000784
   18454:	200005b8 	.word	0x200005b8
   18458:	000318d8 	.word	0x000318d8

0001845c <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1845c:	b570      	push	{r4, r5, r6, lr}
   1845e:	b082      	sub	sp, #8
   18460:	4604      	mov	r4, r0
   18462:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18464:	2200      	movs	r2, #0
   18466:	2300      	movs	r3, #0
   18468:	a901      	add	r1, sp, #4
   1846a:	4813      	ldr	r0, [pc, #76]	; (184b8 <bt_att_accept+0x5c>)
   1846c:	f009 fc38 	bl	21ce0 <k_mem_slab_alloc>
   18470:	b9b0      	cbnz	r0, 184a0 <bt_att_accept+0x44>
   18472:	4606      	mov	r6, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   18474:	2230      	movs	r2, #48	; 0x30
   18476:	2100      	movs	r1, #0
   18478:	9801      	ldr	r0, [sp, #4]
   1847a:	f012 fa34 	bl	2a8e6 <memset>
	att->conn = conn;
   1847e:	9b01      	ldr	r3, [sp, #4]
   18480:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   18482:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   18484:	2100      	movs	r1, #0
   18486:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   18488:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1848a:	6281      	str	r1, [r0, #40]	; 0x28
	list->tail = NULL;
   1848c:	62c1      	str	r1, [r0, #44]	; 0x2c
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   1848e:	f7ff ff8b 	bl	183a8 <att_chan_new>
	if (!chan) {
   18492:	4603      	mov	r3, r0
   18494:	b160      	cbz	r0, 184b0 <bt_att_accept+0x54>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   18496:	3308      	adds	r3, #8
   18498:	602b      	str	r3, [r5, #0]

	return 0;
}
   1849a:	4630      	mov	r0, r6
   1849c:	b002      	add	sp, #8
   1849e:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT context for conn %p", conn);
   184a0:	4622      	mov	r2, r4
   184a2:	2145      	movs	r1, #69	; 0x45
   184a4:	4805      	ldr	r0, [pc, #20]	; (184bc <bt_att_accept+0x60>)
   184a6:	f010 faed 	bl	28a84 <z_log_minimal_printk>
		return -ENOMEM;
   184aa:	f06f 060b 	mvn.w	r6, #11
   184ae:	e7f4      	b.n	1849a <bt_att_accept+0x3e>
		return -ENOMEM;
   184b0:	f06f 060b 	mvn.w	r6, #11
   184b4:	e7f1      	b.n	1849a <bt_att_accept+0x3e>
   184b6:	bf00      	nop
   184b8:	20000764 	.word	0x20000764
   184bc:	00031904 	.word	0x00031904

000184c0 <bt_att_released>:
{
   184c0:	b500      	push	{lr}
   184c2:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   184c4:	3808      	subs	r0, #8
   184c6:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   184c8:	a901      	add	r1, sp, #4
   184ca:	4803      	ldr	r0, [pc, #12]	; (184d8 <bt_att_released+0x18>)
   184cc:	f009 fc6a 	bl	21da4 <k_mem_slab_free>
}
   184d0:	b003      	add	sp, #12
   184d2:	f85d fb04 	ldr.w	pc, [sp], #4
   184d6:	bf00      	nop
   184d8:	20000784 	.word	0x20000784

000184dc <chan_send>:
{
   184dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   184e0:	b083      	sub	sp, #12
   184e2:	4604      	mov	r4, r0
   184e4:	460d      	mov	r5, r1
   184e6:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   184e8:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   184ea:	781b      	ldrb	r3, [r3, #0]
   184ec:	2bd2      	cmp	r3, #210	; 0xd2
   184ee:	d021      	beq.n	18534 <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   184f0:	f105 0008 	add.w	r0, r5, #8
   184f4:	f015 fade 	bl	2dab4 <net_buf_simple_headroom>
   184f8:	b287      	uxth	r7, r0
	state->len = buf->len;
   184fa:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   184fe:	b346      	cbz	r6, 18552 <chan_send+0x76>
   18500:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18504:	f854 8b08 	ldr.w	r8, [r4], #8
   18508:	4630      	mov	r0, r6
   1850a:	f7ff fee3 	bl	182d4 <att_cb>
   1850e:	4603      	mov	r3, r0
   18510:	f8d8 0000 	ldr.w	r0, [r8]
   18514:	9400      	str	r4, [sp, #0]
   18516:	462a      	mov	r2, r5
   18518:	2104      	movs	r1, #4
   1851a:	f013 f9f4 	bl	2b906 <bt_l2cap_send_cb>
	if (err) {
   1851e:	4680      	mov	r8, r0
   18520:	b120      	cbz	r0, 1852c <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   18522:	6928      	ldr	r0, [r5, #16]
   18524:	4438      	add	r0, r7
   18526:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   18528:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   1852c:	4640      	mov	r0, r8
   1852e:	b003      	add	sp, #12
   18530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   18534:	6803      	ldr	r3, [r0, #0]
   18536:	6818      	ldr	r0, [r3, #0]
   18538:	f015 f8cf 	bl	2d6da <bt_smp_sign>
		if (err) {
   1853c:	4680      	mov	r8, r0
   1853e:	2800      	cmp	r0, #0
   18540:	d0d6      	beq.n	184f0 <chan_send+0x14>
			BT_ERR("Error signing data");
   18542:	2145      	movs	r1, #69	; 0x45
   18544:	4805      	ldr	r0, [pc, #20]	; (1855c <chan_send+0x80>)
   18546:	f010 fa9d 	bl	28a84 <z_log_minimal_printk>
			net_buf_unref(buf);
   1854a:	4628      	mov	r0, r5
   1854c:	f004 fdc4 	bl	1d0d8 <net_buf_unref>
			return err;
   18550:	e7ec      	b.n	1852c <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   18552:	4628      	mov	r0, r5
   18554:	f7ff fede 	bl	18314 <chan_cb>
   18558:	4606      	mov	r6, r0
   1855a:	e7d1      	b.n	18500 <chan_send+0x24>
   1855c:	00031930 	.word	0x00031930

00018560 <bt_att_chan_req_send>:
{
   18560:	b570      	push	{r4, r5, r6, lr}
   18562:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(chan);
   18564:	4605      	mov	r5, r0
   18566:	b1b0      	cbz	r0, 18596 <bt_att_chan_req_send+0x36>
	__ASSERT_NO_MSG(req);
   18568:	b314      	cbz	r4, 185b0 <bt_att_chan_req_send+0x50>
	__ASSERT_NO_MSG(req->func);
   1856a:	6863      	ldr	r3, [r4, #4]
   1856c:	b36b      	cbz	r3, 185ca <bt_att_chan_req_send+0x6a>
	__ASSERT_NO_MSG(!chan->req);
   1856e:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
   18572:	b15b      	cbz	r3, 1858c <bt_att_chan_req_send+0x2c>
   18574:	4e1b      	ldr	r6, [pc, #108]	; (185e4 <bt_att_chan_req_send+0x84>)
   18576:	f240 2235 	movw	r2, #565	; 0x235
   1857a:	4631      	mov	r1, r6
   1857c:	481a      	ldr	r0, [pc, #104]	; (185e8 <bt_att_chan_req_send+0x88>)
   1857e:	f00f fee0 	bl	28342 <printk>
   18582:	f240 2135 	movw	r1, #565	; 0x235
   18586:	4630      	mov	r0, r6
   18588:	f010 fa74 	bl	28a74 <assert_post_action>
	return chan_req_send(chan, req);
   1858c:	4621      	mov	r1, r4
   1858e:	4628      	mov	r0, r5
   18590:	f013 fb2d 	bl	2bbee <chan_req_send>
}
   18594:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(chan);
   18596:	4e13      	ldr	r6, [pc, #76]	; (185e4 <bt_att_chan_req_send+0x84>)
   18598:	f240 2232 	movw	r2, #562	; 0x232
   1859c:	4631      	mov	r1, r6
   1859e:	4812      	ldr	r0, [pc, #72]	; (185e8 <bt_att_chan_req_send+0x88>)
   185a0:	f00f fecf 	bl	28342 <printk>
   185a4:	f240 2132 	movw	r1, #562	; 0x232
   185a8:	4630      	mov	r0, r6
   185aa:	f010 fa63 	bl	28a74 <assert_post_action>
   185ae:	e7db      	b.n	18568 <bt_att_chan_req_send+0x8>
	__ASSERT_NO_MSG(req);
   185b0:	4e0c      	ldr	r6, [pc, #48]	; (185e4 <bt_att_chan_req_send+0x84>)
   185b2:	f240 2233 	movw	r2, #563	; 0x233
   185b6:	4631      	mov	r1, r6
   185b8:	480b      	ldr	r0, [pc, #44]	; (185e8 <bt_att_chan_req_send+0x88>)
   185ba:	f00f fec2 	bl	28342 <printk>
   185be:	f240 2133 	movw	r1, #563	; 0x233
   185c2:	4630      	mov	r0, r6
   185c4:	f010 fa56 	bl	28a74 <assert_post_action>
   185c8:	e7cf      	b.n	1856a <bt_att_chan_req_send+0xa>
	__ASSERT_NO_MSG(req->func);
   185ca:	4e06      	ldr	r6, [pc, #24]	; (185e4 <bt_att_chan_req_send+0x84>)
   185cc:	f44f 720d 	mov.w	r2, #564	; 0x234
   185d0:	4631      	mov	r1, r6
   185d2:	4805      	ldr	r0, [pc, #20]	; (185e8 <bt_att_chan_req_send+0x88>)
   185d4:	f00f feb5 	bl	28342 <printk>
   185d8:	f44f 710d 	mov.w	r1, #564	; 0x234
   185dc:	4630      	mov	r0, r6
   185de:	f010 fa49 	bl	28a74 <assert_post_action>
   185e2:	e7c4      	b.n	1856e <bt_att_chan_req_send+0xe>
   185e4:	00031948 	.word	0x00031948
   185e8:	0002f968 	.word	0x0002f968

000185ec <read_group_cb>:
{
   185ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   185ee:	b085      	sub	sp, #20
   185f0:	4605      	mov	r5, r0
   185f2:	460e      	mov	r6, r1
   185f4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   185f6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   185f8:	2300      	movs	r3, #0
   185fa:	f88d 3008 	strb.w	r3, [sp, #8]
   185fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18602:	f8ad 300a 	strh.w	r3, [sp, #10]
   18606:	a902      	add	r1, sp, #8
   18608:	6800      	ldr	r0, [r0, #0]
   1860a:	f012 fa80 	bl	2ab0e <bt_uuid_cmp>
   1860e:	b158      	cbz	r0, 18628 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18610:	2300      	movs	r3, #0
   18612:	f88d 300c 	strb.w	r3, [sp, #12]
   18616:	f642 0301 	movw	r3, #10241	; 0x2801
   1861a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1861e:	a903      	add	r1, sp, #12
   18620:	6828      	ldr	r0, [r5, #0]
   18622:	f012 fa74 	bl	2ab0e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18626:	bb30      	cbnz	r0, 18676 <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18628:	6861      	ldr	r1, [r4, #4]
   1862a:	6828      	ldr	r0, [r5, #0]
   1862c:	f012 fa6f 	bl	2ab0e <bt_uuid_cmp>
   18630:	bb48      	cbnz	r0, 18686 <read_group_cb+0x9a>
	if (data->rsp->len &&
   18632:	68e3      	ldr	r3, [r4, #12]
   18634:	781a      	ldrb	r2, [r3, #0]
   18636:	b132      	cbz	r2, 18646 <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18638:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   1863c:	68a1      	ldr	r1, [r4, #8]
   1863e:	8989      	ldrh	r1, [r1, #12]
   18640:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   18642:	4293      	cmp	r3, r2
   18644:	db24      	blt.n	18690 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18646:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   18648:	2104      	movs	r1, #4
   1864a:	3008      	adds	r0, #8
   1864c:	f004 fe5c 	bl	1d308 <net_buf_simple_add>
   18650:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18652:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18654:	6923      	ldr	r3, [r4, #16]
   18656:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18658:	9401      	str	r4, [sp, #4]
   1865a:	4b10      	ldr	r3, [pc, #64]	; (1869c <read_group_cb+0xb0>)
   1865c:	9300      	str	r3, [sp, #0]
   1865e:	2300      	movs	r3, #0
   18660:	68a2      	ldr	r2, [r4, #8]
   18662:	4629      	mov	r1, r5
   18664:	4638      	mov	r0, r7
   18666:	f013 fc45 	bl	2bef4 <att_chan_read>
	if (read < 0) {
   1866a:	2800      	cmp	r0, #0
   1866c:	db12      	blt.n	18694 <read_group_cb+0xa8>
	if (!data->group) {
   1866e:	6923      	ldr	r3, [r4, #16]
   18670:	b193      	cbz	r3, 18698 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   18672:	2001      	movs	r0, #1
   18674:	e00a      	b.n	1868c <read_group_cb+0xa0>
		if (data->group &&
   18676:	6923      	ldr	r3, [r4, #16]
   18678:	b11b      	cbz	r3, 18682 <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1867a:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1867c:	42b2      	cmp	r2, r6
   1867e:	d200      	bcs.n	18682 <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18680:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18682:	2001      	movs	r0, #1
   18684:	e002      	b.n	1868c <read_group_cb+0xa0>
		data->group = NULL;
   18686:	2300      	movs	r3, #0
   18688:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1868a:	2001      	movs	r0, #1
}
   1868c:	b005      	add	sp, #20
   1868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   18690:	2000      	movs	r0, #0
   18692:	e7fb      	b.n	1868c <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   18694:	2000      	movs	r0, #0
   18696:	e7f9      	b.n	1868c <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   18698:	2000      	movs	r0, #0
   1869a:	e7f7      	b.n	1868c <read_group_cb+0xa0>
   1869c:	0002ba97 	.word	0x0002ba97

000186a0 <read_type_cb>:
{
   186a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   186a4:	b083      	sub	sp, #12
   186a6:	4606      	mov	r6, r0
   186a8:	4688      	mov	r8, r1
   186aa:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   186ac:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   186ae:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   186b0:	6851      	ldr	r1, [r2, #4]
   186b2:	6800      	ldr	r0, [r0, #0]
   186b4:	f012 fa2b 	bl	2ab0e <bt_uuid_cmp>
   186b8:	b120      	cbz	r0, 186c4 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   186ba:	2501      	movs	r5, #1
}
   186bc:	4628      	mov	r0, r5
   186be:	b003      	add	sp, #12
   186c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   186c4:	2215      	movs	r2, #21
   186c6:	4631      	mov	r1, r6
   186c8:	4628      	mov	r0, r5
   186ca:	f014 fa6d 	bl	2cba8 <bt_gatt_check_perm>
   186ce:	4605      	mov	r5, r0
   186d0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   186d2:	b130      	cbz	r0, 186e2 <read_type_cb+0x42>
		if (data->rsp->len) {
   186d4:	68e3      	ldr	r3, [r4, #12]
   186d6:	781b      	ldrb	r3, [r3, #0]
   186d8:	b10b      	cbz	r3, 186de <read_type_cb+0x3e>
			data->err = 0x00;
   186da:	2300      	movs	r3, #0
   186dc:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   186de:	2500      	movs	r5, #0
   186e0:	e7ec      	b.n	186bc <read_type_cb+0x1c>
	data->err = 0x00;
   186e2:	f04f 0900 	mov.w	r9, #0
   186e6:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   186ea:	68a0      	ldr	r0, [r4, #8]
   186ec:	f004 fd46 	bl	1d17c <net_buf_frag_last>
   186f0:	2102      	movs	r1, #2
   186f2:	3008      	adds	r0, #8
   186f4:	f004 fe08 	bl	1d308 <net_buf_simple_add>
   186f8:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   186fa:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   186fe:	9401      	str	r4, [sp, #4]
   18700:	4b11      	ldr	r3, [pc, #68]	; (18748 <read_type_cb+0xa8>)
   18702:	9300      	str	r3, [sp, #0]
   18704:	464b      	mov	r3, r9
   18706:	68a2      	ldr	r2, [r4, #8]
   18708:	4631      	mov	r1, r6
   1870a:	4638      	mov	r0, r7
   1870c:	f013 fbf2 	bl	2bef4 <att_chan_read>
	if (read < 0) {
   18710:	2800      	cmp	r0, #0
   18712:	db07      	blt.n	18724 <read_type_cb+0x84>
	if (!data->item) {
   18714:	6923      	ldr	r3, [r4, #16]
   18716:	2b00      	cmp	r3, #0
   18718:	d0d0      	beq.n	186bc <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1871a:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   1871e:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   18720:	2200      	movs	r2, #0

	while (buf) {
   18722:	e006      	b.n	18732 <read_type_cb+0x92>
		data->err = err_to_att(read);
   18724:	f013 f99b 	bl	2ba5e <err_to_att>
   18728:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1872a:	e7c7      	b.n	186bc <read_type_cb+0x1c>
		bytes += buf->len;
   1872c:	8999      	ldrh	r1, [r3, #12]
   1872e:	440a      	add	r2, r1
		buf = buf->frags;
   18730:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   18732:	2b00      	cmp	r3, #0
   18734:	d1fa      	bne.n	1872c <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18736:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18738:	68e3      	ldr	r3, [r4, #12]
   1873a:	781d      	ldrb	r5, [r3, #0]
   1873c:	42aa      	cmp	r2, r5
   1873e:	bf94      	ite	ls
   18740:	2500      	movls	r5, #0
   18742:	2501      	movhi	r5, #1
   18744:	e7ba      	b.n	186bc <read_type_cb+0x1c>
   18746:	bf00      	nop
   18748:	0002ba6f 	.word	0x0002ba6f

0001874c <find_type_cb>:
{
   1874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18750:	b093      	sub	sp, #76	; 0x4c
   18752:	4606      	mov	r6, r0
   18754:	460f      	mov	r7, r1
   18756:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   18758:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1875c:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18760:	2300      	movs	r3, #0
   18762:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   18766:	f642 0301 	movw	r3, #10241	; 0x2801
   1876a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1876e:	a910      	add	r1, sp, #64	; 0x40
   18770:	6800      	ldr	r0, [r0, #0]
   18772:	f012 f9cc 	bl	2ab0e <bt_uuid_cmp>
   18776:	b928      	cbnz	r0, 18784 <find_type_cb+0x38>
	data->group = NULL;
   18778:	2300      	movs	r3, #0
   1877a:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   1877c:	2001      	movs	r0, #1
}
   1877e:	b013      	add	sp, #76	; 0x4c
   18780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18784:	2300      	movs	r3, #0
   18786:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1878a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1878e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   18792:	a911      	add	r1, sp, #68	; 0x44
   18794:	6830      	ldr	r0, [r6, #0]
   18796:	f012 f9ba 	bl	2ab0e <bt_uuid_cmp>
   1879a:	b928      	cbnz	r0, 187a8 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1879c:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   187a0:	6868      	ldr	r0, [r5, #4]
   187a2:	4603      	mov	r3, r0
	size_t bytes = 0;
   187a4:	2400      	movs	r4, #0
	while (buf) {
   187a6:	e00a      	b.n	187be <find_type_cb+0x72>
		if (data->group &&
   187a8:	68ab      	ldr	r3, [r5, #8]
   187aa:	b11b      	cbz	r3, 187b4 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   187ac:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   187ae:	42ba      	cmp	r2, r7
   187b0:	d200      	bcs.n	187b4 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   187b2:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   187b4:	2001      	movs	r0, #1
   187b6:	e7e2      	b.n	1877e <find_type_cb+0x32>
		bytes += buf->len;
   187b8:	899a      	ldrh	r2, [r3, #12]
   187ba:	4414      	add	r4, r2
		buf = buf->frags;
   187bc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   187be:	2b00      	cmp	r3, #0
   187c0:	d1fa      	bne.n	187b8 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   187c2:	1b0c      	subs	r4, r1, r4
   187c4:	2c03      	cmp	r4, #3
   187c6:	d801      	bhi.n	187cc <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   187c8:	2000      	movs	r0, #0
   187ca:	e7d8      	b.n	1877e <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   187cc:	f004 fcd6 	bl	1d17c <net_buf_frag_last>
   187d0:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   187d2:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   187d6:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   187d8:	2200      	movs	r2, #0
	while (buf) {
   187da:	b11b      	cbz	r3, 187e4 <find_type_cb+0x98>
		bytes += buf->len;
   187dc:	8999      	ldrh	r1, [r3, #12]
   187de:	440a      	add	r2, r1
		buf = buf->frags;
   187e0:	681b      	ldr	r3, [r3, #0]
   187e2:	e7fa      	b.n	187da <find_type_cb+0x8e>
   187e4:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   187e8:	f104 0b08 	add.w	fp, r4, #8
   187ec:	4658      	mov	r0, fp
   187ee:	f015 f965 	bl	2dabc <net_buf_simple_tailroom>
   187f2:	4582      	cmp	sl, r0
   187f4:	d22a      	bcs.n	1884c <find_type_cb+0x100>
   187f6:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   187fa:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   187fc:	2200      	movs	r2, #0
	while (buf) {
   187fe:	e002      	b.n	18806 <find_type_cb+0xba>
		bytes += buf->len;
   18800:	8999      	ldrh	r1, [r3, #12]
   18802:	440a      	add	r2, r1
		buf = buf->frags;
   18804:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   18806:	2b00      	cmp	r3, #0
   18808:	d1fa      	bne.n	18800 <find_type_cb+0xb4>
   1880a:	1a80      	subs	r0, r0, r2
	if (!len) {
   1880c:	b310      	cbz	r0, 18854 <find_type_cb+0x108>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1880e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   18812:	2300      	movs	r3, #0
   18814:	9300      	str	r3, [sp, #0]
   18816:	2310      	movs	r3, #16
   18818:	aa0c      	add	r2, sp, #48	; 0x30
   1881a:	4631      	mov	r1, r6
   1881c:	4648      	mov	r0, r9
   1881e:	47c0      	blx	r8
	if (read < 0) {
   18820:	1e06      	subs	r6, r0, #0
   18822:	dba9      	blt.n	18778 <find_type_cb+0x2c>
	if (read != data->value_len) {
   18824:	7c2a      	ldrb	r2, [r5, #16]
   18826:	42b2      	cmp	r2, r6
   18828:	d030      	beq.n	1888c <find_type_cb+0x140>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1882a:	68e9      	ldr	r1, [r5, #12]
   1882c:	a807      	add	r0, sp, #28
   1882e:	f012 f98c 	bl	2ab4a <bt_uuid_create>
   18832:	b1f8      	cbz	r0, 18874 <find_type_cb+0x128>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18834:	b2f2      	uxtb	r2, r6
   18836:	a90c      	add	r1, sp, #48	; 0x30
   18838:	a802      	add	r0, sp, #8
   1883a:	f012 f986 	bl	2ab4a <bt_uuid_create>
   1883e:	b1f8      	cbz	r0, 18880 <find_type_cb+0x134>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18840:	a902      	add	r1, sp, #8
   18842:	a807      	add	r0, sp, #28
   18844:	f012 f963 	bl	2ab0e <bt_uuid_cmp>
   18848:	b340      	cbz	r0, 1889c <find_type_cb+0x150>
   1884a:	e795      	b.n	18778 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   1884c:	4658      	mov	r0, fp
   1884e:	f015 f935 	bl	2dabc <net_buf_simple_tailroom>
   18852:	e7db      	b.n	1880c <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18854:	686b      	ldr	r3, [r5, #4]
   18856:	7998      	ldrb	r0, [r3, #6]
   18858:	f004 fad4 	bl	1ce04 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1885c:	2200      	movs	r2, #0
   1885e:	2300      	movs	r3, #0
   18860:	f015 f919 	bl	2da96 <net_buf_alloc_fixed>
		if (!frag) {
   18864:	4604      	mov	r4, r0
   18866:	2800      	cmp	r0, #0
   18868:	d089      	beq.n	1877e <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   1886a:	4601      	mov	r1, r0
   1886c:	6868      	ldr	r0, [r5, #4]
   1886e:	f004 fccb 	bl	1d208 <net_buf_frag_add>
   18872:	e7cc      	b.n	1880e <find_type_cb+0xc2>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   18874:	7c2a      	ldrb	r2, [r5, #16]
   18876:	2157      	movs	r1, #87	; 0x57
   18878:	480f      	ldr	r0, [pc, #60]	; (188b8 <find_type_cb+0x16c>)
   1887a:	f010 f903 	bl	28a84 <z_log_minimal_printk>
			goto skip;
   1887e:	e77b      	b.n	18778 <find_type_cb+0x2c>
			BT_WARN("Unable to create UUID: size %d", read);
   18880:	4632      	mov	r2, r6
   18882:	2157      	movs	r1, #87	; 0x57
   18884:	480d      	ldr	r0, [pc, #52]	; (188bc <find_type_cb+0x170>)
   18886:	f010 f8fd 	bl	28a84 <z_log_minimal_printk>
			goto skip;
   1888a:	e775      	b.n	18778 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   1888c:	4632      	mov	r2, r6
   1888e:	a90c      	add	r1, sp, #48	; 0x30
   18890:	68e8      	ldr	r0, [r5, #12]
   18892:	f011 ffd7 	bl	2a844 <memcmp>
   18896:	2800      	cmp	r0, #0
   18898:	f47f af6e 	bne.w	18778 <find_type_cb+0x2c>
	data->err = 0x00;
   1889c:	2300      	movs	r3, #0
   1889e:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   188a0:	2104      	movs	r1, #4
   188a2:	f104 0008 	add.w	r0, r4, #8
   188a6:	f004 fd2f 	bl	1d308 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   188aa:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   188ac:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   188ae:	68ab      	ldr	r3, [r5, #8]
   188b0:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   188b2:	2001      	movs	r0, #1
   188b4:	e763      	b.n	1877e <find_type_cb+0x32>
   188b6:	bf00      	nop
   188b8:	00031978 	.word	0x00031978
   188bc:	0003199c 	.word	0x0003199c

000188c0 <att_get_fixed_chan>:
{
   188c0:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   188c2:	2104      	movs	r1, #4
   188c4:	f013 f861 	bl	2b98a <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   188c8:	4604      	mov	r4, r0
   188ca:	b110      	cbz	r0, 188d2 <att_get_fixed_chan+0x12>
}
   188cc:	f1a4 0008 	sub.w	r0, r4, #8
   188d0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(chan, "No ATT channel found");
   188d2:	4d06      	ldr	r5, [pc, #24]	; (188ec <att_get_fixed_chan+0x2c>)
   188d4:	f640 2229 	movw	r2, #2601	; 0xa29
   188d8:	4629      	mov	r1, r5
   188da:	4805      	ldr	r0, [pc, #20]	; (188f0 <att_get_fixed_chan+0x30>)
   188dc:	f00f fd31 	bl	28342 <printk>
   188e0:	f640 2129 	movw	r1, #2601	; 0xa29
   188e4:	4628      	mov	r0, r5
   188e6:	f010 f8c5 	bl	28a74 <assert_post_action>
   188ea:	e7ef      	b.n	188cc <att_get_fixed_chan+0xc>
   188ec:	00031948 	.word	0x00031948
   188f0:	0002f968 	.word	0x0002f968

000188f4 <bt_att_connected>:
{
   188f4:	b538      	push	{r3, r4, r5, lr}
   188f6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   188f8:	4605      	mov	r5, r0
   188fa:	f855 0908 	ldr.w	r0, [r5], #-8
   188fe:	f7ff ffdf 	bl	188c0 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   18902:	4629      	mov	r1, r5
   18904:	6800      	ldr	r0, [r0, #0]
   18906:	f013 f95e 	bl	2bbc6 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1890a:	f3bf 8f5b 	dmb	ish
   1890e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   18912:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   18916:	f013 0f08 	tst.w	r3, #8
   1891a:	d104      	bne.n	18926 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1891c:	2317      	movs	r3, #23
   1891e:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18922:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   18926:	4628      	mov	r0, r5
   18928:	f013 fc0f 	bl	2c14a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1892c:	4902      	ldr	r1, [pc, #8]	; (18938 <bt_att_connected+0x44>)
   1892e:	f504 708c 	add.w	r0, r4, #280	; 0x118
   18932:	f00a fbdd 	bl	230f0 <k_work_init_delayable>
}
   18936:	bd38      	pop	{r3, r4, r5, pc}
   18938:	00019185 	.word	0x00019185

0001893c <bt_att_chan_create_pdu>:
{
   1893c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1893e:	1c53      	adds	r3, r2, #1
   18940:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   18944:	4293      	cmp	r3, r2
   18946:	d811      	bhi.n	1896c <bt_att_chan_create_pdu+0x30>
   18948:	460d      	mov	r5, r1
	switch (att_op_get_type(op)) {
   1894a:	4608      	mov	r0, r1
   1894c:	f013 f8ba 	bl	2bac4 <att_op_get_type>
   18950:	2802      	cmp	r0, #2
   18952:	d011      	beq.n	18978 <bt_att_chan_create_pdu+0x3c>
   18954:	2804      	cmp	r0, #4
   18956:	d00f      	beq.n	18978 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu(NULL, 0);
   18958:	f04f 32ff 	mov.w	r2, #4294967295
   1895c:	f04f 33ff 	mov.w	r3, #4294967295
   18960:	2100      	movs	r1, #0
   18962:	4608      	mov	r0, r1
   18964:	f012 ffca 	bl	2b8fc <bt_l2cap_create_pdu_timeout>
   18968:	4604      	mov	r4, r0
   1896a:	e00d      	b.n	18988 <bt_att_chan_create_pdu+0x4c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1896c:	2157      	movs	r1, #87	; 0x57
   1896e:	480e      	ldr	r0, [pc, #56]	; (189a8 <bt_att_chan_create_pdu+0x6c>)
   18970:	f010 f888 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   18974:	2400      	movs	r4, #0
   18976:	e00e      	b.n	18996 <bt_att_chan_create_pdu+0x5a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   18978:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1897c:	2300      	movs	r3, #0
   1897e:	2100      	movs	r1, #0
   18980:	4608      	mov	r0, r1
   18982:	f012 ffbb 	bl	2b8fc <bt_l2cap_create_pdu_timeout>
   18986:	4604      	mov	r4, r0
	if (!buf) {
   18988:	b13c      	cbz	r4, 1899a <bt_att_chan_create_pdu+0x5e>
   1898a:	2101      	movs	r1, #1
   1898c:	f104 0008 	add.w	r0, r4, #8
   18990:	f004 fcba 	bl	1d308 <net_buf_simple_add>
	hdr->code = op;
   18994:	7005      	strb	r5, [r0, #0]
}
   18996:	4620      	mov	r0, r4
   18998:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1899a:	462a      	mov	r2, r5
   1899c:	2145      	movs	r1, #69	; 0x45
   1899e:	4803      	ldr	r0, [pc, #12]	; (189ac <bt_att_chan_create_pdu+0x70>)
   189a0:	f010 f870 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   189a4:	e7f7      	b.n	18996 <bt_att_chan_create_pdu+0x5a>
   189a6:	bf00      	nop
   189a8:	000319c0 	.word	0x000319c0
   189ac:	000316fc 	.word	0x000316fc

000189b0 <send_err_rsp>:
	if (!req) {
   189b0:	b901      	cbnz	r1, 189b4 <send_err_rsp+0x4>
   189b2:	4770      	bx	lr
{
   189b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189b8:	4606      	mov	r6, r0
   189ba:	4615      	mov	r5, r2
   189bc:	461c      	mov	r4, r3
   189be:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   189c0:	2204      	movs	r2, #4
   189c2:	2101      	movs	r1, #1
   189c4:	f7ff ffba 	bl	1893c <bt_att_chan_create_pdu>
	if (!buf) {
   189c8:	4680      	mov	r8, r0
   189ca:	b160      	cbz	r0, 189e6 <send_err_rsp+0x36>
   189cc:	2104      	movs	r1, #4
   189ce:	3008      	adds	r0, #8
   189d0:	f004 fc9a 	bl	1d308 <net_buf_simple_add>
	rsp->request = req;
   189d4:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   189d6:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   189da:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   189dc:	4a03      	ldr	r2, [pc, #12]	; (189ec <send_err_rsp+0x3c>)
   189de:	4641      	mov	r1, r8
   189e0:	4630      	mov	r0, r6
   189e2:	f013 fa7a 	bl	2beda <bt_att_chan_send_rsp>
}
   189e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   189ea:	bf00      	nop
   189ec:	0002bd37 	.word	0x0002bd37

000189f0 <bt_att_recv>:
{
   189f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   189f4:	898b      	ldrh	r3, [r1, #12]
   189f6:	b1bb      	cbz	r3, 18a28 <bt_att_recv+0x38>
   189f8:	4607      	mov	r7, r0
   189fa:	460e      	mov	r6, r1
   189fc:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   18a00:	2101      	movs	r1, #1
   18a02:	f106 0008 	add.w	r0, r6, #8
   18a06:	f004 fc3f 	bl	1d288 <net_buf_simple_pull_mem>
   18a0a:	4605      	mov	r5, r0
	if (!att_chan->att) {
   18a0c:	f857 3c08 	ldr.w	r3, [r7, #-8]
   18a10:	b173      	cbz	r3, 18a30 <bt_att_recv+0x40>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18a12:	2300      	movs	r3, #0
   18a14:	2b0c      	cmp	r3, #12
   18a16:	d812      	bhi.n	18a3e <bt_att_recv+0x4e>
		if (hdr->code == handlers[i].op) {
   18a18:	782c      	ldrb	r4, [r5, #0]
   18a1a:	4a39      	ldr	r2, [pc, #228]	; (18b00 <bt_att_recv+0x110>)
   18a1c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   18a20:	4294      	cmp	r4, r2
   18a22:	d008      	beq.n	18a36 <bt_att_recv+0x46>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18a24:	3301      	adds	r3, #1
   18a26:	e7f5      	b.n	18a14 <bt_att_recv+0x24>
		BT_ERR("Too small ATT PDU received");
   18a28:	2145      	movs	r1, #69	; 0x45
   18a2a:	4836      	ldr	r0, [pc, #216]	; (18b04 <bt_att_recv+0x114>)
   18a2c:	f010 f82a 	bl	28a84 <z_log_minimal_printk>
}
   18a30:	2000      	movs	r0, #0
   18a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   18a36:	4c32      	ldr	r4, [pc, #200]	; (18b00 <bt_att_recv+0x110>)
   18a38:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   18a3c:	e000      	b.n	18a40 <bt_att_recv+0x50>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18a3e:	2400      	movs	r4, #0
	if (!handler) {
   18a40:	b1cc      	cbz	r4, 18a76 <bt_att_recv+0x86>
		if (handler->type == ATT_REQUEST &&
   18a42:	78a3      	ldrb	r3, [r4, #2]
   18a44:	2b01      	cmp	r3, #1
   18a46:	d028      	beq.n	18a9a <bt_att_recv+0xaa>
		} else if (handler->type == ATT_INDICATION &&
   18a48:	78a3      	ldrb	r3, [r4, #2]
   18a4a:	2b05      	cmp	r3, #5
   18a4c:	d03b      	beq.n	18ac6 <bt_att_recv+0xd6>
	if (buf->len < handler->expect_len) {
   18a4e:	89b2      	ldrh	r2, [r6, #12]
   18a50:	7863      	ldrb	r3, [r4, #1]
   18a52:	429a      	cmp	r2, r3
   18a54:	d34c      	bcc.n	18af0 <bt_att_recv+0x100>
		err = handler->func(att_chan, buf);
   18a56:	6863      	ldr	r3, [r4, #4]
   18a58:	4631      	mov	r1, r6
   18a5a:	4640      	mov	r0, r8
   18a5c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   18a5e:	78a3      	ldrb	r3, [r4, #2]
   18a60:	2b01      	cmp	r3, #1
   18a62:	d1e5      	bne.n	18a30 <bt_att_recv+0x40>
   18a64:	2800      	cmp	r0, #0
   18a66:	d0e3      	beq.n	18a30 <bt_att_recv+0x40>
		send_err_rsp(att_chan, hdr->code, 0, err);
   18a68:	4603      	mov	r3, r0
   18a6a:	2200      	movs	r2, #0
   18a6c:	7829      	ldrb	r1, [r5, #0]
   18a6e:	4640      	mov	r0, r8
   18a70:	f7ff ff9e 	bl	189b0 <send_err_rsp>
   18a74:	e7dc      	b.n	18a30 <bt_att_recv+0x40>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   18a76:	782a      	ldrb	r2, [r5, #0]
   18a78:	2157      	movs	r1, #87	; 0x57
   18a7a:	4823      	ldr	r0, [pc, #140]	; (18b08 <bt_att_recv+0x118>)
   18a7c:	f010 f802 	bl	28a84 <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   18a80:	782c      	ldrb	r4, [r5, #0]
   18a82:	4620      	mov	r0, r4
   18a84:	f013 f81e 	bl	2bac4 <att_op_get_type>
   18a88:	2800      	cmp	r0, #0
   18a8a:	d0d1      	beq.n	18a30 <bt_att_recv+0x40>
			send_err_rsp(att_chan, hdr->code, 0,
   18a8c:	2306      	movs	r3, #6
   18a8e:	2200      	movs	r2, #0
   18a90:	4621      	mov	r1, r4
   18a92:	4640      	mov	r0, r8
   18a94:	f7ff ff8c 	bl	189b0 <send_err_rsp>
		return 0;
   18a98:	e7ca      	b.n	18a30 <bt_att_recv+0x40>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   18a9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18a9e:	f3bf 8f5b 	dmb	ish
   18aa2:	e853 2f00 	ldrex	r2, [r3]
   18aa6:	f042 0101 	orr.w	r1, r2, #1
   18aaa:	e843 1000 	strex	r0, r1, [r3]
   18aae:	2800      	cmp	r0, #0
   18ab0:	d1f7      	bne.n	18aa2 <bt_att_recv+0xb2>
   18ab2:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   18ab6:	f012 0f01 	tst.w	r2, #1
   18aba:	d0c5      	beq.n	18a48 <bt_att_recv+0x58>
			BT_WARN("Ignoring unexpected request");
   18abc:	2157      	movs	r1, #87	; 0x57
   18abe:	4813      	ldr	r0, [pc, #76]	; (18b0c <bt_att_recv+0x11c>)
   18ac0:	f00f ffe0 	bl	28a84 <z_log_minimal_printk>
			return 0;
   18ac4:	e7b4      	b.n	18a30 <bt_att_recv+0x40>
			   atomic_test_and_set_bit(att_chan->flags,
   18ac6:	37f0      	adds	r7, #240	; 0xf0
   18ac8:	f3bf 8f5b 	dmb	ish
   18acc:	e857 3f00 	ldrex	r3, [r7]
   18ad0:	f043 0202 	orr.w	r2, r3, #2
   18ad4:	e847 2100 	strex	r1, r2, [r7]
   18ad8:	2900      	cmp	r1, #0
   18ada:	d1f7      	bne.n	18acc <bt_att_recv+0xdc>
   18adc:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   18ae0:	f013 0f02 	tst.w	r3, #2
   18ae4:	d0b3      	beq.n	18a4e <bt_att_recv+0x5e>
			BT_WARN("Ignoring unexpected indication");
   18ae6:	2157      	movs	r1, #87	; 0x57
   18ae8:	4809      	ldr	r0, [pc, #36]	; (18b10 <bt_att_recv+0x120>)
   18aea:	f00f ffcb 	bl	28a84 <z_log_minimal_printk>
			return 0;
   18aee:	e79f      	b.n	18a30 <bt_att_recv+0x40>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18af0:	782b      	ldrb	r3, [r5, #0]
   18af2:	2145      	movs	r1, #69	; 0x45
   18af4:	4807      	ldr	r0, [pc, #28]	; (18b14 <bt_att_recv+0x124>)
   18af6:	f00f ffc5 	bl	28a84 <z_log_minimal_printk>
		err = BT_ATT_ERR_INVALID_PDU;
   18afa:	2004      	movs	r0, #4
   18afc:	e7af      	b.n	18a5e <bt_att_recv+0x6e>
   18afe:	bf00      	nop
   18b00:	00031af0 	.word	0x00031af0
   18b04:	000319ec 	.word	0x000319ec
   18b08:	00031a0c 	.word	0x00031a0c
   18b0c:	00031a2c 	.word	0x00031a2c
   18b10:	00031a50 	.word	0x00031a50
   18b14:	00031a74 	.word	0x00031a74

00018b18 <att_write_rsp>:
{
   18b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b1c:	b08a      	sub	sp, #40	; 0x28
   18b1e:	4604      	mov	r4, r0
   18b20:	4617      	mov	r7, r2
   18b22:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18b24:	6803      	ldr	r3, [r0, #0]
   18b26:	4688      	mov	r8, r1
   18b28:	3900      	subs	r1, #0
   18b2a:	bf18      	it	ne
   18b2c:	2101      	movne	r1, #1
   18b2e:	6818      	ldr	r0, [r3, #0]
   18b30:	f014 f86b 	bl	2cc0a <bt_gatt_change_aware>
   18b34:	2800      	cmp	r0, #0
   18b36:	d04f      	beq.n	18bd8 <att_write_rsp+0xc0>
	if (!handle) {
   18b38:	b925      	cbnz	r5, 18b44 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   18b3a:	2601      	movs	r6, #1
}
   18b3c:	4630      	mov	r0, r6
   18b3e:	b00a      	add	sp, #40	; 0x28
   18b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   18b44:	2218      	movs	r2, #24
   18b46:	2100      	movs	r1, #0
   18b48:	a804      	add	r0, sp, #16
   18b4a:	f011 fecc 	bl	2a8e6 <memset>
	if (rsp) {
   18b4e:	b13f      	cbz	r7, 18b60 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18b50:	2200      	movs	r2, #0
   18b52:	4639      	mov	r1, r7
   18b54:	4620      	mov	r0, r4
   18b56:	f7ff fef1 	bl	1893c <bt_att_chan_create_pdu>
   18b5a:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   18b5c:	2800      	cmp	r0, #0
   18b5e:	d03d      	beq.n	18bdc <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
   18b60:	6823      	ldr	r3, [r4, #0]
   18b62:	681b      	ldr	r3, [r3, #0]
   18b64:	9304      	str	r3, [sp, #16]
	data.req = req;
   18b66:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   18b6a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   18b6e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   18b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18b74:	9307      	str	r3, [sp, #28]
	data.len = len;
   18b76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   18b7a:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18b7e:	2301      	movs	r3, #1
   18b80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18b84:	ab04      	add	r3, sp, #16
   18b86:	9302      	str	r3, [sp, #8]
   18b88:	4b15      	ldr	r3, [pc, #84]	; (18be0 <att_write_rsp+0xc8>)
   18b8a:	9301      	str	r3, [sp, #4]
   18b8c:	2200      	movs	r2, #0
   18b8e:	9200      	str	r2, [sp, #0]
   18b90:	4613      	mov	r3, r2
   18b92:	4629      	mov	r1, r5
   18b94:	4628      	mov	r0, r5
   18b96:	f001 f8f5 	bl	19d84 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18b9a:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   18b9e:	b93e      	cbnz	r6, 18bb0 <att_write_rsp+0x98>
	if (data.buf) {
   18ba0:	9905      	ldr	r1, [sp, #20]
   18ba2:	2900      	cmp	r1, #0
   18ba4:	d0ca      	beq.n	18b3c <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18ba6:	4a0f      	ldr	r2, [pc, #60]	; (18be4 <att_write_rsp+0xcc>)
   18ba8:	4620      	mov	r0, r4
   18baa:	f013 f996 	bl	2beda <bt_att_chan_send_rsp>
   18bae:	e7c5      	b.n	18b3c <att_write_rsp+0x24>
		if (rsp) {
   18bb0:	b927      	cbnz	r7, 18bbc <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18bb2:	f1b8 0f18 	cmp.w	r8, #24
   18bb6:	d00c      	beq.n	18bd2 <att_write_rsp+0xba>
   18bb8:	2600      	movs	r6, #0
   18bba:	e7bf      	b.n	18b3c <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   18bbc:	9805      	ldr	r0, [sp, #20]
   18bbe:	f004 fa8b 	bl	1d0d8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   18bc2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   18bc6:	462a      	mov	r2, r5
   18bc8:	4641      	mov	r1, r8
   18bca:	4620      	mov	r0, r4
   18bcc:	f7ff fef0 	bl	189b0 <send_err_rsp>
   18bd0:	e7ef      	b.n	18bb2 <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18bd2:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   18bd6:	e7b1      	b.n	18b3c <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18bd8:	2612      	movs	r6, #18
   18bda:	e7af      	b.n	18b3c <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   18bdc:	260e      	movs	r6, #14
   18bde:	e7ad      	b.n	18b3c <att_write_rsp+0x24>
   18be0:	0002be85 	.word	0x0002be85
   18be4:	0002bd37 	.word	0x0002bd37

00018be8 <bt_att_create_pdu>:
{
   18be8:	b570      	push	{r4, r5, r6, lr}
   18bea:	460e      	mov	r6, r1
   18bec:	4615      	mov	r5, r2
	att = att_get(conn);
   18bee:	f7ff fbad 	bl	1834c <att_get>
	if (!att) {
   18bf2:	4604      	mov	r4, r0
   18bf4:	b360      	cbz	r0, 18c50 <bt_att_create_pdu+0x68>
	return list->head;
   18bf6:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18bf8:	b15c      	cbz	r4, 18c12 <bt_att_create_pdu+0x2a>
   18bfa:	f5b4 74aa 	subs.w	r4, r4, #340	; 0x154
   18bfe:	d00a      	beq.n	18c16 <bt_att_create_pdu+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18c00:	f514 70aa 	adds.w	r0, r4, #340	; 0x154
   18c04:	d00c      	beq.n	18c20 <bt_att_create_pdu+0x38>
	return node->next;
   18c06:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   18c0a:	b148      	cbz	r0, 18c20 <bt_att_create_pdu+0x38>
   18c0c:	f5a0 70aa 	sub.w	r0, r0, #340	; 0x154
   18c10:	e006      	b.n	18c20 <bt_att_create_pdu+0x38>
   18c12:	4620      	mov	r0, r4
   18c14:	e004      	b.n	18c20 <bt_att_create_pdu+0x38>
   18c16:	4620      	mov	r0, r4
   18c18:	e002      	b.n	18c20 <bt_att_create_pdu+0x38>
   18c1a:	4603      	mov	r3, r0
   18c1c:	4604      	mov	r4, r0
   18c1e:	4618      	mov	r0, r3
   18c20:	b1c4      	cbz	r4, 18c54 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18c22:	1c6b      	adds	r3, r5, #1
   18c24:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   18c28:	4293      	cmp	r3, r2
   18c2a:	d90b      	bls.n	18c44 <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18c2c:	2800      	cmp	r0, #0
   18c2e:	d0f4      	beq.n	18c1a <bt_att_create_pdu+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18c30:	f510 73aa 	adds.w	r3, r0, #340	; 0x154
   18c34:	d0f2      	beq.n	18c1c <bt_att_create_pdu+0x34>
	return node->next;
   18c36:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
   18c3a:	2b00      	cmp	r3, #0
   18c3c:	d0ee      	beq.n	18c1c <bt_att_create_pdu+0x34>
   18c3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   18c42:	e7eb      	b.n	18c1c <bt_att_create_pdu+0x34>
		return bt_att_chan_create_pdu(chan, op, len);
   18c44:	462a      	mov	r2, r5
   18c46:	4631      	mov	r1, r6
   18c48:	4620      	mov	r0, r4
   18c4a:	f7ff fe77 	bl	1893c <bt_att_chan_create_pdu>
   18c4e:	4604      	mov	r4, r0
}
   18c50:	4620      	mov	r0, r4
   18c52:	bd70      	pop	{r4, r5, r6, pc}
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   18c54:	1c6a      	adds	r2, r5, #1
   18c56:	2157      	movs	r1, #87	; 0x57
   18c58:	4801      	ldr	r0, [pc, #4]	; (18c60 <bt_att_create_pdu+0x78>)
   18c5a:	f00f ff13 	bl	28a84 <z_log_minimal_printk>
	return NULL;
   18c5e:	e7f7      	b.n	18c50 <bt_att_create_pdu+0x68>
   18c60:	00031a98 	.word	0x00031a98

00018c64 <att_read_group_rsp>:
{
   18c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c68:	b08a      	sub	sp, #40	; 0x28
   18c6a:	4604      	mov	r4, r0
   18c6c:	460f      	mov	r7, r1
   18c6e:	4615      	mov	r5, r2
   18c70:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18c72:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18c76:	2214      	movs	r2, #20
   18c78:	2100      	movs	r1, #0
   18c7a:	eb0d 0002 	add.w	r0, sp, r2
   18c7e:	f011 fe32 	bl	2a8e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18c82:	2201      	movs	r2, #1
   18c84:	2111      	movs	r1, #17
   18c86:	4640      	mov	r0, r8
   18c88:	f7ff ffae 	bl	18be8 <bt_att_create_pdu>
   18c8c:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   18c8e:	b350      	cbz	r0, 18ce6 <att_read_group_rsp+0x82>
	data.chan = chan;
   18c90:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   18c92:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   18c94:	2101      	movs	r1, #1
   18c96:	3008      	adds	r0, #8
   18c98:	f004 fb36 	bl	1d308 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18c9c:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   18c9e:	2200      	movs	r2, #0
   18ca0:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   18ca2:	9209      	str	r2, [sp, #36]	; 0x24
   18ca4:	ab05      	add	r3, sp, #20
   18ca6:	9302      	str	r3, [sp, #8]
   18ca8:	4b10      	ldr	r3, [pc, #64]	; (18cec <att_read_group_rsp+0x88>)
   18caa:	9301      	str	r3, [sp, #4]
   18cac:	9200      	str	r2, [sp, #0]
   18cae:	4613      	mov	r3, r2
   18cb0:	4631      	mov	r1, r6
   18cb2:	4628      	mov	r0, r5
   18cb4:	f001 f866 	bl	19d84 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   18cb8:	9b08      	ldr	r3, [sp, #32]
   18cba:	781e      	ldrb	r6, [r3, #0]
   18cbc:	b14e      	cbz	r6, 18cd2 <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18cbe:	4a0c      	ldr	r2, [pc, #48]	; (18cf0 <att_read_group_rsp+0x8c>)
   18cc0:	9907      	ldr	r1, [sp, #28]
   18cc2:	4620      	mov	r0, r4
   18cc4:	f013 f909 	bl	2beda <bt_att_chan_send_rsp>
	return 0;
   18cc8:	2600      	movs	r6, #0
}
   18cca:	4630      	mov	r0, r6
   18ccc:	b00a      	add	sp, #40	; 0x28
   18cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   18cd2:	9807      	ldr	r0, [sp, #28]
   18cd4:	f004 fa00 	bl	1d0d8 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   18cd8:	230a      	movs	r3, #10
   18cda:	462a      	mov	r2, r5
   18cdc:	2110      	movs	r1, #16
   18cde:	4620      	mov	r0, r4
   18ce0:	f7ff fe66 	bl	189b0 <send_err_rsp>
		return 0;
   18ce4:	e7f1      	b.n	18cca <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   18ce6:	260e      	movs	r6, #14
   18ce8:	e7ef      	b.n	18cca <att_read_group_rsp+0x66>
   18cea:	bf00      	nop
   18cec:	000185ed 	.word	0x000185ed
   18cf0:	0002bd37 	.word	0x0002bd37

00018cf4 <att_read_mult_req>:
{
   18cf4:	b570      	push	{r4, r5, r6, lr}
   18cf6:	b088      	sub	sp, #32
   18cf8:	4606      	mov	r6, r0
   18cfa:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   18cfc:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   18cfe:	2101      	movs	r1, #1
   18d00:	4620      	mov	r0, r4
   18d02:	f013 ff82 	bl	2cc0a <bt_gatt_change_aware>
   18d06:	2800      	cmp	r0, #0
   18d08:	d039      	beq.n	18d7e <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   18d0a:	2210      	movs	r2, #16
   18d0c:	2100      	movs	r1, #0
   18d0e:	eb0d 0002 	add.w	r0, sp, r2
   18d12:	f011 fde8 	bl	2a8e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18d16:	2200      	movs	r2, #0
   18d18:	210f      	movs	r1, #15
   18d1a:	4620      	mov	r0, r4
   18d1c:	f7ff ff64 	bl	18be8 <bt_att_create_pdu>
   18d20:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18d22:	b378      	cbz	r0, 18d84 <att_read_mult_req+0x90>
	data.chan = chan;
   18d24:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   18d26:	89ab      	ldrh	r3, [r5, #12]
   18d28:	2b01      	cmp	r3, #1
   18d2a:	d921      	bls.n	18d70 <att_read_mult_req+0x7c>
	return net_buf_simple_pull_le16(&buf->b);
   18d2c:	f105 0008 	add.w	r0, r5, #8
   18d30:	f014 feb8 	bl	2daa4 <net_buf_simple_pull_le16>
   18d34:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18d36:	2301      	movs	r3, #1
   18d38:	f88d 301c 	strb.w	r3, [sp, #28]
   18d3c:	ab04      	add	r3, sp, #16
   18d3e:	9302      	str	r3, [sp, #8]
   18d40:	4b11      	ldr	r3, [pc, #68]	; (18d88 <att_read_mult_req+0x94>)
   18d42:	9301      	str	r3, [sp, #4]
   18d44:	2200      	movs	r2, #0
   18d46:	9200      	str	r2, [sp, #0]
   18d48:	4613      	mov	r3, r2
   18d4a:	4601      	mov	r1, r0
   18d4c:	f001 f81a 	bl	19d84 <bt_gatt_foreach_attr_type>
		if (data.err) {
   18d50:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18d54:	2b00      	cmp	r3, #0
   18d56:	d0e6      	beq.n	18d26 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   18d58:	9806      	ldr	r0, [sp, #24]
   18d5a:	f004 f9bd 	bl	1d0d8 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   18d5e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18d62:	4622      	mov	r2, r4
   18d64:	210e      	movs	r1, #14
   18d66:	4630      	mov	r0, r6
   18d68:	f7ff fe22 	bl	189b0 <send_err_rsp>
			return 0;
   18d6c:	2000      	movs	r0, #0
   18d6e:	e007      	b.n	18d80 <att_read_mult_req+0x8c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18d70:	4a06      	ldr	r2, [pc, #24]	; (18d8c <att_read_mult_req+0x98>)
   18d72:	9906      	ldr	r1, [sp, #24]
   18d74:	4630      	mov	r0, r6
   18d76:	f013 f8b0 	bl	2beda <bt_att_chan_send_rsp>
	return 0;
   18d7a:	2000      	movs	r0, #0
   18d7c:	e000      	b.n	18d80 <att_read_mult_req+0x8c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18d7e:	2012      	movs	r0, #18
}
   18d80:	b008      	add	sp, #32
   18d82:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   18d84:	200e      	movs	r0, #14
   18d86:	e7fb      	b.n	18d80 <att_read_mult_req+0x8c>
   18d88:	0002c04b 	.word	0x0002c04b
   18d8c:	0002bd37 	.word	0x0002bd37

00018d90 <att_read_rsp>:
{
   18d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d94:	b088      	sub	sp, #32
   18d96:	4604      	mov	r4, r0
   18d98:	4688      	mov	r8, r1
   18d9a:	4616      	mov	r6, r2
   18d9c:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18d9e:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   18da0:	2101      	movs	r1, #1
   18da2:	4638      	mov	r0, r7
   18da4:	f013 ff31 	bl	2cc0a <bt_gatt_change_aware>
   18da8:	2800      	cmp	r0, #0
   18daa:	d03a      	beq.n	18e22 <att_read_rsp+0x92>
	if (!handle) {
   18dac:	b925      	cbnz	r5, 18db8 <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   18dae:	2601      	movs	r6, #1
}
   18db0:	4630      	mov	r0, r6
   18db2:	b008      	add	sp, #32
   18db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   18db8:	2210      	movs	r2, #16
   18dba:	2100      	movs	r1, #0
   18dbc:	eb0d 0002 	add.w	r0, sp, r2
   18dc0:	f011 fd91 	bl	2a8e6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18dc4:	2200      	movs	r2, #0
   18dc6:	4631      	mov	r1, r6
   18dc8:	4638      	mov	r0, r7
   18dca:	f7ff ff0d 	bl	18be8 <bt_att_create_pdu>
   18dce:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18dd0:	b348      	cbz	r0, 18e26 <att_read_rsp+0x96>
	data.chan = chan;
   18dd2:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   18dd4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   18dd8:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18ddc:	2301      	movs	r3, #1
   18dde:	f88d 301c 	strb.w	r3, [sp, #28]
   18de2:	ab04      	add	r3, sp, #16
   18de4:	9302      	str	r3, [sp, #8]
   18de6:	4b11      	ldr	r3, [pc, #68]	; (18e2c <att_read_rsp+0x9c>)
   18de8:	9301      	str	r3, [sp, #4]
   18dea:	2200      	movs	r2, #0
   18dec:	9200      	str	r2, [sp, #0]
   18dee:	4613      	mov	r3, r2
   18df0:	4629      	mov	r1, r5
   18df2:	4628      	mov	r0, r5
   18df4:	f000 ffc6 	bl	19d84 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18df8:	f89d 601c 	ldrb.w	r6, [sp, #28]
   18dfc:	b92e      	cbnz	r6, 18e0a <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18dfe:	4a0c      	ldr	r2, [pc, #48]	; (18e30 <att_read_rsp+0xa0>)
   18e00:	9906      	ldr	r1, [sp, #24]
   18e02:	4620      	mov	r0, r4
   18e04:	f013 f869 	bl	2beda <bt_att_chan_send_rsp>
	return 0;
   18e08:	e7d2      	b.n	18db0 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   18e0a:	9806      	ldr	r0, [sp, #24]
   18e0c:	f004 f964 	bl	1d0d8 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   18e10:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18e14:	462a      	mov	r2, r5
   18e16:	4641      	mov	r1, r8
   18e18:	4620      	mov	r0, r4
   18e1a:	f7ff fdc9 	bl	189b0 <send_err_rsp>
		return 0;
   18e1e:	2600      	movs	r6, #0
   18e20:	e7c6      	b.n	18db0 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18e22:	2612      	movs	r6, #18
   18e24:	e7c4      	b.n	18db0 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   18e26:	260e      	movs	r6, #14
   18e28:	e7c2      	b.n	18db0 <att_read_rsp+0x20>
   18e2a:	bf00      	nop
   18e2c:	0002c04b 	.word	0x0002c04b
   18e30:	0002bd37 	.word	0x0002bd37

00018e34 <att_read_type_rsp>:
{
   18e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e38:	b08a      	sub	sp, #40	; 0x28
   18e3a:	4604      	mov	r4, r0
   18e3c:	460f      	mov	r7, r1
   18e3e:	4615      	mov	r5, r2
   18e40:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18e42:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18e46:	2218      	movs	r2, #24
   18e48:	2100      	movs	r1, #0
   18e4a:	a804      	add	r0, sp, #16
   18e4c:	f011 fd4b 	bl	2a8e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18e50:	2201      	movs	r2, #1
   18e52:	2109      	movs	r1, #9
   18e54:	4640      	mov	r0, r8
   18e56:	f7ff fec7 	bl	18be8 <bt_att_create_pdu>
   18e5a:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18e5c:	b368      	cbz	r0, 18eba <att_read_type_rsp+0x86>
	data.chan = chan;
   18e5e:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   18e60:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   18e62:	2101      	movs	r1, #1
   18e64:	3008      	adds	r0, #8
   18e66:	f004 fa4f 	bl	1d308 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18e6a:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   18e6c:	2200      	movs	r2, #0
   18e6e:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18e70:	230a      	movs	r3, #10
   18e72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18e76:	ab04      	add	r3, sp, #16
   18e78:	9302      	str	r3, [sp, #8]
   18e7a:	4b11      	ldr	r3, [pc, #68]	; (18ec0 <att_read_type_rsp+0x8c>)
   18e7c:	9301      	str	r3, [sp, #4]
   18e7e:	9200      	str	r2, [sp, #0]
   18e80:	4613      	mov	r3, r2
   18e82:	4631      	mov	r1, r6
   18e84:	4628      	mov	r0, r5
   18e86:	f000 ff7d 	bl	19d84 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18e8a:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   18e8e:	b946      	cbnz	r6, 18ea2 <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18e90:	4a0c      	ldr	r2, [pc, #48]	; (18ec4 <att_read_type_rsp+0x90>)
   18e92:	9906      	ldr	r1, [sp, #24]
   18e94:	4620      	mov	r0, r4
   18e96:	f013 f820 	bl	2beda <bt_att_chan_send_rsp>
}
   18e9a:	4630      	mov	r0, r6
   18e9c:	b00a      	add	sp, #40	; 0x28
   18e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   18ea2:	9806      	ldr	r0, [sp, #24]
   18ea4:	f004 f918 	bl	1d0d8 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   18ea8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   18eac:	462a      	mov	r2, r5
   18eae:	2108      	movs	r1, #8
   18eb0:	4620      	mov	r0, r4
   18eb2:	f7ff fd7d 	bl	189b0 <send_err_rsp>
		return 0;
   18eb6:	2600      	movs	r6, #0
   18eb8:	e7ef      	b.n	18e9a <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   18eba:	260e      	movs	r6, #14
   18ebc:	e7ed      	b.n	18e9a <att_read_type_rsp+0x66>
   18ebe:	bf00      	nop
   18ec0:	000186a1 	.word	0x000186a1
   18ec4:	0002bd37 	.word	0x0002bd37

00018ec8 <att_find_type_rsp>:
{
   18ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ecc:	b08a      	sub	sp, #40	; 0x28
   18ece:	4604      	mov	r4, r0
   18ed0:	460d      	mov	r5, r1
   18ed2:	4616      	mov	r6, r2
   18ed4:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18ed6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18eda:	2214      	movs	r2, #20
   18edc:	2100      	movs	r1, #0
   18ede:	eb0d 0002 	add.w	r0, sp, r2
   18ee2:	f011 fd00 	bl	2a8e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18ee6:	2200      	movs	r2, #0
   18ee8:	2107      	movs	r1, #7
   18eea:	4640      	mov	r0, r8
   18eec:	f7ff fe7c 	bl	18be8 <bt_att_create_pdu>
   18ef0:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18ef2:	b360      	cbz	r0, 18f4e <att_find_type_rsp+0x86>
	data.chan = chan;
   18ef4:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   18ef6:	2200      	movs	r2, #0
   18ef8:	9207      	str	r2, [sp, #28]
	data.value = value;
   18efa:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   18efc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   18f00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18f04:	230a      	movs	r3, #10
   18f06:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   18f0a:	ab05      	add	r3, sp, #20
   18f0c:	9302      	str	r3, [sp, #8]
   18f0e:	4b11      	ldr	r3, [pc, #68]	; (18f54 <att_find_type_rsp+0x8c>)
   18f10:	9301      	str	r3, [sp, #4]
   18f12:	9200      	str	r2, [sp, #0]
   18f14:	4613      	mov	r3, r2
   18f16:	4631      	mov	r1, r6
   18f18:	4628      	mov	r0, r5
   18f1a:	f000 ff33 	bl	19d84 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18f1e:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   18f22:	b946      	cbnz	r6, 18f36 <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18f24:	4a0c      	ldr	r2, [pc, #48]	; (18f58 <att_find_type_rsp+0x90>)
   18f26:	9906      	ldr	r1, [sp, #24]
   18f28:	4620      	mov	r0, r4
   18f2a:	f012 ffd6 	bl	2beda <bt_att_chan_send_rsp>
}
   18f2e:	4630      	mov	r0, r6
   18f30:	b00a      	add	sp, #40	; 0x28
   18f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   18f36:	9806      	ldr	r0, [sp, #24]
   18f38:	f004 f8ce 	bl	1d0d8 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   18f3c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   18f40:	462a      	mov	r2, r5
   18f42:	2106      	movs	r1, #6
   18f44:	4620      	mov	r0, r4
   18f46:	f7ff fd33 	bl	189b0 <send_err_rsp>
		return 0;
   18f4a:	2600      	movs	r6, #0
   18f4c:	e7ef      	b.n	18f2e <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   18f4e:	260e      	movs	r6, #14
   18f50:	e7ed      	b.n	18f2e <att_find_type_rsp+0x66>
   18f52:	bf00      	nop
   18f54:	0001874d 	.word	0x0001874d
   18f58:	0002bd37 	.word	0x0002bd37

00018f5c <att_find_info_rsp>:
{
   18f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f5e:	b089      	sub	sp, #36	; 0x24
   18f60:	4604      	mov	r4, r0
   18f62:	460f      	mov	r7, r1
   18f64:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   18f66:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18f68:	2210      	movs	r2, #16
   18f6a:	2100      	movs	r1, #0
   18f6c:	eb0d 0002 	add.w	r0, sp, r2
   18f70:	f011 fcb9 	bl	2a8e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18f74:	2200      	movs	r2, #0
   18f76:	2105      	movs	r1, #5
   18f78:	4628      	mov	r0, r5
   18f7a:	f7ff fe35 	bl	18be8 <bt_att_create_pdu>
   18f7e:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   18f80:	b300      	cbz	r0, 18fc4 <att_find_info_rsp+0x68>
	data.chan = chan;
   18f82:	9404      	str	r4, [sp, #16]
   18f84:	ab04      	add	r3, sp, #16
   18f86:	9302      	str	r3, [sp, #8]
   18f88:	4b0f      	ldr	r3, [pc, #60]	; (18fc8 <att_find_info_rsp+0x6c>)
   18f8a:	9301      	str	r3, [sp, #4]
   18f8c:	2200      	movs	r2, #0
   18f8e:	9200      	str	r2, [sp, #0]
   18f90:	4613      	mov	r3, r2
   18f92:	4631      	mov	r1, r6
   18f94:	4638      	mov	r0, r7
   18f96:	f000 fef5 	bl	19d84 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   18f9a:	9b06      	ldr	r3, [sp, #24]
   18f9c:	b13b      	cbz	r3, 18fae <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18f9e:	4a0b      	ldr	r2, [pc, #44]	; (18fcc <att_find_info_rsp+0x70>)
   18fa0:	9905      	ldr	r1, [sp, #20]
   18fa2:	4620      	mov	r0, r4
   18fa4:	f012 ff99 	bl	2beda <bt_att_chan_send_rsp>
	return 0;
   18fa8:	2000      	movs	r0, #0
}
   18faa:	b009      	add	sp, #36	; 0x24
   18fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   18fae:	9805      	ldr	r0, [sp, #20]
   18fb0:	f004 f892 	bl	1d0d8 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   18fb4:	230a      	movs	r3, #10
   18fb6:	463a      	mov	r2, r7
   18fb8:	2104      	movs	r1, #4
   18fba:	4620      	mov	r0, r4
   18fbc:	f7ff fcf8 	bl	189b0 <send_err_rsp>
		return 0;
   18fc0:	2000      	movs	r0, #0
   18fc2:	e7f2      	b.n	18faa <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   18fc4:	200e      	movs	r0, #14
   18fc6:	e7f0      	b.n	18faa <att_find_info_rsp+0x4e>
   18fc8:	0002c093 	.word	0x0002c093
   18fcc:	0002bd37 	.word	0x0002bd37

00018fd0 <att_mtu_req>:
{
   18fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18fd2:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   18fd4:	6803      	ldr	r3, [r0, #0]
   18fd6:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18fd8:	f3bf 8f5b 	dmb	ish
   18fdc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   18fe0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   18fe4:	f013 0f08 	tst.w	r3, #8
   18fe8:	d122      	bne.n	19030 <att_mtu_req+0x60>
	req = (void *)buf->data;
   18fea:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   18fec:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   18fee:	2e16      	cmp	r6, #22
   18ff0:	d920      	bls.n	19034 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   18ff2:	2202      	movs	r2, #2
   18ff4:	2103      	movs	r1, #3
   18ff6:	f7ff fdf7 	bl	18be8 <bt_att_create_pdu>
	if (!pdu) {
   18ffa:	4607      	mov	r7, r0
   18ffc:	b1e0      	cbz	r0, 19038 <att_mtu_req+0x68>
   18ffe:	2102      	movs	r1, #2
   19000:	3008      	adds	r0, #8
   19002:	f004 f981 	bl	1d308 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   19006:	2500      	movs	r5, #0
   19008:	2341      	movs	r3, #65	; 0x41
   1900a:	7003      	strb	r3, [r0, #0]
   1900c:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1900e:	4a0b      	ldr	r2, [pc, #44]	; (1903c <att_mtu_req+0x6c>)
   19010:	4639      	mov	r1, r7
   19012:	4620      	mov	r0, r4
   19014:	f012 ff61 	bl	2beda <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   19018:	2e41      	cmp	r6, #65	; 0x41
   1901a:	bf28      	it	cs
   1901c:	2641      	movcs	r6, #65	; 0x41
   1901e:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   19022:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   19026:	4620      	mov	r0, r4
   19028:	f013 f88f 	bl	2c14a <att_chan_mtu_updated>
	return 0;
   1902c:	4628      	mov	r0, r5
}
   1902e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   19030:	2006      	movs	r0, #6
   19032:	e7fc      	b.n	1902e <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   19034:	2004      	movs	r0, #4
   19036:	e7fa      	b.n	1902e <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   19038:	200e      	movs	r0, #14
   1903a:	e7f8      	b.n	1902e <att_mtu_req+0x5e>
   1903c:	0002bd37 	.word	0x0002bd37

00019040 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19040:	b500      	push	{lr}
   19042:	b083      	sub	sp, #12
   19044:	4602      	mov	r2, r0
   19046:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   19048:	2100      	movs	r1, #0
   1904a:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1904c:	a901      	add	r1, sp, #4
   1904e:	4807      	ldr	r0, [pc, #28]	; (1906c <bt_att_req_alloc+0x2c>)
   19050:	f008 fe46 	bl	21ce0 <k_mem_slab_alloc>
   19054:	b940      	cbnz	r0, 19068 <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19056:	221c      	movs	r2, #28
   19058:	2100      	movs	r1, #0
   1905a:	9801      	ldr	r0, [sp, #4]
   1905c:	f011 fc43 	bl	2a8e6 <memset>

	return req;
   19060:	9801      	ldr	r0, [sp, #4]
}
   19062:	b003      	add	sp, #12
   19064:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   19068:	2000      	movs	r0, #0
   1906a:	e7fa      	b.n	19062 <bt_att_req_alloc+0x22>
   1906c:	200007a4 	.word	0x200007a4

00019070 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19070:	b500      	push	{lr}
   19072:	b083      	sub	sp, #12
   19074:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   19076:	6880      	ldr	r0, [r0, #8]
   19078:	b120      	cbz	r0, 19084 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   1907a:	f004 f82d 	bl	1d0d8 <net_buf_unref>
		req->buf = NULL;
   1907e:	9b01      	ldr	r3, [sp, #4]
   19080:	2200      	movs	r2, #0
   19082:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   19084:	a901      	add	r1, sp, #4
   19086:	4803      	ldr	r0, [pc, #12]	; (19094 <bt_att_req_free+0x24>)
   19088:	f008 fe8c 	bl	21da4 <k_mem_slab_free>
}
   1908c:	b003      	add	sp, #12
   1908e:	f85d fb04 	ldr.w	pc, [sp], #4
   19092:	bf00      	nop
   19094:	200007a4 	.word	0x200007a4

00019098 <att_handle_rsp>:
{
   19098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1909c:	b082      	sub	sp, #8
   1909e:	4604      	mov	r4, r0
   190a0:	460f      	mov	r7, r1
   190a2:	4691      	mov	r9, r2
   190a4:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   190a6:	f500 7090 	add.w	r0, r0, #288	; 0x120
   190aa:	f00a f91d 	bl	232e8 <k_work_cancel_delayable>
	if (!chan->req) {
   190ae:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   190b2:	b1f8      	cbz	r0, 190f4 <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   190b4:	4b14      	ldr	r3, [pc, #80]	; (19108 <att_handle_rsp+0x70>)
   190b6:	4298      	cmp	r0, r3
   190b8:	d022      	beq.n	19100 <att_handle_rsp+0x68>
	func = chan->req->func;
   190ba:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   190bc:	f04f 0a00 	mov.w	sl, #0
   190c0:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   190c4:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   190c8:	f8d0 8018 	ldr.w	r8, [r0, #24]
	bt_att_req_free(chan->req);
   190cc:	f7ff ffd0 	bl	19070 <bt_att_req_free>
	chan->req = NULL;
   190d0:	f8c4 a0fc 	str.w	sl, [r4, #252]	; 0xfc
	att_req_send_process(chan->att);
   190d4:	6820      	ldr	r0, [r4, #0]
   190d6:	f012 fdd0 	bl	2bc7a <att_req_send_process>
	if (func) {
   190da:	b13d      	cbz	r5, 190ec <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   190dc:	6823      	ldr	r3, [r4, #0]
   190de:	6818      	ldr	r0, [r3, #0]
   190e0:	f8cd 8000 	str.w	r8, [sp]
   190e4:	464b      	mov	r3, r9
   190e6:	463a      	mov	r2, r7
   190e8:	4631      	mov	r1, r6
   190ea:	47a8      	blx	r5
}
   190ec:	2000      	movs	r0, #0
   190ee:	b002      	add	sp, #8
   190f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
   190f4:	2157      	movs	r1, #87	; 0x57
   190f6:	4805      	ldr	r0, [pc, #20]	; (1910c <att_handle_rsp+0x74>)
   190f8:	f00f fcc4 	bl	28a84 <z_log_minimal_printk>
	bt_att_func_t func = NULL;
   190fc:	2500      	movs	r5, #0
		goto process;
   190fe:	e7e9      	b.n	190d4 <att_handle_rsp+0x3c>
		chan->req = NULL;
   19100:	2500      	movs	r5, #0
   19102:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
		goto process;
   19106:	e7e5      	b.n	190d4 <att_handle_rsp+0x3c>
   19108:	200027f0 	.word	0x200027f0
   1910c:	00031ab8 	.word	0x00031ab8

00019110 <att_reset>:
{
   19110:	b570      	push	{r4, r5, r6, lr}
   19112:	b084      	sub	sp, #16
   19114:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19116:	2200      	movs	r2, #0
   19118:	2300      	movs	r3, #0
   1911a:	9803      	ldr	r0, [sp, #12]
   1911c:	300c      	adds	r0, #12
   1911e:	f003 ff53 	bl	1cfc8 <net_buf_get>
   19122:	4603      	mov	r3, r0
   19124:	b118      	cbz	r0, 1912e <att_reset+0x1e>
		net_buf_unref(buf);
   19126:	4618      	mov	r0, r3
   19128:	f003 ffd6 	bl	1d0d8 <net_buf_unref>
   1912c:	e7f3      	b.n	19116 <att_reset+0x6>
	att->conn = NULL;
   1912e:	9b03      	ldr	r3, [sp, #12]
   19130:	2200      	movs	r2, #0
   19132:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19134:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   19136:	685d      	ldr	r5, [r3, #4]
   19138:	b11d      	cbz	r5, 19142 <att_reset+0x32>
   1913a:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1913c:	b135      	cbz	r5, 1914c <att_reset+0x3c>
	return node->next;
   1913e:	682c      	ldr	r4, [r5, #0]
   19140:	e004      	b.n	1914c <att_reset+0x3c>
   19142:	462c      	mov	r4, r5
   19144:	e002      	b.n	1914c <att_reset+0x3c>
   19146:	4623      	mov	r3, r4
   19148:	4625      	mov	r5, r4
   1914a:	461c      	mov	r4, r3
   1914c:	b195      	cbz	r5, 19174 <att_reset+0x64>
		if (req->func) {
   1914e:	686e      	ldr	r6, [r5, #4]
   19150:	b136      	cbz	r6, 19160 <att_reset+0x50>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   19152:	69ab      	ldr	r3, [r5, #24]
   19154:	9300      	str	r3, [sp, #0]
   19156:	2300      	movs	r3, #0
   19158:	461a      	mov	r2, r3
   1915a:	210e      	movs	r1, #14
   1915c:	4618      	mov	r0, r3
   1915e:	47b0      	blx	r6
		bt_att_req_free(req);
   19160:	4628      	mov	r0, r5
   19162:	f7ff ff85 	bl	19070 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19166:	2c00      	cmp	r4, #0
   19168:	d0ed      	beq.n	19146 <att_reset+0x36>
   1916a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1916c:	2c00      	cmp	r4, #0
   1916e:	d0eb      	beq.n	19148 <att_reset+0x38>
	return node->next;
   19170:	6823      	ldr	r3, [r4, #0]
   19172:	e7e9      	b.n	19148 <att_reset+0x38>
	k_mem_slab_free(&att_slab, (void **)&att);
   19174:	a903      	add	r1, sp, #12
   19176:	4802      	ldr	r0, [pc, #8]	; (19180 <att_reset+0x70>)
   19178:	f008 fe14 	bl	21da4 <k_mem_slab_free>
}
   1917c:	b004      	add	sp, #16
   1917e:	bd70      	pop	{r4, r5, r6, pc}
   19180:	20000764 	.word	0x20000764

00019184 <att_timeout>:
{
   19184:	b510      	push	{r4, lr}
   19186:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   19188:	2145      	movs	r1, #69	; 0x45
   1918a:	4804      	ldr	r0, [pc, #16]	; (1919c <att_timeout+0x18>)
   1918c:	f00f fc7a 	bl	28a84 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   19190:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
   19194:	f013 f9e8 	bl	2c568 <bt_att_disconnected>
}
   19198:	bd10      	pop	{r4, pc}
   1919a:	bf00      	nop
   1919c:	00031ad4 	.word	0x00031ad4

000191a0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   191a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191a4:	b082      	sub	sp, #8
   191a6:	460c      	mov	r4, r1
   191a8:	4615      	mov	r5, r2
   191aa:	461f      	mov	r7, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   191ac:	4606      	mov	r6, r0
   191ae:	b180      	cbz	r0, 191d2 <bt_att_send+0x32>
	__ASSERT_NO_MSG(buf);
   191b0:	b1ec      	cbz	r4, 191ee <bt_att_send+0x4e>

	att = att_get(conn);
   191b2:	4630      	mov	r0, r6
   191b4:	f7ff f8ca 	bl	1834c <att_get>
	if (!att) {
   191b8:	4680      	mov	r8, r0
   191ba:	b330      	cbz	r0, 1920a <bt_att_send+0x6a>
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   191bc:	b35d      	cbz	r5, 19216 <bt_att_send+0x76>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   191be:	9700      	str	r7, [sp, #0]
   191c0:	462b      	mov	r3, r5
   191c2:	4622      	mov	r2, r4
   191c4:	2104      	movs	r1, #4
   191c6:	4630      	mov	r0, r6
   191c8:	f012 fb9d 	bl	2b906 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   191cc:	b002      	add	sp, #8
   191ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(conn);
   191d2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1922c <bt_att_send+0x8c>
   191d6:	f640 32f2 	movw	r2, #3058	; 0xbf2
   191da:	4641      	mov	r1, r8
   191dc:	4812      	ldr	r0, [pc, #72]	; (19228 <bt_att_send+0x88>)
   191de:	f00f f8b0 	bl	28342 <printk>
   191e2:	f640 31f2 	movw	r1, #3058	; 0xbf2
   191e6:	4640      	mov	r0, r8
   191e8:	f00f fc44 	bl	28a74 <assert_post_action>
   191ec:	e7e0      	b.n	191b0 <bt_att_send+0x10>
	__ASSERT_NO_MSG(buf);
   191ee:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1922c <bt_att_send+0x8c>
   191f2:	f640 32f3 	movw	r2, #3059	; 0xbf3
   191f6:	4641      	mov	r1, r8
   191f8:	480b      	ldr	r0, [pc, #44]	; (19228 <bt_att_send+0x88>)
   191fa:	f00f f8a2 	bl	28342 <printk>
   191fe:	f640 31f3 	movw	r1, #3059	; 0xbf3
   19202:	4640      	mov	r0, r8
   19204:	f00f fc36 	bl	28a74 <assert_post_action>
   19208:	e7d3      	b.n	191b2 <bt_att_send+0x12>
		net_buf_unref(buf);
   1920a:	4620      	mov	r0, r4
   1920c:	f003 ff64 	bl	1d0d8 <net_buf_unref>
		return -ENOTCONN;
   19210:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19214:	e7da      	b.n	191cc <bt_att_send+0x2c>
	net_buf_put(&att->tx_queue, buf);
   19216:	4621      	mov	r1, r4
   19218:	300c      	adds	r0, #12
   1921a:	f003 ff2b 	bl	1d074 <net_buf_put>
	att_send_process(att);
   1921e:	4640      	mov	r0, r8
   19220:	f012 fdf4 	bl	2be0c <att_send_process>
	return 0;
   19224:	2000      	movs	r0, #0
   19226:	e7d1      	b.n	191cc <bt_att_send+0x2c>
   19228:	0002f968 	.word	0x0002f968
   1922c:	00031948 	.word	0x00031948

00019230 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   19230:	b570      	push	{r4, r5, r6, lr}
   19232:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   19234:	4605      	mov	r5, r0
   19236:	b180      	cbz	r0, 1925a <bt_att_req_send+0x2a>
	__ASSERT_NO_MSG(req);
   19238:	b1e4      	cbz	r4, 19274 <bt_att_req_send+0x44>

	att = att_get(conn);
   1923a:	4628      	mov	r0, r5
   1923c:	f7ff f886 	bl	1834c <att_get>
	if (!att) {
   19240:	4603      	mov	r3, r0
   19242:	b338      	cbz	r0, 19294 <bt_att_req_send+0x64>
	parent->next = child;
   19244:	2200      	movs	r2, #0
   19246:	6022      	str	r2, [r4, #0]
	return list->tail;
   19248:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1924a:	b302      	cbz	r2, 1928e <bt_att_req_send+0x5e>
	parent->next = child;
   1924c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1924e:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   19250:	4618      	mov	r0, r3
   19252:	f012 fd12 	bl	2bc7a <att_req_send_process>

	return 0;
   19256:	2000      	movs	r0, #0
}
   19258:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(conn);
   1925a:	4e10      	ldr	r6, [pc, #64]	; (1929c <bt_att_req_send+0x6c>)
   1925c:	f640 420f 	movw	r2, #3087	; 0xc0f
   19260:	4631      	mov	r1, r6
   19262:	480f      	ldr	r0, [pc, #60]	; (192a0 <bt_att_req_send+0x70>)
   19264:	f00f f86d 	bl	28342 <printk>
   19268:	f640 410f 	movw	r1, #3087	; 0xc0f
   1926c:	4630      	mov	r0, r6
   1926e:	f00f fc01 	bl	28a74 <assert_post_action>
   19272:	e7e1      	b.n	19238 <bt_att_req_send+0x8>
	__ASSERT_NO_MSG(req);
   19274:	4e09      	ldr	r6, [pc, #36]	; (1929c <bt_att_req_send+0x6c>)
   19276:	f44f 6241 	mov.w	r2, #3088	; 0xc10
   1927a:	4631      	mov	r1, r6
   1927c:	4808      	ldr	r0, [pc, #32]	; (192a0 <bt_att_req_send+0x70>)
   1927e:	f00f f860 	bl	28342 <printk>
   19282:	f44f 6141 	mov.w	r1, #3088	; 0xc10
   19286:	4630      	mov	r0, r6
   19288:	f00f fbf4 	bl	28a74 <assert_post_action>
   1928c:	e7d5      	b.n	1923a <bt_att_req_send+0xa>
   1928e:	6084      	str	r4, [r0, #8]
	list->head = node;
   19290:	6044      	str	r4, [r0, #4]
}
   19292:	e7dd      	b.n	19250 <bt_att_req_send+0x20>
		return -ENOTCONN;
   19294:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19298:	e7de      	b.n	19258 <bt_att_req_send+0x28>
   1929a:	bf00      	nop
   1929c:	00031948 	.word	0x00031948
   192a0:	0002f968 	.word	0x0002f968

000192a4 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   192a4:	b510      	push	{r4, lr}
   192a6:	4614      	mov	r4, r2
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   192a8:	2210      	movs	r2, #16
   192aa:	4907      	ldr	r1, [pc, #28]	; (192c8 <db_hash_set+0x24>)
   192ac:	4618      	mov	r0, r3
   192ae:	47a0      	blx	r4
	if (len < 0) {
   192b0:	1e04      	subs	r4, r0, #0
   192b2:	db02      	blt.n	192ba <db_hash_set+0x16>
	}

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
   192b4:	2400      	movs	r4, #0
}
   192b6:	4620      	mov	r0, r4
   192b8:	bd10      	pop	{r4, pc}
		BT_ERR("Failed to decode value (err %zd)", len);
   192ba:	4622      	mov	r2, r4
   192bc:	2145      	movs	r1, #69	; 0x45
   192be:	4803      	ldr	r0, [pc, #12]	; (192cc <db_hash_set+0x28>)
   192c0:	f00f fbe0 	bl	28a84 <z_log_minimal_printk>
		return len;
   192c4:	e7f7      	b.n	192b6 <db_hash_set+0x12>
   192c6:	bf00      	nop
   192c8:	200019c0 	.word	0x200019c0
   192cc:	00031b58 	.word	0x00031b58

000192d0 <db_hash_store>:
{
   192d0:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   192d2:	2210      	movs	r2, #16
   192d4:	4905      	ldr	r1, [pc, #20]	; (192ec <db_hash_store+0x1c>)
   192d6:	4806      	ldr	r0, [pc, #24]	; (192f0 <db_hash_store+0x20>)
   192d8:	f7f8 fdc2 	bl	11e60 <settings_save_one>
	if (err) {
   192dc:	b900      	cbnz	r0, 192e0 <db_hash_store+0x10>
}
   192de:	bd08      	pop	{r3, pc}
   192e0:	4602      	mov	r2, r0
		BT_ERR("Failed to save Database Hash (err %d)", err);
   192e2:	2145      	movs	r1, #69	; 0x45
   192e4:	4803      	ldr	r0, [pc, #12]	; (192f4 <db_hash_store+0x24>)
   192e6:	f00f fbcd 	bl	28a84 <z_log_minimal_printk>
}
   192ea:	e7f8      	b.n	192de <db_hash_store+0xe>
   192ec:	200019b0 	.word	0x200019b0
   192f0:	00031b80 	.word	0x00031b80
   192f4:	00031b88 	.word	0x00031b88

000192f8 <find_cf_cfg>:
{
   192f8:	b570      	push	{r4, r5, r6, lr}
   192fa:	b082      	sub	sp, #8
   192fc:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   192fe:	2400      	movs	r4, #0
   19300:	e00b      	b.n	1931a <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19302:	4628      	mov	r0, r5
   19304:	2300      	movs	r3, #0
   19306:	9300      	str	r3, [sp, #0]
   19308:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1930c:	2207      	movs	r2, #7
   1930e:	4669      	mov	r1, sp
   19310:	3001      	adds	r0, #1
   19312:	f011 fa97 	bl	2a844 <memcmp>
   19316:	b1a0      	cbz	r0, 19342 <find_cf_cfg+0x4a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19318:	3401      	adds	r4, #1
   1931a:	2c01      	cmp	r4, #1
   1931c:	dc10      	bgt.n	19340 <find_cf_cfg+0x48>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1931e:	4d0a      	ldr	r5, [pc, #40]	; (19348 <find_cf_cfg+0x50>)
   19320:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   19324:	2e00      	cmp	r6, #0
   19326:	d0ec      	beq.n	19302 <find_cf_cfg+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19328:	4907      	ldr	r1, [pc, #28]	; (19348 <find_cf_cfg+0x50>)
   1932a:	0123      	lsls	r3, r4, #4
   1932c:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   19330:	3201      	adds	r2, #1
   19332:	5cc9      	ldrb	r1, [r1, r3]
   19334:	4630      	mov	r0, r6
   19336:	f012 f9f1 	bl	2b71c <bt_conn_is_peer_addr_le>
   1933a:	2800      	cmp	r0, #0
   1933c:	d0ec      	beq.n	19318 <find_cf_cfg+0x20>
   1933e:	e000      	b.n	19342 <find_cf_cfg+0x4a>
	return NULL;
   19340:	2500      	movs	r5, #0
}
   19342:	4628      	mov	r0, r5
   19344:	b002      	add	sp, #8
   19346:	bd70      	pop	{r4, r5, r6, pc}
   19348:	20002814 	.word	0x20002814

0001934c <find_sc_cfg>:
{
   1934c:	b570      	push	{r4, r5, r6, lr}
   1934e:	4605      	mov	r5, r0
   19350:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19352:	2400      	movs	r4, #0
   19354:	e000      	b.n	19358 <find_sc_cfg+0xc>
   19356:	3401      	adds	r4, #1
   19358:	2c01      	cmp	r4, #1
   1935a:	d817      	bhi.n	1938c <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   1935c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19360:	4a0b      	ldr	r2, [pc, #44]	; (19390 <find_sc_cfg+0x44>)
   19362:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   19366:	429d      	cmp	r5, r3
   19368:	d1f5      	bne.n	19356 <find_sc_cfg+0xa>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1936a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1936e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   19372:	2207      	movs	r2, #7
   19374:	4631      	mov	r1, r6
   19376:	3001      	adds	r0, #1
   19378:	f011 fa64 	bl	2a844 <memcmp>
		if (id == sc_cfg[i].id &&
   1937c:	2800      	cmp	r0, #0
   1937e:	d1ea      	bne.n	19356 <find_sc_cfg+0xa>
			return &sc_cfg[i];
   19380:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19384:	4802      	ldr	r0, [pc, #8]	; (19390 <find_sc_cfg+0x44>)
   19386:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1938a:	e000      	b.n	1938e <find_sc_cfg+0x42>
	return NULL;
   1938c:	2000      	movs	r0, #0
}
   1938e:	bd70      	pop	{r4, r5, r6, pc}
   19390:	20002838 	.word	0x20002838

00019394 <ccc_save>:
{
   19394:	b538      	push	{r3, r4, r5, lr}
   19396:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19398:	6882      	ldr	r2, [r0, #8]
   1939a:	4b0d      	ldr	r3, [pc, #52]	; (193d0 <ccc_save+0x3c>)
   1939c:	429a      	cmp	r2, r3
   1939e:	d001      	beq.n	193a4 <ccc_save+0x10>
}
   193a0:	2001      	movs	r0, #1
   193a2:	bd38      	pop	{r3, r4, r5, pc}
   193a4:	460d      	mov	r5, r1
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   193a6:	7922      	ldrb	r2, [r4, #4]
   193a8:	6821      	ldr	r1, [r4, #0]
   193aa:	68c0      	ldr	r0, [r0, #12]
   193ac:	f013 fa16 	bl	2c7dc <ccc_find_cfg>
	if (!cfg) {
   193b0:	2800      	cmp	r0, #0
   193b2:	d0f5      	beq.n	193a0 <ccc_save+0xc>
	save->store[save->count].handle = handle;
   193b4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   193b8:	1c9a      	adds	r2, r3, #2
   193ba:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
	save->store[save->count].value = cfg->value;
   193be:	8901      	ldrh	r1, [r0, #8]
   193c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   193c4:	8051      	strh	r1, [r2, #2]
	save->count++;
   193c6:	3301      	adds	r3, #1
   193c8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return BT_GATT_ITER_CONTINUE;
   193cc:	e7e8      	b.n	193a0 <ccc_save+0xc>
   193ce:	bf00      	nop
   193d0:	0001949d 	.word	0x0001949d

000193d4 <find_cf_cfg_by_addr>:
{
   193d4:	b570      	push	{r4, r5, r6, lr}
   193d6:	4605      	mov	r5, r0
   193d8:	460e      	mov	r6, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   193da:	2400      	movs	r4, #0
   193dc:	e000      	b.n	193e0 <find_cf_cfg_by_addr+0xc>
   193de:	3401      	adds	r4, #1
   193e0:	2c01      	cmp	r4, #1
   193e2:	dc11      	bgt.n	19408 <find_cf_cfg_by_addr+0x34>
			if (id == cf_cfg[i].id &&
   193e4:	0123      	lsls	r3, r4, #4
   193e6:	4a09      	ldr	r2, [pc, #36]	; (1940c <find_cf_cfg_by_addr+0x38>)
   193e8:	5cd3      	ldrb	r3, [r2, r3]
   193ea:	42ab      	cmp	r3, r5
   193ec:	d1f7      	bne.n	193de <find_cf_cfg_by_addr+0xa>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   193ee:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   193f2:	2207      	movs	r2, #7
   193f4:	3101      	adds	r1, #1
   193f6:	4630      	mov	r0, r6
   193f8:	f011 fa24 	bl	2a844 <memcmp>
			if (id == cf_cfg[i].id &&
   193fc:	2800      	cmp	r0, #0
   193fe:	d1ee      	bne.n	193de <find_cf_cfg_by_addr+0xa>
				return &cf_cfg[i];
   19400:	4802      	ldr	r0, [pc, #8]	; (1940c <find_cf_cfg_by_addr+0x38>)
   19402:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   19406:	e000      	b.n	1940a <find_cf_cfg_by_addr+0x36>
	return NULL;
   19408:	2000      	movs	r0, #0
}
   1940a:	bd70      	pop	{r4, r5, r6, pc}
   1940c:	20002814 	.word	0x20002814

00019410 <cf_write>:
{
   19410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19414:	461d      	mov	r5, r3
   19416:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1941a:	2b01      	cmp	r3, #1
   1941c:	d833      	bhi.n	19486 <cf_write+0x76>
   1941e:	4606      	mov	r6, r0
   19420:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   19422:	462f      	mov	r7, r5
   19424:	442b      	add	r3, r5
   19426:	2b01      	cmp	r3, #1
   19428:	d830      	bhi.n	1948c <cf_write+0x7c>
	cfg = find_cf_cfg(conn);
   1942a:	f7ff ff65 	bl	192f8 <find_cf_cfg>
	if (!cfg) {
   1942e:	4604      	mov	r4, r0
   19430:	b1f0      	cbz	r0, 19470 <cf_write+0x60>
	if (!cfg) {
   19432:	b30c      	cbz	r4, 19478 <cf_write+0x68>
	if (!cf_set_value(cfg, value, len)) {
   19434:	462a      	mov	r2, r5
   19436:	4641      	mov	r1, r8
   19438:	4620      	mov	r0, r4
   1943a:	f013 f8bc 	bl	2c5b6 <cf_set_value>
   1943e:	b340      	cbz	r0, 19492 <cf_write+0x82>
	memcpy(dst, src, sizeof(*dst));
   19440:	2207      	movs	r2, #7
   19442:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19446:	1c60      	adds	r0, r4, #1
   19448:	f011 fa29 	bl	2a89e <memcpy>
	cfg->id = conn->id;
   1944c:	7a33      	ldrb	r3, [r6, #8]
   1944e:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19452:	f3bf 8f5b 	dmb	ish
   19456:	e854 3f00 	ldrex	r3, [r4]
   1945a:	f043 0301 	orr.w	r3, r3, #1
   1945e:	e844 3200 	strex	r2, r3, [r4]
   19462:	2a00      	cmp	r2, #0
   19464:	d1f7      	bne.n	19456 <cf_write+0x46>
   19466:	f3bf 8f5b 	dmb	ish
}
   1946a:	4638      	mov	r0, r7
   1946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   19470:	f7ff ff42 	bl	192f8 <find_cf_cfg>
   19474:	4604      	mov	r4, r0
   19476:	e7dc      	b.n	19432 <cf_write+0x22>
		BT_WARN("No space to store Client Supported Features");
   19478:	2157      	movs	r1, #87	; 0x57
   1947a:	4807      	ldr	r0, [pc, #28]	; (19498 <cf_write+0x88>)
   1947c:	f00f fb02 	bl	28a84 <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19480:	f06f 0710 	mvn.w	r7, #16
   19484:	e7f1      	b.n	1946a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19486:	f06f 0706 	mvn.w	r7, #6
   1948a:	e7ee      	b.n	1946a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1948c:	f06f 070c 	mvn.w	r7, #12
   19490:	e7eb      	b.n	1946a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   19492:	f06f 0712 	mvn.w	r7, #18
   19496:	e7e8      	b.n	1946a <cf_write+0x5a>
   19498:	00031bb4 	.word	0x00031bb4

0001949c <bt_gatt_attr_write_ccc>:
{
   1949c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194a0:	461c      	mov	r4, r3
   194a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   194a6:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   194a8:	2b00      	cmp	r3, #0
   194aa:	d14b      	bne.n	19544 <bt_gatt_attr_write_ccc+0xa8>
   194ac:	4681      	mov	r9, r0
   194ae:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   194b0:	1e63      	subs	r3, r4, #1
   194b2:	b29b      	uxth	r3, r3
   194b4:	2b01      	cmp	r3, #1
   194b6:	d848      	bhi.n	1954a <bt_gatt_attr_write_ccc+0xae>
	if (len < sizeof(uint16_t)) {
   194b8:	2c01      	cmp	r4, #1
   194ba:	d91d      	bls.n	194f8 <bt_gatt_attr_write_ccc+0x5c>
   194bc:	7853      	ldrb	r3, [r2, #1]
   194be:	7815      	ldrb	r5, [r2, #0]
   194c0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   194c4:	4639      	mov	r1, r7
   194c6:	4648      	mov	r0, r9
   194c8:	f013 f95c 	bl	2c784 <find_ccc_cfg>
	if (!cfg) {
   194cc:	4680      	mov	r8, r0
   194ce:	b1a8      	cbz	r0, 194fc <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
   194d0:	693b      	ldr	r3, [r7, #16]
   194d2:	b143      	cbz	r3, 194e6 <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   194d4:	462a      	mov	r2, r5
   194d6:	4631      	mov	r1, r6
   194d8:	4648      	mov	r0, r9
   194da:	4798      	blx	r3
		if (write < 0) {
   194dc:	2800      	cmp	r0, #0
   194de:	db09      	blt.n	194f4 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
   194e0:	3801      	subs	r0, #1
   194e2:	2801      	cmp	r0, #1
   194e4:	d834      	bhi.n	19550 <bt_gatt_attr_write_ccc+0xb4>
	cfg->value = value;
   194e6:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   194ea:	897b      	ldrh	r3, [r7, #10]
   194ec:	429d      	cmp	r5, r3
   194ee:	d120      	bne.n	19532 <bt_gatt_attr_write_ccc+0x96>
	if (!value) {
   194f0:	b325      	cbz	r5, 1953c <bt_gatt_attr_write_ccc+0xa0>
	return len;
   194f2:	4620      	mov	r0, r4
}
   194f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   194f8:	7815      	ldrb	r5, [r2, #0]
   194fa:	e7e3      	b.n	194c4 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   194fc:	b90d      	cbnz	r5, 19502 <bt_gatt_attr_write_ccc+0x66>
			return len;
   194fe:	4620      	mov	r0, r4
   19500:	e7f8      	b.n	194f4 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   19502:	4639      	mov	r1, r7
   19504:	2000      	movs	r0, #0
   19506:	f013 f93d 	bl	2c784 <find_ccc_cfg>
		if (!cfg) {
   1950a:	4680      	mov	r8, r0
   1950c:	b150      	cbz	r0, 19524 <bt_gatt_attr_write_ccc+0x88>
   1950e:	2207      	movs	r2, #7
   19510:	f109 0190 	add.w	r1, r9, #144	; 0x90
   19514:	3001      	adds	r0, #1
   19516:	f011 f9c2 	bl	2a89e <memcpy>
		cfg->id = conn->id;
   1951a:	f899 3008 	ldrb.w	r3, [r9, #8]
   1951e:	f888 3000 	strb.w	r3, [r8]
   19522:	e7d5      	b.n	194d0 <bt_gatt_attr_write_ccc+0x34>
			BT_WARN("No space to store CCC cfg");
   19524:	2157      	movs	r1, #87	; 0x57
   19526:	480c      	ldr	r0, [pc, #48]	; (19558 <bt_gatt_attr_write_ccc+0xbc>)
   19528:	f00f faac 	bl	28a84 <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1952c:	f06f 0010 	mvn.w	r0, #16
   19530:	e7e0      	b.n	194f4 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   19532:	4639      	mov	r1, r7
   19534:	4630      	mov	r0, r6
   19536:	f013 f86f 	bl	2c618 <gatt_ccc_changed>
   1953a:	e7d9      	b.n	194f0 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   1953c:	4640      	mov	r0, r8
   1953e:	f013 f96d 	bl	2c81c <clear_ccc_cfg>
   19542:	e7d6      	b.n	194f2 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19544:	f06f 0006 	mvn.w	r0, #6
   19548:	e7d4      	b.n	194f4 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1954a:	f06f 000c 	mvn.w	r0, #12
   1954e:	e7d1      	b.n	194f4 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19550:	f06f 000d 	mvn.w	r0, #13
   19554:	e7ce      	b.n	194f4 <bt_gatt_attr_write_ccc+0x58>
   19556:	bf00      	nop
   19558:	00031be8 	.word	0x00031be8

0001955c <ccc_load>:
{
   1955c:	b570      	push	{r4, r5, r6, lr}
   1955e:	b082      	sub	sp, #8
   19560:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19562:	6882      	ldr	r2, [r0, #8]
   19564:	4b20      	ldr	r3, [pc, #128]	; (195e8 <ccc_load+0x8c>)
   19566:	429a      	cmp	r2, r3
   19568:	d002      	beq.n	19570 <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
   1956a:	2001      	movs	r0, #1
}
   1956c:	b002      	add	sp, #8
   1956e:	bd70      	pop	{r4, r5, r6, pc}
	ccc = attr->user_data;
   19570:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
   19572:	68a3      	ldr	r3, [r4, #8]
   19574:	b143      	cbz	r3, 19588 <ccc_load+0x2c>
	} else if (!load->count) {
   19576:	68e2      	ldr	r2, [r4, #12]
   19578:	2a00      	cmp	r2, #0
   1957a:	d033      	beq.n	195e4 <ccc_load+0x88>
	if (load->entry->handle != handle) {
   1957c:	881b      	ldrh	r3, [r3, #0]
   1957e:	428b      	cmp	r3, r1
   19580:	d009      	beq.n	19596 <ccc_load+0x3a>
		if (load->entry->handle < handle) {
   19582:	d312      	bcc.n	195aa <ccc_load+0x4e>
		return BT_GATT_ITER_CONTINUE;
   19584:	2001      	movs	r0, #1
   19586:	e7f1      	b.n	1956c <ccc_load+0x10>
		ccc_clear(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   19588:	7922      	ldrb	r2, [r4, #4]
   1958a:	6821      	ldr	r1, [r4, #0]
   1958c:	4628      	mov	r0, r5
   1958e:	f013 f955 	bl	2c83c <ccc_clear>
		return BT_GATT_ITER_CONTINUE;
   19592:	2001      	movs	r0, #1
   19594:	e7ea      	b.n	1956c <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   19596:	7922      	ldrb	r2, [r4, #4]
   19598:	6821      	ldr	r1, [r4, #0]
   1959a:	4628      	mov	r0, r5
   1959c:	f013 f91e 	bl	2c7dc <ccc_find_cfg>
	if (!cfg) {
   195a0:	4606      	mov	r6, r0
   195a2:	b160      	cbz	r0, 195be <ccc_load+0x62>
	cfg->value = load->entry->value;
   195a4:	68a3      	ldr	r3, [r4, #8]
   195a6:	885b      	ldrh	r3, [r3, #2]
   195a8:	8133      	strh	r3, [r6, #8]
	load->entry++;
   195aa:	68a3      	ldr	r3, [r4, #8]
   195ac:	3304      	adds	r3, #4
   195ae:	60a3      	str	r3, [r4, #8]
	load->count--;
   195b0:	68e0      	ldr	r0, [r4, #12]
   195b2:	3801      	subs	r0, #1
   195b4:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   195b6:	3800      	subs	r0, #0
   195b8:	bf18      	it	ne
   195ba:	2001      	movne	r0, #1
   195bc:	e7d6      	b.n	1956c <ccc_load+0x10>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   195be:	2200      	movs	r2, #0
   195c0:	9200      	str	r2, [sp, #0]
   195c2:	f8cd 2003 	str.w	r2, [sp, #3]
   195c6:	4669      	mov	r1, sp
   195c8:	4628      	mov	r0, r5
   195ca:	f013 f907 	bl	2c7dc <ccc_find_cfg>
		if (!cfg) {
   195ce:	4606      	mov	r6, r0
   195d0:	2800      	cmp	r0, #0
   195d2:	d0ea      	beq.n	195aa <ccc_load+0x4e>
   195d4:	2207      	movs	r2, #7
   195d6:	6821      	ldr	r1, [r4, #0]
   195d8:	3001      	adds	r0, #1
   195da:	f011 f960 	bl	2a89e <memcpy>
		cfg->id = load->addr_with_id.id;
   195de:	7923      	ldrb	r3, [r4, #4]
   195e0:	7033      	strb	r3, [r6, #0]
   195e2:	e7df      	b.n	195a4 <ccc_load+0x48>
		return BT_GATT_ITER_STOP;
   195e4:	2000      	movs	r0, #0
   195e6:	e7c1      	b.n	1956c <ccc_load+0x10>
   195e8:	0001949d 	.word	0x0001949d

000195ec <sc_store>:
{
   195ec:	b530      	push	{r4, r5, lr}
   195ee:	b08d      	sub	sp, #52	; 0x34
   195f0:	4604      	mov	r4, r0
	if (cfg->id) {
   195f2:	7802      	ldrb	r2, [r0, #0]
   195f4:	b1aa      	cbz	r2, 19622 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   195f6:	ad02      	add	r5, sp, #8
   195f8:	2104      	movs	r1, #4
   195fa:	4628      	mov	r0, r5
   195fc:	f7f6 fe60 	bl	102c0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   19600:	9500      	str	r5, [sp, #0]
   19602:	1c63      	adds	r3, r4, #1
   19604:	4a0e      	ldr	r2, [pc, #56]	; (19640 <sc_store+0x54>)
   19606:	2124      	movs	r1, #36	; 0x24
   19608:	a803      	add	r0, sp, #12
   1960a:	f7fa ff95 	bl	14538 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1960e:	2204      	movs	r2, #4
   19610:	f104 0108 	add.w	r1, r4, #8
   19614:	a803      	add	r0, sp, #12
   19616:	f7f8 fc23 	bl	11e60 <settings_save_one>
	if (err) {
   1961a:	4602      	mov	r2, r0
   1961c:	b950      	cbnz	r0, 19634 <sc_store+0x48>
}
   1961e:	b00d      	add	sp, #52	; 0x34
   19620:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   19622:	2300      	movs	r3, #0
   19624:	9300      	str	r3, [sp, #0]
   19626:	1c43      	adds	r3, r0, #1
   19628:	4a05      	ldr	r2, [pc, #20]	; (19640 <sc_store+0x54>)
   1962a:	2124      	movs	r1, #36	; 0x24
   1962c:	a803      	add	r0, sp, #12
   1962e:	f7fa ff83 	bl	14538 <bt_settings_encode_key>
   19632:	e7ec      	b.n	1960e <sc_store+0x22>
		BT_ERR("failed to store SC (err %d)", err);
   19634:	2145      	movs	r1, #69	; 0x45
   19636:	4803      	ldr	r0, [pc, #12]	; (19644 <sc_store+0x58>)
   19638:	f00f fa24 	bl	28a84 <z_log_minimal_printk>
		return;
   1963c:	e7ef      	b.n	1961e <sc_store+0x32>
   1963e:	bf00      	nop
   19640:	00031c08 	.word	0x00031c08
   19644:	00031c0c 	.word	0x00031c0c

00019648 <sc_save>:
{
   19648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1964c:	b082      	sub	sp, #8
   1964e:	4607      	mov	r7, r0
   19650:	4688      	mov	r8, r1
   19652:	4616      	mov	r6, r2
   19654:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19656:	f7ff fe79 	bl	1934c <find_sc_cfg>
	if (!cfg) {
   1965a:	4604      	mov	r4, r0
   1965c:	b1a8      	cbz	r0, 1968a <sc_save+0x42>
	if (!(cfg->data.start || cfg->data.end)) {
   1965e:	8923      	ldrh	r3, [r4, #8]
   19660:	b90b      	cbnz	r3, 19666 <sc_save+0x1e>
   19662:	8963      	ldrh	r3, [r4, #10]
   19664:	b32b      	cbz	r3, 196b2 <sc_save+0x6a>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   19666:	462b      	mov	r3, r5
   19668:	4632      	mov	r2, r6
   1966a:	f104 010a 	add.w	r1, r4, #10
   1966e:	f104 0008 	add.w	r0, r4, #8
   19672:	f012 ff8b 	bl	2c58c <update_range>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   19676:	b128      	cbz	r0, 19684 <sc_save+0x3c>
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   19678:	4621      	mov	r1, r4
   1967a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1967e:	f011 fbfb 	bl	2ae78 <bt_addr_le_is_bonded>
   19682:	b9c8      	cbnz	r0, 196b8 <sc_save+0x70>
}
   19684:	b002      	add	sp, #8
   19686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1968a:	9000      	str	r0, [sp, #0]
   1968c:	f8cd 0003 	str.w	r0, [sp, #3]
   19690:	4669      	mov	r1, sp
   19692:	f7ff fe5b 	bl	1934c <find_sc_cfg>
		if (!cfg) {
   19696:	4604      	mov	r4, r0
   19698:	b130      	cbz	r0, 196a8 <sc_save+0x60>
		cfg->id = id;
   1969a:	f800 7b01 	strb.w	r7, [r0], #1
   1969e:	2207      	movs	r2, #7
   196a0:	4641      	mov	r1, r8
   196a2:	f011 f8fc 	bl	2a89e <memcpy>
   196a6:	e7da      	b.n	1965e <sc_save+0x16>
			BT_ERR("unable to save SC: no cfg left");
   196a8:	2145      	movs	r1, #69	; 0x45
   196aa:	4805      	ldr	r0, [pc, #20]	; (196c0 <sc_save+0x78>)
   196ac:	f00f f9ea 	bl	28a84 <z_log_minimal_printk>
			return;
   196b0:	e7e8      	b.n	19684 <sc_save+0x3c>
		cfg->data.start = start;
   196b2:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   196b4:	8165      	strh	r5, [r4, #10]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   196b6:	e7df      	b.n	19678 <sc_save+0x30>
		sc_store(cfg);
   196b8:	4620      	mov	r0, r4
   196ba:	f7ff ff97 	bl	195ec <sc_store>
   196be:	e7e1      	b.n	19684 <sc_save+0x3c>
   196c0:	00031c30 	.word	0x00031c30

000196c4 <bt_gatt_store_cf>:
{
   196c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   196c6:	b08d      	sub	sp, #52	; 0x34
   196c8:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   196ca:	f7ff fe15 	bl	192f8 <find_cf_cfg>
	if (!cfg) {
   196ce:	4605      	mov	r5, r0
   196d0:	b348      	cbz	r0, 19726 <bt_gatt_store_cf+0x62>
		str = (char *)cfg->data;
   196d2:	f100 0608 	add.w	r6, r0, #8
		if (conn->id) {
   196d6:	7a22      	ldrb	r2, [r4, #8]
   196d8:	b9b2      	cbnz	r2, 19708 <bt_gatt_store_cf+0x44>
		len = sizeof(cfg->data);
   196da:	2701      	movs	r7, #1
	if (!cfg || !conn->id) {
   196dc:	b10d      	cbz	r5, 196e2 <bt_gatt_store_cf+0x1e>
   196de:	7a23      	ldrb	r3, [r4, #8]
   196e0:	b943      	cbnz	r3, 196f4 <bt_gatt_store_cf+0x30>
		bt_settings_encode_key(key, sizeof(key), "cf",
   196e2:	2300      	movs	r3, #0
   196e4:	9300      	str	r3, [sp, #0]
   196e6:	f104 0390 	add.w	r3, r4, #144	; 0x90
   196ea:	4a13      	ldr	r2, [pc, #76]	; (19738 <bt_gatt_store_cf+0x74>)
   196ec:	2124      	movs	r1, #36	; 0x24
   196ee:	a803      	add	r0, sp, #12
   196f0:	f7fa ff22 	bl	14538 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   196f4:	463a      	mov	r2, r7
   196f6:	4631      	mov	r1, r6
   196f8:	a803      	add	r0, sp, #12
   196fa:	f7f8 fbb1 	bl	11e60 <settings_save_one>
	if (err) {
   196fe:	4604      	mov	r4, r0
   19700:	b9a0      	cbnz	r0, 1972c <bt_gatt_store_cf+0x68>
}
   19702:	4620      	mov	r0, r4
   19704:	b00d      	add	sp, #52	; 0x34
   19706:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   19708:	af02      	add	r7, sp, #8
   1970a:	2104      	movs	r1, #4
   1970c:	4638      	mov	r0, r7
   1970e:	f7f6 fdd7 	bl	102c0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   19712:	9700      	str	r7, [sp, #0]
   19714:	f104 0390 	add.w	r3, r4, #144	; 0x90
   19718:	4a07      	ldr	r2, [pc, #28]	; (19738 <bt_gatt_store_cf+0x74>)
   1971a:	2124      	movs	r1, #36	; 0x24
   1971c:	a803      	add	r0, sp, #12
   1971e:	f7fa ff0b 	bl	14538 <bt_settings_encode_key>
		len = sizeof(cfg->data);
   19722:	2701      	movs	r7, #1
   19724:	e7da      	b.n	196dc <bt_gatt_store_cf+0x18>
		str = NULL;
   19726:	4606      	mov	r6, r0
		len = 0;
   19728:	2700      	movs	r7, #0
   1972a:	e7d7      	b.n	196dc <bt_gatt_store_cf+0x18>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1972c:	4602      	mov	r2, r0
   1972e:	2145      	movs	r1, #69	; 0x45
   19730:	4802      	ldr	r0, [pc, #8]	; (1973c <bt_gatt_store_cf+0x78>)
   19732:	f00f f9a7 	bl	28a84 <z_log_minimal_printk>
		return err;
   19736:	e7e4      	b.n	19702 <bt_gatt_store_cf+0x3e>
   19738:	00031c54 	.word	0x00031c54
   1973c:	00031c58 	.word	0x00031c58

00019740 <bt_gatt_clear_sc>:
{
   19740:	b530      	push	{r4, r5, lr}
   19742:	b08d      	sub	sp, #52	; 0x34
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   19744:	f7ff fe02 	bl	1934c <find_sc_cfg>
	if (!cfg) {
   19748:	b1b0      	cbz	r0, 19778 <bt_gatt_clear_sc+0x38>
   1974a:	4604      	mov	r4, r0
		if (cfg->id) {
   1974c:	7802      	ldrb	r2, [r0, #0]
   1974e:	b1b2      	cbz	r2, 1977e <bt_gatt_clear_sc+0x3e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19750:	ad02      	add	r5, sp, #8
   19752:	2104      	movs	r1, #4
   19754:	4628      	mov	r0, r5
   19756:	f7f6 fdb3 	bl	102c0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1975a:	9500      	str	r5, [sp, #0]
   1975c:	1c63      	adds	r3, r4, #1
   1975e:	4a0f      	ldr	r2, [pc, #60]	; (1979c <bt_gatt_clear_sc+0x5c>)
   19760:	2124      	movs	r1, #36	; 0x24
   19762:	a803      	add	r0, sp, #12
   19764:	f7fa fee8 	bl	14538 <bt_settings_encode_key>
		err = settings_delete(key);
   19768:	a803      	add	r0, sp, #12
   1976a:	f00f fd63 	bl	29234 <settings_delete>
		if (err) {
   1976e:	4602      	mov	r2, r0
   19770:	b970      	cbnz	r0, 19790 <bt_gatt_clear_sc+0x50>
	clear_sc_cfg(cfg);
   19772:	4620      	mov	r0, r4
   19774:	f013 f869 	bl	2c84a <clear_sc_cfg>
}
   19778:	2000      	movs	r0, #0
   1977a:	b00d      	add	sp, #52	; 0x34
   1977c:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1977e:	2300      	movs	r3, #0
   19780:	9300      	str	r3, [sp, #0]
   19782:	1c43      	adds	r3, r0, #1
   19784:	4a05      	ldr	r2, [pc, #20]	; (1979c <bt_gatt_clear_sc+0x5c>)
   19786:	2124      	movs	r1, #36	; 0x24
   19788:	a803      	add	r0, sp, #12
   1978a:	f7fa fed5 	bl	14538 <bt_settings_encode_key>
   1978e:	e7eb      	b.n	19768 <bt_gatt_clear_sc+0x28>
			BT_ERR("failed to delete SC (err %d)", err);
   19790:	2145      	movs	r1, #69	; 0x45
   19792:	4803      	ldr	r0, [pc, #12]	; (197a0 <bt_gatt_clear_sc+0x60>)
   19794:	f00f f976 	bl	28a84 <z_log_minimal_printk>
   19798:	e7eb      	b.n	19772 <bt_gatt_clear_sc+0x32>
   1979a:	bf00      	nop
   1979c:	00031c08 	.word	0x00031c08
   197a0:	00031c88 	.word	0x00031c88

000197a4 <sc_clear>:
{
   197a4:	b538      	push	{r3, r4, r5, lr}
   197a6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   197a8:	f100 0590 	add.w	r5, r0, #144	; 0x90
   197ac:	4629      	mov	r1, r5
   197ae:	7a00      	ldrb	r0, [r0, #8]
   197b0:	f011 fb62 	bl	2ae78 <bt_addr_le_is_bonded>
   197b4:	b158      	cbz	r0, 197ce <sc_clear+0x2a>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   197b6:	4629      	mov	r1, r5
   197b8:	7a20      	ldrb	r0, [r4, #8]
   197ba:	f7ff ffc1 	bl	19740 <bt_gatt_clear_sc>
		if (err) {
   197be:	4602      	mov	r2, r0
   197c0:	b900      	cbnz	r0, 197c4 <sc_clear+0x20>
}
   197c2:	bd38      	pop	{r3, r4, r5, pc}
			BT_ERR("Failed to clear SC %d", err);
   197c4:	2145      	movs	r1, #69	; 0x45
   197c6:	4806      	ldr	r0, [pc, #24]	; (197e0 <sc_clear+0x3c>)
   197c8:	f00f f95c 	bl	28a84 <z_log_minimal_printk>
   197cc:	e7f9      	b.n	197c2 <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   197ce:	4629      	mov	r1, r5
   197d0:	7a20      	ldrb	r0, [r4, #8]
   197d2:	f7ff fdbb 	bl	1934c <find_sc_cfg>
		if (cfg) {
   197d6:	2800      	cmp	r0, #0
   197d8:	d0f3      	beq.n	197c2 <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   197da:	f013 f836 	bl	2c84a <clear_sc_cfg>
}
   197de:	e7f0      	b.n	197c2 <sc_clear+0x1e>
   197e0:	00031cac 	.word	0x00031cac

000197e4 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   197e4:	b508      	push	{r3, lr}
   197e6:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   197e8:	6881      	ldr	r1, [r0, #8]
   197ea:	4a08      	ldr	r2, [pc, #32]	; (1980c <remove_peer_from_attr+0x28>)
   197ec:	4291      	cmp	r1, r2
   197ee:	d001      	beq.n	197f4 <remove_peer_from_attr+0x10>
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   197f0:	2001      	movs	r0, #1
   197f2:	bd08      	pop	{r3, pc}
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   197f4:	791a      	ldrb	r2, [r3, #4]
   197f6:	6819      	ldr	r1, [r3, #0]
   197f8:	68c0      	ldr	r0, [r0, #12]
   197fa:	f012 ffef 	bl	2c7dc <ccc_find_cfg>
	if (cfg) {
   197fe:	2800      	cmp	r0, #0
   19800:	d0f6      	beq.n	197f0 <remove_peer_from_attr+0xc>
		memset(cfg, 0, sizeof(*cfg));
   19802:	220a      	movs	r2, #10
   19804:	2100      	movs	r1, #0
   19806:	f011 f86e 	bl	2a8e6 <memset>
   1980a:	e7f1      	b.n	197f0 <remove_peer_from_attr+0xc>
   1980c:	0001949d 	.word	0x0001949d

00019810 <bt_gatt_service_init>:
{
   19810:	b538      	push	{r3, r4, r5, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19812:	4b15      	ldr	r3, [pc, #84]	; (19868 <bt_gatt_service_init+0x58>)
   19814:	2201      	movs	r2, #1
   19816:	f3bf 8f5b 	dmb	ish
   1981a:	e853 1f00 	ldrex	r1, [r3]
   1981e:	2900      	cmp	r1, #0
   19820:	d103      	bne.n	1982a <bt_gatt_service_init+0x1a>
   19822:	e843 2000 	strex	r0, r2, [r3]
   19826:	2800      	cmp	r0, #0
   19828:	d1f7      	bne.n	1981a <bt_gatt_service_init+0xa>
   1982a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1982e:	d11a      	bne.n	19866 <bt_gatt_service_init+0x56>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19830:	4c0e      	ldr	r4, [pc, #56]	; (1986c <bt_gatt_service_init+0x5c>)
   19832:	e014      	b.n	1985e <bt_gatt_service_init+0x4e>
   19834:	4d0e      	ldr	r5, [pc, #56]	; (19870 <bt_gatt_service_init+0x60>)
   19836:	f240 424e 	movw	r2, #1102	; 0x44e
   1983a:	4629      	mov	r1, r5
   1983c:	480d      	ldr	r0, [pc, #52]	; (19874 <bt_gatt_service_init+0x64>)
   1983e:	f00e fd80 	bl	28342 <printk>
   19842:	f240 414e 	movw	r1, #1102	; 0x44e
   19846:	4628      	mov	r0, r5
   19848:	f00f f914 	bl	28a74 <assert_post_action>
   1984c:	4b0a      	ldr	r3, [pc, #40]	; (19878 <bt_gatt_service_init+0x68>)
   1984e:	429c      	cmp	r4, r3
   19850:	d209      	bcs.n	19866 <bt_gatt_service_init+0x56>
		last_static_handle += svc->attr_count;
   19852:	6863      	ldr	r3, [r4, #4]
   19854:	4a09      	ldr	r2, [pc, #36]	; (1987c <bt_gatt_service_init+0x6c>)
   19856:	8811      	ldrh	r1, [r2, #0]
   19858:	440b      	add	r3, r1
   1985a:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1985c:	3408      	adds	r4, #8
   1985e:	4b06      	ldr	r3, [pc, #24]	; (19878 <bt_gatt_service_init+0x68>)
   19860:	429c      	cmp	r4, r3
   19862:	d9f3      	bls.n	1984c <bt_gatt_service_init+0x3c>
   19864:	e7e6      	b.n	19834 <bt_gatt_service_init+0x24>
}
   19866:	bd38      	pop	{r3, r4, r5, pc}
   19868:	20002868 	.word	0x20002868
   1986c:	0002f2c4 	.word	0x0002f2c4
   19870:	00031cc8 	.word	0x00031cc8
   19874:	0002f968 	.word	0x0002f968
   19878:	0002f2dc 	.word	0x0002f2dc
   1987c:	20003f6c 	.word	0x20003f6c

00019880 <sc_indicate>:
{
   19880:	b510      	push	{r4, lr}
   19882:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19884:	4c17      	ldr	r4, [pc, #92]	; (198e4 <sc_indicate+0x64>)
   19886:	f3bf 8f5b 	dmb	ish
   1988a:	e854 3f00 	ldrex	r3, [r4]
   1988e:	f043 0001 	orr.w	r0, r3, #1
   19892:	e844 0c00 	strex	ip, r0, [r4]
   19896:	f1bc 0f00 	cmp.w	ip, #0
   1989a:	d1f6      	bne.n	1988a <sc_indicate+0xa>
   1989c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   198a0:	f013 0f01 	tst.w	r3, #1
   198a4:	d10d      	bne.n	198c2 <sc_indicate+0x42>
		gatt_sc.start = start;
   198a6:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
   198aa:	831a      	strh	r2, [r3, #24]
		gatt_sc.end = end;
   198ac:	8359      	strh	r1, [r3, #26]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198ae:	f3bf 8f5b 	dmb	ish
   198b2:	4b0d      	ldr	r3, [pc, #52]	; (198e8 <sc_indicate+0x68>)
   198b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   198b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   198ba:	f013 0f02 	tst.w	r3, #2
   198be:	d00a      	beq.n	198d6 <sc_indicate+0x56>
}
   198c0:	bd10      	pop	{r4, pc}
	if (!update_range(&gatt_sc.start, &gatt_sc.end, start, end)) {
   198c2:	4809      	ldr	r0, [pc, #36]	; (198e8 <sc_indicate+0x68>)
   198c4:	460b      	mov	r3, r1
   198c6:	f100 011a 	add.w	r1, r0, #26
   198ca:	3018      	adds	r0, #24
   198cc:	f012 fe5e 	bl	2c58c <update_range>
   198d0:	2800      	cmp	r0, #0
   198d2:	d1ec      	bne.n	198ae <sc_indicate+0x2e>
   198d4:	e7f4      	b.n	198c0 <sc_indicate+0x40>
	k_work_reschedule(&gatt_sc.work, timeout);
   198d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   198da:	2300      	movs	r3, #0
   198dc:	4803      	ldr	r0, [pc, #12]	; (198ec <sc_indicate+0x6c>)
   198de:	f009 fcfb 	bl	232d8 <k_work_reschedule>
   198e2:	e7ed      	b.n	198c0 <sc_indicate+0x40>
   198e4:	20001a78 	.word	0x20001a78
   198e8:	20001a28 	.word	0x20001a28
   198ec:	20001a48 	.word	0x20001a48

000198f0 <db_hash_commit>:
{
   198f0:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   198f2:	4b0a      	ldr	r3, [pc, #40]	; (1991c <db_hash_commit+0x2c>)
   198f4:	f3bf 8f5b 	dmb	ish
   198f8:	e853 2f00 	ldrex	r2, [r3]
   198fc:	f042 0208 	orr.w	r2, r2, #8
   19900:	e843 2100 	strex	r1, r2, [r3]
   19904:	2900      	cmp	r1, #0
   19906:	d1f7      	bne.n	198f8 <db_hash_commit+0x8>
   19908:	f3bf 8f5b 	dmb	ish
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   1990c:	2200      	movs	r2, #0
   1990e:	2300      	movs	r3, #0
   19910:	4803      	ldr	r0, [pc, #12]	; (19920 <db_hash_commit+0x30>)
   19912:	f009 fce1 	bl	232d8 <k_work_reschedule>
}
   19916:	2000      	movs	r0, #0
   19918:	bd08      	pop	{r3, pc}
   1991a:	bf00      	nop
   1991c:	20001a78 	.word	0x20001a78
   19920:	200019d0 	.word	0x200019d0

00019924 <sc_indicate_rsp>:
{
   19924:	b510      	push	{r4, lr}
   19926:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19928:	4b19      	ldr	r3, [pc, #100]	; (19990 <sc_indicate_rsp+0x6c>)
   1992a:	f103 0250 	add.w	r2, r3, #80	; 0x50
   1992e:	f3bf 8f5b 	dmb	ish
   19932:	e852 1f00 	ldrex	r1, [r2]
   19936:	f021 0102 	bic.w	r1, r1, #2
   1993a:	e842 1000 	strex	r0, r1, [r2]
   1993e:	2800      	cmp	r0, #0
   19940:	d1f7      	bne.n	19932 <sc_indicate_rsp+0xe>
   19942:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19946:	f3bf 8f5b 	dmb	ish
   1994a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1994c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19950:	f013 0f01 	tst.w	r3, #1
   19954:	d116      	bne.n	19984 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   19956:	4620      	mov	r0, r4
   19958:	f7ff fcce 	bl	192f8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1995c:	4603      	mov	r3, r0
   1995e:	b180      	cbz	r0, 19982 <sc_indicate_rsp+0x5e>
   19960:	7a02      	ldrb	r2, [r0, #8]
   19962:	f012 0f01 	tst.w	r2, #1
   19966:	d00c      	beq.n	19982 <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   19968:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1996a:	f3bf 8f5b 	dmb	ish
   1996e:	e853 2f00 	ldrex	r2, [r3]
   19972:	f042 0201 	orr.w	r2, r2, #1
   19976:	e843 2100 	strex	r1, r2, [r3]
   1997a:	2900      	cmp	r1, #0
   1997c:	d1f7      	bne.n	1996e <sc_indicate_rsp+0x4a>
   1997e:	f3bf 8f5b 	dmb	ish
}
   19982:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   19984:	2200      	movs	r2, #0
   19986:	2300      	movs	r3, #0
   19988:	4802      	ldr	r0, [pc, #8]	; (19994 <sc_indicate_rsp+0x70>)
   1998a:	f009 fca5 	bl	232d8 <k_work_reschedule>
   1998e:	e7e2      	b.n	19956 <sc_indicate_rsp+0x32>
   19990:	20001a28 	.word	0x20001a28
   19994:	20001a48 	.word	0x20001a48

00019998 <sc_commit>:
{
   19998:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1999a:	4b10      	ldr	r3, [pc, #64]	; (199dc <sc_commit+0x44>)
   1999c:	f103 0250 	add.w	r2, r3, #80	; 0x50
   199a0:	f3bf 8f5b 	dmb	ish
   199a4:	e852 1f00 	ldrex	r1, [r2]
   199a8:	f021 0102 	bic.w	r1, r1, #2
   199ac:	e842 1000 	strex	r0, r1, [r2]
   199b0:	2800      	cmp	r0, #0
   199b2:	d1f7      	bne.n	199a4 <sc_commit+0xc>
   199b4:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   199b8:	f3bf 8f5b 	dmb	ish
   199bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   199be:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   199c2:	f013 0f01 	tst.w	r3, #1
   199c6:	d101      	bne.n	199cc <sc_commit+0x34>
}
   199c8:	2000      	movs	r0, #0
   199ca:	bd08      	pop	{r3, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   199cc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   199d0:	2300      	movs	r3, #0
   199d2:	4803      	ldr	r0, [pc, #12]	; (199e0 <sc_commit+0x48>)
   199d4:	f009 fc80 	bl	232d8 <k_work_reschedule>
   199d8:	e7f6      	b.n	199c8 <sc_commit+0x30>
   199da:	bf00      	nop
   199dc:	20001a28 	.word	0x20001a28
   199e0:	20001a48 	.word	0x20001a48

000199e4 <disconnected_cb>:
{
   199e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   199e8:	6881      	ldr	r1, [r0, #8]
   199ea:	4b2d      	ldr	r3, [pc, #180]	; (19aa0 <disconnected_cb+0xbc>)
   199ec:	4299      	cmp	r1, r3
   199ee:	d002      	beq.n	199f6 <disconnected_cb+0x12>
}
   199f0:	2001      	movs	r0, #1
   199f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199f6:	4604      	mov	r4, r0
   199f8:	4616      	mov	r6, r2
	ccc = attr->user_data;
   199fa:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   199fc:	897b      	ldrh	r3, [r7, #10]
   199fe:	2b00      	cmp	r3, #0
   19a00:	d0f6      	beq.n	199f0 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19a02:	2500      	movs	r5, #0
	value_used = false;
   19a04:	46aa      	mov	sl, r5
   19a06:	e021      	b.n	19a4c <disconnected_cb+0x68>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   19a08:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   19a0c:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   19a10:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   19a14:	b1cb      	cbz	r3, 19a4a <disconnected_cb+0x66>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19a16:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19a1a:	f108 0901 	add.w	r9, r8, #1
   19a1e:	464a      	mov	r2, r9
   19a20:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   19a24:	4630      	mov	r0, r6
   19a26:	f011 fe79 	bl	2b71c <bt_conn_is_peer_addr_le>
   19a2a:	bb00      	cbnz	r0, 19a6e <disconnected_cb+0x8a>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19a2c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19a30:	4649      	mov	r1, r9
   19a32:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   19a36:	f7fe f8b5 	bl	17ba4 <bt_conn_lookup_addr_le>
			if (tmp) {
   19a3a:	4603      	mov	r3, r0
   19a3c:	b128      	cbz	r0, 19a4a <disconnected_cb+0x66>
				if (tmp->state == BT_CONN_CONNECTED) {
   19a3e:	7b42      	ldrb	r2, [r0, #13]
   19a40:	2a07      	cmp	r2, #7
   19a42:	d011      	beq.n	19a68 <disconnected_cb+0x84>
				bt_conn_unref(tmp);
   19a44:	4618      	mov	r0, r3
   19a46:	f7fd fe09 	bl	1765c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19a4a:	3501      	adds	r5, #1
   19a4c:	2d00      	cmp	r5, #0
   19a4e:	d0db      	beq.n	19a08 <disconnected_cb+0x24>
	if (!value_used) {
   19a50:	f1ba 0f00 	cmp.w	sl, #0
   19a54:	d1cc      	bne.n	199f0 <disconnected_cb+0xc>
		ccc->value = 0U;
   19a56:	2300      	movs	r3, #0
   19a58:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   19a5a:	68fb      	ldr	r3, [r7, #12]
   19a5c:	2b00      	cmp	r3, #0
   19a5e:	d0c7      	beq.n	199f0 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   19a60:	2100      	movs	r1, #0
   19a62:	4620      	mov	r0, r4
   19a64:	4798      	blx	r3
   19a66:	e7c3      	b.n	199f0 <disconnected_cb+0xc>
					value_used = true;
   19a68:	f04f 0a01 	mov.w	sl, #1
   19a6c:	e7ea      	b.n	19a44 <disconnected_cb+0x60>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19a6e:	f106 0b90 	add.w	fp, r6, #144	; 0x90
   19a72:	4659      	mov	r1, fp
   19a74:	7a30      	ldrb	r0, [r6, #8]
   19a76:	f011 f9ff 	bl	2ae78 <bt_addr_le_is_bonded>
   19a7a:	b950      	cbnz	r0, 19a92 <disconnected_cb+0xae>
				if (ccc == &sc_ccc) {
   19a7c:	4b09      	ldr	r3, [pc, #36]	; (19aa4 <disconnected_cb+0xc0>)
   19a7e:	429f      	cmp	r7, r3
   19a80:	d003      	beq.n	19a8a <disconnected_cb+0xa6>
				clear_ccc_cfg(cfg);
   19a82:	4640      	mov	r0, r8
   19a84:	f012 feca 	bl	2c81c <clear_ccc_cfg>
   19a88:	e7df      	b.n	19a4a <disconnected_cb+0x66>
					sc_clear(conn);
   19a8a:	4630      	mov	r0, r6
   19a8c:	f7ff fe8a 	bl	197a4 <sc_clear>
   19a90:	e7f7      	b.n	19a82 <disconnected_cb+0x9e>
   19a92:	2207      	movs	r2, #7
   19a94:	4659      	mov	r1, fp
   19a96:	4648      	mov	r0, r9
   19a98:	f010 ff01 	bl	2a89e <memcpy>
}
   19a9c:	e7d5      	b.n	19a4a <disconnected_cb+0x66>
   19a9e:	bf00      	nop
   19aa0:	0001949d 	.word	0x0001949d
   19aa4:	20000668 	.word	0x20000668

00019aa8 <sc_set>:
{
   19aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19aac:	b087      	sub	sp, #28
	if (!name) {
   19aae:	b338      	cbz	r0, 19b00 <sc_set+0x58>
   19ab0:	460c      	mov	r4, r1
   19ab2:	4615      	mov	r5, r2
   19ab4:	461e      	mov	r6, r3
   19ab6:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
   19ab8:	a902      	add	r1, sp, #8
   19aba:	f010 ffeb 	bl	2aa94 <bt_settings_decode_key>
	if (err) {
   19abe:	4680      	mov	r8, r0
   19ac0:	bb28      	cbnz	r0, 19b0e <sc_set+0x66>
	settings_name_next(name, &next);
   19ac2:	a901      	add	r1, sp, #4
   19ac4:	4638      	mov	r0, r7
   19ac6:	f00f fbe5 	bl	29294 <settings_name_next>
	if (!next) {
   19aca:	9801      	ldr	r0, [sp, #4]
   19acc:	b378      	cbz	r0, 19b2e <sc_set+0x86>
		unsigned long next_id = strtoul(next, NULL, 10);
   19ace:	220a      	movs	r2, #10
   19ad0:	2100      	movs	r1, #0
   19ad2:	f010 fddc 	bl	2a68e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19ad6:	bb10      	cbnz	r0, 19b1e <sc_set+0x76>
		id = (uint8_t)next_id;
   19ad8:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   19ada:	a902      	add	r1, sp, #8
   19adc:	4638      	mov	r0, r7
   19ade:	f7ff fc35 	bl	1934c <find_sc_cfg>
	if (!cfg && len_rd) {
   19ae2:	4681      	mov	r9, r0
   19ae4:	b328      	cbz	r0, 19b32 <sc_set+0x8a>
	if (len_rd) {
   19ae6:	2c00      	cmp	r4, #0
   19ae8:	d042      	beq.n	19b70 <sc_set+0xc8>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   19aea:	2204      	movs	r2, #4
   19aec:	f109 0108 	add.w	r1, r9, #8
   19af0:	4630      	mov	r0, r6
   19af2:	47a8      	blx	r5
		if (len < 0) {
   19af4:	1e04      	subs	r4, r0, #0
   19af6:	db34      	blt.n	19b62 <sc_set+0xba>
}
   19af8:	4640      	mov	r0, r8
   19afa:	b007      	add	sp, #28
   19afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Insufficient number of arguments");
   19b00:	2145      	movs	r1, #69	; 0x45
   19b02:	4820      	ldr	r0, [pc, #128]	; (19b84 <sc_set+0xdc>)
   19b04:	f00e ffbe 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   19b08:	f06f 0815 	mvn.w	r8, #21
   19b0c:	e7f4      	b.n	19af8 <sc_set+0x50>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   19b0e:	463a      	mov	r2, r7
   19b10:	2145      	movs	r1, #69	; 0x45
   19b12:	481d      	ldr	r0, [pc, #116]	; (19b88 <sc_set+0xe0>)
   19b14:	f00e ffb6 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   19b18:	f06f 0815 	mvn.w	r8, #21
   19b1c:	e7ec      	b.n	19af8 <sc_set+0x50>
			BT_ERR("Invalid local identity %lu", next_id);
   19b1e:	4602      	mov	r2, r0
   19b20:	2145      	movs	r1, #69	; 0x45
   19b22:	481a      	ldr	r0, [pc, #104]	; (19b8c <sc_set+0xe4>)
   19b24:	f00e ffae 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   19b28:	f06f 0815 	mvn.w	r8, #21
   19b2c:	e7e4      	b.n	19af8 <sc_set+0x50>
		id = BT_ID_DEFAULT;
   19b2e:	2700      	movs	r7, #0
   19b30:	e7d3      	b.n	19ada <sc_set+0x32>
	if (!cfg && len_rd) {
   19b32:	2c00      	cmp	r4, #0
   19b34:	d0d7      	beq.n	19ae6 <sc_set+0x3e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19b36:	9004      	str	r0, [sp, #16]
   19b38:	f8cd 0013 	str.w	r0, [sp, #19]
   19b3c:	a904      	add	r1, sp, #16
   19b3e:	f7ff fc05 	bl	1934c <find_sc_cfg>
		if (!cfg) {
   19b42:	4681      	mov	r9, r0
   19b44:	b130      	cbz	r0, 19b54 <sc_set+0xac>
		cfg->id = id;
   19b46:	f800 7b01 	strb.w	r7, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   19b4a:	2207      	movs	r2, #7
   19b4c:	a902      	add	r1, sp, #8
   19b4e:	f010 fea6 	bl	2a89e <memcpy>
   19b52:	e7c8      	b.n	19ae6 <sc_set+0x3e>
			BT_ERR("Unable to restore SC: no cfg left");
   19b54:	2145      	movs	r1, #69	; 0x45
   19b56:	480e      	ldr	r0, [pc, #56]	; (19b90 <sc_set+0xe8>)
   19b58:	f00e ff94 	bl	28a84 <z_log_minimal_printk>
			return -ENOMEM;
   19b5c:	f06f 080b 	mvn.w	r8, #11
   19b60:	e7ca      	b.n	19af8 <sc_set+0x50>
			BT_ERR("Failed to decode value (err %zd)", len);
   19b62:	4622      	mov	r2, r4
   19b64:	2145      	movs	r1, #69	; 0x45
   19b66:	480b      	ldr	r0, [pc, #44]	; (19b94 <sc_set+0xec>)
   19b68:	f00e ff8c 	bl	28a84 <z_log_minimal_printk>
			return len;
   19b6c:	46a0      	mov	r8, r4
   19b6e:	e7c3      	b.n	19af8 <sc_set+0x50>
	} else if (cfg) {
   19b70:	f1b9 0f00 	cmp.w	r9, #0
   19b74:	d0c0      	beq.n	19af8 <sc_set+0x50>
		memset(cfg, 0, sizeof(*cfg));
   19b76:	220c      	movs	r2, #12
   19b78:	2100      	movs	r1, #0
   19b7a:	4648      	mov	r0, r9
   19b7c:	f010 feb3 	bl	2a8e6 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   19b80:	e7ba      	b.n	19af8 <sc_set+0x50>
   19b82:	bf00      	nop
   19b84:	00030758 	.word	0x00030758
   19b88:	00031cf8 	.word	0x00031cf8
   19b8c:	00031d1c 	.word	0x00031d1c
   19b90:	00031d3c 	.word	0x00031d3c
   19b94:	00031b58 	.word	0x00031b58

00019b98 <cf_set>:
{
   19b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b9c:	b085      	sub	sp, #20
	if (!name) {
   19b9e:	b338      	cbz	r0, 19bf0 <cf_set+0x58>
   19ba0:	460c      	mov	r4, r1
   19ba2:	4615      	mov	r5, r2
   19ba4:	461e      	mov	r6, r3
   19ba6:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
   19ba8:	a902      	add	r1, sp, #8
   19baa:	f010 ff73 	bl	2aa94 <bt_settings_decode_key>
	if (err) {
   19bae:	4680      	mov	r8, r0
   19bb0:	bb28      	cbnz	r0, 19bfe <cf_set+0x66>
	settings_name_next(name, &next);
   19bb2:	a901      	add	r1, sp, #4
   19bb4:	4638      	mov	r0, r7
   19bb6:	f00f fb6d 	bl	29294 <settings_name_next>
	if (!next) {
   19bba:	9801      	ldr	r0, [sp, #4]
   19bbc:	b378      	cbz	r0, 19c1e <cf_set+0x86>
		unsigned long next_id = strtoul(next, NULL, 10);
   19bbe:	220a      	movs	r2, #10
   19bc0:	2100      	movs	r1, #0
   19bc2:	f010 fd64 	bl	2a68e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19bc6:	bb10      	cbnz	r0, 19c0e <cf_set+0x76>
		id = (uint8_t)next_id;
   19bc8:	b2c7      	uxtb	r7, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   19bca:	a902      	add	r1, sp, #8
   19bcc:	4638      	mov	r0, r7
   19bce:	f7ff fc01 	bl	193d4 <find_cf_cfg_by_addr>
	if (!cfg) {
   19bd2:	4681      	mov	r9, r0
   19bd4:	b328      	cbz	r0, 19c22 <cf_set+0x8a>
	if (len_rd) {
   19bd6:	2c00      	cmp	r4, #0
   19bd8:	d03c      	beq.n	19c54 <cf_set+0xbc>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   19bda:	2201      	movs	r2, #1
   19bdc:	f109 0108 	add.w	r1, r9, #8
   19be0:	4630      	mov	r0, r6
   19be2:	47a8      	blx	r5
		if (len < 0) {
   19be4:	1e04      	subs	r4, r0, #0
   19be6:	db2e      	blt.n	19c46 <cf_set+0xae>
}
   19be8:	4640      	mov	r0, r8
   19bea:	b005      	add	sp, #20
   19bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Insufficient number of arguments");
   19bf0:	2145      	movs	r1, #69	; 0x45
   19bf2:	481a      	ldr	r0, [pc, #104]	; (19c5c <cf_set+0xc4>)
   19bf4:	f00e ff46 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   19bf8:	f06f 0815 	mvn.w	r8, #21
   19bfc:	e7f4      	b.n	19be8 <cf_set+0x50>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   19bfe:	463a      	mov	r2, r7
   19c00:	2145      	movs	r1, #69	; 0x45
   19c02:	4817      	ldr	r0, [pc, #92]	; (19c60 <cf_set+0xc8>)
   19c04:	f00e ff3e 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   19c08:	f06f 0815 	mvn.w	r8, #21
   19c0c:	e7ec      	b.n	19be8 <cf_set+0x50>
			BT_ERR("Invalid local identity %lu", next_id);
   19c0e:	4602      	mov	r2, r0
   19c10:	2145      	movs	r1, #69	; 0x45
   19c12:	4814      	ldr	r0, [pc, #80]	; (19c64 <cf_set+0xcc>)
   19c14:	f00e ff36 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   19c18:	f06f 0815 	mvn.w	r8, #21
   19c1c:	e7e4      	b.n	19be8 <cf_set+0x50>
		id = BT_ID_DEFAULT;
   19c1e:	2700      	movs	r7, #0
   19c20:	e7d3      	b.n	19bca <cf_set+0x32>
		cfg = find_cf_cfg(NULL);
   19c22:	f7ff fb69 	bl	192f8 <find_cf_cfg>
		if (!cfg) {
   19c26:	4681      	mov	r9, r0
   19c28:	b130      	cbz	r0, 19c38 <cf_set+0xa0>
		cfg->id = id;
   19c2a:	f800 7b01 	strb.w	r7, [r0], #1
   19c2e:	2207      	movs	r2, #7
   19c30:	a902      	add	r1, sp, #8
   19c32:	f010 fe34 	bl	2a89e <memcpy>
}
   19c36:	e7ce      	b.n	19bd6 <cf_set+0x3e>
			BT_ERR("Unable to restore CF: no cfg left");
   19c38:	2145      	movs	r1, #69	; 0x45
   19c3a:	480b      	ldr	r0, [pc, #44]	; (19c68 <cf_set+0xd0>)
   19c3c:	f00e ff22 	bl	28a84 <z_log_minimal_printk>
			return -ENOMEM;
   19c40:	f06f 080b 	mvn.w	r8, #11
   19c44:	e7d0      	b.n	19be8 <cf_set+0x50>
			BT_ERR("Failed to decode value (err %zd)", len);
   19c46:	4622      	mov	r2, r4
   19c48:	2145      	movs	r1, #69	; 0x45
   19c4a:	4808      	ldr	r0, [pc, #32]	; (19c6c <cf_set+0xd4>)
   19c4c:	f00e ff1a 	bl	28a84 <z_log_minimal_printk>
			return len;
   19c50:	46a0      	mov	r8, r4
   19c52:	e7c9      	b.n	19be8 <cf_set+0x50>
		clear_cf_cfg(cfg);
   19c54:	4648      	mov	r0, r9
   19c56:	f012 fe5a 	bl	2c90e <clear_cf_cfg>
   19c5a:	e7c5      	b.n	19be8 <cf_set+0x50>
   19c5c:	00030758 	.word	0x00030758
   19c60:	00031cf8 	.word	0x00031cf8
   19c64:	00031d1c 	.word	0x00031d1c
   19c68:	00031d64 	.word	0x00031d64
   19c6c:	00031b58 	.word	0x00031b58

00019c70 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19c70:	4b1a      	ldr	r3, [pc, #104]	; (19cdc <bt_gatt_init+0x6c>)
   19c72:	2201      	movs	r2, #1
   19c74:	f3bf 8f5b 	dmb	ish
   19c78:	e853 1f00 	ldrex	r1, [r3]
   19c7c:	2900      	cmp	r1, #0
   19c7e:	d103      	bne.n	19c88 <bt_gatt_init+0x18>
   19c80:	e843 2000 	strex	r0, r2, [r3]
   19c84:	2800      	cmp	r0, #0
   19c86:	d1f7      	bne.n	19c78 <bt_gatt_init+0x8>
   19c88:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   19c8c:	d125      	bne.n	19cda <bt_gatt_init+0x6a>
{
   19c8e:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   19c90:	f7ff fdbe 	bl	19810 <bt_gatt_service_init>
	list->head = NULL;
   19c94:	4b12      	ldr	r3, [pc, #72]	; (19ce0 <bt_gatt_init+0x70>)
   19c96:	2200      	movs	r2, #0
   19c98:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   19c9a:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19c9c:	4c11      	ldr	r4, [pc, #68]	; (19ce4 <bt_gatt_init+0x74>)
   19c9e:	4912      	ldr	r1, [pc, #72]	; (19ce8 <bt_gatt_init+0x78>)
   19ca0:	4620      	mov	r0, r4
   19ca2:	f009 fa25 	bl	230f0 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   19ca6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19caa:	2300      	movs	r3, #0
   19cac:	4620      	mov	r0, r4
   19cae:	f009 faa9 	bl	23204 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   19cb2:	4c0e      	ldr	r4, [pc, #56]	; (19cec <bt_gatt_init+0x7c>)
   19cb4:	490e      	ldr	r1, [pc, #56]	; (19cf0 <bt_gatt_init+0x80>)
   19cb6:	f104 0020 	add.w	r0, r4, #32
   19cba:	f009 fa19 	bl	230f0 <k_work_init_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19cbe:	3450      	adds	r4, #80	; 0x50
   19cc0:	f3bf 8f5b 	dmb	ish
   19cc4:	e854 3f00 	ldrex	r3, [r4]
   19cc8:	f043 0302 	orr.w	r3, r3, #2
   19ccc:	e844 3200 	strex	r2, r3, [r4]
   19cd0:	2a00      	cmp	r2, #0
   19cd2:	d1f7      	bne.n	19cc4 <bt_gatt_init+0x54>
   19cd4:	f3bf 8f5b 	dmb	ish
}
   19cd8:	bd10      	pop	{r4, pc}
   19cda:	4770      	bx	lr
   19cdc:	20002834 	.word	0x20002834
   19ce0:	2000280c 	.word	0x2000280c
   19ce4:	200019d0 	.word	0x200019d0
   19ce8:	00019ee5 	.word	0x00019ee5
   19cec:	20001a28 	.word	0x20001a28
   19cf0:	0001a2a9 	.word	0x0001a2a9

00019cf4 <bt_gatt_attr_get_handle>:
{
   19cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   19cf8:	b3a8      	cbz	r0, 19d66 <bt_gatt_attr_get_handle+0x72>
   19cfa:	4606      	mov	r6, r0
	if (attr->handle) {
   19cfc:	8a07      	ldrh	r7, [r0, #16]
   19cfe:	bbaf      	cbnz	r7, 19d6c <bt_gatt_attr_get_handle+0x78>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19d00:	4d1c      	ldr	r5, [pc, #112]	; (19d74 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   19d02:	2401      	movs	r4, #1
   19d04:	e003      	b.n	19d0e <bt_gatt_attr_get_handle+0x1a>
			handle += static_svc->attr_count;
   19d06:	686b      	ldr	r3, [r5, #4]
   19d08:	441c      	add	r4, r3
   19d0a:	b2a4      	uxth	r4, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19d0c:	3508      	adds	r5, #8
   19d0e:	4b1a      	ldr	r3, [pc, #104]	; (19d78 <bt_gatt_attr_get_handle+0x84>)
   19d10:	429d      	cmp	r5, r3
   19d12:	d81a      	bhi.n	19d4a <bt_gatt_attr_get_handle+0x56>
   19d14:	4b18      	ldr	r3, [pc, #96]	; (19d78 <bt_gatt_attr_get_handle+0x84>)
   19d16:	429d      	cmp	r5, r3
   19d18:	d228      	bcs.n	19d6c <bt_gatt_attr_get_handle+0x78>
		if ((attr < &static_svc->attrs[0]) ||
   19d1a:	6829      	ldr	r1, [r5, #0]
   19d1c:	42b1      	cmp	r1, r6
   19d1e:	d8f2      	bhi.n	19d06 <bt_gatt_attr_get_handle+0x12>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19d20:	6868      	ldr	r0, [r5, #4]
   19d22:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   19d26:	009b      	lsls	r3, r3, #2
   19d28:	3b14      	subs	r3, #20
   19d2a:	440b      	add	r3, r1
		if ((attr < &static_svc->attrs[0]) ||
   19d2c:	42b3      	cmp	r3, r6
   19d2e:	d3ea      	bcc.n	19d06 <bt_gatt_attr_get_handle+0x12>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   19d30:	2300      	movs	r3, #0
   19d32:	4298      	cmp	r0, r3
   19d34:	d9ea      	bls.n	19d0c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   19d36:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19d3a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   19d3e:	42b2      	cmp	r2, r6
   19d40:	d013      	beq.n	19d6a <bt_gatt_attr_get_handle+0x76>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   19d42:	3301      	adds	r3, #1
   19d44:	3401      	adds	r4, #1
   19d46:	b2a4      	uxth	r4, r4
   19d48:	e7f3      	b.n	19d32 <bt_gatt_attr_get_handle+0x3e>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19d4a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 19d80 <bt_gatt_attr_get_handle+0x8c>
   19d4e:	f240 5277 	movw	r2, #1399	; 0x577
   19d52:	4641      	mov	r1, r8
   19d54:	4809      	ldr	r0, [pc, #36]	; (19d7c <bt_gatt_attr_get_handle+0x88>)
   19d56:	f00e faf4 	bl	28342 <printk>
   19d5a:	f240 5177 	movw	r1, #1399	; 0x577
   19d5e:	4640      	mov	r0, r8
   19d60:	f00e fe88 	bl	28a74 <assert_post_action>
   19d64:	e7d6      	b.n	19d14 <bt_gatt_attr_get_handle+0x20>
		return 0;
   19d66:	2700      	movs	r7, #0
   19d68:	e000      	b.n	19d6c <bt_gatt_attr_get_handle+0x78>
				return handle;
   19d6a:	4627      	mov	r7, r4
}
   19d6c:	4638      	mov	r0, r7
   19d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d72:	bf00      	nop
   19d74:	0002f2c4 	.word	0x0002f2c4
   19d78:	0002f2dc 	.word	0x0002f2dc
   19d7c:	0002f968 	.word	0x0002f968
   19d80:	00031cc8 	.word	0x00031cc8

00019d84 <bt_gatt_foreach_attr_type>:
{
   19d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d88:	b089      	sub	sp, #36	; 0x24
   19d8a:	4607      	mov	r7, r0
   19d8c:	468a      	mov	sl, r1
   19d8e:	4690      	mov	r8, r2
   19d90:	4699      	mov	r9, r3
   19d92:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   19d96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   19d9a:	b91b      	cbnz	r3, 19da4 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   19d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19da0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   19da4:	4b21      	ldr	r3, [pc, #132]	; (19e2c <bt_gatt_foreach_attr_type+0xa8>)
   19da6:	881b      	ldrh	r3, [r3, #0]
   19da8:	42bb      	cmp	r3, r7
   19daa:	d22f      	bcs.n	19e0c <bt_gatt_foreach_attr_type+0x88>
}
   19dac:	b009      	add	sp, #36	; 0x24
   19dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   19db2:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19db4:	3608      	adds	r6, #8
   19db6:	4b1e      	ldr	r3, [pc, #120]	; (19e30 <bt_gatt_foreach_attr_type+0xac>)
   19db8:	429e      	cmp	r6, r3
   19dba:	d82a      	bhi.n	19e12 <bt_gatt_foreach_attr_type+0x8e>
   19dbc:	4b1c      	ldr	r3, [pc, #112]	; (19e30 <bt_gatt_foreach_attr_type+0xac>)
   19dbe:	429e      	cmp	r6, r3
   19dc0:	d2f4      	bcs.n	19dac <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   19dc2:	6873      	ldr	r3, [r6, #4]
   19dc4:	18e2      	adds	r2, r4, r3
   19dc6:	42ba      	cmp	r2, r7
   19dc8:	d3f3      	bcc.n	19db2 <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19dca:	2500      	movs	r5, #0
   19dcc:	9707      	str	r7, [sp, #28]
   19dce:	6873      	ldr	r3, [r6, #4]
   19dd0:	42ab      	cmp	r3, r5
   19dd2:	d919      	bls.n	19e08 <bt_gatt_foreach_attr_type+0x84>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19dd4:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   19dd8:	f8cd b010 	str.w	fp, [sp, #16]
   19ddc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19dde:	9303      	str	r3, [sp, #12]
   19de0:	ab12      	add	r3, sp, #72	; 0x48
   19de2:	9302      	str	r3, [sp, #8]
   19de4:	f8cd 9004 	str.w	r9, [sp, #4]
   19de8:	f8cd 8000 	str.w	r8, [sp]
   19dec:	4653      	mov	r3, sl
   19dee:	9a07      	ldr	r2, [sp, #28]
   19df0:	4621      	mov	r1, r4
   19df2:	6837      	ldr	r7, [r6, #0]
   19df4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   19df8:	f012 fd47 	bl	2c88a <gatt_foreach_iter>
   19dfc:	2800      	cmp	r0, #0
   19dfe:	d0d5      	beq.n	19dac <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19e00:	3501      	adds	r5, #1
   19e02:	3401      	adds	r4, #1
   19e04:	b2a4      	uxth	r4, r4
   19e06:	e7e2      	b.n	19dce <bt_gatt_foreach_attr_type+0x4a>
   19e08:	9f07      	ldr	r7, [sp, #28]
   19e0a:	e7d3      	b.n	19db4 <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19e0c:	4e09      	ldr	r6, [pc, #36]	; (19e34 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   19e0e:	2401      	movs	r4, #1
   19e10:	e7d1      	b.n	19db6 <bt_gatt_foreach_attr_type+0x32>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19e12:	4d09      	ldr	r5, [pc, #36]	; (19e38 <bt_gatt_foreach_attr_type+0xb4>)
   19e14:	f240 623b 	movw	r2, #1595	; 0x63b
   19e18:	4629      	mov	r1, r5
   19e1a:	4808      	ldr	r0, [pc, #32]	; (19e3c <bt_gatt_foreach_attr_type+0xb8>)
   19e1c:	f00e fa91 	bl	28342 <printk>
   19e20:	f240 613b 	movw	r1, #1595	; 0x63b
   19e24:	4628      	mov	r0, r5
   19e26:	f00e fe25 	bl	28a74 <assert_post_action>
   19e2a:	e7c7      	b.n	19dbc <bt_gatt_foreach_attr_type+0x38>
   19e2c:	20003f6c 	.word	0x20003f6c
   19e30:	0002f2dc 	.word	0x0002f2dc
   19e34:	0002f2c4 	.word	0x0002f2c4
   19e38:	00031cc8 	.word	0x00031cc8
   19e3c:	0002f968 	.word	0x0002f968

00019e40 <db_hash_gen>:
{
   19e40:	b570      	push	{r4, r5, r6, lr}
   19e42:	b0cc      	sub	sp, #304	; 0x130
   19e44:	4606      	mov	r6, r0
	uint8_t key[16] = {};
   19e46:	2300      	movs	r3, #0
   19e48:	9348      	str	r3, [sp, #288]	; 0x120
   19e4a:	9349      	str	r3, [sp, #292]	; 0x124
   19e4c:	934a      	str	r3, [sp, #296]	; 0x128
   19e4e:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19e50:	aa1c      	add	r2, sp, #112	; 0x70
   19e52:	a948      	add	r1, sp, #288	; 0x120
   19e54:	a804      	add	r0, sp, #16
   19e56:	f010 fad2 	bl	2a3fe <tc_cmac_setup>
   19e5a:	b190      	cbz	r0, 19e82 <db_hash_gen+0x42>
   19e5c:	ac04      	add	r4, sp, #16
   19e5e:	9402      	str	r4, [sp, #8]
   19e60:	4b1b      	ldr	r3, [pc, #108]	; (19ed0 <db_hash_gen+0x90>)
   19e62:	9301      	str	r3, [sp, #4]
   19e64:	2200      	movs	r2, #0
   19e66:	9200      	str	r2, [sp, #0]
   19e68:	4613      	mov	r3, r2
   19e6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19e6e:	2001      	movs	r0, #1
   19e70:	f7ff ff88 	bl	19d84 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19e74:	4621      	mov	r1, r4
   19e76:	4817      	ldr	r0, [pc, #92]	; (19ed4 <db_hash_gen+0x94>)
   19e78:	f010 fb5c 	bl	2a534 <tc_cmac_final>
   19e7c:	b130      	cbz	r0, 19e8c <db_hash_gen+0x4c>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   19e7e:	2300      	movs	r3, #0
   19e80:	e011      	b.n	19ea6 <db_hash_gen+0x66>
		BT_ERR("Unable to setup AES CMAC");
   19e82:	2145      	movs	r1, #69	; 0x45
   19e84:	4814      	ldr	r0, [pc, #80]	; (19ed8 <db_hash_gen+0x98>)
   19e86:	f00e fdfd 	bl	28a84 <z_log_minimal_printk>
		return;
   19e8a:	e01c      	b.n	19ec6 <db_hash_gen+0x86>
		BT_ERR("Unable to calculate hash");
   19e8c:	2145      	movs	r1, #69	; 0x45
   19e8e:	4813      	ldr	r0, [pc, #76]	; (19edc <db_hash_gen+0x9c>)
   19e90:	f00e fdf8 	bl	28a84 <z_log_minimal_printk>
		return;
   19e94:	e017      	b.n	19ec6 <db_hash_gen+0x86>
		uint8_t tmp = ((uint8_t *)buf)[i];
   19e96:	4a0f      	ldr	r2, [pc, #60]	; (19ed4 <db_hash_gen+0x94>)
   19e98:	5cd4      	ldrb	r4, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   19e9a:	f1c3 010f 	rsb	r1, r3, #15
   19e9e:	5c55      	ldrb	r5, [r2, r1]
   19ea0:	54d5      	strb	r5, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19ea2:	5454      	strb	r4, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   19ea4:	3301      	adds	r3, #1
   19ea6:	2b07      	cmp	r3, #7
   19ea8:	d9f5      	bls.n	19e96 <db_hash_gen+0x56>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   19eaa:	b976      	cbnz	r6, 19eca <db_hash_gen+0x8a>
   19eac:	4b0c      	ldr	r3, [pc, #48]	; (19ee0 <db_hash_gen+0xa0>)
   19eae:	f3bf 8f5b 	dmb	ish
   19eb2:	e853 2f00 	ldrex	r2, [r3]
   19eb6:	f042 0204 	orr.w	r2, r2, #4
   19eba:	e843 2100 	strex	r1, r2, [r3]
   19ebe:	2900      	cmp	r1, #0
   19ec0:	d1f7      	bne.n	19eb2 <db_hash_gen+0x72>
   19ec2:	f3bf 8f5b 	dmb	ish
}
   19ec6:	b04c      	add	sp, #304	; 0x130
   19ec8:	bd70      	pop	{r4, r5, r6, pc}
		db_hash_store();
   19eca:	f7ff fa01 	bl	192d0 <db_hash_store>
   19ece:	e7ed      	b.n	19eac <db_hash_gen+0x6c>
   19ed0:	0002c677 	.word	0x0002c677
   19ed4:	200019b0 	.word	0x200019b0
   19ed8:	00031d8c 	.word	0x00031d8c
   19edc:	00031dac 	.word	0x00031dac
   19ee0:	20001a78 	.word	0x20001a78

00019ee4 <db_hash_process>:
{
   19ee4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19ee6:	4b21      	ldr	r3, [pc, #132]	; (19f6c <db_hash_process+0x88>)
   19ee8:	f3bf 8f5b 	dmb	ish
   19eec:	e853 2f00 	ldrex	r2, [r3]
   19ef0:	f022 0108 	bic.w	r1, r2, #8
   19ef4:	e843 1000 	strex	r0, r1, [r3]
   19ef8:	2800      	cmp	r0, #0
   19efa:	d1f7      	bne.n	19eec <db_hash_process+0x8>
   19efc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   19f00:	f012 0f08 	tst.w	r2, #8
   19f04:	d02d      	beq.n	19f62 <db_hash_process+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19f06:	f3bf 8f5b 	dmb	ish
   19f0a:	3b50      	subs	r3, #80	; 0x50
   19f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   19f0e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19f12:	f013 0f04 	tst.w	r3, #4
   19f16:	d018      	beq.n	19f4a <db_hash_process+0x66>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   19f18:	4915      	ldr	r1, [pc, #84]	; (19f70 <db_hash_process+0x8c>)
   19f1a:	2210      	movs	r2, #16
   19f1c:	1888      	adds	r0, r1, r2
   19f1e:	f010 fc91 	bl	2a844 <memcmp>
   19f22:	b9b0      	cbnz	r0, 19f52 <db_hash_process+0x6e>
			k_work_cancel_delayable(&gatt_sc.work);
   19f24:	4c13      	ldr	r4, [pc, #76]	; (19f74 <db_hash_process+0x90>)
   19f26:	f104 0020 	add.w	r0, r4, #32
   19f2a:	f009 f9dd 	bl	232e8 <k_work_cancel_delayable>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19f2e:	3450      	adds	r4, #80	; 0x50
   19f30:	f3bf 8f5b 	dmb	ish
   19f34:	e854 3f00 	ldrex	r3, [r4]
   19f38:	f023 0301 	bic.w	r3, r3, #1
   19f3c:	e844 3200 	strex	r2, r3, [r4]
   19f40:	2a00      	cmp	r2, #0
   19f42:	d1f7      	bne.n	19f34 <db_hash_process+0x50>
   19f44:	f3bf 8f5b 	dmb	ish
}
   19f48:	bd10      	pop	{r4, pc}
			db_hash_gen(false);
   19f4a:	2000      	movs	r0, #0
   19f4c:	f7ff ff78 	bl	19e40 <db_hash_gen>
   19f50:	e7e2      	b.n	19f18 <db_hash_process+0x34>
		sc_indicate(0x0001, 0xffff);
   19f52:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19f56:	2001      	movs	r0, #1
   19f58:	f7ff fc92 	bl	19880 <sc_indicate>
		db_hash_store();
   19f5c:	f7ff f9b8 	bl	192d0 <db_hash_store>
		return;
   19f60:	e7f2      	b.n	19f48 <db_hash_process+0x64>
	db_hash_gen(true);
   19f62:	2001      	movs	r0, #1
   19f64:	f7ff ff6c 	bl	19e40 <db_hash_gen>
   19f68:	e7ee      	b.n	19f48 <db_hash_process+0x64>
   19f6a:	bf00      	nop
   19f6c:	20001a78 	.word	0x20001a78
   19f70:	200019b0 	.word	0x200019b0
   19f74:	20001a28 	.word	0x20001a28

00019f78 <ccc_set>:
{
   19f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f7c:	b0bc      	sub	sp, #240	; 0xf0
   19f7e:	4604      	mov	r4, r0
   19f80:	460d      	mov	r5, r1
   19f82:	4690      	mov	r8, r2
   19f84:	461f      	mov	r7, r3
		settings_name_next(name, &next);
   19f86:	a905      	add	r1, sp, #20
   19f88:	f00f f984 	bl	29294 <settings_name_next>
		if (!name) {
   19f8c:	b154      	cbz	r4, 19fa4 <ccc_set+0x2c>
		} else if (!next) {
   19f8e:	9805      	ldr	r0, [sp, #20]
   19f90:	b178      	cbz	r0, 19fb2 <ccc_set+0x3a>
			unsigned long next_id = strtoul(next, NULL, 10);
   19f92:	220a      	movs	r2, #10
   19f94:	2100      	movs	r1, #0
   19f96:	f010 fb7a 	bl	2a68e <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   19f9a:	4602      	mov	r2, r0
   19f9c:	bb20      	cbnz	r0, 19fe8 <ccc_set+0x70>
			load.addr_with_id.id = (uint8_t)next_id;
   19f9e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   19fa2:	e009      	b.n	19fb8 <ccc_set+0x40>
			BT_ERR("Insufficient number of arguments");
   19fa4:	2145      	movs	r1, #69	; 0x45
   19fa6:	4825      	ldr	r0, [pc, #148]	; (1a03c <ccc_set+0xc4>)
   19fa8:	f00e fd6c 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   19fac:	f06f 0615 	mvn.w	r6, #21
   19fb0:	e03f      	b.n	1a032 <ccc_set+0xba>
			load.addr_with_id.id = BT_ID_DEFAULT;
   19fb2:	2300      	movs	r3, #0
   19fb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		err = bt_settings_decode_key(name, &addr);
   19fb8:	a906      	add	r1, sp, #24
   19fba:	4620      	mov	r0, r4
   19fbc:	f010 fd6a 	bl	2aa94 <bt_settings_decode_key>
		if (err) {
   19fc0:	4606      	mov	r6, r0
   19fc2:	b9c0      	cbnz	r0, 19ff6 <ccc_set+0x7e>
		load.addr_with_id.addr = &addr;
   19fc4:	ab06      	add	r3, sp, #24
   19fc6:	9308      	str	r3, [sp, #32]
		if (len_rd) {
   19fc8:	b325      	cbz	r5, 1a014 <ccc_set+0x9c>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   19fca:	22c0      	movs	r2, #192	; 0xc0
   19fcc:	a90c      	add	r1, sp, #48	; 0x30
   19fce:	4638      	mov	r0, r7
   19fd0:	47c0      	blx	r8
			if (len < 0) {
   19fd2:	1e04      	subs	r4, r0, #0
   19fd4:	db17      	blt.n	1a006 <ccc_set+0x8e>
			load.entry = ccc_store;
   19fd6:	ab0c      	add	r3, sp, #48	; 0x30
   19fd8:	930a      	str	r3, [sp, #40]	; 0x28
			load.count = len / sizeof(*ccc_store);
   19fda:	08a4      	lsrs	r4, r4, #2
   19fdc:	940b      	str	r4, [sp, #44]	; 0x2c
			for (size_t i = 0; i < load.count; i++) {
   19fde:	2300      	movs	r3, #0
   19fe0:	429c      	cmp	r4, r3
   19fe2:	d91a      	bls.n	1a01a <ccc_set+0xa2>
   19fe4:	3301      	adds	r3, #1
   19fe6:	e7fb      	b.n	19fe0 <ccc_set+0x68>
				BT_ERR("Invalid local identity %lu", next_id);
   19fe8:	2145      	movs	r1, #69	; 0x45
   19fea:	4815      	ldr	r0, [pc, #84]	; (1a040 <ccc_set+0xc8>)
   19fec:	f00e fd4a 	bl	28a84 <z_log_minimal_printk>
				return -EINVAL;
   19ff0:	f06f 0615 	mvn.w	r6, #21
   19ff4:	e01d      	b.n	1a032 <ccc_set+0xba>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   19ff6:	4622      	mov	r2, r4
   19ff8:	2145      	movs	r1, #69	; 0x45
   19ffa:	4812      	ldr	r0, [pc, #72]	; (1a044 <ccc_set+0xcc>)
   19ffc:	f00e fd42 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   1a000:	f06f 0615 	mvn.w	r6, #21
   1a004:	e015      	b.n	1a032 <ccc_set+0xba>
				BT_ERR("Failed to decode value (err %zd)", len);
   1a006:	4622      	mov	r2, r4
   1a008:	2145      	movs	r1, #69	; 0x45
   1a00a:	480f      	ldr	r0, [pc, #60]	; (1a048 <ccc_set+0xd0>)
   1a00c:	f00e fd3a 	bl	28a84 <z_log_minimal_printk>
				return len;
   1a010:	4626      	mov	r6, r4
   1a012:	e00e      	b.n	1a032 <ccc_set+0xba>
			load.entry = NULL;
   1a014:	2300      	movs	r3, #0
   1a016:	930a      	str	r3, [sp, #40]	; 0x28
			load.count = 0;
   1a018:	930b      	str	r3, [sp, #44]	; 0x2c
   1a01a:	ab08      	add	r3, sp, #32
   1a01c:	9302      	str	r3, [sp, #8]
   1a01e:	4b0b      	ldr	r3, [pc, #44]	; (1a04c <ccc_set+0xd4>)
   1a020:	9301      	str	r3, [sp, #4]
   1a022:	2200      	movs	r2, #0
   1a024:	9200      	str	r2, [sp, #0]
   1a026:	4613      	mov	r3, r2
   1a028:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a02c:	2001      	movs	r0, #1
   1a02e:	f7ff fea9 	bl	19d84 <bt_gatt_foreach_attr_type>
}
   1a032:	4630      	mov	r0, r6
   1a034:	b03c      	add	sp, #240	; 0xf0
   1a036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a03a:	bf00      	nop
   1a03c:	00030758 	.word	0x00030758
   1a040:	00031d1c 	.word	0x00031d1c
   1a044:	00031cf8 	.word	0x00031cf8
   1a048:	00031b58 	.word	0x00031b58
   1a04c:	0001955d 	.word	0x0001955d

0001a050 <ccc_set_direct>:
{
   1a050:	b570      	push	{r4, r5, r6, lr}
   1a052:	b082      	sub	sp, #8
   1a054:	460c      	mov	r4, r1
   1a056:	4615      	mov	r5, r2
   1a058:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a05a:	aa01      	add	r2, sp, #4
   1a05c:	4909      	ldr	r1, [pc, #36]	; (1a084 <ccc_set_direct+0x34>)
   1a05e:	9806      	ldr	r0, [sp, #24]
   1a060:	f00f f8ee 	bl	29240 <settings_name_steq>
   1a064:	b138      	cbz	r0, 1a076 <ccc_set_direct+0x26>
		return ccc_set(name, len, read_cb, cb_arg);
   1a066:	4633      	mov	r3, r6
   1a068:	462a      	mov	r2, r5
   1a06a:	4621      	mov	r1, r4
   1a06c:	9801      	ldr	r0, [sp, #4]
   1a06e:	f7ff ff83 	bl	19f78 <ccc_set>
}
   1a072:	b002      	add	sp, #8
   1a074:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Invalid key");
   1a076:	2145      	movs	r1, #69	; 0x45
   1a078:	4803      	ldr	r0, [pc, #12]	; (1a088 <ccc_set_direct+0x38>)
   1a07a:	f00e fd03 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   1a07e:	f06f 0015 	mvn.w	r0, #21
   1a082:	e7f6      	b.n	1a072 <ccc_set_direct+0x22>
   1a084:	00031dcc 	.word	0x00031dcc
   1a088:	00031dd4 	.word	0x00031dd4

0001a08c <gatt_find_by_uuid>:
{
   1a08c:	b510      	push	{r4, lr}
   1a08e:	b084      	sub	sp, #16
   1a090:	4604      	mov	r4, r0
   1a092:	460a      	mov	r2, r1
	found->attr = NULL;
   1a094:	2300      	movs	r3, #0
   1a096:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a098:	9002      	str	r0, [sp, #8]
   1a09a:	4907      	ldr	r1, [pc, #28]	; (1a0b8 <gatt_find_by_uuid+0x2c>)
   1a09c:	9101      	str	r1, [sp, #4]
   1a09e:	2101      	movs	r1, #1
   1a0a0:	9100      	str	r1, [sp, #0]
   1a0a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a0a6:	8880      	ldrh	r0, [r0, #4]
   1a0a8:	f7ff fe6c 	bl	19d84 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a0ac:	6820      	ldr	r0, [r4, #0]
}
   1a0ae:	3800      	subs	r0, #0
   1a0b0:	bf18      	it	ne
   1a0b2:	2001      	movne	r0, #1
   1a0b4:	b004      	add	sp, #16
   1a0b6:	bd10      	pop	{r4, pc}
   1a0b8:	0002c66b 	.word	0x0002c66b

0001a0bc <gatt_indicate>:
{
   1a0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a0c0:	b082      	sub	sp, #8
   1a0c2:	4606      	mov	r6, r0
   1a0c4:	460f      	mov	r7, r1
   1a0c6:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1a0c8:	2214      	movs	r2, #20
   1a0ca:	6861      	ldr	r1, [r4, #4]
   1a0cc:	f012 fd6c 	bl	2cba8 <bt_gatt_check_perm>
   1a0d0:	bb78      	cbnz	r0, 1a132 <gatt_indicate+0x76>
	len = sizeof(*ind) + params->len;
   1a0d2:	8aa5      	ldrh	r5, [r4, #20]
   1a0d4:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1a0d6:	9500      	str	r5, [sp, #0]
   1a0d8:	231d      	movs	r3, #29
   1a0da:	2200      	movs	r2, #0
   1a0dc:	4621      	mov	r1, r4
   1a0de:	4821      	ldr	r0, [pc, #132]	; (1a164 <gatt_indicate+0xa8>)
   1a0e0:	f012 fbfe 	bl	2c8e0 <gatt_req_alloc>
	if (!req) {
   1a0e4:	4680      	mov	r8, r0
   1a0e6:	b3c8      	cbz	r0, 1a15c <gatt_indicate+0xa0>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1a0e8:	462a      	mov	r2, r5
   1a0ea:	211d      	movs	r1, #29
   1a0ec:	4630      	mov	r0, r6
   1a0ee:	f7fe fd7b 	bl	18be8 <bt_att_create_pdu>
	if (!buf) {
   1a0f2:	4681      	mov	r9, r0
   1a0f4:	b320      	cbz	r0, 1a140 <gatt_indicate+0x84>
   1a0f6:	f100 0a08 	add.w	sl, r0, #8
   1a0fa:	2102      	movs	r1, #2
   1a0fc:	4650      	mov	r0, sl
   1a0fe:	f003 f903 	bl	1d308 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1a102:	4605      	mov	r5, r0
   1a104:	f825 7b02 	strh.w	r7, [r5], #2
   1a108:	8aa1      	ldrh	r1, [r4, #20]
   1a10a:	4650      	mov	r0, sl
   1a10c:	f003 f8fc 	bl	1d308 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1a110:	8aa2      	ldrh	r2, [r4, #20]
   1a112:	6921      	ldr	r1, [r4, #16]
   1a114:	4628      	mov	r0, r5
   1a116:	f010 fbc2 	bl	2a89e <memcpy>
	req->buf = buf;
   1a11a:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   1a11e:	4641      	mov	r1, r8
   1a120:	4630      	mov	r0, r6
   1a122:	f7ff f885 	bl	19230 <bt_att_req_send>
	if (err) {
   1a126:	4604      	mov	r4, r0
   1a128:	b9a0      	cbnz	r0, 1a154 <gatt_indicate+0x98>
}
   1a12a:	4620      	mov	r0, r4
   1a12c:	b002      	add	sp, #8
   1a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("Link is not encrypted");
   1a132:	2157      	movs	r1, #87	; 0x57
   1a134:	480c      	ldr	r0, [pc, #48]	; (1a168 <gatt_indicate+0xac>)
   1a136:	f00e fca5 	bl	28a84 <z_log_minimal_printk>
		return -EPERM;
   1a13a:	f04f 34ff 	mov.w	r4, #4294967295
   1a13e:	e7f4      	b.n	1a12a <gatt_indicate+0x6e>
		BT_WARN("No buffer available to send indication");
   1a140:	2157      	movs	r1, #87	; 0x57
   1a142:	480a      	ldr	r0, [pc, #40]	; (1a16c <gatt_indicate+0xb0>)
   1a144:	f00e fc9e 	bl	28a84 <z_log_minimal_printk>
		bt_att_req_free(req);
   1a148:	4640      	mov	r0, r8
   1a14a:	f7fe ff91 	bl	19070 <bt_att_req_free>
		return -ENOMEM;
   1a14e:	f06f 040b 	mvn.w	r4, #11
   1a152:	e7ea      	b.n	1a12a <gatt_indicate+0x6e>
		bt_att_req_free(req);
   1a154:	4640      	mov	r0, r8
   1a156:	f7fe ff8b 	bl	19070 <bt_att_req_free>
   1a15a:	e7e6      	b.n	1a12a <gatt_indicate+0x6e>
		return -ENOMEM;
   1a15c:	f06f 040b 	mvn.w	r4, #11
   1a160:	e7e3      	b.n	1a12a <gatt_indicate+0x6e>
   1a162:	bf00      	nop
   1a164:	0002c649 	.word	0x0002c649
   1a168:	00031dec 	.word	0x00031dec
   1a16c:	00031e08 	.word	0x00031e08

0001a170 <bt_gatt_indicate>:
{
   1a170:	b570      	push	{r4, r5, r6, lr}
   1a172:	b08c      	sub	sp, #48	; 0x30
   1a174:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1a176:	460c      	mov	r4, r1
   1a178:	2900      	cmp	r1, #0
   1a17a:	d041      	beq.n	1a200 <bt_gatt_indicate+0x90>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a17c:	6863      	ldr	r3, [r4, #4]
   1a17e:	2b00      	cmp	r3, #0
   1a180:	d04b      	beq.n	1a21a <bt_gatt_indicate+0xaa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a182:	f3bf 8f5b 	dmb	ish
   1a186:	4b44      	ldr	r3, [pc, #272]	; (1a298 <bt_gatt_indicate+0x128>)
   1a188:	681b      	ldr	r3, [r3, #0]
   1a18a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a18e:	f013 0f02 	tst.w	r3, #2
   1a192:	d078      	beq.n	1a286 <bt_gatt_indicate+0x116>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a194:	b115      	cbz	r5, 1a19c <bt_gatt_indicate+0x2c>
   1a196:	7b6b      	ldrb	r3, [r5, #13]
   1a198:	2b07      	cmp	r3, #7
   1a19a:	d177      	bne.n	1a28c <bt_gatt_indicate+0x11c>
	data.attr = params->attr;
   1a19c:	6860      	ldr	r0, [r4, #4]
   1a19e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a1a0:	f7ff fda8 	bl	19cf4 <bt_gatt_attr_get_handle>
   1a1a4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a1a8:	6821      	ldr	r1, [r4, #0]
   1a1aa:	2900      	cmp	r1, #0
   1a1ac:	d045      	beq.n	1a23a <bt_gatt_indicate+0xca>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a1ae:	a805      	add	r0, sp, #20
   1a1b0:	f7ff ff6c 	bl	1a08c <gatt_find_by_uuid>
   1a1b4:	2800      	cmp	r0, #0
   1a1b6:	d06c      	beq.n	1a292 <bt_gatt_indicate+0x122>
		params->attr = data.attr;
   1a1b8:	9b05      	ldr	r3, [sp, #20]
   1a1ba:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a1bc:	9b05      	ldr	r3, [sp, #20]
   1a1be:	6818      	ldr	r0, [r3, #0]
   1a1c0:	2300      	movs	r3, #0
   1a1c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1a1c6:	f642 0303 	movw	r3, #10243	; 0x2803
   1a1ca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1a1ce:	a90b      	add	r1, sp, #44	; 0x2c
   1a1d0:	f010 fc9d 	bl	2ab0e <bt_uuid_cmp>
   1a1d4:	b948      	cbnz	r0, 1a1ea <bt_gatt_indicate+0x7a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a1d6:	9805      	ldr	r0, [sp, #20]
   1a1d8:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1a1da:	799b      	ldrb	r3, [r3, #6]
   1a1dc:	f013 0f20 	tst.w	r3, #32
   1a1e0:	d030      	beq.n	1a244 <bt_gatt_indicate+0xd4>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a1e2:	f012 fc92 	bl	2cb0a <bt_gatt_attr_value_handle>
   1a1e6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1a1ea:	b375      	cbz	r5, 1a24a <bt_gatt_indicate+0xda>
		params->_ref = 1;
   1a1ec:	2301      	movs	r3, #1
   1a1ee:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1a1f0:	4622      	mov	r2, r4
   1a1f2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1a1f6:	4628      	mov	r0, r5
   1a1f8:	f7ff ff60 	bl	1a0bc <gatt_indicate>
}
   1a1fc:	b00c      	add	sp, #48	; 0x30
   1a1fe:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(params, "invalid parameters\n");
   1a200:	4e26      	ldr	r6, [pc, #152]	; (1a29c <bt_gatt_indicate+0x12c>)
   1a202:	f640 1238 	movw	r2, #2360	; 0x938
   1a206:	4631      	mov	r1, r6
   1a208:	4825      	ldr	r0, [pc, #148]	; (1a2a0 <bt_gatt_indicate+0x130>)
   1a20a:	f00e f89a 	bl	28342 <printk>
   1a20e:	f640 1138 	movw	r1, #2360	; 0x938
   1a212:	4630      	mov	r0, r6
   1a214:	f00e fc2e 	bl	28a74 <assert_post_action>
   1a218:	e7b0      	b.n	1a17c <bt_gatt_indicate+0xc>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a21a:	6823      	ldr	r3, [r4, #0]
   1a21c:	2b00      	cmp	r3, #0
   1a21e:	d1b0      	bne.n	1a182 <bt_gatt_indicate+0x12>
   1a220:	4e1e      	ldr	r6, [pc, #120]	; (1a29c <bt_gatt_indicate+0x12c>)
   1a222:	f640 1239 	movw	r2, #2361	; 0x939
   1a226:	4631      	mov	r1, r6
   1a228:	481d      	ldr	r0, [pc, #116]	; (1a2a0 <bt_gatt_indicate+0x130>)
   1a22a:	f00e f88a 	bl	28342 <printk>
   1a22e:	f640 1139 	movw	r1, #2361	; 0x939
   1a232:	4630      	mov	r0, r6
   1a234:	f00e fc1e 	bl	28a74 <assert_post_action>
   1a238:	e7a3      	b.n	1a182 <bt_gatt_indicate+0x12>
		if (!data.handle) {
   1a23a:	2800      	cmp	r0, #0
   1a23c:	d1be      	bne.n	1a1bc <bt_gatt_indicate+0x4c>
			return -ENOENT;
   1a23e:	f06f 0001 	mvn.w	r0, #1
   1a242:	e7db      	b.n	1a1fc <bt_gatt_indicate+0x8c>
			return -EINVAL;
   1a244:	f06f 0015 	mvn.w	r0, #21
   1a248:	e7d8      	b.n	1a1fc <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   1a24a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a24e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1a250:	2302      	movs	r3, #2
   1a252:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1a256:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1a258:	2300      	movs	r3, #0
   1a25a:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a25c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1a260:	f642 1202 	movw	r2, #10498	; 0x2902
   1a264:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1a268:	aa05      	add	r2, sp, #20
   1a26a:	9202      	str	r2, [sp, #8]
   1a26c:	4a0d      	ldr	r2, [pc, #52]	; (1a2a4 <bt_gatt_indicate+0x134>)
   1a26e:	9201      	str	r2, [sp, #4]
   1a270:	2201      	movs	r2, #1
   1a272:	9200      	str	r2, [sp, #0]
   1a274:	aa0a      	add	r2, sp, #40	; 0x28
   1a276:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a27a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1a27e:	f7ff fd81 	bl	19d84 <bt_gatt_foreach_attr_type>
	return data.err;
   1a282:	9807      	ldr	r0, [sp, #28]
   1a284:	e7ba      	b.n	1a1fc <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1a286:	f06f 000a 	mvn.w	r0, #10
   1a28a:	e7b7      	b.n	1a1fc <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   1a28c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a290:	e7b4      	b.n	1a1fc <bt_gatt_indicate+0x8c>
			return -ENOENT;
   1a292:	f06f 0001 	mvn.w	r0, #1
   1a296:	e7b1      	b.n	1a1fc <bt_gatt_indicate+0x8c>
   1a298:	20000374 	.word	0x20000374
   1a29c:	00031cc8 	.word	0x00031cc8
   1a2a0:	0002f968 	.word	0x0002f968
   1a2a4:	0001a581 	.word	0x0001a581

0001a2a8 <sc_process>:
{
   1a2a8:	b570      	push	{r4, r5, r6, lr}
   1a2aa:	b082      	sub	sp, #8
   1a2ac:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a2ae:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1a2b2:	f3bf 8f5b 	dmb	ish
   1a2b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1a2b8:	f3bf 8f5b 	dmb	ish
   1a2bc:	f013 0f02 	tst.w	r3, #2
   1a2c0:	d12b      	bne.n	1a31a <sc_process+0x72>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1a2c2:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1a2c6:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1a2ca:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1a2ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a2d2:	f3bf 8f5b 	dmb	ish
   1a2d6:	e855 3f00 	ldrex	r3, [r5]
   1a2da:	f023 0301 	bic.w	r3, r3, #1
   1a2de:	e845 3200 	strex	r2, r3, [r5]
   1a2e2:	2a00      	cmp	r2, #0
   1a2e4:	d1f7      	bne.n	1a2d6 <sc_process+0x2e>
   1a2e6:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1a2ea:	2000      	movs	r0, #0
   1a2ec:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1a2f0:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a2f4:	4b16      	ldr	r3, [pc, #88]	; (1a350 <sc_process+0xa8>)
   1a2f6:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1a2fa:	4b16      	ldr	r3, [pc, #88]	; (1a354 <sc_process+0xac>)
   1a2fc:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1a300:	ab01      	add	r3, sp, #4
   1a302:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1a306:	2304      	movs	r3, #4
   1a308:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a30c:	f1a4 0120 	sub.w	r1, r4, #32
   1a310:	f7ff ff2e 	bl	1a170 <bt_gatt_indicate>
   1a314:	b170      	cbz	r0, 1a334 <sc_process+0x8c>
}
   1a316:	b002      	add	sp, #8
   1a318:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a31a:	4e0f      	ldr	r6, [pc, #60]	; (1a358 <sc_process+0xb0>)
   1a31c:	f44f 7279 	mov.w	r2, #996	; 0x3e4
   1a320:	4631      	mov	r1, r6
   1a322:	480e      	ldr	r0, [pc, #56]	; (1a35c <sc_process+0xb4>)
   1a324:	f00e f80d 	bl	28342 <printk>
   1a328:	f44f 7179 	mov.w	r1, #996	; 0x3e4
   1a32c:	4630      	mov	r0, r6
   1a32e:	f00e fba1 	bl	28a74 <assert_post_action>
   1a332:	e7c6      	b.n	1a2c2 <sc_process+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a334:	f3bf 8f5b 	dmb	ish
   1a338:	e855 3f00 	ldrex	r3, [r5]
   1a33c:	f043 0302 	orr.w	r3, r3, #2
   1a340:	e845 3200 	strex	r2, r3, [r5]
   1a344:	2a00      	cmp	r2, #0
   1a346:	d1f7      	bne.n	1a338 <sc_process+0x90>
   1a348:	f3bf 8f5b 	dmb	ish
   1a34c:	e7e3      	b.n	1a316 <sc_process+0x6e>
   1a34e:	bf00      	nop
   1a350:	00031f3c 	.word	0x00031f3c
   1a354:	00019925 	.word	0x00019925
   1a358:	00031cc8 	.word	0x00031cc8
   1a35c:	0002f968 	.word	0x0002f968

0001a360 <sc_restore>:
{
   1a360:	b530      	push	{r4, r5, lr}
   1a362:	b083      	sub	sp, #12
   1a364:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a366:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1a36a:	7a00      	ldrb	r0, [r0, #8]
   1a36c:	f7fe ffee 	bl	1934c <find_sc_cfg>
	if (!cfg) {
   1a370:	b308      	cbz	r0, 1a3b6 <sc_restore+0x56>
   1a372:	4605      	mov	r5, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1a374:	8903      	ldrh	r3, [r0, #8]
   1a376:	b90b      	cbnz	r3, 1a37c <sc_restore+0x1c>
   1a378:	8942      	ldrh	r2, [r0, #10]
   1a37a:	b1e2      	cbz	r2, 1a3b6 <sc_restore+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a37c:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a380:	896b      	ldrh	r3, [r5, #10]
   1a382:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1a386:	4620      	mov	r0, r4
   1a388:	f7fd fa76 	bl	17878 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a38c:	490d      	ldr	r1, [pc, #52]	; (1a3c4 <sc_restore+0x64>)
   1a38e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1a392:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1a396:	4a0c      	ldr	r2, [pc, #48]	; (1a3c8 <sc_restore+0x68>)
   1a398:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a39a:	4a0c      	ldr	r2, [pc, #48]	; (1a3cc <sc_restore+0x6c>)
   1a39c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1a39e:	aa01      	add	r2, sp, #4
   1a3a0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1a3a2:	2204      	movs	r2, #4
   1a3a4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a3a6:	4619      	mov	r1, r3
   1a3a8:	4620      	mov	r0, r4
   1a3aa:	f7ff fee1 	bl	1a170 <bt_gatt_indicate>
   1a3ae:	b920      	cbnz	r0, 1a3ba <sc_restore+0x5a>
	sc_reset(cfg);
   1a3b0:	4628      	mov	r0, r5
   1a3b2:	f012 fa5f 	bl	2c874 <sc_reset>
}
   1a3b6:	b003      	add	sp, #12
   1a3b8:	bd30      	pop	{r4, r5, pc}
		BT_ERR("SC restore indication failed");
   1a3ba:	2145      	movs	r1, #69	; 0x45
   1a3bc:	4804      	ldr	r0, [pc, #16]	; (1a3d0 <sc_restore+0x70>)
   1a3be:	f00e fb61 	bl	28a84 <z_log_minimal_printk>
   1a3c2:	e7f5      	b.n	1a3b0 <sc_restore+0x50>
   1a3c4:	20002850 	.word	0x20002850
   1a3c8:	00031f3c 	.word	0x00031f3c
   1a3cc:	0002c757 	.word	0x0002c757
   1a3d0:	00031e34 	.word	0x00031e34

0001a3d4 <gatt_notify>:
{
   1a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a3d8:	4606      	mov	r6, r0
   1a3da:	460f      	mov	r7, r1
   1a3dc:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1a3de:	2214      	movs	r2, #20
   1a3e0:	6861      	ldr	r1, [r4, #4]
   1a3e2:	f012 fbe1 	bl	2cba8 <bt_gatt_check_perm>
   1a3e6:	bb08      	cbnz	r0, 1a42c <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1a3e8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a3ea:	3202      	adds	r2, #2
   1a3ec:	211b      	movs	r1, #27
   1a3ee:	4630      	mov	r0, r6
   1a3f0:	f7fe fbfa 	bl	18be8 <bt_att_create_pdu>
	if (!buf) {
   1a3f4:	4680      	mov	r8, r0
   1a3f6:	b300      	cbz	r0, 1a43a <gatt_notify+0x66>
   1a3f8:	f100 0908 	add.w	r9, r0, #8
   1a3fc:	2102      	movs	r1, #2
   1a3fe:	4648      	mov	r0, r9
   1a400:	f002 ff82 	bl	1d308 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a404:	4605      	mov	r5, r0
   1a406:	f825 7b02 	strh.w	r7, [r5], #2
   1a40a:	89a1      	ldrh	r1, [r4, #12]
   1a40c:	4648      	mov	r0, r9
   1a40e:	f002 ff7b 	bl	1d308 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1a412:	89a2      	ldrh	r2, [r4, #12]
   1a414:	68a1      	ldr	r1, [r4, #8]
   1a416:	4628      	mov	r0, r5
   1a418:	f010 fa41 	bl	2a89e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1a41c:	6963      	ldr	r3, [r4, #20]
   1a41e:	6922      	ldr	r2, [r4, #16]
   1a420:	4641      	mov	r1, r8
   1a422:	4630      	mov	r0, r6
   1a424:	f7fe febc 	bl	191a0 <bt_att_send>
}
   1a428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Link is not encrypted");
   1a42c:	2157      	movs	r1, #87	; 0x57
   1a42e:	4806      	ldr	r0, [pc, #24]	; (1a448 <gatt_notify+0x74>)
   1a430:	f00e fb28 	bl	28a84 <z_log_minimal_printk>
		return -EPERM;
   1a434:	f04f 30ff 	mov.w	r0, #4294967295
   1a438:	e7f6      	b.n	1a428 <gatt_notify+0x54>
		BT_WARN("No buffer available to send notification");
   1a43a:	2157      	movs	r1, #87	; 0x57
   1a43c:	4803      	ldr	r0, [pc, #12]	; (1a44c <gatt_notify+0x78>)
   1a43e:	f00e fb21 	bl	28a84 <z_log_minimal_printk>
		return -ENOMEM;
   1a442:	f06f 000b 	mvn.w	r0, #11
   1a446:	e7ef      	b.n	1a428 <gatt_notify+0x54>
   1a448:	00031dec 	.word	0x00031dec
   1a44c:	00031e58 	.word	0x00031e58

0001a450 <bt_gatt_notify_cb>:
{
   1a450:	b570      	push	{r4, r5, r6, lr}
   1a452:	b08c      	sub	sp, #48	; 0x30
   1a454:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   1a456:	460d      	mov	r5, r1
   1a458:	2900      	cmp	r1, #0
   1a45a:	d03f      	beq.n	1a4dc <bt_gatt_notify_cb+0x8c>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a45c:	686b      	ldr	r3, [r5, #4]
   1a45e:	2b00      	cmp	r3, #0
   1a460:	d049      	beq.n	1a4f6 <bt_gatt_notify_cb+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a462:	f3bf 8f5b 	dmb	ish
   1a466:	4b42      	ldr	r3, [pc, #264]	; (1a570 <bt_gatt_notify_cb+0x120>)
   1a468:	681b      	ldr	r3, [r3, #0]
   1a46a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a46e:	f013 0f02 	tst.w	r3, #2
   1a472:	d074      	beq.n	1a55e <bt_gatt_notify_cb+0x10e>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a474:	b114      	cbz	r4, 1a47c <bt_gatt_notify_cb+0x2c>
   1a476:	7b63      	ldrb	r3, [r4, #13]
   1a478:	2b07      	cmp	r3, #7
   1a47a:	d173      	bne.n	1a564 <bt_gatt_notify_cb+0x114>
	data.attr = params->attr;
   1a47c:	6868      	ldr	r0, [r5, #4]
   1a47e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a480:	f7ff fc38 	bl	19cf4 <bt_gatt_attr_get_handle>
   1a484:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a488:	6829      	ldr	r1, [r5, #0]
   1a48a:	2900      	cmp	r1, #0
   1a48c:	d043      	beq.n	1a516 <bt_gatt_notify_cb+0xc6>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a48e:	a805      	add	r0, sp, #20
   1a490:	f7ff fdfc 	bl	1a08c <gatt_find_by_uuid>
   1a494:	2800      	cmp	r0, #0
   1a496:	d068      	beq.n	1a56a <bt_gatt_notify_cb+0x11a>
		params->attr = data.attr;
   1a498:	9b05      	ldr	r3, [sp, #20]
   1a49a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a49c:	9b05      	ldr	r3, [sp, #20]
   1a49e:	6818      	ldr	r0, [r3, #0]
   1a4a0:	2300      	movs	r3, #0
   1a4a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1a4a6:	f642 0303 	movw	r3, #10243	; 0x2803
   1a4aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1a4ae:	a90b      	add	r1, sp, #44	; 0x2c
   1a4b0:	f010 fb2d 	bl	2ab0e <bt_uuid_cmp>
   1a4b4:	b948      	cbnz	r0, 1a4ca <bt_gatt_notify_cb+0x7a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a4b6:	9805      	ldr	r0, [sp, #20]
   1a4b8:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1a4ba:	799b      	ldrb	r3, [r3, #6]
   1a4bc:	f013 0f10 	tst.w	r3, #16
   1a4c0:	d02e      	beq.n	1a520 <bt_gatt_notify_cb+0xd0>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a4c2:	f012 fb22 	bl	2cb0a <bt_gatt_attr_value_handle>
   1a4c6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1a4ca:	b364      	cbz	r4, 1a526 <bt_gatt_notify_cb+0xd6>
		return gatt_notify(conn, data.handle, params);
   1a4cc:	462a      	mov	r2, r5
   1a4ce:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1a4d2:	4620      	mov	r0, r4
   1a4d4:	f7ff ff7e 	bl	1a3d4 <gatt_notify>
}
   1a4d8:	b00c      	add	sp, #48	; 0x30
   1a4da:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(params, "invalid parameters\n");
   1a4dc:	4e25      	ldr	r6, [pc, #148]	; (1a574 <bt_gatt_notify_cb+0x124>)
   1a4de:	f640 02ea 	movw	r2, #2282	; 0x8ea
   1a4e2:	4631      	mov	r1, r6
   1a4e4:	4824      	ldr	r0, [pc, #144]	; (1a578 <bt_gatt_notify_cb+0x128>)
   1a4e6:	f00d ff2c 	bl	28342 <printk>
   1a4ea:	f640 01ea 	movw	r1, #2282	; 0x8ea
   1a4ee:	4630      	mov	r0, r6
   1a4f0:	f00e fac0 	bl	28a74 <assert_post_action>
   1a4f4:	e7b2      	b.n	1a45c <bt_gatt_notify_cb+0xc>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a4f6:	682b      	ldr	r3, [r5, #0]
   1a4f8:	2b00      	cmp	r3, #0
   1a4fa:	d1b2      	bne.n	1a462 <bt_gatt_notify_cb+0x12>
   1a4fc:	4e1d      	ldr	r6, [pc, #116]	; (1a574 <bt_gatt_notify_cb+0x124>)
   1a4fe:	f640 02eb 	movw	r2, #2283	; 0x8eb
   1a502:	4631      	mov	r1, r6
   1a504:	481c      	ldr	r0, [pc, #112]	; (1a578 <bt_gatt_notify_cb+0x128>)
   1a506:	f00d ff1c 	bl	28342 <printk>
   1a50a:	f640 01eb 	movw	r1, #2283	; 0x8eb
   1a50e:	4630      	mov	r0, r6
   1a510:	f00e fab0 	bl	28a74 <assert_post_action>
   1a514:	e7a5      	b.n	1a462 <bt_gatt_notify_cb+0x12>
		if (!data.handle) {
   1a516:	2800      	cmp	r0, #0
   1a518:	d1c0      	bne.n	1a49c <bt_gatt_notify_cb+0x4c>
			return -ENOENT;
   1a51a:	f06f 0001 	mvn.w	r0, #1
   1a51e:	e7db      	b.n	1a4d8 <bt_gatt_notify_cb+0x88>
			return -EINVAL;
   1a520:	f06f 0015 	mvn.w	r0, #21
   1a524:	e7d8      	b.n	1a4d8 <bt_gatt_notify_cb+0x88>
	data.err = -ENOTCONN;
   1a526:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a52a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1a52c:	2201      	movs	r2, #1
   1a52e:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   1a532:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a534:	2300      	movs	r3, #0
   1a536:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1a53a:	f642 1102 	movw	r1, #10498	; 0x2902
   1a53e:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   1a542:	a905      	add	r1, sp, #20
   1a544:	9102      	str	r1, [sp, #8]
   1a546:	490d      	ldr	r1, [pc, #52]	; (1a57c <bt_gatt_notify_cb+0x12c>)
   1a548:	9101      	str	r1, [sp, #4]
   1a54a:	9200      	str	r2, [sp, #0]
   1a54c:	aa0a      	add	r2, sp, #40	; 0x28
   1a54e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a552:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1a556:	f7ff fc15 	bl	19d84 <bt_gatt_foreach_attr_type>
	return data.err;
   1a55a:	9807      	ldr	r0, [sp, #28]
   1a55c:	e7bc      	b.n	1a4d8 <bt_gatt_notify_cb+0x88>
		return -EAGAIN;
   1a55e:	f06f 000a 	mvn.w	r0, #10
   1a562:	e7b9      	b.n	1a4d8 <bt_gatt_notify_cb+0x88>
		return -ENOTCONN;
   1a564:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a568:	e7b6      	b.n	1a4d8 <bt_gatt_notify_cb+0x88>
			return -ENOENT;
   1a56a:	f06f 0001 	mvn.w	r0, #1
   1a56e:	e7b3      	b.n	1a4d8 <bt_gatt_notify_cb+0x88>
   1a570:	20000374 	.word	0x20000374
   1a574:	00031cc8 	.word	0x00031cc8
   1a578:	0002f968 	.word	0x0002f968
   1a57c:	0001a581 	.word	0x0001a581

0001a580 <notify_cb>:
{
   1a580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a584:	b082      	sub	sp, #8
   1a586:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a588:	6882      	ldr	r2, [r0, #8]
   1a58a:	4b4b      	ldr	r3, [pc, #300]	; (1a6b8 <notify_cb+0x138>)
   1a58c:	429a      	cmp	r2, r3
   1a58e:	d005      	beq.n	1a59c <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1a590:	f04f 0901 	mov.w	r9, #1
}
   1a594:	4648      	mov	r0, r9
   1a596:	b002      	add	sp, #8
   1a598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a59c:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1a59e:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a5a0:	4b46      	ldr	r3, [pc, #280]	; (1a6bc <notify_cb+0x13c>)
   1a5a2:	429d      	cmp	r5, r3
   1a5a4:	d031      	beq.n	1a60a <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a5a6:	2400      	movs	r4, #0
   1a5a8:	e052      	b.n	1a650 <notify_cb+0xd0>
				sc = (struct sc_data *)data->ind_params->data;
   1a5aa:	6933      	ldr	r3, [r6, #16]
   1a5ac:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1a5ae:	eb08 0048 	add.w	r0, r8, r8, lsl #1
   1a5b2:	8853      	ldrh	r3, [r2, #2]
   1a5b4:	8812      	ldrh	r2, [r2, #0]
   1a5b6:	4621      	mov	r1, r4
   1a5b8:	4c41      	ldr	r4, [pc, #260]	; (1a6c0 <notify_cb+0x140>)
   1a5ba:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
   1a5be:	f7ff f843 	bl	19648 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a5c2:	f108 0801 	add.w	r8, r8, #1
   1a5c6:	f1b8 0f01 	cmp.w	r8, #1
   1a5ca:	d8ec      	bhi.n	1a5a6 <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a5cc:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   1a5d0:	4b3b      	ldr	r3, [pc, #236]	; (1a6c0 <notify_cb+0x140>)
   1a5d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1a5d6:	3401      	adds	r4, #1
   1a5d8:	2300      	movs	r3, #0
   1a5da:	9300      	str	r3, [sp, #0]
   1a5dc:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1a5e0:	2207      	movs	r2, #7
   1a5e2:	4669      	mov	r1, sp
   1a5e4:	4620      	mov	r0, r4
   1a5e6:	f010 f92d 	bl	2a844 <memcmp>
   1a5ea:	2800      	cmp	r0, #0
   1a5ec:	d0e9      	beq.n	1a5c2 <notify_cb+0x42>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1a5ee:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   1a5f2:	2207      	movs	r2, #7
   1a5f4:	4621      	mov	r1, r4
   1a5f6:	4832      	ldr	r0, [pc, #200]	; (1a6c0 <notify_cb+0x140>)
   1a5f8:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1a5fc:	f7fd fb3a 	bl	17c74 <bt_conn_lookup_state_le>
			if (!conn) {
   1a600:	2800      	cmp	r0, #0
   1a602:	d0d2      	beq.n	1a5aa <notify_cb+0x2a>
			bt_conn_unref(conn);
   1a604:	f7fd f82a 	bl	1765c <bt_conn_unref>
   1a608:	e7db      	b.n	1a5c2 <notify_cb+0x42>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a60a:	f04f 0800 	mov.w	r8, #0
   1a60e:	e7da      	b.n	1a5c6 <notify_cb+0x46>
			bt_conn_unref(conn);
   1a610:	f7fd f824 	bl	1765c <bt_conn_unref>
			continue;
   1a614:	e01b      	b.n	1a64e <notify_cb+0xce>
			bt_conn_unref(conn);
   1a616:	4640      	mov	r0, r8
   1a618:	f7fd f820 	bl	1765c <bt_conn_unref>
			continue;
   1a61c:	e017      	b.n	1a64e <notify_cb+0xce>
			BT_WARN("Link is not encrypted");
   1a61e:	2157      	movs	r1, #87	; 0x57
   1a620:	4828      	ldr	r0, [pc, #160]	; (1a6c4 <notify_cb+0x144>)
   1a622:	f00e fa2f 	bl	28a84 <z_log_minimal_printk>
			continue;
   1a626:	e012      	b.n	1a64e <notify_cb+0xce>
			err = gatt_indicate(conn, data->handle,
   1a628:	6932      	ldr	r2, [r6, #16]
   1a62a:	88b1      	ldrh	r1, [r6, #4]
   1a62c:	4640      	mov	r0, r8
   1a62e:	f7ff fd45 	bl	1a0bc <gatt_indicate>
			if (err == 0) {
   1a632:	4682      	mov	sl, r0
   1a634:	b918      	cbnz	r0, 1a63e <notify_cb+0xbe>
				data->ind_params->_ref++;
   1a636:	6932      	ldr	r2, [r6, #16]
   1a638:	7d93      	ldrb	r3, [r2, #22]
   1a63a:	3301      	adds	r3, #1
   1a63c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1a63e:	4640      	mov	r0, r8
   1a640:	f7fd f80c 	bl	1765c <bt_conn_unref>
		if (err < 0) {
   1a644:	f1ba 0f00 	cmp.w	sl, #0
   1a648:	dba4      	blt.n	1a594 <notify_cb+0x14>
		data->err = 0;
   1a64a:	2300      	movs	r3, #0
   1a64c:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a64e:	3401      	adds	r4, #1
   1a650:	bb74      	cbnz	r4, 1a6b0 <notify_cb+0x130>
		if (cfg->value != data->type) {
   1a652:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a656:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1a65a:	8919      	ldrh	r1, [r3, #8]
   1a65c:	89b3      	ldrh	r3, [r6, #12]
   1a65e:	4299      	cmp	r1, r3
   1a660:	d1f5      	bne.n	1a64e <notify_cb+0xce>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a662:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a666:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1a66a:	3101      	adds	r1, #1
   1a66c:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1a670:	f7fd fa98 	bl	17ba4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1a674:	4680      	mov	r8, r0
   1a676:	2800      	cmp	r0, #0
   1a678:	d0e9      	beq.n	1a64e <notify_cb+0xce>
		if (conn->state != BT_CONN_CONNECTED) {
   1a67a:	7b43      	ldrb	r3, [r0, #13]
   1a67c:	2b07      	cmp	r3, #7
   1a67e:	d1c7      	bne.n	1a610 <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1a680:	696b      	ldr	r3, [r5, #20]
   1a682:	b11b      	cbz	r3, 1a68c <notify_cb+0x10c>
   1a684:	4639      	mov	r1, r7
   1a686:	4798      	blx	r3
   1a688:	2800      	cmp	r0, #0
   1a68a:	d0c4      	beq.n	1a616 <notify_cb+0x96>
		if (bt_gatt_check_perm(conn, attr,
   1a68c:	2214      	movs	r2, #20
   1a68e:	4639      	mov	r1, r7
   1a690:	4640      	mov	r0, r8
   1a692:	f012 fa89 	bl	2cba8 <bt_gatt_check_perm>
   1a696:	4681      	mov	r9, r0
   1a698:	2800      	cmp	r0, #0
   1a69a:	d1c0      	bne.n	1a61e <notify_cb+0x9e>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1a69c:	89b3      	ldrh	r3, [r6, #12]
   1a69e:	2b02      	cmp	r3, #2
   1a6a0:	d0c2      	beq.n	1a628 <notify_cb+0xa8>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1a6a2:	6932      	ldr	r2, [r6, #16]
   1a6a4:	88b1      	ldrh	r1, [r6, #4]
   1a6a6:	4640      	mov	r0, r8
   1a6a8:	f7ff fe94 	bl	1a3d4 <gatt_notify>
   1a6ac:	4682      	mov	sl, r0
   1a6ae:	e7c6      	b.n	1a63e <notify_cb+0xbe>
	return BT_GATT_ITER_CONTINUE;
   1a6b0:	f04f 0901 	mov.w	r9, #1
   1a6b4:	e76e      	b.n	1a594 <notify_cb+0x14>
   1a6b6:	bf00      	nop
   1a6b8:	0001949d 	.word	0x0001949d
   1a6bc:	20000668 	.word	0x20000668
   1a6c0:	20002838 	.word	0x20002838
   1a6c4:	00031dec 	.word	0x00031dec

0001a6c8 <update_ccc>:
{
   1a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a6cc:	4615      	mov	r5, r2
	struct bt_conn *conn = data->conn;
   1a6ce:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a6d0:	6882      	ldr	r2, [r0, #8]
   1a6d2:	4b24      	ldr	r3, [pc, #144]	; (1a764 <update_ccc+0x9c>)
   1a6d4:	429a      	cmp	r2, r3
   1a6d6:	d002      	beq.n	1a6de <update_ccc+0x16>
}
   1a6d8:	2001      	movs	r0, #1
   1a6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a6de:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1a6e0:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a6e4:	2600      	movs	r6, #0
   1a6e6:	2e00      	cmp	r6, #0
   1a6e8:	d1f6      	bne.n	1a6d8 <update_ccc+0x10>
		if (!cfg->value ||
   1a6ea:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1a6ee:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   1a6f2:	891b      	ldrh	r3, [r3, #8]
   1a6f4:	b3a3      	cbz	r3, 1a760 <update_ccc+0x98>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a6f6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1a6fa:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   1a6fe:	3201      	adds	r2, #1
   1a700:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   1a704:	4638      	mov	r0, r7
   1a706:	f011 f809 	bl	2b71c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a70a:	b348      	cbz	r0, 1a760 <update_ccc+0x98>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a70c:	222a      	movs	r2, #42	; 0x2a
   1a70e:	4621      	mov	r1, r4
   1a710:	4638      	mov	r0, r7
   1a712:	f012 fa49 	bl	2cba8 <bt_gatt_check_perm>
		if (err) {
   1a716:	b150      	cbz	r0, 1a72e <update_ccc+0x66>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a718:	2803      	cmp	r0, #3
   1a71a:	d013      	beq.n	1a744 <update_ccc+0x7c>
			if (err == BT_ATT_ERR_AUTHENTICATION) {
   1a71c:	2805      	cmp	r0, #5
   1a71e:	d017      	beq.n	1a750 <update_ccc+0x88>
			sec = BT_SECURITY_L2;
   1a720:	f04f 0902 	mov.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1a724:	4638      	mov	r0, r7
   1a726:	f010 ffde 	bl	2b6e6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a72a:	4581      	cmp	r9, r0
   1a72c:	d813      	bhi.n	1a756 <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
   1a72e:	4641      	mov	r1, r8
   1a730:	4620      	mov	r0, r4
   1a732:	f011 ff71 	bl	2c618 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a736:	4b0c      	ldr	r3, [pc, #48]	; (1a768 <update_ccc+0xa0>)
   1a738:	4598      	cmp	r8, r3
   1a73a:	d1cd      	bne.n	1a6d8 <update_ccc+0x10>
			sc_restore(conn);
   1a73c:	4638      	mov	r0, r7
   1a73e:	f7ff fe0f 	bl	1a360 <sc_restore>
   1a742:	e7c9      	b.n	1a6d8 <update_ccc+0x10>
				BT_WARN("CCC %p not writable", attr);
   1a744:	4622      	mov	r2, r4
   1a746:	2157      	movs	r1, #87	; 0x57
   1a748:	4808      	ldr	r0, [pc, #32]	; (1a76c <update_ccc+0xa4>)
   1a74a:	f00e f99b 	bl	28a84 <z_log_minimal_printk>
				continue;
   1a74e:	e007      	b.n	1a760 <update_ccc+0x98>
				sec = BT_SECURITY_L3;
   1a750:	f04f 0903 	mov.w	r9, #3
   1a754:	e7e6      	b.n	1a724 <update_ccc+0x5c>
				if (data->sec < sec) {
   1a756:	792b      	ldrb	r3, [r5, #4]
   1a758:	4599      	cmp	r9, r3
   1a75a:	d901      	bls.n	1a760 <update_ccc+0x98>
					data->sec = sec;
   1a75c:	f885 9004 	strb.w	r9, [r5, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a760:	3601      	adds	r6, #1
   1a762:	e7c0      	b.n	1a6e6 <update_ccc+0x1e>
   1a764:	0001949d 	.word	0x0001949d
   1a768:	20000668 	.word	0x20000668
   1a76c:	00031e88 	.word	0x00031e88

0001a770 <bt_gatt_connected>:
{
   1a770:	b570      	push	{r4, r5, r6, lr}
   1a772:	b090      	sub	sp, #64	; 0x40
   1a774:	4604      	mov	r4, r0
	data.conn = conn;
   1a776:	900e      	str	r0, [sp, #56]	; 0x38
	data.sec = BT_SECURITY_L1;
   1a778:	2301      	movs	r3, #1
   1a77a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a77e:	f100 0590 	add.w	r5, r0, #144	; 0x90
   1a782:	4629      	mov	r1, r5
   1a784:	7a00      	ldrb	r0, [r0, #8]
   1a786:	f010 fb77 	bl	2ae78 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a78a:	b190      	cbz	r0, 1a7b2 <bt_gatt_connected+0x42>
		if (conn->id) {
   1a78c:	7a22      	ldrb	r2, [r4, #8]
   1a78e:	b32a      	cbz	r2, 1a7dc <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a790:	ae04      	add	r6, sp, #16
   1a792:	2104      	movs	r1, #4
   1a794:	4630      	mov	r0, r6
   1a796:	f7f5 fd93 	bl	102c0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a79a:	9600      	str	r6, [sp, #0]
   1a79c:	462b      	mov	r3, r5
   1a79e:	4a19      	ldr	r2, [pc, #100]	; (1a804 <bt_gatt_connected+0x94>)
   1a7a0:	2124      	movs	r1, #36	; 0x24
   1a7a2:	a805      	add	r0, sp, #20
   1a7a4:	f7f9 fec8 	bl	14538 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1a7a8:	aa05      	add	r2, sp, #20
   1a7aa:	4917      	ldr	r1, [pc, #92]	; (1a808 <bt_gatt_connected+0x98>)
   1a7ac:	4610      	mov	r0, r2
   1a7ae:	f7f7 fbbd 	bl	11f2c <settings_load_subtree_direct>
   1a7b2:	ab0e      	add	r3, sp, #56	; 0x38
   1a7b4:	9302      	str	r3, [sp, #8]
   1a7b6:	4b15      	ldr	r3, [pc, #84]	; (1a80c <bt_gatt_connected+0x9c>)
   1a7b8:	9301      	str	r3, [sp, #4]
   1a7ba:	2200      	movs	r2, #0
   1a7bc:	9200      	str	r2, [sp, #0]
   1a7be:	4613      	mov	r3, r2
   1a7c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a7c4:	2001      	movs	r0, #1
   1a7c6:	f7ff fadd 	bl	19d84 <bt_gatt_foreach_attr_type>
	    bt_conn_get_security(conn) < data.sec) {
   1a7ca:	4620      	mov	r0, r4
   1a7cc:	f010 ff8b 	bl	2b6e6 <bt_conn_get_security>
   1a7d0:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a7d4:	4288      	cmp	r0, r1
   1a7d6:	d30a      	bcc.n	1a7ee <bt_gatt_connected+0x7e>
}
   1a7d8:	b010      	add	sp, #64	; 0x40
   1a7da:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a7dc:	2300      	movs	r3, #0
   1a7de:	9300      	str	r3, [sp, #0]
   1a7e0:	462b      	mov	r3, r5
   1a7e2:	4a08      	ldr	r2, [pc, #32]	; (1a804 <bt_gatt_connected+0x94>)
   1a7e4:	2124      	movs	r1, #36	; 0x24
   1a7e6:	a805      	add	r0, sp, #20
   1a7e8:	f7f9 fea6 	bl	14538 <bt_settings_encode_key>
   1a7ec:	e7dc      	b.n	1a7a8 <bt_gatt_connected+0x38>
		int err = bt_conn_set_security(conn, data.sec);
   1a7ee:	4620      	mov	r0, r4
   1a7f0:	f010 ff41 	bl	2b676 <bt_conn_set_security>
		if (err) {
   1a7f4:	4602      	mov	r2, r0
   1a7f6:	2800      	cmp	r0, #0
   1a7f8:	d0ee      	beq.n	1a7d8 <bt_gatt_connected+0x68>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1a7fa:	2157      	movs	r1, #87	; 0x57
   1a7fc:	4804      	ldr	r0, [pc, #16]	; (1a810 <bt_gatt_connected+0xa0>)
   1a7fe:	f00e f941 	bl	28a84 <z_log_minimal_printk>
}
   1a802:	e7e9      	b.n	1a7d8 <bt_gatt_connected+0x68>
   1a804:	00031de8 	.word	0x00031de8
   1a808:	0001a051 	.word	0x0001a051
   1a80c:	0001a6c9 	.word	0x0001a6c9
   1a810:	00031ea4 	.word	0x00031ea4

0001a814 <bt_gatt_att_max_mtu_changed>:
{
   1a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a816:	4605      	mov	r5, r0
   1a818:	460e      	mov	r6, r1
   1a81a:	4617      	mov	r7, r2
	return list->head;
   1a81c:	4b0a      	ldr	r3, [pc, #40]	; (1a848 <bt_gatt_att_max_mtu_changed+0x34>)
   1a81e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a820:	b134      	cbz	r4, 1a830 <bt_gatt_att_max_mtu_changed+0x1c>
   1a822:	3c04      	subs	r4, #4
   1a824:	e004      	b.n	1a830 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a826:	1d23      	adds	r3, r4, #4
   1a828:	d00b      	beq.n	1a842 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   1a82a:	6864      	ldr	r4, [r4, #4]
   1a82c:	b15c      	cbz	r4, 1a846 <bt_gatt_att_max_mtu_changed+0x32>
   1a82e:	3c04      	subs	r4, #4
   1a830:	b14c      	cbz	r4, 1a846 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   1a832:	6823      	ldr	r3, [r4, #0]
   1a834:	2b00      	cmp	r3, #0
   1a836:	d0f6      	beq.n	1a826 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   1a838:	463a      	mov	r2, r7
   1a83a:	4631      	mov	r1, r6
   1a83c:	4628      	mov	r0, r5
   1a83e:	4798      	blx	r3
   1a840:	e7f1      	b.n	1a826 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a842:	461c      	mov	r4, r3
   1a844:	e7f4      	b.n	1a830 <bt_gatt_att_max_mtu_changed+0x1c>
}
   1a846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a848:	2000280c 	.word	0x2000280c

0001a84c <bt_gatt_encrypt_change>:
{
   1a84c:	b500      	push	{lr}
   1a84e:	b087      	sub	sp, #28
	data.conn = conn;
   1a850:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1a852:	2001      	movs	r0, #1
   1a854:	f88d 0014 	strb.w	r0, [sp, #20]
   1a858:	ab04      	add	r3, sp, #16
   1a85a:	9302      	str	r3, [sp, #8]
   1a85c:	4b05      	ldr	r3, [pc, #20]	; (1a874 <bt_gatt_encrypt_change+0x28>)
   1a85e:	9301      	str	r3, [sp, #4]
   1a860:	2200      	movs	r2, #0
   1a862:	9200      	str	r2, [sp, #0]
   1a864:	4613      	mov	r3, r2
   1a866:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a86a:	f7ff fa8b 	bl	19d84 <bt_gatt_foreach_attr_type>
}
   1a86e:	b007      	add	sp, #28
   1a870:	f85d fb04 	ldr.w	pc, [sp], #4
   1a874:	0001a6c9 	.word	0x0001a6c9

0001a878 <db_hash_read>:
{
   1a878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a87a:	b085      	sub	sp, #20
   1a87c:	4604      	mov	r4, r0
   1a87e:	460d      	mov	r5, r1
   1a880:	4616      	mov	r6, r2
   1a882:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a884:	4812      	ldr	r0, [pc, #72]	; (1a8d0 <db_hash_read+0x58>)
   1a886:	f100 0150 	add.w	r1, r0, #80	; 0x50
   1a88a:	3020      	adds	r0, #32
   1a88c:	f008 fd78 	bl	23380 <k_work_cancel_delayable_sync>
   1a890:	f3bf 8f5b 	dmb	ish
   1a894:	4b0f      	ldr	r3, [pc, #60]	; (1a8d4 <db_hash_read+0x5c>)
   1a896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a898:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a89c:	f013 0f04 	tst.w	r3, #4
   1a8a0:	d012      	beq.n	1a8c8 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   1a8a2:	2101      	movs	r1, #1
   1a8a4:	4620      	mov	r0, r4
   1a8a6:	f012 f9b0 	bl	2cc0a <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a8aa:	2310      	movs	r3, #16
   1a8ac:	9302      	str	r3, [sp, #8]
   1a8ae:	4b08      	ldr	r3, [pc, #32]	; (1a8d0 <db_hash_read+0x58>)
   1a8b0:	9301      	str	r3, [sp, #4]
   1a8b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a8b6:	9300      	str	r3, [sp, #0]
   1a8b8:	463b      	mov	r3, r7
   1a8ba:	4632      	mov	r2, r6
   1a8bc:	4629      	mov	r1, r5
   1a8be:	4620      	mov	r0, r4
   1a8c0:	f012 f868 	bl	2c994 <bt_gatt_attr_read>
}
   1a8c4:	b005      	add	sp, #20
   1a8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   1a8c8:	2001      	movs	r0, #1
   1a8ca:	f7ff fab9 	bl	19e40 <db_hash_gen>
   1a8ce:	e7e8      	b.n	1a8a2 <db_hash_read+0x2a>
   1a8d0:	200019b0 	.word	0x200019b0
   1a8d4:	20001a28 	.word	0x20001a28

0001a8d8 <bt_gatt_store_ccc>:
{
   1a8d8:	b570      	push	{r4, r5, r6, lr}
   1a8da:	b0c2      	sub	sp, #264	; 0x108
   1a8dc:	4604      	mov	r4, r0
   1a8de:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1a8e0:	910f      	str	r1, [sp, #60]	; 0x3c
	save.addr_with_id.id = id;
   1a8e2:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	save.count = 0;
   1a8e6:	2200      	movs	r2, #0
   1a8e8:	9241      	str	r2, [sp, #260]	; 0x104
   1a8ea:	ab0f      	add	r3, sp, #60	; 0x3c
   1a8ec:	9302      	str	r3, [sp, #8]
   1a8ee:	4b1e      	ldr	r3, [pc, #120]	; (1a968 <bt_gatt_store_ccc+0x90>)
   1a8f0:	9301      	str	r3, [sp, #4]
   1a8f2:	9200      	str	r2, [sp, #0]
   1a8f4:	4613      	mov	r3, r2
   1a8f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a8fa:	2001      	movs	r0, #1
   1a8fc:	f7ff fa42 	bl	19d84 <bt_gatt_foreach_attr_type>
	if (id) {
   1a900:	b18c      	cbz	r4, 1a926 <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1a902:	ae05      	add	r6, sp, #20
   1a904:	4622      	mov	r2, r4
   1a906:	2104      	movs	r1, #4
   1a908:	4630      	mov	r0, r6
   1a90a:	f7f5 fcd9 	bl	102c0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1a90e:	9600      	str	r6, [sp, #0]
   1a910:	462b      	mov	r3, r5
   1a912:	4a16      	ldr	r2, [pc, #88]	; (1a96c <bt_gatt_store_ccc+0x94>)
   1a914:	2124      	movs	r1, #36	; 0x24
   1a916:	a806      	add	r0, sp, #24
   1a918:	f7f9 fe0e 	bl	14538 <bt_settings_encode_key>
	if (save.count) {
   1a91c:	9c41      	ldr	r4, [sp, #260]	; 0x104
   1a91e:	b15c      	cbz	r4, 1a938 <bt_gatt_store_ccc+0x60>
		len = save.count * sizeof(*save.store);
   1a920:	00a4      	lsls	r4, r4, #2
		str = (char *)save.store;
   1a922:	a911      	add	r1, sp, #68	; 0x44
   1a924:	e009      	b.n	1a93a <bt_gatt_store_ccc+0x62>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1a926:	2300      	movs	r3, #0
   1a928:	9300      	str	r3, [sp, #0]
   1a92a:	462b      	mov	r3, r5
   1a92c:	4a0f      	ldr	r2, [pc, #60]	; (1a96c <bt_gatt_store_ccc+0x94>)
   1a92e:	2124      	movs	r1, #36	; 0x24
   1a930:	a806      	add	r0, sp, #24
   1a932:	f7f9 fe01 	bl	14538 <bt_settings_encode_key>
   1a936:	e7f1      	b.n	1a91c <bt_gatt_store_ccc+0x44>
		str = NULL;
   1a938:	2100      	movs	r1, #0
	err = settings_save_one(key, str, len);
   1a93a:	4622      	mov	r2, r4
   1a93c:	a806      	add	r0, sp, #24
   1a93e:	f7f7 fa8f 	bl	11e60 <settings_save_one>
	if (err) {
   1a942:	4605      	mov	r5, r0
   1a944:	b918      	cbnz	r0, 1a94e <bt_gatt_store_ccc+0x76>
	if (len) {
   1a946:	b96c      	cbnz	r4, 1a964 <bt_gatt_store_ccc+0x8c>
}
   1a948:	4628      	mov	r0, r5
   1a94a:	b042      	add	sp, #264	; 0x108
   1a94c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to store CCCs (err %d)", err);
   1a94e:	4602      	mov	r2, r0
   1a950:	2145      	movs	r1, #69	; 0x45
   1a952:	4807      	ldr	r0, [pc, #28]	; (1a970 <bt_gatt_store_ccc+0x98>)
   1a954:	f00e f896 	bl	28a84 <z_log_minimal_printk>
		return err;
   1a958:	e7f6      	b.n	1a948 <bt_gatt_store_ccc+0x70>
		for (size_t i = 0; i < save.count; i++) {
   1a95a:	3301      	adds	r3, #1
   1a95c:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1a95e:	429a      	cmp	r2, r3
   1a960:	d8fb      	bhi.n	1a95a <bt_gatt_store_ccc+0x82>
   1a962:	e7f1      	b.n	1a948 <bt_gatt_store_ccc+0x70>
   1a964:	2300      	movs	r3, #0
   1a966:	e7f9      	b.n	1a95c <bt_gatt_store_ccc+0x84>
   1a968:	00019395 	.word	0x00019395
   1a96c:	00031de8 	.word	0x00031de8
   1a970:	00031ed8 	.word	0x00031ed8

0001a974 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1a974:	b530      	push	{r4, r5, lr}
   1a976:	b087      	sub	sp, #28
   1a978:	4604      	mov	r4, r0
   1a97a:	9002      	str	r0, [sp, #8]
   1a97c:	4b19      	ldr	r3, [pc, #100]	; (1a9e4 <bt_gatt_disconnected+0x70>)
   1a97e:	9301      	str	r3, [sp, #4]
   1a980:	2200      	movs	r2, #0
   1a982:	9200      	str	r2, [sp, #0]
   1a984:	4613      	mov	r3, r2
   1a986:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a98a:	2001      	movs	r0, #1
   1a98c:	f7ff f9fa 	bl	19d84 <bt_gatt_foreach_attr_type>
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a990:	f104 0590 	add.w	r5, r4, #144	; 0x90
   1a994:	4629      	mov	r1, r5
   1a996:	7a20      	ldrb	r0, [r4, #8]
   1a998:	f010 fa6e 	bl	2ae78 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1a99c:	b948      	cbnz	r0, 1a9b2 <bt_gatt_disconnected+0x3e>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a99e:	4629      	mov	r1, r5
   1a9a0:	7a20      	ldrb	r0, [r4, #8]
   1a9a2:	f010 fa69 	bl	2ae78 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a9a6:	b960      	cbnz	r0, 1a9c2 <bt_gatt_disconnected+0x4e>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1a9a8:	4620      	mov	r0, r4
   1a9aa:	f011 ffcf 	bl	2c94c <remove_cf_cfg>
#endif
}
   1a9ae:	b007      	add	sp, #28
   1a9b0:	bd30      	pop	{r4, r5, pc}
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1a9b2:	4629      	mov	r1, r5
   1a9b4:	7a20      	ldrb	r0, [r4, #8]
   1a9b6:	f7ff ff8f 	bl	1a8d8 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   1a9ba:	4620      	mov	r0, r4
   1a9bc:	f7fe fe82 	bl	196c4 <bt_gatt_store_cf>
   1a9c0:	e7ed      	b.n	1a99e <bt_gatt_disconnected+0x2a>
		struct addr_with_id addr_with_id = {
   1a9c2:	9504      	str	r5, [sp, #16]
			.id = conn->id,
   1a9c4:	7a23      	ldrb	r3, [r4, #8]
		struct addr_with_id addr_with_id = {
   1a9c6:	f88d 3014 	strb.w	r3, [sp, #20]
   1a9ca:	ab04      	add	r3, sp, #16
   1a9cc:	9302      	str	r3, [sp, #8]
   1a9ce:	4b06      	ldr	r3, [pc, #24]	; (1a9e8 <bt_gatt_disconnected+0x74>)
   1a9d0:	9301      	str	r3, [sp, #4]
   1a9d2:	2200      	movs	r2, #0
   1a9d4:	9200      	str	r2, [sp, #0]
   1a9d6:	4613      	mov	r3, r2
   1a9d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a9dc:	2001      	movs	r0, #1
   1a9de:	f7ff f9d1 	bl	19d84 <bt_gatt_foreach_attr_type>
   1a9e2:	e7e1      	b.n	1a9a8 <bt_gatt_disconnected+0x34>
   1a9e4:	000199e5 	.word	0x000199e5
   1a9e8:	000197e5 	.word	0x000197e5

0001a9ec <le_sc_supported>:
	 */
	if (IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		return false;
	}

	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a9ec:	4b04      	ldr	r3, [pc, #16]	; (1aa00 <le_sc_supported+0x14>)
   1a9ee:	f893 009a 	ldrb.w	r0, [r3, #154]	; 0x9a
   1a9f2:	f000 0006 	and.w	r0, r0, #6
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}
   1a9f6:	2806      	cmp	r0, #6
   1a9f8:	bf14      	ite	ne
   1a9fa:	2000      	movne	r0, #0
   1a9fc:	2001      	moveq	r0, #1
   1a9fe:	4770      	bx	lr
   1aa00:	200002a8 	.word	0x200002a8

0001aa04 <get_io_capa>:

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1aa04:	4b11      	ldr	r3, [pc, #68]	; (1aa4c <get_io_capa+0x48>)
   1aa06:	681b      	ldr	r3, [r3, #0]
   1aa08:	b1bb      	cbz	r3, 1aa3a <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1aa0a:	681a      	ldr	r2, [r3, #0]
   1aa0c:	b132      	cbz	r2, 1aa1c <get_io_capa+0x18>
   1aa0e:	6859      	ldr	r1, [r3, #4]
   1aa10:	b121      	cbz	r1, 1aa1c <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1aa12:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1aa14:	b999      	cbnz	r1, 1aa3e <get_io_capa+0x3a>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1aa16:	490e      	ldr	r1, [pc, #56]	; (1aa50 <get_io_capa+0x4c>)
   1aa18:	7809      	ldrb	r1, [r1, #0]
   1aa1a:	b191      	cbz	r1, 1aa42 <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1aa1c:	490c      	ldr	r1, [pc, #48]	; (1aa50 <get_io_capa+0x4c>)
   1aa1e:	7809      	ldrb	r1, [r1, #0]
   1aa20:	b121      	cbz	r1, 1aa2c <get_io_capa+0x28>
   1aa22:	b11a      	cbz	r2, 1aa2c <get_io_capa+0x28>
	    bt_auth->passkey_confirm) {
   1aa24:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
   1aa26:	b109      	cbz	r1, 1aa2c <get_io_capa+0x28>
		return BT_SMP_IO_DISPLAY_YESNO;
   1aa28:	2001      	movs	r0, #1
   1aa2a:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
   1aa2c:	685b      	ldr	r3, [r3, #4]
   1aa2e:	b953      	cbnz	r3, 1aa46 <get_io_capa+0x42>
		} else {
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
   1aa30:	b10a      	cbz	r2, 1aa36 <get_io_capa+0x32>
		return BT_SMP_IO_DISPLAY_ONLY;
   1aa32:	2000      	movs	r0, #0
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}
}
   1aa34:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1aa36:	2003      	movs	r0, #3
   1aa38:	4770      	bx	lr
   1aa3a:	2003      	movs	r0, #3
   1aa3c:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1aa3e:	2004      	movs	r0, #4
   1aa40:	4770      	bx	lr
   1aa42:	2004      	movs	r0, #4
   1aa44:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1aa46:	2002      	movs	r0, #2
   1aa48:	4770      	bx	lr
   1aa4a:	bf00      	nop
   1aa4c:	200027b8 	.word	0x200027b8
   1aa50:	20003f75 	.word	0x20003f75

0001aa54 <legacy_get_pair_method>:
static uint8_t legacy_get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	uint8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1aa54:	2904      	cmp	r1, #4
   1aa56:	d820      	bhi.n	1aa9a <legacy_get_pair_method+0x46>
{
   1aa58:	b538      	push	{r3, r4, r5, lr}
   1aa5a:	4604      	mov	r4, r0
   1aa5c:	460d      	mov	r5, r1

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if both sides have OOB data use OOB */
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1aa5e:	7ac3      	ldrb	r3, [r0, #11]
   1aa60:	7c82      	ldrb	r2, [r0, #18]
   1aa62:	4013      	ands	r3, r2
   1aa64:	f013 0f01 	tst.w	r3, #1
   1aa68:	d119      	bne.n	1aa9e <legacy_get_pair_method+0x4a>
		return LEGACY_OOB;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1aa6a:	7b00      	ldrb	r0, [r0, #12]
   1aa6c:	7ce3      	ldrb	r3, [r4, #19]
   1aa6e:	4318      	orrs	r0, r3
   1aa70:	f010 0004 	ands.w	r0, r0, #4
   1aa74:	d008      	beq.n	1aa88 <legacy_get_pair_method+0x34>
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
   1aa76:	f7ff ffc5 	bl	1aa04 <get_io_capa>
   1aa7a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1aa7e:	4909      	ldr	r1, [pc, #36]	; (1aaa4 <legacy_get_pair_method+0x50>)
   1aa80:	440d      	add	r5, r1
   1aa82:	5c28      	ldrb	r0, [r5, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
   1aa84:	2804      	cmp	r0, #4
   1aa86:	d000      	beq.n	1aa8a <legacy_get_pair_method+0x36>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
   1aa88:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1aa8a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1aa8e:	78db      	ldrb	r3, [r3, #3]
   1aa90:	b10b      	cbz	r3, 1aa96 <legacy_get_pair_method+0x42>
			method = PASSKEY_INPUT;
   1aa92:	2001      	movs	r0, #1
   1aa94:	e7f8      	b.n	1aa88 <legacy_get_pair_method+0x34>
			method = PASSKEY_DISPLAY;
   1aa96:	2002      	movs	r0, #2
   1aa98:	e7f6      	b.n	1aa88 <legacy_get_pair_method+0x34>
		return JUST_WORKS;
   1aa9a:	2000      	movs	r0, #0
}
   1aa9c:	4770      	bx	lr
		return LEGACY_OOB;
   1aa9e:	2006      	movs	r0, #6
   1aaa0:	e7f2      	b.n	1aa88 <legacy_get_pair_method+0x34>
   1aaa2:	bf00      	nop
   1aaa4:	0003241c 	.word	0x0003241c

0001aaa8 <get_auth>:
{
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
   1aaa8:	b510      	push	{r4, lr}
	if (sc_supported) {
   1aaaa:	4b0d      	ldr	r3, [pc, #52]	; (1aae0 <get_auth+0x38>)
   1aaac:	781b      	ldrb	r3, [r3, #0]
   1aaae:	b16b      	cbz	r3, 1aacc <get_auth+0x24>
		auth &= BT_SMP_AUTH_MASK_SC;
   1aab0:	f001 040f 	and.w	r4, r1, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1aab4:	f7ff ffa6 	bl	1aa04 <get_io_capa>
   1aab8:	2803      	cmp	r0, #3
   1aaba:	d00a      	beq.n	1aad2 <get_auth+0x2a>
	    (!IS_ENABLED(CONFIG_BT_SMP_ENFORCE_MITM) &&
	    (conn->required_sec_level < BT_SECURITY_L3))) {
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
   1aabc:	f044 0004 	orr.w	r0, r4, #4
	}

	if (bondable) {
   1aac0:	4b08      	ldr	r3, [pc, #32]	; (1aae4 <get_auth+0x3c>)
   1aac2:	781b      	ldrb	r3, [r3, #0]
   1aac4:	b143      	cbz	r3, 1aad8 <get_auth+0x30>
		auth |= BT_SMP_AUTH_BONDING;
   1aac6:	f040 0001 	orr.w	r0, r0, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
   1aaca:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1aacc:	f001 0407 	and.w	r4, r1, #7
   1aad0:	e7f0      	b.n	1aab4 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
   1aad2:	f004 000b 	and.w	r0, r4, #11
   1aad6:	e7f3      	b.n	1aac0 <get_auth+0x18>
		auth &= ~BT_SMP_AUTH_BONDING;
   1aad8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   1aadc:	e7f5      	b.n	1aaca <get_auth+0x22>
   1aade:	bf00      	nop
   1aae0:	20003f75 	.word	0x20003f75
   1aae4:	20000734 	.word	0x20000734

0001aae8 <sec_level_reachable>:
		return BT_SMP_ERR_UNSPECIFIED;
	}
}

static bool sec_level_reachable(struct bt_conn *conn)
{
   1aae8:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   1aaea:	7a83      	ldrb	r3, [r0, #10]
   1aaec:	2b03      	cmp	r3, #3
   1aaee:	d015      	beq.n	1ab1c <sec_level_reachable+0x34>
   1aaf0:	d807      	bhi.n	1ab02 <sec_level_reachable+0x1a>
   1aaf2:	3b01      	subs	r3, #1
   1aaf4:	b2db      	uxtb	r3, r3
   1aaf6:	2b01      	cmp	r3, #1
   1aaf8:	d801      	bhi.n	1aafe <sec_level_reachable+0x16>
   1aafa:	2001      	movs	r0, #1
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
	default:
		return false;
	}
}
   1aafc:	bd08      	pop	{r3, pc}
		return false;
   1aafe:	2000      	movs	r0, #0
   1ab00:	e7fc      	b.n	1aafc <sec_level_reachable+0x14>
	switch (conn->required_sec_level) {
   1ab02:	2b04      	cmp	r3, #4
   1ab04:	d108      	bne.n	1ab18 <sec_level_reachable+0x30>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1ab06:	f7ff ff7d 	bl	1aa04 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1ab0a:	2803      	cmp	r0, #3
   1ab0c:	d017      	beq.n	1ab3e <sec_level_reachable+0x56>
   1ab0e:	4b12      	ldr	r3, [pc, #72]	; (1ab58 <sec_level_reachable+0x70>)
   1ab10:	781b      	ldrb	r3, [r3, #0]
   1ab12:	b9f3      	cbnz	r3, 1ab52 <sec_level_reachable+0x6a>
   1ab14:	2000      	movs	r0, #0
   1ab16:	e7f1      	b.n	1aafc <sec_level_reachable+0x14>
		return false;
   1ab18:	2000      	movs	r0, #0
   1ab1a:	e7ef      	b.n	1aafc <sec_level_reachable+0x14>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1ab1c:	f7ff ff72 	bl	1aa04 <get_io_capa>
   1ab20:	2803      	cmp	r0, #3
   1ab22:	d001      	beq.n	1ab28 <sec_level_reachable+0x40>
   1ab24:	2001      	movs	r0, #1
   1ab26:	e7e9      	b.n	1aafc <sec_level_reachable+0x14>
		       (bt_auth && bt_auth->oob_data_request);
   1ab28:	4b0c      	ldr	r3, [pc, #48]	; (1ab5c <sec_level_reachable+0x74>)
   1ab2a:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1ab2c:	b12b      	cbz	r3, 1ab3a <sec_level_reachable+0x52>
		       (bt_auth && bt_auth->oob_data_request);
   1ab2e:	68db      	ldr	r3, [r3, #12]
   1ab30:	b10b      	cbz	r3, 1ab36 <sec_level_reachable+0x4e>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1ab32:	2001      	movs	r0, #1
   1ab34:	e7e2      	b.n	1aafc <sec_level_reachable+0x14>
   1ab36:	2000      	movs	r0, #0
   1ab38:	e7e0      	b.n	1aafc <sec_level_reachable+0x14>
   1ab3a:	2000      	movs	r0, #0
   1ab3c:	e7de      	b.n	1aafc <sec_level_reachable+0x14>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1ab3e:	4b07      	ldr	r3, [pc, #28]	; (1ab5c <sec_level_reachable+0x74>)
   1ab40:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1ab42:	b123      	cbz	r3, 1ab4e <sec_level_reachable+0x66>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1ab44:	68db      	ldr	r3, [r3, #12]
   1ab46:	2b00      	cmp	r3, #0
   1ab48:	d1e1      	bne.n	1ab0e <sec_level_reachable+0x26>
   1ab4a:	2000      	movs	r0, #0
   1ab4c:	e7d6      	b.n	1aafc <sec_level_reachable+0x14>
   1ab4e:	2000      	movs	r0, #0
   1ab50:	e7d4      	b.n	1aafc <sec_level_reachable+0x14>
   1ab52:	2001      	movs	r0, #1
   1ab54:	e7d2      	b.n	1aafc <sec_level_reachable+0x14>
   1ab56:	bf00      	nop
   1ab58:	20003f75 	.word	0x20003f75
   1ab5c:	200027b8 	.word	0x200027b8

0001ab60 <smp_chan_get>:

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   1ab60:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1ab62:	2106      	movs	r1, #6
   1ab64:	f010 ff24 	bl	2b9b0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ab68:	4604      	mov	r4, r0
   1ab6a:	b118      	cbz	r0, 1ab74 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
   1ab6c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
}
   1ab70:	4620      	mov	r0, r4
   1ab72:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to find SMP channel");
   1ab74:	2145      	movs	r1, #69	; 0x45
   1ab76:	4802      	ldr	r0, [pc, #8]	; (1ab80 <smp_chan_get+0x20>)
   1ab78:	f00d ff84 	bl	28a84 <z_log_minimal_printk>
		return NULL;
   1ab7c:	e7f8      	b.n	1ab70 <smp_chan_get+0x10>
   1ab7e:	bf00      	nop
   1ab80:	00032040 	.word	0x00032040

0001ab84 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1ab84:	b510      	push	{r4, lr}
   1ab86:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ab88:	2300      	movs	r3, #0
   1ab8a:	2b00      	cmp	r3, #0
   1ab8c:	dd06      	ble.n	1ab9c <bt_smp_accept+0x18>
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1ab8e:	2145      	movs	r1, #69	; 0x45
   1ab90:	480f      	ldr	r0, [pc, #60]	; (1abd0 <bt_smp_accept+0x4c>)
   1ab92:	f00d ff77 	bl	28a84 <z_log_minimal_printk>

	return -ENOMEM;
   1ab96:	f06f 000b 	mvn.w	r0, #11
}
   1ab9a:	bd10      	pop	{r4, pc}
		if (smp->chan.chan.conn) {
   1ab9c:	eb03 1043 	add.w	r0, r3, r3, lsl #5
   1aba0:	4c0c      	ldr	r4, [pc, #48]	; (1abd4 <bt_smp_accept+0x50>)
   1aba2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   1aba6:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   1abaa:	b108      	cbz	r0, 1abb0 <bt_smp_accept+0x2c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1abac:	3301      	adds	r3, #1
   1abae:	e7ec      	b.n	1ab8a <bt_smp_accept+0x6>
		smp->chan.chan.ops = &ops;
   1abb0:	4a08      	ldr	r2, [pc, #32]	; (1abd4 <bt_smp_accept+0x50>)
   1abb2:	eb03 1043 	add.w	r0, r3, r3, lsl #5
   1abb6:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   1abba:	4c07      	ldr	r4, [pc, #28]	; (1abd8 <bt_smp_accept+0x54>)
   1abbc:	f8c0 40f4 	str.w	r4, [r0, #244]	; 0xf4
		*chan = &smp->chan.chan;
   1abc0:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   1abc4:	011b      	lsls	r3, r3, #4
   1abc6:	33f0      	adds	r3, #240	; 0xf0
   1abc8:	4413      	add	r3, r2
   1abca:	600b      	str	r3, [r1, #0]
		return 0;
   1abcc:	2000      	movs	r0, #0
   1abce:	e7e4      	b.n	1ab9a <bt_smp_accept+0x16>
   1abd0:	00032060 	.word	0x00032060
   1abd4:	20001a80 	.word	0x20001a80
   1abd8:	000324cc 	.word	0x000324cc

0001abdc <smp_find>:
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1abdc:	2300      	movs	r3, #0
   1abde:	2b00      	cmp	r3, #0
   1abe0:	dd01      	ble.n	1abe6 <smp_find+0xa>
	return NULL;
   1abe2:	2000      	movs	r0, #0
}
   1abe4:	4770      	bx	lr
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1abe6:	eb03 1243 	add.w	r2, r3, r3, lsl #5
   1abea:	490c      	ldr	r1, [pc, #48]	; (1ac1c <smp_find+0x40>)
   1abec:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1abf0:	3204      	adds	r2, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1abf2:	0941      	lsrs	r1, r0, #5
   1abf4:	f3bf 8f5b 	dmb	ish
   1abf8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1abfc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ac00:	f000 011f 	and.w	r1, r0, #31
   1ac04:	410a      	asrs	r2, r1
   1ac06:	f012 0f01 	tst.w	r2, #1
   1ac0a:	d101      	bne.n	1ac10 <smp_find+0x34>
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ac0c:	3301      	adds	r3, #1
   1ac0e:	e7e6      	b.n	1abde <smp_find+0x2>
			return &bt_smp_pool[i];
   1ac10:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   1ac14:	4801      	ldr	r0, [pc, #4]	; (1ac1c <smp_find+0x40>)
   1ac16:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   1ac1a:	4770      	bx	lr
   1ac1c:	20001a80 	.word	0x20001a80

0001ac20 <get_pair_method>:
{
   1ac20:	b510      	push	{r4, lr}
   1ac22:	460c      	mov	r4, r1
   1ac24:	f3bf 8f5b 	dmb	ish
   1ac28:	6843      	ldr	r3, [r0, #4]
   1ac2a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ac2e:	f013 0f20 	tst.w	r3, #32
   1ac32:	d01b      	beq.n	1ac6c <get_pair_method+0x4c>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1ac34:	7b03      	ldrb	r3, [r0, #12]
   1ac36:	7cc2      	ldrb	r2, [r0, #19]
   1ac38:	ea03 0102 	and.w	r1, r3, r2
   1ac3c:	f011 0f08 	tst.w	r1, #8
   1ac40:	d005      	beq.n	1ac4e <get_pair_method+0x2e>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1ac42:	7ac1      	ldrb	r1, [r0, #11]
   1ac44:	7c80      	ldrb	r0, [r0, #18]
   1ac46:	4301      	orrs	r1, r0
   1ac48:	f011 0f01 	tst.w	r1, #1
   1ac4c:	d111      	bne.n	1ac72 <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1ac4e:	2c04      	cmp	r4, #4
   1ac50:	d811      	bhi.n	1ac76 <get_pair_method+0x56>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1ac52:	ea43 0002 	orr.w	r0, r3, r2
   1ac56:	f010 0004 	ands.w	r0, r0, #4
   1ac5a:	d009      	beq.n	1ac70 <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
   1ac5c:	f7ff fed2 	bl	1aa04 <get_io_capa>
   1ac60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1ac64:	4905      	ldr	r1, [pc, #20]	; (1ac7c <get_pair_method+0x5c>)
   1ac66:	440c      	add	r4, r1
   1ac68:	5c20      	ldrb	r0, [r4, r0]
   1ac6a:	e001      	b.n	1ac70 <get_pair_method+0x50>
		return legacy_get_pair_method(smp, remote_io);
   1ac6c:	f7ff fef2 	bl	1aa54 <legacy_get_pair_method>
}
   1ac70:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
   1ac72:	2005      	movs	r0, #5
   1ac74:	e7fc      	b.n	1ac70 <get_pair_method+0x50>
		return JUST_WORKS;
   1ac76:	2000      	movs	r0, #0
   1ac78:	e7fa      	b.n	1ac70 <get_pair_method+0x50>
   1ac7a:	bf00      	nop
   1ac7c:	00032438 	.word	0x00032438

0001ac80 <legacy_pairing_random>:
{
   1ac80:	b570      	push	{r4, r5, r6, lr}
   1ac82:	b088      	sub	sp, #32
   1ac84:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ac86:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1ac8a:	f100 0547 	add.w	r5, r0, #71	; 0x47
   1ac8e:	f100 0637 	add.w	r6, r0, #55	; 0x37
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1ac92:	f103 0297 	add.w	r2, r3, #151	; 0x97
   1ac96:	339e      	adds	r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1ac98:	a904      	add	r1, sp, #16
   1ac9a:	9102      	str	r1, [sp, #8]
   1ac9c:	9301      	str	r3, [sp, #4]
   1ac9e:	9200      	str	r2, [sp, #0]
   1aca0:	f100 0310 	add.w	r3, r0, #16
   1aca4:	f100 0209 	add.w	r2, r0, #9
   1aca8:	4631      	mov	r1, r6
   1acaa:	4628      	mov	r0, r5
   1acac:	f012 f956 	bl	2cf5c <smp_c1>
	if (err) {
   1acb0:	bb68      	cbnz	r0, 1ad0e <legacy_pairing_random+0x8e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1acb2:	2210      	movs	r2, #16
   1acb4:	eb0d 0102 	add.w	r1, sp, r2
   1acb8:	f104 0017 	add.w	r0, r4, #23
   1acbc:	f00f fdc2 	bl	2a844 <memcmp>
   1acc0:	bb38      	cbnz	r0, 1ad12 <legacy_pairing_random+0x92>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
   1acc2:	ab04      	add	r3, sp, #16
   1acc4:	4632      	mov	r2, r6
   1acc6:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1acca:	4628      	mov	r0, r5
   1accc:	f012 f990 	bl	2cff0 <smp_s1>
		if (err) {
   1acd0:	b9b8      	cbnz	r0, 1ad02 <legacy_pairing_random+0x82>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1acd2:	2210      	movs	r2, #16
   1acd4:	eb0d 0102 	add.w	r1, sp, r2
   1acd8:	4628      	mov	r0, r5
   1acda:	f00f fde0 	bl	2a89e <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1acde:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ace0:	f3bf 8f5b 	dmb	ish
   1ace4:	e853 2f00 	ldrex	r2, [r3]
   1ace8:	f042 0202 	orr.w	r2, r2, #2
   1acec:	e843 2100 	strex	r1, r2, [r3]
   1acf0:	2900      	cmp	r1, #0
   1acf2:	d1f7      	bne.n	1ace4 <legacy_pairing_random+0x64>
   1acf4:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
   1acf8:	4620      	mov	r0, r4
   1acfa:	f012 fa52 	bl	2d1a2 <smp_send_pairing_random>
}
   1acfe:	b008      	add	sp, #32
   1ad00:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Calculate STK failed");
   1ad02:	2145      	movs	r1, #69	; 0x45
   1ad04:	4804      	ldr	r0, [pc, #16]	; (1ad18 <legacy_pairing_random+0x98>)
   1ad06:	f00d febd 	bl	28a84 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1ad0a:	2008      	movs	r0, #8
   1ad0c:	e7f7      	b.n	1acfe <legacy_pairing_random+0x7e>
		return BT_SMP_ERR_UNSPECIFIED;
   1ad0e:	2008      	movs	r0, #8
   1ad10:	e7f5      	b.n	1acfe <legacy_pairing_random+0x7e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1ad12:	2004      	movs	r0, #4
   1ad14:	e7f3      	b.n	1acfe <legacy_pairing_random+0x7e>
   1ad16:	bf00      	nop
   1ad18:	0003208c 	.word	0x0003208c

0001ad1c <sc_send_public_key>:
{
   1ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad1e:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1ad20:	2240      	movs	r2, #64	; 0x40
   1ad22:	210c      	movs	r1, #12
   1ad24:	f012 f978 	bl	2d018 <smp_create_pdu>
	if (!req_buf) {
   1ad28:	b1c0      	cbz	r0, 1ad5c <sc_send_public_key+0x40>
   1ad2a:	4606      	mov	r6, r0
   1ad2c:	2140      	movs	r1, #64	; 0x40
   1ad2e:	3008      	adds	r0, #8
   1ad30:	f002 faea 	bl	1d308 <net_buf_simple_add>
   1ad34:	4605      	mov	r5, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1ad36:	4f0a      	ldr	r7, [pc, #40]	; (1ad60 <sc_send_public_key+0x44>)
   1ad38:	2220      	movs	r2, #32
   1ad3a:	6839      	ldr	r1, [r7, #0]
   1ad3c:	f00f fdaf 	bl	2a89e <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1ad40:	6839      	ldr	r1, [r7, #0]
   1ad42:	2220      	movs	r2, #32
   1ad44:	4411      	add	r1, r2
   1ad46:	18a8      	adds	r0, r5, r2
   1ad48:	f00f fda9 	bl	2a89e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1ad4c:	2300      	movs	r3, #0
   1ad4e:	461a      	mov	r2, r3
   1ad50:	4631      	mov	r1, r6
   1ad52:	4620      	mov	r0, r4
   1ad54:	f012 f98b 	bl	2d06e <smp_send>
	return 0;
   1ad58:	2000      	movs	r0, #0
}
   1ad5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ad5c:	2008      	movs	r0, #8
   1ad5e:	e7fc      	b.n	1ad5a <sc_send_public_key+0x3e>
   1ad60:	2000286c 	.word	0x2000286c

0001ad64 <display_passkey>:
{
   1ad64:	b510      	push	{r4, lr}
   1ad66:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ad68:	2104      	movs	r1, #4
   1ad6a:	30d8      	adds	r0, #216	; 0xd8
   1ad6c:	f005 fb46 	bl	203fc <bt_rand>
   1ad70:	bb48      	cbnz	r0, 1adc6 <display_passkey+0x62>
		smp->passkey %= 1000000;
   1ad72:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   1ad76:	4b15      	ldr	r3, [pc, #84]	; (1adcc <display_passkey+0x68>)
   1ad78:	fba3 1302 	umull	r1, r3, r3, r2
   1ad7c:	0c9b      	lsrs	r3, r3, #18
   1ad7e:	4914      	ldr	r1, [pc, #80]	; (1add0 <display_passkey+0x6c>)
   1ad80:	fb01 2313 	mls	r3, r1, r3, r2
   1ad84:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1ad88:	2300      	movs	r3, #0
   1ad8a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1ad8e:	4b11      	ldr	r3, [pc, #68]	; (1add4 <display_passkey+0x70>)
   1ad90:	681b      	ldr	r3, [r3, #0]
   1ad92:	b1b3      	cbz	r3, 1adc2 <display_passkey+0x5e>
   1ad94:	681b      	ldr	r3, [r3, #0]
   1ad96:	b1a3      	cbz	r3, 1adc2 <display_passkey+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ad98:	1d23      	adds	r3, r4, #4
   1ad9a:	f3bf 8f5b 	dmb	ish
   1ad9e:	e853 2f00 	ldrex	r2, [r3]
   1ada2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1ada6:	e843 2100 	strex	r1, r2, [r3]
   1adaa:	2900      	cmp	r1, #0
   1adac:	d1f7      	bne.n	1ad9e <display_passkey+0x3a>
   1adae:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1adb2:	4b08      	ldr	r3, [pc, #32]	; (1add4 <display_passkey+0x70>)
   1adb4:	681b      	ldr	r3, [r3, #0]
   1adb6:	681b      	ldr	r3, [r3, #0]
   1adb8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1adbc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1adc0:	4798      	blx	r3
	return 0;
   1adc2:	2000      	movs	r0, #0
}
   1adc4:	bd10      	pop	{r4, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1adc6:	2008      	movs	r0, #8
   1adc8:	e7fc      	b.n	1adc4 <display_passkey+0x60>
   1adca:	bf00      	nop
   1adcc:	431bde83 	.word	0x431bde83
   1add0:	000f4240 	.word	0x000f4240
   1add4:	200027b8 	.word	0x200027b8

0001add8 <smp_init>:
{
   1add8:	b538      	push	{r3, r4, r5, lr}
   1adda:	4604      	mov	r4, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1addc:	22f0      	movs	r2, #240	; 0xf0
   1adde:	2100      	movs	r1, #0
   1ade0:	f00f fd81 	bl	2a8e6 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1ade4:	2110      	movs	r1, #16
   1ade6:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1adea:	f005 fb07 	bl	203fc <bt_rand>
   1adee:	b990      	cbnz	r0, 1ae16 <smp_init+0x3e>
   1adf0:	4605      	mov	r5, r0
   1adf2:	f3bf 8f5b 	dmb	ish
   1adf6:	e854 3f00 	ldrex	r3, [r4]
   1adfa:	f043 0320 	orr.w	r3, r3, #32
   1adfe:	e844 3200 	strex	r2, r3, [r4]
   1ae02:	2a00      	cmp	r2, #0
   1ae04:	d1f7      	bne.n	1adf6 <smp_init+0x1e>
   1ae06:	f3bf 8f5b 	dmb	ish
	sc_public_key = bt_pub_key_get();
   1ae0a:	f7fc f907 	bl	1701c <bt_pub_key_get>
   1ae0e:	4b03      	ldr	r3, [pc, #12]	; (1ae1c <smp_init+0x44>)
   1ae10:	6018      	str	r0, [r3, #0]
}
   1ae12:	4628      	mov	r0, r5
   1ae14:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ae16:	2508      	movs	r5, #8
   1ae18:	e7fb      	b.n	1ae12 <smp_init+0x3a>
   1ae1a:	bf00      	nop
   1ae1c:	2000286c 	.word	0x2000286c

0001ae20 <legacy_distribute_keys>:
{
   1ae20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae22:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = smp->chan.chan.conn;
   1ae24:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
   1ae28:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1ae2c:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1ae30:	f013 0f01 	tst.w	r3, #1
   1ae34:	d101      	bne.n	1ae3a <legacy_distribute_keys+0x1a>
}
   1ae36:	b009      	add	sp, #36	; 0x24
   1ae38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae3a:	4604      	mov	r4, r0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ae3c:	211a      	movs	r1, #26
   1ae3e:	a801      	add	r0, sp, #4
   1ae40:	f005 fadc 	bl	203fc <bt_rand>
   1ae44:	2800      	cmp	r0, #0
   1ae46:	d155      	bne.n	1aef4 <legacy_distribute_keys+0xd4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1ae48:	2210      	movs	r2, #16
   1ae4a:	2106      	movs	r1, #6
   1ae4c:	4620      	mov	r0, r4
   1ae4e:	f012 f8e3 	bl	2d018 <smp_create_pdu>
		if (!buf) {
   1ae52:	4607      	mov	r7, r0
   1ae54:	2800      	cmp	r0, #0
   1ae56:	d052      	beq.n	1aefe <legacy_distribute_keys+0xde>
   1ae58:	2110      	movs	r1, #16
   1ae5a:	3008      	adds	r0, #8
   1ae5c:	f002 fa54 	bl	1d308 <net_buf_simple_add>
   1ae60:	4606      	mov	r6, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
   1ae62:	7b2a      	ldrb	r2, [r5, #12]
   1ae64:	a901      	add	r1, sp, #4
   1ae66:	f00f fd1a 	bl	2a89e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1ae6a:	7b28      	ldrb	r0, [r5, #12]
   1ae6c:	280f      	cmp	r0, #15
   1ae6e:	d94b      	bls.n	1af08 <legacy_distribute_keys+0xe8>
		smp_send(smp, buf, NULL, NULL);
   1ae70:	2300      	movs	r3, #0
   1ae72:	461a      	mov	r2, r3
   1ae74:	4639      	mov	r1, r7
   1ae76:	4620      	mov	r0, r4
   1ae78:	f012 f8f9 	bl	2d06e <smp_send>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1ae7c:	220a      	movs	r2, #10
   1ae7e:	2107      	movs	r1, #7
   1ae80:	4620      	mov	r0, r4
   1ae82:	f012 f8c9 	bl	2d018 <smp_create_pdu>
		if (!buf) {
   1ae86:	4607      	mov	r7, r0
   1ae88:	2800      	cmp	r0, #0
   1ae8a:	d044      	beq.n	1af16 <legacy_distribute_keys+0xf6>
   1ae8c:	210a      	movs	r1, #10
   1ae8e:	3008      	adds	r0, #8
   1ae90:	f002 fa3a 	bl	1d308 <net_buf_simple_add>
   1ae94:	4606      	mov	r6, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1ae96:	2208      	movs	r2, #8
   1ae98:	a905      	add	r1, sp, #20
   1ae9a:	3002      	adds	r0, #2
   1ae9c:	f00f fcff 	bl	2a89e <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1aea0:	2202      	movs	r2, #2
   1aea2:	a907      	add	r1, sp, #28
   1aea4:	4630      	mov	r0, r6
   1aea6:	f00f fcfa 	bl	2a89e <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1aeaa:	2300      	movs	r3, #0
   1aeac:	4a1c      	ldr	r2, [pc, #112]	; (1af20 <legacy_distribute_keys+0x100>)
   1aeae:	4639      	mov	r1, r7
   1aeb0:	4620      	mov	r0, r4
   1aeb2:	f012 f8dc 	bl	2d06e <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aeb6:	f3bf 8f5b 	dmb	ish
   1aeba:	6863      	ldr	r3, [r4, #4]
   1aebc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1aec0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1aec4:	d0b7      	beq.n	1ae36 <legacy_distribute_keys+0x16>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1aec6:	2101      	movs	r1, #1
   1aec8:	4628      	mov	r0, r5
   1aeca:	f012 fd8f 	bl	2d9ec <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1aece:	2210      	movs	r2, #16
   1aed0:	a901      	add	r1, sp, #4
   1aed2:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   1aed6:	f00f fce2 	bl	2a89e <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1aeda:	2208      	movs	r2, #8
   1aedc:	a905      	add	r1, sp, #20
   1aede:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1aee2:	f00f fcdc 	bl	2a89e <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1aee6:	2202      	movs	r2, #2
   1aee8:	a907      	add	r1, sp, #28
   1aeea:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1aeee:	f00f fcd6 	bl	2a89e <memcpy>
   1aef2:	e7a0      	b.n	1ae36 <legacy_distribute_keys+0x16>
			BT_ERR("Unable to get random bytes");
   1aef4:	2145      	movs	r1, #69	; 0x45
   1aef6:	480b      	ldr	r0, [pc, #44]	; (1af24 <legacy_distribute_keys+0x104>)
   1aef8:	f00d fdc4 	bl	28a84 <z_log_minimal_printk>
			return;
   1aefc:	e79b      	b.n	1ae36 <legacy_distribute_keys+0x16>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1aefe:	2145      	movs	r1, #69	; 0x45
   1af00:	4809      	ldr	r0, [pc, #36]	; (1af28 <legacy_distribute_keys+0x108>)
   1af02:	f00d fdbf 	bl	28a84 <z_log_minimal_printk>
			return;
   1af06:	e796      	b.n	1ae36 <legacy_distribute_keys+0x16>
			(void)memset(info->ltk + keys->enc_size, 0,
   1af08:	f1c0 0210 	rsb	r2, r0, #16
   1af0c:	2100      	movs	r1, #0
   1af0e:	4430      	add	r0, r6
   1af10:	f00f fce9 	bl	2a8e6 <memset>
   1af14:	e7ac      	b.n	1ae70 <legacy_distribute_keys+0x50>
			BT_ERR("Unable to allocate Central Ident buffer");
   1af16:	2145      	movs	r1, #69	; 0x45
   1af18:	4804      	ldr	r0, [pc, #16]	; (1af2c <legacy_distribute_keys+0x10c>)
   1af1a:	f00d fdb3 	bl	28a84 <z_log_minimal_printk>
			return;
   1af1e:	e78a      	b.n	1ae36 <legacy_distribute_keys+0x16>
   1af20:	0002d965 	.word	0x0002d965
   1af24:	000320a8 	.word	0x000320a8
   1af28:	000320c8 	.word	0x000320c8
   1af2c:	000320f4 	.word	0x000320f4

0001af30 <bt_smp_distribute_keys>:
{
   1af30:	b508      	push	{r3, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1af32:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
   1af36:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
	if (!keys) {
   1af3a:	b14a      	cbz	r2, 1af50 <bt_smp_distribute_keys+0x20>
   1af3c:	f3bf 8f5b 	dmb	ish
   1af40:	6843      	ldr	r3, [r0, #4]
   1af42:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1af46:	f013 0f20 	tst.w	r3, #32
   1af4a:	d00c      	beq.n	1af66 <bt_smp_distribute_keys+0x36>
	return 0;
   1af4c:	2000      	movs	r0, #0
}
   1af4e:	bd08      	pop	{r3, pc}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1af50:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1af54:	f7f8 ff7e 	bl	13e54 <bt_addr_le_str_real>
   1af58:	4602      	mov	r2, r0
   1af5a:	2145      	movs	r1, #69	; 0x45
   1af5c:	4804      	ldr	r0, [pc, #16]	; (1af70 <bt_smp_distribute_keys+0x40>)
   1af5e:	f00d fd91 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1af62:	2008      	movs	r0, #8
   1af64:	e7f3      	b.n	1af4e <bt_smp_distribute_keys+0x1e>
		legacy_distribute_keys(smp);
   1af66:	f7ff ff5b 	bl	1ae20 <legacy_distribute_keys>
	return 0;
   1af6a:	2000      	movs	r0, #0
   1af6c:	e7ef      	b.n	1af4e <bt_smp_distribute_keys+0x1e>
   1af6e:	bf00      	nop
   1af70:	00032124 	.word	0x00032124

0001af74 <smp_dhkey_generate>:
{
   1af74:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1af76:	1d04      	adds	r4, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1af78:	f3bf 8f5b 	dmb	ish
   1af7c:	e854 3f00 	ldrex	r3, [r4]
   1af80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1af84:	e844 3200 	strex	r2, r3, [r4]
   1af88:	2a00      	cmp	r2, #0
   1af8a:	d1f7      	bne.n	1af7c <smp_dhkey_generate+0x8>
   1af8c:	f3bf 8f5b 	dmb	ish
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1af90:	490c      	ldr	r1, [pc, #48]	; (1afc4 <smp_dhkey_generate+0x50>)
   1af92:	3057      	adds	r0, #87	; 0x57
   1af94:	f7fc f854 	bl	17040 <bt_dh_key_gen>
	if (err) {
   1af98:	b908      	cbnz	r0, 1af9e <smp_dhkey_generate+0x2a>
	return 0;
   1af9a:	2000      	movs	r0, #0
}
   1af9c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1af9e:	f3bf 8f5b 	dmb	ish
   1afa2:	e854 3f00 	ldrex	r3, [r4]
   1afa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1afaa:	e844 3200 	strex	r2, r3, [r4]
   1afae:	2a00      	cmp	r2, #0
   1afb0:	d1f7      	bne.n	1afa2 <smp_dhkey_generate+0x2e>
   1afb2:	f3bf 8f5b 	dmb	ish
		BT_ERR("Failed to generate DHKey");
   1afb6:	2145      	movs	r1, #69	; 0x45
   1afb8:	4803      	ldr	r0, [pc, #12]	; (1afc8 <smp_dhkey_generate+0x54>)
   1afba:	f00d fd63 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1afbe:	2008      	movs	r0, #8
   1afc0:	e7ec      	b.n	1af9c <smp_dhkey_generate+0x28>
   1afc2:	bf00      	nop
   1afc4:	0002d775 	.word	0x0002d775
   1afc8:	00032140 	.word	0x00032140

0001afcc <legacy_request_tk>:
{
   1afcc:	b530      	push	{r4, r5, lr}
   1afce:	b083      	sub	sp, #12
   1afd0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1afd2:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1afd6:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1afda:	7a28      	ldrb	r0, [r5, #8]
   1afdc:	f001 fdfc 	bl	1cbd8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1afe0:	b128      	cbz	r0, 1afee <legacy_request_tk+0x22>
   1afe2:	7b43      	ldrb	r3, [r0, #13]
   1afe4:	f013 0f01 	tst.w	r3, #1
   1afe8:	d001      	beq.n	1afee <legacy_request_tk+0x22>
	    smp->method == JUST_WORKS) {
   1afea:	7a23      	ldrb	r3, [r4, #8]
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1afec:	b143      	cbz	r3, 1b000 <legacy_request_tk+0x34>
	switch (smp->method) {
   1afee:	7a20      	ldrb	r0, [r4, #8]
   1aff0:	2806      	cmp	r0, #6
   1aff2:	d877      	bhi.n	1b0e4 <legacy_request_tk+0x118>
   1aff4:	e8df f000 	tbb	[pc, r0]
   1aff8:	762a6174 	.word	0x762a6174
   1affc:	7676      	.short	0x7676
   1affe:	0a          	.byte	0x0a
   1afff:	00          	.byte	0x00
		BT_ERR("JustWorks failed, authenticated keys present");
   1b000:	2145      	movs	r1, #69	; 0x45
   1b002:	483f      	ldr	r0, [pc, #252]	; (1b100 <legacy_request_tk+0x134>)
   1b004:	f00d fd3e 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b008:	2008      	movs	r0, #8
   1b00a:	e069      	b.n	1b0e0 <legacy_request_tk+0x114>
		if (bt_auth && bt_auth->oob_data_request) {
   1b00c:	4b3d      	ldr	r3, [pc, #244]	; (1b104 <legacy_request_tk+0x138>)
   1b00e:	681b      	ldr	r3, [r3, #0]
   1b010:	2b00      	cmp	r3, #0
   1b012:	d06e      	beq.n	1b0f2 <legacy_request_tk+0x126>
   1b014:	68db      	ldr	r3, [r3, #12]
   1b016:	2b00      	cmp	r3, #0
   1b018:	d06d      	beq.n	1b0f6 <legacy_request_tk+0x12a>
			struct bt_conn_oob_info info = {
   1b01a:	2500      	movs	r5, #0
   1b01c:	f8ad 5000 	strh.w	r5, [sp]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b020:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b022:	f3bf 8f5b 	dmb	ish
   1b026:	e853 2f00 	ldrex	r2, [r3]
   1b02a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1b02e:	e843 2100 	strex	r1, r2, [r3]
   1b032:	2900      	cmp	r1, #0
   1b034:	d1f7      	bne.n	1b026 <legacy_request_tk+0x5a>
   1b036:	f3bf 8f5b 	dmb	ish
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1b03a:	4b32      	ldr	r3, [pc, #200]	; (1b104 <legacy_request_tk+0x138>)
   1b03c:	681b      	ldr	r3, [r3, #0]
   1b03e:	68db      	ldr	r3, [r3, #12]
   1b040:	4669      	mov	r1, sp
   1b042:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1b046:	4798      	blx	r3
	return 0;
   1b048:	4628      	mov	r0, r5
		break;
   1b04a:	e049      	b.n	1b0e0 <legacy_request_tk+0x114>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1b04c:	2104      	movs	r1, #4
   1b04e:	eb0d 0001 	add.w	r0, sp, r1
   1b052:	f005 f9d3 	bl	203fc <bt_rand>
   1b056:	2800      	cmp	r0, #0
   1b058:	d14f      	bne.n	1b0fa <legacy_request_tk+0x12e>
			passkey %= 1000000;
   1b05a:	9a01      	ldr	r2, [sp, #4]
   1b05c:	4b2a      	ldr	r3, [pc, #168]	; (1b108 <legacy_request_tk+0x13c>)
   1b05e:	fba3 1302 	umull	r1, r3, r3, r2
   1b062:	0c9b      	lsrs	r3, r3, #18
   1b064:	4929      	ldr	r1, [pc, #164]	; (1b10c <legacy_request_tk+0x140>)
   1b066:	fb01 2313 	mls	r3, r1, r3, r2
   1b06a:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1b06c:	4b25      	ldr	r3, [pc, #148]	; (1b104 <legacy_request_tk+0x138>)
   1b06e:	681b      	ldr	r3, [r3, #0]
   1b070:	b1a3      	cbz	r3, 1b09c <legacy_request_tk+0xd0>
   1b072:	681b      	ldr	r3, [r3, #0]
   1b074:	b193      	cbz	r3, 1b09c <legacy_request_tk+0xd0>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b076:	1d23      	adds	r3, r4, #4
   1b078:	f3bf 8f5b 	dmb	ish
   1b07c:	e853 2f00 	ldrex	r2, [r3]
   1b080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1b084:	e843 2100 	strex	r1, r2, [r3]
   1b088:	2900      	cmp	r1, #0
   1b08a:	d1f7      	bne.n	1b07c <legacy_request_tk+0xb0>
   1b08c:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_display(conn, passkey);
   1b090:	4b1c      	ldr	r3, [pc, #112]	; (1b104 <legacy_request_tk+0x138>)
   1b092:	681b      	ldr	r3, [r3, #0]
   1b094:	681b      	ldr	r3, [r3, #0]
   1b096:	9901      	ldr	r1, [sp, #4]
   1b098:	4628      	mov	r0, r5
   1b09a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1b09c:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1b09e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1b0a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1b0a6:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	sys_put_le16(val >> 16, &dst[2]);
   1b0aa:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1b0ac:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1b0b0:	0e1b      	lsrs	r3, r3, #24
   1b0b2:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return 0;
   1b0b6:	2000      	movs	r0, #0
}
   1b0b8:	e012      	b.n	1b0e0 <legacy_request_tk+0x114>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b0ba:	3404      	adds	r4, #4
   1b0bc:	f3bf 8f5b 	dmb	ish
   1b0c0:	e854 3f00 	ldrex	r3, [r4]
   1b0c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b0c8:	e844 3200 	strex	r2, r3, [r4]
   1b0cc:	2a00      	cmp	r2, #0
   1b0ce:	d1f7      	bne.n	1b0c0 <legacy_request_tk+0xf4>
   1b0d0:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
   1b0d4:	4b0b      	ldr	r3, [pc, #44]	; (1b104 <legacy_request_tk+0x138>)
   1b0d6:	681b      	ldr	r3, [r3, #0]
   1b0d8:	685b      	ldr	r3, [r3, #4]
   1b0da:	4628      	mov	r0, r5
   1b0dc:	4798      	blx	r3
	return 0;
   1b0de:	2000      	movs	r0, #0
}
   1b0e0:	b003      	add	sp, #12
   1b0e2:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b0e4:	4602      	mov	r2, r0
   1b0e6:	2145      	movs	r1, #69	; 0x45
   1b0e8:	4809      	ldr	r0, [pc, #36]	; (1b110 <legacy_request_tk+0x144>)
   1b0ea:	f00d fccb 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b0ee:	2008      	movs	r0, #8
   1b0f0:	e7f6      	b.n	1b0e0 <legacy_request_tk+0x114>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b0f2:	2002      	movs	r0, #2
   1b0f4:	e7f4      	b.n	1b0e0 <legacy_request_tk+0x114>
   1b0f6:	2002      	movs	r0, #2
   1b0f8:	e7f2      	b.n	1b0e0 <legacy_request_tk+0x114>
				return BT_SMP_ERR_UNSPECIFIED;
   1b0fa:	2008      	movs	r0, #8
   1b0fc:	e7f0      	b.n	1b0e0 <legacy_request_tk+0x114>
   1b0fe:	bf00      	nop
   1b100:	00032160 	.word	0x00032160
   1b104:	200027b8 	.word	0x200027b8
   1b108:	431bde83 	.word	0x431bde83
   1b10c:	000f4240 	.word	0x000f4240
   1b110:	00032194 	.word	0x00032194

0001b114 <legacy_pairing_req>:
{
   1b114:	b538      	push	{r3, r4, r5, lr}
   1b116:	4604      	mov	r4, r0
	ret = legacy_request_tk(smp);
   1b118:	f7ff ff58 	bl	1afcc <legacy_request_tk>
	if (ret) {
   1b11c:	4605      	mov	r5, r0
   1b11e:	bb58      	cbnz	r0, 1b178 <legacy_pairing_req+0x64>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b120:	7a25      	ldrb	r5, [r4, #8]
   1b122:	b96d      	cbnz	r5, 1b140 <legacy_pairing_req+0x2c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b124:	1d22      	adds	r2, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b126:	f3bf 8f5b 	dmb	ish
   1b12a:	6863      	ldr	r3, [r4, #4]
   1b12c:	f3bf 8f5b 	dmb	ish
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b130:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1b134:	d104      	bne.n	1b140 <legacy_pairing_req+0x2c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b136:	4b1b      	ldr	r3, [pc, #108]	; (1b1a4 <legacy_pairing_req+0x90>)
   1b138:	681b      	ldr	r3, [r3, #0]
   1b13a:	b10b      	cbz	r3, 1b140 <legacy_pairing_req+0x2c>
	    bt_auth && bt_auth->pairing_confirm) {
   1b13c:	695b      	ldr	r3, [r3, #20]
   1b13e:	b9eb      	cbnz	r3, 1b17c <legacy_pairing_req+0x68>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b140:	f3bf 8f5b 	dmb	ish
   1b144:	e854 3f00 	ldrex	r3, [r4]
   1b148:	f043 0308 	orr.w	r3, r3, #8
   1b14c:	e844 3200 	strex	r2, r3, [r4]
   1b150:	2a00      	cmp	r2, #0
   1b152:	d1f7      	bne.n	1b144 <legacy_pairing_req+0x30>
   1b154:	f3bf 8f5b 	dmb	ish
   1b158:	f3bf 8f5b 	dmb	ish
   1b15c:	e854 3f00 	ldrex	r3, [r4]
   1b160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b164:	e844 3200 	strex	r2, r3, [r4]
   1b168:	2a00      	cmp	r2, #0
   1b16a:	d1f7      	bne.n	1b15c <legacy_pairing_req+0x48>
   1b16c:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
   1b170:	4620      	mov	r0, r4
   1b172:	f012 f831 	bl	2d1d8 <send_pairing_rsp>
   1b176:	4605      	mov	r5, r0
}
   1b178:	4628      	mov	r0, r5
   1b17a:	bd38      	pop	{r3, r4, r5, pc}
   1b17c:	f3bf 8f5b 	dmb	ish
   1b180:	e852 3f00 	ldrex	r3, [r2]
   1b184:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b188:	e842 3100 	strex	r1, r3, [r2]
   1b18c:	2900      	cmp	r1, #0
   1b18e:	d1f7      	bne.n	1b180 <legacy_pairing_req+0x6c>
   1b190:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1b194:	4b03      	ldr	r3, [pc, #12]	; (1b1a4 <legacy_pairing_req+0x90>)
   1b196:	681b      	ldr	r3, [r3, #0]
   1b198:	695b      	ldr	r3, [r3, #20]
   1b19a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1b19e:	4798      	blx	r3
		return 0;
   1b1a0:	e7ea      	b.n	1b178 <legacy_pairing_req+0x64>
   1b1a2:	bf00      	nop
   1b1a4:	200027b8 	.word	0x200027b8

0001b1a8 <smp_pairing_req>:
{
   1b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1b1ac:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	struct bt_smp_pairing *req = (void *)buf->data;
   1b1b0:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1b1b2:	78eb      	ldrb	r3, [r5, #3]
   1b1b4:	3b07      	subs	r3, #7
   1b1b6:	b2db      	uxtb	r3, r3
   1b1b8:	2b09      	cmp	r3, #9
   1b1ba:	f200 80e9 	bhi.w	1b390 <smp_pairing_req+0x1e8>
   1b1be:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   1b1c0:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1b1c4:	2b00      	cmp	r3, #0
   1b1c6:	f000 80be 	beq.w	1b346 <smp_pairing_req+0x19e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1b1ca:	f104 0804 	add.w	r8, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b1ce:	f3bf 8f5b 	dmb	ish
   1b1d2:	6863      	ldr	r3, [r4, #4]
   1b1d4:	f3bf 8f5b 	dmb	ish
   1b1d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1b1dc:	d105      	bne.n	1b1ea <smp_pairing_req+0x42>
		int ret = smp_init(smp);
   1b1de:	4620      	mov	r0, r4
   1b1e0:	f7ff fdfa 	bl	1add8 <smp_init>
		if (ret) {
   1b1e4:	2800      	cmp	r0, #0
   1b1e6:	f040 80ba 	bne.w	1b35e <smp_pairing_req+0x1b6>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1b1ea:	2301      	movs	r3, #1
   1b1ec:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1b1ee:	2206      	movs	r2, #6
   1b1f0:	4629      	mov	r1, r5
   1b1f2:	f104 000a 	add.w	r0, r4, #10
   1b1f6:	f00f fb52 	bl	2a89e <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1b1fa:	2302      	movs	r3, #2
   1b1fc:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1b1fe:	78a9      	ldrb	r1, [r5, #2]
   1b200:	4630      	mov	r0, r6
   1b202:	f7ff fc51 	bl	1aaa8 <get_auth>
   1b206:	4607      	mov	r7, r0
   1b208:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa();
   1b20a:	f7ff fbfb 	bl	1aa04 <get_io_capa>
   1b20e:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1b210:	4b61      	ldr	r3, [pc, #388]	; (1b398 <smp_pairing_req+0x1f0>)
   1b212:	781b      	ldrb	r3, [r3, #0]
   1b214:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1b216:	2310      	movs	r3, #16
   1b218:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1b21a:	792b      	ldrb	r3, [r5, #4]
   1b21c:	f003 0303 	and.w	r3, r3, #3
   1b220:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1b222:	796b      	ldrb	r3, [r5, #5]
   1b224:	f003 0301 	and.w	r3, r3, #1
   1b228:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1b22a:	f017 0f08 	tst.w	r7, #8
   1b22e:	d015      	beq.n	1b25c <smp_pairing_req+0xb4>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
   1b230:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1b232:	f013 0f08 	tst.w	r3, #8
   1b236:	d011      	beq.n	1b25c <smp_pairing_req+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b238:	f3bf 8f5b 	dmb	ish
   1b23c:	e858 3f00 	ldrex	r3, [r8]
   1b240:	f043 0320 	orr.w	r3, r3, #32
   1b244:	e848 3200 	strex	r2, r3, [r8]
   1b248:	2a00      	cmp	r2, #0
   1b24a:	d1f7      	bne.n	1b23c <smp_pairing_req+0x94>
   1b24c:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
   1b250:	7d63      	ldrb	r3, [r4, #21]
   1b252:	f003 0302 	and.w	r3, r3, #2
   1b256:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1b258:	2300      	movs	r3, #0
   1b25a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1b25c:	7ce3      	ldrb	r3, [r4, #19]
   1b25e:	f013 0f20 	tst.w	r3, #32
   1b262:	d00f      	beq.n	1b284 <smp_pairing_req+0xdc>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
   1b264:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1b266:	f013 0f20 	tst.w	r3, #32
   1b26a:	d00b      	beq.n	1b284 <smp_pairing_req+0xdc>
   1b26c:	f3bf 8f5b 	dmb	ish
   1b270:	e858 3f00 	ldrex	r3, [r8]
   1b274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b278:	e848 3200 	strex	r2, r3, [r8]
   1b27c:	2a00      	cmp	r2, #0
   1b27e:	d1f7      	bne.n	1b270 <smp_pairing_req+0xc8>
   1b280:	f3bf 8f5b 	dmb	ish
	smp->local_dist = rsp->resp_key_dist;
   1b284:	7da3      	ldrb	r3, [r4, #22]
   1b286:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1b28a:	7d63      	ldrb	r3, [r4, #21]
   1b28c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1b290:	7ce3      	ldrb	r3, [r4, #19]
   1b292:	f013 0f01 	tst.w	r3, #1
   1b296:	d00f      	beq.n	1b2b8 <smp_pairing_req+0x110>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
   1b298:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1b29a:	f013 0f01 	tst.w	r3, #1
   1b29e:	d00b      	beq.n	1b2b8 <smp_pairing_req+0x110>
   1b2a0:	f3bf 8f5b 	dmb	ish
   1b2a4:	e858 3f00 	ldrex	r3, [r8]
   1b2a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1b2ac:	e848 3200 	strex	r2, r3, [r8]
   1b2b0:	2a00      	cmp	r2, #0
   1b2b2:	d1f7      	bne.n	1b2a4 <smp_pairing_req+0xfc>
   1b2b4:	f3bf 8f5b 	dmb	ish
   1b2b8:	f3bf 8f5b 	dmb	ish
   1b2bc:	e858 3f00 	ldrex	r3, [r8]
   1b2c0:	f043 0308 	orr.w	r3, r3, #8
   1b2c4:	e848 3200 	strex	r2, r3, [r8]
   1b2c8:	2a00      	cmp	r2, #0
   1b2ca:	d1f7      	bne.n	1b2bc <smp_pairing_req+0x114>
   1b2cc:	f3bf 8f5b 	dmb	ish
	smp->method = get_pair_method(smp, req->io_capability);
   1b2d0:	7829      	ldrb	r1, [r5, #0]
   1b2d2:	4620      	mov	r0, r4
   1b2d4:	f7ff fca4 	bl	1ac20 <get_pair_method>
   1b2d8:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1b2da:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1b2de:	4620      	mov	r0, r4
   1b2e0:	f011 fdb7 	bl	2ce52 <update_keys_check>
   1b2e4:	2800      	cmp	r0, #0
   1b2e6:	d055      	beq.n	1b394 <smp_pairing_req+0x1ec>
	err = remote_sec_level_reachable(smp);
   1b2e8:	4620      	mov	r0, r4
   1b2ea:	f011 fde3 	bl	2ceb4 <remote_sec_level_reachable>
	if (err) {
   1b2ee:	4605      	mov	r5, r0
   1b2f0:	bb30      	cbnz	r0, 1b340 <smp_pairing_req+0x198>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b2f2:	f3bf 8f5b 	dmb	ish
   1b2f6:	6863      	ldr	r3, [r4, #4]
   1b2f8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b2fc:	f013 0f20 	tst.w	r3, #32
   1b300:	d02f      	beq.n	1b362 <smp_pairing_req+0x1ba>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b302:	7a25      	ldrb	r5, [r4, #8]
   1b304:	b965      	cbnz	r5, 1b320 <smp_pairing_req+0x178>
   1b306:	f3bf 8f5b 	dmb	ish
   1b30a:	6863      	ldr	r3, [r4, #4]
   1b30c:	f3bf 8f5b 	dmb	ish
   1b310:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1b314:	d104      	bne.n	1b320 <smp_pairing_req+0x178>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b316:	4b21      	ldr	r3, [pc, #132]	; (1b39c <smp_pairing_req+0x1f4>)
   1b318:	681b      	ldr	r3, [r3, #0]
   1b31a:	b10b      	cbz	r3, 1b320 <smp_pairing_req+0x178>
	    bt_auth && bt_auth->pairing_confirm) {
   1b31c:	695b      	ldr	r3, [r3, #20]
   1b31e:	bb2b      	cbnz	r3, 1b36c <smp_pairing_req+0x1c4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b320:	f3bf 8f5b 	dmb	ish
   1b324:	e854 3f00 	ldrex	r3, [r4]
   1b328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b32c:	e844 3200 	strex	r2, r3, [r4]
   1b330:	2a00      	cmp	r2, #0
   1b332:	d1f7      	bne.n	1b324 <smp_pairing_req+0x17c>
   1b334:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
   1b338:	4620      	mov	r0, r4
   1b33a:	f011 ff4d 	bl	2d1d8 <send_pairing_rsp>
   1b33e:	4605      	mov	r5, r0
}
   1b340:	4628      	mov	r0, r5
   1b342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b346:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1b34a:	7a30      	ldrb	r0, [r6, #8]
   1b34c:	f001 fb46 	bl	1c9dc <bt_keys_get_addr>
   1b350:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   1b354:	2800      	cmp	r0, #0
   1b356:	f47f af38 	bne.w	1b1ca <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
   1b35a:	2508      	movs	r5, #8
   1b35c:	e7f0      	b.n	1b340 <smp_pairing_req+0x198>
			return ret;
   1b35e:	b2c5      	uxtb	r5, r0
   1b360:	e7ee      	b.n	1b340 <smp_pairing_req+0x198>
		return legacy_pairing_req(smp);
   1b362:	4620      	mov	r0, r4
   1b364:	f7ff fed6 	bl	1b114 <legacy_pairing_req>
   1b368:	4605      	mov	r5, r0
   1b36a:	e7e9      	b.n	1b340 <smp_pairing_req+0x198>
   1b36c:	f3bf 8f5b 	dmb	ish
   1b370:	e858 3f00 	ldrex	r3, [r8]
   1b374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b378:	e848 3200 	strex	r2, r3, [r8]
   1b37c:	2a00      	cmp	r2, #0
   1b37e:	d1f7      	bne.n	1b370 <smp_pairing_req+0x1c8>
   1b380:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(conn);
   1b384:	4b05      	ldr	r3, [pc, #20]	; (1b39c <smp_pairing_req+0x1f4>)
   1b386:	681b      	ldr	r3, [r3, #0]
   1b388:	695b      	ldr	r3, [r3, #20]
   1b38a:	4630      	mov	r0, r6
   1b38c:	4798      	blx	r3
		return 0;
   1b38e:	e7d7      	b.n	1b340 <smp_pairing_req+0x198>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1b390:	2506      	movs	r5, #6
   1b392:	e7d5      	b.n	1b340 <smp_pairing_req+0x198>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b394:	2503      	movs	r5, #3
   1b396:	e7d3      	b.n	1b340 <smp_pairing_req+0x198>
   1b398:	20003f74 	.word	0x20003f74
   1b39c:	200027b8 	.word	0x200027b8

0001b3a0 <smp_ident_info>:
{
   1b3a0:	b570      	push	{r4, r5, r6, lr}
   1b3a2:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b3a4:	f3bf 8f5b 	dmb	ish
   1b3a8:	6843      	ldr	r3, [r0, #4]
   1b3aa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b3ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1b3b2:	d00f      	beq.n	1b3d4 <smp_ident_info+0x34>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1b3b4:	688e      	ldr	r6, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b3b6:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b3ba:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1b3be:	462a      	mov	r2, r5
   1b3c0:	7a19      	ldrb	r1, [r3, #8]
   1b3c2:	2002      	movs	r0, #2
   1b3c4:	f012 fb16 	bl	2d9f4 <bt_keys_get_type>
		if (!keys) {
   1b3c8:	b190      	cbz	r0, 1b3f0 <smp_ident_info+0x50>
		memcpy(keys->irk.val, req->irk, 16);
   1b3ca:	2210      	movs	r2, #16
   1b3cc:	4631      	mov	r1, r6
   1b3ce:	302a      	adds	r0, #42	; 0x2a
   1b3d0:	f00f fa65 	bl	2a89e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b3d4:	f3bf 8f5b 	dmb	ish
   1b3d8:	e854 3f00 	ldrex	r3, [r4]
   1b3dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b3e0:	e844 3200 	strex	r2, r3, [r4]
   1b3e4:	2a00      	cmp	r2, #0
   1b3e6:	d1f7      	bne.n	1b3d8 <smp_ident_info+0x38>
   1b3e8:	f3bf 8f5b 	dmb	ish
	return 0;
   1b3ec:	2000      	movs	r0, #0
}
   1b3ee:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
   1b3f0:	4628      	mov	r0, r5
   1b3f2:	f7f8 fd2f 	bl	13e54 <bt_addr_le_str_real>
   1b3f6:	4602      	mov	r2, r0
   1b3f8:	2145      	movs	r1, #69	; 0x45
   1b3fa:	4802      	ldr	r0, [pc, #8]	; (1b404 <smp_ident_info+0x64>)
   1b3fc:	f00d fb42 	bl	28a84 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1b400:	2008      	movs	r0, #8
   1b402:	e7f4      	b.n	1b3ee <smp_ident_info+0x4e>
   1b404:	000321b8 	.word	0x000321b8

0001b408 <smp_encrypt_info>:
{
   1b408:	b570      	push	{r4, r5, r6, lr}
   1b40a:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b40c:	f3bf 8f5b 	dmb	ish
   1b410:	6843      	ldr	r3, [r0, #4]
   1b412:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b416:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1b41a:	d00f      	beq.n	1b43c <smp_encrypt_info+0x34>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1b41c:	688e      	ldr	r6, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b41e:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b422:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1b426:	462a      	mov	r2, r5
   1b428:	7a19      	ldrb	r1, [r3, #8]
   1b42a:	2004      	movs	r0, #4
   1b42c:	f012 fae2 	bl	2d9f4 <bt_keys_get_type>
		if (!keys) {
   1b430:	b190      	cbz	r0, 1b458 <smp_encrypt_info+0x50>
		memcpy(keys->ltk.val, req->ltk, 16);
   1b432:	2210      	movs	r2, #16
   1b434:	4631      	mov	r1, r6
   1b436:	301a      	adds	r0, #26
   1b438:	f00f fa31 	bl	2a89e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b43c:	f3bf 8f5b 	dmb	ish
   1b440:	e854 3f00 	ldrex	r3, [r4]
   1b444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b448:	e844 3200 	strex	r2, r3, [r4]
   1b44c:	2a00      	cmp	r2, #0
   1b44e:	d1f7      	bne.n	1b440 <smp_encrypt_info+0x38>
   1b450:	f3bf 8f5b 	dmb	ish
	return 0;
   1b454:	2000      	movs	r0, #0
}
   1b456:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
   1b458:	4628      	mov	r0, r5
   1b45a:	f7f8 fcfb 	bl	13e54 <bt_addr_le_str_real>
   1b45e:	4602      	mov	r2, r0
   1b460:	2145      	movs	r1, #69	; 0x45
   1b462:	4802      	ldr	r0, [pc, #8]	; (1b46c <smp_encrypt_info+0x64>)
   1b464:	f00d fb0e 	bl	28a84 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1b468:	2008      	movs	r0, #8
   1b46a:	e7f4      	b.n	1b456 <smp_encrypt_info+0x4e>
   1b46c:	000321b8 	.word	0x000321b8

0001b470 <bt_smp_connected>:
{
   1b470:	b510      	push	{r4, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1b472:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
	k_work_init_delayable(&smp->work, smp_timeout);
   1b476:	4904      	ldr	r1, [pc, #16]	; (1b488 <bt_smp_connected+0x18>)
   1b478:	30f0      	adds	r0, #240	; 0xf0
   1b47a:	f007 fe39 	bl	230f0 <k_work_init_delayable>
	smp_reset(smp);
   1b47e:	4620      	mov	r0, r4
   1b480:	f011 fd42 	bl	2cf08 <smp_reset>
}
   1b484:	bd10      	pop	{r4, pc}
   1b486:	bf00      	nop
   1b488:	0001c865 	.word	0x0001c865

0001b48c <smp_f4>:
{
   1b48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b490:	b097      	sub	sp, #92	; 0x5c
   1b492:	4680      	mov	r8, r0
   1b494:	460d      	mov	r5, r1
   1b496:	4614      	mov	r4, r2
   1b498:	461f      	mov	r7, r3
   1b49a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b49c:	ab01      	add	r3, sp, #4
   1b49e:	4298      	cmp	r0, r3
   1b4a0:	d204      	bcs.n	1b4ac <smp_f4+0x20>
   1b4a2:	f100 0320 	add.w	r3, r0, #32
   1b4a6:	aa01      	add	r2, sp, #4
   1b4a8:	4293      	cmp	r3, r2
   1b4aa:	d912      	bls.n	1b4d2 <smp_f4+0x46>
   1b4ac:	ab01      	add	r3, sp, #4
   1b4ae:	4598      	cmp	r8, r3
   1b4b0:	d902      	bls.n	1b4b8 <smp_f4+0x2c>
   1b4b2:	ab09      	add	r3, sp, #36	; 0x24
   1b4b4:	4598      	cmp	r8, r3
   1b4b6:	d20c      	bcs.n	1b4d2 <smp_f4+0x46>
   1b4b8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1b5b0 <smp_f4+0x124>
   1b4bc:	f240 2217 	movw	r2, #535	; 0x217
   1b4c0:	4649      	mov	r1, r9
   1b4c2:	483a      	ldr	r0, [pc, #232]	; (1b5ac <smp_f4+0x120>)
   1b4c4:	f00c ff3d 	bl	28342 <printk>
   1b4c8:	f240 2117 	movw	r1, #535	; 0x217
   1b4cc:	4648      	mov	r0, r9
   1b4ce:	f00d fad1 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1b4d2:	f108 001f 	add.w	r0, r8, #31
	uint8_t *pdst = (uint8_t *)dst;
   1b4d6:	ab01      	add	r3, sp, #4
	for (; length > 0; length--) {
   1b4d8:	2220      	movs	r2, #32
   1b4da:	b12a      	cbz	r2, 1b4e8 <smp_f4+0x5c>
		*pdst++ = *psrc--;
   1b4dc:	f810 1901 	ldrb.w	r1, [r0], #-1
   1b4e0:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1b4e4:	3a01      	subs	r2, #1
   1b4e6:	e7f8      	b.n	1b4da <smp_f4+0x4e>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b4e8:	ab09      	add	r3, sp, #36	; 0x24
   1b4ea:	429d      	cmp	r5, r3
   1b4ec:	d204      	bcs.n	1b4f8 <smp_f4+0x6c>
   1b4ee:	f105 0320 	add.w	r3, r5, #32
   1b4f2:	aa09      	add	r2, sp, #36	; 0x24
   1b4f4:	4293      	cmp	r3, r2
   1b4f6:	d912      	bls.n	1b51e <smp_f4+0x92>
   1b4f8:	ab09      	add	r3, sp, #36	; 0x24
   1b4fa:	429d      	cmp	r5, r3
   1b4fc:	d902      	bls.n	1b504 <smp_f4+0x78>
   1b4fe:	ab11      	add	r3, sp, #68	; 0x44
   1b500:	429d      	cmp	r5, r3
   1b502:	d20c      	bcs.n	1b51e <smp_f4+0x92>
   1b504:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1b5b0 <smp_f4+0x124>
   1b508:	f240 2217 	movw	r2, #535	; 0x217
   1b50c:	4641      	mov	r1, r8
   1b50e:	4827      	ldr	r0, [pc, #156]	; (1b5ac <smp_f4+0x120>)
   1b510:	f00c ff17 	bl	28342 <printk>
   1b514:	f240 2117 	movw	r1, #535	; 0x217
   1b518:	4640      	mov	r0, r8
   1b51a:	f00d faab 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1b51e:	f105 011f 	add.w	r1, r5, #31
	uint8_t *pdst = (uint8_t *)dst;
   1b522:	ab09      	add	r3, sp, #36	; 0x24
	for (; length > 0; length--) {
   1b524:	2220      	movs	r2, #32
   1b526:	b12a      	cbz	r2, 1b534 <smp_f4+0xa8>
		*pdst++ = *psrc--;
   1b528:	f811 0901 	ldrb.w	r0, [r1], #-1
   1b52c:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   1b530:	3a01      	subs	r2, #1
   1b532:	e7f8      	b.n	1b526 <smp_f4+0x9a>
	m[64] = z;
   1b534:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b538:	ab12      	add	r3, sp, #72	; 0x48
   1b53a:	429c      	cmp	r4, r3
   1b53c:	d204      	bcs.n	1b548 <smp_f4+0xbc>
   1b53e:	f104 0310 	add.w	r3, r4, #16
   1b542:	aa12      	add	r2, sp, #72	; 0x48
   1b544:	4293      	cmp	r3, r2
   1b546:	d911      	bls.n	1b56c <smp_f4+0xe0>
   1b548:	ab12      	add	r3, sp, #72	; 0x48
   1b54a:	429c      	cmp	r4, r3
   1b54c:	d902      	bls.n	1b554 <smp_f4+0xc8>
   1b54e:	ab16      	add	r3, sp, #88	; 0x58
   1b550:	429c      	cmp	r4, r3
   1b552:	d20b      	bcs.n	1b56c <smp_f4+0xe0>
   1b554:	4d16      	ldr	r5, [pc, #88]	; (1b5b0 <smp_f4+0x124>)
   1b556:	f240 2217 	movw	r2, #535	; 0x217
   1b55a:	4629      	mov	r1, r5
   1b55c:	4813      	ldr	r0, [pc, #76]	; (1b5ac <smp_f4+0x120>)
   1b55e:	f00c fef0 	bl	28342 <printk>
   1b562:	f240 2117 	movw	r1, #535	; 0x217
   1b566:	4628      	mov	r0, r5
   1b568:	f00d fa84 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1b56c:	f104 020f 	add.w	r2, r4, #15
	uint8_t *pdst = (uint8_t *)dst;
   1b570:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
   1b572:	2410      	movs	r4, #16
   1b574:	e004      	b.n	1b580 <smp_f4+0xf4>
		*pdst++ = *psrc--;
   1b576:	f812 1901 	ldrb.w	r1, [r2], #-1
   1b57a:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1b57e:	3c01      	subs	r4, #1
   1b580:	2c00      	cmp	r4, #0
   1b582:	d1f8      	bne.n	1b576 <smp_f4+0xea>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1b584:	4633      	mov	r3, r6
   1b586:	2241      	movs	r2, #65	; 0x41
   1b588:	a901      	add	r1, sp, #4
   1b58a:	a812      	add	r0, sp, #72	; 0x48
   1b58c:	f011 fe3f 	bl	2d20e <bt_smp_aes_cmac>
	if (err) {
   1b590:	b948      	cbnz	r0, 1b5a6 <smp_f4+0x11a>
	for (i = 0; i < (length/2); i++) {
   1b592:	2c07      	cmp	r4, #7
   1b594:	d807      	bhi.n	1b5a6 <smp_f4+0x11a>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1b596:	5d32      	ldrb	r2, [r6, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1b598:	f1c4 030f 	rsb	r3, r4, #15
   1b59c:	5cf1      	ldrb	r1, [r6, r3]
   1b59e:	5531      	strb	r1, [r6, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1b5a0:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
   1b5a2:	3401      	adds	r4, #1
   1b5a4:	e7f5      	b.n	1b592 <smp_f4+0x106>
}
   1b5a6:	b017      	add	sp, #92	; 0x5c
   1b5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b5ac:	0002f968 	.word	0x0002f968
   1b5b0:	000305b4 	.word	0x000305b4

0001b5b4 <smp_send_pairing_confirm>:
{
   1b5b4:	b570      	push	{r4, r5, r6, lr}
   1b5b6:	b082      	sub	sp, #8
   1b5b8:	4605      	mov	r5, r0
	switch (smp->method) {
   1b5ba:	7a04      	ldrb	r4, [r0, #8]
   1b5bc:	4622      	mov	r2, r4
   1b5be:	2c02      	cmp	r4, #2
   1b5c0:	d808      	bhi.n	1b5d4 <smp_send_pairing_confirm+0x20>
   1b5c2:	b263      	sxtb	r3, r4
   1b5c4:	bbab      	cbnz	r3, 1b632 <smp_send_pairing_confirm+0x7e>
   1b5c6:	b144      	cbz	r4, 1b5da <smp_send_pairing_confirm+0x26>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b5c8:	2145      	movs	r1, #69	; 0x45
   1b5ca:	4823      	ldr	r0, [pc, #140]	; (1b658 <smp_send_pairing_confirm+0xa4>)
   1b5cc:	f00d fa5a 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b5d0:	2008      	movs	r0, #8
   1b5d2:	e02c      	b.n	1b62e <smp_send_pairing_confirm+0x7a>
	switch (smp->method) {
   1b5d4:	2c03      	cmp	r4, #3
   1b5d6:	d1f7      	bne.n	1b5c8 <smp_send_pairing_confirm+0x14>
   1b5d8:	2400      	movs	r4, #0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1b5da:	2210      	movs	r2, #16
   1b5dc:	2103      	movs	r1, #3
   1b5de:	4628      	mov	r0, r5
   1b5e0:	f011 fd1a 	bl	2d018 <smp_create_pdu>
	if (!buf) {
   1b5e4:	4606      	mov	r6, r0
   1b5e6:	b3a0      	cbz	r0, 1b652 <smp_send_pairing_confirm+0x9e>
   1b5e8:	2110      	movs	r1, #16
   1b5ea:	3008      	adds	r0, #8
   1b5ec:	f001 fe8c 	bl	1d308 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1b5f0:	9000      	str	r0, [sp, #0]
   1b5f2:	4623      	mov	r3, r4
   1b5f4:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1b5f8:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1b5fc:	4817      	ldr	r0, [pc, #92]	; (1b65c <smp_send_pairing_confirm+0xa8>)
   1b5fe:	6800      	ldr	r0, [r0, #0]
   1b600:	f7ff ff44 	bl	1b48c <smp_f4>
   1b604:	bb00      	cbnz	r0, 1b648 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL, NULL);
   1b606:	2300      	movs	r3, #0
   1b608:	461a      	mov	r2, r3
   1b60a:	4631      	mov	r1, r6
   1b60c:	4628      	mov	r0, r5
   1b60e:	f011 fd2e 	bl	2d06e <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b612:	3504      	adds	r5, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b614:	f3bf 8f5b 	dmb	ish
   1b618:	e855 3f00 	ldrex	r3, [r5]
   1b61c:	f023 0301 	bic.w	r3, r3, #1
   1b620:	e845 3200 	strex	r2, r3, [r5]
   1b624:	2a00      	cmp	r2, #0
   1b626:	d1f7      	bne.n	1b618 <smp_send_pairing_confirm+0x64>
   1b628:	f3bf 8f5b 	dmb	ish
	return 0;
   1b62c:	2000      	movs	r0, #0
}
   1b62e:	b002      	add	sp, #8
   1b630:	bd70      	pop	{r4, r5, r6, pc}
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b632:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1b636:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1b63a:	40dc      	lsrs	r4, r3
   1b63c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1b640:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1b644:	b2e4      	uxtb	r4, r4
		break;
   1b646:	e7c8      	b.n	1b5da <smp_send_pairing_confirm+0x26>
		net_buf_unref(buf);
   1b648:	4630      	mov	r0, r6
   1b64a:	f001 fd45 	bl	1d0d8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1b64e:	2008      	movs	r0, #8
   1b650:	e7ed      	b.n	1b62e <smp_send_pairing_confirm+0x7a>
		return BT_SMP_ERR_UNSPECIFIED;
   1b652:	2008      	movs	r0, #8
   1b654:	e7eb      	b.n	1b62e <smp_send_pairing_confirm+0x7a>
   1b656:	bf00      	nop
   1b658:	00032194 	.word	0x00032194
   1b65c:	2000286c 	.word	0x2000286c

0001b660 <smp_pairing_confirm>:
{
   1b660:	b538      	push	{r3, r4, r5, lr}
   1b662:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1b664:	6889      	ldr	r1, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b666:	1d05      	adds	r5, r0, #4
   1b668:	f3bf 8f5b 	dmb	ish
   1b66c:	e855 3f00 	ldrex	r3, [r5]
   1b670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b674:	e845 3200 	strex	r2, r3, [r5]
   1b678:	2a00      	cmp	r2, #0
   1b67a:	d1f7      	bne.n	1b66c <smp_pairing_confirm+0xc>
   1b67c:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1b680:	2210      	movs	r2, #16
   1b682:	f104 0017 	add.w	r0, r4, #23
   1b686:	f00f f90a 	bl	2a89e <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b68a:	f3bf 8f5b 	dmb	ish
   1b68e:	6863      	ldr	r3, [r4, #4]
   1b690:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b694:	f013 0f20 	tst.w	r3, #32
   1b698:	d014      	beq.n	1b6c4 <smp_pairing_confirm+0x64>
	switch (smp->method) {
   1b69a:	7a22      	ldrb	r2, [r4, #8]
   1b69c:	2a01      	cmp	r2, #1
   1b69e:	d015      	beq.n	1b6cc <smp_pairing_confirm+0x6c>
   1b6a0:	2a02      	cmp	r2, #2
   1b6a2:	d139      	bne.n	1b718 <smp_pairing_confirm+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b6a4:	f3bf 8f5b 	dmb	ish
   1b6a8:	e854 3f00 	ldrex	r3, [r4]
   1b6ac:	f043 0310 	orr.w	r3, r3, #16
   1b6b0:	e844 3200 	strex	r2, r3, [r4]
   1b6b4:	2a00      	cmp	r2, #0
   1b6b6:	d1f7      	bne.n	1b6a8 <smp_pairing_confirm+0x48>
   1b6b8:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
   1b6bc:	4620      	mov	r0, r4
   1b6be:	f7ff ff79 	bl	1b5b4 <smp_send_pairing_confirm>
}
   1b6c2:	bd38      	pop	{r3, r4, r5, pc}
		return legacy_pairing_confirm(smp);
   1b6c4:	4620      	mov	r0, r4
   1b6c6:	f011 fd2a 	bl	2d11e <legacy_pairing_confirm>
   1b6ca:	e7fa      	b.n	1b6c2 <smp_pairing_confirm+0x62>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b6cc:	f3bf 8f5b 	dmb	ish
   1b6d0:	6863      	ldr	r3, [r4, #4]
   1b6d2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1b6d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1b6da:	d10f      	bne.n	1b6fc <smp_pairing_confirm+0x9c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b6dc:	f3bf 8f5b 	dmb	ish
   1b6e0:	e854 3f00 	ldrex	r3, [r4]
   1b6e4:	f043 0310 	orr.w	r3, r3, #16
   1b6e8:	e844 3200 	strex	r2, r3, [r4]
   1b6ec:	2a00      	cmp	r2, #0
   1b6ee:	d1f7      	bne.n	1b6e0 <smp_pairing_confirm+0x80>
   1b6f0:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
   1b6f4:	4620      	mov	r0, r4
   1b6f6:	f7ff ff5d 	bl	1b5b4 <smp_send_pairing_confirm>
   1b6fa:	e7e2      	b.n	1b6c2 <smp_pairing_confirm+0x62>
   1b6fc:	f3bf 8f5b 	dmb	ish
   1b700:	e855 3f00 	ldrex	r3, [r5]
   1b704:	f043 0301 	orr.w	r3, r3, #1
   1b708:	e845 3200 	strex	r2, r3, [r5]
   1b70c:	2a00      	cmp	r2, #0
   1b70e:	d1f7      	bne.n	1b700 <smp_pairing_confirm+0xa0>
   1b710:	f3bf 8f5b 	dmb	ish
			return 0;
   1b714:	2000      	movs	r0, #0
   1b716:	e7d4      	b.n	1b6c2 <smp_pairing_confirm+0x62>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b718:	2145      	movs	r1, #69	; 0x45
   1b71a:	4802      	ldr	r0, [pc, #8]	; (1b724 <smp_pairing_confirm+0xc4>)
   1b71c:	f00d f9b2 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b720:	2008      	movs	r0, #8
   1b722:	e7ce      	b.n	1b6c2 <smp_pairing_confirm+0x62>
   1b724:	00032194 	.word	0x00032194

0001b728 <smp_public_key_periph>:
{
   1b728:	b538      	push	{r3, r4, r5, lr}
   1b72a:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b72c:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b72e:	f3bf 8f5b 	dmb	ish
   1b732:	6843      	ldr	r3, [r0, #4]
   1b734:	f3bf 8f5b 	dmb	ish
   1b738:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1b73c:	d106      	bne.n	1b74c <smp_public_key_periph+0x24>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1b73e:	2220      	movs	r2, #32
   1b740:	4b47      	ldr	r3, [pc, #284]	; (1b860 <smp_public_key_periph+0x138>)
   1b742:	6819      	ldr	r1, [r3, #0]
   1b744:	3057      	adds	r0, #87	; 0x57
   1b746:	f00f f87d 	bl	2a844 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b74a:	b168      	cbz	r0, 1b768 <smp_public_key_periph+0x40>
	err = sc_send_public_key(smp);
   1b74c:	4620      	mov	r0, r4
   1b74e:	f7ff fae5 	bl	1ad1c <sc_send_public_key>
	if (err) {
   1b752:	4603      	mov	r3, r0
   1b754:	2800      	cmp	r0, #0
   1b756:	d16d      	bne.n	1b834 <smp_public_key_periph+0x10c>
	switch (smp->method) {
   1b758:	7a22      	ldrb	r2, [r4, #8]
   1b75a:	2a05      	cmp	r2, #5
   1b75c:	d879      	bhi.n	1b852 <smp_public_key_periph+0x12a>
   1b75e:	e8df f002 	tbb	[pc, r2]
   1b762:	3b09      	.short	0x3b09
   1b764:	6b78091c 	.word	0x6b78091c
		BT_WARN("Remote public key rejected");
   1b768:	2157      	movs	r1, #87	; 0x57
   1b76a:	483e      	ldr	r0, [pc, #248]	; (1b864 <smp_public_key_periph+0x13c>)
   1b76c:	f00d f98a 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b770:	2308      	movs	r3, #8
   1b772:	e05f      	b.n	1b834 <smp_public_key_periph+0x10c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b774:	f3bf 8f5b 	dmb	ish
   1b778:	e854 3f00 	ldrex	r3, [r4]
   1b77c:	f043 0310 	orr.w	r3, r3, #16
   1b780:	e844 3200 	strex	r2, r3, [r4]
   1b784:	2a00      	cmp	r2, #0
   1b786:	d1f7      	bne.n	1b778 <smp_public_key_periph+0x50>
   1b788:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
   1b78c:	4620      	mov	r0, r4
   1b78e:	f7ff ff11 	bl	1b5b4 <smp_send_pairing_confirm>
		if (err) {
   1b792:	4603      	mov	r3, r0
   1b794:	2800      	cmp	r0, #0
   1b796:	d049      	beq.n	1b82c <smp_public_key_periph+0x104>
   1b798:	e04c      	b.n	1b834 <smp_public_key_periph+0x10c>
		err = display_passkey(smp);
   1b79a:	4620      	mov	r0, r4
   1b79c:	f7ff fae2 	bl	1ad64 <display_passkey>
		if (err) {
   1b7a0:	4603      	mov	r3, r0
   1b7a2:	2800      	cmp	r0, #0
   1b7a4:	d146      	bne.n	1b834 <smp_public_key_periph+0x10c>
   1b7a6:	f3bf 8f5b 	dmb	ish
   1b7aa:	e854 3f00 	ldrex	r3, [r4]
   1b7ae:	f043 0308 	orr.w	r3, r3, #8
   1b7b2:	e844 3200 	strex	r2, r3, [r4]
   1b7b6:	2a00      	cmp	r2, #0
   1b7b8:	d1f7      	bne.n	1b7aa <smp_public_key_periph+0x82>
   1b7ba:	f3bf 8f5b 	dmb	ish
   1b7be:	f3bf 8f5b 	dmb	ish
   1b7c2:	e854 3f00 	ldrex	r3, [r4]
   1b7c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b7ca:	e844 3200 	strex	r2, r3, [r4]
   1b7ce:	2a00      	cmp	r2, #0
   1b7d0:	d1f7      	bne.n	1b7c2 <smp_public_key_periph+0x9a>
   1b7d2:	f3bf 8f5b 	dmb	ish
}
   1b7d6:	e029      	b.n	1b82c <smp_public_key_periph+0x104>
   1b7d8:	f3bf 8f5b 	dmb	ish
   1b7dc:	e854 3f00 	ldrex	r3, [r4]
   1b7e0:	f043 0308 	orr.w	r3, r3, #8
   1b7e4:	e844 3200 	strex	r2, r3, [r4]
   1b7e8:	2a00      	cmp	r2, #0
   1b7ea:	d1f7      	bne.n	1b7dc <smp_public_key_periph+0xb4>
   1b7ec:	f3bf 8f5b 	dmb	ish
   1b7f0:	f3bf 8f5b 	dmb	ish
   1b7f4:	e854 3f00 	ldrex	r3, [r4]
   1b7f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b7fc:	e844 3200 	strex	r2, r3, [r4]
   1b800:	2a00      	cmp	r2, #0
   1b802:	d1f7      	bne.n	1b7f4 <smp_public_key_periph+0xcc>
   1b804:	f3bf 8f5b 	dmb	ish
   1b808:	f3bf 8f5b 	dmb	ish
   1b80c:	e855 3f00 	ldrex	r3, [r5]
   1b810:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b814:	e845 3200 	strex	r2, r3, [r5]
   1b818:	2a00      	cmp	r2, #0
   1b81a:	d1f7      	bne.n	1b80c <smp_public_key_periph+0xe4>
   1b81c:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1b820:	4b11      	ldr	r3, [pc, #68]	; (1b868 <smp_public_key_periph+0x140>)
   1b822:	681b      	ldr	r3, [r3, #0]
   1b824:	685b      	ldr	r3, [r3, #4]
   1b826:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1b82a:	4798      	blx	r3
	return generate_dhkey(smp);
   1b82c:	4620      	mov	r0, r4
   1b82e:	f011 fdc3 	bl	2d3b8 <generate_dhkey>
   1b832:	4603      	mov	r3, r0
}
   1b834:	4618      	mov	r0, r3
   1b836:	bd38      	pop	{r3, r4, r5, pc}
   1b838:	f3bf 8f5b 	dmb	ish
   1b83c:	e854 3f00 	ldrex	r3, [r4]
   1b840:	f043 0310 	orr.w	r3, r3, #16
   1b844:	e844 3200 	strex	r2, r3, [r4]
   1b848:	2a00      	cmp	r2, #0
   1b84a:	d1f7      	bne.n	1b83c <smp_public_key_periph+0x114>
   1b84c:	f3bf 8f5b 	dmb	ish
   1b850:	e7ec      	b.n	1b82c <smp_public_key_periph+0x104>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b852:	2145      	movs	r1, #69	; 0x45
   1b854:	4805      	ldr	r0, [pc, #20]	; (1b86c <smp_public_key_periph+0x144>)
   1b856:	f00d f915 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b85a:	2308      	movs	r3, #8
   1b85c:	e7ea      	b.n	1b834 <smp_public_key_periph+0x10c>
   1b85e:	bf00      	nop
   1b860:	2000286c 	.word	0x2000286c
   1b864:	000321d8 	.word	0x000321d8
   1b868:	200027b8 	.word	0x200027b8
   1b86c:	00032194 	.word	0x00032194

0001b870 <smp_public_key>:
{
   1b870:	b570      	push	{r4, r5, r6, lr}
   1b872:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
   1b874:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1b876:	f100 0557 	add.w	r5, r0, #87	; 0x57
   1b87a:	2220      	movs	r2, #32
   1b87c:	4631      	mov	r1, r6
   1b87e:	4628      	mov	r0, r5
   1b880:	f00f f80d 	bl	2a89e <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1b884:	2220      	movs	r2, #32
   1b886:	18b1      	adds	r1, r6, r2
   1b888:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1b88c:	f00f f807 	bl	2a89e <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1b890:	4628      	mov	r0, r5
   1b892:	f7fb fb25 	bl	16ee0 <bt_pub_key_is_debug>
   1b896:	b1a0      	cbz	r0, 1b8c2 <smp_public_key+0x52>
		BT_INFO("Remote is using Debug Public key");
   1b898:	2149      	movs	r1, #73	; 0x49
   1b89a:	4816      	ldr	r0, [pc, #88]	; (1b8f4 <smp_public_key+0x84>)
   1b89c:	f00d f8f2 	bl	28a84 <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1b8a0:	1d23      	adds	r3, r4, #4
   1b8a2:	f3bf 8f5b 	dmb	ish
   1b8a6:	e853 2f00 	ldrex	r2, [r3]
   1b8aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1b8ae:	e843 2100 	strex	r1, r2, [r3]
   1b8b2:	2900      	cmp	r1, #0
   1b8b4:	d1f7      	bne.n	1b8a6 <smp_public_key+0x36>
   1b8b6:	f3bf 8f5b 	dmb	ish
		if (!update_debug_keys_check(smp)) {
   1b8ba:	4620      	mov	r0, r4
   1b8bc:	f011 fcc9 	bl	2d252 <update_debug_keys_check>
   1b8c0:	b1a8      	cbz	r0, 1b8ee <smp_public_key+0x7e>
	if (!sc_public_key) {
   1b8c2:	4b0d      	ldr	r3, [pc, #52]	; (1b8f8 <smp_public_key+0x88>)
   1b8c4:	681b      	ldr	r3, [r3, #0]
   1b8c6:	b11b      	cbz	r3, 1b8d0 <smp_public_key+0x60>
	err = smp_public_key_periph(smp);
   1b8c8:	4620      	mov	r0, r4
   1b8ca:	f7ff ff2d 	bl	1b728 <smp_public_key_periph>
}
   1b8ce:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1b8d0:	3404      	adds	r4, #4
   1b8d2:	f3bf 8f5b 	dmb	ish
   1b8d6:	e854 3f00 	ldrex	r3, [r4]
   1b8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b8de:	e844 3200 	strex	r2, r3, [r4]
   1b8e2:	2a00      	cmp	r2, #0
   1b8e4:	d1f7      	bne.n	1b8d6 <smp_public_key+0x66>
   1b8e6:	f3bf 8f5b 	dmb	ish
		return 0;
   1b8ea:	2000      	movs	r0, #0
   1b8ec:	e7ef      	b.n	1b8ce <smp_public_key+0x5e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b8ee:	2003      	movs	r0, #3
   1b8f0:	e7ed      	b.n	1b8ce <smp_public_key+0x5e>
   1b8f2:	bf00      	nop
   1b8f4:	000321f8 	.word	0x000321f8
   1b8f8:	2000286c 	.word	0x2000286c

0001b8fc <sc_smp_check_confirm>:
{
   1b8fc:	b510      	push	{r4, lr}
   1b8fe:	b086      	sub	sp, #24
   1b900:	4604      	mov	r4, r0
	switch (smp->method) {
   1b902:	7a02      	ldrb	r2, [r0, #8]
   1b904:	2a05      	cmp	r2, #5
   1b906:	d80f      	bhi.n	1b928 <sc_smp_check_confirm+0x2c>
   1b908:	e8df f002 	tbb	[pc, r2]
   1b90c:	14030314 	.word	0x14030314
   1b910:	2f0e      	.short	0x2f0e
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b912:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   1b916:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1b91a:	40d3      	lsrs	r3, r2
   1b91c:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1b920:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b924:	b2db      	uxtb	r3, r3
		break;
   1b926:	e006      	b.n	1b936 <sc_smp_check_confirm+0x3a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b928:	2145      	movs	r1, #69	; 0x45
   1b92a:	4812      	ldr	r0, [pc, #72]	; (1b974 <sc_smp_check_confirm+0x78>)
   1b92c:	f00d f8aa 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b930:	2008      	movs	r0, #8
   1b932:	e012      	b.n	1b95a <sc_smp_check_confirm+0x5e>
	switch (smp->method) {
   1b934:	2300      	movs	r3, #0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b936:	aa02      	add	r2, sp, #8
   1b938:	9200      	str	r2, [sp, #0]
   1b93a:	f104 0237 	add.w	r2, r4, #55	; 0x37
   1b93e:	490e      	ldr	r1, [pc, #56]	; (1b978 <sc_smp_check_confirm+0x7c>)
   1b940:	6809      	ldr	r1, [r1, #0]
   1b942:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b946:	f7ff fda1 	bl	1b48c <smp_f4>
   1b94a:	b940      	cbnz	r0, 1b95e <sc_smp_check_confirm+0x62>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1b94c:	2210      	movs	r2, #16
   1b94e:	a902      	add	r1, sp, #8
   1b950:	f104 0017 	add.w	r0, r4, #23
   1b954:	f00e ff76 	bl	2a844 <memcmp>
   1b958:	b948      	cbnz	r0, 1b96e <sc_smp_check_confirm+0x72>
}
   1b95a:	b006      	add	sp, #24
   1b95c:	bd10      	pop	{r4, pc}
		BT_ERR("Calculate confirm failed");
   1b95e:	2145      	movs	r1, #69	; 0x45
   1b960:	4806      	ldr	r0, [pc, #24]	; (1b97c <sc_smp_check_confirm+0x80>)
   1b962:	f00d f88f 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b966:	2008      	movs	r0, #8
   1b968:	e7f7      	b.n	1b95a <sc_smp_check_confirm+0x5e>
	switch (smp->method) {
   1b96a:	2000      	movs	r0, #0
   1b96c:	e7f5      	b.n	1b95a <sc_smp_check_confirm+0x5e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1b96e:	2004      	movs	r0, #4
   1b970:	e7f3      	b.n	1b95a <sc_smp_check_confirm+0x5e>
   1b972:	bf00      	nop
   1b974:	00032194 	.word	0x00032194
   1b978:	2000286c 	.word	0x2000286c
   1b97c:	00032220 	.word	0x00032220

0001b980 <smp_g2>:
{
   1b980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b984:	b099      	sub	sp, #100	; 0x64
   1b986:	4607      	mov	r7, r0
   1b988:	460e      	mov	r6, r1
   1b98a:	4614      	mov	r4, r2
   1b98c:	461d      	mov	r5, r3
   1b98e:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b992:	ab04      	add	r3, sp, #16
   1b994:	4298      	cmp	r0, r3
   1b996:	d204      	bcs.n	1b9a2 <smp_g2+0x22>
   1b998:	f100 0320 	add.w	r3, r0, #32
   1b99c:	aa04      	add	r2, sp, #16
   1b99e:	4293      	cmp	r3, r2
   1b9a0:	d912      	bls.n	1b9c8 <smp_g2+0x48>
   1b9a2:	ab04      	add	r3, sp, #16
   1b9a4:	429f      	cmp	r7, r3
   1b9a6:	d902      	bls.n	1b9ae <smp_g2+0x2e>
   1b9a8:	ab0c      	add	r3, sp, #48	; 0x30
   1b9aa:	429f      	cmp	r7, r3
   1b9ac:	d20c      	bcs.n	1b9c8 <smp_g2+0x48>
   1b9ae:	f8df 915c 	ldr.w	r9, [pc, #348]	; 1bb0c <smp_g2+0x18c>
   1b9b2:	f240 2217 	movw	r2, #535	; 0x217
   1b9b6:	4649      	mov	r1, r9
   1b9b8:	4853      	ldr	r0, [pc, #332]	; (1bb08 <smp_g2+0x188>)
   1b9ba:	f00c fcc2 	bl	28342 <printk>
   1b9be:	f240 2117 	movw	r1, #535	; 0x217
   1b9c2:	4648      	mov	r0, r9
   1b9c4:	f00d f856 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1b9c8:	371f      	adds	r7, #31
	uint8_t *pdst = (uint8_t *)dst;
   1b9ca:	ab04      	add	r3, sp, #16
	for (; length > 0; length--) {
   1b9cc:	2220      	movs	r2, #32
   1b9ce:	b12a      	cbz	r2, 1b9dc <smp_g2+0x5c>
		*pdst++ = *psrc--;
   1b9d0:	f817 1901 	ldrb.w	r1, [r7], #-1
   1b9d4:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1b9d8:	3a01      	subs	r2, #1
   1b9da:	e7f8      	b.n	1b9ce <smp_g2+0x4e>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b9dc:	ab0c      	add	r3, sp, #48	; 0x30
   1b9de:	429e      	cmp	r6, r3
   1b9e0:	d204      	bcs.n	1b9ec <smp_g2+0x6c>
   1b9e2:	f106 0320 	add.w	r3, r6, #32
   1b9e6:	aa0c      	add	r2, sp, #48	; 0x30
   1b9e8:	4293      	cmp	r3, r2
   1b9ea:	d911      	bls.n	1ba10 <smp_g2+0x90>
   1b9ec:	ab0c      	add	r3, sp, #48	; 0x30
   1b9ee:	429e      	cmp	r6, r3
   1b9f0:	d902      	bls.n	1b9f8 <smp_g2+0x78>
   1b9f2:	ab14      	add	r3, sp, #80	; 0x50
   1b9f4:	429e      	cmp	r6, r3
   1b9f6:	d20b      	bcs.n	1ba10 <smp_g2+0x90>
   1b9f8:	4f44      	ldr	r7, [pc, #272]	; (1bb0c <smp_g2+0x18c>)
   1b9fa:	f240 2217 	movw	r2, #535	; 0x217
   1b9fe:	4639      	mov	r1, r7
   1ba00:	4841      	ldr	r0, [pc, #260]	; (1bb08 <smp_g2+0x188>)
   1ba02:	f00c fc9e 	bl	28342 <printk>
   1ba06:	f240 2117 	movw	r1, #535	; 0x217
   1ba0a:	4638      	mov	r0, r7
   1ba0c:	f00d f832 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1ba10:	361f      	adds	r6, #31
	uint8_t *pdst = (uint8_t *)dst;
   1ba12:	ab0c      	add	r3, sp, #48	; 0x30
	for (; length > 0; length--) {
   1ba14:	2220      	movs	r2, #32
   1ba16:	b12a      	cbz	r2, 1ba24 <smp_g2+0xa4>
		*pdst++ = *psrc--;
   1ba18:	f816 1901 	ldrb.w	r1, [r6], #-1
   1ba1c:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1ba20:	3a01      	subs	r2, #1
   1ba22:	e7f8      	b.n	1ba16 <smp_g2+0x96>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ba24:	ab14      	add	r3, sp, #80	; 0x50
   1ba26:	429d      	cmp	r5, r3
   1ba28:	d204      	bcs.n	1ba34 <smp_g2+0xb4>
   1ba2a:	f105 0310 	add.w	r3, r5, #16
   1ba2e:	aa14      	add	r2, sp, #80	; 0x50
   1ba30:	4293      	cmp	r3, r2
   1ba32:	d911      	bls.n	1ba58 <smp_g2+0xd8>
   1ba34:	ab14      	add	r3, sp, #80	; 0x50
   1ba36:	429d      	cmp	r5, r3
   1ba38:	d902      	bls.n	1ba40 <smp_g2+0xc0>
   1ba3a:	ab18      	add	r3, sp, #96	; 0x60
   1ba3c:	429d      	cmp	r5, r3
   1ba3e:	d20b      	bcs.n	1ba58 <smp_g2+0xd8>
   1ba40:	4e32      	ldr	r6, [pc, #200]	; (1bb0c <smp_g2+0x18c>)
   1ba42:	f240 2217 	movw	r2, #535	; 0x217
   1ba46:	4631      	mov	r1, r6
   1ba48:	482f      	ldr	r0, [pc, #188]	; (1bb08 <smp_g2+0x188>)
   1ba4a:	f00c fc7a 	bl	28342 <printk>
   1ba4e:	f240 2117 	movw	r1, #535	; 0x217
   1ba52:	4630      	mov	r0, r6
   1ba54:	f00d f80e 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1ba58:	350f      	adds	r5, #15
	uint8_t *pdst = (uint8_t *)dst;
   1ba5a:	ab14      	add	r3, sp, #80	; 0x50
	for (; length > 0; length--) {
   1ba5c:	2210      	movs	r2, #16
   1ba5e:	b12a      	cbz	r2, 1ba6c <smp_g2+0xec>
		*pdst++ = *psrc--;
   1ba60:	f815 1901 	ldrb.w	r1, [r5], #-1
   1ba64:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1ba68:	3a01      	subs	r2, #1
   1ba6a:	e7f8      	b.n	1ba5e <smp_g2+0xde>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ba6c:	466b      	mov	r3, sp
   1ba6e:	429c      	cmp	r4, r3
   1ba70:	d204      	bcs.n	1ba7c <smp_g2+0xfc>
   1ba72:	f104 0310 	add.w	r3, r4, #16
   1ba76:	466a      	mov	r2, sp
   1ba78:	4293      	cmp	r3, r2
   1ba7a:	d911      	bls.n	1baa0 <smp_g2+0x120>
   1ba7c:	466b      	mov	r3, sp
   1ba7e:	429c      	cmp	r4, r3
   1ba80:	d902      	bls.n	1ba88 <smp_g2+0x108>
   1ba82:	ab04      	add	r3, sp, #16
   1ba84:	429c      	cmp	r4, r3
   1ba86:	d20b      	bcs.n	1baa0 <smp_g2+0x120>
   1ba88:	4d20      	ldr	r5, [pc, #128]	; (1bb0c <smp_g2+0x18c>)
   1ba8a:	f240 2217 	movw	r2, #535	; 0x217
   1ba8e:	4629      	mov	r1, r5
   1ba90:	481d      	ldr	r0, [pc, #116]	; (1bb08 <smp_g2+0x188>)
   1ba92:	f00c fc56 	bl	28342 <printk>
   1ba96:	f240 2117 	movw	r1, #535	; 0x217
   1ba9a:	4628      	mov	r0, r5
   1ba9c:	f00c ffea 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1baa0:	340f      	adds	r4, #15
	uint8_t *pdst = (uint8_t *)dst;
   1baa2:	466b      	mov	r3, sp
	for (; length > 0; length--) {
   1baa4:	2210      	movs	r2, #16
   1baa6:	e004      	b.n	1bab2 <smp_g2+0x132>
		*pdst++ = *psrc--;
   1baa8:	f814 1901 	ldrb.w	r1, [r4], #-1
   1baac:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1bab0:	3a01      	subs	r2, #1
   1bab2:	2a00      	cmp	r2, #0
   1bab4:	d1f8      	bne.n	1baa8 <smp_g2+0x128>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1bab6:	466b      	mov	r3, sp
   1bab8:	2250      	movs	r2, #80	; 0x50
   1baba:	a904      	add	r1, sp, #16
   1babc:	4668      	mov	r0, sp
   1babe:	f011 fba6 	bl	2d20e <bt_smp_aes_cmac>
	if (err) {
   1bac2:	4604      	mov	r4, r0
   1bac4:	b118      	cbz	r0, 1bace <smp_g2+0x14e>
}
   1bac6:	4620      	mov	r0, r4
   1bac8:	b019      	add	sp, #100	; 0x64
   1baca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(passkey, xs + 12, 4);
   1bace:	2204      	movs	r2, #4
   1bad0:	a903      	add	r1, sp, #12
   1bad2:	4640      	mov	r0, r8
   1bad4:	f00e fee3 	bl	2a89e <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bad8:	f8d8 2000 	ldr.w	r2, [r8]
   1badc:	0a13      	lsrs	r3, r2, #8
   1bade:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1bae2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1bae6:	0211      	lsls	r1, r2, #8
   1bae8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1baec:	430b      	orrs	r3, r1
   1baee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1baf2:	4a07      	ldr	r2, [pc, #28]	; (1bb10 <smp_g2+0x190>)
   1baf4:	fba2 1203 	umull	r1, r2, r2, r3
   1baf8:	0c92      	lsrs	r2, r2, #18
   1bafa:	4906      	ldr	r1, [pc, #24]	; (1bb14 <smp_g2+0x194>)
   1bafc:	fb01 3212 	mls	r2, r1, r2, r3
   1bb00:	f8c8 2000 	str.w	r2, [r8]
	return 0;
   1bb04:	e7df      	b.n	1bac6 <smp_g2+0x146>
   1bb06:	bf00      	nop
   1bb08:	0002f968 	.word	0x0002f968
   1bb0c:	000305b4 	.word	0x000305b4
   1bb10:	431bde83 	.word	0x431bde83
   1bb14:	000f4240 	.word	0x000f4240

0001bb18 <smp_pairing_random>:
{
   1bb18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb1a:	b085      	sub	sp, #20
   1bb1c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1bb1e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1bb22:	2210      	movs	r2, #16
   1bb24:	6889      	ldr	r1, [r1, #8]
   1bb26:	4628      	mov	r0, r5
   1bb28:	f00e feb9 	bl	2a89e <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bb2c:	f3bf 8f5b 	dmb	ish
   1bb30:	6863      	ldr	r3, [r4, #4]
   1bb32:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bb36:	f013 0f20 	tst.w	r3, #32
   1bb3a:	d009      	beq.n	1bb50 <smp_pairing_random+0x38>
   1bb3c:	1d26      	adds	r6, r4, #4
	switch (smp->method) {
   1bb3e:	7a22      	ldrb	r2, [r4, #8]
   1bb40:	2a05      	cmp	r2, #5
   1bb42:	f200 80b9 	bhi.w	1bcb8 <smp_pairing_random+0x1a0>
   1bb46:	e8df f002 	tbb	[pc, r2]
   1bb4a:	4829      	.short	0x4829
   1bb4c:	8bb70848 	.word	0x8bb70848
		return legacy_pairing_random(smp);
   1bb50:	4620      	mov	r0, r4
   1bb52:	f7ff f895 	bl	1ac80 <legacy_pairing_random>
   1bb56:	4605      	mov	r5, r0
   1bb58:	e03c      	b.n	1bbd4 <smp_pairing_random+0xbc>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1bb5a:	ab03      	add	r3, sp, #12
   1bb5c:	9300      	str	r3, [sp, #0]
   1bb5e:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1bb62:	462a      	mov	r2, r5
   1bb64:	495b      	ldr	r1, [pc, #364]	; (1bcd4 <smp_pairing_random+0x1bc>)
   1bb66:	6809      	ldr	r1, [r1, #0]
   1bb68:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1bb6c:	f7ff ff08 	bl	1b980 <smp_g2>
   1bb70:	2800      	cmp	r0, #0
   1bb72:	f040 80a7 	bne.w	1bcc4 <smp_pairing_random+0x1ac>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bb76:	f3bf 8f5b 	dmb	ish
   1bb7a:	e856 3f00 	ldrex	r3, [r6]
   1bb7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1bb82:	e846 3200 	strex	r2, r3, [r6]
   1bb86:	2a00      	cmp	r2, #0
   1bb88:	d1f7      	bne.n	1bb7a <smp_pairing_random+0x62>
   1bb8a:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1bb8e:	4b52      	ldr	r3, [pc, #328]	; (1bcd8 <smp_pairing_random+0x1c0>)
   1bb90:	681b      	ldr	r3, [r3, #0]
   1bb92:	689b      	ldr	r3, [r3, #8]
   1bb94:	9903      	ldr	r1, [sp, #12]
   1bb96:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1bb9a:	4798      	blx	r3
   1bb9c:	f3bf 8f5b 	dmb	ish
   1bba0:	e854 3f00 	ldrex	r3, [r4]
   1bba4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1bba8:	e844 3200 	strex	r2, r3, [r4]
   1bbac:	2a00      	cmp	r2, #0
   1bbae:	d1f7      	bne.n	1bba0 <smp_pairing_random+0x88>
   1bbb0:	f3bf 8f5b 	dmb	ish
   1bbb4:	f3bf 8f5b 	dmb	ish
   1bbb8:	e856 3f00 	ldrex	r3, [r6]
   1bbbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1bbc0:	e846 3200 	strex	r2, r3, [r6]
   1bbc4:	2a00      	cmp	r2, #0
   1bbc6:	d1f7      	bne.n	1bbb8 <smp_pairing_random+0xa0>
   1bbc8:	f3bf 8f5b 	dmb	ish
	return smp_send_pairing_random(smp);
   1bbcc:	4620      	mov	r0, r4
   1bbce:	f011 fae8 	bl	2d1a2 <smp_send_pairing_random>
   1bbd2:	4605      	mov	r5, r0
}
   1bbd4:	4628      	mov	r0, r5
   1bbd6:	b005      	add	sp, #20
   1bbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
   1bbda:	4620      	mov	r0, r4
   1bbdc:	f7ff fe8e 	bl	1b8fc <sc_smp_check_confirm>
		if (err) {
   1bbe0:	4605      	mov	r5, r0
   1bbe2:	2800      	cmp	r0, #0
   1bbe4:	d1f6      	bne.n	1bbd4 <smp_pairing_random+0xbc>
		atomic_set_bit(smp->allowed_cmds,
   1bbe6:	4627      	mov	r7, r4
   1bbe8:	f3bf 8f5b 	dmb	ish
   1bbec:	e854 3f00 	ldrex	r3, [r4]
   1bbf0:	f043 0308 	orr.w	r3, r3, #8
   1bbf4:	e844 3200 	strex	r2, r3, [r4]
   1bbf8:	2a00      	cmp	r2, #0
   1bbfa:	d1f7      	bne.n	1bbec <smp_pairing_random+0xd4>
   1bbfc:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_random(smp);
   1bc00:	4620      	mov	r0, r4
   1bc02:	f011 face 	bl	2d1a2 <smp_send_pairing_random>
		if (err) {
   1bc06:	4605      	mov	r5, r0
   1bc08:	2800      	cmp	r0, #0
   1bc0a:	d1e3      	bne.n	1bbd4 <smp_pairing_random+0xbc>
		smp->passkey_round++;
   1bc0c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1bc10:	3301      	adds	r3, #1
   1bc12:	b2db      	uxtb	r3, r3
   1bc14:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1bc18:	2b14      	cmp	r3, #20
   1bc1a:	d008      	beq.n	1bc2e <smp_pairing_random+0x116>
		if (bt_rand(smp->prnd, 16)) {
   1bc1c:	2110      	movs	r1, #16
   1bc1e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1bc22:	f004 fbeb 	bl	203fc <bt_rand>
   1bc26:	2800      	cmp	r0, #0
   1bc28:	d0d4      	beq.n	1bbd4 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1bc2a:	2508      	movs	r5, #8
   1bc2c:	e7d2      	b.n	1bbd4 <smp_pairing_random+0xbc>
   1bc2e:	f3bf 8f5b 	dmb	ish
   1bc32:	e857 3f00 	ldrex	r3, [r7]
   1bc36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1bc3a:	e847 3200 	strex	r2, r3, [r7]
   1bc3e:	2a00      	cmp	r2, #0
   1bc40:	d1f7      	bne.n	1bc32 <smp_pairing_random+0x11a>
   1bc42:	f3bf 8f5b 	dmb	ish
   1bc46:	f3bf 8f5b 	dmb	ish
   1bc4a:	e856 3f00 	ldrex	r3, [r6]
   1bc4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1bc52:	e846 3200 	strex	r2, r3, [r6]
   1bc56:	2a00      	cmp	r2, #0
   1bc58:	d1f7      	bne.n	1bc4a <smp_pairing_random+0x132>
   1bc5a:	f3bf 8f5b 	dmb	ish
			return 0;
   1bc5e:	e7b9      	b.n	1bbd4 <smp_pairing_random+0xbc>
		if (bt_rand(smp->prnd, 16)) {
   1bc60:	2110      	movs	r1, #16
   1bc62:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1bc66:	f004 fbc9 	bl	203fc <bt_rand>
   1bc6a:	bb68      	cbnz	r0, 1bcc8 <smp_pairing_random+0x1b0>
		if (bt_auth && bt_auth->oob_data_request) {
   1bc6c:	4b1a      	ldr	r3, [pc, #104]	; (1bcd8 <smp_pairing_random+0x1c0>)
   1bc6e:	681b      	ldr	r3, [r3, #0]
   1bc70:	b363      	cbz	r3, 1bccc <smp_pairing_random+0x1b4>
   1bc72:	68db      	ldr	r3, [r3, #12]
   1bc74:	b363      	cbz	r3, 1bcd0 <smp_pairing_random+0x1b8>
			struct bt_conn_oob_info info = {
   1bc76:	4b19      	ldr	r3, [pc, #100]	; (1bcdc <smp_pairing_random+0x1c4>)
   1bc78:	881b      	ldrh	r3, [r3, #0]
   1bc7a:	f8ad 3008 	strh.w	r3, [sp, #8]
			le_sc_oob_config_set(smp, &info);
   1bc7e:	a902      	add	r1, sp, #8
   1bc80:	4620      	mov	r0, r4
   1bc82:	f011 f874 	bl	2cd6e <le_sc_oob_config_set>
			smp->oobd_local = NULL;
   1bc86:	2500      	movs	r5, #0
   1bc88:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
			smp->oobd_remote = NULL;
   1bc8c:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
   1bc90:	f3bf 8f5b 	dmb	ish
   1bc94:	e856 3f00 	ldrex	r3, [r6]
   1bc98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1bc9c:	e846 3200 	strex	r2, r3, [r6]
   1bca0:	2a00      	cmp	r2, #0
   1bca2:	d1f7      	bne.n	1bc94 <smp_pairing_random+0x17c>
   1bca4:	f3bf 8f5b 	dmb	ish
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1bca8:	4b0b      	ldr	r3, [pc, #44]	; (1bcd8 <smp_pairing_random+0x1c0>)
   1bcaa:	681b      	ldr	r3, [r3, #0]
   1bcac:	68db      	ldr	r3, [r3, #12]
   1bcae:	a902      	add	r1, sp, #8
   1bcb0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1bcb4:	4798      	blx	r3
			return 0;
   1bcb6:	e78d      	b.n	1bbd4 <smp_pairing_random+0xbc>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bcb8:	2145      	movs	r1, #69	; 0x45
   1bcba:	4809      	ldr	r0, [pc, #36]	; (1bce0 <smp_pairing_random+0x1c8>)
   1bcbc:	f00c fee2 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1bcc0:	2508      	movs	r5, #8
   1bcc2:	e787      	b.n	1bbd4 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1bcc4:	2508      	movs	r5, #8
   1bcc6:	e785      	b.n	1bbd4 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1bcc8:	2508      	movs	r5, #8
   1bcca:	e783      	b.n	1bbd4 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1bccc:	2502      	movs	r5, #2
   1bcce:	e781      	b.n	1bbd4 <smp_pairing_random+0xbc>
   1bcd0:	2502      	movs	r5, #2
   1bcd2:	e77f      	b.n	1bbd4 <smp_pairing_random+0xbc>
   1bcd4:	2000286c 	.word	0x2000286c
   1bcd8:	200027b8 	.word	0x200027b8
   1bcdc:	0002f560 	.word	0x0002f560
   1bce0:	00032194 	.word	0x00032194

0001bce4 <smp_f6>:
{
   1bce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bce8:	b096      	sub	sp, #88	; 0x58
   1bcea:	4606      	mov	r6, r0
   1bcec:	4689      	mov	r9, r1
   1bcee:	4690      	mov	r8, r2
   1bcf0:	461c      	mov	r4, r3
   1bcf2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   1bcf4:	9d21      	ldr	r5, [sp, #132]	; 0x84
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bcf6:	ab01      	add	r3, sp, #4
   1bcf8:	4299      	cmp	r1, r3
   1bcfa:	d204      	bcs.n	1bd06 <smp_f6+0x22>
   1bcfc:	f101 0310 	add.w	r3, r1, #16
   1bd00:	aa01      	add	r2, sp, #4
   1bd02:	4293      	cmp	r3, r2
   1bd04:	d912      	bls.n	1bd2c <smp_f6+0x48>
   1bd06:	ab01      	add	r3, sp, #4
   1bd08:	4599      	cmp	r9, r3
   1bd0a:	d902      	bls.n	1bd12 <smp_f6+0x2e>
   1bd0c:	ab05      	add	r3, sp, #20
   1bd0e:	4599      	cmp	r9, r3
   1bd10:	d20c      	bcs.n	1bd2c <smp_f6+0x48>
   1bd12:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1bf60 <smp_f6+0x27c>
   1bd16:	f240 2217 	movw	r2, #535	; 0x217
   1bd1a:	4651      	mov	r1, sl
   1bd1c:	488f      	ldr	r0, [pc, #572]	; (1bf5c <smp_f6+0x278>)
   1bd1e:	f00c fb10 	bl	28342 <printk>
   1bd22:	f240 2117 	movw	r1, #535	; 0x217
   1bd26:	4650      	mov	r0, sl
   1bd28:	f00c fea4 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1bd2c:	f109 010f 	add.w	r1, r9, #15
	uint8_t *pdst = (uint8_t *)dst;
   1bd30:	ab01      	add	r3, sp, #4
	for (; length > 0; length--) {
   1bd32:	2210      	movs	r2, #16
   1bd34:	b12a      	cbz	r2, 1bd42 <smp_f6+0x5e>
		*pdst++ = *psrc--;
   1bd36:	f811 0901 	ldrb.w	r0, [r1], #-1
   1bd3a:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   1bd3e:	3a01      	subs	r2, #1
   1bd40:	e7f8      	b.n	1bd34 <smp_f6+0x50>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bd42:	ab05      	add	r3, sp, #20
   1bd44:	4598      	cmp	r8, r3
   1bd46:	d204      	bcs.n	1bd52 <smp_f6+0x6e>
   1bd48:	f108 0310 	add.w	r3, r8, #16
   1bd4c:	aa05      	add	r2, sp, #20
   1bd4e:	4293      	cmp	r3, r2
   1bd50:	d912      	bls.n	1bd78 <smp_f6+0x94>
   1bd52:	ab05      	add	r3, sp, #20
   1bd54:	4598      	cmp	r8, r3
   1bd56:	d902      	bls.n	1bd5e <smp_f6+0x7a>
   1bd58:	ab09      	add	r3, sp, #36	; 0x24
   1bd5a:	4598      	cmp	r8, r3
   1bd5c:	d20c      	bcs.n	1bd78 <smp_f6+0x94>
   1bd5e:	f8df 9200 	ldr.w	r9, [pc, #512]	; 1bf60 <smp_f6+0x27c>
   1bd62:	f240 2217 	movw	r2, #535	; 0x217
   1bd66:	4649      	mov	r1, r9
   1bd68:	487c      	ldr	r0, [pc, #496]	; (1bf5c <smp_f6+0x278>)
   1bd6a:	f00c faea 	bl	28342 <printk>
   1bd6e:	f240 2117 	movw	r1, #535	; 0x217
   1bd72:	4648      	mov	r0, r9
   1bd74:	f00c fe7e 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1bd78:	f108 020f 	add.w	r2, r8, #15
	uint8_t *pdst = (uint8_t *)dst;
   1bd7c:	ab05      	add	r3, sp, #20
	for (; length > 0; length--) {
   1bd7e:	2110      	movs	r1, #16
   1bd80:	b129      	cbz	r1, 1bd8e <smp_f6+0xaa>
		*pdst++ = *psrc--;
   1bd82:	f812 0901 	ldrb.w	r0, [r2], #-1
   1bd86:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   1bd8a:	3901      	subs	r1, #1
   1bd8c:	e7f8      	b.n	1bd80 <smp_f6+0x9c>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bd8e:	ab09      	add	r3, sp, #36	; 0x24
   1bd90:	429c      	cmp	r4, r3
   1bd92:	d204      	bcs.n	1bd9e <smp_f6+0xba>
   1bd94:	f104 0310 	add.w	r3, r4, #16
   1bd98:	aa09      	add	r2, sp, #36	; 0x24
   1bd9a:	4293      	cmp	r3, r2
   1bd9c:	d912      	bls.n	1bdc4 <smp_f6+0xe0>
   1bd9e:	ab09      	add	r3, sp, #36	; 0x24
   1bda0:	429c      	cmp	r4, r3
   1bda2:	d902      	bls.n	1bdaa <smp_f6+0xc6>
   1bda4:	ab0d      	add	r3, sp, #52	; 0x34
   1bda6:	429c      	cmp	r4, r3
   1bda8:	d20c      	bcs.n	1bdc4 <smp_f6+0xe0>
   1bdaa:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 1bf60 <smp_f6+0x27c>
   1bdae:	f240 2217 	movw	r2, #535	; 0x217
   1bdb2:	4641      	mov	r1, r8
   1bdb4:	4869      	ldr	r0, [pc, #420]	; (1bf5c <smp_f6+0x278>)
   1bdb6:	f00c fac4 	bl	28342 <printk>
   1bdba:	f240 2117 	movw	r1, #535	; 0x217
   1bdbe:	4640      	mov	r0, r8
   1bdc0:	f00c fe58 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1bdc4:	f104 030f 	add.w	r3, r4, #15
	uint8_t *pdst = (uint8_t *)dst;
   1bdc8:	aa09      	add	r2, sp, #36	; 0x24
	for (; length > 0; length--) {
   1bdca:	2110      	movs	r1, #16
   1bdcc:	e004      	b.n	1bdd8 <smp_f6+0xf4>
		*pdst++ = *psrc--;
   1bdce:	f813 0901 	ldrb.w	r0, [r3], #-1
   1bdd2:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1bdd6:	3901      	subs	r1, #1
   1bdd8:	2900      	cmp	r1, #0
   1bdda:	d1f8      	bne.n	1bdce <smp_f6+0xea>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bddc:	ab0d      	add	r3, sp, #52	; 0x34
   1bdde:	429f      	cmp	r7, r3
   1bde0:	d202      	bcs.n	1bde8 <smp_f6+0x104>
   1bde2:	1cfa      	adds	r2, r7, #3
   1bde4:	429a      	cmp	r2, r3
   1bde6:	d912      	bls.n	1be0e <smp_f6+0x12a>
   1bde8:	ab0d      	add	r3, sp, #52	; 0x34
   1bdea:	429f      	cmp	r7, r3
   1bdec:	d903      	bls.n	1bdf6 <smp_f6+0x112>
   1bdee:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   1bdf2:	429f      	cmp	r7, r3
   1bdf4:	d20b      	bcs.n	1be0e <smp_f6+0x12a>
   1bdf6:	4c5a      	ldr	r4, [pc, #360]	; (1bf60 <smp_f6+0x27c>)
   1bdf8:	f240 2217 	movw	r2, #535	; 0x217
   1bdfc:	4621      	mov	r1, r4
   1bdfe:	4857      	ldr	r0, [pc, #348]	; (1bf5c <smp_f6+0x278>)
   1be00:	f00c fa9f 	bl	28342 <printk>
   1be04:	f240 2117 	movw	r1, #535	; 0x217
   1be08:	4620      	mov	r0, r4
   1be0a:	f00c fe33 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1be0e:	1cbb      	adds	r3, r7, #2
	uint8_t *pdst = (uint8_t *)dst;
   1be10:	aa0d      	add	r2, sp, #52	; 0x34
	for (; length > 0; length--) {
   1be12:	2103      	movs	r1, #3
   1be14:	b129      	cbz	r1, 1be22 <smp_f6+0x13e>
		*pdst++ = *psrc--;
   1be16:	f813 0901 	ldrb.w	r0, [r3], #-1
   1be1a:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1be1e:	3901      	subs	r1, #1
   1be20:	e7f8      	b.n	1be14 <smp_f6+0x130>
	m[51] = a1->type;
   1be22:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   1be24:	f814 3b01 	ldrb.w	r3, [r4], #1
   1be28:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
   1be2c:	af0e      	add	r7, sp, #56	; 0x38
   1be2e:	2206      	movs	r2, #6
   1be30:	4621      	mov	r1, r4
   1be32:	4638      	mov	r0, r7
   1be34:	f00e fd33 	bl	2a89e <memcpy>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1be38:	42bc      	cmp	r4, r7
   1be3a:	d203      	bcs.n	1be44 <smp_f6+0x160>
   1be3c:	1da3      	adds	r3, r4, #6
   1be3e:	aa0e      	add	r2, sp, #56	; 0x38
   1be40:	4293      	cmp	r3, r2
   1be42:	d912      	bls.n	1be6a <smp_f6+0x186>
   1be44:	ab0e      	add	r3, sp, #56	; 0x38
   1be46:	429c      	cmp	r4, r3
   1be48:	d903      	bls.n	1be52 <smp_f6+0x16e>
   1be4a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1be4e:	429c      	cmp	r4, r3
   1be50:	d20b      	bcs.n	1be6a <smp_f6+0x186>
   1be52:	4f43      	ldr	r7, [pc, #268]	; (1bf60 <smp_f6+0x27c>)
   1be54:	f240 2217 	movw	r2, #535	; 0x217
   1be58:	4639      	mov	r1, r7
   1be5a:	4840      	ldr	r0, [pc, #256]	; (1bf5c <smp_f6+0x278>)
   1be5c:	f00c fa71 	bl	28342 <printk>
   1be60:	f240 2117 	movw	r1, #535	; 0x217
   1be64:	4638      	mov	r0, r7
   1be66:	f00c fe05 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1be6a:	1d63      	adds	r3, r4, #5
	uint8_t *pdst = (uint8_t *)dst;
   1be6c:	aa0e      	add	r2, sp, #56	; 0x38
	for (; length > 0; length--) {
   1be6e:	2106      	movs	r1, #6
   1be70:	e004      	b.n	1be7c <smp_f6+0x198>
		*pdst++ = *psrc--;
   1be72:	f813 0901 	ldrb.w	r0, [r3], #-1
   1be76:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1be7a:	3901      	subs	r1, #1
   1be7c:	2900      	cmp	r1, #0
   1be7e:	d1f8      	bne.n	1be72 <smp_f6+0x18e>
	m[58] = a2->type;
   1be80:	9c20      	ldr	r4, [sp, #128]	; 0x80
   1be82:	f814 3b01 	ldrb.w	r3, [r4], #1
   1be86:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
   1be8a:	f10d 073f 	add.w	r7, sp, #63	; 0x3f
   1be8e:	2206      	movs	r2, #6
   1be90:	4621      	mov	r1, r4
   1be92:	4638      	mov	r0, r7
   1be94:	f00e fd03 	bl	2a89e <memcpy>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1be98:	42bc      	cmp	r4, r7
   1be9a:	d204      	bcs.n	1bea6 <smp_f6+0x1c2>
   1be9c:	1da3      	adds	r3, r4, #6
   1be9e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
   1bea2:	4293      	cmp	r3, r2
   1bea4:	d913      	bls.n	1bece <smp_f6+0x1ea>
   1bea6:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
   1beaa:	429c      	cmp	r4, r3
   1beac:	d903      	bls.n	1beb6 <smp_f6+0x1d2>
   1beae:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   1beb2:	429c      	cmp	r4, r3
   1beb4:	d20b      	bcs.n	1bece <smp_f6+0x1ea>
   1beb6:	4f2a      	ldr	r7, [pc, #168]	; (1bf60 <smp_f6+0x27c>)
   1beb8:	f240 2217 	movw	r2, #535	; 0x217
   1bebc:	4639      	mov	r1, r7
   1bebe:	4827      	ldr	r0, [pc, #156]	; (1bf5c <smp_f6+0x278>)
   1bec0:	f00c fa3f 	bl	28342 <printk>
   1bec4:	f240 2117 	movw	r1, #535	; 0x217
   1bec8:	4638      	mov	r0, r7
   1beca:	f00c fdd3 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1bece:	1d63      	adds	r3, r4, #5
	uint8_t *pdst = (uint8_t *)dst;
   1bed0:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
	for (; length > 0; length--) {
   1bed4:	2106      	movs	r1, #6
   1bed6:	e004      	b.n	1bee2 <smp_f6+0x1fe>
		*pdst++ = *psrc--;
   1bed8:	f813 0901 	ldrb.w	r0, [r3], #-1
   1bedc:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1bee0:	3901      	subs	r1, #1
   1bee2:	2900      	cmp	r1, #0
   1bee4:	d1f8      	bne.n	1bed8 <smp_f6+0x1f4>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bee6:	ab12      	add	r3, sp, #72	; 0x48
   1bee8:	429e      	cmp	r6, r3
   1beea:	d204      	bcs.n	1bef6 <smp_f6+0x212>
   1beec:	f106 0310 	add.w	r3, r6, #16
   1bef0:	aa12      	add	r2, sp, #72	; 0x48
   1bef2:	4293      	cmp	r3, r2
   1bef4:	d911      	bls.n	1bf1a <smp_f6+0x236>
   1bef6:	ab12      	add	r3, sp, #72	; 0x48
   1bef8:	429e      	cmp	r6, r3
   1befa:	d902      	bls.n	1bf02 <smp_f6+0x21e>
   1befc:	ab16      	add	r3, sp, #88	; 0x58
   1befe:	429e      	cmp	r6, r3
   1bf00:	d20b      	bcs.n	1bf1a <smp_f6+0x236>
   1bf02:	4c17      	ldr	r4, [pc, #92]	; (1bf60 <smp_f6+0x27c>)
   1bf04:	f240 2217 	movw	r2, #535	; 0x217
   1bf08:	4621      	mov	r1, r4
   1bf0a:	4814      	ldr	r0, [pc, #80]	; (1bf5c <smp_f6+0x278>)
   1bf0c:	f00c fa19 	bl	28342 <printk>
   1bf10:	f240 2117 	movw	r1, #535	; 0x217
   1bf14:	4620      	mov	r0, r4
   1bf16:	f00c fdad 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1bf1a:	f106 000f 	add.w	r0, r6, #15
	uint8_t *pdst = (uint8_t *)dst;
   1bf1e:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
   1bf20:	2410      	movs	r4, #16
   1bf22:	e004      	b.n	1bf2e <smp_f6+0x24a>
		*pdst++ = *psrc--;
   1bf24:	f810 2901 	ldrb.w	r2, [r0], #-1
   1bf28:	f803 2b01 	strb.w	r2, [r3], #1
	for (; length > 0; length--) {
   1bf2c:	3c01      	subs	r4, #1
   1bf2e:	2c00      	cmp	r4, #0
   1bf30:	d1f8      	bne.n	1bf24 <smp_f6+0x240>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1bf32:	462b      	mov	r3, r5
   1bf34:	2241      	movs	r2, #65	; 0x41
   1bf36:	a901      	add	r1, sp, #4
   1bf38:	a812      	add	r0, sp, #72	; 0x48
   1bf3a:	f011 f968 	bl	2d20e <bt_smp_aes_cmac>
	if (err) {
   1bf3e:	b948      	cbnz	r0, 1bf54 <smp_f6+0x270>
	for (i = 0; i < (length/2); i++) {
   1bf40:	2c07      	cmp	r4, #7
   1bf42:	d807      	bhi.n	1bf54 <smp_f6+0x270>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1bf44:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1bf46:	f1c4 030f 	rsb	r3, r4, #15
   1bf4a:	5ce9      	ldrb	r1, [r5, r3]
   1bf4c:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1bf4e:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
   1bf50:	3401      	adds	r4, #1
   1bf52:	e7f5      	b.n	1bf40 <smp_f6+0x25c>
}
   1bf54:	b016      	add	sp, #88	; 0x58
   1bf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bf5a:	bf00      	nop
   1bf5c:	0002f968 	.word	0x0002f968
   1bf60:	000305b4 	.word	0x000305b4

0001bf64 <smp_f5>:
{
   1bf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf68:	b09a      	sub	sp, #104	; 0x68
   1bf6a:	4604      	mov	r4, r0
   1bf6c:	460f      	mov	r7, r1
   1bf6e:	4616      	mov	r6, r2
   1bf70:	461d      	mov	r5, r3
   1bf72:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   1bf76:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	uint8_t m[53] = { 0x00, /* counter */
   1bf7a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   1bf7e:	f8df e250 	ldr.w	lr, [pc, #592]	; 1c1d0 <smp_f5+0x26c>
   1bf82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1bf86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bf8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1bf8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bf92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1bf96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bf9a:	e89e 0003 	ldmia.w	lr, {r0, r1}
   1bf9e:	f84c 0b04 	str.w	r0, [ip], #4
   1bfa2:	f88c 1000 	strb.w	r1, [ip]
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bfa6:	466b      	mov	r3, sp
   1bfa8:	429c      	cmp	r4, r3
   1bfaa:	d204      	bcs.n	1bfb6 <smp_f5+0x52>
   1bfac:	f104 0320 	add.w	r3, r4, #32
   1bfb0:	466a      	mov	r2, sp
   1bfb2:	4293      	cmp	r3, r2
   1bfb4:	d912      	bls.n	1bfdc <smp_f5+0x78>
   1bfb6:	466b      	mov	r3, sp
   1bfb8:	429c      	cmp	r4, r3
   1bfba:	d902      	bls.n	1bfc2 <smp_f5+0x5e>
   1bfbc:	ab08      	add	r3, sp, #32
   1bfbe:	429c      	cmp	r4, r3
   1bfc0:	d20c      	bcs.n	1bfdc <smp_f5+0x78>
   1bfc2:	f8df a208 	ldr.w	sl, [pc, #520]	; 1c1cc <smp_f5+0x268>
   1bfc6:	f240 2217 	movw	r2, #535	; 0x217
   1bfca:	4651      	mov	r1, sl
   1bfcc:	487d      	ldr	r0, [pc, #500]	; (1c1c4 <smp_f5+0x260>)
   1bfce:	f00c f9b8 	bl	28342 <printk>
   1bfd2:	f240 2117 	movw	r1, #535	; 0x217
   1bfd6:	4650      	mov	r0, sl
   1bfd8:	f00c fd4c 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1bfdc:	f104 001f 	add.w	r0, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
   1bfe0:	466b      	mov	r3, sp
	for (; length > 0; length--) {
   1bfe2:	2220      	movs	r2, #32
   1bfe4:	b12a      	cbz	r2, 1bff2 <smp_f5+0x8e>
		*pdst++ = *psrc--;
   1bfe6:	f810 1901 	ldrb.w	r1, [r0], #-1
   1bfea:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1bfee:	3a01      	subs	r2, #1
   1bff0:	e7f8      	b.n	1bfe4 <smp_f5+0x80>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1bff2:	ab08      	add	r3, sp, #32
   1bff4:	2220      	movs	r2, #32
   1bff6:	4669      	mov	r1, sp
   1bff8:	4873      	ldr	r0, [pc, #460]	; (1c1c8 <smp_f5+0x264>)
   1bffa:	f011 f908 	bl	2d20e <bt_smp_aes_cmac>
	if (err) {
   1bffe:	b110      	cbz	r0, 1c006 <smp_f5+0xa2>
}
   1c000:	b01a      	add	sp, #104	; 0x68
   1c002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1c006:	f10d 0335 	add.w	r3, sp, #53	; 0x35
   1c00a:	429f      	cmp	r7, r3
   1c00c:	d205      	bcs.n	1c01a <smp_f5+0xb6>
   1c00e:	f107 0310 	add.w	r3, r7, #16
   1c012:	f10d 0235 	add.w	r2, sp, #53	; 0x35
   1c016:	4293      	cmp	r3, r2
   1c018:	d913      	bls.n	1c042 <smp_f5+0xde>
   1c01a:	f10d 0335 	add.w	r3, sp, #53	; 0x35
   1c01e:	429f      	cmp	r7, r3
   1c020:	d903      	bls.n	1c02a <smp_f5+0xc6>
   1c022:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   1c026:	429f      	cmp	r7, r3
   1c028:	d20b      	bcs.n	1c042 <smp_f5+0xde>
   1c02a:	4c68      	ldr	r4, [pc, #416]	; (1c1cc <smp_f5+0x268>)
   1c02c:	f240 2217 	movw	r2, #535	; 0x217
   1c030:	4621      	mov	r1, r4
   1c032:	4864      	ldr	r0, [pc, #400]	; (1c1c4 <smp_f5+0x260>)
   1c034:	f00c f985 	bl	28342 <printk>
   1c038:	f240 2117 	movw	r1, #535	; 0x217
   1c03c:	4620      	mov	r0, r4
   1c03e:	f00c fd19 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1c042:	370f      	adds	r7, #15
	uint8_t *pdst = (uint8_t *)dst;
   1c044:	f10d 0335 	add.w	r3, sp, #53	; 0x35
	for (; length > 0; length--) {
   1c048:	2210      	movs	r2, #16
   1c04a:	e004      	b.n	1c056 <smp_f5+0xf2>
		*pdst++ = *psrc--;
   1c04c:	f817 1901 	ldrb.w	r1, [r7], #-1
   1c050:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1c054:	3a01      	subs	r2, #1
   1c056:	2a00      	cmp	r2, #0
   1c058:	d1f8      	bne.n	1c04c <smp_f5+0xe8>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1c05a:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   1c05e:	429e      	cmp	r6, r3
   1c060:	d205      	bcs.n	1c06e <smp_f5+0x10a>
   1c062:	f106 0310 	add.w	r3, r6, #16
   1c066:	f10d 0245 	add.w	r2, sp, #69	; 0x45
   1c06a:	4293      	cmp	r3, r2
   1c06c:	d913      	bls.n	1c096 <smp_f5+0x132>
   1c06e:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   1c072:	429e      	cmp	r6, r3
   1c074:	d903      	bls.n	1c07e <smp_f5+0x11a>
   1c076:	f10d 0355 	add.w	r3, sp, #85	; 0x55
   1c07a:	429e      	cmp	r6, r3
   1c07c:	d20b      	bcs.n	1c096 <smp_f5+0x132>
   1c07e:	4c53      	ldr	r4, [pc, #332]	; (1c1cc <smp_f5+0x268>)
   1c080:	f240 2217 	movw	r2, #535	; 0x217
   1c084:	4621      	mov	r1, r4
   1c086:	484f      	ldr	r0, [pc, #316]	; (1c1c4 <smp_f5+0x260>)
   1c088:	f00c f95b 	bl	28342 <printk>
   1c08c:	f240 2117 	movw	r1, #535	; 0x217
   1c090:	4620      	mov	r0, r4
   1c092:	f00c fcef 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1c096:	360f      	adds	r6, #15
	uint8_t *pdst = (uint8_t *)dst;
   1c098:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	for (; length > 0; length--) {
   1c09c:	2210      	movs	r2, #16
   1c09e:	b12a      	cbz	r2, 1c0ac <smp_f5+0x148>
		*pdst++ = *psrc--;
   1c0a0:	f816 1901 	ldrb.w	r1, [r6], #-1
   1c0a4:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1c0a8:	3a01      	subs	r2, #1
   1c0aa:	e7f8      	b.n	1c09e <smp_f5+0x13a>
	m[37] = a1->type;
   1c0ac:	f815 3b01 	ldrb.w	r3, [r5], #1
   1c0b0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1c0b4:	f10d 0356 	add.w	r3, sp, #86	; 0x56
   1c0b8:	429d      	cmp	r5, r3
   1c0ba:	d204      	bcs.n	1c0c6 <smp_f5+0x162>
   1c0bc:	1dab      	adds	r3, r5, #6
   1c0be:	f10d 0256 	add.w	r2, sp, #86	; 0x56
   1c0c2:	4293      	cmp	r3, r2
   1c0c4:	d912      	bls.n	1c0ec <smp_f5+0x188>
   1c0c6:	f10d 0356 	add.w	r3, sp, #86	; 0x56
   1c0ca:	429d      	cmp	r5, r3
   1c0cc:	d902      	bls.n	1c0d4 <smp_f5+0x170>
   1c0ce:	ab17      	add	r3, sp, #92	; 0x5c
   1c0d0:	429d      	cmp	r5, r3
   1c0d2:	d20b      	bcs.n	1c0ec <smp_f5+0x188>
   1c0d4:	4c3d      	ldr	r4, [pc, #244]	; (1c1cc <smp_f5+0x268>)
   1c0d6:	f240 2217 	movw	r2, #535	; 0x217
   1c0da:	4621      	mov	r1, r4
   1c0dc:	4839      	ldr	r0, [pc, #228]	; (1c1c4 <smp_f5+0x260>)
   1c0de:	f00c f930 	bl	28342 <printk>
   1c0e2:	f240 2117 	movw	r1, #535	; 0x217
   1c0e6:	4620      	mov	r0, r4
   1c0e8:	f00c fcc4 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1c0ec:	3505      	adds	r5, #5
	uint8_t *pdst = (uint8_t *)dst;
   1c0ee:	f10d 0356 	add.w	r3, sp, #86	; 0x56
	for (; length > 0; length--) {
   1c0f2:	2206      	movs	r2, #6
   1c0f4:	b12a      	cbz	r2, 1c102 <smp_f5+0x19e>
		*pdst++ = *psrc--;
   1c0f6:	f815 1901 	ldrb.w	r1, [r5], #-1
   1c0fa:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1c0fe:	3a01      	subs	r2, #1
   1c100:	e7f8      	b.n	1c0f4 <smp_f5+0x190>
	m[44] = a2->type;
   1c102:	9c22      	ldr	r4, [sp, #136]	; 0x88
   1c104:	f814 3b01 	ldrb.w	r3, [r4], #1
   1c108:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1c10c:	f10d 035d 	add.w	r3, sp, #93	; 0x5d
   1c110:	429c      	cmp	r4, r3
   1c112:	d204      	bcs.n	1c11e <smp_f5+0x1ba>
   1c114:	1da3      	adds	r3, r4, #6
   1c116:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
   1c11a:	4293      	cmp	r3, r2
   1c11c:	d913      	bls.n	1c146 <smp_f5+0x1e2>
   1c11e:	f10d 035d 	add.w	r3, sp, #93	; 0x5d
   1c122:	429c      	cmp	r4, r3
   1c124:	d903      	bls.n	1c12e <smp_f5+0x1ca>
   1c126:	f10d 0363 	add.w	r3, sp, #99	; 0x63
   1c12a:	429c      	cmp	r4, r3
   1c12c:	d20b      	bcs.n	1c146 <smp_f5+0x1e2>
   1c12e:	4d27      	ldr	r5, [pc, #156]	; (1c1cc <smp_f5+0x268>)
   1c130:	f240 2217 	movw	r2, #535	; 0x217
   1c134:	4629      	mov	r1, r5
   1c136:	4823      	ldr	r0, [pc, #140]	; (1c1c4 <smp_f5+0x260>)
   1c138:	f00c f903 	bl	28342 <printk>
   1c13c:	f240 2117 	movw	r1, #535	; 0x217
   1c140:	4628      	mov	r0, r5
   1c142:	f00c fc97 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   1c146:	1d63      	adds	r3, r4, #5
	uint8_t *pdst = (uint8_t *)dst;
   1c148:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
	for (; length > 0; length--) {
   1c14c:	2406      	movs	r4, #6
   1c14e:	e004      	b.n	1c15a <smp_f5+0x1f6>
		*pdst++ = *psrc--;
   1c150:	f813 1901 	ldrb.w	r1, [r3], #-1
   1c154:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1c158:	3c01      	subs	r4, #1
   1c15a:	2c00      	cmp	r4, #0
   1c15c:	d1f8      	bne.n	1c150 <smp_f5+0x1ec>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1c15e:	4643      	mov	r3, r8
   1c160:	2235      	movs	r2, #53	; 0x35
   1c162:	a90c      	add	r1, sp, #48	; 0x30
   1c164:	a808      	add	r0, sp, #32
   1c166:	f011 f852 	bl	2d20e <bt_smp_aes_cmac>
	if (err) {
   1c16a:	2800      	cmp	r0, #0
   1c16c:	f47f af48 	bne.w	1c000 <smp_f5+0x9c>
	for (i = 0; i < (length/2); i++) {
   1c170:	4623      	mov	r3, r4
   1c172:	e00a      	b.n	1c18a <smp_f5+0x226>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c174:	f818 1003 	ldrb.w	r1, [r8, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c178:	f1c3 020f 	rsb	r2, r3, #15
   1c17c:	f818 0002 	ldrb.w	r0, [r8, r2]
   1c180:	f808 0003 	strb.w	r0, [r8, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c184:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
   1c188:	3301      	adds	r3, #1
   1c18a:	2b07      	cmp	r3, #7
   1c18c:	d9f2      	bls.n	1c174 <smp_f5+0x210>
	m[0] = 0x01;
   1c18e:	2301      	movs	r3, #1
   1c190:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1c194:	464b      	mov	r3, r9
   1c196:	2235      	movs	r2, #53	; 0x35
   1c198:	a90c      	add	r1, sp, #48	; 0x30
   1c19a:	a808      	add	r0, sp, #32
   1c19c:	f011 f837 	bl	2d20e <bt_smp_aes_cmac>
	if (err) {
   1c1a0:	2800      	cmp	r0, #0
   1c1a2:	f47f af2d 	bne.w	1c000 <smp_f5+0x9c>
   1c1a6:	2c07      	cmp	r4, #7
   1c1a8:	f63f af2a 	bhi.w	1c000 <smp_f5+0x9c>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c1ac:	f819 2004 	ldrb.w	r2, [r9, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c1b0:	f1c4 030f 	rsb	r3, r4, #15
   1c1b4:	f819 1003 	ldrb.w	r1, [r9, r3]
   1c1b8:	f809 1004 	strb.w	r1, [r9, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c1bc:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
   1c1c0:	3401      	adds	r4, #1
   1c1c2:	e7f0      	b.n	1c1a6 <smp_f5+0x242>
   1c1c4:	0002f968 	.word	0x0002f968
   1c1c8:	000324f0 	.word	0x000324f0
   1c1cc:	000305b4 	.word	0x000305b4
   1c1d0:	0002f564 	.word	0x0002f564

0001c1d4 <compute_and_check_and_send_periph_dhcheck>:
{
   1c1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1d6:	b091      	sub	sp, #68	; 0x44
   1c1d8:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1c1da:	2210      	movs	r2, #16
   1c1dc:	2100      	movs	r1, #0
   1c1de:	eb0d 0002 	add.w	r0, sp, r2
   1c1e2:	f00e fb80 	bl	2a8e6 <memset>
	switch (smp->method) {
   1c1e6:	7a22      	ldrb	r2, [r4, #8]
   1c1e8:	2a05      	cmp	r2, #5
   1c1ea:	d873      	bhi.n	1c2d4 <compute_and_check_and_send_periph_dhcheck+0x100>
   1c1ec:	e8df f002 	tbb	[pc, r2]
   1c1f0:	09030309 	.word	0x09030309
   1c1f4:	6872      	.short	0x6872
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1c1f6:	2204      	movs	r2, #4
   1c1f8:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1c1fc:	a804      	add	r0, sp, #16
   1c1fe:	f00e fb4e 	bl	2a89e <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1c202:	f104 0637 	add.w	r6, r4, #55	; 0x37
   1c206:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.init_addr,
   1c20a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1c20e:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   1c212:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
		   smp->tk)) {
   1c216:	f104 0147 	add.w	r1, r4, #71	; 0x47
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1c21a:	9102      	str	r1, [sp, #8]
   1c21c:	9501      	str	r5, [sp, #4]
   1c21e:	9200      	str	r2, [sp, #0]
   1c220:	3397      	adds	r3, #151	; 0x97
   1c222:	463a      	mov	r2, r7
   1c224:	4631      	mov	r1, r6
   1c226:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1c22a:	f7ff fe9b 	bl	1bf64 <smp_f5>
   1c22e:	2800      	cmp	r0, #0
   1c230:	d156      	bne.n	1c2e0 <compute_and_check_and_send_periph_dhcheck+0x10c>
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1c232:	f104 0211 	add.w	r2, r4, #17
		   &smp->chan.chan.conn->le.resp_addr,
   1c236:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c23a:	f103 019e 	add.w	r1, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1c23e:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1c240:	a808      	add	r0, sp, #32
   1c242:	9003      	str	r0, [sp, #12]
   1c244:	9302      	str	r3, [sp, #8]
   1c246:	9101      	str	r1, [sp, #4]
   1c248:	9200      	str	r2, [sp, #0]
   1c24a:	ab04      	add	r3, sp, #16
   1c24c:	4632      	mov	r2, r6
   1c24e:	4639      	mov	r1, r7
   1c250:	4628      	mov	r0, r5
   1c252:	f7ff fd47 	bl	1bce4 <smp_f6>
   1c256:	2800      	cmp	r0, #0
   1c258:	d148      	bne.n	1c2ec <compute_and_check_and_send_periph_dhcheck+0x118>
	if (smp->method == LE_SC_OOB) {
   1c25a:	7a23      	ldrb	r3, [r4, #8]
   1c25c:	2b05      	cmp	r3, #5
   1c25e:	d04b      	beq.n	1c2f8 <compute_and_check_and_send_periph_dhcheck+0x124>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1c260:	f104 020a 	add.w	r2, r4, #10
		   &smp->chan.chan.conn->le.init_addr,
   1c264:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c268:	f103 0197 	add.w	r1, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1c26c:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1c26e:	a80c      	add	r0, sp, #48	; 0x30
   1c270:	9003      	str	r0, [sp, #12]
   1c272:	9302      	str	r3, [sp, #8]
   1c274:	9101      	str	r1, [sp, #4]
   1c276:	9200      	str	r2, [sp, #0]
   1c278:	ab04      	add	r3, sp, #16
   1c27a:	463a      	mov	r2, r7
   1c27c:	4631      	mov	r1, r6
   1c27e:	4628      	mov	r0, r5
   1c280:	f7ff fd30 	bl	1bce4 <smp_f6>
   1c284:	2800      	cmp	r0, #0
   1c286:	d147      	bne.n	1c318 <compute_and_check_and_send_periph_dhcheck+0x144>
	if (memcmp(smp->e, re, 16)) {
   1c288:	2210      	movs	r2, #16
   1c28a:	a90c      	add	r1, sp, #48	; 0x30
   1c28c:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1c290:	f00e fad8 	bl	2a844 <memcmp>
   1c294:	2800      	cmp	r0, #0
   1c296:	d145      	bne.n	1c324 <compute_and_check_and_send_periph_dhcheck+0x150>
	err = sc_smp_send_dhkey_check(smp, e);
   1c298:	a908      	add	r1, sp, #32
   1c29a:	4620      	mov	r0, r4
   1c29c:	f010 ff66 	bl	2d16c <sc_smp_send_dhkey_check>
	if (err) {
   1c2a0:	b960      	cbnz	r0, 1c2bc <compute_and_check_and_send_periph_dhcheck+0xe8>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c2a2:	3404      	adds	r4, #4
   1c2a4:	f3bf 8f5b 	dmb	ish
   1c2a8:	e854 3f00 	ldrex	r3, [r4]
   1c2ac:	f043 0302 	orr.w	r3, r3, #2
   1c2b0:	e844 3200 	strex	r2, r3, [r4]
   1c2b4:	2a00      	cmp	r2, #0
   1c2b6:	d1f7      	bne.n	1c2a8 <compute_and_check_and_send_periph_dhcheck+0xd4>
   1c2b8:	f3bf 8f5b 	dmb	ish
}
   1c2bc:	b011      	add	sp, #68	; 0x44
   1c2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->oobd_remote) {
   1c2c0:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1c2c4:	2900      	cmp	r1, #0
   1c2c6:	d09c      	beq.n	1c202 <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1c2c8:	2210      	movs	r2, #16
   1c2ca:	eb0d 0002 	add.w	r0, sp, r2
   1c2ce:	f00e fae6 	bl	2a89e <memcpy>
   1c2d2:	e796      	b.n	1c202 <compute_and_check_and_send_periph_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c2d4:	2145      	movs	r1, #69	; 0x45
   1c2d6:	4814      	ldr	r0, [pc, #80]	; (1c328 <compute_and_check_and_send_periph_dhcheck+0x154>)
   1c2d8:	f00c fbd4 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1c2dc:	2008      	movs	r0, #8
   1c2de:	e7ed      	b.n	1c2bc <compute_and_check_and_send_periph_dhcheck+0xe8>
		BT_ERR("Calculate LTK failed");
   1c2e0:	2145      	movs	r1, #69	; 0x45
   1c2e2:	4812      	ldr	r0, [pc, #72]	; (1c32c <compute_and_check_and_send_periph_dhcheck+0x158>)
   1c2e4:	f00c fbce 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1c2e8:	2008      	movs	r0, #8
   1c2ea:	e7e7      	b.n	1c2bc <compute_and_check_and_send_periph_dhcheck+0xe8>
		BT_ERR("Calculate local DHKey check failed");
   1c2ec:	2145      	movs	r1, #69	; 0x45
   1c2ee:	4810      	ldr	r0, [pc, #64]	; (1c330 <compute_and_check_and_send_periph_dhcheck+0x15c>)
   1c2f0:	f00c fbc8 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1c2f4:	2008      	movs	r0, #8
   1c2f6:	e7e1      	b.n	1c2bc <compute_and_check_and_send_periph_dhcheck+0xe8>
		if (smp->oobd_local) {
   1c2f8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1c2fc:	b129      	cbz	r1, 1c30a <compute_and_check_and_send_periph_dhcheck+0x136>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1c2fe:	2210      	movs	r2, #16
   1c300:	eb0d 0002 	add.w	r0, sp, r2
   1c304:	f00e facb 	bl	2a89e <memcpy>
   1c308:	e7aa      	b.n	1c260 <compute_and_check_and_send_periph_dhcheck+0x8c>
			memset(r, 0, sizeof(r));
   1c30a:	2210      	movs	r2, #16
   1c30c:	2100      	movs	r1, #0
   1c30e:	eb0d 0002 	add.w	r0, sp, r2
   1c312:	f00e fae8 	bl	2a8e6 <memset>
   1c316:	e7a3      	b.n	1c260 <compute_and_check_and_send_periph_dhcheck+0x8c>
		BT_ERR("Calculate remote DHKey check failed");
   1c318:	2145      	movs	r1, #69	; 0x45
   1c31a:	4806      	ldr	r0, [pc, #24]	; (1c334 <compute_and_check_and_send_periph_dhcheck+0x160>)
   1c31c:	f00c fbb2 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1c320:	2008      	movs	r0, #8
   1c322:	e7cb      	b.n	1c2bc <compute_and_check_and_send_periph_dhcheck+0xe8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1c324:	200b      	movs	r0, #11
   1c326:	e7c9      	b.n	1c2bc <compute_and_check_and_send_periph_dhcheck+0xe8>
   1c328:	00032194 	.word	0x00032194
   1c32c:	00032240 	.word	0x00032240
   1c330:	0003225c 	.word	0x0003225c
   1c334:	00032284 	.word	0x00032284

0001c338 <smp_pairing_complete>:
{
   1c338:	b570      	push	{r4, r5, r6, lr}
   1c33a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1c33c:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	if (!status) {
   1c340:	2900      	cmp	r1, #0
   1c342:	d037      	beq.n	1c3b4 <smp_pairing_complete+0x7c>
   1c344:	4608      	mov	r0, r1
		enum bt_security_err security_err = security_err_get(status);
   1c346:	f010 fcad 	bl	2cca4 <security_err_get>
   1c34a:	4606      	mov	r6, r0
		if (conn->le.keys &&
   1c34c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c350:	b183      	cbz	r3, 1c374 <smp_pairing_complete+0x3c>
		    (!conn->le.keys->enc_size ||
   1c352:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys &&
   1c354:	b13b      	cbz	r3, 1c366 <smp_pairing_complete+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c356:	f3bf 8f5b 	dmb	ish
   1c35a:	6863      	ldr	r3, [r4, #4]
   1c35c:	f3bf 8f5b 	dmb	ish
		    (!conn->le.keys->enc_size ||
   1c360:	f013 0f04 	tst.w	r3, #4
   1c364:	d006      	beq.n	1c374 <smp_pairing_complete+0x3c>
			bt_keys_clear(conn->le.keys);
   1c366:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1c36a:	f000 fc57 	bl	1cc1c <bt_keys_clear>
			conn->le.keys = NULL;
   1c36e:	2300      	movs	r3, #0
   1c370:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
   1c374:	f3bf 8f5b 	dmb	ish
   1c378:	6863      	ldr	r3, [r4, #4]
   1c37a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c37e:	f013 0f04 	tst.w	r3, #4
   1c382:	d031      	beq.n	1c3e8 <smp_pairing_complete+0xb0>
   1c384:	f3bf 8f5b 	dmb	ish
   1c388:	6863      	ldr	r3, [r4, #4]
   1c38a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1c38e:	f013 0f08 	tst.w	r3, #8
   1c392:	d007      	beq.n	1c3a4 <smp_pairing_complete+0x6c>
   1c394:	4b1b      	ldr	r3, [pc, #108]	; (1c404 <smp_pairing_complete+0xcc>)
   1c396:	681b      	ldr	r3, [r3, #0]
   1c398:	b123      	cbz	r3, 1c3a4 <smp_pairing_complete+0x6c>
		    bt_auth && bt_auth->pairing_failed) {
   1c39a:	69db      	ldr	r3, [r3, #28]
   1c39c:	b113      	cbz	r3, 1c3a4 <smp_pairing_complete+0x6c>
			bt_auth->pairing_failed(conn, security_err);
   1c39e:	4631      	mov	r1, r6
   1c3a0:	4628      	mov	r0, r5
   1c3a2:	4798      	blx	r3
	smp_reset(smp);
   1c3a4:	4620      	mov	r0, r4
   1c3a6:	f010 fdaf 	bl	2cf08 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1c3aa:	7a6a      	ldrb	r2, [r5, #9]
   1c3ac:	7aab      	ldrb	r3, [r5, #10]
   1c3ae:	429a      	cmp	r2, r3
   1c3b0:	d123      	bne.n	1c3fa <smp_pairing_complete+0xc2>
}
   1c3b2:	bd70      	pop	{r4, r5, r6, pc}
   1c3b4:	f3bf 8f5b 	dmb	ish
   1c3b8:	6846      	ldr	r6, [r0, #4]
   1c3ba:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c3be:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   1c3c2:	f3c6 3640 	ubfx	r6, r6, #13, #1
		if (bond_flag) {
   1c3c6:	d10a      	bne.n	1c3de <smp_pairing_complete+0xa6>
		if (bt_auth && bt_auth->pairing_complete) {
   1c3c8:	4b0e      	ldr	r3, [pc, #56]	; (1c404 <smp_pairing_complete+0xcc>)
   1c3ca:	681b      	ldr	r3, [r3, #0]
   1c3cc:	2b00      	cmp	r3, #0
   1c3ce:	d0e9      	beq.n	1c3a4 <smp_pairing_complete+0x6c>
   1c3d0:	699b      	ldr	r3, [r3, #24]
   1c3d2:	2b00      	cmp	r3, #0
   1c3d4:	d0e6      	beq.n	1c3a4 <smp_pairing_complete+0x6c>
			bt_auth->pairing_complete(conn, bond_flag);
   1c3d6:	4631      	mov	r1, r6
   1c3d8:	4628      	mov	r0, r5
   1c3da:	4798      	blx	r3
   1c3dc:	e7e2      	b.n	1c3a4 <smp_pairing_complete+0x6c>
			bt_keys_store(conn->le.keys);
   1c3de:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1c3e2:	f000 fcd3 	bl	1cd8c <bt_keys_store>
   1c3e6:	e7ef      	b.n	1c3c8 <smp_pairing_complete+0x90>
			bt_conn_security_changed(conn,
   1c3e8:	4630      	mov	r0, r6
   1c3ea:	f010 fc93 	bl	2cd14 <hci_err_get>
   1c3ee:	4601      	mov	r1, r0
   1c3f0:	4632      	mov	r2, r6
   1c3f2:	4628      	mov	r0, r5
   1c3f4:	f7fb fb8e 	bl	17b14 <bt_conn_security_changed>
   1c3f8:	e7c4      	b.n	1c384 <smp_pairing_complete+0x4c>
		bt_smp_start_security(conn);
   1c3fa:	4628      	mov	r0, r5
   1c3fc:	f011 f970 	bl	2d6e0 <bt_smp_start_security>
}
   1c400:	e7d7      	b.n	1c3b2 <smp_pairing_complete+0x7a>
   1c402:	bf00      	nop
   1c404:	200027b8 	.word	0x200027b8

0001c408 <bt_smp_recv>:
{
   1c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1c40a:	898b      	ldrh	r3, [r1, #12]
   1c40c:	2b00      	cmp	r3, #0
   1c40e:	d046      	beq.n	1c49e <bt_smp_recv+0x96>
   1c410:	4604      	mov	r4, r0
   1c412:	460d      	mov	r5, r1
   1c414:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	return net_buf_simple_pull_mem(&buf->b, len);
   1c418:	2101      	movs	r1, #1
   1c41a:	f105 0008 	add.w	r0, r5, #8
   1c41e:	f000 ff33 	bl	1d288 <net_buf_simple_pull_mem>
   1c422:	4607      	mov	r7, r0
   1c424:	f3bf 8f5b 	dmb	ish
   1c428:	f854 3cec 	ldr.w	r3, [r4, #-236]
   1c42c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c430:	f013 0f10 	tst.w	r3, #16
   1c434:	d139      	bne.n	1c4aa <bt_smp_recv+0xa2>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1c436:	7802      	ldrb	r2, [r0, #0]
   1c438:	2a0e      	cmp	r2, #14
   1c43a:	d83c      	bhi.n	1c4b6 <bt_smp_recv+0xae>
	if (!handlers[hdr->code].func) {
   1c43c:	4b30      	ldr	r3, [pc, #192]	; (1c500 <bt_smp_recv+0xf8>)
   1c43e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   1c442:	2b00      	cmp	r3, #0
   1c444:	d03c      	beq.n	1c4c0 <bt_smp_recv+0xb8>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1c446:	3cf0      	subs	r4, #240	; 0xf0
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c448:	f002 011f 	and.w	r1, r2, #31
   1c44c:	2301      	movs	r3, #1
   1c44e:	408b      	lsls	r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c450:	0952      	lsrs	r2, r2, #5
   1c452:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1c456:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c458:	f3bf 8f5b 	dmb	ish
   1c45c:	e854 2f00 	ldrex	r2, [r4]
   1c460:	ea02 0001 	and.w	r0, r2, r1
   1c464:	e844 0c00 	strex	ip, r0, [r4]
   1c468:	f1bc 0f00 	cmp.w	ip, #0
   1c46c:	d1f6      	bne.n	1c45c <bt_smp_recv+0x54>
   1c46e:	f3bf 8f5b 	dmb	ish
   1c472:	4213      	tst	r3, r2
   1c474:	d02d      	beq.n	1c4d2 <bt_smp_recv+0xca>
	if (buf->len != handlers[hdr->code].expect_len) {
   1c476:	89aa      	ldrh	r2, [r5, #12]
   1c478:	783b      	ldrb	r3, [r7, #0]
   1c47a:	4921      	ldr	r1, [pc, #132]	; (1c500 <bt_smp_recv+0xf8>)
   1c47c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1c480:	7909      	ldrb	r1, [r1, #4]
   1c482:	428a      	cmp	r2, r1
   1c484:	d132      	bne.n	1c4ec <bt_smp_recv+0xe4>
	err = handlers[hdr->code].func(smp, buf);
   1c486:	4a1e      	ldr	r2, [pc, #120]	; (1c500 <bt_smp_recv+0xf8>)
   1c488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   1c48c:	4629      	mov	r1, r5
   1c48e:	4630      	mov	r0, r6
   1c490:	4798      	blx	r3
	if (err) {
   1c492:	4601      	mov	r1, r0
   1c494:	b138      	cbz	r0, 1c4a6 <bt_smp_recv+0x9e>
		smp_error(smp, err);
   1c496:	4630      	mov	r0, r6
   1c498:	f011 f92c 	bl	2d6f4 <smp_error>
   1c49c:	e003      	b.n	1c4a6 <bt_smp_recv+0x9e>
		BT_ERR("Too small SMP PDU received");
   1c49e:	2145      	movs	r1, #69	; 0x45
   1c4a0:	4818      	ldr	r0, [pc, #96]	; (1c504 <bt_smp_recv+0xfc>)
   1c4a2:	f00c faef 	bl	28a84 <z_log_minimal_printk>
}
   1c4a6:	2000      	movs	r0, #0
   1c4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1c4aa:	7802      	ldrb	r2, [r0, #0]
   1c4ac:	2157      	movs	r1, #87	; 0x57
   1c4ae:	4816      	ldr	r0, [pc, #88]	; (1c508 <bt_smp_recv+0x100>)
   1c4b0:	f00c fae8 	bl	28a84 <z_log_minimal_printk>
		return 0;
   1c4b4:	e7f7      	b.n	1c4a6 <bt_smp_recv+0x9e>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c4b6:	2157      	movs	r1, #87	; 0x57
   1c4b8:	4814      	ldr	r0, [pc, #80]	; (1c50c <bt_smp_recv+0x104>)
   1c4ba:	f00c fae3 	bl	28a84 <z_log_minimal_printk>
		return 0;
   1c4be:	e7f2      	b.n	1c4a6 <bt_smp_recv+0x9e>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1c4c0:	2157      	movs	r1, #87	; 0x57
   1c4c2:	4813      	ldr	r0, [pc, #76]	; (1c510 <bt_smp_recv+0x108>)
   1c4c4:	f00c fade 	bl	28a84 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1c4c8:	2107      	movs	r1, #7
   1c4ca:	4630      	mov	r0, r6
   1c4cc:	f011 f912 	bl	2d6f4 <smp_error>
		return 0;
   1c4d0:	e7e9      	b.n	1c4a6 <bt_smp_recv+0x9e>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1c4d2:	783a      	ldrb	r2, [r7, #0]
   1c4d4:	2157      	movs	r1, #87	; 0x57
   1c4d6:	480f      	ldr	r0, [pc, #60]	; (1c514 <bt_smp_recv+0x10c>)
   1c4d8:	f00c fad4 	bl	28a84 <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1c4dc:	783b      	ldrb	r3, [r7, #0]
   1c4de:	2b05      	cmp	r3, #5
   1c4e0:	d0e1      	beq.n	1c4a6 <bt_smp_recv+0x9e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c4e2:	2108      	movs	r1, #8
   1c4e4:	4630      	mov	r0, r6
   1c4e6:	f011 f905 	bl	2d6f4 <smp_error>
		return 0;
   1c4ea:	e7dc      	b.n	1c4a6 <bt_smp_recv+0x9e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c4ec:	2145      	movs	r1, #69	; 0x45
   1c4ee:	480a      	ldr	r0, [pc, #40]	; (1c518 <bt_smp_recv+0x110>)
   1c4f0:	f00c fac8 	bl	28a84 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1c4f4:	210a      	movs	r1, #10
   1c4f6:	4630      	mov	r0, r6
   1c4f8:	f011 f8fc 	bl	2d6f4 <smp_error>
		return 0;
   1c4fc:	e7d3      	b.n	1c4a6 <bt_smp_recv+0x9e>
   1c4fe:	bf00      	nop
   1c500:	00032454 	.word	0x00032454
   1c504:	000322b0 	.word	0x000322b0
   1c508:	000322d0 	.word	0x000322d0
   1c50c:	00032308 	.word	0x00032308
   1c510:	00032330 	.word	0x00032330
   1c514:	00032350 	.word	0x00032350
   1c518:	00031a74 	.word	0x00031a74

0001c51c <bt_smp_pkey_ready>:
{
   1c51c:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   1c51e:	4b13      	ldr	r3, [pc, #76]	; (1c56c <bt_smp_pkey_ready+0x50>)
   1c520:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1c522:	b920      	cbnz	r0, 1c52e <bt_smp_pkey_ready+0x12>
		BT_WARN("Public key not available");
   1c524:	2157      	movs	r1, #87	; 0x57
   1c526:	4812      	ldr	r0, [pc, #72]	; (1c570 <bt_smp_pkey_ready+0x54>)
   1c528:	f00c faac 	bl	28a84 <z_log_minimal_printk>
}
   1c52c:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   1c52e:	4811      	ldr	r0, [pc, #68]	; (1c574 <bt_smp_pkey_ready+0x58>)
   1c530:	f006 f9b2 	bl	22898 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1c534:	2400      	movs	r4, #0
   1c536:	2c00      	cmp	r4, #0
   1c538:	dcf8      	bgt.n	1c52c <bt_smp_pkey_ready+0x10>
		struct bt_smp *smp = &bt_smp_pool[i];
   1c53a:	eb04 1544 	add.w	r5, r4, r4, lsl #5
   1c53e:	4b0e      	ldr	r3, [pc, #56]	; (1c578 <bt_smp_pkey_ready+0x5c>)
   1c540:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c544:	f3bf 8f5b 	dmb	ish
   1c548:	686b      	ldr	r3, [r5, #4]
   1c54a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1c54e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c552:	d004      	beq.n	1c55e <bt_smp_pkey_ready+0x42>
		err = smp_public_key_periph(smp);
   1c554:	4628      	mov	r0, r5
   1c556:	f7ff f8e7 	bl	1b728 <smp_public_key_periph>
		if (err) {
   1c55a:	4601      	mov	r1, r0
   1c55c:	b908      	cbnz	r0, 1c562 <bt_smp_pkey_ready+0x46>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1c55e:	3401      	adds	r4, #1
   1c560:	e7e9      	b.n	1c536 <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   1c562:	4628      	mov	r0, r5
   1c564:	f011 f8c6 	bl	2d6f4 <smp_error>
   1c568:	e7f9      	b.n	1c55e <bt_smp_pkey_ready+0x42>
   1c56a:	bf00      	nop
   1c56c:	2000286c 	.word	0x2000286c
   1c570:	00032370 	.word	0x00032370
   1c574:	20000854 	.word	0x20000854
   1c578:	20001a80 	.word	0x20001a80

0001c57c <smp_ident_addr_info>:
{
   1c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c580:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1c582:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1c586:	688d      	ldr	r5, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c588:	782b      	ldrb	r3, [r5, #0]
   1c58a:	b123      	cbz	r3, 1c596 <smp_ident_addr_info+0x1a>
	return BT_ADDR_IS_STATIC(&addr->a);
   1c58c:	79ab      	ldrb	r3, [r5, #6]
   1c58e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_identity(&req->addr)) {
   1c592:	2bc0      	cmp	r3, #192	; 0xc0
   1c594:	d13b      	bne.n	1c60e <smp_ident_addr_info+0x92>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1c596:	f106 0790 	add.w	r7, r6, #144	; 0x90
	return memcmp(a, b, sizeof(*a));
   1c59a:	2207      	movs	r2, #7
   1c59c:	4629      	mov	r1, r5
   1c59e:	4638      	mov	r0, r7
   1c5a0:	f00e f950 	bl	2a844 <memcmp>
   1c5a4:	b178      	cbz	r0, 1c5c6 <smp_ident_addr_info+0x4a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1c5a6:	4629      	mov	r1, r5
   1c5a8:	7a30      	ldrb	r0, [r6, #8]
   1c5aa:	f000 fb15 	bl	1cbd8 <bt_keys_find_addr>
		if (keys) {
   1c5ae:	4680      	mov	r8, r0
   1c5b0:	b148      	cbz	r0, 1c5c6 <smp_ident_addr_info+0x4a>
			if (!update_keys_check(smp, keys)) {
   1c5b2:	4601      	mov	r1, r0
   1c5b4:	4620      	mov	r0, r4
   1c5b6:	f010 fc4c 	bl	2ce52 <update_keys_check>
   1c5ba:	2800      	cmp	r0, #0
   1c5bc:	f000 8083 	beq.w	1c6c6 <smp_ident_addr_info+0x14a>
			bt_keys_clear(keys);
   1c5c0:	4640      	mov	r0, r8
   1c5c2:	f000 fb2b 	bl	1cc1c <bt_keys_clear>
   1c5c6:	f3bf 8f5b 	dmb	ish
   1c5ca:	6863      	ldr	r3, [r4, #4]
   1c5cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c5d0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c5d4:	d12e      	bne.n	1c634 <smp_ident_addr_info+0xb8>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c5d6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c5da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1c5de:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c5e2:	f013 0f04 	tst.w	r3, #4
   1c5e6:	d00b      	beq.n	1c600 <smp_ident_addr_info+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c5e8:	f3bf 8f5b 	dmb	ish
   1c5ec:	e854 3f00 	ldrex	r3, [r4]
   1c5f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1c5f4:	e844 3200 	strex	r2, r3, [r4]
   1c5f8:	2a00      	cmp	r2, #0
   1c5fa:	d1f7      	bne.n	1c5ec <smp_ident_addr_info+0x70>
   1c5fc:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
   1c600:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1c604:	2b00      	cmp	r3, #0
   1c606:	d058      	beq.n	1c6ba <smp_ident_addr_info+0x13e>
	return 0;
   1c608:	2000      	movs	r0, #0
}
   1c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1c60e:	4628      	mov	r0, r5
   1c610:	f7f7 fc20 	bl	13e54 <bt_addr_le_str_real>
   1c614:	4602      	mov	r2, r0
   1c616:	2145      	movs	r1, #69	; 0x45
   1c618:	482c      	ldr	r0, [pc, #176]	; (1c6cc <smp_ident_addr_info+0x150>)
   1c61a:	f00c fa33 	bl	28a84 <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c61e:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1c622:	f7f7 fc17 	bl	13e54 <bt_addr_le_str_real>
   1c626:	4602      	mov	r2, r0
   1c628:	2145      	movs	r1, #69	; 0x45
   1c62a:	4829      	ldr	r0, [pc, #164]	; (1c6d0 <smp_ident_addr_info+0x154>)
   1c62c:	f00c fa2a 	bl	28a84 <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1c630:	200a      	movs	r0, #10
   1c632:	e7ea      	b.n	1c60a <smp_ident_addr_info+0x8e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1c634:	463a      	mov	r2, r7
   1c636:	7a31      	ldrb	r1, [r6, #8]
   1c638:	2002      	movs	r0, #2
   1c63a:	f011 f9db 	bl	2d9f4 <bt_keys_get_type>
		if (!keys) {
   1c63e:	4680      	mov	r8, r0
   1c640:	b178      	cbz	r0, 1c662 <smp_ident_addr_info+0xe6>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c642:	78f3      	ldrb	r3, [r6, #3]
   1c644:	b9bb      	cbnz	r3, 1c676 <smp_ident_addr_info+0xfa>
			dst = &conn->le.resp_addr;
   1c646:	f106 019e 	add.w	r1, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c64a:	780b      	ldrb	r3, [r1, #0]
   1c64c:	2b01      	cmp	r3, #1
   1c64e:	d104      	bne.n	1c65a <smp_ident_addr_info+0xde>
	return BT_ADDR_IS_RPA(&addr->a);
   1c650:	798b      	ldrb	r3, [r1, #6]
   1c652:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		if (bt_addr_le_is_rpa(dst)) {
   1c656:	2b40      	cmp	r3, #64	; 0x40
   1c658:	d010      	beq.n	1c67c <smp_ident_addr_info+0x100>
		bt_id_add(keys);
   1c65a:	4640      	mov	r0, r8
   1c65c:	f7f9 fe40 	bl	162e0 <bt_id_add>
   1c660:	e7b9      	b.n	1c5d6 <smp_ident_addr_info+0x5a>
			BT_ERR("Unable to get keys for %s",
   1c662:	4638      	mov	r0, r7
   1c664:	f7f7 fbf6 	bl	13e54 <bt_addr_le_str_real>
   1c668:	4602      	mov	r2, r0
   1c66a:	2145      	movs	r1, #69	; 0x45
   1c66c:	4819      	ldr	r0, [pc, #100]	; (1c6d4 <smp_ident_addr_info+0x158>)
   1c66e:	f00c fa09 	bl	28a84 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c672:	2008      	movs	r0, #8
   1c674:	e7c9      	b.n	1c60a <smp_ident_addr_info+0x8e>
			dst = &conn->le.init_addr;
   1c676:	f106 0197 	add.w	r1, r6, #151	; 0x97
   1c67a:	e7e6      	b.n	1c64a <smp_ident_addr_info+0xce>
	memcpy(dst, src, sizeof(*dst));
   1c67c:	2206      	movs	r2, #6
   1c67e:	3101      	adds	r1, #1
   1c680:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1c684:	f00e f90b 	bl	2a89e <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c688:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   1c68c:	2b00      	cmp	r3, #0
   1c68e:	d0e4      	beq.n	1c65a <smp_ident_addr_info+0xde>
	return BT_ADDR_IS_STATIC(&addr->a);
   1c690:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1c694:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1c698:	2bc0      	cmp	r3, #192	; 0xc0
   1c69a:	d0de      	beq.n	1c65a <smp_ident_addr_info+0xde>
	memcpy(dst, src, sizeof(*dst));
   1c69c:	2207      	movs	r2, #7
   1c69e:	4629      	mov	r1, r5
   1c6a0:	f108 0001 	add.w	r0, r8, #1
   1c6a4:	f00e f8fb 	bl	2a89e <memcpy>
   1c6a8:	2207      	movs	r2, #7
   1c6aa:	4629      	mov	r1, r5
   1c6ac:	4638      	mov	r0, r7
   1c6ae:	f00e f8f6 	bl	2a89e <memcpy>
				bt_conn_identity_resolved(conn);
   1c6b2:	4630      	mov	r0, r6
   1c6b4:	f7fb f9ec 	bl	17a90 <bt_conn_identity_resolved>
   1c6b8:	e7cf      	b.n	1c65a <smp_ident_addr_info+0xde>
		smp_pairing_complete(smp, 0);
   1c6ba:	2100      	movs	r1, #0
   1c6bc:	4620      	mov	r0, r4
   1c6be:	f7ff fe3b 	bl	1c338 <smp_pairing_complete>
	return 0;
   1c6c2:	2000      	movs	r0, #0
   1c6c4:	e7a1      	b.n	1c60a <smp_ident_addr_info+0x8e>
				return BT_SMP_ERR_UNSPECIFIED;
   1c6c6:	2008      	movs	r0, #8
   1c6c8:	e79f      	b.n	1c60a <smp_ident_addr_info+0x8e>
   1c6ca:	bf00      	nop
   1c6cc:	00032390 	.word	0x00032390
   1c6d0:	000323ac 	.word	0x000323ac
   1c6d4:	000321b8 	.word	0x000321b8

0001c6d8 <smp_central_ident>:
{
   1c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6da:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1c6dc:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c6e0:	f3bf 8f5b 	dmb	ish
   1c6e4:	6863      	ldr	r3, [r4, #4]
   1c6e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c6ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c6ee:	d118      	bne.n	1c722 <smp_central_ident+0x4a>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1c6f0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c6f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1c6f8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c6fc:	f013 0f02 	tst.w	r3, #2
   1c700:	d12f      	bne.n	1c762 <smp_central_ident+0x8a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c702:	f013 0f04 	tst.w	r3, #4
   1c706:	d038      	beq.n	1c77a <smp_central_ident+0xa2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c708:	f3bf 8f5b 	dmb	ish
   1c70c:	e854 3f00 	ldrex	r3, [r4]
   1c710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1c714:	e844 3200 	strex	r2, r3, [r4]
   1c718:	2a00      	cmp	r2, #0
   1c71a:	d1f7      	bne.n	1c70c <smp_central_ident+0x34>
   1c71c:	f3bf 8f5b 	dmb	ish
}
   1c720:	e02b      	b.n	1c77a <smp_central_ident+0xa2>
		struct bt_smp_central_ident *req = (void *)buf->data;
   1c722:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c724:	f100 0790 	add.w	r7, r0, #144	; 0x90
   1c728:	463a      	mov	r2, r7
   1c72a:	7a01      	ldrb	r1, [r0, #8]
   1c72c:	2004      	movs	r0, #4
   1c72e:	f011 f961 	bl	2d9f4 <bt_keys_get_type>
		if (!keys) {
   1c732:	4605      	mov	r5, r0
   1c734:	b158      	cbz	r0, 1c74e <smp_central_ident+0x76>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1c736:	2202      	movs	r2, #2
   1c738:	4631      	mov	r1, r6
   1c73a:	3018      	adds	r0, #24
   1c73c:	f00e f8af 	bl	2a89e <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1c740:	2208      	movs	r2, #8
   1c742:	1cb1      	adds	r1, r6, #2
   1c744:	f105 0010 	add.w	r0, r5, #16
   1c748:	f00e f8a9 	bl	2a89e <memcpy>
   1c74c:	e7d0      	b.n	1c6f0 <smp_central_ident+0x18>
			BT_ERR("Unable to get keys for %s",
   1c74e:	4638      	mov	r0, r7
   1c750:	f7f7 fb80 	bl	13e54 <bt_addr_le_str_real>
   1c754:	4602      	mov	r2, r0
   1c756:	2145      	movs	r1, #69	; 0x45
   1c758:	480d      	ldr	r0, [pc, #52]	; (1c790 <smp_central_ident+0xb8>)
   1c75a:	f00c f993 	bl	28a84 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c75e:	2008      	movs	r0, #8
   1c760:	e00f      	b.n	1c782 <smp_central_ident+0xaa>
   1c762:	f3bf 8f5b 	dmb	ish
   1c766:	e854 3f00 	ldrex	r3, [r4]
   1c76a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c76e:	e844 3200 	strex	r2, r3, [r4]
   1c772:	2a00      	cmp	r2, #0
   1c774:	d1f7      	bne.n	1c766 <smp_central_ident+0x8e>
   1c776:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
   1c77a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1c77e:	b10b      	cbz	r3, 1c784 <smp_central_ident+0xac>
	return 0;
   1c780:	2000      	movs	r0, #0
}
   1c782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		smp_pairing_complete(smp, 0);
   1c784:	2100      	movs	r1, #0
   1c786:	4620      	mov	r0, r4
   1c788:	f7ff fdd6 	bl	1c338 <smp_pairing_complete>
	return 0;
   1c78c:	2000      	movs	r0, #0
   1c78e:	e7f8      	b.n	1c782 <smp_central_ident+0xaa>
   1c790:	000321b8 	.word	0x000321b8

0001c794 <smp_pairing_failed>:
{
   1c794:	b570      	push	{r4, r5, r6, lr}
   1c796:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1c798:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1c79c:	688d      	ldr	r5, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
   1c79e:	782a      	ldrb	r2, [r5, #0]
   1c7a0:	2145      	movs	r1, #69	; 0x45
   1c7a2:	4818      	ldr	r0, [pc, #96]	; (1c804 <smp_pairing_failed+0x70>)
   1c7a4:	f00c f96e 	bl	28a84 <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c7a8:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c7aa:	f3bf 8f5b 	dmb	ish
   1c7ae:	e853 2f00 	ldrex	r2, [r3]
   1c7b2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
   1c7b6:	e843 1000 	strex	r0, r1, [r3]
   1c7ba:	2800      	cmp	r0, #0
   1c7bc:	d1f7      	bne.n	1c7ae <smp_pairing_failed+0x1a>
   1c7be:	f3bf 8f5b 	dmb	ish
   1c7c2:	f412 6f80 	tst.w	r2, #1024	; 0x400
   1c7c6:	d007      	beq.n	1c7d8 <smp_pairing_failed+0x44>
		if (bt_auth && bt_auth->cancel) {
   1c7c8:	4b0f      	ldr	r3, [pc, #60]	; (1c808 <smp_pairing_failed+0x74>)
   1c7ca:	681b      	ldr	r3, [r3, #0]
   1c7cc:	b19b      	cbz	r3, 1c7f6 <smp_pairing_failed+0x62>
   1c7ce:	691b      	ldr	r3, [r3, #16]
   1c7d0:	b18b      	cbz	r3, 1c7f6 <smp_pairing_failed+0x62>
			bt_auth->cancel(conn);
   1c7d2:	4630      	mov	r0, r6
   1c7d4:	4798      	blx	r3
   1c7d6:	e00e      	b.n	1c7f6 <smp_pairing_failed+0x62>
   1c7d8:	f3bf 8f5b 	dmb	ish
   1c7dc:	e853 2f00 	ldrex	r2, [r3]
   1c7e0:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
   1c7e4:	e843 1000 	strex	r0, r1, [r3]
   1c7e8:	2800      	cmp	r0, #0
   1c7ea:	d1f7      	bne.n	1c7dc <smp_pairing_failed+0x48>
   1c7ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c7f0:	f412 6f00 	tst.w	r2, #2048	; 0x800
   1c7f4:	d1e8      	bne.n	1c7c8 <smp_pairing_failed+0x34>
	smp_pairing_complete(smp, req->reason);
   1c7f6:	7829      	ldrb	r1, [r5, #0]
   1c7f8:	4620      	mov	r0, r4
   1c7fa:	f7ff fd9d 	bl	1c338 <smp_pairing_complete>
}
   1c7fe:	2000      	movs	r0, #0
   1c800:	bd70      	pop	{r4, r5, r6, pc}
   1c802:	bf00      	nop
   1c804:	000323bc 	.word	0x000323bc
   1c808:	200027b8 	.word	0x200027b8

0001c80c <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1c80c:	7883      	ldrb	r3, [r0, #2]
   1c80e:	2b01      	cmp	r3, #1
   1c810:	d000      	beq.n	1c814 <smp_check_complete+0x8>
   1c812:	4770      	bx	lr
{
   1c814:	b570      	push	{r4, r5, r6, lr}
   1c816:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1c818:	2106      	movs	r1, #6
   1c81a:	f00f f8b6 	bl	2b98a <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1c81e:	4605      	mov	r5, r0
   1c820:	b158      	cbz	r0, 1c83a <smp_check_complete+0x2e>
		smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1c822:	f1a5 00f0 	sub.w	r0, r5, #240	; 0xf0
		smp->local_dist &= ~dist_complete;
   1c826:	f815 1c08 	ldrb.w	r1, [r5, #-8]
   1c82a:	ea21 0104 	bic.w	r1, r1, r4
   1c82e:	f805 1c08 	strb.w	r1, [r5, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   1c832:	f835 3c08 	ldrh.w	r3, [r5, #-8]
   1c836:	b16b      	cbz	r3, 1c854 <smp_check_complete+0x48>
}
   1c838:	bd70      	pop	{r4, r5, r6, pc}
		__ASSERT(chan, "No SMP channel found");
   1c83a:	4e08      	ldr	r6, [pc, #32]	; (1c85c <smp_check_complete+0x50>)
   1c83c:	f240 322f 	movw	r2, #815	; 0x32f
   1c840:	4631      	mov	r1, r6
   1c842:	4807      	ldr	r0, [pc, #28]	; (1c860 <smp_check_complete+0x54>)
   1c844:	f00b fd7d 	bl	28342 <printk>
   1c848:	f240 312f 	movw	r1, #815	; 0x32f
   1c84c:	4630      	mov	r0, r6
   1c84e:	f00c f911 	bl	28a74 <assert_post_action>
   1c852:	e7e6      	b.n	1c822 <smp_check_complete+0x16>
			smp_pairing_complete(smp, 0);
   1c854:	2100      	movs	r1, #0
   1c856:	f7ff fd6f 	bl	1c338 <smp_pairing_complete>
		return;
   1c85a:	e7ed      	b.n	1c838 <smp_check_complete+0x2c>
   1c85c:	000323d0 	.word	0x000323d0
   1c860:	0002f968 	.word	0x0002f968

0001c864 <smp_timeout>:
{
   1c864:	b538      	push	{r3, r4, r5, lr}
   1c866:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   1c868:	f5a0 75f0 	sub.w	r5, r0, #480	; 0x1e0
	BT_ERR("SMP Timeout");
   1c86c:	2145      	movs	r1, #69	; 0x45
   1c86e:	480b      	ldr	r0, [pc, #44]	; (1c89c <smp_timeout+0x38>)
   1c870:	f00c f908 	bl	28a84 <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1c874:	2108      	movs	r1, #8
   1c876:	4628      	mov	r0, r5
   1c878:	f7ff fd5e 	bl	1c338 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1c87c:	f5a4 74ee 	sub.w	r4, r4, #476	; 0x1dc
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c880:	f3bf 8f5b 	dmb	ish
   1c884:	e854 3f00 	ldrex	r3, [r4]
   1c888:	f043 0310 	orr.w	r3, r3, #16
   1c88c:	e844 3200 	strex	r2, r3, [r4]
   1c890:	2a00      	cmp	r2, #0
   1c892:	d1f7      	bne.n	1c884 <smp_timeout+0x20>
   1c894:	f3bf 8f5b 	dmb	ish
}
   1c898:	bd38      	pop	{r3, r4, r5, pc}
   1c89a:	bf00      	nop
   1c89c:	00032400 	.word	0x00032400

0001c8a0 <bt_smp_update_keys>:
{
   1c8a0:	b570      	push	{r4, r5, r6, lr}
   1c8a2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1c8a4:	f7fe f95c 	bl	1ab60 <smp_chan_get>
	if (!smp) {
   1c8a8:	2800      	cmp	r0, #0
   1c8aa:	d05b      	beq.n	1c964 <bt_smp_update_keys+0xc4>
   1c8ac:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c8ae:	f3bf 8f5b 	dmb	ish
   1c8b2:	6843      	ldr	r3, [r0, #4]
   1c8b4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c8b8:	f013 0f08 	tst.w	r3, #8
   1c8bc:	d052      	beq.n	1c964 <bt_smp_update_keys+0xc4>
	if (conn->le.keys) {
   1c8be:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c8c2:	b108      	cbz	r0, 1c8c8 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1c8c4:	f000 f9aa 	bl	1cc1c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c8c8:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1c8cc:	4631      	mov	r1, r6
   1c8ce:	7a20      	ldrb	r0, [r4, #8]
   1c8d0:	f000 f884 	bl	1c9dc <bt_keys_get_addr>
   1c8d4:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1c8d8:	b1c8      	cbz	r0, 1c90e <bt_smp_update_keys+0x6e>
   1c8da:	f3bf 8f5b 	dmb	ish
   1c8de:	686b      	ldr	r3, [r5, #4]
   1c8e0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1c8e4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1c8e8:	d005      	beq.n	1c8f6 <bt_smp_update_keys+0x56>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1c8ea:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c8ee:	7b53      	ldrb	r3, [r2, #13]
   1c8f0:	f043 0302 	orr.w	r3, r3, #2
   1c8f4:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1c8f6:	7a2b      	ldrb	r3, [r5, #8]
   1c8f8:	2b03      	cmp	r3, #3
   1c8fa:	d815      	bhi.n	1c928 <bt_smp_update_keys+0x88>
   1c8fc:	b25b      	sxtb	r3, r3
   1c8fe:	b9bb      	cbnz	r3, 1c930 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1c900:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c904:	7b53      	ldrb	r3, [r2, #13]
   1c906:	f023 0301 	bic.w	r3, r3, #1
   1c90a:	7353      	strb	r3, [r2, #13]
		break;
   1c90c:	e016      	b.n	1c93c <bt_smp_update_keys+0x9c>
		BT_ERR("Unable to get keys for %s",
   1c90e:	4630      	mov	r0, r6
   1c910:	f7f7 faa0 	bl	13e54 <bt_addr_le_str_real>
   1c914:	4602      	mov	r2, r0
   1c916:	2145      	movs	r1, #69	; 0x45
   1c918:	4828      	ldr	r0, [pc, #160]	; (1c9bc <bt_smp_update_keys+0x11c>)
   1c91a:	f00c f8b3 	bl	28a84 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c91e:	2108      	movs	r1, #8
   1c920:	4628      	mov	r0, r5
   1c922:	f010 fee7 	bl	2d6f4 <smp_error>
		return;
   1c926:	e01d      	b.n	1c964 <bt_smp_update_keys+0xc4>
	switch (smp->method) {
   1c928:	3b05      	subs	r3, #5
   1c92a:	b2db      	uxtb	r3, r3
   1c92c:	2b01      	cmp	r3, #1
   1c92e:	d8e7      	bhi.n	1c900 <bt_smp_update_keys+0x60>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1c930:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c934:	7b53      	ldrb	r3, [r2, #13]
   1c936:	f043 0301 	orr.w	r3, r3, #1
   1c93a:	7353      	strb	r3, [r2, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1c93c:	f8d4 60bc 	ldr.w	r6, [r4, #188]	; 0xbc
   1c940:	4628      	mov	r0, r5
   1c942:	f010 f9e0 	bl	2cd06 <get_encryption_key_size>
   1c946:	7330      	strb	r0, [r6, #12]
   1c948:	f3bf 8f5b 	dmb	ish
   1c94c:	686b      	ldr	r3, [r5, #4]
   1c94e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c952:	f013 0f20 	tst.w	r3, #32
   1c956:	d106      	bne.n	1c966 <bt_smp_update_keys+0xc6>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1c958:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c95c:	7b53      	ldrb	r3, [r2, #13]
   1c95e:	f023 0310 	bic.w	r3, r3, #16
   1c962:	7353      	strb	r3, [r2, #13]
}
   1c964:	bd70      	pop	{r4, r5, r6, pc}
		conn->le.keys->flags |= BT_KEYS_SC;
   1c966:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c96a:	7b53      	ldrb	r3, [r2, #13]
   1c96c:	f043 0310 	orr.w	r3, r3, #16
   1c970:	7353      	strb	r3, [r2, #13]
   1c972:	f3bf 8f5b 	dmb	ish
   1c976:	686b      	ldr	r3, [r5, #4]
   1c978:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c97c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c980:	d0f0      	beq.n	1c964 <bt_smp_update_keys+0xc4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1c982:	2120      	movs	r1, #32
   1c984:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c988:	f011 f830 	bl	2d9ec <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1c98c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c990:	2210      	movs	r2, #16
   1c992:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1c996:	301a      	adds	r0, #26
   1c998:	f00d ff81 	bl	2a89e <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1c99c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c9a0:	2208      	movs	r2, #8
   1c9a2:	2100      	movs	r1, #0
   1c9a4:	3010      	adds	r0, #16
   1c9a6:	f00d ff9e 	bl	2a8e6 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1c9aa:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c9ae:	2202      	movs	r2, #2
   1c9b0:	2100      	movs	r1, #0
   1c9b2:	3018      	adds	r0, #24
   1c9b4:	f00d ff97 	bl	2a8e6 <memset>
   1c9b8:	e7d4      	b.n	1c964 <bt_smp_update_keys+0xc4>
   1c9ba:	bf00      	nop
   1c9bc:	000321b8 	.word	0x000321b8

0001c9c0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1c9c0:	b508      	push	{r3, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
   1c9c2:	f7fe f813 	bl	1a9ec <le_sc_supported>
   1c9c6:	4b03      	ldr	r3, [pc, #12]	; (1c9d4 <bt_smp_init+0x14>)
   1c9c8:	7018      	strb	r0, [r3, #0]
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1c9ca:	4803      	ldr	r0, [pc, #12]	; (1c9d8 <bt_smp_init+0x18>)
   1c9cc:	f7fa fa94 	bl	16ef8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1c9d0:	2000      	movs	r0, #0
   1c9d2:	bd08      	pop	{r3, pc}
   1c9d4:	20003f75 	.word	0x20003f75
   1c9d8:	20000680 	.word	0x20000680

0001c9dc <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1c9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9e0:	b082      	sub	sp, #8
   1c9e2:	4605      	mov	r5, r0
   1c9e4:	460f      	mov	r7, r1
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   1c9e6:	f04f 0801 	mov.w	r8, #1

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1c9ea:	2400      	movs	r4, #0
   1c9ec:	2c00      	cmp	r4, #0
   1c9ee:	dd07      	ble.n	1ca00 <bt_keys_get_addr+0x24>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1c9f0:	f1b8 0f00 	cmp.w	r8, #0
   1c9f4:	d02b      	beq.n	1ca4e <bt_keys_get_addr+0x72>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1c9f6:	2600      	movs	r6, #0
}
   1c9f8:	4630      	mov	r0, r6
   1c9fa:	b002      	add	sp, #8
   1c9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys = &key_pool[i];
   1ca00:	4a1a      	ldr	r2, [pc, #104]	; (1ca6c <bt_keys_get_addr+0x90>)
   1ca02:	235c      	movs	r3, #92	; 0x5c
   1ca04:	fb03 f304 	mul.w	r3, r3, r4
   1ca08:	18d6      	adds	r6, r2, r3
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1ca0a:	5cd3      	ldrb	r3, [r2, r3]
   1ca0c:	42ab      	cmp	r3, r5
   1ca0e:	d004      	beq.n	1ca1a <bt_keys_get_addr+0x3e>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1ca10:	f1b8 0f01 	cmp.w	r8, #1
   1ca14:	d00a      	beq.n	1ca2c <bt_keys_get_addr+0x50>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ca16:	3401      	adds	r4, #1
   1ca18:	e7e8      	b.n	1c9ec <bt_keys_get_addr+0x10>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1ca1a:	4630      	mov	r0, r6
	return memcmp(a, b, sizeof(*a));
   1ca1c:	2207      	movs	r2, #7
   1ca1e:	4639      	mov	r1, r7
   1ca20:	3001      	adds	r0, #1
   1ca22:	f00d ff0f 	bl	2a844 <memcmp>
   1ca26:	2800      	cmp	r0, #0
   1ca28:	d1f2      	bne.n	1ca10 <bt_keys_get_addr+0x34>
   1ca2a:	e7e5      	b.n	1c9f8 <bt_keys_get_addr+0x1c>
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1ca2c:	4b0f      	ldr	r3, [pc, #60]	; (1ca6c <bt_keys_get_addr+0x90>)
   1ca2e:	205c      	movs	r0, #92	; 0x5c
   1ca30:	fb00 3004 	mla	r0, r0, r4, r3
   1ca34:	2300      	movs	r3, #0
   1ca36:	9300      	str	r3, [sp, #0]
   1ca38:	f8cd 3003 	str.w	r3, [sp, #3]
   1ca3c:	2207      	movs	r2, #7
   1ca3e:	4669      	mov	r1, sp
   1ca40:	3001      	adds	r0, #1
   1ca42:	f00d feff 	bl	2a844 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1ca46:	2800      	cmp	r0, #0
   1ca48:	d1e5      	bne.n	1ca16 <bt_keys_get_addr+0x3a>
			first_free_slot = i;
   1ca4a:	46a0      	mov	r8, r4
   1ca4c:	e7e3      	b.n	1ca16 <bt_keys_get_addr+0x3a>
		keys = &key_pool[first_free_slot];
   1ca4e:	4a07      	ldr	r2, [pc, #28]	; (1ca6c <bt_keys_get_addr+0x90>)
   1ca50:	235c      	movs	r3, #92	; 0x5c
   1ca52:	fb03 f808 	mul.w	r8, r3, r8
   1ca56:	eb02 0608 	add.w	r6, r2, r8
		keys->id = id;
   1ca5a:	f802 5008 	strb.w	r5, [r2, r8]
	memcpy(dst, src, sizeof(*dst));
   1ca5e:	2207      	movs	r2, #7
   1ca60:	4639      	mov	r1, r7
   1ca62:	1c70      	adds	r0, r6, #1
   1ca64:	f00d ff1b 	bl	2a89e <memcpy>
		return keys;
   1ca68:	e7c6      	b.n	1c9f8 <bt_keys_get_addr+0x1c>
   1ca6a:	bf00      	nop
   1ca6c:	20002870 	.word	0x20002870

0001ca70 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca72:	4605      	mov	r5, r0
   1ca74:	460f      	mov	r7, r1
   1ca76:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ca78:	2400      	movs	r4, #0
   1ca7a:	2c00      	cmp	r4, #0
   1ca7c:	dd00      	ble.n	1ca80 <bt_keys_foreach+0x10>
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   1ca7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type)) {
   1ca80:	4a06      	ldr	r2, [pc, #24]	; (1ca9c <bt_keys_foreach+0x2c>)
   1ca82:	235c      	movs	r3, #92	; 0x5c
   1ca84:	fb03 2304 	mla	r3, r3, r4, r2
   1ca88:	89db      	ldrh	r3, [r3, #14]
   1ca8a:	422b      	tst	r3, r5
   1ca8c:	d004      	beq.n	1ca98 <bt_keys_foreach+0x28>
			func(&key_pool[i], data);
   1ca8e:	4631      	mov	r1, r6
   1ca90:	205c      	movs	r0, #92	; 0x5c
   1ca92:	fb00 2004 	mla	r0, r0, r4, r2
   1ca96:	47b8      	blx	r7
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ca98:	3401      	adds	r4, #1
   1ca9a:	e7ee      	b.n	1ca7a <bt_keys_foreach+0xa>
   1ca9c:	20002870 	.word	0x20002870

0001caa0 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1caa0:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1caa2:	2200      	movs	r2, #0
   1caa4:	4902      	ldr	r1, [pc, #8]	; (1cab0 <keys_commit+0x10>)
   1caa6:	2002      	movs	r0, #2
   1caa8:	f7ff ffe2 	bl	1ca70 <bt_keys_foreach>
	}

	return 0;
}
   1caac:	2000      	movs	r0, #0
   1caae:	bd08      	pop	{r3, pc}
   1cab0:	0002d9e5 	.word	0x0002d9e5

0001cab4 <bt_keys_find>:
{
   1cab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cab6:	4607      	mov	r7, r0
   1cab8:	460e      	mov	r6, r1
   1caba:	4615      	mov	r5, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1cabc:	2400      	movs	r4, #0
   1cabe:	2c00      	cmp	r4, #0
   1cac0:	dd01      	ble.n	1cac6 <bt_keys_find+0x12>
	return NULL;
   1cac2:	2000      	movs	r0, #0
}
   1cac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1cac6:	4a0f      	ldr	r2, [pc, #60]	; (1cb04 <bt_keys_find+0x50>)
   1cac8:	235c      	movs	r3, #92	; 0x5c
   1caca:	fb03 2304 	mla	r3, r3, r4, r2
   1cace:	89db      	ldrh	r3, [r3, #14]
   1cad0:	421f      	tst	r7, r3
   1cad2:	d005      	beq.n	1cae0 <bt_keys_find+0x2c>
   1cad4:	235c      	movs	r3, #92	; 0x5c
   1cad6:	fb03 f304 	mul.w	r3, r3, r4
   1cada:	5cd3      	ldrb	r3, [r2, r3]
   1cadc:	429e      	cmp	r6, r3
   1cade:	d001      	beq.n	1cae4 <bt_keys_find+0x30>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1cae0:	3401      	adds	r4, #1
   1cae2:	e7ec      	b.n	1cabe <bt_keys_find+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
   1cae4:	205c      	movs	r0, #92	; 0x5c
   1cae6:	fb00 2004 	mla	r0, r0, r4, r2
	return memcmp(a, b, sizeof(*a));
   1caea:	2207      	movs	r2, #7
   1caec:	4629      	mov	r1, r5
   1caee:	3001      	adds	r0, #1
   1caf0:	f00d fea8 	bl	2a844 <memcmp>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1caf4:	2800      	cmp	r0, #0
   1caf6:	d1f3      	bne.n	1cae0 <bt_keys_find+0x2c>
			return &key_pool[i];
   1caf8:	4802      	ldr	r0, [pc, #8]	; (1cb04 <bt_keys_find+0x50>)
   1cafa:	235c      	movs	r3, #92	; 0x5c
   1cafc:	fb03 0004 	mla	r0, r3, r4, r0
   1cb00:	e7e0      	b.n	1cac4 <bt_keys_find+0x10>
   1cb02:	bf00      	nop
   1cb04:	20002870 	.word	0x20002870

0001cb08 <bt_keys_find_irk>:
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1cb08:	780b      	ldrb	r3, [r1, #0]
   1cb0a:	2b01      	cmp	r3, #1
   1cb0c:	d15f      	bne.n	1cbce <bt_keys_find_irk+0xc6>
{
   1cb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb12:	4606      	mov	r6, r0
   1cb14:	460d      	mov	r5, r1
	return BT_ADDR_IS_RPA(&addr->a);
   1cb16:	798b      	ldrb	r3, [r1, #6]
   1cb18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_rpa(addr)) {
   1cb1c:	2b40      	cmp	r3, #64	; 0x40
   1cb1e:	d101      	bne.n	1cb24 <bt_keys_find_irk+0x1c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1cb20:	2400      	movs	r4, #0
   1cb22:	e002      	b.n	1cb2a <bt_keys_find_irk+0x22>
		return NULL;
   1cb24:	2000      	movs	r0, #0
   1cb26:	e025      	b.n	1cb74 <bt_keys_find_irk+0x6c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1cb28:	3401      	adds	r4, #1
   1cb2a:	2c00      	cmp	r4, #0
   1cb2c:	dc1e      	bgt.n	1cb6c <bt_keys_find_irk+0x64>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1cb2e:	4a29      	ldr	r2, [pc, #164]	; (1cbd4 <bt_keys_find_irk+0xcc>)
   1cb30:	235c      	movs	r3, #92	; 0x5c
   1cb32:	fb03 2304 	mla	r3, r3, r4, r2
   1cb36:	89db      	ldrh	r3, [r3, #14]
   1cb38:	f013 0f02 	tst.w	r3, #2
   1cb3c:	d0f4      	beq.n	1cb28 <bt_keys_find_irk+0x20>
		if (key_pool[i].id == id &&
   1cb3e:	235c      	movs	r3, #92	; 0x5c
   1cb40:	fb03 f304 	mul.w	r3, r3, r4
   1cb44:	5cd3      	ldrb	r3, [r2, r3]
   1cb46:	42b3      	cmp	r3, r6
   1cb48:	d1ee      	bne.n	1cb28 <bt_keys_find_irk+0x20>
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   1cb4a:	215c      	movs	r1, #92	; 0x5c
   1cb4c:	fb01 f104 	mul.w	r1, r1, r4
   1cb50:	3138      	adds	r1, #56	; 0x38
   1cb52:	4411      	add	r1, r2
	return memcmp(a, b, sizeof(*a));
   1cb54:	2206      	movs	r2, #6
   1cb56:	3102      	adds	r1, #2
   1cb58:	1c68      	adds	r0, r5, #1
   1cb5a:	f00d fe73 	bl	2a844 <memcmp>
		if (key_pool[i].id == id &&
   1cb5e:	2800      	cmp	r0, #0
   1cb60:	d1e2      	bne.n	1cb28 <bt_keys_find_irk+0x20>
			return &key_pool[i];
   1cb62:	481c      	ldr	r0, [pc, #112]	; (1cbd4 <bt_keys_find_irk+0xcc>)
   1cb64:	235c      	movs	r3, #92	; 0x5c
   1cb66:	fb03 0004 	mla	r0, r3, r4, r0
   1cb6a:	e003      	b.n	1cb74 <bt_keys_find_irk+0x6c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1cb6c:	2700      	movs	r7, #0
   1cb6e:	2f00      	cmp	r7, #0
   1cb70:	dd02      	ble.n	1cb78 <bt_keys_find_irk+0x70>
	return NULL;
   1cb72:	2000      	movs	r0, #0
}
   1cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1cb78:	4a16      	ldr	r2, [pc, #88]	; (1cbd4 <bt_keys_find_irk+0xcc>)
   1cb7a:	235c      	movs	r3, #92	; 0x5c
   1cb7c:	fb03 2307 	mla	r3, r3, r7, r2
   1cb80:	89db      	ldrh	r3, [r3, #14]
   1cb82:	f013 0f02 	tst.w	r3, #2
   1cb86:	d005      	beq.n	1cb94 <bt_keys_find_irk+0x8c>
		if (key_pool[i].id != id) {
   1cb88:	235c      	movs	r3, #92	; 0x5c
   1cb8a:	fb03 f307 	mul.w	r3, r3, r7
   1cb8e:	5cd3      	ldrb	r3, [r2, r3]
   1cb90:	42b3      	cmp	r3, r6
   1cb92:	d001      	beq.n	1cb98 <bt_keys_find_irk+0x90>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1cb94:	3701      	adds	r7, #1
   1cb96:	e7ea      	b.n	1cb6e <bt_keys_find_irk+0x66>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1cb98:	205c      	movs	r0, #92	; 0x5c
   1cb9a:	fb00 f007 	mul.w	r0, r0, r7
   1cb9e:	3028      	adds	r0, #40	; 0x28
   1cba0:	4410      	add	r0, r2
   1cba2:	f105 0801 	add.w	r8, r5, #1
   1cba6:	4641      	mov	r1, r8
   1cba8:	3002      	adds	r0, #2
   1cbaa:	f00d fefc 	bl	2a9a6 <bt_rpa_irk_matches>
   1cbae:	2800      	cmp	r0, #0
   1cbb0:	d0f0      	beq.n	1cb94 <bt_keys_find_irk+0x8c>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   1cbb2:	4c08      	ldr	r4, [pc, #32]	; (1cbd4 <bt_keys_find_irk+0xcc>)
   1cbb4:	205c      	movs	r0, #92	; 0x5c
   1cbb6:	fb00 f707 	mul.w	r7, r0, r7
   1cbba:	f107 0038 	add.w	r0, r7, #56	; 0x38
   1cbbe:	4420      	add	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1cbc0:	2206      	movs	r2, #6
   1cbc2:	4641      	mov	r1, r8
   1cbc4:	3002      	adds	r0, #2
   1cbc6:	f00d fe6a 	bl	2a89e <memcpy>
			return &key_pool[i];
   1cbca:	19e0      	adds	r0, r4, r7
   1cbcc:	e7d2      	b.n	1cb74 <bt_keys_find_irk+0x6c>
		return NULL;
   1cbce:	2000      	movs	r0, #0
}
   1cbd0:	4770      	bx	lr
   1cbd2:	bf00      	nop
   1cbd4:	20002870 	.word	0x20002870

0001cbd8 <bt_keys_find_addr>:
{
   1cbd8:	b570      	push	{r4, r5, r6, lr}
   1cbda:	4606      	mov	r6, r0
   1cbdc:	460d      	mov	r5, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1cbde:	2400      	movs	r4, #0
   1cbe0:	2c00      	cmp	r4, #0
   1cbe2:	dd01      	ble.n	1cbe8 <bt_keys_find_addr+0x10>
	return NULL;
   1cbe4:	2000      	movs	r0, #0
}
   1cbe6:	bd70      	pop	{r4, r5, r6, pc}
		if (key_pool[i].id == id &&
   1cbe8:	235c      	movs	r3, #92	; 0x5c
   1cbea:	fb03 f304 	mul.w	r3, r3, r4
   1cbee:	4a0a      	ldr	r2, [pc, #40]	; (1cc18 <bt_keys_find_addr+0x40>)
   1cbf0:	5cd3      	ldrb	r3, [r2, r3]
   1cbf2:	429e      	cmp	r6, r3
   1cbf4:	d001      	beq.n	1cbfa <bt_keys_find_addr+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1cbf6:	3401      	adds	r4, #1
   1cbf8:	e7f2      	b.n	1cbe0 <bt_keys_find_addr+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
   1cbfa:	205c      	movs	r0, #92	; 0x5c
   1cbfc:	fb00 2004 	mla	r0, r0, r4, r2
	return memcmp(a, b, sizeof(*a));
   1cc00:	2207      	movs	r2, #7
   1cc02:	4629      	mov	r1, r5
   1cc04:	3001      	adds	r0, #1
   1cc06:	f00d fe1d 	bl	2a844 <memcmp>
		if (key_pool[i].id == id &&
   1cc0a:	2800      	cmp	r0, #0
   1cc0c:	d1f3      	bne.n	1cbf6 <bt_keys_find_addr+0x1e>
			return &key_pool[i];
   1cc0e:	4802      	ldr	r0, [pc, #8]	; (1cc18 <bt_keys_find_addr+0x40>)
   1cc10:	235c      	movs	r3, #92	; 0x5c
   1cc12:	fb03 0004 	mla	r0, r3, r4, r0
   1cc16:	e7e6      	b.n	1cbe6 <bt_keys_find_addr+0xe>
   1cc18:	20002870 	.word	0x20002870

0001cc1c <bt_keys_clear>:
{
   1cc1c:	b530      	push	{r4, r5, lr}
   1cc1e:	b08d      	sub	sp, #52	; 0x34
   1cc20:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1cc22:	7a03      	ldrb	r3, [r0, #8]
   1cc24:	f013 0f04 	tst.w	r3, #4
   1cc28:	d117      	bne.n	1cc5a <bt_keys_clear+0x3e>
		if (keys->id) {
   1cc2a:	7822      	ldrb	r2, [r4, #0]
   1cc2c:	b1c2      	cbz	r2, 1cc60 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1cc2e:	ad02      	add	r5, sp, #8
   1cc30:	2104      	movs	r1, #4
   1cc32:	4628      	mov	r0, r5
   1cc34:	f7f3 fb44 	bl	102c0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cc38:	9500      	str	r5, [sp, #0]
   1cc3a:	1c63      	adds	r3, r4, #1
   1cc3c:	4a0d      	ldr	r2, [pc, #52]	; (1cc74 <bt_keys_clear+0x58>)
   1cc3e:	2124      	movs	r1, #36	; 0x24
   1cc40:	a803      	add	r0, sp, #12
   1cc42:	f7f7 fc79 	bl	14538 <bt_settings_encode_key>
		settings_delete(key);
   1cc46:	a803      	add	r0, sp, #12
   1cc48:	f00c faf4 	bl	29234 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1cc4c:	225c      	movs	r2, #92	; 0x5c
   1cc4e:	2100      	movs	r1, #0
   1cc50:	4620      	mov	r0, r4
   1cc52:	f00d fe48 	bl	2a8e6 <memset>
}
   1cc56:	b00d      	add	sp, #52	; 0x34
   1cc58:	bd30      	pop	{r4, r5, pc}
		bt_id_del(keys);
   1cc5a:	f7f9 fbd5 	bl	16408 <bt_id_del>
   1cc5e:	e7e4      	b.n	1cc2a <bt_keys_clear+0xe>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cc60:	2300      	movs	r3, #0
   1cc62:	9300      	str	r3, [sp, #0]
   1cc64:	1c63      	adds	r3, r4, #1
   1cc66:	4a03      	ldr	r2, [pc, #12]	; (1cc74 <bt_keys_clear+0x58>)
   1cc68:	2124      	movs	r1, #36	; 0x24
   1cc6a:	a803      	add	r0, sp, #12
   1cc6c:	f7f7 fc64 	bl	14538 <bt_settings_encode_key>
   1cc70:	e7e9      	b.n	1cc46 <bt_keys_clear+0x2a>
   1cc72:	bf00      	nop
   1cc74:	00032500 	.word	0x00032500

0001cc78 <keys_set>:
{
   1cc78:	b570      	push	{r4, r5, r6, lr}
   1cc7a:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1cc7c:	b358      	cbz	r0, 1ccd6 <keys_set+0x5e>
   1cc7e:	4614      	mov	r4, r2
   1cc80:	4605      	mov	r5, r0
	len = read_cb(cb_arg, val, sizeof(val));
   1cc82:	2250      	movs	r2, #80	; 0x50
   1cc84:	a902      	add	r1, sp, #8
   1cc86:	4618      	mov	r0, r3
   1cc88:	47a0      	blx	r4
	if (len < 0) {
   1cc8a:	1e04      	subs	r4, r0, #0
   1cc8c:	db2a      	blt.n	1cce4 <keys_set+0x6c>
	err = bt_settings_decode_key(name, &addr);
   1cc8e:	a916      	add	r1, sp, #88	; 0x58
   1cc90:	4628      	mov	r0, r5
   1cc92:	f00d feff 	bl	2aa94 <bt_settings_decode_key>
	if (err) {
   1cc96:	4606      	mov	r6, r0
   1cc98:	bb60      	cbnz	r0, 1ccf4 <keys_set+0x7c>
	settings_name_next(name, &next);
   1cc9a:	a901      	add	r1, sp, #4
   1cc9c:	4628      	mov	r0, r5
   1cc9e:	f00c faf9 	bl	29294 <settings_name_next>
	if (!next) {
   1cca2:	9801      	ldr	r0, [sp, #4]
   1cca4:	b3a8      	cbz	r0, 1cd12 <keys_set+0x9a>
		unsigned long next_id = strtoul(next, NULL, 10);
   1cca6:	220a      	movs	r2, #10
   1cca8:	2100      	movs	r1, #0
   1ccaa:	f00d fcf0 	bl	2a68e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1ccae:	4602      	mov	r2, r0
   1ccb0:	bb40      	cbnz	r0, 1cd04 <keys_set+0x8c>
		id = (uint8_t)next_id;
   1ccb2:	b2c0      	uxtb	r0, r0
	if (!len) {
   1ccb4:	b37c      	cbz	r4, 1cd16 <keys_set+0x9e>
	keys = bt_keys_get_addr(id, &addr);
   1ccb6:	a916      	add	r1, sp, #88	; 0x58
   1ccb8:	f7ff fe90 	bl	1c9dc <bt_keys_get_addr>
	if (!keys) {
   1ccbc:	4605      	mov	r5, r0
   1ccbe:	2800      	cmp	r0, #0
   1ccc0:	d03e      	beq.n	1cd40 <keys_set+0xc8>
	if (len != BT_KEYS_STORAGE_LEN) {
   1ccc2:	2c50      	cmp	r4, #80	; 0x50
   1ccc4:	d147      	bne.n	1cd56 <keys_set+0xde>
		memcpy(keys->storage_start, val, len);
   1ccc6:	4622      	mov	r2, r4
   1ccc8:	a902      	add	r1, sp, #8
   1ccca:	300c      	adds	r0, #12
   1cccc:	f00d fde7 	bl	2a89e <memcpy>
}
   1ccd0:	4630      	mov	r0, r6
   1ccd2:	b018      	add	sp, #96	; 0x60
   1ccd4:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Insufficient number of arguments");
   1ccd6:	2145      	movs	r1, #69	; 0x45
   1ccd8:	4825      	ldr	r0, [pc, #148]	; (1cd70 <keys_set+0xf8>)
   1ccda:	f00b fed3 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1ccde:	f06f 0615 	mvn.w	r6, #21
   1cce2:	e7f5      	b.n	1ccd0 <keys_set+0x58>
		BT_ERR("Failed to read value (err %zd)", len);
   1cce4:	4622      	mov	r2, r4
   1cce6:	2145      	movs	r1, #69	; 0x45
   1cce8:	4822      	ldr	r0, [pc, #136]	; (1cd74 <keys_set+0xfc>)
   1ccea:	f00b fecb 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1ccee:	f06f 0615 	mvn.w	r6, #21
   1ccf2:	e7ed      	b.n	1ccd0 <keys_set+0x58>
		BT_ERR("Unable to decode address %s", name);
   1ccf4:	462a      	mov	r2, r5
   1ccf6:	2145      	movs	r1, #69	; 0x45
   1ccf8:	481f      	ldr	r0, [pc, #124]	; (1cd78 <keys_set+0x100>)
   1ccfa:	f00b fec3 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1ccfe:	f06f 0615 	mvn.w	r6, #21
   1cd02:	e7e5      	b.n	1ccd0 <keys_set+0x58>
			BT_ERR("Invalid local identity %lu", next_id);
   1cd04:	2145      	movs	r1, #69	; 0x45
   1cd06:	481d      	ldr	r0, [pc, #116]	; (1cd7c <keys_set+0x104>)
   1cd08:	f00b febc 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   1cd0c:	f06f 0615 	mvn.w	r6, #21
   1cd10:	e7de      	b.n	1ccd0 <keys_set+0x58>
		id = BT_ID_DEFAULT;
   1cd12:	2000      	movs	r0, #0
   1cd14:	e7ce      	b.n	1ccb4 <keys_set+0x3c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1cd16:	aa16      	add	r2, sp, #88	; 0x58
   1cd18:	4601      	mov	r1, r0
   1cd1a:	203f      	movs	r0, #63	; 0x3f
   1cd1c:	f7ff feca 	bl	1cab4 <bt_keys_find>
		if (keys) {
   1cd20:	b128      	cbz	r0, 1cd2e <keys_set+0xb6>
			(void)memset(keys, 0, sizeof(*keys));
   1cd22:	225c      	movs	r2, #92	; 0x5c
   1cd24:	2100      	movs	r1, #0
   1cd26:	f00d fdde 	bl	2a8e6 <memset>
		return 0;
   1cd2a:	4626      	mov	r6, r4
   1cd2c:	e7d0      	b.n	1ccd0 <keys_set+0x58>
			BT_WARN("Unable to find deleted keys for %s",
   1cd2e:	a816      	add	r0, sp, #88	; 0x58
   1cd30:	f7f7 f890 	bl	13e54 <bt_addr_le_str_real>
   1cd34:	4602      	mov	r2, r0
   1cd36:	2157      	movs	r1, #87	; 0x57
   1cd38:	4811      	ldr	r0, [pc, #68]	; (1cd80 <keys_set+0x108>)
   1cd3a:	f00b fea3 	bl	28a84 <z_log_minimal_printk>
   1cd3e:	e7f4      	b.n	1cd2a <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1cd40:	a816      	add	r0, sp, #88	; 0x58
   1cd42:	f7f7 f887 	bl	13e54 <bt_addr_le_str_real>
   1cd46:	4602      	mov	r2, r0
   1cd48:	2145      	movs	r1, #69	; 0x45
   1cd4a:	480e      	ldr	r0, [pc, #56]	; (1cd84 <keys_set+0x10c>)
   1cd4c:	f00b fe9a 	bl	28a84 <z_log_minimal_printk>
		return -ENOMEM;
   1cd50:	f06f 060b 	mvn.w	r6, #11
   1cd54:	e7bc      	b.n	1ccd0 <keys_set+0x58>
			BT_ERR("Invalid key length %zd != %zu", len,
   1cd56:	2350      	movs	r3, #80	; 0x50
   1cd58:	4622      	mov	r2, r4
   1cd5a:	2145      	movs	r1, #69	; 0x45
   1cd5c:	480a      	ldr	r0, [pc, #40]	; (1cd88 <keys_set+0x110>)
   1cd5e:	f00b fe91 	bl	28a84 <z_log_minimal_printk>
			bt_keys_clear(keys);
   1cd62:	4628      	mov	r0, r5
   1cd64:	f7ff ff5a 	bl	1cc1c <bt_keys_clear>
			return -EINVAL;
   1cd68:	f06f 0615 	mvn.w	r6, #21
   1cd6c:	e7b0      	b.n	1ccd0 <keys_set+0x58>
   1cd6e:	bf00      	nop
   1cd70:	00030758 	.word	0x00030758
   1cd74:	00032508 	.word	0x00032508
   1cd78:	00031cf8 	.word	0x00031cf8
   1cd7c:	00031d1c 	.word	0x00031d1c
   1cd80:	0003252c 	.word	0x0003252c
   1cd84:	00032554 	.word	0x00032554
   1cd88:	00032578 	.word	0x00032578

0001cd8c <bt_keys_store>:
{
   1cd8c:	b530      	push	{r4, r5, lr}
   1cd8e:	b08d      	sub	sp, #52	; 0x34
   1cd90:	4604      	mov	r4, r0
	if (keys->id) {
   1cd92:	7802      	ldrb	r2, [r0, #0]
   1cd94:	b1b2      	cbz	r2, 1cdc4 <bt_keys_store+0x38>
		u8_to_dec(id, sizeof(id), keys->id);
   1cd96:	ad02      	add	r5, sp, #8
   1cd98:	2104      	movs	r1, #4
   1cd9a:	4628      	mov	r0, r5
   1cd9c:	f7f3 fa90 	bl	102c0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1cda0:	9500      	str	r5, [sp, #0]
   1cda2:	1c63      	adds	r3, r4, #1
   1cda4:	4a0f      	ldr	r2, [pc, #60]	; (1cde4 <bt_keys_store+0x58>)
   1cda6:	2124      	movs	r1, #36	; 0x24
   1cda8:	a803      	add	r0, sp, #12
   1cdaa:	f7f7 fbc5 	bl	14538 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1cdae:	2250      	movs	r2, #80	; 0x50
   1cdb0:	f104 010c 	add.w	r1, r4, #12
   1cdb4:	a803      	add	r0, sp, #12
   1cdb6:	f7f5 f853 	bl	11e60 <settings_save_one>
	if (err) {
   1cdba:	4604      	mov	r4, r0
   1cdbc:	b958      	cbnz	r0, 1cdd6 <bt_keys_store+0x4a>
}
   1cdbe:	4620      	mov	r0, r4
   1cdc0:	b00d      	add	sp, #52	; 0x34
   1cdc2:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1cdc4:	2300      	movs	r3, #0
   1cdc6:	9300      	str	r3, [sp, #0]
   1cdc8:	1c43      	adds	r3, r0, #1
   1cdca:	4a06      	ldr	r2, [pc, #24]	; (1cde4 <bt_keys_store+0x58>)
   1cdcc:	2124      	movs	r1, #36	; 0x24
   1cdce:	a803      	add	r0, sp, #12
   1cdd0:	f7f7 fbb2 	bl	14538 <bt_settings_encode_key>
   1cdd4:	e7eb      	b.n	1cdae <bt_keys_store+0x22>
		BT_ERR("Failed to save keys (err %d)", err);
   1cdd6:	4602      	mov	r2, r0
   1cdd8:	2145      	movs	r1, #69	; 0x45
   1cdda:	4803      	ldr	r0, [pc, #12]	; (1cde8 <bt_keys_store+0x5c>)
   1cddc:	f00b fe52 	bl	28a84 <z_log_minimal_printk>
		return err;
   1cde0:	e7ed      	b.n	1cdbe <bt_keys_store+0x32>
   1cde2:	bf00      	nop
   1cde4:	00032500 	.word	0x00032500
   1cde8:	0003259c 	.word	0x0003259c

0001cdec <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1cdec:	4b03      	ldr	r3, [pc, #12]	; (1cdfc <pool_id+0x10>)
   1cdee:	1ac0      	subs	r0, r0, r3
   1cdf0:	1080      	asrs	r0, r0, #2
}
   1cdf2:	4b03      	ldr	r3, [pc, #12]	; (1ce00 <pool_id+0x14>)
   1cdf4:	fb03 f000 	mul.w	r0, r3, r0
   1cdf8:	4770      	bx	lr
   1cdfa:	bf00      	nop
   1cdfc:	200008b8 	.word	0x200008b8
   1ce00:	ba2e8ba3 	.word	0xba2e8ba3

0001ce04 <net_buf_pool_get>:
}
   1ce04:	222c      	movs	r2, #44	; 0x2c
   1ce06:	4b02      	ldr	r3, [pc, #8]	; (1ce10 <net_buf_pool_get+0xc>)
   1ce08:	fb02 3000 	mla	r0, r2, r0, r3
   1ce0c:	4770      	bx	lr
   1ce0e:	bf00      	nop
   1ce10:	200008b8 	.word	0x200008b8

0001ce14 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
   1ce14:	b510      	push	{r4, lr}
   1ce16:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ce18:	7980      	ldrb	r0, [r0, #6]
   1ce1a:	f7ff fff3 	bl	1ce04 <net_buf_pool_get>

	return buf - pool->__bufs;
   1ce1e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1ce20:	1a24      	subs	r4, r4, r0
   1ce22:	10e4      	asrs	r4, r4, #3
}
   1ce24:	4801      	ldr	r0, [pc, #4]	; (1ce2c <net_buf_id+0x18>)
   1ce26:	fb00 f004 	mul.w	r0, r0, r4
   1ce2a:	bd10      	pop	{r4, pc}
   1ce2c:	aaaaaaab 	.word	0xaaaaaaab

0001ce30 <net_buf_reset>:

	return buf;
}

void net_buf_reset(struct net_buf *buf)
{
   1ce30:	b538      	push	{r3, r4, r5, lr}
   1ce32:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ce34:	7943      	ldrb	r3, [r0, #5]
   1ce36:	b983      	cbnz	r3, 1ce5a <net_buf_reset+0x2a>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1ce38:	6823      	ldr	r3, [r4, #0]
   1ce3a:	b14b      	cbz	r3, 1ce50 <net_buf_reset+0x20>
   1ce3c:	4d0c      	ldr	r5, [pc, #48]	; (1ce70 <net_buf_reset+0x40>)
   1ce3e:	2250      	movs	r2, #80	; 0x50
   1ce40:	4629      	mov	r1, r5
   1ce42:	480c      	ldr	r0, [pc, #48]	; (1ce74 <net_buf_reset+0x44>)
   1ce44:	f00b fa7d 	bl	28342 <printk>
   1ce48:	2150      	movs	r1, #80	; 0x50
   1ce4a:	4628      	mov	r0, r5
   1ce4c:	f00b fe12 	bl	28a74 <assert_post_action>
	buf->len  = 0U;
   1ce50:	2300      	movs	r3, #0
   1ce52:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1ce54:	6923      	ldr	r3, [r4, #16]
   1ce56:	60a3      	str	r3, [r4, #8]

	net_buf_simple_reset(&buf->b);
}
   1ce58:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ce5a:	4d05      	ldr	r5, [pc, #20]	; (1ce70 <net_buf_reset+0x40>)
   1ce5c:	224f      	movs	r2, #79	; 0x4f
   1ce5e:	4629      	mov	r1, r5
   1ce60:	4804      	ldr	r0, [pc, #16]	; (1ce74 <net_buf_reset+0x44>)
   1ce62:	f00b fa6e 	bl	28342 <printk>
   1ce66:	214f      	movs	r1, #79	; 0x4f
   1ce68:	4628      	mov	r0, r5
   1ce6a:	f00b fe03 	bl	28a74 <assert_post_action>
   1ce6e:	e7e3      	b.n	1ce38 <net_buf_reset+0x8>
   1ce70:	000325d0 	.word	0x000325d0
   1ce74:	0002f968 	.word	0x0002f968

0001ce78 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce7c:	b083      	sub	sp, #12
   1ce7e:	4605      	mov	r5, r0
   1ce80:	9101      	str	r1, [sp, #4]
   1ce82:	4616      	mov	r6, r2
   1ce84:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ce86:	4610      	mov	r0, r2
   1ce88:	4619      	mov	r1, r3
   1ce8a:	f011 ffe2 	bl	2ee52 <sys_clock_timeout_end_calc>
   1ce8e:	4682      	mov	sl, r0
   1ce90:	9100      	str	r1, [sp, #0]
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1ce92:	2d00      	cmp	r5, #0
   1ce94:	d045      	beq.n	1cf22 <net_buf_alloc_len+0xaa>
	__asm__ volatile(
   1ce96:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce9a:	f3ef 8b11 	mrs	fp, BASEPRI
   1ce9e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cea2:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1cea6:	8beb      	ldrh	r3, [r5, #30]
   1cea8:	2b00      	cmp	r3, #0
   1ceaa:	d052      	beq.n	1cf52 <net_buf_alloc_len+0xda>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ceac:	8baa      	ldrh	r2, [r5, #28]
   1ceae:	4293      	cmp	r3, r2
   1ceb0:	d342      	bcc.n	1cf38 <net_buf_alloc_len+0xc0>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1ceb2:	8bea      	ldrh	r2, [r5, #30]
   1ceb4:	1e53      	subs	r3, r2, #1
   1ceb6:	83eb      	strh	r3, [r5, #30]
	__asm__ volatile(
   1ceb8:	f38b 8811 	msr	BASEPRI, fp
   1cebc:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1cec0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1cec2:	8bab      	ldrh	r3, [r5, #28]
   1cec4:	1a9b      	subs	r3, r3, r2
   1cec6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ceca:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	buf->pool_id = pool_id(pool);
   1cece:	4628      	mov	r0, r5
   1ced0:	f7ff ff8c 	bl	1cdec <pool_id>
   1ced4:	71a0      	strb	r0, [r4, #6]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ced6:	9d01      	ldr	r5, [sp, #4]
   1ced8:	2d00      	cmp	r5, #0
   1ceda:	d061      	beq.n	1cfa0 <net_buf_alloc_len+0x128>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cedc:	ea56 0307 	orrs.w	r3, r6, r7
   1cee0:	d005      	beq.n	1ceee <net_buf_alloc_len+0x76>
   1cee2:	f1b7 3fff 	cmp.w	r7, #4294967295
   1cee6:	bf08      	it	eq
   1cee8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1ceec:	d13e      	bne.n	1cf6c <net_buf_alloc_len+0xf4>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ceee:	4632      	mov	r2, r6
   1cef0:	463b      	mov	r3, r7
   1cef2:	a901      	add	r1, sp, #4
   1cef4:	4620      	mov	r0, r4
   1cef6:	f010 fd93 	bl	2da20 <data_alloc>
   1cefa:	4606      	mov	r6, r0
   1cefc:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1cefe:	2800      	cmp	r0, #0
   1cf00:	d046      	beq.n	1cf90 <net_buf_alloc_len+0x118>
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1cf02:	9b01      	ldr	r3, [sp, #4]
   1cf04:	429d      	cmp	r5, r3
   1cf06:	d94d      	bls.n	1cfa4 <net_buf_alloc_len+0x12c>
   1cf08:	4d2d      	ldr	r5, [pc, #180]	; (1cfc0 <net_buf_alloc_len+0x148>)
   1cf0a:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   1cf0e:	4629      	mov	r1, r5
   1cf10:	482c      	ldr	r0, [pc, #176]	; (1cfc4 <net_buf_alloc_len+0x14c>)
   1cf12:	f00b fa16 	bl	28342 <printk>
   1cf16:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1cf1a:	4628      	mov	r0, r5
   1cf1c:	f00b fdaa 	bl	28a74 <assert_post_action>
   1cf20:	e040      	b.n	1cfa4 <net_buf_alloc_len+0x12c>
	__ASSERT_NO_MSG(pool);
   1cf22:	4c27      	ldr	r4, [pc, #156]	; (1cfc0 <net_buf_alloc_len+0x148>)
   1cf24:	22ed      	movs	r2, #237	; 0xed
   1cf26:	4621      	mov	r1, r4
   1cf28:	4826      	ldr	r0, [pc, #152]	; (1cfc4 <net_buf_alloc_len+0x14c>)
   1cf2a:	f00b fa0a 	bl	28342 <printk>
   1cf2e:	21ed      	movs	r1, #237	; 0xed
   1cf30:	4620      	mov	r0, r4
   1cf32:	f00b fd9f 	bl	28a74 <assert_post_action>
   1cf36:	e7ae      	b.n	1ce96 <net_buf_alloc_len+0x1e>
	return z_impl_k_queue_get(queue, timeout);
   1cf38:	2200      	movs	r2, #0
   1cf3a:	2300      	movs	r3, #0
   1cf3c:	4628      	mov	r0, r5
   1cf3e:	f005 fc35 	bl	227ac <z_impl_k_queue_get>
			if (buf) {
   1cf42:	4604      	mov	r4, r0
   1cf44:	2800      	cmp	r0, #0
   1cf46:	d0b4      	beq.n	1ceb2 <net_buf_alloc_len+0x3a>
   1cf48:	f38b 8811 	msr	BASEPRI, fp
   1cf4c:	f3bf 8f6f 	isb	sy
				goto success;
   1cf50:	e7c1      	b.n	1ced6 <net_buf_alloc_len+0x5e>
   1cf52:	f38b 8811 	msr	BASEPRI, fp
   1cf56:	f3bf 8f6f 	isb	sy
   1cf5a:	4632      	mov	r2, r6
   1cf5c:	463b      	mov	r3, r7
   1cf5e:	4628      	mov	r0, r5
   1cf60:	f005 fc24 	bl	227ac <z_impl_k_queue_get>
	if (!buf) {
   1cf64:	4604      	mov	r4, r0
   1cf66:	2800      	cmp	r0, #0
   1cf68:	d1b5      	bne.n	1ced6 <net_buf_alloc_len+0x5e>
   1cf6a:	e025      	b.n	1cfb8 <net_buf_alloc_len+0x140>
			int64_t remaining = end - sys_clock_tick_get();
   1cf6c:	f007 fed0 	bl	24d10 <sys_clock_tick_get>
   1cf70:	ebba 0800 	subs.w	r8, sl, r0
   1cf74:	9b00      	ldr	r3, [sp, #0]
   1cf76:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   1cf7a:	f1b8 0f01 	cmp.w	r8, #1
   1cf7e:	f179 0300 	sbcs.w	r3, r9, #0
   1cf82:	db02      	blt.n	1cf8a <net_buf_alloc_len+0x112>
				timeout = Z_TIMEOUT_TICKS(remaining);
   1cf84:	4646      	mov	r6, r8
   1cf86:	464f      	mov	r7, r9
   1cf88:	e7b1      	b.n	1ceee <net_buf_alloc_len+0x76>
				timeout = K_NO_WAIT;
   1cf8a:	2600      	movs	r6, #0
   1cf8c:	2700      	movs	r7, #0
   1cf8e:	e7ae      	b.n	1ceee <net_buf_alloc_len+0x76>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cf90:	79a0      	ldrb	r0, [r4, #6]
   1cf92:	f7ff ff37 	bl	1ce04 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1cf96:	4621      	mov	r1, r4
   1cf98:	f011 fe90 	bl	2ecbc <k_queue_prepend>
			return NULL;
   1cf9c:	4634      	mov	r4, r6
}
   1cf9e:	e00b      	b.n	1cfb8 <net_buf_alloc_len+0x140>
#endif
	} else {
		buf->__buf = NULL;
   1cfa0:	2300      	movs	r3, #0
   1cfa2:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   1cfa4:	2301      	movs	r3, #1
   1cfa6:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   1cfa8:	2300      	movs	r3, #0
   1cfaa:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1cfac:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1cfae:	9b01      	ldr	r3, [sp, #4]
   1cfb0:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1cfb2:	4620      	mov	r0, r4
   1cfb4:	f7ff ff3c 	bl	1ce30 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1cfb8:	4620      	mov	r0, r4
   1cfba:	b003      	add	sp, #12
   1cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfc0:	000325d0 	.word	0x000325d0
   1cfc4:	0002f968 	.word	0x0002f968

0001cfc8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   1cfca:	4605      	mov	r5, r0
   1cfcc:	f005 fbee 	bl	227ac <z_impl_k_queue_get>
	if (!buf) {
   1cfd0:	4606      	mov	r6, r0
   1cfd2:	b308      	cbz	r0, 1d018 <net_buf_get+0x50>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cfd4:	4604      	mov	r4, r0
   1cfd6:	e004      	b.n	1cfe2 <net_buf_get+0x1a>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1cfd8:	7963      	ldrb	r3, [r4, #5]
   1cfda:	f023 0301 	bic.w	r3, r3, #1
   1cfde:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cfe0:	6824      	ldr	r4, [r4, #0]
   1cfe2:	7963      	ldrb	r3, [r4, #5]
   1cfe4:	f013 0f01 	tst.w	r3, #1
   1cfe8:	d014      	beq.n	1d014 <net_buf_get+0x4c>
   1cfea:	2200      	movs	r2, #0
   1cfec:	2300      	movs	r3, #0
   1cfee:	4628      	mov	r0, r5
   1cff0:	f005 fbdc 	bl	227ac <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1cff4:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1cff6:	2800      	cmp	r0, #0
   1cff8:	d1ee      	bne.n	1cfd8 <net_buf_get+0x10>
   1cffa:	4f08      	ldr	r7, [pc, #32]	; (1d01c <net_buf_get+0x54>)
   1cffc:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   1d000:	4639      	mov	r1, r7
   1d002:	4807      	ldr	r0, [pc, #28]	; (1d020 <net_buf_get+0x58>)
   1d004:	f00b f99d 	bl	28342 <printk>
   1d008:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1d00c:	4638      	mov	r0, r7
   1d00e:	f00b fd31 	bl	28a74 <assert_post_action>
   1d012:	e7e1      	b.n	1cfd8 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1d014:	2300      	movs	r3, #0
   1d016:	6023      	str	r3, [r4, #0]

	return buf;
}
   1d018:	4630      	mov	r0, r6
   1d01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d01c:	000325d0 	.word	0x000325d0
   1d020:	0002f968 	.word	0x0002f968

0001d024 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1d024:	b570      	push	{r4, r5, r6, lr}
   1d026:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1d028:	4604      	mov	r4, r0
   1d02a:	b128      	cbz	r0, 1d038 <net_buf_simple_reserve+0x14>
	__ASSERT_NO_MSG(buf->len == 0U);
   1d02c:	88a3      	ldrh	r3, [r4, #4]
   1d02e:	b983      	cbnz	r3, 1d052 <net_buf_simple_reserve+0x2e>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1d030:	68a3      	ldr	r3, [r4, #8]
   1d032:	442b      	add	r3, r5
   1d034:	6023      	str	r3, [r4, #0]
}
   1d036:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(buf);
   1d038:	4e0c      	ldr	r6, [pc, #48]	; (1d06c <net_buf_simple_reserve+0x48>)
   1d03a:	f240 12bd 	movw	r2, #445	; 0x1bd
   1d03e:	4631      	mov	r1, r6
   1d040:	480b      	ldr	r0, [pc, #44]	; (1d070 <net_buf_simple_reserve+0x4c>)
   1d042:	f00b f97e 	bl	28342 <printk>
   1d046:	f240 11bd 	movw	r1, #445	; 0x1bd
   1d04a:	4630      	mov	r0, r6
   1d04c:	f00b fd12 	bl	28a74 <assert_post_action>
   1d050:	e7ec      	b.n	1d02c <net_buf_simple_reserve+0x8>
	__ASSERT_NO_MSG(buf->len == 0U);
   1d052:	4e06      	ldr	r6, [pc, #24]	; (1d06c <net_buf_simple_reserve+0x48>)
   1d054:	f44f 72df 	mov.w	r2, #446	; 0x1be
   1d058:	4631      	mov	r1, r6
   1d05a:	4805      	ldr	r0, [pc, #20]	; (1d070 <net_buf_simple_reserve+0x4c>)
   1d05c:	f00b f971 	bl	28342 <printk>
   1d060:	f44f 71df 	mov.w	r1, #446	; 0x1be
   1d064:	4630      	mov	r0, r6
   1d066:	f00b fd05 	bl	28a74 <assert_post_action>
   1d06a:	e7e1      	b.n	1d030 <net_buf_simple_reserve+0xc>
   1d06c:	000325d0 	.word	0x000325d0
   1d070:	0002f968 	.word	0x0002f968

0001d074 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1d074:	b570      	push	{r4, r5, r6, lr}
   1d076:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1d078:	4605      	mov	r5, r0
   1d07a:	b148      	cbz	r0, 1d090 <net_buf_put+0x1c>
	__ASSERT_NO_MSG(buf);
   1d07c:	b1ac      	cbz	r4, 1d0aa <net_buf_put+0x36>
{
   1d07e:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1d080:	6810      	ldr	r0, [r2, #0]
   1d082:	b1f8      	cbz	r0, 1d0c4 <net_buf_put+0x50>
		tail->flags |= NET_BUF_FRAGS;
   1d084:	7953      	ldrb	r3, [r2, #5]
   1d086:	f043 0301 	orr.w	r3, r3, #1
   1d08a:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1d08c:	4602      	mov	r2, r0
   1d08e:	e7f7      	b.n	1d080 <net_buf_put+0xc>
	__ASSERT_NO_MSG(fifo);
   1d090:	4e0f      	ldr	r6, [pc, #60]	; (1d0d0 <net_buf_put+0x5c>)
   1d092:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   1d096:	4631      	mov	r1, r6
   1d098:	480e      	ldr	r0, [pc, #56]	; (1d0d4 <net_buf_put+0x60>)
   1d09a:	f00b f952 	bl	28342 <printk>
   1d09e:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
   1d0a2:	4630      	mov	r0, r6
   1d0a4:	f00b fce6 	bl	28a74 <assert_post_action>
   1d0a8:	e7e8      	b.n	1d07c <net_buf_put+0x8>
	__ASSERT_NO_MSG(buf);
   1d0aa:	4e09      	ldr	r6, [pc, #36]	; (1d0d0 <net_buf_put+0x5c>)
   1d0ac:	f240 12fb 	movw	r2, #507	; 0x1fb
   1d0b0:	4631      	mov	r1, r6
   1d0b2:	4808      	ldr	r0, [pc, #32]	; (1d0d4 <net_buf_put+0x60>)
   1d0b4:	f00b f945 	bl	28342 <printk>
   1d0b8:	f240 11fb 	movw	r1, #507	; 0x1fb
   1d0bc:	4630      	mov	r0, r6
   1d0be:	f00b fcd9 	bl	28a74 <assert_post_action>
   1d0c2:	e7dc      	b.n	1d07e <net_buf_put+0xa>
	}

	k_fifo_put_list(fifo, buf, tail);
   1d0c4:	4621      	mov	r1, r4
   1d0c6:	4628      	mov	r0, r5
   1d0c8:	f005 fb1a 	bl	22700 <k_queue_append_list>
}
   1d0cc:	bd70      	pop	{r4, r5, r6, pc}
   1d0ce:	bf00      	nop
   1d0d0:	000325d0 	.word	0x000325d0
   1d0d4:	0002f968 	.word	0x0002f968

0001d0d8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d0d8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1d0da:	4604      	mov	r4, r0
   1d0dc:	b9e0      	cbnz	r0, 1d118 <net_buf_unref+0x40>
   1d0de:	4d18      	ldr	r5, [pc, #96]	; (1d140 <net_buf_unref+0x68>)
   1d0e0:	f240 220a 	movw	r2, #522	; 0x20a
   1d0e4:	4629      	mov	r1, r5
   1d0e6:	4817      	ldr	r0, [pc, #92]	; (1d144 <net_buf_unref+0x6c>)
   1d0e8:	f00b f92b 	bl	28342 <printk>
   1d0ec:	f240 210a 	movw	r1, #522	; 0x20a
   1d0f0:	4628      	mov	r0, r5
   1d0f2:	f00b fcbf 	bl	28a74 <assert_post_action>
   1d0f6:	e00f      	b.n	1d118 <net_buf_unref+0x40>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   1d0f8:	4620      	mov	r0, r4
   1d0fa:	f010 fca5 	bl	2da48 <data_unref>
			buf->__buf = NULL;
   1d0fe:	2300      	movs	r3, #0
   1d100:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   1d102:	2300      	movs	r3, #0
   1d104:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1d106:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1d108:	79a0      	ldrb	r0, [r4, #6]
   1d10a:	f7ff fe7b 	bl	1ce04 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1d10e:	6a03      	ldr	r3, [r0, #32]
   1d110:	b16b      	cbz	r3, 1d12e <net_buf_unref+0x56>
			pool->destroy(buf);
   1d112:	4620      	mov	r0, r4
   1d114:	4798      	blx	r3
{
   1d116:	462c      	mov	r4, r5
	while (buf) {
   1d118:	b184      	cbz	r4, 1d13c <net_buf_unref+0x64>
		struct net_buf *frags = buf->frags;
   1d11a:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1d11c:	7923      	ldrb	r3, [r4, #4]
   1d11e:	3b01      	subs	r3, #1
   1d120:	b2db      	uxtb	r3, r3
   1d122:	7123      	strb	r3, [r4, #4]
   1d124:	b953      	cbnz	r3, 1d13c <net_buf_unref+0x64>
		if (buf->__buf) {
   1d126:	6921      	ldr	r1, [r4, #16]
   1d128:	2900      	cmp	r1, #0
   1d12a:	d1e5      	bne.n	1d0f8 <net_buf_unref+0x20>
   1d12c:	e7e9      	b.n	1d102 <net_buf_unref+0x2a>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d12e:	79a0      	ldrb	r0, [r4, #6]
   1d130:	f7ff fe68 	bl	1ce04 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1d134:	4621      	mov	r1, r4
   1d136:	f011 fdc1 	bl	2ecbc <k_queue_prepend>
}
   1d13a:	e7ec      	b.n	1d116 <net_buf_unref+0x3e>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d13c:	bd38      	pop	{r3, r4, r5, pc}
   1d13e:	bf00      	nop
   1d140:	000325d0 	.word	0x000325d0
   1d144:	0002f968 	.word	0x0002f968

0001d148 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1d148:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1d14a:	4604      	mov	r4, r0
   1d14c:	b120      	cbz	r0, 1d158 <net_buf_ref+0x10>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1d14e:	7923      	ldrb	r3, [r4, #4]
   1d150:	3301      	adds	r3, #1
   1d152:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1d154:	4620      	mov	r0, r4
   1d156:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf);
   1d158:	4d06      	ldr	r5, [pc, #24]	; (1d174 <net_buf_ref+0x2c>)
   1d15a:	f240 2239 	movw	r2, #569	; 0x239
   1d15e:	4629      	mov	r1, r5
   1d160:	4805      	ldr	r0, [pc, #20]	; (1d178 <net_buf_ref+0x30>)
   1d162:	f00b f8ee 	bl	28342 <printk>
   1d166:	f240 2139 	movw	r1, #569	; 0x239
   1d16a:	4628      	mov	r0, r5
   1d16c:	f00b fc82 	bl	28a74 <assert_post_action>
   1d170:	e7ed      	b.n	1d14e <net_buf_ref+0x6>
   1d172:	bf00      	nop
   1d174:	000325d0 	.word	0x000325d0
   1d178:	0002f968 	.word	0x0002f968

0001d17c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1d17c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1d17e:	4604      	mov	r4, r0
   1d180:	b120      	cbz	r0, 1d18c <net_buf_frag_last+0x10>

	while (buf->frags) {
   1d182:	4620      	mov	r0, r4
   1d184:	6824      	ldr	r4, [r4, #0]
   1d186:	2c00      	cmp	r4, #0
   1d188:	d1fb      	bne.n	1d182 <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   1d18a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf);
   1d18c:	4d06      	ldr	r5, [pc, #24]	; (1d1a8 <net_buf_frag_last+0x2c>)
   1d18e:	f240 2276 	movw	r2, #630	; 0x276
   1d192:	4629      	mov	r1, r5
   1d194:	4805      	ldr	r0, [pc, #20]	; (1d1ac <net_buf_frag_last+0x30>)
   1d196:	f00b f8d4 	bl	28342 <printk>
   1d19a:	f240 2176 	movw	r1, #630	; 0x276
   1d19e:	4628      	mov	r0, r5
   1d1a0:	f00b fc68 	bl	28a74 <assert_post_action>
   1d1a4:	e7ed      	b.n	1d182 <net_buf_frag_last+0x6>
   1d1a6:	bf00      	nop
   1d1a8:	000325d0 	.word	0x000325d0
   1d1ac:	0002f968 	.word	0x0002f968

0001d1b0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1d1b0:	b570      	push	{r4, r5, r6, lr}
   1d1b2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(parent);
   1d1b4:	4605      	mov	r5, r0
   1d1b6:	b148      	cbz	r0, 1d1cc <net_buf_frag_insert+0x1c>
	__ASSERT_NO_MSG(frag);
   1d1b8:	b1ac      	cbz	r4, 1d1e6 <net_buf_frag_insert+0x36>

	if (parent->frags) {
   1d1ba:	682b      	ldr	r3, [r5, #0]
   1d1bc:	b123      	cbz	r3, 1d1c8 <net_buf_frag_insert+0x18>
		net_buf_frag_last(frag)->frags = parent->frags;
   1d1be:	4620      	mov	r0, r4
   1d1c0:	f7ff ffdc 	bl	1d17c <net_buf_frag_last>
   1d1c4:	682b      	ldr	r3, [r5, #0]
   1d1c6:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1d1c8:	602c      	str	r4, [r5, #0]
}
   1d1ca:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(parent);
   1d1cc:	4e0c      	ldr	r6, [pc, #48]	; (1d200 <net_buf_frag_insert+0x50>)
   1d1ce:	f240 2281 	movw	r2, #641	; 0x281
   1d1d2:	4631      	mov	r1, r6
   1d1d4:	480b      	ldr	r0, [pc, #44]	; (1d204 <net_buf_frag_insert+0x54>)
   1d1d6:	f00b f8b4 	bl	28342 <printk>
   1d1da:	f240 2181 	movw	r1, #641	; 0x281
   1d1de:	4630      	mov	r0, r6
   1d1e0:	f00b fc48 	bl	28a74 <assert_post_action>
   1d1e4:	e7e8      	b.n	1d1b8 <net_buf_frag_insert+0x8>
	__ASSERT_NO_MSG(frag);
   1d1e6:	4e06      	ldr	r6, [pc, #24]	; (1d200 <net_buf_frag_insert+0x50>)
   1d1e8:	f240 2282 	movw	r2, #642	; 0x282
   1d1ec:	4631      	mov	r1, r6
   1d1ee:	4805      	ldr	r0, [pc, #20]	; (1d204 <net_buf_frag_insert+0x54>)
   1d1f0:	f00b f8a7 	bl	28342 <printk>
   1d1f4:	f240 2182 	movw	r1, #642	; 0x282
   1d1f8:	4630      	mov	r0, r6
   1d1fa:	f00b fc3b 	bl	28a74 <assert_post_action>
   1d1fe:	e7dc      	b.n	1d1ba <net_buf_frag_insert+0xa>
   1d200:	000325d0 	.word	0x000325d0
   1d204:	0002f968 	.word	0x0002f968

0001d208 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1d208:	b570      	push	{r4, r5, r6, lr}
   1d20a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1d20c:	460d      	mov	r5, r1
   1d20e:	b141      	cbz	r1, 1d222 <net_buf_frag_add+0x1a>

	if (!head) {
   1d210:	b1a4      	cbz	r4, 1d23c <net_buf_frag_add+0x34>
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1d212:	4620      	mov	r0, r4
   1d214:	f7ff ffb2 	bl	1d17c <net_buf_frag_last>
   1d218:	4629      	mov	r1, r5
   1d21a:	f7ff ffc9 	bl	1d1b0 <net_buf_frag_insert>

	return head;
   1d21e:	4620      	mov	r0, r4
}
   1d220:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(frag);
   1d222:	4e08      	ldr	r6, [pc, #32]	; (1d244 <net_buf_frag_add+0x3c>)
   1d224:	f240 228d 	movw	r2, #653	; 0x28d
   1d228:	4631      	mov	r1, r6
   1d22a:	4807      	ldr	r0, [pc, #28]	; (1d248 <net_buf_frag_add+0x40>)
   1d22c:	f00b f889 	bl	28342 <printk>
   1d230:	f240 218d 	movw	r1, #653	; 0x28d
   1d234:	4630      	mov	r0, r6
   1d236:	f00b fc1d 	bl	28a74 <assert_post_action>
   1d23a:	e7e9      	b.n	1d210 <net_buf_frag_add+0x8>
		return net_buf_ref(frag);
   1d23c:	4628      	mov	r0, r5
   1d23e:	f7ff ff83 	bl	1d148 <net_buf_ref>
   1d242:	e7ed      	b.n	1d220 <net_buf_frag_add+0x18>
   1d244:	000325d0 	.word	0x000325d0
   1d248:	0002f968 	.word	0x0002f968

0001d24c <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1d24c:	b570      	push	{r4, r5, r6, lr}
   1d24e:	4604      	mov	r4, r0
   1d250:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1d252:	8883      	ldrh	r3, [r0, #4]
   1d254:	428b      	cmp	r3, r1
   1d256:	d306      	bcc.n	1d266 <net_buf_simple_pull+0x1a>

	buf->len -= len;
   1d258:	88a3      	ldrh	r3, [r4, #4]
   1d25a:	1b5b      	subs	r3, r3, r5
   1d25c:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1d25e:	6820      	ldr	r0, [r4, #0]
   1d260:	4428      	add	r0, r5
   1d262:	6020      	str	r0, [r4, #0]
}
   1d264:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(buf->len >= len);
   1d266:	4e06      	ldr	r6, [pc, #24]	; (1d280 <net_buf_simple_pull+0x34>)
   1d268:	f240 4271 	movw	r2, #1137	; 0x471
   1d26c:	4631      	mov	r1, r6
   1d26e:	4805      	ldr	r0, [pc, #20]	; (1d284 <net_buf_simple_pull+0x38>)
   1d270:	f00b f867 	bl	28342 <printk>
   1d274:	f240 4171 	movw	r1, #1137	; 0x471
   1d278:	4630      	mov	r0, r6
   1d27a:	f00b fbfb 	bl	28a74 <assert_post_action>
   1d27e:	e7eb      	b.n	1d258 <net_buf_simple_pull+0xc>
   1d280:	000325d0 	.word	0x000325d0
   1d284:	0002f968 	.word	0x0002f968

0001d288 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d28a:	4604      	mov	r4, r0
   1d28c:	460d      	mov	r5, r1
	void *data = buf->data;
   1d28e:	6806      	ldr	r6, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1d290:	8883      	ldrh	r3, [r0, #4]
   1d292:	428b      	cmp	r3, r1
   1d294:	d307      	bcc.n	1d2a6 <net_buf_simple_pull_mem+0x1e>

	buf->len -= len;
   1d296:	88a3      	ldrh	r3, [r4, #4]
   1d298:	1b5b      	subs	r3, r3, r5
   1d29a:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1d29c:	6821      	ldr	r1, [r4, #0]
   1d29e:	4429      	add	r1, r5
   1d2a0:	6021      	str	r1, [r4, #0]

	return data;
}
   1d2a2:	4630      	mov	r0, r6
   1d2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(buf->len >= len);
   1d2a6:	4f06      	ldr	r7, [pc, #24]	; (1d2c0 <net_buf_simple_pull_mem+0x38>)
   1d2a8:	f240 427d 	movw	r2, #1149	; 0x47d
   1d2ac:	4639      	mov	r1, r7
   1d2ae:	4805      	ldr	r0, [pc, #20]	; (1d2c4 <net_buf_simple_pull_mem+0x3c>)
   1d2b0:	f00b f847 	bl	28342 <printk>
   1d2b4:	f240 417d 	movw	r1, #1149	; 0x47d
   1d2b8:	4638      	mov	r0, r7
   1d2ba:	f00b fbdb 	bl	28a74 <assert_post_action>
   1d2be:	e7ea      	b.n	1d296 <net_buf_simple_pull_mem+0xe>
   1d2c0:	000325d0 	.word	0x000325d0
   1d2c4:	0002f968 	.word	0x0002f968

0001d2c8 <net_buf_simple_push>:
{
   1d2c8:	b570      	push	{r4, r5, r6, lr}
   1d2ca:	4605      	mov	r5, r0
   1d2cc:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d2ce:	f010 fbf1 	bl	2dab4 <net_buf_simple_headroom>
   1d2d2:	42a0      	cmp	r0, r4
   1d2d4:	d306      	bcc.n	1d2e4 <net_buf_simple_push+0x1c>
	buf->data -= len;
   1d2d6:	6828      	ldr	r0, [r5, #0]
   1d2d8:	1b00      	subs	r0, r0, r4
   1d2da:	6028      	str	r0, [r5, #0]
	buf->len += len;
   1d2dc:	88a9      	ldrh	r1, [r5, #4]
   1d2de:	440c      	add	r4, r1
   1d2e0:	80ac      	strh	r4, [r5, #4]
}
   1d2e2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d2e4:	4e06      	ldr	r6, [pc, #24]	; (1d300 <net_buf_simple_push+0x38>)
   1d2e6:	f240 4211 	movw	r2, #1041	; 0x411
   1d2ea:	4631      	mov	r1, r6
   1d2ec:	4805      	ldr	r0, [pc, #20]	; (1d304 <net_buf_simple_push+0x3c>)
   1d2ee:	f00b f828 	bl	28342 <printk>
   1d2f2:	f240 4111 	movw	r1, #1041	; 0x411
   1d2f6:	4630      	mov	r0, r6
   1d2f8:	f00b fbbc 	bl	28a74 <assert_post_action>
   1d2fc:	e7eb      	b.n	1d2d6 <net_buf_simple_push+0xe>
   1d2fe:	bf00      	nop
   1d300:	000325d0 	.word	0x000325d0
   1d304:	0002f968 	.word	0x0002f968

0001d308 <net_buf_simple_add>:
{
   1d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d30a:	4604      	mov	r4, r0
   1d30c:	460d      	mov	r5, r1
	return buf->data + buf->len;
   1d30e:	6803      	ldr	r3, [r0, #0]
   1d310:	8886      	ldrh	r6, [r0, #4]
   1d312:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d314:	f010 fbd2 	bl	2dabc <net_buf_simple_tailroom>
   1d318:	42a8      	cmp	r0, r5
   1d31a:	d304      	bcc.n	1d326 <net_buf_simple_add+0x1e>
	buf->len += len;
   1d31c:	88a1      	ldrh	r1, [r4, #4]
   1d31e:	440d      	add	r5, r1
   1d320:	80a5      	strh	r5, [r4, #4]
}
   1d322:	4630      	mov	r0, r6
   1d324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d326:	4f06      	ldr	r7, [pc, #24]	; (1d340 <net_buf_simple_add+0x38>)
   1d328:	f240 3222 	movw	r2, #802	; 0x322
   1d32c:	4639      	mov	r1, r7
   1d32e:	4805      	ldr	r0, [pc, #20]	; (1d344 <net_buf_simple_add+0x3c>)
   1d330:	f00b f807 	bl	28342 <printk>
   1d334:	f240 3122 	movw	r1, #802	; 0x322
   1d338:	4638      	mov	r0, r7
   1d33a:	f00b fb9b 	bl	28a74 <assert_post_action>
   1d33e:	e7ed      	b.n	1d31c <net_buf_simple_add+0x14>
   1d340:	000325d0 	.word	0x000325d0
   1d344:	0002f968 	.word	0x0002f968

0001d348 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1d348:	4800      	ldr	r0, [pc, #0]	; (1d34c <get_hf_flags+0x4>)
   1d34a:	4770      	bx	lr
   1d34c:	20002924 	.word	0x20002924

0001d350 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1d350:	4b01      	ldr	r3, [pc, #4]	; (1d358 <get_subsys+0x8>)
   1d352:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
   1d354:	1140      	asrs	r0, r0, #5
   1d356:	4770      	bx	lr
   1d358:	200028dc 	.word	0x200028dc

0001d35c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d35c:	b530      	push	{r4, r5, lr}
   1d35e:	b083      	sub	sp, #12
   1d360:	4605      	mov	r5, r0
   1d362:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d364:	f7ff fff4 	bl	1d350 <get_subsys>
   1d368:	4601      	mov	r1, r0
   1d36a:	2340      	movs	r3, #64	; 0x40
   1d36c:	9300      	str	r3, [sp, #0]
   1d36e:	4623      	mov	r3, r4
   1d370:	4a05      	ldr	r2, [pc, #20]	; (1d388 <onoff_start+0x2c>)
   1d372:	4806      	ldr	r0, [pc, #24]	; (1d38c <onoff_start+0x30>)
   1d374:	f010 fc2c 	bl	2dbd0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d378:	1e01      	subs	r1, r0, #0
   1d37a:	db01      	blt.n	1d380 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1d37c:	b003      	add	sp, #12
   1d37e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1d380:	4628      	mov	r0, r5
   1d382:	47a0      	blx	r4
}
   1d384:	e7fa      	b.n	1d37c <onoff_start+0x20>
   1d386:	bf00      	nop
   1d388:	0002dc19 	.word	0x0002dc19
   1d38c:	0002f018 	.word	0x0002f018

0001d390 <generic_hfclk_stop>:
{
   1d390:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d392:	4b0a      	ldr	r3, [pc, #40]	; (1d3bc <generic_hfclk_stop+0x2c>)
   1d394:	f3bf 8f5b 	dmb	ish
   1d398:	e853 2f00 	ldrex	r2, [r3]
   1d39c:	f022 0102 	bic.w	r1, r2, #2
   1d3a0:	e843 1000 	strex	r0, r1, [r3]
   1d3a4:	2800      	cmp	r0, #0
   1d3a6:	d1f7      	bne.n	1d398 <generic_hfclk_stop+0x8>
   1d3a8:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d3ac:	f012 0f01 	tst.w	r2, #1
   1d3b0:	d000      	beq.n	1d3b4 <generic_hfclk_stop+0x24>
}
   1d3b2:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1d3b4:	f010 fc42 	bl	2dc3c <hfclk_stop>
   1d3b8:	e7fb      	b.n	1d3b2 <generic_hfclk_stop+0x22>
   1d3ba:	bf00      	nop
   1d3bc:	20002934 	.word	0x20002934

0001d3c0 <generic_hfclk_start>:
{
   1d3c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d3c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d3c6:	f3ef 8411 	mrs	r4, BASEPRI
   1d3ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3ce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d3d2:	4a13      	ldr	r2, [pc, #76]	; (1d420 <generic_hfclk_start+0x60>)
   1d3d4:	6813      	ldr	r3, [r2, #0]
   1d3d6:	f043 0302 	orr.w	r3, r3, #2
   1d3da:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d3dc:	f013 0f01 	tst.w	r3, #1
   1d3e0:	d108      	bne.n	1d3f4 <generic_hfclk_start+0x34>
	bool already_started = false;
   1d3e2:	2300      	movs	r3, #0
	__asm__ volatile(
   1d3e4:	f384 8811 	msr	BASEPRI, r4
   1d3e8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d3ec:	b99b      	cbnz	r3, 1d416 <generic_hfclk_start+0x56>
	hfclk_start();
   1d3ee:	f010 fc1b 	bl	2dc28 <hfclk_start>
}
   1d3f2:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d3f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d3f8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d3fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d400:	f012 0f01 	tst.w	r2, #1
   1d404:	d101      	bne.n	1d40a <generic_hfclk_start+0x4a>
	bool already_started = false;
   1d406:	2300      	movs	r3, #0
   1d408:	e7ec      	b.n	1d3e4 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1d40a:	f7ff ff9d 	bl	1d348 <get_hf_flags>
   1d40e:	f010 fbba 	bl	2db86 <set_on_state>
			already_started = true;
   1d412:	2301      	movs	r3, #1
   1d414:	e7e6      	b.n	1d3e4 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   1d416:	2100      	movs	r1, #0
   1d418:	4802      	ldr	r0, [pc, #8]	; (1d424 <generic_hfclk_start+0x64>)
   1d41a:	f010 fbc7 	bl	2dbac <clkstarted_handle>
		return;
   1d41e:	e7e8      	b.n	1d3f2 <generic_hfclk_start+0x32>
   1d420:	20002934 	.word	0x20002934
   1d424:	0002f018 	.word	0x0002f018

0001d428 <get_status>:
{
   1d428:	b570      	push	{r4, r5, r6, lr}
   1d42a:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1d42c:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d42e:	2c01      	cmp	r4, #1
   1d430:	d807      	bhi.n	1d442 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d432:	4621      	mov	r1, r4
   1d434:	4628      	mov	r0, r5
   1d436:	f010 fb5c 	bl	2daf2 <get_sub_data>
   1d43a:	6880      	ldr	r0, [r0, #8]
}
   1d43c:	f000 0007 	and.w	r0, r0, #7
   1d440:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d442:	4e05      	ldr	r6, [pc, #20]	; (1d458 <get_status+0x30>)
   1d444:	227e      	movs	r2, #126	; 0x7e
   1d446:	4631      	mov	r1, r6
   1d448:	4804      	ldr	r0, [pc, #16]	; (1d45c <get_status+0x34>)
   1d44a:	f00a ff7a 	bl	28342 <printk>
   1d44e:	217e      	movs	r1, #126	; 0x7e
   1d450:	4630      	mov	r0, r6
   1d452:	f00b fb0f 	bl	28a74 <assert_post_action>
   1d456:	e7ec      	b.n	1d432 <get_status+0xa>
   1d458:	00032608 	.word	0x00032608
   1d45c:	0002f968 	.word	0x0002f968

0001d460 <stop>:
{
   1d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d464:	4607      	mov	r7, r0
   1d466:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1d468:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1d46a:	4621      	mov	r1, r4
   1d46c:	f010 fb41 	bl	2daf2 <get_sub_data>
   1d470:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d472:	2c01      	cmp	r4, #1
   1d474:	d80f      	bhi.n	1d496 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
   1d476:	4631      	mov	r1, r6
   1d478:	f105 0008 	add.w	r0, r5, #8
   1d47c:	f010 fb4a 	bl	2db14 <set_off_state>
	if (err < 0) {
   1d480:	2800      	cmp	r0, #0
   1d482:	db06      	blt.n	1d492 <stop+0x32>
	get_sub_config(dev, type)->stop();
   1d484:	4621      	mov	r1, r4
   1d486:	4638      	mov	r0, r7
   1d488:	f010 fb3a 	bl	2db00 <get_sub_config>
   1d48c:	6843      	ldr	r3, [r0, #4]
   1d48e:	4798      	blx	r3
	return 0;
   1d490:	2000      	movs	r0, #0
}
   1d492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d496:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1d4b8 <stop+0x58>
   1d49a:	f240 1253 	movw	r2, #339	; 0x153
   1d49e:	4641      	mov	r1, r8
   1d4a0:	4804      	ldr	r0, [pc, #16]	; (1d4b4 <stop+0x54>)
   1d4a2:	f00a ff4e 	bl	28342 <printk>
   1d4a6:	f240 1153 	movw	r1, #339	; 0x153
   1d4aa:	4640      	mov	r0, r8
   1d4ac:	f00b fae2 	bl	28a74 <assert_post_action>
   1d4b0:	e7e1      	b.n	1d476 <stop+0x16>
   1d4b2:	bf00      	nop
   1d4b4:	0002f968 	.word	0x0002f968
   1d4b8:	00032608 	.word	0x00032608

0001d4bc <onoff_stop>:
{
   1d4bc:	b538      	push	{r3, r4, r5, lr}
   1d4be:	4605      	mov	r5, r0
   1d4c0:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d4c2:	f7ff ff45 	bl	1d350 <get_subsys>
   1d4c6:	4601      	mov	r1, r0
   1d4c8:	2240      	movs	r2, #64	; 0x40
   1d4ca:	4803      	ldr	r0, [pc, #12]	; (1d4d8 <onoff_stop+0x1c>)
   1d4cc:	f7ff ffc8 	bl	1d460 <stop>
   1d4d0:	4601      	mov	r1, r0
	notify(mgr, res);
   1d4d2:	4628      	mov	r0, r5
   1d4d4:	47a0      	blx	r4
}
   1d4d6:	bd38      	pop	{r3, r4, r5, pc}
   1d4d8:	0002f018 	.word	0x0002f018

0001d4dc <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1d4dc:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1d4de:	2801      	cmp	r0, #1
   1d4e0:	d01c      	beq.n	1d51c <clock_event_handler+0x40>
   1d4e2:	2803      	cmp	r0, #3
   1d4e4:	d01f      	beq.n	1d526 <clock_event_handler+0x4a>
   1d4e6:	b160      	cbz	r0, 1d502 <clock_event_handler+0x26>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
   1d4e8:	4c15      	ldr	r4, [pc, #84]	; (1d540 <clock_event_handler+0x64>)
   1d4ea:	f240 226a 	movw	r2, #618	; 0x26a
   1d4ee:	4621      	mov	r1, r4
   1d4f0:	4814      	ldr	r0, [pc, #80]	; (1d544 <clock_event_handler+0x68>)
   1d4f2:	f00a ff26 	bl	28342 <printk>
   1d4f6:	f240 216a 	movw	r1, #618	; 0x26a
   1d4fa:	4620      	mov	r0, r4
   1d4fc:	f00b faba 	bl	28a74 <assert_post_action>
		break;
	}
}
   1d500:	e010      	b.n	1d524 <clock_event_handler+0x48>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1d502:	2100      	movs	r1, #0
   1d504:	4810      	ldr	r0, [pc, #64]	; (1d548 <clock_event_handler+0x6c>)
   1d506:	f010 faf4 	bl	2daf2 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d50a:	6883      	ldr	r3, [r0, #8]
   1d50c:	f013 0f07 	tst.w	r3, #7
   1d510:	d108      	bne.n	1d524 <clock_event_handler+0x48>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1d512:	2100      	movs	r1, #0
   1d514:	480c      	ldr	r0, [pc, #48]	; (1d548 <clock_event_handler+0x6c>)
   1d516:	f010 fb49 	bl	2dbac <clkstarted_handle>
   1d51a:	e003      	b.n	1d524 <clock_event_handler+0x48>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d51c:	2101      	movs	r1, #1
   1d51e:	480a      	ldr	r0, [pc, #40]	; (1d548 <clock_event_handler+0x6c>)
   1d520:	f010 fb44 	bl	2dbac <clkstarted_handle>
}
   1d524:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
   1d526:	4c06      	ldr	r4, [pc, #24]	; (1d540 <clock_event_handler+0x64>)
   1d528:	f240 2266 	movw	r2, #614	; 0x266
   1d52c:	4621      	mov	r1, r4
   1d52e:	4805      	ldr	r0, [pc, #20]	; (1d544 <clock_event_handler+0x68>)
   1d530:	f00a ff07 	bl	28342 <printk>
   1d534:	f240 2166 	movw	r1, #614	; 0x266
   1d538:	4620      	mov	r0, r4
   1d53a:	f00b fa9b 	bl	28a74 <assert_post_action>
		break;
   1d53e:	e7f1      	b.n	1d524 <clock_event_handler+0x48>
   1d540:	00032608 	.word	0x00032608
   1d544:	0002f968 	.word	0x0002f968
   1d548:	0002f018 	.word	0x0002f018

0001d54c <api_blocking_start>:
{
   1d54c:	b500      	push	{lr}
   1d54e:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d550:	f8cd d000 	str.w	sp, [sp]
   1d554:	f8cd d004 	str.w	sp, [sp, #4]
   1d558:	2300      	movs	r3, #0
   1d55a:	9302      	str	r3, [sp, #8]
   1d55c:	2301      	movs	r3, #1
   1d55e:	9303      	str	r3, [sp, #12]
   1d560:	ab04      	add	r3, sp, #16
   1d562:	9304      	str	r3, [sp, #16]
   1d564:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d566:	466b      	mov	r3, sp
   1d568:	4a06      	ldr	r2, [pc, #24]	; (1d584 <api_blocking_start+0x38>)
   1d56a:	f010 fb4d 	bl	2dc08 <api_start>
	if (err < 0) {
   1d56e:	2800      	cmp	r0, #0
   1d570:	db05      	blt.n	1d57e <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1d572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d576:	2300      	movs	r3, #0
   1d578:	4668      	mov	r0, sp
   1d57a:	f005 f9cd 	bl	22918 <z_impl_k_sem_take>
}
   1d57e:	b007      	add	sp, #28
   1d580:	f85d fb04 	ldr.w	pc, [sp], #4
   1d584:	0002dc5b 	.word	0x0002dc5b

0001d588 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1d588:	b570      	push	{r4, r5, r6, lr}
   1d58a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d58c:	2200      	movs	r2, #0
   1d58e:	2101      	movs	r1, #1
   1d590:	4610      	mov	r0, r2
   1d592:	f7f5 fe79 	bl	13288 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1d596:	2000      	movs	r0, #0
   1d598:	f7f5 fe44 	bl	13224 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d59c:	4811      	ldr	r0, [pc, #68]	; (1d5e4 <clk_init+0x5c>)
   1d59e:	f003 f8c9 	bl	20734 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d5a2:	4b11      	ldr	r3, [pc, #68]	; (1d5e8 <clk_init+0x60>)
   1d5a4:	4298      	cmp	r0, r3
   1d5a6:	d11a      	bne.n	1d5de <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d5a8:	f011 fa4d 	bl	2ea46 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1d5ac:	2400      	movs	r4, #0
   1d5ae:	e003      	b.n	1d5b8 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d5b0:	2301      	movs	r3, #1
   1d5b2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1d5b4:	441c      	add	r4, r3
   1d5b6:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   1d5b8:	2c01      	cmp	r4, #1
   1d5ba:	d80e      	bhi.n	1d5da <clk_init+0x52>
						get_sub_data(dev, i);
   1d5bc:	4621      	mov	r1, r4
   1d5be:	4630      	mov	r0, r6
   1d5c0:	f010 fa97 	bl	2daf2 <get_sub_data>
   1d5c4:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d5c6:	4621      	mov	r1, r4
   1d5c8:	4630      	mov	r0, r6
   1d5ca:	f010 fa9f 	bl	2db0c <get_onoff_manager>
   1d5ce:	4907      	ldr	r1, [pc, #28]	; (1d5ec <clk_init+0x64>)
   1d5d0:	f00a ff53 	bl	2847a <onoff_manager_init>
		if (err < 0) {
   1d5d4:	2800      	cmp	r0, #0
   1d5d6:	daeb      	bge.n	1d5b0 <clk_init+0x28>
   1d5d8:	e000      	b.n	1d5dc <clk_init+0x54>
	}

	return 0;
   1d5da:	2000      	movs	r0, #0
}
   1d5dc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d5de:	f06f 0004 	mvn.w	r0, #4
   1d5e2:	e7fb      	b.n	1d5dc <clk_init+0x54>
   1d5e4:	0001d4dd 	.word	0x0001d4dd
   1d5e8:	0bad0000 	.word	0x0bad0000
   1d5ec:	0003269c 	.word	0x0003269c

0001d5f0 <lfclk_spinwait>:
{
   1d5f0:	b570      	push	{r4, r5, r6, lr}
   1d5f2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d5f4:	2801      	cmp	r0, #1
   1d5f6:	d107      	bne.n	1d608 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d5f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d5fc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1d600:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d604:	2b01      	cmp	r3, #1
   1d606:	d058      	beq.n	1d6ba <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d608:	f011 faee 	bl	2ebe8 <k_is_in_isr>
   1d60c:	b928      	cbnz	r0, 1d61a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   1d60e:	4b2e      	ldr	r3, [pc, #184]	; (1d6c8 <lfclk_spinwait+0xd8>)
   1d610:	781b      	ldrb	r3, [r3, #0]
   1d612:	2b00      	cmp	r3, #0
   1d614:	d041      	beq.n	1d69a <lfclk_spinwait+0xaa>
   1d616:	2300      	movs	r3, #0
   1d618:	e000      	b.n	1d61c <lfclk_spinwait+0x2c>
   1d61a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   1d61c:	461c      	mov	r4, r3
   1d61e:	2b00      	cmp	r3, #0
   1d620:	d03d      	beq.n	1d69e <lfclk_spinwait+0xae>
	__asm__ volatile(
   1d622:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d626:	f3ef 8611 	mrs	r6, BASEPRI
   1d62a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d62e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1d632:	b924      	cbnz	r4, 1d63e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   1d634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d638:	2202      	movs	r2, #2
   1d63a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d63e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d642:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1d646:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d64a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1d64e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1d652:	d12b      	bne.n	1d6ac <lfclk_spinwait+0xbc>
    return false;
   1d654:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d656:	b11a      	cbz	r2, 1d660 <lfclk_spinwait+0x70>
   1d658:	2b01      	cmp	r3, #1
   1d65a:	d029      	beq.n	1d6b0 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d65c:	2d01      	cmp	r5, #1
   1d65e:	d027      	beq.n	1d6b0 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d660:	b1fc      	cbz	r4, 1d6a2 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d662:	4630      	mov	r0, r6
   1d664:	f7f5 fdac 	bl	131c0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d66c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d670:	2b00      	cmp	r3, #0
   1d672:	d1e4      	bne.n	1d63e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d674:	4b15      	ldr	r3, [pc, #84]	; (1d6cc <lfclk_spinwait+0xdc>)
   1d676:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1d678:	2b00      	cmp	r3, #0
   1d67a:	d0e0      	beq.n	1d63e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d67c:	4b13      	ldr	r3, [pc, #76]	; (1d6cc <lfclk_spinwait+0xdc>)
   1d67e:	2200      	movs	r2, #0
   1d680:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d682:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d684:	2301      	movs	r3, #1
   1d686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d68a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d68e:	4a10      	ldr	r2, [pc, #64]	; (1d6d0 <lfclk_spinwait+0xe0>)
   1d690:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d694:	4a0f      	ldr	r2, [pc, #60]	; (1d6d4 <lfclk_spinwait+0xe4>)
   1d696:	6013      	str	r3, [r2, #0]
}
   1d698:	e7d1      	b.n	1d63e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d69a:	2301      	movs	r3, #1
   1d69c:	e7be      	b.n	1d61c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   1d69e:	2600      	movs	r6, #0
   1d6a0:	e7c7      	b.n	1d632 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   1d6a2:	2021      	movs	r0, #33	; 0x21
   1d6a4:	2100      	movs	r1, #0
   1d6a6:	f006 ff19 	bl	244dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d6aa:	e7dd      	b.n	1d668 <lfclk_spinwait+0x78>
                return true;
   1d6ac:	2201      	movs	r2, #1
   1d6ae:	e7d2      	b.n	1d656 <lfclk_spinwait+0x66>
	if (isr_mode) {
   1d6b0:	b124      	cbz	r4, 1d6bc <lfclk_spinwait+0xcc>
	__asm__ volatile(
   1d6b2:	f386 8811 	msr	BASEPRI, r6
   1d6b6:	f3bf 8f6f 	isb	sy
}
   1d6ba:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1d6bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d6c0:	2202      	movs	r2, #2
   1d6c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d6c6:	e7f8      	b.n	1d6ba <lfclk_spinwait+0xca>
   1d6c8:	20003f79 	.word	0x20003f79
   1d6cc:	40000104 	.word	0x40000104
   1d6d0:	e000e100 	.word	0xe000e100
   1d6d4:	40000008 	.word	0x40000008

0001d6d8 <z_nrf_clock_control_lf_on>:
{
   1d6d8:	b538      	push	{r3, r4, r5, lr}
   1d6da:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d6dc:	4b1e      	ldr	r3, [pc, #120]	; (1d758 <z_nrf_clock_control_lf_on+0x80>)
   1d6de:	2101      	movs	r1, #1
   1d6e0:	f3bf 8f5b 	dmb	ish
   1d6e4:	e853 2f00 	ldrex	r2, [r3]
   1d6e8:	e843 1000 	strex	r0, r1, [r3]
   1d6ec:	2800      	cmp	r0, #0
   1d6ee:	d1f9      	bne.n	1d6e4 <z_nrf_clock_control_lf_on+0xc>
   1d6f0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1d6f4:	b142      	cbz	r2, 1d708 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
   1d6f6:	b134      	cbz	r4, 1d706 <z_nrf_clock_control_lf_on+0x2e>
   1d6f8:	1e63      	subs	r3, r4, #1
   1d6fa:	b2db      	uxtb	r3, r3
   1d6fc:	2b01      	cmp	r3, #1
   1d6fe:	d81d      	bhi.n	1d73c <z_nrf_clock_control_lf_on+0x64>
		lfclk_spinwait(start_mode);
   1d700:	4620      	mov	r0, r4
   1d702:	f7ff ff75 	bl	1d5f0 <lfclk_spinwait>
}
   1d706:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1d708:	4814      	ldr	r0, [pc, #80]	; (1d75c <z_nrf_clock_control_lf_on+0x84>)
   1d70a:	f010 f9ff 	bl	2db0c <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d70e:	4914      	ldr	r1, [pc, #80]	; (1d760 <z_nrf_clock_control_lf_on+0x88>)
   1d710:	2300      	movs	r3, #0
   1d712:	604b      	str	r3, [r1, #4]
   1d714:	60cb      	str	r3, [r1, #12]
   1d716:	2301      	movs	r3, #1
   1d718:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1d71a:	f7f3 f8ad 	bl	10878 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1d71e:	2800      	cmp	r0, #0
   1d720:	dae9      	bge.n	1d6f6 <z_nrf_clock_control_lf_on+0x1e>
   1d722:	4d10      	ldr	r5, [pc, #64]	; (1d764 <z_nrf_clock_control_lf_on+0x8c>)
   1d724:	f240 2226 	movw	r2, #550	; 0x226
   1d728:	4629      	mov	r1, r5
   1d72a:	480f      	ldr	r0, [pc, #60]	; (1d768 <z_nrf_clock_control_lf_on+0x90>)
   1d72c:	f00a fe09 	bl	28342 <printk>
   1d730:	f240 2126 	movw	r1, #550	; 0x226
   1d734:	4628      	mov	r0, r5
   1d736:	f00b f99d 	bl	28a74 <assert_post_action>
   1d73a:	e7dc      	b.n	1d6f6 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
   1d73c:	4c09      	ldr	r4, [pc, #36]	; (1d764 <z_nrf_clock_control_lf_on+0x8c>)
   1d73e:	f44f 720e 	mov.w	r2, #568	; 0x238
   1d742:	4621      	mov	r1, r4
   1d744:	4808      	ldr	r0, [pc, #32]	; (1d768 <z_nrf_clock_control_lf_on+0x90>)
   1d746:	f00a fdfc 	bl	28342 <printk>
   1d74a:	f44f 710e 	mov.w	r1, #568	; 0x238
   1d74e:	4620      	mov	r0, r4
   1d750:	f00b f990 	bl	28a74 <assert_post_action>
   1d754:	e7d7      	b.n	1d706 <z_nrf_clock_control_lf_on+0x2e>
   1d756:	bf00      	nop
   1d758:	20002938 	.word	0x20002938
   1d75c:	0002f018 	.word	0x0002f018
   1d760:	200028cc 	.word	0x200028cc
   1d764:	00032608 	.word	0x00032608
   1d768:	0002f968 	.word	0x0002f968

0001d76c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1d76c:	b510      	push	{r4, lr}
   1d76e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1d770:	280a      	cmp	r0, #10
   1d772:	d007      	beq.n	1d784 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1d774:	4b07      	ldr	r3, [pc, #28]	; (1d794 <console_out+0x28>)
   1d776:	6818      	ldr	r0, [r3, #0]
   1d778:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   1d77a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1d77c:	685b      	ldr	r3, [r3, #4]
   1d77e:	4798      	blx	r3

	return c;
}
   1d780:	4620      	mov	r0, r4
   1d782:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   1d784:	4b03      	ldr	r3, [pc, #12]	; (1d794 <console_out+0x28>)
   1d786:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   1d788:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1d78a:	685b      	ldr	r3, [r3, #4]
   1d78c:	210d      	movs	r1, #13
   1d78e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1d790:	e7f0      	b.n	1d774 <console_out+0x8>
   1d792:	bf00      	nop
   1d794:	2000293c 	.word	0x2000293c

0001d798 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   1d798:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   1d79a:	4c04      	ldr	r4, [pc, #16]	; (1d7ac <uart_console_hook_install+0x14>)
   1d79c:	4620      	mov	r0, r4
   1d79e:	f7f6 faf1 	bl	13d84 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1d7a2:	4620      	mov	r0, r4
   1d7a4:	f7f2 fdec 	bl	10380 <__printk_hook_install>
}
   1d7a8:	bd10      	pop	{r4, pc}
   1d7aa:	bf00      	nop
   1d7ac:	0001d76d 	.word	0x0001d76d

0001d7b0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1d7b0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1d7b2:	4806      	ldr	r0, [pc, #24]	; (1d7cc <uart_console_init+0x1c>)
   1d7b4:	4b06      	ldr	r3, [pc, #24]	; (1d7d0 <uart_console_init+0x20>)
   1d7b6:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1d7b8:	f011 f9c9 	bl	2eb4e <z_device_ready>
   1d7bc:	b118      	cbz	r0, 1d7c6 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   1d7be:	f7ff ffeb 	bl	1d798 <uart_console_hook_install>

	return 0;
   1d7c2:	2000      	movs	r0, #0
}
   1d7c4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d7c6:	f06f 0012 	mvn.w	r0, #18
   1d7ca:	e7fb      	b.n	1d7c4 <uart_console_init+0x14>
   1d7cc:	0002f048 	.word	0x0002f048
   1d7d0:	2000293c 	.word	0x2000293c

0001d7d4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1d7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7d8:	4615      	mov	r5, r2
	return port->data;
   1d7da:	6906      	ldr	r6, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d7dc:	1d37      	adds	r7, r6, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d7de:	460c      	mov	r4, r1
   1d7e0:	b139      	cbz	r1, 1d7f2 <gpio_nrfx_manage_callback+0x1e>
	__ASSERT(callback->handler, "No callback handler!");
   1d7e2:	6863      	ldr	r3, [r4, #4]
   1d7e4:	b18b      	cbz	r3, 1d80a <gpio_nrfx_manage_callback+0x36>
	return list->head;
   1d7e6:	6873      	ldr	r3, [r6, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d7e8:	2b00      	cmp	r3, #0
   1d7ea:	d033      	beq.n	1d854 <gpio_nrfx_manage_callback+0x80>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1d7ec:	4621      	mov	r1, r4
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d7ee:	2200      	movs	r2, #0
   1d7f0:	e022      	b.n	1d838 <gpio_nrfx_manage_callback+0x64>
	__ASSERT(callback, "No callback!");
   1d7f2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1d87c <gpio_nrfx_manage_callback+0xa8>
   1d7f6:	2224      	movs	r2, #36	; 0x24
   1d7f8:	4641      	mov	r1, r8
   1d7fa:	481f      	ldr	r0, [pc, #124]	; (1d878 <gpio_nrfx_manage_callback+0xa4>)
   1d7fc:	f00a fda1 	bl	28342 <printk>
   1d800:	2124      	movs	r1, #36	; 0x24
   1d802:	4640      	mov	r0, r8
   1d804:	f00b f936 	bl	28a74 <assert_post_action>
   1d808:	e7eb      	b.n	1d7e2 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
   1d80a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1d87c <gpio_nrfx_manage_callback+0xa8>
   1d80e:	2225      	movs	r2, #37	; 0x25
   1d810:	4641      	mov	r1, r8
   1d812:	4819      	ldr	r0, [pc, #100]	; (1d878 <gpio_nrfx_manage_callback+0xa4>)
   1d814:	f00a fd95 	bl	28342 <printk>
   1d818:	2125      	movs	r1, #37	; 0x25
   1d81a:	4640      	mov	r0, r8
   1d81c:	f00b f92a 	bl	28a74 <assert_post_action>
   1d820:	e7e1      	b.n	1d7e6 <gpio_nrfx_manage_callback+0x12>
	return node->next;
   1d822:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1d824:	6073      	str	r3, [r6, #4]
	return list->tail;
   1d826:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d828:	4294      	cmp	r4, r2
   1d82a:	d10f      	bne.n	1d84c <gpio_nrfx_manage_callback+0x78>
	list->tail = node;
   1d82c:	607b      	str	r3, [r7, #4]
}
   1d82e:	e00d      	b.n	1d84c <gpio_nrfx_manage_callback+0x78>
	list->tail = node;
   1d830:	607a      	str	r2, [r7, #4]
}
   1d832:	e00b      	b.n	1d84c <gpio_nrfx_manage_callback+0x78>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d834:	461a      	mov	r2, r3
   1d836:	681b      	ldr	r3, [r3, #0]
   1d838:	b15b      	cbz	r3, 1d852 <gpio_nrfx_manage_callback+0x7e>
   1d83a:	4299      	cmp	r1, r3
   1d83c:	d1fa      	bne.n	1d834 <gpio_nrfx_manage_callback+0x60>
Z_GENLIST_REMOVE(slist, snode)
   1d83e:	2a00      	cmp	r2, #0
   1d840:	d0ef      	beq.n	1d822 <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1d842:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1d844:	6013      	str	r3, [r2, #0]
	return list->tail;
   1d846:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d848:	429c      	cmp	r4, r3
   1d84a:	d0f1      	beq.n	1d830 <gpio_nrfx_manage_callback+0x5c>
	parent->next = child;
   1d84c:	2300      	movs	r3, #0
   1d84e:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d850:	e000      	b.n	1d854 <gpio_nrfx_manage_callback+0x80>
			if (!set) {
   1d852:	b155      	cbz	r5, 1d86a <gpio_nrfx_manage_callback+0x96>
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d854:	b165      	cbz	r5, 1d870 <gpio_nrfx_manage_callback+0x9c>
	return list->head;
   1d856:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
   1d858:	6023      	str	r3, [r4, #0]
	list->head = node;
   1d85a:	6074      	str	r4, [r6, #4]
	return list->tail;
   1d85c:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d85e:	b10b      	cbz	r3, 1d864 <gpio_nrfx_manage_callback+0x90>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d860:	2000      	movs	r0, #0
   1d862:	e006      	b.n	1d872 <gpio_nrfx_manage_callback+0x9e>
	list->tail = node;
   1d864:	607c      	str	r4, [r7, #4]
   1d866:	2000      	movs	r0, #0
}
   1d868:	e003      	b.n	1d872 <gpio_nrfx_manage_callback+0x9e>
				return -EINVAL;
   1d86a:	f06f 0015 	mvn.w	r0, #21
   1d86e:	e000      	b.n	1d872 <gpio_nrfx_manage_callback+0x9e>
	return 0;
   1d870:	2000      	movs	r0, #0
				     callback, set);
}
   1d872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d876:	bf00      	nop
   1d878:	0002f968 	.word	0x0002f968
   1d87c:	000326a8 	.word	0x000326a8

0001d880 <gpiote_pin_cleanup>:
{
   1d880:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1d882:	4b14      	ldr	r3, [pc, #80]	; (1d8d4 <gpiote_pin_cleanup+0x54>)
   1d884:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1d888:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d88a:	2300      	movs	r3, #0
   1d88c:	e000      	b.n	1d890 <gpiote_pin_cleanup+0x10>
   1d88e:	3301      	adds	r3, #1
   1d890:	2b07      	cmp	r3, #7
   1d892:	d81d      	bhi.n	1d8d0 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d894:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1d898:	490e      	ldr	r1, [pc, #56]	; (1d8d4 <gpiote_pin_cleanup+0x54>)
   1d89a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1d89e:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d8a2:	4290      	cmp	r0, r2
   1d8a4:	d1f3      	bne.n	1d88e <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
   1d8a6:	fa24 f203 	lsr.w	r2, r4, r3
   1d8aa:	f012 0f01 	tst.w	r2, #1
   1d8ae:	d0ee      	beq.n	1d88e <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d8b0:	460a      	mov	r2, r1
   1d8b2:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1d8b6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1d8ba:	f021 0101 	bic.w	r1, r1, #1
   1d8be:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1d8c2:	2101      	movs	r1, #1
   1d8c4:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
   1d8c6:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1d8ca:	b2d8      	uxtb	r0, r3
   1d8cc:	f003 fa3a 	bl	20d44 <nrfx_gpiote_channel_free>
}
   1d8d0:	bd10      	pop	{r4, pc}
   1d8d2:	bf00      	nop
   1d8d4:	40006000 	.word	0x40006000

0001d8d8 <gpiote_channel_alloc>:
{
   1d8d8:	b570      	push	{r4, r5, r6, lr}
   1d8da:	b082      	sub	sp, #8
   1d8dc:	4604      	mov	r4, r0
   1d8de:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d8e0:	f10d 0007 	add.w	r0, sp, #7
   1d8e4:	f003 fa4a 	bl	20d7c <nrfx_gpiote_channel_alloc>
   1d8e8:	4b1c      	ldr	r3, [pc, #112]	; (1d95c <gpiote_channel_alloc+0x84>)
   1d8ea:	4298      	cmp	r0, r3
   1d8ec:	d132      	bne.n	1d954 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1d8ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d8f2:	f103 0240 	add.w	r2, r3, #64	; 0x40
   1d8f6:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d8f8:	4e19      	ldr	r6, [pc, #100]	; (1d960 <gpiote_channel_alloc+0x88>)
   1d8fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1d8fe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1d902:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1d906:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1d90a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d90e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1d912:	0224      	lsls	r4, r4, #8
   1d914:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1d918:	042d      	lsls	r5, r5, #16
   1d91a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d91e:	432c      	orrs	r4, r5
   1d920:	430c      	orrs	r4, r1
   1d922:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
   1d926:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1d92a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d92e:	2000      	movs	r0, #0
   1d930:	6018      	str	r0, [r3, #0]
   1d932:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1d934:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d938:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   1d93c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   1d940:	f042 0201 	orr.w	r2, r2, #1
   1d944:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1d948:	2301      	movs	r3, #1
   1d94a:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   1d94c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
   1d950:	b002      	add	sp, #8
   1d952:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   1d954:	f06f 0012 	mvn.w	r0, #18
   1d958:	e7fa      	b.n	1d950 <gpiote_channel_alloc+0x78>
   1d95a:	bf00      	nop
   1d95c:	0bad0000 	.word	0x0bad0000
   1d960:	40006000 	.word	0x40006000

0001d964 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d964:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d966:	4b0b      	ldr	r3, [pc, #44]	; (1d994 <gpio_nrfx_init+0x30>)
   1d968:	781b      	ldrb	r3, [r3, #0]
   1d96a:	b10b      	cbz	r3, 1d970 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d96c:	2000      	movs	r0, #0
   1d96e:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
   1d970:	4b08      	ldr	r3, [pc, #32]	; (1d994 <gpio_nrfx_init+0x30>)
   1d972:	2201      	movs	r2, #1
   1d974:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d976:	2200      	movs	r2, #0
   1d978:	2105      	movs	r1, #5
   1d97a:	2006      	movs	r0, #6
   1d97c:	f7f5 fc84 	bl	13288 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d980:	2006      	movs	r0, #6
   1d982:	f7f5 fc4f 	bl	13224 <arch_irq_enable>
   1d986:	4b04      	ldr	r3, [pc, #16]	; (1d998 <gpio_nrfx_init+0x34>)
   1d988:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d98c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d990:	e7ec      	b.n	1d96c <gpio_nrfx_init+0x8>
   1d992:	bf00      	nop
   1d994:	20003f76 	.word	0x20003f76
   1d998:	40006000 	.word	0x40006000

0001d99c <cfg_level_pins>:
{
   1d99c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return port->data;
   1d9a0:	f8d0 a010 	ldr.w	sl, [r0, #16]
	return port->config;
   1d9a4:	f8d0 b004 	ldr.w	fp, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d9a8:	f8da 600c 	ldr.w	r6, [sl, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d9ac:	f8da 2014 	ldr.w	r2, [sl, #20]
   1d9b0:	f8da 3018 	ldr.w	r3, [sl, #24]
   1d9b4:	4313      	orrs	r3, r2
   1d9b6:	ea26 0603 	bic.w	r6, r6, r3
	uint32_t bit = 1U << pin;
   1d9ba:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   1d9bc:	2700      	movs	r7, #0
	while (level_pins) {
   1d9be:	e027      	b.n	1da10 <cfg_level_pins+0x74>
		return NRF_GPIO_PIN_SENSE_HIGH;
   1d9c0:	f04f 0902 	mov.w	r9, #2
   1d9c4:	e035      	b.n	1da32 <cfg_level_pins+0x96>

    switch (port)
    {
#ifdef P0_FEATURE_PINS_PRESENT
        case 0:
            mask = P0_FEATURE_PINS_PRESENT;
   1d9c6:	f04f 33ff 	mov.w	r3, #4294967295
   1d9ca:	e038      	b.n	1da3e <cfg_level_pins+0xa2>
    switch (port)
   1d9cc:	2300      	movs	r3, #0
   1d9ce:	e036      	b.n	1da3e <cfg_level_pins+0xa2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d9d0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 1da80 <cfg_level_pins+0xe4>
   1d9d4:	f44f 7205 	mov.w	r2, #532	; 0x214
   1d9d8:	4641      	mov	r1, r8
   1d9da:	4827      	ldr	r0, [pc, #156]	; (1da78 <cfg_level_pins+0xdc>)
   1d9dc:	f00a fcb1 	bl	28342 <printk>
   1d9e0:	f44f 7105 	mov.w	r1, #532	; 0x214
   1d9e4:	4640      	mov	r0, r8
   1d9e6:	f00b f845 	bl	28a74 <assert_post_action>
   1d9ea:	e02e      	b.n	1da4a <cfg_level_pins+0xae>
        case 0: return NRF_P0;
   1d9ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1d9f0:	e000      	b.n	1d9f4 <cfg_level_pins+0x58>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d9f2:	4a22      	ldr	r2, [pc, #136]	; (1da7c <cfg_level_pins+0xe0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d9f4:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
   1d9f8:	f852 3028 	ldr.w	r3, [r2, r8, lsl #2]
   1d9fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1da00:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1da04:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
			level_pins &= ~bit;
   1da08:	ea26 0605 	bic.w	r6, r6, r5
		++pin;
   1da0c:	3701      	adds	r7, #1
		bit <<= 1;
   1da0e:	006d      	lsls	r5, r5, #1
	while (level_pins) {
   1da10:	b386      	cbz	r6, 1da74 <cfg_level_pins+0xd8>
		if (level_pins & bit) {
   1da12:	4235      	tst	r5, r6
   1da14:	d0fa      	beq.n	1da0c <cfg_level_pins+0x70>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1da16:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1da1a:	f007 041f 	and.w	r4, r7, #31
   1da1e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1da22:	f8da 3010 	ldr.w	r3, [sl, #16]
   1da26:	40fb      	lsrs	r3, r7
   1da28:	f013 0f01 	tst.w	r3, #1
   1da2c:	d1c8      	bne.n	1d9c0 <cfg_level_pins+0x24>
	return NRF_GPIO_PIN_SENSE_LOW;
   1da2e:	f04f 0903 	mov.w	r9, #3
    switch (port)
   1da32:	0963      	lsrs	r3, r4, #5
   1da34:	d0c7      	beq.n	1d9c6 <cfg_level_pins+0x2a>
   1da36:	2b01      	cmp	r3, #1
   1da38:	d1c8      	bne.n	1d9cc <cfg_level_pins+0x30>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
   1da3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
            break;
#endif
    }

    pin_number &= 0x1F;
   1da3e:	f004 021f 	and.w	r2, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1da42:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1da44:	f013 0f01 	tst.w	r3, #1
   1da48:	d0c2      	beq.n	1d9d0 <cfg_level_pins+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1da4a:	f004 081f 	and.w	r8, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1da4e:	0964      	lsrs	r4, r4, #5
   1da50:	d0cc      	beq.n	1d9ec <cfg_level_pins+0x50>
   1da52:	2c01      	cmp	r4, #1
   1da54:	d0cd      	beq.n	1d9f2 <cfg_level_pins+0x56>
            NRFX_ASSERT(0);
   1da56:	4c0a      	ldr	r4, [pc, #40]	; (1da80 <cfg_level_pins+0xe4>)
   1da58:	f240 2219 	movw	r2, #537	; 0x219
   1da5c:	4621      	mov	r1, r4
   1da5e:	4806      	ldr	r0, [pc, #24]	; (1da78 <cfg_level_pins+0xdc>)
   1da60:	f00a fc6f 	bl	28342 <printk>
   1da64:	f240 2119 	movw	r1, #537	; 0x219
   1da68:	4620      	mov	r0, r4
   1da6a:	f00b f803 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1da6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1da72:	e7bf      	b.n	1d9f4 <cfg_level_pins+0x58>
}
   1da74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da78:	0002f968 	.word	0x0002f968
   1da7c:	50000300 	.word	0x50000300
   1da80:	000326d8 	.word	0x000326d8

0001da84 <check_level_trigger_pins>:
{
   1da84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da88:	b083      	sub	sp, #12
   1da8a:	9101      	str	r1, [sp, #4]
	return port->data;
   1da8c:	6903      	ldr	r3, [r0, #16]
	return port->config;
   1da8e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	uint32_t out = data->pin_int_en;
   1da92:	68d9      	ldr	r1, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1da94:	695a      	ldr	r2, [r3, #20]
   1da96:	6998      	ldr	r0, [r3, #24]
   1da98:	4302      	orrs	r2, r0
   1da9a:	ea21 0802 	bic.w	r8, r1, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1da9e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    return p_reg->IN;
   1daa2:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1daa6:	691b      	ldr	r3, [r3, #16]
   1daa8:	4053      	eors	r3, r2
	uint32_t out = pin_states & level_pins;
   1daaa:	ea28 0b03 	bic.w	fp, r8, r3
	uint32_t check_pins = level_pins;
   1daae:	4646      	mov	r6, r8
	uint32_t bit = 1U << pin;
   1dab0:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   1dab2:	2700      	movs	r7, #0
	while (check_pins) {
   1dab4:	e064      	b.n	1db80 <check_level_trigger_pins+0xfc>
    switch (port)
   1dab6:	0962      	lsrs	r2, r4, #5
   1dab8:	d01d      	beq.n	1daf6 <check_level_trigger_pins+0x72>
   1daba:	2a01      	cmp	r2, #1
   1dabc:	d101      	bne.n	1dac2 <check_level_trigger_pins+0x3e>
            mask = P1_FEATURE_PINS_PRESENT;
   1dabe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1dac2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1dac6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dac8:	f013 0f01 	tst.w	r3, #1
   1dacc:	d016      	beq.n	1dafc <check_level_trigger_pins+0x78>
    *p_pin = pin_number & 0x1F;
   1dace:	f004 0a1f 	and.w	sl, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dad2:	0963      	lsrs	r3, r4, #5
   1dad4:	d020      	beq.n	1db18 <check_level_trigger_pins+0x94>
   1dad6:	2b01      	cmp	r3, #1
   1dad8:	d021      	beq.n	1db1e <check_level_trigger_pins+0x9a>
            NRFX_ASSERT(0);
   1dada:	f240 2219 	movw	r2, #537	; 0x219
   1dade:	4941      	ldr	r1, [pc, #260]	; (1dbe4 <check_level_trigger_pins+0x160>)
   1dae0:	4841      	ldr	r0, [pc, #260]	; (1dbe8 <check_level_trigger_pins+0x164>)
   1dae2:	f00a fc2e 	bl	28342 <printk>
   1dae6:	f240 2119 	movw	r1, #537	; 0x219
   1daea:	483e      	ldr	r0, [pc, #248]	; (1dbe4 <check_level_trigger_pins+0x160>)
   1daec:	f00a ffc2 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1daf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1daf4:	e014      	b.n	1db20 <check_level_trigger_pins+0x9c>
            mask = P0_FEATURE_PINS_PRESENT;
   1daf6:	f04f 33ff 	mov.w	r3, #4294967295
   1dafa:	e7e2      	b.n	1dac2 <check_level_trigger_pins+0x3e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dafc:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1dbe4 <check_level_trigger_pins+0x160>
   1db00:	f44f 7205 	mov.w	r2, #532	; 0x214
   1db04:	4651      	mov	r1, sl
   1db06:	4838      	ldr	r0, [pc, #224]	; (1dbe8 <check_level_trigger_pins+0x164>)
   1db08:	f00a fc1b 	bl	28342 <printk>
   1db0c:	f44f 7105 	mov.w	r1, #532	; 0x214
   1db10:	4650      	mov	r0, sl
   1db12:	f00a ffaf 	bl	28a74 <assert_post_action>
   1db16:	e7da      	b.n	1dace <check_level_trigger_pins+0x4a>
        case 0: return NRF_P0;
   1db18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1db1c:	e000      	b.n	1db20 <check_level_trigger_pins+0x9c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1db1e:	4b33      	ldr	r3, [pc, #204]	; (1dbec <check_level_trigger_pins+0x168>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1db20:	f50a 7ae0 	add.w	sl, sl, #448	; 0x1c0
   1db24:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1db28:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   1db2c:	2b02      	cmp	r3, #2
   1db2e:	d133      	bne.n	1db98 <check_level_trigger_pins+0x114>
					*sense_levels |= bit;
   1db30:	9a01      	ldr	r2, [sp, #4]
   1db32:	6813      	ldr	r3, [r2, #0]
   1db34:	432b      	orrs	r3, r5
   1db36:	6013      	str	r3, [r2, #0]
   1db38:	e02e      	b.n	1db98 <check_level_trigger_pins+0x114>
            mask = P0_FEATURE_PINS_PRESENT;
   1db3a:	f04f 33ff 	mov.w	r3, #4294967295
   1db3e:	e031      	b.n	1dba4 <check_level_trigger_pins+0x120>
    switch (port)
   1db40:	2300      	movs	r3, #0
   1db42:	e02f      	b.n	1dba4 <check_level_trigger_pins+0x120>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1db44:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1dbe4 <check_level_trigger_pins+0x160>
   1db48:	f44f 7205 	mov.w	r2, #532	; 0x214
   1db4c:	4651      	mov	r1, sl
   1db4e:	4826      	ldr	r0, [pc, #152]	; (1dbe8 <check_level_trigger_pins+0x164>)
   1db50:	f00a fbf7 	bl	28342 <printk>
   1db54:	f44f 7105 	mov.w	r1, #532	; 0x214
   1db58:	4650      	mov	r0, sl
   1db5a:	f00a ff8b 	bl	28a74 <assert_post_action>
   1db5e:	e027      	b.n	1dbb0 <check_level_trigger_pins+0x12c>
        case 0: return NRF_P0;
   1db60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1db64:	e000      	b.n	1db68 <check_level_trigger_pins+0xe4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1db66:	4a21      	ldr	r2, [pc, #132]	; (1dbec <check_level_trigger_pins+0x168>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1db68:	f50a 7ae0 	add.w	sl, sl, #448	; 0x1c0
   1db6c:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
   1db70:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1db74:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
			check_pins &= ~bit;
   1db78:	ea26 0605 	bic.w	r6, r6, r5
		++pin;
   1db7c:	3701      	adds	r7, #1
		bit <<= 1;
   1db7e:	006d      	lsls	r5, r5, #1
	while (check_pins) {
   1db80:	b35e      	cbz	r6, 1dbda <check_level_trigger_pins+0x156>
		if (check_pins & bit) {
   1db82:	4235      	tst	r5, r6
   1db84:	d0fa      	beq.n	1db7c <check_level_trigger_pins+0xf8>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1db86:	f899 3008 	ldrb.w	r3, [r9, #8]
   1db8a:	f007 041f 	and.w	r4, r7, #31
   1db8e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
			if (!(level_pins & bit)) {
   1db92:	ea15 0308 	ands.w	r3, r5, r8
   1db96:	d08e      	beq.n	1dab6 <check_level_trigger_pins+0x32>
    switch (port)
   1db98:	0963      	lsrs	r3, r4, #5
   1db9a:	d0ce      	beq.n	1db3a <check_level_trigger_pins+0xb6>
   1db9c:	2b01      	cmp	r3, #1
   1db9e:	d1cf      	bne.n	1db40 <check_level_trigger_pins+0xbc>
            mask = P1_FEATURE_PINS_PRESENT;
   1dba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1dba4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1dba8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dbaa:	f013 0f01 	tst.w	r3, #1
   1dbae:	d0c9      	beq.n	1db44 <check_level_trigger_pins+0xc0>
    *p_pin = pin_number & 0x1F;
   1dbb0:	f004 0a1f 	and.w	sl, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dbb4:	0964      	lsrs	r4, r4, #5
   1dbb6:	d0d3      	beq.n	1db60 <check_level_trigger_pins+0xdc>
   1dbb8:	2c01      	cmp	r4, #1
   1dbba:	d0d4      	beq.n	1db66 <check_level_trigger_pins+0xe2>
            NRFX_ASSERT(0);
   1dbbc:	4c09      	ldr	r4, [pc, #36]	; (1dbe4 <check_level_trigger_pins+0x160>)
   1dbbe:	f240 2219 	movw	r2, #537	; 0x219
   1dbc2:	4621      	mov	r1, r4
   1dbc4:	4808      	ldr	r0, [pc, #32]	; (1dbe8 <check_level_trigger_pins+0x164>)
   1dbc6:	f00a fbbc 	bl	28342 <printk>
   1dbca:	f240 2119 	movw	r1, #537	; 0x219
   1dbce:	4620      	mov	r0, r4
   1dbd0:	f00a ff50 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1dbd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1dbd8:	e7c6      	b.n	1db68 <check_level_trigger_pins+0xe4>
}
   1dbda:	4658      	mov	r0, fp
   1dbdc:	b003      	add	sp, #12
   1dbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbe2:	bf00      	nop
   1dbe4:	000326d8 	.word	0x000326d8
   1dbe8:	0002f968 	.word	0x0002f968
   1dbec:	50000300 	.word	0x50000300

0001dbf0 <gpiote_event_handler>:
{
   1dbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dbf4:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1dbf6:	2300      	movs	r3, #0
   1dbf8:	9302      	str	r3, [sp, #8]
   1dbfa:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   1dbfc:	9300      	str	r3, [sp, #0]
   1dbfe:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc00:	4b57      	ldr	r3, [pc, #348]	; (1dd60 <gpiote_event_handler+0x170>)
   1dc02:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
   1dc04:	b90c      	cbnz	r4, 1dc0a <gpiote_event_handler+0x1a>
{
   1dc06:	2100      	movs	r1, #0
   1dc08:	e011      	b.n	1dc2e <gpiote_event_handler+0x3e>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   1dc0a:	4d56      	ldr	r5, [pc, #344]	; (1dd64 <gpiote_event_handler+0x174>)
   1dc0c:	4669      	mov	r1, sp
   1dc0e:	4628      	mov	r0, r5
   1dc10:	f7ff ff38 	bl	1da84 <check_level_trigger_pins>
		fired_triggers[0] =
   1dc14:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1dc16:	a901      	add	r1, sp, #4
   1dc18:	f105 0018 	add.w	r0, r5, #24
   1dc1c:	f7ff ff32 	bl	1da84 <check_level_trigger_pins>
		fired_triggers[1] =
   1dc20:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dc22:	4b4f      	ldr	r3, [pc, #316]	; (1dd60 <gpiote_event_handler+0x170>)
   1dc24:	2200      	movs	r2, #0
   1dc26:	601a      	str	r2, [r3, #0]
   1dc28:	681b      	ldr	r3, [r3, #0]
}
   1dc2a:	e7ec      	b.n	1dc06 <gpiote_event_handler+0x16>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1dc2c:	3101      	adds	r1, #1
   1dc2e:	2907      	cmp	r1, #7
   1dc30:	d82d      	bhi.n	1dc8e <gpiote_event_handler+0x9e>
		nrf_gpiote_event_t evt =
   1dc32:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1dc36:	009b      	lsls	r3, r3, #2
   1dc38:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1dc3a:	2301      	movs	r3, #1
   1dc3c:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
   1dc3e:	484a      	ldr	r0, [pc, #296]	; (1dd68 <gpiote_event_handler+0x178>)
   1dc40:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
   1dc44:	4203      	tst	r3, r0
   1dc46:	d0f1      	beq.n	1dc2c <gpiote_event_handler+0x3c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc48:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1dc4c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1dc50:	681b      	ldr	r3, [r3, #0]
   1dc52:	2b00      	cmp	r3, #0
   1dc54:	d0ea      	beq.n	1dc2c <gpiote_event_handler+0x3c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1dc56:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   1dc5a:	4843      	ldr	r0, [pc, #268]	; (1dd68 <gpiote_event_handler+0x178>)
   1dc5c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1dc60:	f3c0 3340 	ubfx	r3, r0, #13, #1
   1dc64:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1dc68:	2501      	movs	r5, #1
   1dc6a:	fa05 f000 	lsl.w	r0, r5, r0
   1dc6e:	ad04      	add	r5, sp, #16
   1dc70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1dc74:	f853 5c08 	ldr.w	r5, [r3, #-8]
   1dc78:	4305      	orrs	r5, r0
   1dc7a:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
   1dc7e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1dc82:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dc86:	2200      	movs	r2, #0
   1dc88:	601a      	str	r2, [r3, #0]
   1dc8a:	681b      	ldr	r3, [r3, #0]
}
   1dc8c:	e7ce      	b.n	1dc2c <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
   1dc8e:	9f02      	ldr	r7, [sp, #8]
   1dc90:	b93f      	cbnz	r7, 1dca2 <gpiote_event_handler+0xb2>
	if (fired_triggers[1]) {
   1dc92:	9f03      	ldr	r7, [sp, #12]
   1dc94:	2f00      	cmp	r7, #0
   1dc96:	d12f      	bne.n	1dcf8 <gpiote_event_handler+0x108>
	if (port_event) {
   1dc98:	2c00      	cmp	r4, #0
   1dc9a:	d158      	bne.n	1dd4e <gpiote_event_handler+0x15e>
}
   1dc9c:	b004      	add	sp, #16
   1dc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return list->head;
   1dca2:	4b32      	ldr	r3, [pc, #200]	; (1dd6c <gpiote_event_handler+0x17c>)
   1dca4:	685d      	ldr	r5, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dca6:	b11d      	cbz	r5, 1dcb0 <gpiote_event_handler+0xc0>
   1dca8:	462e      	mov	r6, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dcaa:	b17d      	cbz	r5, 1dccc <gpiote_event_handler+0xdc>
	return node->next;
   1dcac:	682e      	ldr	r6, [r5, #0]
   1dcae:	e00d      	b.n	1dccc <gpiote_event_handler+0xdc>
   1dcb0:	462e      	mov	r6, r5
   1dcb2:	e00b      	b.n	1dccc <gpiote_event_handler+0xdc>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1dcb4:	686b      	ldr	r3, [r5, #4]
   1dcb6:	68aa      	ldr	r2, [r5, #8]
   1dcb8:	403a      	ands	r2, r7
   1dcba:	4629      	mov	r1, r5
   1dcbc:	4829      	ldr	r0, [pc, #164]	; (1dd64 <gpiote_event_handler+0x174>)
   1dcbe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dcc0:	b1c6      	cbz	r6, 1dcf4 <gpiote_event_handler+0x104>
   1dcc2:	4633      	mov	r3, r6
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dcc4:	b106      	cbz	r6, 1dcc8 <gpiote_event_handler+0xd8>
	return node->next;
   1dcc6:	6833      	ldr	r3, [r6, #0]
   1dcc8:	4635      	mov	r5, r6
   1dcca:	461e      	mov	r6, r3
   1dccc:	2d00      	cmp	r5, #0
   1dcce:	d0e0      	beq.n	1dc92 <gpiote_event_handler+0xa2>
		if (cb->pin_mask & pins) {
   1dcd0:	68ab      	ldr	r3, [r5, #8]
   1dcd2:	421f      	tst	r7, r3
   1dcd4:	d0f4      	beq.n	1dcc0 <gpiote_event_handler+0xd0>
			__ASSERT(cb->handler, "No callback handler!");
   1dcd6:	686b      	ldr	r3, [r5, #4]
   1dcd8:	2b00      	cmp	r3, #0
   1dcda:	d1eb      	bne.n	1dcb4 <gpiote_event_handler+0xc4>
   1dcdc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1dd7c <gpiote_event_handler+0x18c>
   1dce0:	2245      	movs	r2, #69	; 0x45
   1dce2:	4641      	mov	r1, r8
   1dce4:	4822      	ldr	r0, [pc, #136]	; (1dd70 <gpiote_event_handler+0x180>)
   1dce6:	f00a fb2c 	bl	28342 <printk>
   1dcea:	2145      	movs	r1, #69	; 0x45
   1dcec:	4640      	mov	r0, r8
   1dcee:	f00a fec1 	bl	28a74 <assert_post_action>
   1dcf2:	e7df      	b.n	1dcb4 <gpiote_event_handler+0xc4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dcf4:	4633      	mov	r3, r6
   1dcf6:	e7e7      	b.n	1dcc8 <gpiote_event_handler+0xd8>
	return list->head;
   1dcf8:	4b1e      	ldr	r3, [pc, #120]	; (1dd74 <gpiote_event_handler+0x184>)
   1dcfa:	685d      	ldr	r5, [r3, #4]
   1dcfc:	b11d      	cbz	r5, 1dd06 <gpiote_event_handler+0x116>
   1dcfe:	462e      	mov	r6, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dd00:	b17d      	cbz	r5, 1dd22 <gpiote_event_handler+0x132>
	return node->next;
   1dd02:	682e      	ldr	r6, [r5, #0]
   1dd04:	e00d      	b.n	1dd22 <gpiote_event_handler+0x132>
   1dd06:	462e      	mov	r6, r5
   1dd08:	e00b      	b.n	1dd22 <gpiote_event_handler+0x132>
			cb->handler(port, cb, cb->pin_mask & pins);
   1dd0a:	686b      	ldr	r3, [r5, #4]
   1dd0c:	68aa      	ldr	r2, [r5, #8]
   1dd0e:	403a      	ands	r2, r7
   1dd10:	4629      	mov	r1, r5
   1dd12:	4819      	ldr	r0, [pc, #100]	; (1dd78 <gpiote_event_handler+0x188>)
   1dd14:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dd16:	b1c6      	cbz	r6, 1dd4a <gpiote_event_handler+0x15a>
   1dd18:	4633      	mov	r3, r6
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dd1a:	b106      	cbz	r6, 1dd1e <gpiote_event_handler+0x12e>
	return node->next;
   1dd1c:	6833      	ldr	r3, [r6, #0]
   1dd1e:	4635      	mov	r5, r6
   1dd20:	461e      	mov	r6, r3
   1dd22:	2d00      	cmp	r5, #0
   1dd24:	d0b8      	beq.n	1dc98 <gpiote_event_handler+0xa8>
		if (cb->pin_mask & pins) {
   1dd26:	68ab      	ldr	r3, [r5, #8]
   1dd28:	421f      	tst	r7, r3
   1dd2a:	d0f4      	beq.n	1dd16 <gpiote_event_handler+0x126>
			__ASSERT(cb->handler, "No callback handler!");
   1dd2c:	686b      	ldr	r3, [r5, #4]
   1dd2e:	2b00      	cmp	r3, #0
   1dd30:	d1eb      	bne.n	1dd0a <gpiote_event_handler+0x11a>
   1dd32:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1dd7c <gpiote_event_handler+0x18c>
   1dd36:	2245      	movs	r2, #69	; 0x45
   1dd38:	4641      	mov	r1, r8
   1dd3a:	480d      	ldr	r0, [pc, #52]	; (1dd70 <gpiote_event_handler+0x180>)
   1dd3c:	f00a fb01 	bl	28342 <printk>
   1dd40:	2145      	movs	r1, #69	; 0x45
   1dd42:	4640      	mov	r0, r8
   1dd44:	f00a fe96 	bl	28a74 <assert_post_action>
   1dd48:	e7df      	b.n	1dd0a <gpiote_event_handler+0x11a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dd4a:	4633      	mov	r3, r6
   1dd4c:	e7e7      	b.n	1dd1e <gpiote_event_handler+0x12e>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1dd4e:	4c05      	ldr	r4, [pc, #20]	; (1dd64 <gpiote_event_handler+0x174>)
   1dd50:	4620      	mov	r0, r4
   1dd52:	f7ff fe23 	bl	1d99c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1dd56:	f104 0018 	add.w	r0, r4, #24
   1dd5a:	f7ff fe1f 	bl	1d99c <cfg_level_pins>
}
   1dd5e:	e79d      	b.n	1dc9c <gpiote_event_handler+0xac>
   1dd60:	4000617c 	.word	0x4000617c
   1dd64:	0002f0a8 	.word	0x0002f0a8
   1dd68:	40006000 	.word	0x40006000
   1dd6c:	20002940 	.word	0x20002940
   1dd70:	0002f968 	.word	0x0002f968
   1dd74:	2000295c 	.word	0x2000295c
   1dd78:	0002f0c0 	.word	0x0002f0c0
   1dd7c:	000326a8 	.word	0x000326a8

0001dd80 <gpio_nrfx_config>:
{
   1dd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1dd84:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dd86:	685f      	ldr	r7, [r3, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dd88:	4b51      	ldr	r3, [pc, #324]	; (1ded0 <gpio_nrfx_config+0x150>)
   1dd8a:	4013      	ands	r3, r2
   1dd8c:	4c51      	ldr	r4, [pc, #324]	; (1ded4 <gpio_nrfx_config+0x154>)
   1dd8e:	42a3      	cmp	r3, r4
   1dd90:	d028      	beq.n	1dde4 <gpio_nrfx_config+0x64>
   1dd92:	d812      	bhi.n	1ddba <gpio_nrfx_config+0x3a>
   1dd94:	2b06      	cmp	r3, #6
   1dd96:	d027      	beq.n	1dde8 <gpio_nrfx_config+0x68>
   1dd98:	d904      	bls.n	1dda4 <gpio_nrfx_config+0x24>
   1dd9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1dd9e:	d109      	bne.n	1ddb4 <gpio_nrfx_config+0x34>
		drive = NRF_GPIO_PIN_H0S1;
   1dda0:	2601      	movs	r6, #1
   1dda2:	e016      	b.n	1ddd2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dda4:	b313      	cbz	r3, 1ddec <gpio_nrfx_config+0x6c>
   1dda6:	2b02      	cmp	r3, #2
   1dda8:	d101      	bne.n	1ddae <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_D0S1;
   1ddaa:	2604      	movs	r6, #4
   1ddac:	e011      	b.n	1ddd2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ddae:	f06f 0015 	mvn.w	r0, #21
   1ddb2:	e087      	b.n	1dec4 <gpio_nrfx_config+0x144>
   1ddb4:	f06f 0015 	mvn.w	r0, #21
   1ddb8:	e084      	b.n	1dec4 <gpio_nrfx_config+0x144>
   1ddba:	4c47      	ldr	r4, [pc, #284]	; (1ded8 <gpio_nrfx_config+0x158>)
   1ddbc:	42a3      	cmp	r3, r4
   1ddbe:	d017      	beq.n	1ddf0 <gpio_nrfx_config+0x70>
   1ddc0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1ddc4:	d101      	bne.n	1ddca <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0H1;
   1ddc6:	2603      	movs	r6, #3
   1ddc8:	e003      	b.n	1ddd2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ddca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1ddce:	d17b      	bne.n	1dec8 <gpio_nrfx_config+0x148>
		drive = NRF_GPIO_PIN_S0H1;
   1ddd0:	2602      	movs	r6, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1ddd2:	f012 0f10 	tst.w	r2, #16
   1ddd6:	d10d      	bne.n	1ddf4 <gpio_nrfx_config+0x74>
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
   1ddd8:	f012 0f20 	tst.w	r2, #32
   1dddc:	d046      	beq.n	1de6c <gpio_nrfx_config+0xec>
		pull = NRF_GPIO_PIN_PULLDOWN;
   1ddde:	f04f 0801 	mov.w	r8, #1
   1dde2:	e009      	b.n	1ddf8 <gpio_nrfx_config+0x78>
		drive = NRF_GPIO_PIN_H0D1;
   1dde4:	2607      	movs	r6, #7
   1dde6:	e7f4      	b.n	1ddd2 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0D1;
   1dde8:	2606      	movs	r6, #6
   1ddea:	e7f2      	b.n	1ddd2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ddec:	2600      	movs	r6, #0
   1ddee:	e7f0      	b.n	1ddd2 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0H1;
   1ddf0:	2605      	movs	r6, #5
   1ddf2:	e7ee      	b.n	1ddd2 <gpio_nrfx_config+0x52>
		pull = NRF_GPIO_PIN_PULLUP;
   1ddf4:	f04f 0803 	mov.w	r8, #3
	dir = ((flags & GPIO_OUTPUT) != 0)
   1ddf8:	f3c2 2540 	ubfx	r5, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ddfc:	f412 7f80 	tst.w	r2, #256	; 0x100
   1de00:	bf0c      	ite	eq
   1de02:	f04f 0901 	moveq.w	r9, #1
   1de06:	f04f 0900 	movne.w	r9, #0
	if ((flags & GPIO_OUTPUT) != 0) {
   1de0a:	f412 7f00 	tst.w	r2, #512	; 0x200
   1de0e:	d006      	beq.n	1de1e <gpio_nrfx_config+0x9e>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1de10:	f412 6f00 	tst.w	r2, #2048	; 0x800
   1de14:	d02d      	beq.n	1de72 <gpio_nrfx_config+0xf2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1de16:	2301      	movs	r3, #1
   1de18:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1de1a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
	return port->config;
   1de1e:	6843      	ldr	r3, [r0, #4]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1de20:	7a1c      	ldrb	r4, [r3, #8]
   1de22:	f001 011f 	and.w	r1, r1, #31
   1de26:	ea41 1444 	orr.w	r4, r1, r4, lsl #5
    switch (port)
   1de2a:	0963      	lsrs	r3, r4, #5
   1de2c:	d029      	beq.n	1de82 <gpio_nrfx_config+0x102>
   1de2e:	2b01      	cmp	r3, #1
   1de30:	d12a      	bne.n	1de88 <gpio_nrfx_config+0x108>
            mask = P1_FEATURE_PINS_PRESENT;
   1de32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1de36:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1de3a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1de3c:	f013 0f01 	tst.w	r3, #1
   1de40:	d024      	beq.n	1de8c <gpio_nrfx_config+0x10c>
    *p_pin = pin_number & 0x1F;
   1de42:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1de46:	0964      	lsrs	r4, r4, #5
   1de48:	d02d      	beq.n	1dea6 <gpio_nrfx_config+0x126>
   1de4a:	2c01      	cmp	r4, #1
   1de4c:	d02e      	beq.n	1deac <gpio_nrfx_config+0x12c>
            NRFX_ASSERT(0);
   1de4e:	4c23      	ldr	r4, [pc, #140]	; (1dedc <gpio_nrfx_config+0x15c>)
   1de50:	f240 2219 	movw	r2, #537	; 0x219
   1de54:	4621      	mov	r1, r4
   1de56:	4822      	ldr	r0, [pc, #136]	; (1dee0 <gpio_nrfx_config+0x160>)
   1de58:	f00a fa73 	bl	28342 <printk>
   1de5c:	f240 2119 	movw	r1, #537	; 0x219
   1de60:	4620      	mov	r0, r4
   1de62:	f00a fe07 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1de66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1de6a:	e020      	b.n	1deae <gpio_nrfx_config+0x12e>
		pull = NRF_GPIO_PIN_NOPULL;
   1de6c:	f04f 0800 	mov.w	r8, #0
   1de70:	e7c2      	b.n	1ddf8 <gpio_nrfx_config+0x78>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1de72:	f412 6f80 	tst.w	r2, #1024	; 0x400
   1de76:	d0d2      	beq.n	1de1e <gpio_nrfx_config+0x9e>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1de78:	2301      	movs	r3, #1
   1de7a:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   1de7c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
}
   1de80:	e7cd      	b.n	1de1e <gpio_nrfx_config+0x9e>
            mask = P0_FEATURE_PINS_PRESENT;
   1de82:	f04f 33ff 	mov.w	r3, #4294967295
   1de86:	e7d6      	b.n	1de36 <gpio_nrfx_config+0xb6>
    switch (port)
   1de88:	2300      	movs	r3, #0
   1de8a:	e7d4      	b.n	1de36 <gpio_nrfx_config+0xb6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1de8c:	4f13      	ldr	r7, [pc, #76]	; (1dedc <gpio_nrfx_config+0x15c>)
   1de8e:	f44f 7205 	mov.w	r2, #532	; 0x214
   1de92:	4639      	mov	r1, r7
   1de94:	4812      	ldr	r0, [pc, #72]	; (1dee0 <gpio_nrfx_config+0x160>)
   1de96:	f00a fa54 	bl	28342 <printk>
   1de9a:	f44f 7105 	mov.w	r1, #532	; 0x214
   1de9e:	4638      	mov	r0, r7
   1dea0:	f00a fde8 	bl	28a74 <assert_post_action>
   1dea4:	e7cd      	b.n	1de42 <gpio_nrfx_config+0xc2>
        case 0: return NRF_P0;
   1dea6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1deaa:	e000      	b.n	1deae <gpio_nrfx_config+0x12e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1deac:	4b0d      	ldr	r3, [pc, #52]	; (1dee4 <gpio_nrfx_config+0x164>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1deae:	ea45 0549 	orr.w	r5, r5, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1deb2:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1deb6:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1deba:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1debe:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
	return 0;
   1dec2:	2000      	movs	r0, #0
}
   1dec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dec8:	f06f 0015 	mvn.w	r0, #21
   1decc:	e7fa      	b.n	1dec4 <gpio_nrfx_config+0x144>
   1dece:	bf00      	nop
   1ded0:	00f00006 	.word	0x00f00006
   1ded4:	00100006 	.word	0x00100006
   1ded8:	00400002 	.word	0x00400002
   1dedc:	000326d8 	.word	0x000326d8
   1dee0:	0002f968 	.word	0x0002f968
   1dee4:	50000300 	.word	0x50000300

0001dee8 <gpiote_pin_int_cfg>:
{
   1dee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1deec:	460d      	mov	r5, r1
	return port->data;
   1deee:	6907      	ldr	r7, [r0, #16]
	return port->config;
   1def0:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1def2:	7a1b      	ldrb	r3, [r3, #8]
   1def4:	f001 041f 	and.w	r4, r1, #31
   1def8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
   1defc:	4620      	mov	r0, r4
   1defe:	f7ff fcbf 	bl	1d880 <gpiote_pin_cleanup>
    switch (port)
   1df02:	0963      	lsrs	r3, r4, #5
   1df04:	d01f      	beq.n	1df46 <gpiote_pin_int_cfg+0x5e>
   1df06:	2b01      	cmp	r3, #1
   1df08:	d120      	bne.n	1df4c <gpiote_pin_int_cfg+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
   1df0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1df0e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1df12:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1df14:	f013 0f01 	tst.w	r3, #1
   1df18:	d01a      	beq.n	1df50 <gpiote_pin_int_cfg+0x68>
    *p_pin = pin_number & 0x1F;
   1df1a:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1df1e:	0963      	lsrs	r3, r4, #5
   1df20:	d023      	beq.n	1df6a <gpiote_pin_int_cfg+0x82>
   1df22:	2b01      	cmp	r3, #1
   1df24:	d024      	beq.n	1df70 <gpiote_pin_int_cfg+0x88>
            NRFX_ASSERT(0);
   1df26:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1e05c <gpiote_pin_int_cfg+0x174>
   1df2a:	f240 2219 	movw	r2, #537	; 0x219
   1df2e:	4641      	mov	r1, r8
   1df30:	4849      	ldr	r0, [pc, #292]	; (1e058 <gpiote_pin_int_cfg+0x170>)
   1df32:	f00a fa06 	bl	28342 <printk>
   1df36:	f240 2119 	movw	r1, #537	; 0x219
   1df3a:	4640      	mov	r0, r8
   1df3c:	f00a fd9a 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1df40:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1df44:	e015      	b.n	1df72 <gpiote_pin_int_cfg+0x8a>
            mask = P0_FEATURE_PINS_PRESENT;
   1df46:	f04f 33ff 	mov.w	r3, #4294967295
   1df4a:	e7e0      	b.n	1df0e <gpiote_pin_int_cfg+0x26>
    switch (port)
   1df4c:	2300      	movs	r3, #0
   1df4e:	e7de      	b.n	1df0e <gpiote_pin_int_cfg+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1df50:	4e42      	ldr	r6, [pc, #264]	; (1e05c <gpiote_pin_int_cfg+0x174>)
   1df52:	f44f 7205 	mov.w	r2, #532	; 0x214
   1df56:	4631      	mov	r1, r6
   1df58:	483f      	ldr	r0, [pc, #252]	; (1e058 <gpiote_pin_int_cfg+0x170>)
   1df5a:	f00a f9f2 	bl	28342 <printk>
   1df5e:	f44f 7105 	mov.w	r1, #532	; 0x214
   1df62:	4630      	mov	r0, r6
   1df64:	f00a fd86 	bl	28a74 <assert_post_action>
   1df68:	e7d7      	b.n	1df1a <gpiote_pin_int_cfg+0x32>
        case 0: return NRF_P0;
   1df6a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1df6e:	e000      	b.n	1df72 <gpiote_pin_int_cfg+0x8a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1df70:	493b      	ldr	r1, [pc, #236]	; (1e060 <gpiote_pin_int_cfg+0x178>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1df72:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
   1df76:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   1df7a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1df7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
   1df82:	68fb      	ldr	r3, [r7, #12]
   1df84:	40eb      	lsrs	r3, r5
   1df86:	f013 0f01 	tst.w	r3, #1
   1df8a:	d062      	beq.n	1e052 <gpiote_pin_int_cfg+0x16a>
		if (data->trig_edge & BIT(pin)) {
   1df8c:	697b      	ldr	r3, [r7, #20]
   1df8e:	40eb      	lsrs	r3, r5
   1df90:	f013 0301 	ands.w	r3, r3, #1
   1df94:	d013      	beq.n	1dfbe <gpiote_pin_int_cfg+0xd6>
				if (data->double_edge & BIT(pin)) {
   1df96:	69bb      	ldr	r3, [r7, #24]
   1df98:	40eb      	lsrs	r3, r5
   1df9a:	f013 0f01 	tst.w	r3, #1
   1df9e:	d107      	bne.n	1dfb0 <gpiote_pin_int_cfg+0xc8>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1dfa0:	6939      	ldr	r1, [r7, #16]
   1dfa2:	fa21 f505 	lsr.w	r5, r1, r5
   1dfa6:	f015 0f01 	tst.w	r5, #1
   1dfaa:	d006      	beq.n	1dfba <gpiote_pin_int_cfg+0xd2>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
   1dfac:	2101      	movs	r1, #1
   1dfae:	e000      	b.n	1dfb2 <gpiote_pin_int_cfg+0xca>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1dfb0:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
   1dfb2:	4620      	mov	r0, r4
   1dfb4:	f7ff fc90 	bl	1d8d8 <gpiote_channel_alloc>
   1dfb8:	e04c      	b.n	1e054 <gpiote_pin_int_cfg+0x16c>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
   1dfba:	2102      	movs	r1, #2
   1dfbc:	e7f9      	b.n	1dfb2 <gpiote_pin_int_cfg+0xca>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1dfbe:	6939      	ldr	r1, [r7, #16]
   1dfc0:	fa21 f505 	lsr.w	r5, r1, r5
   1dfc4:	f015 0f01 	tst.w	r5, #1
   1dfc8:	d121      	bne.n	1e00e <gpiote_pin_int_cfg+0x126>
	return NRF_GPIO_PIN_SENSE_LOW;
   1dfca:	2503      	movs	r5, #3
    switch (port)
   1dfcc:	0962      	lsrs	r2, r4, #5
   1dfce:	d020      	beq.n	1e012 <gpiote_pin_int_cfg+0x12a>
   1dfd0:	2a01      	cmp	r2, #1
   1dfd2:	d101      	bne.n	1dfd8 <gpiote_pin_int_cfg+0xf0>
            mask = P1_FEATURE_PINS_PRESENT;
   1dfd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1dfd8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1dfdc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dfde:	f013 0f01 	tst.w	r3, #1
   1dfe2:	d019      	beq.n	1e018 <gpiote_pin_int_cfg+0x130>
    *p_pin = pin_number & 0x1F;
   1dfe4:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dfe8:	0964      	lsrs	r4, r4, #5
   1dfea:	d022      	beq.n	1e032 <gpiote_pin_int_cfg+0x14a>
   1dfec:	2c01      	cmp	r4, #1
   1dfee:	d023      	beq.n	1e038 <gpiote_pin_int_cfg+0x150>
            NRFX_ASSERT(0);
   1dff0:	4c1a      	ldr	r4, [pc, #104]	; (1e05c <gpiote_pin_int_cfg+0x174>)
   1dff2:	f240 2219 	movw	r2, #537	; 0x219
   1dff6:	4621      	mov	r1, r4
   1dff8:	4817      	ldr	r0, [pc, #92]	; (1e058 <gpiote_pin_int_cfg+0x170>)
   1dffa:	f00a f9a2 	bl	28342 <printk>
   1dffe:	f240 2119 	movw	r1, #537	; 0x219
   1e002:	4620      	mov	r0, r4
   1e004:	f00a fd36 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1e008:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1e00c:	e015      	b.n	1e03a <gpiote_pin_int_cfg+0x152>
		return NRF_GPIO_PIN_SENSE_HIGH;
   1e00e:	2502      	movs	r5, #2
   1e010:	e7dc      	b.n	1dfcc <gpiote_pin_int_cfg+0xe4>
            mask = P0_FEATURE_PINS_PRESENT;
   1e012:	f04f 33ff 	mov.w	r3, #4294967295
   1e016:	e7df      	b.n	1dfd8 <gpiote_pin_int_cfg+0xf0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e018:	4e10      	ldr	r6, [pc, #64]	; (1e05c <gpiote_pin_int_cfg+0x174>)
   1e01a:	f44f 7205 	mov.w	r2, #532	; 0x214
   1e01e:	4631      	mov	r1, r6
   1e020:	480d      	ldr	r0, [pc, #52]	; (1e058 <gpiote_pin_int_cfg+0x170>)
   1e022:	f00a f98e 	bl	28342 <printk>
   1e026:	f44f 7105 	mov.w	r1, #532	; 0x214
   1e02a:	4630      	mov	r0, r6
   1e02c:	f00a fd22 	bl	28a74 <assert_post_action>
   1e030:	e7d8      	b.n	1dfe4 <gpiote_pin_int_cfg+0xfc>
        case 0: return NRF_P0;
   1e032:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1e036:	e000      	b.n	1e03a <gpiote_pin_int_cfg+0x152>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e038:	4909      	ldr	r1, [pc, #36]	; (1e060 <gpiote_pin_int_cfg+0x178>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1e03a:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   1e03e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   1e042:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1e046:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1e04a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	int res = 0;
   1e04e:	2000      	movs	r0, #0
   1e050:	e000      	b.n	1e054 <gpiote_pin_int_cfg+0x16c>
   1e052:	2000      	movs	r0, #0
}
   1e054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e058:	0002f968 	.word	0x0002f968
   1e05c:	000326d8 	.word	0x000326d8
   1e060:	50000300 	.word	0x50000300

0001e064 <gpio_nrfx_pin_interrupt_configure>:
{
   1e064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e068:	4606      	mov	r6, r0
   1e06a:	460c      	mov	r4, r1
   1e06c:	4617      	mov	r7, r2
   1e06e:	4698      	mov	r8, r3
	return port->data;
   1e070:	6905      	ldr	r5, [r0, #16]
	return port->config;
   1e072:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e074:	7a1b      	ldrb	r3, [r3, #8]
   1e076:	f001 091f 	and.w	r9, r1, #31
   1e07a:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1e07e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1e082:	d028      	beq.n	1e0d6 <gpio_nrfx_pin_interrupt_configure+0x72>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1e084:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
   1e088:	d06b      	beq.n	1e162 <gpio_nrfx_pin_interrupt_configure+0xfe>
   1e08a:	68eb      	ldr	r3, [r5, #12]
   1e08c:	2201      	movs	r2, #1
   1e08e:	40a2      	lsls	r2, r4
   1e090:	4313      	orrs	r3, r2
   1e092:	60eb      	str	r3, [r5, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1e094:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   1e098:	d069      	beq.n	1e16e <gpio_nrfx_pin_interrupt_configure+0x10a>
   1e09a:	696b      	ldr	r3, [r5, #20]
   1e09c:	2201      	movs	r2, #1
   1e09e:	40a2      	lsls	r2, r4
   1e0a0:	ea23 0302 	bic.w	r3, r3, r2
   1e0a4:	616b      	str	r3, [r5, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1e0a6:	f5b8 2fc0 	cmp.w	r8, #393216	; 0x60000
   1e0aa:	d065      	beq.n	1e178 <gpio_nrfx_pin_interrupt_configure+0x114>
   1e0ac:	69ab      	ldr	r3, [r5, #24]
   1e0ae:	2201      	movs	r2, #1
   1e0b0:	40a2      	lsls	r2, r4
   1e0b2:	ea23 0302 	bic.w	r3, r3, r2
   1e0b6:	61ab      	str	r3, [r5, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1e0b8:	f5b8 2f80 	cmp.w	r8, #262144	; 0x40000
   1e0bc:	d061      	beq.n	1e182 <gpio_nrfx_pin_interrupt_configure+0x11e>
   1e0be:	692b      	ldr	r3, [r5, #16]
   1e0c0:	2201      	movs	r2, #1
   1e0c2:	40a2      	lsls	r2, r4
   1e0c4:	ea23 0302 	bic.w	r3, r3, r2
   1e0c8:	612b      	str	r3, [r5, #16]
	return gpiote_pin_int_cfg(port, pin);
   1e0ca:	4621      	mov	r1, r4
   1e0cc:	4630      	mov	r0, r6
   1e0ce:	f7ff ff0b 	bl	1dee8 <gpiote_pin_int_cfg>
}
   1e0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (port)
   1e0d6:	ea5f 1359 	movs.w	r3, r9, lsr #5
   1e0da:	d021      	beq.n	1e120 <gpio_nrfx_pin_interrupt_configure+0xbc>
   1e0dc:	2b01      	cmp	r3, #1
   1e0de:	d122      	bne.n	1e126 <gpio_nrfx_pin_interrupt_configure+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
   1e0e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1e0e4:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e0e8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e0ea:	f013 0f01 	tst.w	r3, #1
   1e0ee:	d01c      	beq.n	1e12a <gpio_nrfx_pin_interrupt_configure+0xc6>
    *p_pin = pin_number & 0x1F;
   1e0f0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e0f4:	ea5f 1959 	movs.w	r9, r9, lsr #5
   1e0f8:	d025      	beq.n	1e146 <gpio_nrfx_pin_interrupt_configure+0xe2>
   1e0fa:	f1b9 0f01 	cmp.w	r9, #1
   1e0fe:	d025      	beq.n	1e14c <gpio_nrfx_pin_interrupt_configure+0xe8>
            NRFX_ASSERT(0);
   1e100:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1e194 <gpio_nrfx_pin_interrupt_configure+0x130>
   1e104:	f240 2219 	movw	r2, #537	; 0x219
   1e108:	4649      	mov	r1, r9
   1e10a:	4820      	ldr	r0, [pc, #128]	; (1e18c <gpio_nrfx_pin_interrupt_configure+0x128>)
   1e10c:	f00a f919 	bl	28342 <printk>
   1e110:	f240 2119 	movw	r1, #537	; 0x219
   1e114:	4648      	mov	r0, r9
   1e116:	f00a fcad 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1e11a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1e11e:	e016      	b.n	1e14e <gpio_nrfx_pin_interrupt_configure+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
   1e120:	f04f 33ff 	mov.w	r3, #4294967295
   1e124:	e7de      	b.n	1e0e4 <gpio_nrfx_pin_interrupt_configure+0x80>
    switch (port)
   1e126:	2300      	movs	r3, #0
   1e128:	e7dc      	b.n	1e0e4 <gpio_nrfx_pin_interrupt_configure+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e12a:	f8df a068 	ldr.w	sl, [pc, #104]	; 1e194 <gpio_nrfx_pin_interrupt_configure+0x130>
   1e12e:	f44f 7205 	mov.w	r2, #532	; 0x214
   1e132:	4651      	mov	r1, sl
   1e134:	4815      	ldr	r0, [pc, #84]	; (1e18c <gpio_nrfx_pin_interrupt_configure+0x128>)
   1e136:	f00a f904 	bl	28342 <printk>
   1e13a:	f44f 7105 	mov.w	r1, #532	; 0x214
   1e13e:	4650      	mov	r0, sl
   1e140:	f00a fc98 	bl	28a74 <assert_post_action>
   1e144:	e7d4      	b.n	1e0f0 <gpio_nrfx_pin_interrupt_configure+0x8c>
        case 0: return NRF_P0;
   1e146:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1e14a:	e000      	b.n	1e14e <gpio_nrfx_pin_interrupt_configure+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e14c:	4b10      	ldr	r3, [pc, #64]	; (1e190 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e14e:	f50a 7ae0 	add.w	sl, sl, #448	; 0x1c0
   1e152:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1e156:	f013 0f01 	tst.w	r3, #1
   1e15a:	d093      	beq.n	1e084 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -ENOTSUP;
   1e15c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e160:	e7b7      	b.n	1e0d2 <gpio_nrfx_pin_interrupt_configure+0x6e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1e162:	68eb      	ldr	r3, [r5, #12]
   1e164:	2201      	movs	r2, #1
   1e166:	40a2      	lsls	r2, r4
   1e168:	ea23 0302 	bic.w	r3, r3, r2
   1e16c:	e791      	b.n	1e092 <gpio_nrfx_pin_interrupt_configure+0x2e>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1e16e:	696b      	ldr	r3, [r5, #20]
   1e170:	2201      	movs	r2, #1
   1e172:	40a2      	lsls	r2, r4
   1e174:	4313      	orrs	r3, r2
   1e176:	e795      	b.n	1e0a4 <gpio_nrfx_pin_interrupt_configure+0x40>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1e178:	69ab      	ldr	r3, [r5, #24]
   1e17a:	2201      	movs	r2, #1
   1e17c:	40a2      	lsls	r2, r4
   1e17e:	4313      	orrs	r3, r2
   1e180:	e799      	b.n	1e0b6 <gpio_nrfx_pin_interrupt_configure+0x52>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1e182:	692b      	ldr	r3, [r5, #16]
   1e184:	2201      	movs	r2, #1
   1e186:	40a2      	lsls	r2, r4
   1e188:	4313      	orrs	r3, r2
   1e18a:	e79d      	b.n	1e0c8 <gpio_nrfx_pin_interrupt_configure+0x64>
   1e18c:	0002f968 	.word	0x0002f968
   1e190:	50000300 	.word	0x50000300
   1e194:	000326d8 	.word	0x000326d8

0001e198 <led_pwm_blink>:
	const struct led_pwm *led;
};

static int led_pwm_blink(const struct device *dev, uint32_t led,
			 uint32_t delay_on, uint32_t delay_off)
{
   1e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e19c:	b089      	sub	sp, #36	; 0x24
	const struct led_pwm_config *config = DEV_CFG(dev);
   1e19e:	6840      	ldr	r0, [r0, #4]
	const struct led_pwm *led_pwm;
	uint32_t period_usec, pulse_usec;

	if (led >= config->num_leds) {
   1e1a0:	6804      	ldr	r4, [r0, #0]
   1e1a2:	428c      	cmp	r4, r1
   1e1a4:	d96d      	bls.n	1e282 <led_pwm_blink+0xea>
	return __builtin_add_overflow(a, b, result);
}

static inline bool u32_add_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e1a6:	2400      	movs	r4, #0
   1e1a8:	18d3      	adds	r3, r2, r3
   1e1aa:	d25b      	bcs.n	1e264 <led_pwm_blink+0xcc>

	/*
	 * Convert delays (in ms) into PWM period and pulse (in us) and check
	 * for overflows.
	 */
	if (u32_add_overflow(delay_on, delay_off, &period_usec) ||
   1e1ac:	2c00      	cmp	r4, #0
   1e1ae:	d16b      	bne.n	1e288 <led_pwm_blink+0xf0>
	return __builtin_mul_overflow(a, b, result);
}

static inline bool u32_mul_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1e1b0:	2600      	movs	r6, #0
   1e1b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e1b6:	fba3 3404 	umull	r3, r4, r3, r4
   1e1ba:	469a      	mov	sl, r3
   1e1bc:	2c00      	cmp	r4, #0
   1e1be:	d153      	bne.n	1e268 <led_pwm_blink+0xd0>
   1e1c0:	2e00      	cmp	r6, #0
   1e1c2:	d164      	bne.n	1e28e <led_pwm_blink+0xf6>
   1e1c4:	2300      	movs	r3, #0
   1e1c6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1e1ca:	fba2 4506 	umull	r4, r5, r2, r6
   1e1ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1e1d2:	2d00      	cmp	r5, #0
   1e1d4:	d14a      	bne.n	1e26c <led_pwm_blink+0xd4>
	    u32_mul_overflow(period_usec, 1000, &period_usec) ||
   1e1d6:	2b00      	cmp	r3, #0
   1e1d8:	d15c      	bne.n	1e294 <led_pwm_blink+0xfc>
	    u32_mul_overflow(delay_on, 1000, &pulse_usec)) {
		return -EINVAL;
	}

	led_pwm = &config->led[led];
   1e1da:	6843      	ldr	r3, [r0, #4]
   1e1dc:	010a      	lsls	r2, r1, #4
   1e1de:	eb03 1101 	add.w	r1, r3, r1, lsl #4

	return pwm_pin_set_usec(led_pwm->dev, led_pwm->channel,
   1e1e2:	589e      	ldr	r6, [r3, r2]
   1e1e4:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1e1e8:	f891 900c 	ldrb.w	r9, [r1, #12]
						uint32_t pwm,
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
   1e1ec:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
   1e1ee:	685b      	ldr	r3, [r3, #4]
   1e1f0:	aa06      	add	r2, sp, #24
   1e1f2:	4641      	mov	r1, r8
   1e1f4:	4630      	mov	r0, r6
   1e1f6:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
   1e1f8:	2800      	cmp	r0, #0
   1e1fa:	d139      	bne.n	1e270 <led_pwm_blink+0xd8>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   1e1fc:	9d06      	ldr	r5, [sp, #24]
   1e1fe:	9f07      	ldr	r7, [sp, #28]
   1e200:	4651      	mov	r1, sl
   1e202:	fbaa ab05 	umull	sl, fp, sl, r5
   1e206:	fb07 bb01 	mla	fp, r7, r1, fp
   1e20a:	4a24      	ldr	r2, [pc, #144]	; (1e29c <led_pwm_blink+0x104>)
   1e20c:	2300      	movs	r3, #0
   1e20e:	4650      	mov	r0, sl
   1e210:	4659      	mov	r1, fp
   1e212:	f7e1 ff75 	bl	100 <__aeabi_uldivmod>
   1e216:	9005      	str	r0, [sp, #20]
	if (period_cycles >= ((uint64_t)1 << 32)) {
   1e218:	f04f 32ff 	mov.w	r2, #4294967295
   1e21c:	4b20      	ldr	r3, [pc, #128]	; (1e2a0 <led_pwm_blink+0x108>)
   1e21e:	455b      	cmp	r3, fp
   1e220:	bf08      	it	eq
   1e222:	4552      	cmpeq	r2, sl
   1e224:	d327      	bcc.n	1e276 <led_pwm_blink+0xde>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   1e226:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1e22a:	fba1 4505 	umull	r4, r5, r1, r5
   1e22e:	fb07 5501 	mla	r5, r7, r1, r5
   1e232:	4a1a      	ldr	r2, [pc, #104]	; (1e29c <led_pwm_blink+0x104>)
   1e234:	2300      	movs	r3, #0
   1e236:	4620      	mov	r0, r4
   1e238:	4629      	mov	r1, r5
   1e23a:	f7e1 ff61 	bl	100 <__aeabi_uldivmod>
   1e23e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
   1e240:	f04f 30ff 	mov.w	r0, #4294967295
   1e244:	4916      	ldr	r1, [pc, #88]	; (1e2a0 <led_pwm_blink+0x108>)
   1e246:	42a9      	cmp	r1, r5
   1e248:	bf08      	it	eq
   1e24a:	42a0      	cmpeq	r0, r4
   1e24c:	d316      	bcc.n	1e27c <led_pwm_blink+0xe4>
	api = (struct pwm_driver_api *)dev->api;
   1e24e:	68b2      	ldr	r2, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
   1e250:	6814      	ldr	r4, [r2, #0]
   1e252:	f8cd 9000 	str.w	r9, [sp]
   1e256:	9a05      	ldr	r2, [sp, #20]
   1e258:	4641      	mov	r1, r8
   1e25a:	4630      	mov	r0, r6
   1e25c:	47a0      	blx	r4
				period_usec, pulse_usec, led_pwm->flags);
}
   1e25e:	b009      	add	sp, #36	; 0x24
   1e260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __builtin_add_overflow(a, b, result);
   1e264:	2401      	movs	r4, #1
   1e266:	e7a1      	b.n	1e1ac <led_pwm_blink+0x14>
	return __builtin_mul_overflow(a, b, result);
   1e268:	2601      	movs	r6, #1
   1e26a:	e7a9      	b.n	1e1c0 <led_pwm_blink+0x28>
   1e26c:	2301      	movs	r3, #1
   1e26e:	e7b2      	b.n	1e1d6 <led_pwm_blink+0x3e>
		return -EIO;
   1e270:	f06f 0004 	mvn.w	r0, #4
   1e274:	e7f3      	b.n	1e25e <led_pwm_blink+0xc6>
		return -ENOTSUP;
   1e276:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e27a:	e7f0      	b.n	1e25e <led_pwm_blink+0xc6>
		return -ENOTSUP;
   1e27c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return pwm_pin_set_usec(led_pwm->dev, led_pwm->channel,
   1e280:	e7ed      	b.n	1e25e <led_pwm_blink+0xc6>
		return -EINVAL;
   1e282:	f06f 0015 	mvn.w	r0, #21
   1e286:	e7ea      	b.n	1e25e <led_pwm_blink+0xc6>
		return -EINVAL;
   1e288:	f06f 0015 	mvn.w	r0, #21
   1e28c:	e7e7      	b.n	1e25e <led_pwm_blink+0xc6>
   1e28e:	f06f 0015 	mvn.w	r0, #21
   1e292:	e7e4      	b.n	1e25e <led_pwm_blink+0xc6>
   1e294:	f06f 0015 	mvn.w	r0, #21
   1e298:	e7e1      	b.n	1e25e <led_pwm_blink+0xc6>
   1e29a:	bf00      	nop
   1e29c:	000f4240 	.word	0x000f4240
   1e2a0:	000f423f 	.word	0x000f423f

0001e2a4 <led_pwm_set_brightness>:

static int led_pwm_set_brightness(const struct device *dev,
				  uint32_t led, uint8_t value)
{
   1e2a4:	4613      	mov	r3, r2
	const struct led_pwm_config *config = DEV_CFG(dev);
   1e2a6:	6842      	ldr	r2, [r0, #4]
	const struct led_pwm *led_pwm;
	uint32_t pulse;

	if (led >= config->num_leds || value > 100) {
   1e2a8:	6810      	ldr	r0, [r2, #0]
   1e2aa:	4288      	cmp	r0, r1
   1e2ac:	d917      	bls.n	1e2de <led_pwm_set_brightness+0x3a>
   1e2ae:	2b64      	cmp	r3, #100	; 0x64
   1e2b0:	d818      	bhi.n	1e2e4 <led_pwm_set_brightness+0x40>
{
   1e2b2:	b530      	push	{r4, r5, lr}
   1e2b4:	b083      	sub	sp, #12
		return -EINVAL;
	}

	led_pwm = &config->led[led];
   1e2b6:	6850      	ldr	r0, [r2, #4]
   1e2b8:	010d      	lsls	r5, r1, #4
   1e2ba:	eb00 1401 	add.w	r4, r0, r1, lsl #4

	pulse = led_pwm->period * value / 100;
   1e2be:	68a2      	ldr	r2, [r4, #8]
   1e2c0:	fb02 f303 	mul.w	r3, r2, r3
   1e2c4:	4909      	ldr	r1, [pc, #36]	; (1e2ec <led_pwm_set_brightness+0x48>)
   1e2c6:	fba1 1303 	umull	r1, r3, r1, r3
   1e2ca:	095b      	lsrs	r3, r3, #5

	return pwm_pin_set_cycles(led_pwm->dev, led_pwm->channel,
   1e2cc:	5940      	ldr	r0, [r0, r5]
   1e2ce:	6861      	ldr	r1, [r4, #4]
   1e2d0:	7b25      	ldrb	r5, [r4, #12]
	api = (struct pwm_driver_api *)dev->api;
   1e2d2:	6884      	ldr	r4, [r0, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
   1e2d4:	6824      	ldr	r4, [r4, #0]
   1e2d6:	9500      	str	r5, [sp, #0]
   1e2d8:	47a0      	blx	r4
				  led_pwm->period, pulse, led_pwm->flags);
}
   1e2da:	b003      	add	sp, #12
   1e2dc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e2de:	f06f 0015 	mvn.w	r0, #21
   1e2e2:	4770      	bx	lr
   1e2e4:	f06f 0015 	mvn.w	r0, #21
}
   1e2e8:	4770      	bx	lr
   1e2ea:	bf00      	nop
   1e2ec:	51eb851f 	.word	0x51eb851f

0001e2f0 <led_pwm_init>:
{
	return led_pwm_set_brightness(dev, led, 0);
}

static int led_pwm_init(const struct device *dev)
{
   1e2f0:	b570      	push	{r4, r5, r6, lr}
   1e2f2:	4606      	mov	r6, r0
	const struct led_pwm_config *config = DEV_CFG(dev);
   1e2f4:	6845      	ldr	r5, [r0, #4]
	int i;

	if (!config->num_leds) {
   1e2f6:	682b      	ldr	r3, [r5, #0]
   1e2f8:	b10b      	cbz	r3, 1e2fe <led_pwm_init+0xe>
		LOG_ERR("%s: no LEDs found (DT child nodes missing)",
			dev->name);
		return -ENODEV;
	}

	for (i = 0; i < config->num_leds; i++) {
   1e2fa:	2400      	movs	r4, #0
   1e2fc:	e008      	b.n	1e310 <led_pwm_init+0x20>
		LOG_ERR("%s: no LEDs found (DT child nodes missing)",
   1e2fe:	6802      	ldr	r2, [r0, #0]
   1e300:	2145      	movs	r1, #69	; 0x45
   1e302:	480d      	ldr	r0, [pc, #52]	; (1e338 <led_pwm_init+0x48>)
   1e304:	f00a fbbe 	bl	28a84 <z_log_minimal_printk>
		return -ENODEV;
   1e308:	f06f 0012 	mvn.w	r0, #18
   1e30c:	e013      	b.n	1e336 <led_pwm_init+0x46>
	for (i = 0; i < config->num_leds; i++) {
   1e30e:	3401      	adds	r4, #1
   1e310:	682b      	ldr	r3, [r5, #0]
   1e312:	429c      	cmp	r4, r3
   1e314:	da0e      	bge.n	1e334 <led_pwm_init+0x44>
		const struct led_pwm *led = &config->led[i];
   1e316:	686a      	ldr	r2, [r5, #4]
   1e318:	0123      	lsls	r3, r4, #4

		if (!device_is_ready(led->dev)) {
   1e31a:	58d0      	ldr	r0, [r2, r3]
   1e31c:	f010 fc17 	bl	2eb4e <z_device_ready>
   1e320:	2800      	cmp	r0, #0
   1e322:	d1f4      	bne.n	1e30e <led_pwm_init+0x1e>
			LOG_ERR("%s: pwm device not ready", dev->name);
   1e324:	6832      	ldr	r2, [r6, #0]
   1e326:	2145      	movs	r1, #69	; 0x45
   1e328:	4804      	ldr	r0, [pc, #16]	; (1e33c <led_pwm_init+0x4c>)
   1e32a:	f00a fbab 	bl	28a84 <z_log_minimal_printk>
			return -ENODEV;
   1e32e:	f06f 0012 	mvn.w	r0, #18
   1e332:	e000      	b.n	1e336 <led_pwm_init+0x46>
		}
	}

	return 0;
   1e334:	2000      	movs	r0, #0
}
   1e336:	bd70      	pop	{r4, r5, r6, pc}
   1e338:	00032758 	.word	0x00032758
   1e33c:	00032788 	.word	0x00032788

0001e340 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   1e340:	4802      	ldr	r0, [pc, #8]	; (1e34c <pwm_nrfx_get_cycles_per_sec+0xc>)
   1e342:	2100      	movs	r1, #0
   1e344:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   1e348:	2000      	movs	r0, #0
   1e34a:	4770      	bx	lr
   1e34c:	00f42400 	.word	0x00f42400

0001e350 <pwm_period_check_and_set>:
{
   1e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e354:	4616      	mov	r6, r2
   1e356:	461a      	mov	r2, r3
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1e358:	2400      	movs	r4, #0
   1e35a:	e001      	b.n	1e360 <pwm_period_check_and_set+0x10>
   1e35c:	3401      	adds	r4, #1
   1e35e:	b2e4      	uxtb	r4, r4
   1e360:	2c03      	cmp	r4, #3
   1e362:	d80f      	bhi.n	1e384 <pwm_period_check_and_set+0x34>
		if (i != channel) {
   1e364:	42b4      	cmp	r4, r6
   1e366:	d0f9      	beq.n	1e35c <pwm_period_check_and_set+0xc>
				data->current[i]
   1e368:	eb01 0544 	add.w	r5, r1, r4, lsl #1
   1e36c:	88ad      	ldrh	r5, [r5, #4]
			uint16_t channel_pulse_cycle =
   1e36e:	f3c5 050e 	ubfx	r5, r5, #0, #15
			if (channel_pulse_cycle > 0) {
   1e372:	2d00      	cmp	r5, #0
   1e374:	d0f2      	beq.n	1e35c <pwm_period_check_and_set+0xc>
				LOG_ERR("Incompatible period.");
   1e376:	2145      	movs	r1, #69	; 0x45
   1e378:	481b      	ldr	r0, [pc, #108]	; (1e3e8 <pwm_period_check_and_set+0x98>)
   1e37a:	f00a fb83 	bl	28a84 <z_log_minimal_printk>
				return -EINVAL;
   1e37e:	f06f 0015 	mvn.w	r0, #21
   1e382:	e00f      	b.n	1e3a4 <pwm_period_check_and_set+0x54>
	countertop = period_cycles;
   1e384:	4615      	mov	r5, r2
	prescaler = 0;
   1e386:	2400      	movs	r4, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   1e388:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e38c:	d30c      	bcc.n	1e3a8 <pwm_period_check_and_set+0x58>
		countertop >>= 1;
   1e38e:	086d      	lsrs	r5, r5, #1
		++prescaler;
   1e390:	3401      	adds	r4, #1
   1e392:	b2e4      	uxtb	r4, r4
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1e394:	2c07      	cmp	r4, #7
   1e396:	d9f7      	bls.n	1e388 <pwm_period_check_and_set+0x38>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   1e398:	2145      	movs	r1, #69	; 0x45
   1e39a:	4814      	ldr	r0, [pc, #80]	; (1e3ec <pwm_period_check_and_set+0x9c>)
   1e39c:	f00a fb72 	bl	28a84 <z_log_minimal_printk>
	return -EINVAL;
   1e3a0:	f06f 0015 	mvn.w	r0, #21
}
   1e3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			data->period_cycles = period_cycles;
   1e3a8:	600a      	str	r2, [r1, #0]
			data->prescaler     = prescaler;
   1e3aa:	738c      	strb	r4, [r1, #14]
			data->countertop    = (uint16_t)countertop;
   1e3ac:	b2ad      	uxth	r5, r5
   1e3ae:	818d      	strh	r5, [r1, #12]
			nrf_pwm_configure(config->pwm.p_registers,
   1e3b0:	6806      	ldr	r6, [r0, #0]
   1e3b2:	7b87      	ldrb	r7, [r0, #14]
NRF_STATIC_INLINE void nrf_pwm_configure(NRF_PWM_Type * p_reg,
                                         nrf_pwm_clk_t  base_clock,
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   1e3b4:	f415 4f00 	tst.w	r5, #32768	; 0x8000
   1e3b8:	d107      	bne.n	1e3ca <pwm_period_check_and_set+0x7a>

    p_reg->PRESCALER  = base_clock;
   1e3ba:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1e3be:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1e3c2:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
			return 0;
   1e3c6:	2000      	movs	r0, #0
}
   1e3c8:	e7ec      	b.n	1e3a4 <pwm_period_check_and_set+0x54>
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   1e3ca:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1e3f4 <pwm_period_check_and_set+0xa4>
   1e3ce:	f44f 7227 	mov.w	r2, #668	; 0x29c
   1e3d2:	4641      	mov	r1, r8
   1e3d4:	4806      	ldr	r0, [pc, #24]	; (1e3f0 <pwm_period_check_and_set+0xa0>)
   1e3d6:	f009 ffb4 	bl	28342 <printk>
   1e3da:	f44f 7127 	mov.w	r1, #668	; 0x29c
   1e3de:	4640      	mov	r0, r8
   1e3e0:	f00a fb48 	bl	28a74 <assert_post_action>
   1e3e4:	e7e9      	b.n	1e3ba <pwm_period_check_and_set+0x6a>
   1e3e6:	bf00      	nop
   1e3e8:	000327e4 	.word	0x000327e4
   1e3ec:	00032834 	.word	0x00032834
   1e3f0:	0002f968 	.word	0x0002f968
   1e3f4:	00032800 	.word	0x00032800

0001e3f8 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   1e3f8:	b538      	push	{r3, r4, r5, lr}
   1e3fa:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config;
   1e3fc:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   1e3fe:	6925      	ldr	r5, [r4, #16]

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   1e400:	2300      	movs	r3, #0
   1e402:	e004      	b.n	1e40e <pwm_nrfx_init+0x16>
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
   1e404:	2100      	movs	r1, #0

		data->current[i] = value;
   1e406:	eb05 0243 	add.w	r2, r5, r3, lsl #1
   1e40a:	8091      	strh	r1, [r2, #4]
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   1e40c:	3301      	adds	r3, #1
   1e40e:	2b03      	cmp	r3, #3
   1e410:	d807      	bhi.n	1e422 <pwm_nrfx_init+0x2a>
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
   1e412:	18c2      	adds	r2, r0, r3
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
   1e414:	f992 2008 	ldrsb.w	r2, [r2, #8]
   1e418:	2a00      	cmp	r2, #0
   1e41a:	dbf3      	blt.n	1e404 <pwm_nrfx_init+0xc>
   1e41c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1e420:	e7f1      	b.n	1e406 <pwm_nrfx_init+0xe>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   1e422:	2300      	movs	r3, #0
   1e424:	461a      	mov	r2, r3
   1e426:	f100 0108 	add.w	r1, r0, #8
   1e42a:	f002 feb7 	bl	2119c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   1e42e:	4b06      	ldr	r3, [pc, #24]	; (1e448 <pwm_nrfx_init+0x50>)
   1e430:	4298      	cmp	r0, r3
   1e432:	d101      	bne.n	1e438 <pwm_nrfx_init+0x40>
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
   1e434:	2000      	movs	r0, #0
}
   1e436:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1e438:	6822      	ldr	r2, [r4, #0]
   1e43a:	2145      	movs	r1, #69	; 0x45
   1e43c:	4803      	ldr	r0, [pc, #12]	; (1e44c <pwm_nrfx_init+0x54>)
   1e43e:	f00a fb21 	bl	28a84 <z_log_minimal_printk>
		return -EBUSY;
   1e442:	f06f 000f 	mvn.w	r0, #15
   1e446:	e7f6      	b.n	1e436 <pwm_nrfx_init+0x3e>
   1e448:	0bad0000 	.word	0x0bad0000
   1e44c:	00032864 	.word	0x00032864

0001e450 <pwm_nrfx_pin_set>:
{
   1e450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e454:	4699      	mov	r9, r3
   1e456:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	const struct pwm_nrfx_config *config = dev->config;
   1e45a:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   1e45c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (flags) {
   1e460:	2b00      	cmp	r3, #0
   1e462:	f040 80fd 	bne.w	1e660 <pwm_nrfx_pin_set+0x210>
   1e466:	460e      	mov	r6, r1
   1e468:	4617      	mov	r7, r2
	channel = pwm_channel_map(config->initial_config.output_pins, pwm);
   1e46a:	f105 0008 	add.w	r0, r5, #8
   1e46e:	f00f fc2a 	bl	2dcc6 <pwm_channel_map>
   1e472:	4604      	mov	r4, r0
	if (channel == NRF_PWM_CHANNEL_COUNT) {
   1e474:	2804      	cmp	r0, #4
   1e476:	d00b      	beq.n	1e490 <pwm_nrfx_pin_set+0x40>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e478:	4641      	mov	r1, r8
   1e47a:	f00f fc35 	bl	2dce8 <pwm_channel_is_active>
   1e47e:	b978      	cbnz	r0, 1e4a0 <pwm_nrfx_pin_set+0x50>
		      !any_other_channel_is_active(channel, data);
   1e480:	4641      	mov	r1, r8
   1e482:	4620      	mov	r0, r4
   1e484:	f00f fc3f 	bl	2dd06 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e488:	bba0      	cbnz	r0, 1e4f4 <pwm_nrfx_pin_set+0xa4>
   1e48a:	f04f 0a01 	mov.w	sl, #1
   1e48e:	e009      	b.n	1e4a4 <pwm_nrfx_pin_set+0x54>
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   1e490:	4632      	mov	r2, r6
   1e492:	2145      	movs	r1, #69	; 0x45
   1e494:	4875      	ldr	r0, [pc, #468]	; (1e66c <pwm_nrfx_pin_set+0x21c>)
   1e496:	f00a faf5 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1e49a:	f06f 0015 	mvn.w	r0, #21
   1e49e:	e08a      	b.n	1e5b6 <pwm_nrfx_pin_set+0x166>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e4a0:	f04f 0a00 	mov.w	sl, #0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1e4a4:	7bab      	ldrb	r3, [r5, #14]
   1e4a6:	2b01      	cmp	r3, #1
   1e4a8:	d027      	beq.n	1e4fa <pwm_nrfx_pin_set+0xaa>
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
   1e4aa:	b11f      	cbz	r7, 1e4b4 <pwm_nrfx_pin_set+0x64>
   1e4ac:	f8d8 3000 	ldr.w	r3, [r8]
   1e4b0:	42bb      	cmp	r3, r7
   1e4b2:	d126      	bne.n	1e502 <pwm_nrfx_pin_set+0xb2>
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1e4b4:	46bb      	mov	fp, r7
   1e4b6:	454f      	cmp	r7, r9
   1e4b8:	bf28      	it	cs
   1e4ba:	46cb      	movcs	fp, r9
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1e4bc:	eb08 0144 	add.w	r1, r8, r4, lsl #1
   1e4c0:	888b      	ldrh	r3, [r1, #4]
   1e4c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   1e4c6:	f898 200e 	ldrb.w	r2, [r8, #14]
   1e4ca:	fa2b f202 	lsr.w	r2, fp, r2
   1e4ce:	4313      	orrs	r3, r2
	data->current[channel] = (
   1e4d0:	808b      	strh	r3, [r1, #4]
	if (!pwm_channel_is_active(channel, data)) {
   1e4d2:	4641      	mov	r1, r8
   1e4d4:	4620      	mov	r0, r4
   1e4d6:	f00f fc07 	bl	2dce8 <pwm_channel_is_active>
   1e4da:	2800      	cmp	r0, #0
   1e4dc:	f040 80af 	bne.w	1e63e <pwm_nrfx_pin_set+0x1ee>
			config->initial_config.output_pins[channel]
   1e4e0:	192b      	adds	r3, r5, r4
   1e4e2:	f993 2008 	ldrsb.w	r2, [r3, #8]
			&& !channel_inverted_state;
   1e4e6:	f1bb 0f00 	cmp.w	fp, #0
   1e4ea:	d115      	bne.n	1e518 <pwm_nrfx_pin_set+0xc8>
   1e4ec:	2a00      	cmp	r2, #0
   1e4ee:	db11      	blt.n	1e514 <pwm_nrfx_pin_set+0xc4>
   1e4f0:	2301      	movs	r3, #1
   1e4f2:	e012      	b.n	1e51a <pwm_nrfx_pin_set+0xca>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e4f4:	f04f 0a00 	mov.w	sl, #0
   1e4f8:	e7d4      	b.n	1e4a4 <pwm_nrfx_pin_set+0x54>
		period_cycles /= 2;
   1e4fa:	087f      	lsrs	r7, r7, #1
		pulse_cycles /= 2;
   1e4fc:	ea4f 0959 	mov.w	r9, r9, lsr #1
   1e500:	e7d3      	b.n	1e4aa <pwm_nrfx_pin_set+0x5a>
		int ret = pwm_period_check_and_set(config, data, channel,
   1e502:	463b      	mov	r3, r7
   1e504:	4622      	mov	r2, r4
   1e506:	4641      	mov	r1, r8
   1e508:	4628      	mov	r0, r5
   1e50a:	f7ff ff21 	bl	1e350 <pwm_period_check_and_set>
		if (ret) {
   1e50e:	2800      	cmp	r0, #0
   1e510:	d0d0      	beq.n	1e4b4 <pwm_nrfx_pin_set+0x64>
   1e512:	e050      	b.n	1e5b6 <pwm_nrfx_pin_set+0x166>
			&& !channel_inverted_state;
   1e514:	2300      	movs	r3, #0
   1e516:	e000      	b.n	1e51a <pwm_nrfx_pin_set+0xca>
   1e518:	2300      	movs	r3, #0
			&& channel_inverted_state;
   1e51a:	454f      	cmp	r7, r9
   1e51c:	d803      	bhi.n	1e526 <pwm_nrfx_pin_set+0xd6>
   1e51e:	2a00      	cmp	r2, #0
   1e520:	db26      	blt.n	1e570 <pwm_nrfx_pin_set+0x120>
   1e522:	2200      	movs	r2, #0
   1e524:	e000      	b.n	1e528 <pwm_nrfx_pin_set+0xd8>
   1e526:	2200      	movs	r2, #0
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   1e528:	b90b      	cbnz	r3, 1e52e <pwm_nrfx_pin_set+0xde>
   1e52a:	2a00      	cmp	r2, #0
   1e52c:	d045      	beq.n	1e5ba <pwm_nrfx_pin_set+0x16a>
    switch (port)
   1e52e:	0973      	lsrs	r3, r6, #5
   1e530:	d020      	beq.n	1e574 <pwm_nrfx_pin_set+0x124>
   1e532:	2b01      	cmp	r3, #1
   1e534:	d121      	bne.n	1e57a <pwm_nrfx_pin_set+0x12a>
            mask = P1_FEATURE_PINS_PRESENT;
   1e536:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1e53a:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e53e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e540:	f013 0f01 	tst.w	r3, #1
   1e544:	d01b      	beq.n	1e57e <pwm_nrfx_pin_set+0x12e>
    *p_pin = pin_number & 0x1F;
   1e546:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e54a:	0976      	lsrs	r6, r6, #5
   1e54c:	d024      	beq.n	1e598 <pwm_nrfx_pin_set+0x148>
   1e54e:	2e01      	cmp	r6, #1
   1e550:	d025      	beq.n	1e59e <pwm_nrfx_pin_set+0x14e>
            NRFX_ASSERT(0);
   1e552:	4e47      	ldr	r6, [pc, #284]	; (1e670 <pwm_nrfx_pin_set+0x220>)
   1e554:	f240 2219 	movw	r2, #537	; 0x219
   1e558:	4631      	mov	r1, r6
   1e55a:	4846      	ldr	r0, [pc, #280]	; (1e674 <pwm_nrfx_pin_set+0x224>)
   1e55c:	f009 fef1 	bl	28342 <printk>
   1e560:	f240 2119 	movw	r1, #537	; 0x219
   1e564:	4630      	mov	r0, r6
   1e566:	f00a fa85 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1e56a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1e56e:	e017      	b.n	1e5a0 <pwm_nrfx_pin_set+0x150>
			&& channel_inverted_state;
   1e570:	2201      	movs	r2, #1
   1e572:	e7d9      	b.n	1e528 <pwm_nrfx_pin_set+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
   1e574:	f04f 33ff 	mov.w	r3, #4294967295
   1e578:	e7df      	b.n	1e53a <pwm_nrfx_pin_set+0xea>
    switch (port)
   1e57a:	2300      	movs	r3, #0
   1e57c:	e7dd      	b.n	1e53a <pwm_nrfx_pin_set+0xea>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e57e:	4f3c      	ldr	r7, [pc, #240]	; (1e670 <pwm_nrfx_pin_set+0x220>)
   1e580:	f44f 7205 	mov.w	r2, #532	; 0x214
   1e584:	4639      	mov	r1, r7
   1e586:	483b      	ldr	r0, [pc, #236]	; (1e674 <pwm_nrfx_pin_set+0x224>)
   1e588:	f009 fedb 	bl	28342 <printk>
   1e58c:	f44f 7105 	mov.w	r1, #532	; 0x214
   1e590:	4638      	mov	r0, r7
   1e592:	f00a fa6f 	bl	28a74 <assert_post_action>
   1e596:	e7d6      	b.n	1e546 <pwm_nrfx_pin_set+0xf6>
        case 0: return NRF_P0;
   1e598:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1e59c:	e000      	b.n	1e5a0 <pwm_nrfx_pin_set+0x150>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e59e:	4a36      	ldr	r2, [pc, #216]	; (1e678 <pwm_nrfx_pin_set+0x228>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1e5a0:	2301      	movs	r3, #1
   1e5a2:	40bb      	lsls	r3, r7
    p_reg->OUTCLR = clr_mask;
   1e5a4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
   1e5a8:	4641      	mov	r1, r8
   1e5aa:	4620      	mov	r0, r4
   1e5ac:	f00f fbab 	bl	2dd06 <any_other_channel_is_active>
   1e5b0:	2800      	cmp	r0, #0
   1e5b2:	d03e      	beq.n	1e632 <pwm_nrfx_pin_set+0x1e2>
	return 0;
   1e5b4:	2000      	movs	r0, #0
}
   1e5b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (port)
   1e5ba:	0973      	lsrs	r3, r6, #5
   1e5bc:	d01e      	beq.n	1e5fc <pwm_nrfx_pin_set+0x1ac>
   1e5be:	2b01      	cmp	r3, #1
   1e5c0:	d11f      	bne.n	1e602 <pwm_nrfx_pin_set+0x1b2>
            mask = P1_FEATURE_PINS_PRESENT;
   1e5c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1e5c6:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e5ca:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e5cc:	f013 0f01 	tst.w	r3, #1
   1e5d0:	d019      	beq.n	1e606 <pwm_nrfx_pin_set+0x1b6>
    *p_pin = pin_number & 0x1F;
   1e5d2:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e5d6:	0976      	lsrs	r6, r6, #5
   1e5d8:	d022      	beq.n	1e620 <pwm_nrfx_pin_set+0x1d0>
   1e5da:	2e01      	cmp	r6, #1
   1e5dc:	d023      	beq.n	1e626 <pwm_nrfx_pin_set+0x1d6>
            NRFX_ASSERT(0);
   1e5de:	4e24      	ldr	r6, [pc, #144]	; (1e670 <pwm_nrfx_pin_set+0x220>)
   1e5e0:	f240 2219 	movw	r2, #537	; 0x219
   1e5e4:	4631      	mov	r1, r6
   1e5e6:	4823      	ldr	r0, [pc, #140]	; (1e674 <pwm_nrfx_pin_set+0x224>)
   1e5e8:	f009 feab 	bl	28342 <printk>
   1e5ec:	f240 2119 	movw	r1, #537	; 0x219
   1e5f0:	4630      	mov	r0, r6
   1e5f2:	f00a fa3f 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1e5f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1e5fa:	e015      	b.n	1e628 <pwm_nrfx_pin_set+0x1d8>
            mask = P0_FEATURE_PINS_PRESENT;
   1e5fc:	f04f 33ff 	mov.w	r3, #4294967295
   1e600:	e7e1      	b.n	1e5c6 <pwm_nrfx_pin_set+0x176>
    switch (port)
   1e602:	2300      	movs	r3, #0
   1e604:	e7df      	b.n	1e5c6 <pwm_nrfx_pin_set+0x176>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e606:	4f1a      	ldr	r7, [pc, #104]	; (1e670 <pwm_nrfx_pin_set+0x220>)
   1e608:	f44f 7205 	mov.w	r2, #532	; 0x214
   1e60c:	4639      	mov	r1, r7
   1e60e:	4819      	ldr	r0, [pc, #100]	; (1e674 <pwm_nrfx_pin_set+0x224>)
   1e610:	f009 fe97 	bl	28342 <printk>
   1e614:	f44f 7105 	mov.w	r1, #532	; 0x214
   1e618:	4638      	mov	r0, r7
   1e61a:	f00a fa2b 	bl	28a74 <assert_post_action>
   1e61e:	e7d8      	b.n	1e5d2 <pwm_nrfx_pin_set+0x182>
        case 0: return NRF_P0;
   1e620:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1e624:	e000      	b.n	1e628 <pwm_nrfx_pin_set+0x1d8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e626:	4a14      	ldr	r2, [pc, #80]	; (1e678 <pwm_nrfx_pin_set+0x228>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e628:	2301      	movs	r3, #1
   1e62a:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1e62c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1e630:	e7ba      	b.n	1e5a8 <pwm_nrfx_pin_set+0x158>
			nrfx_pwm_stop(&config->pwm, false);
   1e632:	2100      	movs	r1, #0
   1e634:	4628      	mov	r0, r5
   1e636:	f002 ffdd 	bl	215f4 <nrfx_pwm_stop>
	return 0;
   1e63a:	2000      	movs	r0, #0
   1e63c:	e7bb      	b.n	1e5b6 <pwm_nrfx_pin_set+0x166>
		if (was_stopped) {
   1e63e:	f1ba 0f00 	cmp.w	sl, #0
   1e642:	d010      	beq.n	1e666 <pwm_nrfx_pin_set+0x216>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   1e644:	4628      	mov	r0, r5
   1e646:	f002 ff9f 	bl	21588 <nrfx_pwm_is_stopped>
   1e64a:	2800      	cmp	r0, #0
   1e64c:	d0fa      	beq.n	1e644 <pwm_nrfx_pin_set+0x1f4>
			nrfx_pwm_simple_playback(&config->pwm,
   1e64e:	2302      	movs	r3, #2
   1e650:	2201      	movs	r2, #1
   1e652:	f105 0118 	add.w	r1, r5, #24
   1e656:	4628      	mov	r0, r5
   1e658:	f002 fe2c 	bl	212b4 <nrfx_pwm_simple_playback>
	return 0;
   1e65c:	2000      	movs	r0, #0
   1e65e:	e7aa      	b.n	1e5b6 <pwm_nrfx_pin_set+0x166>
		return -ENOTSUP;
   1e660:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e664:	e7a7      	b.n	1e5b6 <pwm_nrfx_pin_set+0x166>
	return 0;
   1e666:	2000      	movs	r0, #0
   1e668:	e7a5      	b.n	1e5b6 <pwm_nrfx_pin_set+0x166>
   1e66a:	bf00      	nop
   1e66c:	0003288c 	.word	0x0003288c
   1e670:	000326d8 	.word	0x000326d8
   1e674:	0002f968 	.word	0x0002f968
   1e678:	50000300 	.word	0x50000300

0001e67c <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e67c:	4b03      	ldr	r3, [pc, #12]	; (1e68c <nrf52_errata_242+0x10>)
   1e67e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e680:	2b08      	cmp	r3, #8
   1e682:	d001      	beq.n	1e688 <nrf52_errata_242+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1e684:	2000      	movs	r0, #0
   1e686:	4770      	bx	lr
                        return true;
   1e688:	2001      	movs	r0, #1
    #endif
}
   1e68a:	4770      	bx	lr
   1e68c:	10000130 	.word	0x10000130

0001e690 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e690:	4b03      	ldr	r3, [pc, #12]	; (1e6a0 <nvmc_wait_ready+0x10>)
   1e692:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   1e696:	f013 0f01 	tst.w	r3, #1
   1e69a:	d0f9      	beq.n	1e690 <nvmc_wait_ready>
	}
}
   1e69c:	4770      	bx	lr
   1e69e:	bf00      	nop
   1e6a0:	4001e000 	.word	0x4001e000

0001e6a4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e6a4:	4b02      	ldr	r3, [pc, #8]	; (1e6b0 <flash_nrf_pages_layout+0xc>)
   1e6a6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e6a8:	2301      	movs	r3, #1
   1e6aa:	6013      	str	r3, [r2, #0]
}
   1e6ac:	4770      	bx	lr
   1e6ae:	bf00      	nop
   1e6b0:	20002988 	.word	0x20002988

0001e6b4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e6b4:	4800      	ldr	r0, [pc, #0]	; (1e6b8 <flash_nrf_get_parameters+0x4>)
   1e6b6:	4770      	bx	lr
   1e6b8:	00032998 	.word	0x00032998

0001e6bc <erase_synchronously>:
		 &flash_nrf_api);

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE

static int erase_synchronously(uint32_t addr, uint32_t size)
{
   1e6bc:	b500      	push	{lr}
   1e6be:	b087      	sub	sp, #28
	struct flash_context context = {
   1e6c0:	ab02      	add	r3, sp, #8
   1e6c2:	2200      	movs	r2, #0
   1e6c4:	9202      	str	r2, [sp, #8]
   1e6c6:	9205      	str	r2, [sp, #20]
   1e6c8:	9003      	str	r0, [sp, #12]
   1e6ca:	9104      	str	r1, [sp, #16]
   1e6cc:	2201      	movs	r2, #1
   1e6ce:	f88d 2014 	strb.w	r2, [sp, #20]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	struct flash_op_desc flash_op_desc = {
   1e6d2:	4a06      	ldr	r2, [pc, #24]	; (1e6ec <erase_synchronously+0x30>)
   1e6d4:	9200      	str	r2, [sp, #0]
   1e6d6:	9301      	str	r3, [sp, #4]
		.handler = erase_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e6d8:	4805      	ldr	r0, [pc, #20]	; (1e6f0 <erase_synchronously+0x34>)
   1e6da:	f002 f8c1 	bl	20860 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e6de:	4668      	mov	r0, sp
   1e6e0:	f002 f8c4 	bl	2086c <nrf_flash_sync_exe>
}
   1e6e4:	b007      	add	sp, #28
   1e6e6:	f85d fb04 	ldr.w	pc, [sp], #4
   1e6ea:	bf00      	nop
   1e6ec:	0002dd47 	.word	0x0002dd47
   1e6f0:	00015e64 	.word	0x00015e64

0001e6f4 <write_synchronously>:

static int write_synchronously(off_t addr, const void *data, size_t len)
{
   1e6f4:	b500      	push	{lr}
   1e6f6:	b087      	sub	sp, #28
	struct flash_context context = {
   1e6f8:	9102      	str	r1, [sp, #8]
   1e6fa:	9003      	str	r0, [sp, #12]
   1e6fc:	9204      	str	r2, [sp, #16]
   1e6fe:	2301      	movs	r3, #1
   1e700:	f88d 3014 	strb.w	r3, [sp, #20]
		.flash_addr = addr,
		.len = len,
		.enable_time_limit = 1 /* enable time limit */
	};

	struct flash_op_desc flash_op_desc = {
   1e704:	4b06      	ldr	r3, [pc, #24]	; (1e720 <write_synchronously+0x2c>)
   1e706:	9300      	str	r3, [sp, #0]
   1e708:	ab02      	add	r3, sp, #8
   1e70a:	9301      	str	r3, [sp, #4]
		.handler = write_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e70c:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e710:	f002 f8a6 	bl	20860 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e714:	4668      	mov	r0, sp
   1e716:	f002 f8a9 	bl	2086c <nrf_flash_sync_exe>
}
   1e71a:	b007      	add	sp, #28
   1e71c:	f85d fb04 	ldr.w	pc, [sp], #4
   1e720:	0002ddbb 	.word	0x0002ddbb

0001e724 <flash_nrf_read>:
{
   1e724:	b570      	push	{r4, r5, r6, lr}
   1e726:	460c      	mov	r4, r1
   1e728:	4616      	mov	r6, r2
   1e72a:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1e72c:	f010 f9cf 	bl	2eace <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1e730:	42a0      	cmp	r0, r4
   1e732:	d909      	bls.n	1e748 <flash_nrf_read+0x24>
   1e734:	2c00      	cmp	r4, #0
   1e736:	db07      	blt.n	1e748 <flash_nrf_read+0x24>
	    addr < 0 ||
   1e738:	42a8      	cmp	r0, r5
   1e73a:	d305      	bcc.n	1e748 <flash_nrf_read+0x24>
	    (addr) + len > flash_size) {
   1e73c:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   1e73e:	4298      	cmp	r0, r3
   1e740:	d302      	bcc.n	1e748 <flash_nrf_read+0x24>
	if (!len) {
   1e742:	b955      	cbnz	r5, 1e75a <flash_nrf_read+0x36>
		return 0;
   1e744:	2000      	movs	r0, #0
   1e746:	e007      	b.n	1e758 <flash_nrf_read+0x34>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e748:	462b      	mov	r3, r5
   1e74a:	4622      	mov	r2, r4
   1e74c:	2145      	movs	r1, #69	; 0x45
   1e74e:	4806      	ldr	r0, [pc, #24]	; (1e768 <flash_nrf_read+0x44>)
   1e750:	f00a f998 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1e754:	f06f 0015 	mvn.w	r0, #21
}
   1e758:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (void *)addr, len);
   1e75a:	462a      	mov	r2, r5
   1e75c:	4621      	mov	r1, r4
   1e75e:	4630      	mov	r0, r6
   1e760:	f00c f89d 	bl	2a89e <memcpy>
	return 0;
   1e764:	2000      	movs	r0, #0
   1e766:	e7f7      	b.n	1e758 <flash_nrf_read+0x34>
   1e768:	00032908 	.word	0x00032908

0001e76c <nrf_flash_init>:
{
   1e76c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e76e:	2201      	movs	r2, #1
   1e770:	4611      	mov	r1, r2
   1e772:	4807      	ldr	r0, [pc, #28]	; (1e790 <nrf_flash_init+0x24>)
   1e774:	f010 faad 	bl	2ecd2 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e778:	f002 f868 	bl	2084c <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e77c:	f010 f9af 	bl	2eade <nrfx_nvmc_flash_page_count_get>
   1e780:	4c04      	ldr	r4, [pc, #16]	; (1e794 <nrf_flash_init+0x28>)
   1e782:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e784:	f010 f9a7 	bl	2ead6 <nrfx_nvmc_flash_page_size_get>
   1e788:	6060      	str	r0, [r4, #4]
}
   1e78a:	2000      	movs	r0, #0
   1e78c:	bd10      	pop	{r4, pc}
   1e78e:	bf00      	nop
   1e790:	20002990 	.word	0x20002990
   1e794:	20002988 	.word	0x20002988

0001e798 <restore_pofwarn>:

static void restore_pofwarn(void)
{
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
   1e798:	4b0b      	ldr	r3, [pc, #44]	; (1e7c8 <restore_pofwarn+0x30>)
   1e79a:	781b      	ldrb	r3, [r3, #0]
   1e79c:	b903      	cbnz	r3, 1e7a0 <restore_pofwarn+0x8>
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
	}
}
   1e79e:	4770      	bx	lr
    uint32_t pofcon = p_reg->POFCON;
   1e7a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1e7a4:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   1e7a8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e7ac:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1e7b0:	f002 021e 	and.w	r2, r2, #30
   1e7b4:	f042 0201 	orr.w	r2, r2, #1
    pofcon |=
   1e7b8:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
   1e7ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
		pofcon_enabled = false;
   1e7be:	4b02      	ldr	r3, [pc, #8]	; (1e7c8 <restore_pofwarn+0x30>)
   1e7c0:	2200      	movs	r2, #0
   1e7c2:	701a      	strb	r2, [r3, #0]
}
   1e7c4:	e7eb      	b.n	1e79e <restore_pofwarn+0x6>
   1e7c6:	bf00      	nop
   1e7c8:	20003f77 	.word	0x20003f77

0001e7cc <suspend_pofwarn>:
{
   1e7cc:	b508      	push	{r3, lr}
	if (!nrf52_errata_242()) {
   1e7ce:	f7ff ff55 	bl	1e67c <nrf52_errata_242>
   1e7d2:	b348      	cbz	r0, 1e828 <suspend_pofwarn+0x5c>
    uint32_t pofcon = p_reg->POFCON;
   1e7d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e7d8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
   1e7dc:	f013 0201 	ands.w	r2, r3, #1
   1e7e0:	b2d2      	uxtb	r2, r2
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   1e7e2:	f3c3 0343 	ubfx	r3, r3, #1, #4
	if (enabled) {
   1e7e6:	d101      	bne.n	1e7ec <suspend_pofwarn+0x20>
	return 0;
   1e7e8:	2000      	movs	r0, #0
}
   1e7ea:	bd08      	pop	{r3, pc}
    uint32_t pofcon = p_reg->POFCON;
   1e7ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1e7f0:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e7f4:	f021 011f 	bic.w	r1, r1, #31
    pofcon |=
   1e7f8:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
    p_reg->POFCON = pofcon;
   1e7fc:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e800:	490a      	ldr	r1, [pc, #40]	; (1e82c <suspend_pofwarn+0x60>)
   1e802:	6809      	ldr	r1, [r1, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1e804:	b919      	cbnz	r1, 1e80e <suspend_pofwarn+0x42>
		pofcon_enabled = enabled;
   1e806:	4b0a      	ldr	r3, [pc, #40]	; (1e830 <suspend_pofwarn+0x64>)
   1e808:	701a      	strb	r2, [r3, #0]
	return 0;
   1e80a:	2000      	movs	r0, #0
   1e80c:	e7ed      	b.n	1e7ea <suspend_pofwarn+0x1e>
    uint32_t pofcon = p_reg->POFCON;
   1e80e:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e812:	f022 021f 	bic.w	r2, r2, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1e816:	005b      	lsls	r3, r3, #1
   1e818:	f043 0301 	orr.w	r3, r3, #1
    pofcon |=
   1e81c:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
   1e81e:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
			return -ECANCELED;
   1e822:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1e826:	e7e0      	b.n	1e7ea <suspend_pofwarn+0x1e>
		return 0;
   1e828:	2000      	movs	r0, #0
   1e82a:	e7de      	b.n	1e7ea <suspend_pofwarn+0x1e>
   1e82c:	40000108 	.word	0x40000108
   1e830:	20003f77 	.word	0x20003f77

0001e834 <flash_nrf_erase>:
{
   1e834:	b570      	push	{r4, r5, r6, lr}
   1e836:	460c      	mov	r4, r1
   1e838:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e83a:	f010 f94c 	bl	2ead6 <nrfx_nvmc_flash_page_size_get>
   1e83e:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1e840:	f010 f945 	bl	2eace <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1e844:	4284      	cmp	r4, r0
   1e846:	d214      	bcs.n	1e872 <flash_nrf_erase+0x3e>
   1e848:	2c00      	cmp	r4, #0
   1e84a:	db12      	blt.n	1e872 <flash_nrf_erase+0x3e>
	    addr < 0 ||
   1e84c:	42a8      	cmp	r0, r5
   1e84e:	d310      	bcc.n	1e872 <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
   1e850:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   1e852:	4283      	cmp	r3, r0
   1e854:	d80d      	bhi.n	1e872 <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e856:	fbb4 f3f6 	udiv	r3, r4, r6
   1e85a:	fb06 4313 	mls	r3, r6, r3, r4
   1e85e:	b993      	cbnz	r3, 1e886 <flash_nrf_erase+0x52>
   1e860:	fbb5 f3f6 	udiv	r3, r5, r6
   1e864:	fb06 5313 	mls	r3, r6, r3, r5
   1e868:	b96b      	cbnz	r3, 1e886 <flash_nrf_erase+0x52>
		if (!n_pages) {
   1e86a:	42b5      	cmp	r5, r6
   1e86c:	d214      	bcs.n	1e898 <flash_nrf_erase+0x64>
			return 0;
   1e86e:	2400      	movs	r4, #0
   1e870:	e007      	b.n	1e882 <flash_nrf_erase+0x4e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e872:	462b      	mov	r3, r5
   1e874:	4622      	mov	r2, r4
   1e876:	2145      	movs	r1, #69	; 0x45
   1e878:	4814      	ldr	r0, [pc, #80]	; (1e8cc <flash_nrf_erase+0x98>)
   1e87a:	f00a f903 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1e87e:	f06f 0415 	mvn.w	r4, #21
}
   1e882:	4620      	mov	r0, r4
   1e884:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e886:	462b      	mov	r3, r5
   1e888:	4622      	mov	r2, r4
   1e88a:	2145      	movs	r1, #69	; 0x45
   1e88c:	4810      	ldr	r0, [pc, #64]	; (1e8d0 <flash_nrf_erase+0x9c>)
   1e88e:	f00a f8f9 	bl	28a84 <z_log_minimal_printk>
			return -EINVAL;
   1e892:	f06f 0415 	mvn.w	r4, #21
   1e896:	e7f4      	b.n	1e882 <flash_nrf_erase+0x4e>
	return z_impl_k_sem_take(sem, timeout);
   1e898:	f04f 32ff 	mov.w	r2, #4294967295
   1e89c:	f04f 33ff 	mov.w	r3, #4294967295
   1e8a0:	480c      	ldr	r0, [pc, #48]	; (1e8d4 <flash_nrf_erase+0xa0>)
   1e8a2:	f004 f839 	bl	22918 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e8a6:	f010 f8d3 	bl	2ea50 <nrf_flash_sync_is_required>
   1e8aa:	b140      	cbz	r0, 1e8be <flash_nrf_erase+0x8a>
		ret = erase_synchronously(addr, size);
   1e8ac:	4629      	mov	r1, r5
   1e8ae:	4620      	mov	r0, r4
   1e8b0:	f7ff ff04 	bl	1e6bc <erase_synchronously>
   1e8b4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e8b6:	4807      	ldr	r0, [pc, #28]	; (1e8d4 <flash_nrf_erase+0xa0>)
   1e8b8:	f003 ffee 	bl	22898 <z_impl_k_sem_give>
	return ret;
   1e8bc:	e7e1      	b.n	1e882 <flash_nrf_erase+0x4e>
		ret = erase(addr, size);
   1e8be:	4629      	mov	r1, r5
   1e8c0:	4620      	mov	r0, r4
   1e8c2:	f00f fa6d 	bl	2dda0 <erase>
   1e8c6:	4604      	mov	r4, r0
   1e8c8:	e7f5      	b.n	1e8b6 <flash_nrf_erase+0x82>
   1e8ca:	bf00      	nop
   1e8cc:	00032908 	.word	0x00032908
   1e8d0:	0003292c 	.word	0x0003292c
   1e8d4:	20002990 	.word	0x20002990

0001e8d8 <flash_nrf_write>:
{
   1e8d8:	b570      	push	{r4, r5, r6, lr}
   1e8da:	460c      	mov	r4, r1
   1e8dc:	4616      	mov	r6, r2
   1e8de:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1e8e0:	f010 f8f5 	bl	2eace <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1e8e4:	42a0      	cmp	r0, r4
   1e8e6:	d90f      	bls.n	1e908 <flash_nrf_write+0x30>
   1e8e8:	2c00      	cmp	r4, #0
   1e8ea:	db0d      	blt.n	1e908 <flash_nrf_write+0x30>
	    addr < 0 ||
   1e8ec:	42a8      	cmp	r0, r5
   1e8ee:	d30b      	bcc.n	1e908 <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
   1e8f0:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   1e8f2:	4298      	cmp	r0, r3
   1e8f4:	d308      	bcc.n	1e908 <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e8f6:	f014 0f03 	tst.w	r4, #3
   1e8fa:	d10f      	bne.n	1e91c <flash_nrf_write+0x44>
   1e8fc:	f015 0f03 	tst.w	r5, #3
   1e900:	d10c      	bne.n	1e91c <flash_nrf_write+0x44>
	if (!len) {
   1e902:	b9a5      	cbnz	r5, 1e92e <flash_nrf_write+0x56>
		return 0;
   1e904:	2400      	movs	r4, #0
   1e906:	e007      	b.n	1e918 <flash_nrf_write+0x40>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e908:	462b      	mov	r3, r5
   1e90a:	4622      	mov	r2, r4
   1e90c:	2145      	movs	r1, #69	; 0x45
   1e90e:	4815      	ldr	r0, [pc, #84]	; (1e964 <flash_nrf_write+0x8c>)
   1e910:	f00a f8b8 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1e914:	f06f 0415 	mvn.w	r4, #21
}
   1e918:	4620      	mov	r0, r4
   1e91a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e91c:	462b      	mov	r3, r5
   1e91e:	4622      	mov	r2, r4
   1e920:	2145      	movs	r1, #69	; 0x45
   1e922:	4811      	ldr	r0, [pc, #68]	; (1e968 <flash_nrf_write+0x90>)
   1e924:	f00a f8ae 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1e928:	f06f 0415 	mvn.w	r4, #21
   1e92c:	e7f4      	b.n	1e918 <flash_nrf_write+0x40>
	return z_impl_k_sem_take(sem, timeout);
   1e92e:	f04f 32ff 	mov.w	r2, #4294967295
   1e932:	f04f 33ff 	mov.w	r3, #4294967295
   1e936:	480d      	ldr	r0, [pc, #52]	; (1e96c <flash_nrf_write+0x94>)
   1e938:	f003 ffee 	bl	22918 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e93c:	f010 f888 	bl	2ea50 <nrf_flash_sync_is_required>
   1e940:	b148      	cbz	r0, 1e956 <flash_nrf_write+0x7e>
		ret = write_synchronously(addr, data, len);
   1e942:	462a      	mov	r2, r5
   1e944:	4631      	mov	r1, r6
   1e946:	4620      	mov	r0, r4
   1e948:	f7ff fed4 	bl	1e6f4 <write_synchronously>
   1e94c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e94e:	4807      	ldr	r0, [pc, #28]	; (1e96c <flash_nrf_write+0x94>)
   1e950:	f003 ffa2 	bl	22898 <z_impl_k_sem_give>
	return ret;
   1e954:	e7e0      	b.n	1e918 <flash_nrf_write+0x40>
		ret = write(addr, data, len);
   1e956:	462a      	mov	r2, r5
   1e958:	4631      	mov	r1, r6
   1e95a:	4620      	mov	r0, r4
   1e95c:	f00f fa5a 	bl	2de14 <write>
   1e960:	4604      	mov	r4, r0
   1e962:	e7f4      	b.n	1e94e <flash_nrf_write+0x76>
   1e964:	00032908 	.word	0x00032908
   1e968:	00032950 	.word	0x00032950
   1e96c:	20002990 	.word	0x20002990

0001e970 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   1e970:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   1e972:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1e974:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   1e978:	d06f      	beq.n	1ea5a <baudrate_set+0xea>
   1e97a:	d83a      	bhi.n	1e9f2 <baudrate_set+0x82>
   1e97c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1e980:	d06e      	beq.n	1ea60 <baudrate_set+0xf0>
   1e982:	d90a      	bls.n	1e99a <baudrate_set+0x2a>
   1e984:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   1e988:	d075      	beq.n	1ea76 <baudrate_set+0x106>
   1e98a:	d924      	bls.n	1e9d6 <baudrate_set+0x66>
   1e98c:	f647 2312 	movw	r3, #31250	; 0x7a12
   1e990:	4299      	cmp	r1, r3
   1e992:	d12b      	bne.n	1e9ec <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e994:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e998:	e013      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1e99a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1e99e:	d061      	beq.n	1ea64 <baudrate_set+0xf4>
   1e9a0:	d907      	bls.n	1e9b2 <baudrate_set+0x42>
   1e9a2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   1e9a6:	d063      	beq.n	1ea70 <baudrate_set+0x100>
   1e9a8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1e9ac:	d110      	bne.n	1e9d0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e9ae:	4b3c      	ldr	r3, [pc, #240]	; (1eaa0 <baudrate_set+0x130>)
   1e9b0:	e007      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1e9b2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1e9b6:	d058      	beq.n	1ea6a <baudrate_set+0xfa>
   1e9b8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1e9bc:	d105      	bne.n	1e9ca <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1e9be:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e9c2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   1e9c6:	2000      	movs	r0, #0
   1e9c8:	4770      	bx	lr
	switch (baudrate) {
   1e9ca:	f06f 0015 	mvn.w	r0, #21
   1e9ce:	4770      	bx	lr
   1e9d0:	f06f 0015 	mvn.w	r0, #21
   1e9d4:	4770      	bx	lr
   1e9d6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1e9da:	d04e      	beq.n	1ea7a <baudrate_set+0x10a>
   1e9dc:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1e9e0:	d101      	bne.n	1e9e6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e9e2:	4b30      	ldr	r3, [pc, #192]	; (1eaa4 <baudrate_set+0x134>)
   1e9e4:	e7ed      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1e9e6:	f06f 0015 	mvn.w	r0, #21
   1e9ea:	4770      	bx	lr
   1e9ec:	f06f 0015 	mvn.w	r0, #21
   1e9f0:	4770      	bx	lr
   1e9f2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1e9f6:	d042      	beq.n	1ea7e <baudrate_set+0x10e>
   1e9f8:	d909      	bls.n	1ea0e <baudrate_set+0x9e>
   1e9fa:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1e9fe:	d046      	beq.n	1ea8e <baudrate_set+0x11e>
   1ea00:	d91f      	bls.n	1ea42 <baudrate_set+0xd2>
   1ea02:	4b29      	ldr	r3, [pc, #164]	; (1eaa8 <baudrate_set+0x138>)
   1ea04:	4299      	cmp	r1, r3
   1ea06:	d148      	bne.n	1ea9a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1ea08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ea0c:	e7d9      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1ea0e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1ea12:	d037      	beq.n	1ea84 <baudrate_set+0x114>
   1ea14:	d905      	bls.n	1ea22 <baudrate_set+0xb2>
   1ea16:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1ea1a:	d10f      	bne.n	1ea3c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1ea1c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1ea20:	e7cf      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1ea22:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1ea26:	4299      	cmp	r1, r3
   1ea28:	d02e      	beq.n	1ea88 <baudrate_set+0x118>
   1ea2a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1ea2e:	d102      	bne.n	1ea36 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1ea30:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1ea34:	e7c5      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1ea36:	f06f 0015 	mvn.w	r0, #21
   1ea3a:	4770      	bx	lr
   1ea3c:	f06f 0015 	mvn.w	r0, #21
   1ea40:	4770      	bx	lr
   1ea42:	4b1a      	ldr	r3, [pc, #104]	; (1eaac <baudrate_set+0x13c>)
   1ea44:	4299      	cmp	r1, r3
   1ea46:	d025      	beq.n	1ea94 <baudrate_set+0x124>
   1ea48:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1ea4c:	d102      	bne.n	1ea54 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1ea4e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1ea52:	e7b6      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1ea54:	f06f 0015 	mvn.w	r0, #21
   1ea58:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1ea5a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1ea5e:	e7b0      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1ea60:	4b13      	ldr	r3, [pc, #76]	; (1eab0 <baudrate_set+0x140>)
   1ea62:	e7ae      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1ea64:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1ea68:	e7ab      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1ea6a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1ea6e:	e7a8      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1ea70:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1ea74:	e7a5      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1ea76:	4b0f      	ldr	r3, [pc, #60]	; (1eab4 <baudrate_set+0x144>)
   1ea78:	e7a3      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1ea7a:	4b0f      	ldr	r3, [pc, #60]	; (1eab8 <baudrate_set+0x148>)
   1ea7c:	e7a1      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1ea7e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1ea82:	e79e      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1ea84:	4b0d      	ldr	r3, [pc, #52]	; (1eabc <baudrate_set+0x14c>)
   1ea86:	e79c      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1ea88:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1ea8c:	e799      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1ea8e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ea92:	e796      	b.n	1e9c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1ea94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ea98:	e793      	b.n	1e9c2 <baudrate_set+0x52>
	switch (baudrate) {
   1ea9a:	f06f 0015 	mvn.w	r0, #21
}
   1ea9e:	4770      	bx	lr
   1eaa0:	0013b000 	.word	0x0013b000
   1eaa4:	004ea000 	.word	0x004ea000
   1eaa8:	000f4240 	.word	0x000f4240
   1eaac:	0003d090 	.word	0x0003d090
   1eab0:	00275000 	.word	0x00275000
   1eab4:	0075c000 	.word	0x0075c000
   1eab8:	003af000 	.word	0x003af000
   1eabc:	013a9000 	.word	0x013a9000

0001eac0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1eac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eac4:	4605      	mov	r5, r0
   1eac6:	460f      	mov	r7, r1
	return dev->data;
   1eac8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1eacc:	f010 f88c 	bl	2ebe8 <k_is_in_isr>
   1ead0:	b920      	cbnz	r0, 1eadc <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   1ead2:	4b16      	ldr	r3, [pc, #88]	; (1eb2c <uarte_nrfx_poll_out+0x6c>)
   1ead4:	781b      	ldrb	r3, [r3, #0]
   1ead6:	b1ab      	cbz	r3, 1eb04 <uarte_nrfx_poll_out+0x44>
   1ead8:	2300      	movs	r3, #0
   1eada:	e000      	b.n	1eade <uarte_nrfx_poll_out+0x1e>
   1eadc:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1eade:	b19b      	cbz	r3, 1eb08 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   1eae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eae4:	f3ef 8411 	mrs	r4, BASEPRI
   1eae8:	f383 8812 	msr	BASEPRI_MAX, r3
   1eaec:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   1eaf0:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   1eaf2:	4628      	mov	r0, r5
   1eaf4:	f00f fab2 	bl	2e05c <is_tx_ready>
   1eaf8:	b950      	cbnz	r0, 1eb10 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   1eafa:	f384 8811 	msr	BASEPRI, r4
   1eafe:	f3bf 8f6f 	isb	sy
}
   1eb02:	e7ed      	b.n	1eae0 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1eb04:	2301      	movs	r3, #1
   1eb06:	e7ea      	b.n	1eade <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1eb08:	4628      	mov	r0, r5
   1eb0a:	f00f faf6 	bl	2e0fa <wait_tx_ready>
   1eb0e:	4606      	mov	r6, r0
	}

	data->char_out = c;
   1eb10:	4641      	mov	r1, r8
   1eb12:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   1eb16:	2201      	movs	r2, #1
   1eb18:	4628      	mov	r0, r5
   1eb1a:	f00f fab9 	bl	2e090 <tx_start>
	__asm__ volatile(
   1eb1e:	f386 8811 	msr	BASEPRI, r6
   1eb22:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1eb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb2a:	bf00      	nop
   1eb2c:	20003f79 	.word	0x20003f79

0001eb30 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1eb30:	b538      	push	{r3, r4, r5, lr}
   1eb32:	4604      	mov	r4, r0
   1eb34:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1eb36:	f101 0012 	add.w	r0, r1, #18
   1eb3a:	f002 f9f9 	bl	20f30 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1eb3e:	4b0e      	ldr	r3, [pc, #56]	; (1eb78 <endtx_stoptx_ppi_init+0x48>)
   1eb40:	4298      	cmp	r0, r3
   1eb42:	d111      	bne.n	1eb68 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1eb44:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1eb46:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1eb4a:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1eb4c:	4a0b      	ldr	r2, [pc, #44]	; (1eb7c <endtx_stoptx_ppi_init+0x4c>)
   1eb4e:	33a2      	adds	r3, #162	; 0xa2
   1eb50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1eb54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1eb58:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1eb5a:	7ca9      	ldrb	r1, [r5, #18]
   1eb5c:	2301      	movs	r3, #1
   1eb5e:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1eb60:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1eb64:	2000      	movs	r0, #0
}
   1eb66:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   1eb68:	2145      	movs	r1, #69	; 0x45
   1eb6a:	4805      	ldr	r0, [pc, #20]	; (1eb80 <endtx_stoptx_ppi_init+0x50>)
   1eb6c:	f009 ff8a 	bl	28a84 <z_log_minimal_printk>
		return -EIO;
   1eb70:	f06f 0004 	mvn.w	r0, #4
   1eb74:	e7f7      	b.n	1eb66 <endtx_stoptx_ppi_init+0x36>
   1eb76:	bf00      	nop
   1eb78:	0bad0000 	.word	0x0bad0000
   1eb7c:	4001f000 	.word	0x4001f000
   1eb80:	000329a0 	.word	0x000329a0

0001eb84 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1eb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb88:	4607      	mov	r7, r0
	return dev->config;
   1eb8a:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   1eb8c:	6825      	ldr	r5, [r4, #0]
	return dev->data;
   1eb8e:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1eb92:	2300      	movs	r3, #0
   1eb94:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1eb98:	f8c8 0000 	str.w	r0, [r8]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
   1eb9c:	68a6      	ldr	r6, [r4, #8]
    switch (port)
   1eb9e:	0973      	lsrs	r3, r6, #5
   1eba0:	d01e      	beq.n	1ebe0 <uarte_instance_init+0x5c>
   1eba2:	2b01      	cmp	r3, #1
   1eba4:	d11f      	bne.n	1ebe6 <uarte_instance_init+0x62>
            mask = P1_FEATURE_PINS_PRESENT;
   1eba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1ebaa:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1ebae:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ebb0:	f013 0f01 	tst.w	r3, #1
   1ebb4:	d019      	beq.n	1ebea <uarte_instance_init+0x66>
    *p_pin = pin_number & 0x1F;
   1ebb6:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ebba:	0976      	lsrs	r6, r6, #5
   1ebbc:	d023      	beq.n	1ec06 <uarte_instance_init+0x82>
   1ebbe:	2e01      	cmp	r6, #1
   1ebc0:	d024      	beq.n	1ec0c <uarte_instance_init+0x88>
            NRFX_ASSERT(0);
   1ebc2:	4ebc      	ldr	r6, [pc, #752]	; (1eeb4 <uarte_instance_init+0x330>)
   1ebc4:	f240 2219 	movw	r2, #537	; 0x219
   1ebc8:	4631      	mov	r1, r6
   1ebca:	48bb      	ldr	r0, [pc, #748]	; (1eeb8 <uarte_instance_init+0x334>)
   1ebcc:	f009 fbb9 	bl	28342 <printk>
   1ebd0:	f240 2119 	movw	r1, #537	; 0x219
   1ebd4:	4630      	mov	r0, r6
   1ebd6:	f009 ff4d 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1ebda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1ebde:	e016      	b.n	1ec0e <uarte_instance_init+0x8a>
            mask = P0_FEATURE_PINS_PRESENT;
   1ebe0:	f04f 33ff 	mov.w	r3, #4294967295
   1ebe4:	e7e1      	b.n	1ebaa <uarte_instance_init+0x26>
    switch (port)
   1ebe6:	2300      	movs	r3, #0
   1ebe8:	e7df      	b.n	1ebaa <uarte_instance_init+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ebea:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1eeb4 <uarte_instance_init+0x330>
   1ebee:	f44f 7205 	mov.w	r2, #532	; 0x214
   1ebf2:	4649      	mov	r1, r9
   1ebf4:	48b0      	ldr	r0, [pc, #704]	; (1eeb8 <uarte_instance_init+0x334>)
   1ebf6:	f009 fba4 	bl	28342 <printk>
   1ebfa:	f44f 7105 	mov.w	r1, #532	; 0x214
   1ebfe:	4648      	mov	r0, r9
   1ec00:	f009 ff38 	bl	28a74 <assert_post_action>
   1ec04:	e7d7      	b.n	1ebb6 <uarte_instance_init+0x32>
        case 0: return NRF_P0;
   1ec06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1ec0a:	e000      	b.n	1ec0e <uarte_instance_init+0x8a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec0c:	4aab      	ldr	r2, [pc, #684]	; (1eebc <uarte_instance_init+0x338>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ec0e:	2301      	movs	r3, #1
   1ec10:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
   1ec14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
   1ec18:	68a6      	ldr	r6, [r4, #8]
    switch (port)
   1ec1a:	0973      	lsrs	r3, r6, #5
   1ec1c:	d01e      	beq.n	1ec5c <uarte_instance_init+0xd8>
   1ec1e:	2b01      	cmp	r3, #1
   1ec20:	d11f      	bne.n	1ec62 <uarte_instance_init+0xde>
            mask = P1_FEATURE_PINS_PRESENT;
   1ec22:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1ec26:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1ec2a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ec2c:	f013 0f01 	tst.w	r3, #1
   1ec30:	d019      	beq.n	1ec66 <uarte_instance_init+0xe2>
    *p_pin = pin_number & 0x1F;
   1ec32:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec36:	0976      	lsrs	r6, r6, #5
   1ec38:	d023      	beq.n	1ec82 <uarte_instance_init+0xfe>
   1ec3a:	2e01      	cmp	r6, #1
   1ec3c:	d024      	beq.n	1ec88 <uarte_instance_init+0x104>
            NRFX_ASSERT(0);
   1ec3e:	4e9d      	ldr	r6, [pc, #628]	; (1eeb4 <uarte_instance_init+0x330>)
   1ec40:	f240 2219 	movw	r2, #537	; 0x219
   1ec44:	4631      	mov	r1, r6
   1ec46:	489c      	ldr	r0, [pc, #624]	; (1eeb8 <uarte_instance_init+0x334>)
   1ec48:	f009 fb7b 	bl	28342 <printk>
   1ec4c:	f240 2119 	movw	r1, #537	; 0x219
   1ec50:	4630      	mov	r0, r6
   1ec52:	f009 ff0f 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1ec56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ec5a:	e016      	b.n	1ec8a <uarte_instance_init+0x106>
            mask = P0_FEATURE_PINS_PRESENT;
   1ec5c:	f04f 33ff 	mov.w	r3, #4294967295
   1ec60:	e7e1      	b.n	1ec26 <uarte_instance_init+0xa2>
    switch (port)
   1ec62:	2300      	movs	r3, #0
   1ec64:	e7df      	b.n	1ec26 <uarte_instance_init+0xa2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ec66:	f8df 924c 	ldr.w	r9, [pc, #588]	; 1eeb4 <uarte_instance_init+0x330>
   1ec6a:	f44f 7205 	mov.w	r2, #532	; 0x214
   1ec6e:	4649      	mov	r1, r9
   1ec70:	4891      	ldr	r0, [pc, #580]	; (1eeb8 <uarte_instance_init+0x334>)
   1ec72:	f009 fb66 	bl	28342 <printk>
   1ec76:	f44f 7105 	mov.w	r1, #532	; 0x214
   1ec7a:	4648      	mov	r0, r9
   1ec7c:	f009 fefa 	bl	28a74 <assert_post_action>
   1ec80:	e7d7      	b.n	1ec32 <uarte_instance_init+0xae>
        case 0: return NRF_P0;
   1ec82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ec86:	e000      	b.n	1ec8a <uarte_instance_init+0x106>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec88:	4b8c      	ldr	r3, [pc, #560]	; (1eebc <uarte_instance_init+0x338>)
    reg->PIN_CNF[pin_number] = cnf;
   1ec8a:	f509 79e0 	add.w	r9, r9, #448	; 0x1c0
   1ec8e:	2203      	movs	r2, #3
   1ec90:	f843 2029 	str.w	r2, [r3, r9, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1ec94:	68e6      	ldr	r6, [r4, #12]
   1ec96:	f1b6 3fff 	cmp.w	r6, #4294967295
   1ec9a:	d152      	bne.n	1ed42 <uarte_instance_init+0x1be>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
   1ec9c:	68a2      	ldr	r2, [r4, #8]
   1ec9e:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
   1eca0:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1eca4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1eca8:	6926      	ldr	r6, [r4, #16]
   1ecaa:	f1b6 3fff 	cmp.w	r6, #4294967295
   1ecae:	f040 8089 	bne.w	1edc4 <uarte_instance_init+0x240>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1ecb2:	6966      	ldr	r6, [r4, #20]
   1ecb4:	f1b6 3fff 	cmp.w	r6, #4294967295
   1ecb8:	f040 80c5 	bne.w	1ee46 <uarte_instance_init+0x2c2>
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
   1ecbc:	6962      	ldr	r2, [r4, #20]
   1ecbe:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
   1ecc0:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1ecc4:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
   1ecc8:	6939      	ldr	r1, [r7, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1ecca:	3104      	adds	r1, #4
   1eccc:	4638      	mov	r0, r7
   1ecce:	f00f f958 	bl	2df82 <uarte_nrfx_configure>
	if (err) {
   1ecd2:	4606      	mov	r6, r0
   1ecd4:	bb90      	cbnz	r0, 1ed3c <uarte_instance_init+0x1b8>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1ecd6:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1ecd8:	f013 0f08 	tst.w	r3, #8
   1ecdc:	f040 8135 	bne.w	1ef4a <uarte_instance_init+0x3c6>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ece0:	2308      	movs	r3, #8
   1ece2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1ece6:	68e3      	ldr	r3, [r4, #12]
   1ece8:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ecec:	d00c      	beq.n	1ed08 <uarte_instance_init+0x184>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecee:	2300      	movs	r3, #0
   1ecf0:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1ecf4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1ecf8:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ecfc:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ed00:	2301      	movs	r3, #1
   1ed02:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ed06:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1ed08:	6863      	ldr	r3, [r4, #4]
   1ed0a:	f013 0f08 	tst.w	r3, #8
   1ed0e:	d103      	bne.n	1ed18 <uarte_instance_init+0x194>
    p_reg->INTENSET = mask;
   1ed10:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ed14:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ed18:	6863      	ldr	r3, [r4, #4]
   1ed1a:	f013 0f10 	tst.w	r3, #16
   1ed1e:	d003      	beq.n	1ed28 <uarte_instance_init+0x1a4>
   1ed20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ed24:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1ed28:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ed2c:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ed30:	2300      	movs	r3, #0
   1ed32:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ed36:	2301      	movs	r3, #1
   1ed38:	60ab      	str	r3, [r5, #8]
   1ed3a:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1ed3c:	4630      	mov	r0, r6
   1ed3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
   1ed42:	f894 9018 	ldrb.w	r9, [r4, #24]
    switch (port)
   1ed46:	0973      	lsrs	r3, r6, #5
   1ed48:	d01e      	beq.n	1ed88 <uarte_instance_init+0x204>
   1ed4a:	2b01      	cmp	r3, #1
   1ed4c:	d11f      	bne.n	1ed8e <uarte_instance_init+0x20a>
            mask = P1_FEATURE_PINS_PRESENT;
   1ed4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1ed52:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1ed56:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ed58:	f013 0f01 	tst.w	r3, #1
   1ed5c:	d019      	beq.n	1ed92 <uarte_instance_init+0x20e>
    *p_pin = pin_number & 0x1F;
   1ed5e:	f006 0a1f 	and.w	sl, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ed62:	0976      	lsrs	r6, r6, #5
   1ed64:	d023      	beq.n	1edae <uarte_instance_init+0x22a>
   1ed66:	2e01      	cmp	r6, #1
   1ed68:	d024      	beq.n	1edb4 <uarte_instance_init+0x230>
            NRFX_ASSERT(0);
   1ed6a:	4e52      	ldr	r6, [pc, #328]	; (1eeb4 <uarte_instance_init+0x330>)
   1ed6c:	f240 2219 	movw	r2, #537	; 0x219
   1ed70:	4631      	mov	r1, r6
   1ed72:	4851      	ldr	r0, [pc, #324]	; (1eeb8 <uarte_instance_init+0x334>)
   1ed74:	f009 fae5 	bl	28342 <printk>
   1ed78:	f240 2119 	movw	r1, #537	; 0x219
   1ed7c:	4630      	mov	r0, r6
   1ed7e:	f009 fe79 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1ed82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1ed86:	e016      	b.n	1edb6 <uarte_instance_init+0x232>
            mask = P0_FEATURE_PINS_PRESENT;
   1ed88:	f04f 33ff 	mov.w	r3, #4294967295
   1ed8c:	e7e1      	b.n	1ed52 <uarte_instance_init+0x1ce>
    switch (port)
   1ed8e:	2300      	movs	r3, #0
   1ed90:	e7df      	b.n	1ed52 <uarte_instance_init+0x1ce>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ed92:	f8df a120 	ldr.w	sl, [pc, #288]	; 1eeb4 <uarte_instance_init+0x330>
   1ed96:	f44f 7205 	mov.w	r2, #532	; 0x214
   1ed9a:	4651      	mov	r1, sl
   1ed9c:	4846      	ldr	r0, [pc, #280]	; (1eeb8 <uarte_instance_init+0x334>)
   1ed9e:	f009 fad0 	bl	28342 <printk>
   1eda2:	f44f 7105 	mov.w	r1, #532	; 0x214
   1eda6:	4650      	mov	r0, sl
   1eda8:	f009 fe64 	bl	28a74 <assert_post_action>
   1edac:	e7d7      	b.n	1ed5e <uarte_instance_init+0x1da>
        case 0: return NRF_P0;
   1edae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1edb2:	e000      	b.n	1edb6 <uarte_instance_init+0x232>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1edb4:	4a41      	ldr	r2, [pc, #260]	; (1eebc <uarte_instance_init+0x338>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1edb6:	ea4f 0389 	mov.w	r3, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1edba:	f50a 7ae0 	add.w	sl, sl, #448	; 0x1c0
   1edbe:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
}
   1edc2:	e76b      	b.n	1ec9c <uarte_instance_init+0x118>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
   1edc4:	f894 9019 	ldrb.w	r9, [r4, #25]
    switch (port)
   1edc8:	0973      	lsrs	r3, r6, #5
   1edca:	d01e      	beq.n	1ee0a <uarte_instance_init+0x286>
   1edcc:	2b01      	cmp	r3, #1
   1edce:	d11f      	bne.n	1ee10 <uarte_instance_init+0x28c>
            mask = P1_FEATURE_PINS_PRESENT;
   1edd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1edd4:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1edd8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1edda:	f013 0f01 	tst.w	r3, #1
   1edde:	d019      	beq.n	1ee14 <uarte_instance_init+0x290>
    *p_pin = pin_number & 0x1F;
   1ede0:	f006 0a1f 	and.w	sl, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ede4:	0976      	lsrs	r6, r6, #5
   1ede6:	d023      	beq.n	1ee30 <uarte_instance_init+0x2ac>
   1ede8:	2e01      	cmp	r6, #1
   1edea:	d024      	beq.n	1ee36 <uarte_instance_init+0x2b2>
            NRFX_ASSERT(0);
   1edec:	4e31      	ldr	r6, [pc, #196]	; (1eeb4 <uarte_instance_init+0x330>)
   1edee:	f240 2219 	movw	r2, #537	; 0x219
   1edf2:	4631      	mov	r1, r6
   1edf4:	4830      	ldr	r0, [pc, #192]	; (1eeb8 <uarte_instance_init+0x334>)
   1edf6:	f009 faa4 	bl	28342 <printk>
   1edfa:	f240 2119 	movw	r1, #537	; 0x219
   1edfe:	4630      	mov	r0, r6
   1ee00:	f009 fe38 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1ee04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1ee08:	e016      	b.n	1ee38 <uarte_instance_init+0x2b4>
            mask = P0_FEATURE_PINS_PRESENT;
   1ee0a:	f04f 33ff 	mov.w	r3, #4294967295
   1ee0e:	e7e1      	b.n	1edd4 <uarte_instance_init+0x250>
    switch (port)
   1ee10:	2300      	movs	r3, #0
   1ee12:	e7df      	b.n	1edd4 <uarte_instance_init+0x250>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ee14:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1eeb4 <uarte_instance_init+0x330>
   1ee18:	f44f 7205 	mov.w	r2, #532	; 0x214
   1ee1c:	4651      	mov	r1, sl
   1ee1e:	4826      	ldr	r0, [pc, #152]	; (1eeb8 <uarte_instance_init+0x334>)
   1ee20:	f009 fa8f 	bl	28342 <printk>
   1ee24:	f44f 7105 	mov.w	r1, #532	; 0x214
   1ee28:	4650      	mov	r0, sl
   1ee2a:	f009 fe23 	bl	28a74 <assert_post_action>
   1ee2e:	e7d7      	b.n	1ede0 <uarte_instance_init+0x25c>
        case 0: return NRF_P0;
   1ee30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1ee34:	e000      	b.n	1ee38 <uarte_instance_init+0x2b4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ee36:	4a21      	ldr	r2, [pc, #132]	; (1eebc <uarte_instance_init+0x338>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ee38:	ea4f 0389 	mov.w	r3, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1ee3c:	f50a 7ae0 	add.w	sl, sl, #448	; 0x1c0
   1ee40:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
}
   1ee44:	e735      	b.n	1ecb2 <uarte_instance_init+0x12e>
    switch (port)
   1ee46:	0973      	lsrs	r3, r6, #5
   1ee48:	d01e      	beq.n	1ee88 <uarte_instance_init+0x304>
   1ee4a:	2b01      	cmp	r3, #1
   1ee4c:	d11f      	bne.n	1ee8e <uarte_instance_init+0x30a>
            mask = P1_FEATURE_PINS_PRESENT;
   1ee4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1ee52:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1ee56:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ee58:	f013 0f01 	tst.w	r3, #1
   1ee5c:	d019      	beq.n	1ee92 <uarte_instance_init+0x30e>
    *p_pin = pin_number & 0x1F;
   1ee5e:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ee62:	0976      	lsrs	r6, r6, #5
   1ee64:	d023      	beq.n	1eeae <uarte_instance_init+0x32a>
   1ee66:	2e01      	cmp	r6, #1
   1ee68:	d02a      	beq.n	1eec0 <uarte_instance_init+0x33c>
            NRFX_ASSERT(0);
   1ee6a:	4e12      	ldr	r6, [pc, #72]	; (1eeb4 <uarte_instance_init+0x330>)
   1ee6c:	f240 2219 	movw	r2, #537	; 0x219
   1ee70:	4631      	mov	r1, r6
   1ee72:	4811      	ldr	r0, [pc, #68]	; (1eeb8 <uarte_instance_init+0x334>)
   1ee74:	f009 fa65 	bl	28342 <printk>
   1ee78:	f240 2119 	movw	r1, #537	; 0x219
   1ee7c:	4630      	mov	r0, r6
   1ee7e:	f009 fdf9 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1ee82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1ee86:	e01c      	b.n	1eec2 <uarte_instance_init+0x33e>
            mask = P0_FEATURE_PINS_PRESENT;
   1ee88:	f04f 33ff 	mov.w	r3, #4294967295
   1ee8c:	e7e1      	b.n	1ee52 <uarte_instance_init+0x2ce>
    switch (port)
   1ee8e:	2300      	movs	r3, #0
   1ee90:	e7df      	b.n	1ee52 <uarte_instance_init+0x2ce>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ee92:	f8df 9020 	ldr.w	r9, [pc, #32]	; 1eeb4 <uarte_instance_init+0x330>
   1ee96:	f44f 7205 	mov.w	r2, #532	; 0x214
   1ee9a:	4649      	mov	r1, r9
   1ee9c:	4806      	ldr	r0, [pc, #24]	; (1eeb8 <uarte_instance_init+0x334>)
   1ee9e:	f009 fa50 	bl	28342 <printk>
   1eea2:	f44f 7105 	mov.w	r1, #532	; 0x214
   1eea6:	4648      	mov	r0, r9
   1eea8:	f009 fde4 	bl	28a74 <assert_post_action>
   1eeac:	e7d7      	b.n	1ee5e <uarte_instance_init+0x2da>
        case 0: return NRF_P0;
   1eeae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1eeb2:	e006      	b.n	1eec2 <uarte_instance_init+0x33e>
   1eeb4:	000326d8 	.word	0x000326d8
   1eeb8:	0002f968 	.word	0x0002f968
   1eebc:	50000300 	.word	0x50000300
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1eec0:	4a26      	ldr	r2, [pc, #152]	; (1ef5c <uarte_instance_init+0x3d8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1eec2:	2301      	movs	r3, #1
   1eec4:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
   1eec8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		nrf_gpio_cfg_output(cfg->pselrts);
   1eecc:	6966      	ldr	r6, [r4, #20]
    switch (port)
   1eece:	0973      	lsrs	r3, r6, #5
   1eed0:	d01e      	beq.n	1ef10 <uarte_instance_init+0x38c>
   1eed2:	2b01      	cmp	r3, #1
   1eed4:	d11f      	bne.n	1ef16 <uarte_instance_init+0x392>
            mask = P1_FEATURE_PINS_PRESENT;
   1eed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1eeda:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1eede:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1eee0:	f013 0f01 	tst.w	r3, #1
   1eee4:	d019      	beq.n	1ef1a <uarte_instance_init+0x396>
    *p_pin = pin_number & 0x1F;
   1eee6:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1eeea:	0976      	lsrs	r6, r6, #5
   1eeec:	d023      	beq.n	1ef36 <uarte_instance_init+0x3b2>
   1eeee:	2e01      	cmp	r6, #1
   1eef0:	d024      	beq.n	1ef3c <uarte_instance_init+0x3b8>
            NRFX_ASSERT(0);
   1eef2:	4e1b      	ldr	r6, [pc, #108]	; (1ef60 <uarte_instance_init+0x3dc>)
   1eef4:	f240 2219 	movw	r2, #537	; 0x219
   1eef8:	4631      	mov	r1, r6
   1eefa:	481a      	ldr	r0, [pc, #104]	; (1ef64 <uarte_instance_init+0x3e0>)
   1eefc:	f009 fa21 	bl	28342 <printk>
   1ef00:	f240 2119 	movw	r1, #537	; 0x219
   1ef04:	4630      	mov	r0, r6
   1ef06:	f009 fdb5 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   1ef0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ef0e:	e016      	b.n	1ef3e <uarte_instance_init+0x3ba>
            mask = P0_FEATURE_PINS_PRESENT;
   1ef10:	f04f 33ff 	mov.w	r3, #4294967295
   1ef14:	e7e1      	b.n	1eeda <uarte_instance_init+0x356>
    switch (port)
   1ef16:	2300      	movs	r3, #0
   1ef18:	e7df      	b.n	1eeda <uarte_instance_init+0x356>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ef1a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1ef60 <uarte_instance_init+0x3dc>
   1ef1e:	f44f 7205 	mov.w	r2, #532	; 0x214
   1ef22:	4649      	mov	r1, r9
   1ef24:	480f      	ldr	r0, [pc, #60]	; (1ef64 <uarte_instance_init+0x3e0>)
   1ef26:	f009 fa0c 	bl	28342 <printk>
   1ef2a:	f44f 7105 	mov.w	r1, #532	; 0x214
   1ef2e:	4648      	mov	r0, r9
   1ef30:	f009 fda0 	bl	28a74 <assert_post_action>
   1ef34:	e7d7      	b.n	1eee6 <uarte_instance_init+0x362>
        case 0: return NRF_P0;
   1ef36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ef3a:	e000      	b.n	1ef3e <uarte_instance_init+0x3ba>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ef3c:	4b07      	ldr	r3, [pc, #28]	; (1ef5c <uarte_instance_init+0x3d8>)
    reg->PIN_CNF[pin_number] = cnf;
   1ef3e:	f509 79e0 	add.w	r9, r9, #448	; 0x1c0
   1ef42:	2203      	movs	r2, #3
   1ef44:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
}
   1ef48:	e6b8      	b.n	1ecbc <uarte_instance_init+0x138>
		err = endtx_stoptx_ppi_init(uarte, data);
   1ef4a:	4641      	mov	r1, r8
   1ef4c:	4628      	mov	r0, r5
   1ef4e:	f7ff fdef 	bl	1eb30 <endtx_stoptx_ppi_init>
		if (err < 0) {
   1ef52:	2800      	cmp	r0, #0
   1ef54:	f6bf aec4 	bge.w	1ece0 <uarte_instance_init+0x15c>
			return err;
   1ef58:	4606      	mov	r6, r0
   1ef5a:	e6ef      	b.n	1ed3c <uarte_instance_init+0x1b8>
   1ef5c:	50000300 	.word	0x50000300
   1ef60:	000326d8 	.word	0x000326d8
   1ef64:	0002f968 	.word	0x0002f968

0001ef68 <random_byte_get>:
	__asm__ volatile(
   1ef68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef6c:	f3ef 8211 	mrs	r2, BASEPRI
   1ef70:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef74:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ef78:	4b09      	ldr	r3, [pc, #36]	; (1efa0 <random_byte_get+0x38>)
   1ef7a:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1ef7c:	b16b      	cbz	r3, 1ef9a <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1ef7e:	4b09      	ldr	r3, [pc, #36]	; (1efa4 <random_byte_get+0x3c>)
   1ef80:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1ef84:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ef86:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1ef8a:	2100      	movs	r1, #0
   1ef8c:	6019      	str	r1, [r3, #0]
   1ef8e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1ef90:	f382 8811 	msr	BASEPRI, r2
   1ef94:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1ef98:	4770      	bx	lr
	int retval = -EAGAIN;
   1ef9a:	f06f 000a 	mvn.w	r0, #10
   1ef9e:	e7f7      	b.n	1ef90 <random_byte_get+0x28>
   1efa0:	4000d100 	.word	0x4000d100
   1efa4:	4000d000 	.word	0x4000d000

0001efa8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1efa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efac:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1efae:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1efb2:	78c5      	ldrb	r5, [r0, #3]
   1efb4:	462f      	mov	r7, r5
	__asm__ volatile(
   1efb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1efba:	f3ef 8811 	mrs	r8, BASEPRI
   1efbe:	f383 8812 	msr	BASEPRI_MAX, r3
   1efc2:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1efc6:	7800      	ldrb	r0, [r0, #0]
   1efc8:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1efca:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1efce:	ebac 0c00 	sub.w	ip, ip, r0
   1efd2:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   1efd6:	4562      	cmp	r2, ip
   1efd8:	d901      	bls.n	1efde <rng_pool_get+0x36>
		len = available;
   1efda:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1efde:	1883      	adds	r3, r0, r2
   1efe0:	402b      	ands	r3, r5
   1efe2:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   1efe4:	f388 8811 	msr	BASEPRI, r8
   1efe8:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1efec:	460b      	mov	r3, r1
}
   1efee:	e006      	b.n	1effe <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1eff0:	1932      	adds	r2, r6, r4
   1eff2:	7952      	ldrb	r2, [r2, #5]
   1eff4:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   1eff8:	3401      	adds	r4, #1
   1effa:	403c      	ands	r4, r7
	while (likely(len--)) {
   1effc:	462a      	mov	r2, r5
   1effe:	1e55      	subs	r5, r2, #1
   1f000:	b2ad      	uxth	r5, r5
   1f002:	2a00      	cmp	r2, #0
   1f004:	d1f4      	bne.n	1eff0 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1f006:	4570      	cmp	r0, lr
   1f008:	d10d      	bne.n	1f026 <rng_pool_get+0x7e>
	__asm__ volatile(
   1f00a:	f04f 0040 	mov.w	r0, #64	; 0x40
   1f00e:	f3ef 8211 	mrs	r2, BASEPRI
   1f012:	f380 8812 	msr	BASEPRI_MAX, r0
   1f016:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1f01a:	7830      	ldrb	r0, [r6, #0]
   1f01c:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1f01e:	f382 8811 	msr	BASEPRI, r2
   1f022:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1f026:	1a5b      	subs	r3, r3, r1
   1f028:	b298      	uxth	r0, r3
	available = available - len;
   1f02a:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   1f02e:	7933      	ldrb	r3, [r6, #4]
   1f030:	4563      	cmp	r3, ip
   1f032:	d302      	bcc.n	1f03a <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f034:	4b02      	ldr	r3, [pc, #8]	; (1f040 <rng_pool_get+0x98>)
   1f036:	2201      	movs	r2, #1
   1f038:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1f03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f03e:	bf00      	nop
   1f040:	4000d000 	.word	0x4000d000

0001f044 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1f044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f046:	460e      	mov	r6, r1
   1f048:	4614      	mov	r4, r2
   1f04a:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f04c:	6902      	ldr	r2, [r0, #16]
   1f04e:	4b2c      	ldr	r3, [pc, #176]	; (1f100 <entropy_nrf5_get_entropy_isr+0xbc>)
   1f050:	429a      	cmp	r2, r3
   1f052:	d00b      	beq.n	1f06c <entropy_nrf5_get_entropy_isr+0x28>
   1f054:	4f2b      	ldr	r7, [pc, #172]	; (1f104 <entropy_nrf5_get_entropy_isr+0xc0>)
   1f056:	f44f 7284 	mov.w	r2, #264	; 0x108
   1f05a:	4639      	mov	r1, r7
   1f05c:	482a      	ldr	r0, [pc, #168]	; (1f108 <entropy_nrf5_get_entropy_isr+0xc4>)
   1f05e:	f009 f970 	bl	28342 <printk>
   1f062:	f44f 7184 	mov.w	r1, #264	; 0x108
   1f066:	4638      	mov	r0, r7
   1f068:	f009 fd04 	bl	28a74 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f06c:	f015 0f01 	tst.w	r5, #1
   1f070:	d105      	bne.n	1f07e <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1f072:	4622      	mov	r2, r4
   1f074:	4631      	mov	r1, r6
   1f076:	4825      	ldr	r0, [pc, #148]	; (1f10c <entropy_nrf5_get_entropy_isr+0xc8>)
   1f078:	f7ff ff96 	bl	1efa8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1f07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1f07e:	b90c      	cbnz	r4, 1f084 <entropy_nrf5_get_entropy_isr+0x40>
	return cnt;
   1f080:	4620      	mov	r0, r4
   1f082:	e7fb      	b.n	1f07c <entropy_nrf5_get_entropy_isr+0x38>
	__asm__ volatile(
   1f084:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f088:	f3ef 8511 	mrs	r5, BASEPRI
   1f08c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f090:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1f094:	200d      	movs	r0, #13
   1f096:	f7f4 f8e9 	bl	1326c <arch_irq_is_enabled>
   1f09a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1f09c:	200d      	movs	r0, #13
   1f09e:	f7f4 f8d1 	bl	13244 <arch_irq_disable>
	__asm__ volatile(
   1f0a2:	f385 8811 	msr	BASEPRI, r5
   1f0a6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f0aa:	4b19      	ldr	r3, [pc, #100]	; (1f110 <entropy_nrf5_get_entropy_isr+0xcc>)
   1f0ac:	2200      	movs	r2, #0
   1f0ae:	601a      	str	r2, [r3, #0]
   1f0b0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f0b2:	4b18      	ldr	r3, [pc, #96]	; (1f114 <entropy_nrf5_get_entropy_isr+0xd0>)
   1f0b4:	2201      	movs	r2, #1
   1f0b6:	601a      	str	r2, [r3, #0]
   1f0b8:	4b17      	ldr	r3, [pc, #92]	; (1f118 <entropy_nrf5_get_entropy_isr+0xd4>)
   1f0ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1f0be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1f0c2:	4625      	mov	r5, r4
   1f0c4:	e004      	b.n	1f0d0 <entropy_nrf5_get_entropy_isr+0x8c>
   1f0c6:	f3bf 8f4f 	dsb	sy
				__WFE();
   1f0ca:	bf20      	wfe
				__SEV();
   1f0cc:	bf40      	sev
				__WFE();
   1f0ce:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f0d0:	4b0f      	ldr	r3, [pc, #60]	; (1f110 <entropy_nrf5_get_entropy_isr+0xcc>)
   1f0d2:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1f0d4:	2b00      	cmp	r3, #0
   1f0d6:	d0f6      	beq.n	1f0c6 <entropy_nrf5_get_entropy_isr+0x82>
			byte = random_byte_get();
   1f0d8:	f7ff ff46 	bl	1ef68 <random_byte_get>
   1f0dc:	4b0e      	ldr	r3, [pc, #56]	; (1f118 <entropy_nrf5_get_entropy_isr+0xd4>)
   1f0de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1f0e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1f0e6:	2800      	cmp	r0, #0
   1f0e8:	db02      	blt.n	1f0f0 <entropy_nrf5_get_entropy_isr+0xac>
			buf[--len] = byte;
   1f0ea:	3d01      	subs	r5, #1
   1f0ec:	b2ad      	uxth	r5, r5
   1f0ee:	5570      	strb	r0, [r6, r5]
		} while (len);
   1f0f0:	2d00      	cmp	r5, #0
   1f0f2:	d1ed      	bne.n	1f0d0 <entropy_nrf5_get_entropy_isr+0x8c>
		if (irq_enabled) {
   1f0f4:	2f00      	cmp	r7, #0
   1f0f6:	d0c3      	beq.n	1f080 <entropy_nrf5_get_entropy_isr+0x3c>
			irq_enable(IRQN);
   1f0f8:	200d      	movs	r0, #13
   1f0fa:	f7f4 f893 	bl	13224 <arch_irq_enable>
   1f0fe:	e7bf      	b.n	1f080 <entropy_nrf5_get_entropy_isr+0x3c>
   1f100:	200029a8 	.word	0x200029a8
   1f104:	00032a30 	.word	0x00032a30
   1f108:	0002f968 	.word	0x0002f968
   1f10c:	200029d8 	.word	0x200029d8
   1f110:	4000d100 	.word	0x4000d100
   1f114:	4000d000 	.word	0x4000d000
   1f118:	e000e100 	.word	0xe000e100

0001f11c <isr>:
{
   1f11c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1f11e:	f7ff ff23 	bl	1ef68 <random_byte_get>
	if (byte < 0) {
   1f122:	2800      	cmp	r0, #0
   1f124:	db06      	blt.n	1f134 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1f126:	b2c4      	uxtb	r4, r0
   1f128:	4621      	mov	r1, r4
   1f12a:	480a      	ldr	r0, [pc, #40]	; (1f154 <isr+0x38>)
   1f12c:	f00f f82a 	bl	2e184 <rng_pool_put>
	if (ret < 0) {
   1f130:	2800      	cmp	r0, #0
   1f132:	db00      	blt.n	1f136 <isr+0x1a>
}
   1f134:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1f136:	4621      	mov	r1, r4
   1f138:	4807      	ldr	r0, [pc, #28]	; (1f158 <isr+0x3c>)
   1f13a:	f00f f823 	bl	2e184 <rng_pool_put>
		if (ret < 0) {
   1f13e:	2800      	cmp	r0, #0
   1f140:	db03      	blt.n	1f14a <isr+0x2e>
   1f142:	4806      	ldr	r0, [pc, #24]	; (1f15c <isr+0x40>)
   1f144:	f003 fba8 	bl	22898 <z_impl_k_sem_give>
}
   1f148:	e7f4      	b.n	1f134 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f14a:	4b05      	ldr	r3, [pc, #20]	; (1f160 <isr+0x44>)
   1f14c:	2201      	movs	r2, #1
   1f14e:	601a      	str	r2, [r3, #0]
}
   1f150:	e7f7      	b.n	1f142 <isr+0x26>
   1f152:	bf00      	nop
   1f154:	200029d8 	.word	0x200029d8
   1f158:	200029ed 	.word	0x200029ed
   1f15c:	200029c0 	.word	0x200029c0
   1f160:	4000d004 	.word	0x4000d004

0001f164 <entropy_nrf5_get_entropy>:
{
   1f164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f166:	460f      	mov	r7, r1
   1f168:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f16a:	6902      	ldr	r2, [r0, #16]
   1f16c:	4b18      	ldr	r3, [pc, #96]	; (1f1d0 <entropy_nrf5_get_entropy+0x6c>)
   1f16e:	429a      	cmp	r2, r3
   1f170:	d00d      	beq.n	1f18e <entropy_nrf5_get_entropy+0x2a>
   1f172:	4d18      	ldr	r5, [pc, #96]	; (1f1d4 <entropy_nrf5_get_entropy+0x70>)
   1f174:	22ea      	movs	r2, #234	; 0xea
   1f176:	4629      	mov	r1, r5
   1f178:	4817      	ldr	r0, [pc, #92]	; (1f1d8 <entropy_nrf5_get_entropy+0x74>)
   1f17a:	f009 f8e2 	bl	28342 <printk>
   1f17e:	21ea      	movs	r1, #234	; 0xea
   1f180:	4628      	mov	r0, r5
   1f182:	f009 fc77 	bl	28a74 <assert_post_action>
   1f186:	e002      	b.n	1f18e <entropy_nrf5_get_entropy+0x2a>
		len -= bytes;
   1f188:	1b64      	subs	r4, r4, r5
   1f18a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1f18c:	442f      	add	r7, r5
	while (len) {
   1f18e:	b1e4      	cbz	r4, 1f1ca <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1f190:	4e0f      	ldr	r6, [pc, #60]	; (1f1d0 <entropy_nrf5_get_entropy+0x6c>)
   1f192:	f04f 32ff 	mov.w	r2, #4294967295
   1f196:	f04f 33ff 	mov.w	r3, #4294967295
   1f19a:	4630      	mov	r0, r6
   1f19c:	f003 fbbc 	bl	22918 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f1a0:	4622      	mov	r2, r4
   1f1a2:	4639      	mov	r1, r7
   1f1a4:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1f1a8:	f7ff fefe 	bl	1efa8 <rng_pool_get>
   1f1ac:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1f1ae:	4630      	mov	r0, r6
   1f1b0:	f003 fb72 	bl	22898 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1f1b4:	2d00      	cmp	r5, #0
   1f1b6:	d1e7      	bne.n	1f188 <entropy_nrf5_get_entropy+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1f1b8:	f04f 32ff 	mov.w	r2, #4294967295
   1f1bc:	f04f 33ff 	mov.w	r3, #4294967295
   1f1c0:	f106 0018 	add.w	r0, r6, #24
   1f1c4:	f003 fba8 	bl	22918 <z_impl_k_sem_take>
			continue;
   1f1c8:	e7e1      	b.n	1f18e <entropy_nrf5_get_entropy+0x2a>
}
   1f1ca:	2000      	movs	r0, #0
   1f1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f1ce:	bf00      	nop
   1f1d0:	200029a8 	.word	0x200029a8
   1f1d4:	00032a30 	.word	0x00032a30
   1f1d8:	0002f968 	.word	0x0002f968

0001f1dc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1f1dc:	b510      	push	{r4, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f1de:	6902      	ldr	r2, [r0, #16]
   1f1e0:	4b1f      	ldr	r3, [pc, #124]	; (1f260 <entropy_nrf5_init+0x84>)
   1f1e2:	429a      	cmp	r2, r3
   1f1e4:	d00b      	beq.n	1f1fe <entropy_nrf5_init+0x22>
   1f1e6:	4c1f      	ldr	r4, [pc, #124]	; (1f264 <entropy_nrf5_init+0x88>)
   1f1e8:	f240 1257 	movw	r2, #343	; 0x157
   1f1ec:	4621      	mov	r1, r4
   1f1ee:	481e      	ldr	r0, [pc, #120]	; (1f268 <entropy_nrf5_init+0x8c>)
   1f1f0:	f009 f8a7 	bl	28342 <printk>
   1f1f4:	f240 1157 	movw	r1, #343	; 0x157
   1f1f8:	4620      	mov	r0, r4
   1f1fa:	f009 fc3b 	bl	28a74 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f1fe:	4c18      	ldr	r4, [pc, #96]	; (1f260 <entropy_nrf5_init+0x84>)
   1f200:	2201      	movs	r2, #1
   1f202:	4611      	mov	r1, r2
   1f204:	4620      	mov	r0, r4
   1f206:	f00f fd64 	bl	2ecd2 <z_impl_k_sem_init>
   1f20a:	2201      	movs	r2, #1
   1f20c:	2100      	movs	r1, #0
   1f20e:	f104 0018 	add.w	r0, r4, #24
   1f212:	f00f fd5e 	bl	2ecd2 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1f216:	2204      	movs	r2, #4
   1f218:	2108      	movs	r1, #8
   1f21a:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1f21e:	f00e ffc5 	bl	2e1ac <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1f222:	220c      	movs	r2, #12
   1f224:	2110      	movs	r1, #16
   1f226:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1f22a:	f00e ffbf 	bl	2e1ac <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1f22e:	4b0f      	ldr	r3, [pc, #60]	; (1f26c <entropy_nrf5_init+0x90>)
   1f230:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1f234:	f022 0201 	bic.w	r2, r2, #1
   1f238:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f23c:	4a0c      	ldr	r2, [pc, #48]	; (1f270 <entropy_nrf5_init+0x94>)
   1f23e:	2400      	movs	r4, #0
   1f240:	6014      	str	r4, [r2, #0]
   1f242:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1f244:	2101      	movs	r1, #1
   1f246:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f24a:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1f24c:	4622      	mov	r2, r4
   1f24e:	200d      	movs	r0, #13
   1f250:	f7f4 f81a 	bl	13288 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1f254:	200d      	movs	r0, #13
   1f256:	f7f3 ffe5 	bl	13224 <arch_irq_enable>

	return 0;
}
   1f25a:	4620      	mov	r0, r4
   1f25c:	bd10      	pop	{r4, pc}
   1f25e:	bf00      	nop
   1f260:	200029a8 	.word	0x200029a8
   1f264:	00032a30 	.word	0x00032a30
   1f268:	0002f968 	.word	0x0002f968
   1f26c:	4000d000 	.word	0x4000d000
   1f270:	4000d100 	.word	0x4000d100

0001f274 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1f274:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f276:	b083      	sub	sp, #12
   1f278:	460f      	mov	r7, r1
   1f27a:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   1f27c:	b130      	cbz	r0, 1f28c <entropy_cc3xx_rng_get_entropy+0x18>
	__ASSERT_NO_MSG(buffer != NULL);
   1f27e:	b187      	cbz	r7, 1f2a2 <entropy_cc3xx_rng_get_entropy+0x2e>
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
			chunk_size = length - offset;
   1f280:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1f284:	2400      	movs	r4, #0
   1f286:	f06f 0015 	mvn.w	r0, #21
   1f28a:	e020      	b.n	1f2ce <entropy_cc3xx_rng_get_entropy+0x5a>
	__ASSERT_NO_MSG(dev != NULL);
   1f28c:	4c16      	ldr	r4, [pc, #88]	; (1f2e8 <entropy_cc3xx_rng_get_entropy+0x74>)
   1f28e:	2224      	movs	r2, #36	; 0x24
   1f290:	4621      	mov	r1, r4
   1f292:	4816      	ldr	r0, [pc, #88]	; (1f2ec <entropy_cc3xx_rng_get_entropy+0x78>)
   1f294:	f009 f855 	bl	28342 <printk>
   1f298:	2124      	movs	r1, #36	; 0x24
   1f29a:	4620      	mov	r0, r4
   1f29c:	f009 fbea 	bl	28a74 <assert_post_action>
   1f2a0:	e7ed      	b.n	1f27e <entropy_cc3xx_rng_get_entropy+0xa>
	__ASSERT_NO_MSG(buffer != NULL);
   1f2a2:	4c11      	ldr	r4, [pc, #68]	; (1f2e8 <entropy_cc3xx_rng_get_entropy+0x74>)
   1f2a4:	2225      	movs	r2, #37	; 0x25
   1f2a6:	4621      	mov	r1, r4
   1f2a8:	4810      	ldr	r0, [pc, #64]	; (1f2ec <entropy_cc3xx_rng_get_entropy+0x78>)
   1f2aa:	f009 f84a 	bl	28342 <printk>
   1f2ae:	2125      	movs	r1, #37	; 0x25
   1f2b0:	4620      	mov	r0, r4
   1f2b2:	f009 fbdf 	bl	28a74 <assert_post_action>
   1f2b6:	e7e3      	b.n	1f280 <entropy_cc3xx_rng_get_entropy+0xc>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1f2b8:	ab01      	add	r3, sp, #4
   1f2ba:	462a      	mov	r2, r5
   1f2bc:	1939      	adds	r1, r7, r4
   1f2be:	2000      	movs	r0, #0
   1f2c0:	f006 fbee 	bl	25aa0 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   1f2c4:	9b01      	ldr	r3, [sp, #4]
   1f2c6:	42ab      	cmp	r3, r5
   1f2c8:	d109      	bne.n	1f2de <entropy_cc3xx_rng_get_entropy+0x6a>
			return -EINVAL;
		}

		if (res != 0) {
   1f2ca:	b950      	cbnz	r0, 1f2e2 <entropy_cc3xx_rng_get_entropy+0x6e>
			break;
		}

		offset += chunk_size;
   1f2cc:	442c      	add	r4, r5
	while (offset < length) {
   1f2ce:	42a6      	cmp	r6, r4
   1f2d0:	d907      	bls.n	1f2e2 <entropy_cc3xx_rng_get_entropy+0x6e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1f2d2:	1b33      	subs	r3, r6, r4
   1f2d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1f2d8:	d2ee      	bcs.n	1f2b8 <entropy_cc3xx_rng_get_entropy+0x44>
			chunk_size = length - offset;
   1f2da:	461d      	mov	r5, r3
   1f2dc:	e7ec      	b.n	1f2b8 <entropy_cc3xx_rng_get_entropy+0x44>
			return -EINVAL;
   1f2de:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   1f2e2:	b003      	add	sp, #12
   1f2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f2e6:	bf00      	nop
   1f2e8:	00032a70 	.word	0x00032a70
   1f2ec:	0002f968 	.word	0x0002f968

0001f2f0 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   1f2f0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1f2f2:	4c05      	ldr	r4, [pc, #20]	; (1f308 <sys_clock_isr+0x18>)
   1f2f4:	2217      	movs	r2, #23
   1f2f6:	4621      	mov	r1, r4
   1f2f8:	4804      	ldr	r0, [pc, #16]	; (1f30c <sys_clock_isr+0x1c>)
   1f2fa:	f009 f822 	bl	28342 <printk>
   1f2fe:	2117      	movs	r1, #23
   1f300:	4620      	mov	r0, r4
   1f302:	f009 fbb7 	bl	28a74 <assert_post_action>
}
   1f306:	bd10      	pop	{r4, pc}
   1f308:	00032ab4 	.word	0x00032ab4
   1f30c:	0002f968 	.word	0x0002f968

0001f310 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f310:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1f314:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1f318:	4b01      	ldr	r3, [pc, #4]	; (1f320 <set_comparator+0x10>)
   1f31a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1f31e:	4770      	bx	lr
   1f320:	40011000 	.word	0x40011000

0001f324 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1f324:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1f328:	4b01      	ldr	r3, [pc, #4]	; (1f330 <get_comparator+0xc>)
   1f32a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1f32e:	4770      	bx	lr
   1f330:	40011000 	.word	0x40011000

0001f334 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f338:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1f33a:	4a02      	ldr	r2, [pc, #8]	; (1f344 <event_enable+0x10>)
   1f33c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1f340:	4770      	bx	lr
   1f342:	bf00      	nop
   1f344:	40011000 	.word	0x40011000

0001f348 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f34c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1f34e:	4a02      	ldr	r2, [pc, #8]	; (1f358 <event_disable+0x10>)
   1f350:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1f354:	4770      	bx	lr
   1f356:	bf00      	nop
   1f358:	40011000 	.word	0x40011000

0001f35c <counter>:
     return p_reg->COUNTER;
   1f35c:	4b01      	ldr	r3, [pc, #4]	; (1f364 <counter+0x8>)
   1f35e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1f362:	4770      	bx	lr
   1f364:	40011000 	.word	0x40011000

0001f368 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   1f368:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1f36a:	2301      	movs	r3, #1
   1f36c:	4083      	lsls	r3, r0
   1f36e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f370:	4a10      	ldr	r2, [pc, #64]	; (1f3b4 <compare_int_lock+0x4c>)
   1f372:	f3bf 8f5b 	dmb	ish
   1f376:	e852 1f00 	ldrex	r1, [r2]
   1f37a:	ea01 0c04 	and.w	ip, r1, r4
   1f37e:	e842 ce00 	strex	lr, ip, [r2]
   1f382:	f1be 0f00 	cmp.w	lr, #0
   1f386:	d1f6      	bne.n	1f376 <compare_int_lock+0xe>
   1f388:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f38c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f390:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1f394:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f398:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1f39c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1f3a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f3a4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1f3a8:	420b      	tst	r3, r1
}
   1f3aa:	bf14      	ite	ne
   1f3ac:	2001      	movne	r0, #1
   1f3ae:	2000      	moveq	r0, #0
   1f3b0:	bd10      	pop	{r4, pc}
   1f3b2:	bf00      	nop
   1f3b4:	20002a00 	.word	0x20002a00

0001f3b8 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   1f3b8:	b570      	push	{r4, r5, r6, lr}
   1f3ba:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   1f3bc:	f00e ff1e 	bl	2e1fc <full_int_lock>
   1f3c0:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1f3c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f3c6:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   1f3c8:	4a17      	ldr	r2, [pc, #92]	; (1f428 <channel_processing_check_and_clear+0x70>)
   1f3ca:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1f3ce:	4213      	tst	r3, r2
   1f3d0:	d105      	bne.n	1f3de <channel_processing_check_and_clear+0x26>
	bool result = false;
   1f3d2:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1f3d4:	4628      	mov	r0, r5
   1f3d6:	f00e ff15 	bl	2e204 <full_int_unlock>

	return result;
}
   1f3da:	4630      	mov	r0, r6
   1f3dc:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f3de:	2301      	movs	r3, #1
   1f3e0:	40a3      	lsls	r3, r4
   1f3e2:	43db      	mvns	r3, r3
   1f3e4:	4a11      	ldr	r2, [pc, #68]	; (1f42c <channel_processing_check_and_clear+0x74>)
   1f3e6:	f3bf 8f5b 	dmb	ish
   1f3ea:	e852 1f00 	ldrex	r1, [r2]
   1f3ee:	ea01 0003 	and.w	r0, r1, r3
   1f3f2:	e842 0600 	strex	r6, r0, [r2]
   1f3f6:	2e00      	cmp	r6, #0
   1f3f8:	d1f7      	bne.n	1f3ea <channel_processing_check_and_clear+0x32>
   1f3fa:	f3bf 8f5b 	dmb	ish
   1f3fe:	b959      	cbnz	r1, 1f418 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f400:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1f404:	009b      	lsls	r3, r3, #2
   1f406:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f40c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1f410:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f412:	b113      	cbz	r3, 1f41a <channel_processing_check_and_clear+0x62>
   1f414:	2301      	movs	r3, #1
   1f416:	e000      	b.n	1f41a <channel_processing_check_and_clear+0x62>
   1f418:	2301      	movs	r3, #1
		if (result) {
   1f41a:	461e      	mov	r6, r3
   1f41c:	2b00      	cmp	r3, #0
   1f41e:	d0d9      	beq.n	1f3d4 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   1f420:	4620      	mov	r0, r4
   1f422:	f00e fedc 	bl	2e1de <event_clear>
   1f426:	e7d5      	b.n	1f3d4 <channel_processing_check_and_clear+0x1c>
   1f428:	40011000 	.word	0x40011000
   1f42c:	200029fc 	.word	0x200029fc

0001f430 <compare_int_unlock>:
	if (key) {
   1f430:	b901      	cbnz	r1, 1f434 <compare_int_unlock+0x4>
}
   1f432:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1f434:	2301      	movs	r3, #1
   1f436:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f438:	4a11      	ldr	r2, [pc, #68]	; (1f480 <compare_int_unlock+0x50>)
   1f43a:	f3bf 8f5b 	dmb	ish
   1f43e:	e852 1f00 	ldrex	r1, [r2]
   1f442:	4319      	orrs	r1, r3
   1f444:	e842 1c00 	strex	ip, r1, [r2]
   1f448:	f1bc 0f00 	cmp.w	ip, #0
   1f44c:	d1f7      	bne.n	1f43e <compare_int_unlock+0xe>
   1f44e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f456:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1f458:	4a0a      	ldr	r2, [pc, #40]	; (1f484 <compare_int_unlock+0x54>)
   1f45a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f45e:	f3bf 8f5b 	dmb	ish
   1f462:	4b09      	ldr	r3, [pc, #36]	; (1f488 <compare_int_unlock+0x58>)
   1f464:	681b      	ldr	r3, [r3, #0]
   1f466:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1f46a:	fa23 f000 	lsr.w	r0, r3, r0
   1f46e:	f010 0f01 	tst.w	r0, #1
   1f472:	d0de      	beq.n	1f432 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f474:	4b05      	ldr	r3, [pc, #20]	; (1f48c <compare_int_unlock+0x5c>)
   1f476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1f47a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1f47e:	e7d8      	b.n	1f432 <compare_int_unlock+0x2>
   1f480:	20002a00 	.word	0x20002a00
   1f484:	40011000 	.word	0x40011000
   1f488:	200029fc 	.word	0x200029fc
   1f48c:	e000e100 	.word	0xe000e100

0001f490 <sys_clock_timeout_handler>:
{
   1f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f492:	4607      	mov	r7, r0
   1f494:	4614      	mov	r4, r2
   1f496:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1f498:	4610      	mov	r0, r2
   1f49a:	4619      	mov	r1, r3
   1f49c:	f00e feab 	bl	2e1f6 <absolute_time_to_cc>
   1f4a0:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1f4a2:	4b15      	ldr	r3, [pc, #84]	; (1f4f8 <sys_clock_timeout_handler+0x68>)
   1f4a4:	681a      	ldr	r2, [r3, #0]
   1f4a6:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   1f4a8:	601c      	str	r4, [r3, #0]
   1f4aa:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1f4ac:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1f4b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1f4b4:	d308      	bcc.n	1f4c8 <sys_clock_timeout_handler+0x38>
	return false;
   1f4b6:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1f4b8:	f005 fb7e 	bl	24bb8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1f4bc:	4638      	mov	r0, r7
   1f4be:	f7ff ff31 	bl	1f324 <get_comparator>
   1f4c2:	42a8      	cmp	r0, r5
   1f4c4:	d00c      	beq.n	1f4e0 <sys_clock_timeout_handler+0x50>
}
   1f4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1f4c8:	4b0c      	ldr	r3, [pc, #48]	; (1f4fc <sys_clock_timeout_handler+0x6c>)
   1f4ca:	6819      	ldr	r1, [r3, #0]
   1f4cc:	0a0b      	lsrs	r3, r1, #8
   1f4ce:	060a      	lsls	r2, r1, #24
   1f4d0:	1952      	adds	r2, r2, r5
   1f4d2:	f143 0300 	adc.w	r3, r3, #0
   1f4d6:	490a      	ldr	r1, [pc, #40]	; (1f500 <sys_clock_timeout_handler+0x70>)
   1f4d8:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1f4dc:	2401      	movs	r4, #1
   1f4de:	e7eb      	b.n	1f4b8 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1f4e0:	b11c      	cbz	r4, 1f4ea <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1f4e2:	4638      	mov	r0, r7
   1f4e4:	f7ff ff26 	bl	1f334 <event_enable>
}
   1f4e8:	e7ed      	b.n	1f4c6 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1f4ea:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1f4ee:	4638      	mov	r0, r7
   1f4f0:	f7ff ff0e 	bl	1f310 <set_comparator>
   1f4f4:	e7f5      	b.n	1f4e2 <sys_clock_timeout_handler+0x52>
   1f4f6:	bf00      	nop
   1f4f8:	20001ca8 	.word	0x20001ca8
   1f4fc:	20002a04 	.word	0x20002a04
   1f500:	20001c90 	.word	0x20001c90

0001f504 <z_nrf_rtc_timer_read>:
{
   1f504:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1f506:	4b0d      	ldr	r3, [pc, #52]	; (1f53c <z_nrf_rtc_timer_read+0x38>)
   1f508:	681b      	ldr	r3, [r3, #0]
   1f50a:	0a1d      	lsrs	r5, r3, #8
   1f50c:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1f50e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1f512:	f7ff ff23 	bl	1f35c <counter>
   1f516:	4603      	mov	r3, r0
	val += cntr;
   1f518:	1820      	adds	r0, r4, r0
   1f51a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1f51e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1f522:	d20a      	bcs.n	1f53a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1f524:	4b06      	ldr	r3, [pc, #24]	; (1f540 <z_nrf_rtc_timer_read+0x3c>)
   1f526:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f52a:	4299      	cmp	r1, r3
   1f52c:	bf08      	it	eq
   1f52e:	4290      	cmpeq	r0, r2
   1f530:	d203      	bcs.n	1f53a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1f532:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1f536:	f141 0100 	adc.w	r1, r1, #0
}
   1f53a:	bd38      	pop	{r3, r4, r5, pc}
   1f53c:	20002a04 	.word	0x20002a04
   1f540:	20001c90 	.word	0x20001c90

0001f544 <compare_set_nolocks>:
{
   1f544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f548:	4606      	mov	r6, r0
   1f54a:	4614      	mov	r4, r2
   1f54c:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1f54e:	4610      	mov	r0, r2
   1f550:	4619      	mov	r1, r3
   1f552:	f00e fe50 	bl	2e1f6 <absolute_time_to_cc>
   1f556:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1f558:	f7ff ffd4 	bl	1f504 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1f55c:	42a9      	cmp	r1, r5
   1f55e:	bf08      	it	eq
   1f560:	42a0      	cmpeq	r0, r4
   1f562:	d21e      	bcs.n	1f5a2 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1f564:	ebb4 0800 	subs.w	r8, r4, r0
   1f568:	eb65 0901 	sbc.w	r9, r5, r1
   1f56c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1f570:	2300      	movs	r3, #0
   1f572:	454b      	cmp	r3, r9
   1f574:	bf08      	it	eq
   1f576:	4542      	cmpeq	r2, r8
   1f578:	d32e      	bcc.n	1f5d8 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   1f57a:	4b19      	ldr	r3, [pc, #100]	; (1f5e0 <compare_set_nolocks+0x9c>)
   1f57c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1f580:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1f584:	42ab      	cmp	r3, r5
   1f586:	bf08      	it	eq
   1f588:	42a2      	cmpeq	r2, r4
   1f58a:	d018      	beq.n	1f5be <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1f58c:	4639      	mov	r1, r7
   1f58e:	4630      	mov	r0, r6
   1f590:	f00e fe3b 	bl	2e20a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1f594:	4639      	mov	r1, r7
   1f596:	f00e fe1e 	bl	2e1d6 <counter_sub>
   1f59a:	1824      	adds	r4, r4, r0
   1f59c:	f145 0500 	adc.w	r5, r5, #0
   1f5a0:	e00d      	b.n	1f5be <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   1f5a2:	2301      	movs	r3, #1
   1f5a4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f5a6:	4a0f      	ldr	r2, [pc, #60]	; (1f5e4 <compare_set_nolocks+0xa0>)
   1f5a8:	f3bf 8f5b 	dmb	ish
   1f5ac:	e852 1f00 	ldrex	r1, [r2]
   1f5b0:	4319      	orrs	r1, r3
   1f5b2:	e842 1000 	strex	r0, r1, [r2]
   1f5b6:	2800      	cmp	r0, #0
   1f5b8:	d1f8      	bne.n	1f5ac <compare_set_nolocks+0x68>
   1f5ba:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1f5be:	4b08      	ldr	r3, [pc, #32]	; (1f5e0 <compare_set_nolocks+0x9c>)
   1f5c0:	0132      	lsls	r2, r6, #4
   1f5c2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1f5c6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1f5ca:	9908      	ldr	r1, [sp, #32]
   1f5cc:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1f5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f5d0:	6073      	str	r3, [r6, #4]
	return ret;
   1f5d2:	2000      	movs	r0, #0
}
   1f5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1f5d8:	f06f 0015 	mvn.w	r0, #21
   1f5dc:	e7fa      	b.n	1f5d4 <compare_set_nolocks+0x90>
   1f5de:	bf00      	nop
   1f5e0:	20001c98 	.word	0x20001c98
   1f5e4:	200029fc 	.word	0x200029fc

0001f5e8 <process_channel>:

static void process_channel(int32_t chan)
{
   1f5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f5ec:	b082      	sub	sp, #8
   1f5ee:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1f5f0:	f7ff fee2 	bl	1f3b8 <channel_processing_check_and_clear>
   1f5f4:	b910      	cbnz	r0, 1f5fc <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
   1f5f6:	b002      	add	sp, #8
   1f5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1f5fc:	f7ff ff82 	bl	1f504 <z_nrf_rtc_timer_read>
   1f600:	4606      	mov	r6, r0
   1f602:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   1f604:	f00e fdfa 	bl	2e1fc <full_int_lock>
   1f608:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1f60a:	4b13      	ldr	r3, [pc, #76]	; (1f658 <process_channel+0x70>)
   1f60c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1f610:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1f614:	454f      	cmp	r7, r9
   1f616:	bf08      	it	eq
   1f618:	4546      	cmpeq	r6, r8
   1f61a:	d20b      	bcs.n	1f634 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1f61c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1f61e:	4650      	mov	r0, sl
   1f620:	f00e fdf0 	bl	2e204 <full_int_unlock>
		if (handler) {
   1f624:	2e00      	cmp	r6, #0
   1f626:	d0e6      	beq.n	1f5f6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1f628:	9500      	str	r5, [sp, #0]
   1f62a:	4642      	mov	r2, r8
   1f62c:	464b      	mov	r3, r9
   1f62e:	4620      	mov	r0, r4
   1f630:	47b0      	blx	r6
}
   1f632:	e7e0      	b.n	1f5f6 <process_channel+0xe>
			handler = cc_data[chan].callback;
   1f634:	4a08      	ldr	r2, [pc, #32]	; (1f658 <process_channel+0x70>)
   1f636:	0123      	lsls	r3, r4, #4
   1f638:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1f63c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1f63e:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   1f640:	2000      	movs	r0, #0
   1f642:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f644:	f04f 32ff 	mov.w	r2, #4294967295
   1f648:	f04f 33ff 	mov.w	r3, #4294967295
   1f64c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1f650:	4620      	mov	r0, r4
   1f652:	f7ff fe79 	bl	1f348 <event_disable>
   1f656:	e7e2      	b.n	1f61e <process_channel+0x36>
   1f658:	20001c98 	.word	0x20001c98

0001f65c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1f65c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1f65e:	4b0d      	ldr	r3, [pc, #52]	; (1f694 <rtc_nrf_isr+0x38>)
   1f660:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1f664:	f013 0f02 	tst.w	r3, #2
   1f668:	d00a      	beq.n	1f680 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f66a:	4b0b      	ldr	r3, [pc, #44]	; (1f698 <rtc_nrf_isr+0x3c>)
   1f66c:	681b      	ldr	r3, [r3, #0]
   1f66e:	b13b      	cbz	r3, 1f680 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f670:	4b09      	ldr	r3, [pc, #36]	; (1f698 <rtc_nrf_isr+0x3c>)
   1f672:	2200      	movs	r2, #0
   1f674:	601a      	str	r2, [r3, #0]
   1f676:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1f678:	4a08      	ldr	r2, [pc, #32]	; (1f69c <rtc_nrf_isr+0x40>)
   1f67a:	6813      	ldr	r3, [r2, #0]
   1f67c:	3301      	adds	r3, #1
   1f67e:	6013      	str	r3, [r2, #0]
{
   1f680:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f682:	2c00      	cmp	r4, #0
   1f684:	dd00      	ble.n	1f688 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
   1f686:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1f688:	4620      	mov	r0, r4
   1f68a:	f7ff ffad 	bl	1f5e8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f68e:	3401      	adds	r4, #1
   1f690:	e7f7      	b.n	1f682 <rtc_nrf_isr+0x26>
   1f692:	bf00      	nop
   1f694:	40011000 	.word	0x40011000
   1f698:	40011104 	.word	0x40011104
   1f69c:	20002a04 	.word	0x20002a04

0001f6a0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   1f6a0:	b530      	push	{r4, r5, lr}
   1f6a2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1f6a4:	2300      	movs	r3, #0
   1f6a6:	4a1f      	ldr	r2, [pc, #124]	; (1f724 <sys_clock_driver_init+0x84>)
   1f6a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f6ac:	2b00      	cmp	r3, #0
   1f6ae:	dd27      	ble.n	1f700 <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
   1f6b0:	4c1c      	ldr	r4, [pc, #112]	; (1f724 <sys_clock_driver_init+0x84>)
   1f6b2:	2502      	movs	r5, #2
   1f6b4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f6b8:	4b1b      	ldr	r3, [pc, #108]	; (1f728 <sys_clock_driver_init+0x88>)
   1f6ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1f6be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1f6c2:	2200      	movs	r2, #0
   1f6c4:	2101      	movs	r1, #1
   1f6c6:	2011      	movs	r0, #17
   1f6c8:	f7f3 fdde 	bl	13288 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1f6cc:	2011      	movs	r0, #17
   1f6ce:	f7f3 fda9 	bl	13224 <arch_irq_enable>
   1f6d2:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f6d6:	2301      	movs	r3, #1
   1f6d8:	4a14      	ldr	r2, [pc, #80]	; (1f72c <sys_clock_driver_init+0x8c>)
   1f6da:	6013      	str	r3, [r2, #0]
   1f6dc:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1f6de:	4a14      	ldr	r2, [pc, #80]	; (1f730 <sys_clock_driver_init+0x90>)
   1f6e0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1f6e2:	2400      	movs	r4, #0
   1f6e4:	9401      	str	r4, [sp, #4]
   1f6e6:	4b13      	ldr	r3, [pc, #76]	; (1f734 <sys_clock_driver_init+0x94>)
   1f6e8:	9300      	str	r3, [sp, #0]
   1f6ea:	4a13      	ldr	r2, [pc, #76]	; (1f738 <sys_clock_driver_init+0x98>)
   1f6ec:	2300      	movs	r3, #0
   1f6ee:	4620      	mov	r0, r4
   1f6f0:	f00e fdc6 	bl	2e280 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1f6f4:	4628      	mov	r0, r5
   1f6f6:	f7fd ffef 	bl	1d6d8 <z_nrf_clock_control_lf_on>

	return 0;
}
   1f6fa:	4620      	mov	r0, r4
   1f6fc:	b003      	add	sp, #12
   1f6fe:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f700:	4a0e      	ldr	r2, [pc, #56]	; (1f73c <sys_clock_driver_init+0x9c>)
   1f702:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1f706:	f04f 30ff 	mov.w	r0, #4294967295
   1f70a:	f04f 31ff 	mov.w	r1, #4294967295
   1f70e:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f712:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f716:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1f718:	4902      	ldr	r1, [pc, #8]	; (1f724 <sys_clock_driver_init+0x84>)
   1f71a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f71e:	3301      	adds	r3, #1
   1f720:	e7c4      	b.n	1f6ac <sys_clock_driver_init+0xc>
   1f722:	bf00      	nop
   1f724:	40011000 	.word	0x40011000
   1f728:	e000e100 	.word	0xe000e100
   1f72c:	40011008 	.word	0x40011008
   1f730:	20002a00 	.word	0x20002a00
   1f734:	0001f491 	.word	0x0001f491
   1f738:	007fffff 	.word	0x007fffff
   1f73c:	20001c98 	.word	0x20001c98

0001f740 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
   1f740:	b510      	push	{r4, lr}
   1f742:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f744:	f1b0 3fff 	cmp.w	r0, #4294967295
   1f748:	d007      	beq.n	1f75a <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f74a:	1e44      	subs	r4, r0, #1
   1f74c:	2c00      	cmp	r4, #0
   1f74e:	dd07      	ble.n	1f760 <sys_clock_set_timeout+0x20>
   1f750:	4b11      	ldr	r3, [pc, #68]	; (1f798 <sys_clock_set_timeout+0x58>)
   1f752:	429c      	cmp	r4, r3
   1f754:	dd05      	ble.n	1f762 <sys_clock_set_timeout+0x22>
   1f756:	4c11      	ldr	r4, [pc, #68]	; (1f79c <sys_clock_set_timeout+0x5c>)
   1f758:	e003      	b.n	1f762 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f75a:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   1f75e:	e7f4      	b.n	1f74a <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f760:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1f762:	f7ff fecf 	bl	1f504 <z_nrf_rtc_timer_read>
   1f766:	4b0e      	ldr	r3, [pc, #56]	; (1f7a0 <sys_clock_set_timeout+0x60>)
   1f768:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f76c:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   1f76e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f772:	d300      	bcc.n	1f776 <sys_clock_set_timeout+0x36>
		ticks = 0;
   1f774:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1f776:	4404      	add	r4, r0
   1f778:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
   1f77a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1f77e:	d300      	bcc.n	1f782 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   1f780:	4c06      	ldr	r4, [pc, #24]	; (1f79c <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1f782:	2000      	movs	r0, #0
   1f784:	9001      	str	r0, [sp, #4]
   1f786:	4907      	ldr	r1, [pc, #28]	; (1f7a4 <sys_clock_set_timeout+0x64>)
   1f788:	9100      	str	r1, [sp, #0]
   1f78a:	1912      	adds	r2, r2, r4
   1f78c:	f143 0300 	adc.w	r3, r3, #0
   1f790:	f00e fd76 	bl	2e280 <compare_set>
}
   1f794:	b002      	add	sp, #8
   1f796:	bd10      	pop	{r4, pc}
   1f798:	007ffffe 	.word	0x007ffffe
   1f79c:	007fffff 	.word	0x007fffff
   1f7a0:	20001ca8 	.word	0x20001ca8
   1f7a4:	0001f491 	.word	0x0001f491

0001f7a8 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   1f7a8:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1f7aa:	f7ff feab 	bl	1f504 <z_nrf_rtc_timer_read>
   1f7ae:	4b02      	ldr	r3, [pc, #8]	; (1f7b8 <sys_clock_elapsed+0x10>)
   1f7b0:	681b      	ldr	r3, [r3, #0]
}
   1f7b2:	1ac0      	subs	r0, r0, r3
   1f7b4:	bd08      	pop	{r3, pc}
   1f7b6:	bf00      	nop
   1f7b8:	20001ca8 	.word	0x20001ca8

0001f7bc <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   1f7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7c0:	b082      	sub	sp, #8
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f7c2:	2400      	movs	r4, #0
	uint32_t ret = 0;
   1f7c4:	4627      	mov	r7, r4
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f7c6:	e017      	b.n	1f7f8 <get_buttons+0x3c>
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f7c8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1f850 <get_buttons+0x94>
   1f7cc:	f240 422d 	movw	r2, #1069	; 0x42d
   1f7d0:	4641      	mov	r1, r8
   1f7d2:	481b      	ldr	r0, [pc, #108]	; (1f840 <get_buttons+0x84>)
   1f7d4:	f008 fdb5 	bl	28342 <printk>
   1f7d8:	f240 412d 	movw	r1, #1069	; 0x42d
   1f7dc:	4640      	mov	r0, r8
   1f7de:	f009 f949 	bl	28a74 <assert_post_action>
   1f7e2:	e018      	b.n	1f816 <get_buttons+0x5a>
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1f7e4:	2145      	movs	r1, #69	; 0x45
   1f7e6:	4817      	ldr	r0, [pc, #92]	; (1f844 <get_buttons+0x88>)
   1f7e8:	f009 f94c 	bl	28a84 <z_log_minimal_printk>
			return 0;
   1f7ec:	2700      	movs	r7, #0
			ret |= 1U << i;
		}
	}

	return ret;
}
   1f7ee:	4638      	mov	r0, r7
   1f7f0:	b002      	add	sp, #8
   1f7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f7f6:	3401      	adds	r4, #1
   1f7f8:	2c03      	cmp	r4, #3
   1f7fa:	d8f8      	bhi.n	1f7ee <get_buttons+0x32>
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1f7fc:	4b12      	ldr	r3, [pc, #72]	; (1f848 <get_buttons+0x8c>)
   1f7fe:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
   1f802:	4b12      	ldr	r3, [pc, #72]	; (1f84c <get_buttons+0x90>)
   1f804:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f808:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1f80a:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f80c:	681b      	ldr	r3, [r3, #0]
   1f80e:	2501      	movs	r5, #1
   1f810:	4095      	lsls	r5, r2
   1f812:	422b      	tst	r3, r5
   1f814:	d0d8      	beq.n	1f7c8 <get_buttons+0xc>
	const struct gpio_driver_api *api =
   1f816:	68b3      	ldr	r3, [r6, #8]
	return api->port_get_raw(port, value);
   1f818:	685b      	ldr	r3, [r3, #4]
   1f81a:	a901      	add	r1, sp, #4
   1f81c:	4630      	mov	r0, r6
   1f81e:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
   1f820:	4603      	mov	r3, r0
   1f822:	b920      	cbnz	r0, 1f82e <get_buttons+0x72>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1f824:	9b01      	ldr	r3, [sp, #4]
   1f826:	421d      	tst	r5, r3
   1f828:	bf14      	ite	ne
   1f82a:	2301      	movne	r3, #1
   1f82c:	2300      	moveq	r3, #0
		if (val < 0) {
   1f82e:	2b00      	cmp	r3, #0
   1f830:	dbd8      	blt.n	1f7e4 <get_buttons+0x28>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1f832:	2b00      	cmp	r3, #0
   1f834:	d1df      	bne.n	1f7f6 <get_buttons+0x3a>
			ret |= 1U << i;
   1f836:	2301      	movs	r3, #1
   1f838:	40a3      	lsls	r3, r4
   1f83a:	431f      	orrs	r7, r3
   1f83c:	e7db      	b.n	1f7f6 <get_buttons+0x3a>
   1f83e:	bf00      	nop
   1f840:	0002f968 	.word	0x0002f968
   1f844:	00032b20 	.word	0x00032b20
   1f848:	20002a08 	.word	0x20002a08
   1f84c:	00032cac 	.word	0x00032cac
   1f850:	00032af4 	.word	0x00032af4

0001f854 <button_handlers_call>:

static void button_handlers_call(uint32_t button_state, uint32_t has_changed)
{
   1f854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f856:	4606      	mov	r6, r0
   1f858:	460f      	mov	r7, r1
	struct button_handler *handler;

	if (button_handler_cb != NULL) {
   1f85a:	4b11      	ldr	r3, [pc, #68]	; (1f8a0 <button_handlers_call+0x4c>)
   1f85c:	681b      	ldr	r3, [r3, #0]
   1f85e:	b103      	cbz	r3, 1f862 <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
   1f860:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1f862:	f04f 32ff 	mov.w	r2, #4294967295
   1f866:	f04f 33ff 	mov.w	r3, #4294967295
   1f86a:	480e      	ldr	r0, [pc, #56]	; (1f8a4 <button_handlers_call+0x50>)
   1f86c:	f002 fd12 	bl	22294 <z_impl_k_mutex_lock>
	return list->head;
   1f870:	4b0d      	ldr	r3, [pc, #52]	; (1f8a8 <button_handlers_call+0x54>)
   1f872:	681c      	ldr	r4, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_lock(&button_handler_mut, K_FOREVER);
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1f874:	b114      	cbz	r4, 1f87c <button_handlers_call+0x28>
   1f876:	3c04      	subs	r4, #4
   1f878:	e000      	b.n	1f87c <button_handlers_call+0x28>
   1f87a:	462c      	mov	r4, r5
   1f87c:	b15c      	cbz	r4, 1f896 <button_handlers_call+0x42>
			handler->cb(button_state, has_changed);
   1f87e:	4625      	mov	r5, r4
   1f880:	f855 3b04 	ldr.w	r3, [r5], #4
   1f884:	4639      	mov	r1, r7
   1f886:	4630      	mov	r0, r6
   1f888:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f88a:	2d00      	cmp	r5, #0
   1f88c:	d0f5      	beq.n	1f87a <button_handlers_call+0x26>
	return node->next;
   1f88e:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1f890:	b10c      	cbz	r4, 1f896 <button_handlers_call+0x42>
   1f892:	3c04      	subs	r4, #4
   1f894:	e7f2      	b.n	1f87c <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
   1f896:	4803      	ldr	r0, [pc, #12]	; (1f8a4 <button_handlers_call+0x50>)
   1f898:	f002 fdf2 	bl	22480 <z_impl_k_mutex_unlock>
		}
		k_mutex_unlock(&button_handler_mut);
	}
}
   1f89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f89e:	bf00      	nop
   1f8a0:	20002a18 	.word	0x20002a18
   1f8a4:	20002a1c 	.word	0x20002a1c
   1f8a8:	20002a30 	.word	0x20002a30

0001f8ac <callback_ctrl>:
{
   1f8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f8b0:	4606      	mov	r6, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1f8b2:	2400      	movs	r4, #0
	int err = 0;
   1f8b4:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1f8b6:	e009      	b.n	1f8cc <callback_ctrl+0x20>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1f8b8:	f8d8 8018 	ldr.w	r8, [r8, #24]
   1f8bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1f8c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1f8c4:	4639      	mov	r1, r7
   1f8c6:	4628      	mov	r0, r5
   1f8c8:	47c0      	blx	r8
   1f8ca:	3401      	adds	r4, #1
   1f8cc:	2c03      	cmp	r4, #3
   1f8ce:	d845      	bhi.n	1f95c <callback_ctrl+0xb0>
   1f8d0:	2800      	cmp	r0, #0
   1f8d2:	d143      	bne.n	1f95c <callback_ctrl+0xb0>
		if (enable) {
   1f8d4:	b1e6      	cbz	r6, 1f910 <callback_ctrl+0x64>
			err = gpio_pin_interrupt_configure(button_devs[i],
   1f8d6:	4b22      	ldr	r3, [pc, #136]	; (1f960 <callback_ctrl+0xb4>)
   1f8d8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1f8dc:	4b21      	ldr	r3, [pc, #132]	; (1f964 <callback_ctrl+0xb8>)
   1f8de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f8e2:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   1f8e4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	const struct gpio_driver_config *const cfg =
   1f8e8:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f8ea:	681a      	ldr	r2, [r3, #0]
   1f8ec:	2301      	movs	r3, #1
   1f8ee:	40bb      	lsls	r3, r7
   1f8f0:	421a      	tst	r2, r3
   1f8f2:	d1e1      	bne.n	1f8b8 <callback_ctrl+0xc>
   1f8f4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1f96c <callback_ctrl+0xc0>
   1f8f8:	f44f 7224 	mov.w	r2, #656	; 0x290
   1f8fc:	4649      	mov	r1, r9
   1f8fe:	481a      	ldr	r0, [pc, #104]	; (1f968 <callback_ctrl+0xbc>)
   1f900:	f008 fd1f 	bl	28342 <printk>
   1f904:	f44f 7124 	mov.w	r1, #656	; 0x290
   1f908:	4648      	mov	r0, r9
   1f90a:	f009 f8b3 	bl	28a74 <assert_post_action>
   1f90e:	e7d3      	b.n	1f8b8 <callback_ctrl+0xc>
			err = gpio_pin_interrupt_configure(button_devs[i],
   1f910:	4b13      	ldr	r3, [pc, #76]	; (1f960 <callback_ctrl+0xb4>)
   1f912:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1f916:	4b13      	ldr	r3, [pc, #76]	; (1f964 <callback_ctrl+0xb8>)
   1f918:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f91c:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   1f91e:	f8d5 8008 	ldr.w	r8, [r5, #8]
	const struct gpio_driver_config *const cfg =
   1f922:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f924:	681a      	ldr	r2, [r3, #0]
   1f926:	2301      	movs	r3, #1
   1f928:	40bb      	lsls	r3, r7
   1f92a:	421a      	tst	r2, r3
   1f92c:	d008      	beq.n	1f940 <callback_ctrl+0x94>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1f92e:	f8d8 8018 	ldr.w	r8, [r8, #24]
   1f932:	2300      	movs	r3, #0
   1f934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1f938:	4639      	mov	r1, r7
   1f93a:	4628      	mov	r0, r5
   1f93c:	47c0      	blx	r8
   1f93e:	e7c4      	b.n	1f8ca <callback_ctrl+0x1e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f940:	f8df 9028 	ldr.w	r9, [pc, #40]	; 1f96c <callback_ctrl+0xc0>
   1f944:	f44f 7224 	mov.w	r2, #656	; 0x290
   1f948:	4649      	mov	r1, r9
   1f94a:	4807      	ldr	r0, [pc, #28]	; (1f968 <callback_ctrl+0xbc>)
   1f94c:	f008 fcf9 	bl	28342 <printk>
   1f950:	f44f 7124 	mov.w	r1, #656	; 0x290
   1f954:	4648      	mov	r0, r9
   1f956:	f009 f88d 	bl	28a74 <assert_post_action>
   1f95a:	e7e8      	b.n	1f92e <callback_ctrl+0x82>
}
   1f95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f960:	20002a08 	.word	0x20002a08
   1f964:	00032cac 	.word	0x00032cac
   1f968:	0002f968 	.word	0x0002f968
   1f96c:	00032af4 	.word	0x00032af4

0001f970 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   1f970:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f972:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f976:	f3ef 8411 	mrs	r4, BASEPRI
   1f97a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f97e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f982:	4822      	ldr	r0, [pc, #136]	; (1fa0c <button_pressed+0x9c>)
   1f984:	f002 fa88 	bl	21e98 <z_spin_lock_valid>
   1f988:	b1d0      	cbz	r0, 1f9c0 <button_pressed+0x50>
	z_spin_lock_set_owner(l);
   1f98a:	4820      	ldr	r0, [pc, #128]	; (1fa0c <button_pressed+0x9c>)
   1f98c:	f002 faa4 	bl	21ed8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   1f990:	2000      	movs	r0, #0
   1f992:	f7ff ff8b 	bl	1f8ac <callback_ctrl>

	if (err) {
   1f996:	b9f0      	cbnz	r0, 1f9d6 <button_pressed+0x66>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
   1f998:	4b1d      	ldr	r3, [pc, #116]	; (1fa10 <button_pressed+0xa0>)
   1f99a:	781b      	ldrb	r3, [r3, #0]
   1f99c:	bb03      	cbnz	r3, 1f9e0 <button_pressed+0x70>
	case STATE_WAITING:
		state = STATE_SCANNING;
   1f99e:	4b1c      	ldr	r3, [pc, #112]	; (1fa10 <button_pressed+0xa0>)
   1f9a0:	2201      	movs	r2, #1
   1f9a2:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1f9a4:	2221      	movs	r2, #33	; 0x21
   1f9a6:	2300      	movs	r3, #0
   1f9a8:	481a      	ldr	r0, [pc, #104]	; (1fa14 <button_pressed+0xa4>)
   1f9aa:	f003 fc95 	bl	232d8 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f9ae:	4817      	ldr	r0, [pc, #92]	; (1fa0c <button_pressed+0x9c>)
   1f9b0:	f002 fa82 	bl	21eb8 <z_spin_unlock_valid>
   1f9b4:	b1f8      	cbz	r0, 1f9f6 <button_pressed+0x86>
	__asm__ volatile(
   1f9b6:	f384 8811 	msr	BASEPRI, r4
   1f9ba:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   1f9be:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f9c0:	4d15      	ldr	r5, [pc, #84]	; (1fa18 <button_pressed+0xa8>)
   1f9c2:	2281      	movs	r2, #129	; 0x81
   1f9c4:	4629      	mov	r1, r5
   1f9c6:	4815      	ldr	r0, [pc, #84]	; (1fa1c <button_pressed+0xac>)
   1f9c8:	f008 fcbb 	bl	28342 <printk>
   1f9cc:	2181      	movs	r1, #129	; 0x81
   1f9ce:	4628      	mov	r0, r5
   1f9d0:	f009 f850 	bl	28a74 <assert_post_action>
   1f9d4:	e7d9      	b.n	1f98a <button_pressed+0x1a>
		LOG_ERR("Cannot disable callbacks");
   1f9d6:	2145      	movs	r1, #69	; 0x45
   1f9d8:	4811      	ldr	r0, [pc, #68]	; (1fa20 <button_pressed+0xb0>)
   1f9da:	f009 f853 	bl	28a84 <z_log_minimal_printk>
   1f9de:	e7db      	b.n	1f998 <button_pressed+0x28>
		__ASSERT_NO_MSG(false);
   1f9e0:	4d10      	ldr	r5, [pc, #64]	; (1fa24 <button_pressed+0xb4>)
   1f9e2:	22e8      	movs	r2, #232	; 0xe8
   1f9e4:	4629      	mov	r1, r5
   1f9e6:	480d      	ldr	r0, [pc, #52]	; (1fa1c <button_pressed+0xac>)
   1f9e8:	f008 fcab 	bl	28342 <printk>
   1f9ec:	21e8      	movs	r1, #232	; 0xe8
   1f9ee:	4628      	mov	r0, r5
   1f9f0:	f009 f840 	bl	28a74 <assert_post_action>
		break;
   1f9f4:	e7db      	b.n	1f9ae <button_pressed+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f9f6:	4d08      	ldr	r5, [pc, #32]	; (1fa18 <button_pressed+0xa8>)
   1f9f8:	22ac      	movs	r2, #172	; 0xac
   1f9fa:	4629      	mov	r1, r5
   1f9fc:	4807      	ldr	r0, [pc, #28]	; (1fa1c <button_pressed+0xac>)
   1f9fe:	f008 fca0 	bl	28342 <printk>
   1fa02:	21ac      	movs	r1, #172	; 0xac
   1fa04:	4628      	mov	r0, r5
   1fa06:	f009 f835 	bl	28a74 <assert_post_action>
   1fa0a:	e7d4      	b.n	1f9b6 <button_pressed+0x46>
   1fa0c:	20002a5c 	.word	0x20002a5c
   1fa10:	20003f78 	.word	0x20003f78
   1fa14:	20001cb0 	.word	0x20001cb0
   1fa18:	0002f9a4 	.word	0x0002f9a4
   1fa1c:	0002f968 	.word	0x0002f968
   1fa20:	00032b3c 	.word	0x00032b3c
   1fa24:	00032b5c 	.word	0x00032b5c

0001fa28 <buttons_scan_fn>:
{
   1fa28:	b570      	push	{r4, r5, r6, lr}
	button_scan = get_buttons();
   1fa2a:	f7ff fec7 	bl	1f7bc <get_buttons>
   1fa2e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fa30:	4b37      	ldr	r3, [pc, #220]	; (1fb10 <buttons_scan_fn+0xe8>)
   1fa32:	f3bf 8f5b 	dmb	ish
   1fa36:	e853 2f00 	ldrex	r2, [r3]
   1fa3a:	e843 4100 	strex	r1, r4, [r3]
   1fa3e:	2900      	cmp	r1, #0
   1fa40:	d1f9      	bne.n	1fa36 <buttons_scan_fn+0xe>
   1fa42:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1fa46:	4b33      	ldr	r3, [pc, #204]	; (1fb14 <buttons_scan_fn+0xec>)
   1fa48:	781b      	ldrb	r3, [r3, #0]
   1fa4a:	b943      	cbnz	r3, 1fa5e <buttons_scan_fn+0x36>
		if (button_scan != last_button_scan) {
   1fa4c:	4b32      	ldr	r3, [pc, #200]	; (1fb18 <buttons_scan_fn+0xf0>)
   1fa4e:	6819      	ldr	r1, [r3, #0]
   1fa50:	42a1      	cmp	r1, r4
   1fa52:	d007      	beq.n	1fa64 <buttons_scan_fn+0x3c>
			button_handlers_call(button_scan, has_changed);
   1fa54:	4061      	eors	r1, r4
   1fa56:	4620      	mov	r0, r4
   1fa58:	f7ff fefc 	bl	1f854 <button_handlers_call>
   1fa5c:	e002      	b.n	1fa64 <buttons_scan_fn+0x3c>
		initial_run = false;
   1fa5e:	4b2d      	ldr	r3, [pc, #180]	; (1fb14 <buttons_scan_fn+0xec>)
   1fa60:	2200      	movs	r2, #0
   1fa62:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
   1fa64:	4b2c      	ldr	r3, [pc, #176]	; (1fb18 <buttons_scan_fn+0xf0>)
   1fa66:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
   1fa68:	b134      	cbz	r4, 1fa78 <buttons_scan_fn+0x50>
		k_work_reschedule(&buttons_scan,
   1fa6a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1fa6e:	2300      	movs	r3, #0
   1fa70:	482a      	ldr	r0, [pc, #168]	; (1fb1c <buttons_scan_fn+0xf4>)
   1fa72:	f003 fc31 	bl	232d8 <k_work_reschedule>
}
   1fa76:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1fa78:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa7c:	f3ef 8511 	mrs	r5, BASEPRI
   1fa80:	f383 8812 	msr	BASEPRI_MAX, r3
   1fa84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fa88:	4825      	ldr	r0, [pc, #148]	; (1fb20 <buttons_scan_fn+0xf8>)
   1fa8a:	f002 fa05 	bl	21e98 <z_spin_lock_valid>
   1fa8e:	b300      	cbz	r0, 1fad2 <buttons_scan_fn+0xaa>
	z_spin_lock_set_owner(l);
   1fa90:	4823      	ldr	r0, [pc, #140]	; (1fb20 <buttons_scan_fn+0xf8>)
   1fa92:	f002 fa21 	bl	21ed8 <z_spin_lock_set_owner>
		switch (state) {
   1fa96:	4b23      	ldr	r3, [pc, #140]	; (1fb24 <buttons_scan_fn+0xfc>)
   1fa98:	781b      	ldrb	r3, [r3, #0]
   1fa9a:	2b01      	cmp	r3, #1
   1fa9c:	d024      	beq.n	1fae8 <buttons_scan_fn+0xc0>
			__ASSERT_NO_MSG(false);
   1fa9e:	4c22      	ldr	r4, [pc, #136]	; (1fb28 <buttons_scan_fn+0x100>)
   1faa0:	22b1      	movs	r2, #177	; 0xb1
   1faa2:	4621      	mov	r1, r4
   1faa4:	4821      	ldr	r0, [pc, #132]	; (1fb2c <buttons_scan_fn+0x104>)
   1faa6:	f008 fc4c 	bl	28342 <printk>
   1faaa:	21b1      	movs	r1, #177	; 0xb1
   1faac:	4620      	mov	r0, r4
   1faae:	f008 ffe1 	bl	28a74 <assert_post_action>
		int err = 0;
   1fab2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fab4:	481a      	ldr	r0, [pc, #104]	; (1fb20 <buttons_scan_fn+0xf8>)
   1fab6:	f002 f9ff 	bl	21eb8 <z_spin_unlock_valid>
   1faba:	b1e8      	cbz	r0, 1faf8 <buttons_scan_fn+0xd0>
	__asm__ volatile(
   1fabc:	f385 8811 	msr	BASEPRI, r5
   1fac0:	f3bf 8f6f 	isb	sy
		if (err) {
   1fac4:	2c00      	cmp	r4, #0
   1fac6:	d0d6      	beq.n	1fa76 <buttons_scan_fn+0x4e>
			LOG_ERR("Cannot enable callbacks");
   1fac8:	2145      	movs	r1, #69	; 0x45
   1faca:	4819      	ldr	r0, [pc, #100]	; (1fb30 <buttons_scan_fn+0x108>)
   1facc:	f008 ffda 	bl	28a84 <z_log_minimal_printk>
}
   1fad0:	e7d1      	b.n	1fa76 <buttons_scan_fn+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fad2:	4c18      	ldr	r4, [pc, #96]	; (1fb34 <buttons_scan_fn+0x10c>)
   1fad4:	2281      	movs	r2, #129	; 0x81
   1fad6:	4621      	mov	r1, r4
   1fad8:	4814      	ldr	r0, [pc, #80]	; (1fb2c <buttons_scan_fn+0x104>)
   1fada:	f008 fc32 	bl	28342 <printk>
   1fade:	2181      	movs	r1, #129	; 0x81
   1fae0:	4620      	mov	r0, r4
   1fae2:	f008 ffc7 	bl	28a74 <assert_post_action>
   1fae6:	e7d3      	b.n	1fa90 <buttons_scan_fn+0x68>
			state = STATE_WAITING;
   1fae8:	4b0e      	ldr	r3, [pc, #56]	; (1fb24 <buttons_scan_fn+0xfc>)
   1faea:	2200      	movs	r2, #0
   1faec:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
   1faee:	2001      	movs	r0, #1
   1faf0:	f7ff fedc 	bl	1f8ac <callback_ctrl>
   1faf4:	4604      	mov	r4, r0
			break;
   1faf6:	e7dd      	b.n	1fab4 <buttons_scan_fn+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1faf8:	4e0e      	ldr	r6, [pc, #56]	; (1fb34 <buttons_scan_fn+0x10c>)
   1fafa:	22ac      	movs	r2, #172	; 0xac
   1fafc:	4631      	mov	r1, r6
   1fafe:	480b      	ldr	r0, [pc, #44]	; (1fb2c <buttons_scan_fn+0x104>)
   1fb00:	f008 fc1f 	bl	28342 <printk>
   1fb04:	21ac      	movs	r1, #172	; 0xac
   1fb06:	4630      	mov	r0, r6
   1fb08:	f008 ffb4 	bl	28a74 <assert_post_action>
   1fb0c:	e7d6      	b.n	1fabc <buttons_scan_fn+0x94>
   1fb0e:	bf00      	nop
   1fb10:	20002a60 	.word	0x20002a60
   1fb14:	20000735 	.word	0x20000735
   1fb18:	20002a44 	.word	0x20002a44
   1fb1c:	20001cb0 	.word	0x20001cb0
   1fb20:	20002a5c 	.word	0x20002a5c
   1fb24:	20003f78 	.word	0x20003f78
   1fb28:	00032b5c 	.word	0x00032b5c
   1fb2c:	0002f968 	.word	0x0002f968
   1fb30:	00032b9c 	.word	0x00032b9c
   1fb34:	0002f9a4 	.word	0x0002f9a4

0001fb38 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fb38:	f3bf 8f5b 	dmb	ish
   1fb3c:	4b06      	ldr	r3, [pc, #24]	; (1fb58 <dk_read_buttons+0x20>)
   1fb3e:	681b      	ldr	r3, [r3, #0]
   1fb40:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   1fb44:	b100      	cbz	r0, 1fb48 <dk_read_buttons+0x10>
		*button_state = current_state;
   1fb46:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   1fb48:	b119      	cbz	r1, 1fb52 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1fb4a:	4a04      	ldr	r2, [pc, #16]	; (1fb5c <dk_read_buttons+0x24>)
   1fb4c:	6812      	ldr	r2, [r2, #0]
   1fb4e:	405a      	eors	r2, r3
   1fb50:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   1fb52:	4a02      	ldr	r2, [pc, #8]	; (1fb5c <dk_read_buttons+0x24>)
   1fb54:	6013      	str	r3, [r2, #0]
}
   1fb56:	4770      	bx	lr
   1fb58:	20002a60 	.word	0x20002a60
   1fb5c:	20002a48 	.word	0x20002a48

0001fb60 <dk_buttons_init>:
{
   1fb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	button_handler_cb = button_handler;
   1fb64:	4b60      	ldr	r3, [pc, #384]	; (1fce8 <dk_buttons_init+0x188>)
   1fb66:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1fb68:	4860      	ldr	r0, [pc, #384]	; (1fcec <dk_buttons_init+0x18c>)
   1fb6a:	f00f f870 	bl	2ec4e <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1fb6e:	2500      	movs	r5, #0
   1fb70:	e023      	b.n	1fbba <dk_buttons_init+0x5a>
			LOG_ERR("Cannot bind gpio device");
   1fb72:	2145      	movs	r1, #69	; 0x45
   1fb74:	485e      	ldr	r0, [pc, #376]	; (1fcf0 <dk_buttons_init+0x190>)
   1fb76:	f008 ff85 	bl	28a84 <z_log_minimal_printk>
			return -ENODEV;
   1fb7a:	f06f 0612 	mvn.w	r6, #18
   1fb7e:	e0b0      	b.n	1fce2 <dk_buttons_init+0x182>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fb80:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 1fd24 <dk_buttons_init+0x1c4>
   1fb84:	f44f 723c 	mov.w	r2, #752	; 0x2f0
   1fb88:	4651      	mov	r1, sl
   1fb8a:	485a      	ldr	r0, [pc, #360]	; (1fcf4 <dk_buttons_init+0x194>)
   1fb8c:	f008 fbd9 	bl	28342 <printk>
   1fb90:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1fb94:	4650      	mov	r0, sl
   1fb96:	f008 ff6d 	bl	28a74 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1fb9a:	f8d8 3000 	ldr.w	r3, [r8]
   1fb9e:	ea23 0606 	bic.w	r6, r3, r6
   1fba2:	f8c8 6000 	str.w	r6, [r8]
	return api->pin_configure(port, pin, flags);
   1fba6:	f8d9 3000 	ldr.w	r3, [r9]
   1fbaa:	f44f 7288 	mov.w	r2, #272	; 0x110
   1fbae:	4639      	mov	r1, r7
   1fbb0:	4620      	mov	r0, r4
   1fbb2:	4798      	blx	r3
		if (err) {
   1fbb4:	4606      	mov	r6, r0
   1fbb6:	b9e0      	cbnz	r0, 1fbf2 <dk_buttons_init+0x92>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1fbb8:	3501      	adds	r5, #1
   1fbba:	2d03      	cmp	r5, #3
   1fbbc:	d81e      	bhi.n	1fbfc <dk_buttons_init+0x9c>
		button_devs[i] = device_get_binding(button_pins[i].port);
   1fbbe:	4b4e      	ldr	r3, [pc, #312]	; (1fcf8 <dk_buttons_init+0x198>)
   1fbc0:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   1fbc4:	f001 fdb4 	bl	21730 <z_impl_device_get_binding>
   1fbc8:	4604      	mov	r4, r0
   1fbca:	4b4c      	ldr	r3, [pc, #304]	; (1fcfc <dk_buttons_init+0x19c>)
   1fbcc:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
		if (!button_devs[i]) {
   1fbd0:	2800      	cmp	r0, #0
   1fbd2:	d0ce      	beq.n	1fb72 <dk_buttons_init+0x12>
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1fbd4:	4b48      	ldr	r3, [pc, #288]	; (1fcf8 <dk_buttons_init+0x198>)
   1fbd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1fbda:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   1fbdc:	f8d0 9008 	ldr.w	r9, [r0, #8]
	const struct gpio_driver_config *const cfg =
   1fbe0:	6843      	ldr	r3, [r0, #4]
	struct gpio_driver_data *data =
   1fbe2:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fbe6:	681b      	ldr	r3, [r3, #0]
   1fbe8:	2601      	movs	r6, #1
   1fbea:	40be      	lsls	r6, r7
   1fbec:	4233      	tst	r3, r6
   1fbee:	d1d4      	bne.n	1fb9a <dk_buttons_init+0x3a>
   1fbf0:	e7c6      	b.n	1fb80 <dk_buttons_init+0x20>
			LOG_ERR("Cannot configure button gpio");
   1fbf2:	2145      	movs	r1, #69	; 0x45
   1fbf4:	4842      	ldr	r0, [pc, #264]	; (1fd00 <dk_buttons_init+0x1a0>)
   1fbf6:	f008 ff45 	bl	28a84 <z_log_minimal_printk>
			return err;
   1fbfa:	e072      	b.n	1fce2 <dk_buttons_init+0x182>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1fbfc:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
   1fbfe:	4625      	mov	r5, r4
   1fc00:	e01e      	b.n	1fc40 <dk_buttons_init+0xe0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fc02:	f8df 9120 	ldr.w	r9, [pc, #288]	; 1fd24 <dk_buttons_init+0x1c4>
   1fc06:	f44f 7224 	mov.w	r2, #656	; 0x290
   1fc0a:	4649      	mov	r1, r9
   1fc0c:	4839      	ldr	r0, [pc, #228]	; (1fcf4 <dk_buttons_init+0x194>)
   1fc0e:	f008 fb98 	bl	28342 <printk>
   1fc12:	f44f 7124 	mov.w	r1, #656	; 0x290
   1fc16:	4648      	mov	r0, r9
   1fc18:	f008 ff2c 	bl	28a74 <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1fc1c:	f8d8 8018 	ldr.w	r8, [r8, #24]
   1fc20:	2300      	movs	r3, #0
   1fc22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1fc26:	4639      	mov	r1, r7
   1fc28:	4630      	mov	r0, r6
   1fc2a:	47c0      	blx	r8
		if (err) {
   1fc2c:	4606      	mov	r6, r0
   1fc2e:	b9c8      	cbnz	r0, 1fc64 <dk_buttons_init+0x104>
		pin_mask |= BIT(button_pins[i].number);
   1fc30:	4b31      	ldr	r3, [pc, #196]	; (1fcf8 <dk_buttons_init+0x198>)
   1fc32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1fc36:	791a      	ldrb	r2, [r3, #4]
   1fc38:	2301      	movs	r3, #1
   1fc3a:	4093      	lsls	r3, r2
   1fc3c:	431d      	orrs	r5, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1fc3e:	3401      	adds	r4, #1
   1fc40:	2c03      	cmp	r4, #3
   1fc42:	d814      	bhi.n	1fc6e <dk_buttons_init+0x10e>
		err = gpio_pin_interrupt_configure(button_devs[i],
   1fc44:	4b2d      	ldr	r3, [pc, #180]	; (1fcfc <dk_buttons_init+0x19c>)
   1fc46:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
   1fc4a:	4b2b      	ldr	r3, [pc, #172]	; (1fcf8 <dk_buttons_init+0x198>)
   1fc4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1fc50:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   1fc52:	f8d6 8008 	ldr.w	r8, [r6, #8]
	const struct gpio_driver_config *const cfg =
   1fc56:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fc58:	681a      	ldr	r2, [r3, #0]
   1fc5a:	2301      	movs	r3, #1
   1fc5c:	40bb      	lsls	r3, r7
   1fc5e:	421a      	tst	r2, r3
   1fc60:	d1dc      	bne.n	1fc1c <dk_buttons_init+0xbc>
   1fc62:	e7ce      	b.n	1fc02 <dk_buttons_init+0xa2>
			LOG_ERR("Cannot disable callbacks()");
   1fc64:	2145      	movs	r1, #69	; 0x45
   1fc66:	4827      	ldr	r0, [pc, #156]	; (1fd04 <dk_buttons_init+0x1a4>)
   1fc68:	f008 ff0c 	bl	28a84 <z_log_minimal_printk>
			return err;
   1fc6c:	e039      	b.n	1fce2 <dk_buttons_init+0x182>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1fc6e:	4b26      	ldr	r3, [pc, #152]	; (1fd08 <dk_buttons_init+0x1a8>)
   1fc70:	4a26      	ldr	r2, [pc, #152]	; (1fd0c <dk_buttons_init+0x1ac>)
   1fc72:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   1fc74:	609d      	str	r5, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1fc76:	2400      	movs	r4, #0
   1fc78:	2c03      	cmp	r4, #3
   1fc7a:	d813      	bhi.n	1fca4 <dk_buttons_init+0x144>
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   1fc7c:	4b1f      	ldr	r3, [pc, #124]	; (1fcfc <dk_buttons_init+0x19c>)
   1fc7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   1fc82:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1fc84:	69db      	ldr	r3, [r3, #28]
   1fc86:	b133      	cbz	r3, 1fc96 <dk_buttons_init+0x136>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1fc88:	2201      	movs	r2, #1
   1fc8a:	491f      	ldr	r1, [pc, #124]	; (1fd08 <dk_buttons_init+0x1a8>)
   1fc8c:	4798      	blx	r3
		if (err) {
   1fc8e:	4606      	mov	r6, r0
   1fc90:	b918      	cbnz	r0, 1fc9a <dk_buttons_init+0x13a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1fc92:	3401      	adds	r4, #1
   1fc94:	e7f0      	b.n	1fc78 <dk_buttons_init+0x118>
		return -ENOTSUP;
   1fc96:	f06f 0685 	mvn.w	r6, #133	; 0x85
			LOG_ERR("Cannot add callback");
   1fc9a:	2145      	movs	r1, #69	; 0x45
   1fc9c:	481c      	ldr	r0, [pc, #112]	; (1fd10 <dk_buttons_init+0x1b0>)
   1fc9e:	f008 fef1 	bl	28a84 <z_log_minimal_printk>
			return err;
   1fca2:	e01e      	b.n	1fce2 <dk_buttons_init+0x182>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1fca4:	4c1b      	ldr	r4, [pc, #108]	; (1fd14 <dk_buttons_init+0x1b4>)
   1fca6:	491c      	ldr	r1, [pc, #112]	; (1fd18 <dk_buttons_init+0x1b8>)
   1fca8:	4620      	mov	r0, r4
   1fcaa:	f003 fa21 	bl	230f0 <k_work_init_delayable>
	state = STATE_SCANNING;
   1fcae:	4b1b      	ldr	r3, [pc, #108]	; (1fd1c <dk_buttons_init+0x1bc>)
   1fcb0:	2201      	movs	r2, #1
   1fcb2:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1fcb4:	2200      	movs	r2, #0
   1fcb6:	2300      	movs	r3, #0
   1fcb8:	4620      	mov	r0, r4
   1fcba:	f003 faa3 	bl	23204 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1fcbe:	2100      	movs	r1, #0
   1fcc0:	4608      	mov	r0, r1
   1fcc2:	f7ff ff39 	bl	1fb38 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1fcc6:	f7ff fd79 	bl	1f7bc <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fcca:	4b15      	ldr	r3, [pc, #84]	; (1fd20 <dk_buttons_init+0x1c0>)
   1fccc:	f3bf 8f5b 	dmb	ish
   1fcd0:	e853 2f00 	ldrex	r2, [r3]
   1fcd4:	e843 0100 	strex	r1, r0, [r3]
   1fcd8:	2900      	cmp	r1, #0
   1fcda:	d1f9      	bne.n	1fcd0 <dk_buttons_init+0x170>
   1fcdc:	f3bf 8f5b 	dmb	ish
	return 0;
   1fce0:	2600      	movs	r6, #0
}
   1fce2:	4630      	mov	r0, r6
   1fce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fce8:	20002a18 	.word	0x20002a18
   1fcec:	20002a1c 	.word	0x20002a1c
   1fcf0:	00032bbc 	.word	0x00032bbc
   1fcf4:	0002f968 	.word	0x0002f968
   1fcf8:	00032cac 	.word	0x00032cac
   1fcfc:	20002a08 	.word	0x20002a08
   1fd00:	00032bdc 	.word	0x00032bdc
   1fd04:	00032c00 	.word	0x00032c00
   1fd08:	20002a38 	.word	0x20002a38
   1fd0c:	0001f971 	.word	0x0001f971
   1fd10:	00032c20 	.word	0x00032c20
   1fd14:	20001cb0 	.word	0x20001cb0
   1fd18:	0001fa29 	.word	0x0001fa29
   1fd1c:	20003f78 	.word	0x20003f78
   1fd20:	20002a60 	.word	0x20002a60
   1fd24:	00032af4 	.word	0x00032af4

0001fd28 <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
   1fd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1fd2c:	f030 030f 	bics.w	r3, r0, #15
   1fd30:	d14e      	bne.n	1fdd0 <dk_set_leds_state+0xa8>
   1fd32:	4607      	mov	r7, r0
   1fd34:	4688      	mov	r8, r1
   1fd36:	f031 040f 	bics.w	r4, r1, #15
   1fd3a:	d019      	beq.n	1fd70 <dk_set_leds_state+0x48>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
   1fd3c:	f06f 0515 	mvn.w	r5, #21
   1fd40:	e043      	b.n	1fdca <dk_set_leds_state+0xa2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fd42:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1fde8 <dk_set_leds_state+0xc0>
   1fd46:	f240 4284 	movw	r2, #1156	; 0x484
   1fd4a:	4651      	mov	r1, sl
   1fd4c:	4822      	ldr	r0, [pc, #136]	; (1fdd8 <dk_set_leds_state+0xb0>)
   1fd4e:	f008 faf8 	bl	28342 <printk>
   1fd52:	f240 4184 	movw	r1, #1156	; 0x484
   1fd56:	4650      	mov	r0, sl
   1fd58:	f008 fe8c 	bl	28a74 <assert_post_action>
   1fd5c:	e025      	b.n	1fdaa <dk_set_leds_state+0x82>
	const struct gpio_driver_api *api =
   1fd5e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_clear_bits_raw(port, pins);
   1fd62:	691b      	ldr	r3, [r3, #16]
   1fd64:	4631      	mov	r1, r6
   1fd66:	4648      	mov	r0, r9
   1fd68:	4798      	blx	r3
   1fd6a:	4605      	mov	r5, r0
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
						   led_pins[i].number, val);
			if (err) {
   1fd6c:	bb3d      	cbnz	r5, 1fdbe <dk_set_leds_state+0x96>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1fd6e:	3401      	adds	r4, #1
   1fd70:	2c03      	cmp	r4, #3
   1fd72:	d829      	bhi.n	1fdc8 <dk_set_leds_state+0xa0>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1fd74:	fa27 f304 	lsr.w	r3, r7, r4
   1fd78:	f013 0f01 	tst.w	r3, #1
   1fd7c:	d104      	bne.n	1fd88 <dk_set_leds_state+0x60>
   1fd7e:	fa28 f204 	lsr.w	r2, r8, r4
   1fd82:	f012 0f01 	tst.w	r2, #1
   1fd86:	d0f2      	beq.n	1fd6e <dk_set_leds_state+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   1fd88:	4a14      	ldr	r2, [pc, #80]	; (1fddc <dk_set_leds_state+0xb4>)
   1fd8a:	f852 9024 	ldr.w	r9, [r2, r4, lsl #2]
   1fd8e:	4a14      	ldr	r2, [pc, #80]	; (1fde0 <dk_set_leds_state+0xb8>)
   1fd90:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   1fd94:	7912      	ldrb	r2, [r2, #4]
   1fd96:	43db      	mvns	r3, r3
   1fd98:	f003 0501 	and.w	r5, r3, #1
	const struct gpio_driver_config *const cfg =
   1fd9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fda0:	681b      	ldr	r3, [r3, #0]
   1fda2:	2601      	movs	r6, #1
   1fda4:	4096      	lsls	r6, r2
   1fda6:	4233      	tst	r3, r6
   1fda8:	d0cb      	beq.n	1fd42 <dk_set_leds_state+0x1a>
	if (value != 0)	{
   1fdaa:	2d00      	cmp	r5, #0
   1fdac:	d0d7      	beq.n	1fd5e <dk_set_leds_state+0x36>
	const struct gpio_driver_api *api =
   1fdae:	f8d9 3008 	ldr.w	r3, [r9, #8]
	return api->port_set_bits_raw(port, pins);
   1fdb2:	68db      	ldr	r3, [r3, #12]
   1fdb4:	4631      	mov	r1, r6
   1fdb6:	4648      	mov	r0, r9
   1fdb8:	4798      	blx	r3
   1fdba:	4605      	mov	r5, r0
   1fdbc:	e7d6      	b.n	1fd6c <dk_set_leds_state+0x44>
				LOG_ERR("Cannot write LED gpio");
   1fdbe:	2145      	movs	r1, #69	; 0x45
   1fdc0:	4808      	ldr	r0, [pc, #32]	; (1fde4 <dk_set_leds_state+0xbc>)
   1fdc2:	f008 fe5f 	bl	28a84 <z_log_minimal_printk>
				return err;
   1fdc6:	e000      	b.n	1fdca <dk_set_leds_state+0xa2>
			}
		}
	}

	return 0;
   1fdc8:	2500      	movs	r5, #0
}
   1fdca:	4628      	mov	r0, r5
   1fdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   1fdd0:	f06f 0515 	mvn.w	r5, #21
   1fdd4:	e7f9      	b.n	1fdca <dk_set_leds_state+0xa2>
   1fdd6:	bf00      	nop
   1fdd8:	0002f968 	.word	0x0002f968
   1fddc:	20002a4c 	.word	0x20002a4c
   1fde0:	00032ccc 	.word	0x00032ccc
   1fde4:	00032c3c 	.word	0x00032c3c
   1fde8:	00032af4 	.word	0x00032af4

0001fdec <dk_leds_init>:
{
   1fdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1fdf0:	2500      	movs	r5, #0
   1fdf2:	e023      	b.n	1fe3c <dk_leds_init+0x50>
			LOG_ERR("Cannot bind gpio device");
   1fdf4:	2145      	movs	r1, #69	; 0x45
   1fdf6:	4826      	ldr	r0, [pc, #152]	; (1fe90 <dk_leds_init+0xa4>)
   1fdf8:	f008 fe44 	bl	28a84 <z_log_minimal_printk>
			return -ENODEV;
   1fdfc:	f06f 0412 	mvn.w	r4, #18
   1fe00:	e042      	b.n	1fe88 <dk_leds_init+0x9c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fe02:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1fea4 <dk_leds_init+0xb8>
   1fe06:	f44f 723c 	mov.w	r2, #752	; 0x2f0
   1fe0a:	4651      	mov	r1, sl
   1fe0c:	4821      	ldr	r0, [pc, #132]	; (1fe94 <dk_leds_init+0xa8>)
   1fe0e:	f008 fa98 	bl	28342 <printk>
   1fe12:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1fe16:	4650      	mov	r0, sl
   1fe18:	f008 fe2c 	bl	28a74 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1fe1c:	f8d8 3000 	ldr.w	r3, [r8]
   1fe20:	ea23 0606 	bic.w	r6, r3, r6
   1fe24:	f8c8 6000 	str.w	r6, [r8]
	return api->pin_configure(port, pin, flags);
   1fe28:	f8d9 3000 	ldr.w	r3, [r9]
   1fe2c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1fe30:	4639      	mov	r1, r7
   1fe32:	4620      	mov	r0, r4
   1fe34:	4798      	blx	r3
		if (err) {
   1fe36:	4604      	mov	r4, r0
   1fe38:	b9e0      	cbnz	r0, 1fe74 <dk_leds_init+0x88>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1fe3a:	3501      	adds	r5, #1
   1fe3c:	2d03      	cmp	r5, #3
   1fe3e:	d81e      	bhi.n	1fe7e <dk_leds_init+0x92>
		led_devs[i] = device_get_binding(led_pins[i].port);
   1fe40:	4b15      	ldr	r3, [pc, #84]	; (1fe98 <dk_leds_init+0xac>)
   1fe42:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   1fe46:	f001 fc73 	bl	21730 <z_impl_device_get_binding>
   1fe4a:	4604      	mov	r4, r0
   1fe4c:	4b13      	ldr	r3, [pc, #76]	; (1fe9c <dk_leds_init+0xb0>)
   1fe4e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
		if (!led_devs[i]) {
   1fe52:	2800      	cmp	r0, #0
   1fe54:	d0ce      	beq.n	1fdf4 <dk_leds_init+0x8>
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   1fe56:	4b10      	ldr	r3, [pc, #64]	; (1fe98 <dk_leds_init+0xac>)
   1fe58:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1fe5c:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   1fe5e:	f8d0 9008 	ldr.w	r9, [r0, #8]
	const struct gpio_driver_config *const cfg =
   1fe62:	6843      	ldr	r3, [r0, #4]
	struct gpio_driver_data *data =
   1fe64:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fe68:	681b      	ldr	r3, [r3, #0]
   1fe6a:	2601      	movs	r6, #1
   1fe6c:	40be      	lsls	r6, r7
   1fe6e:	4233      	tst	r3, r6
   1fe70:	d1d4      	bne.n	1fe1c <dk_leds_init+0x30>
   1fe72:	e7c6      	b.n	1fe02 <dk_leds_init+0x16>
			LOG_ERR("Cannot configure LED gpio");
   1fe74:	2145      	movs	r1, #69	; 0x45
   1fe76:	480a      	ldr	r0, [pc, #40]	; (1fea0 <dk_leds_init+0xb4>)
   1fe78:	f008 fe04 	bl	28a84 <z_log_minimal_printk>
			return err;
   1fe7c:	e004      	b.n	1fe88 <dk_leds_init+0x9c>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   1fe7e:	210f      	movs	r1, #15
   1fe80:	2000      	movs	r0, #0
   1fe82:	f7ff ff51 	bl	1fd28 <dk_set_leds_state>
   1fe86:	4604      	mov	r4, r0
}
   1fe88:	4620      	mov	r0, r4
   1fe8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fe8e:	bf00      	nop
   1fe90:	00032bbc 	.word	0x00032bbc
   1fe94:	0002f968 	.word	0x0002f968
   1fe98:	00032ccc 	.word	0x00032ccc
   1fe9c:	20002a4c 	.word	0x20002a4c
   1fea0:	00032c58 	.word	0x00032c58
   1fea4:	00032af4 	.word	0x00032af4

0001fea8 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1fea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(led_pins)) {
   1feaa:	2803      	cmp	r0, #3
   1feac:	d819      	bhi.n	1fee2 <dk_set_led+0x3a>
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   1feae:	4b1d      	ldr	r3, [pc, #116]	; (1ff24 <dk_set_led+0x7c>)
   1feb0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1feb4:	4b1c      	ldr	r3, [pc, #112]	; (1ff28 <dk_set_led+0x80>)
   1feb6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1feba:	7902      	ldrb	r2, [r0, #4]
   1febc:	fab1 f481 	clz	r4, r1
   1fec0:	0964      	lsrs	r4, r4, #5
	const struct gpio_driver_config *const cfg =
   1fec2:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fec4:	681b      	ldr	r3, [r3, #0]
   1fec6:	2501      	movs	r5, #1
   1fec8:	4095      	lsls	r5, r2
   1feca:	422b      	tst	r3, r5
   1fecc:	d010      	beq.n	1fef0 <dk_set_led+0x48>
	if (value != 0)	{
   1fece:	b1e4      	cbz	r4, 1ff0a <dk_set_led+0x62>
	const struct gpio_driver_api *api =
   1fed0:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   1fed2:	68db      	ldr	r3, [r3, #12]
   1fed4:	4629      	mov	r1, r5
   1fed6:	4630      	mov	r0, r6
   1fed8:	4798      	blx	r3
   1feda:	4604      	mov	r4, r0
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
   1fedc:	b9e4      	cbnz	r4, 1ff18 <dk_set_led+0x70>
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1fede:	4620      	mov	r0, r4
   1fee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("LED index out of the range");
   1fee2:	2145      	movs	r1, #69	; 0x45
   1fee4:	4811      	ldr	r0, [pc, #68]	; (1ff2c <dk_set_led+0x84>)
   1fee6:	f008 fdcd 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   1feea:	f06f 0415 	mvn.w	r4, #21
   1feee:	e7f6      	b.n	1fede <dk_set_led+0x36>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1fef0:	4f0f      	ldr	r7, [pc, #60]	; (1ff30 <dk_set_led+0x88>)
   1fef2:	f240 4284 	movw	r2, #1156	; 0x484
   1fef6:	4639      	mov	r1, r7
   1fef8:	480e      	ldr	r0, [pc, #56]	; (1ff34 <dk_set_led+0x8c>)
   1fefa:	f008 fa22 	bl	28342 <printk>
   1fefe:	f240 4184 	movw	r1, #1156	; 0x484
   1ff02:	4638      	mov	r0, r7
   1ff04:	f008 fdb6 	bl	28a74 <assert_post_action>
   1ff08:	e7e1      	b.n	1fece <dk_set_led+0x26>
	const struct gpio_driver_api *api =
   1ff0a:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   1ff0c:	691b      	ldr	r3, [r3, #16]
   1ff0e:	4629      	mov	r1, r5
   1ff10:	4630      	mov	r0, r6
   1ff12:	4798      	blx	r3
   1ff14:	4604      	mov	r4, r0
   1ff16:	e7e1      	b.n	1fedc <dk_set_led+0x34>
		LOG_ERR("Cannot write LED gpio");
   1ff18:	2145      	movs	r1, #69	; 0x45
   1ff1a:	4807      	ldr	r0, [pc, #28]	; (1ff38 <dk_set_led+0x90>)
   1ff1c:	f008 fdb2 	bl	28a84 <z_log_minimal_printk>
   1ff20:	e7dd      	b.n	1fede <dk_set_led+0x36>
   1ff22:	bf00      	nop
   1ff24:	20002a4c 	.word	0x20002a4c
   1ff28:	00032ccc 	.word	0x00032ccc
   1ff2c:	00032c78 	.word	0x00032c78
   1ff30:	00032af4 	.word	0x00032af4
   1ff34:	0002f968 	.word	0x0002f968
   1ff38:	00032c3c 	.word	0x00032c3c

0001ff3c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1ff3c:	b508      	push	{r3, lr}
   1ff3e:	4602      	mov	r2, r0
   1ff40:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1ff42:	4802      	ldr	r0, [pc, #8]	; (1ff4c <multithreading_lock_acquire+0x10>)
   1ff44:	f002 f9a6 	bl	22294 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1ff48:	bd08      	pop	{r3, pc}
   1ff4a:	bf00      	nop
   1ff4c:	200007d8 	.word	0x200007d8

0001ff50 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1ff50:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1ff52:	4802      	ldr	r0, [pc, #8]	; (1ff5c <multithreading_lock_release+0xc>)
   1ff54:	f002 fa94 	bl	22480 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1ff58:	bd08      	pop	{r3, pc}
   1ff5a:	bf00      	nop
   1ff5c:	200007d8 	.word	0x200007d8

0001ff60 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1ff60:	b508      	push	{r3, lr}
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1ff62:	2145      	movs	r1, #69	; 0x45
   1ff64:	4802      	ldr	r0, [pc, #8]	; (1ff70 <k_sys_fatal_error_handler+0x10>)
   1ff66:	f008 fd8d 	bl	28a84 <z_log_minimal_printk>
		sys_arch_reboot(0);
   1ff6a:	2000      	movs	r0, #0
   1ff6c:	f7f3 ff28 	bl	13dc0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1ff70:	00032cec 	.word	0x00032cec

0001ff74 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1ff74:	b508      	push	{r3, lr}
   1ff76:	4602      	mov	r2, r0
   1ff78:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1ff7a:	2145      	movs	r1, #69	; 0x45
   1ff7c:	4804      	ldr	r0, [pc, #16]	; (1ff90 <sdc_assertion_handler+0x1c>)
   1ff7e:	f008 fd81 	bl	28a84 <z_log_minimal_printk>
	k_oops();
   1ff82:	4040      	eors	r0, r0
   1ff84:	f380 8811 	msr	BASEPRI, r0
   1ff88:	f04f 0003 	mov.w	r0, #3
   1ff8c:	df02      	svc	2
}
   1ff8e:	bd08      	pop	{r3, pc}
   1ff90:	00032d10 	.word	0x00032d10

0001ff94 <host_signal>:
		k_yield();
	}
}

void host_signal(void)
{
   1ff94:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1ff96:	4802      	ldr	r0, [pc, #8]	; (1ffa0 <host_signal+0xc>)
   1ff98:	f002 fc7e 	bl	22898 <z_impl_k_sem_give>
	/* Wake up the RX event/data thread */
	k_sem_give(&sem_recv);
}
   1ff9c:	bd08      	pop	{r3, pc}
   1ff9e:	bf00      	nop
   1ffa0:	2000086c 	.word	0x2000086c

0001ffa4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1ffa4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1ffa6:	4803      	ldr	r0, [pc, #12]	; (1ffb4 <hci_driver_init+0x10>)
   1ffa8:	f7f5 ffba 	bl	15f20 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1ffac:	4802      	ldr	r0, [pc, #8]	; (1ffb8 <hci_driver_init+0x14>)
   1ffae:	f7e3 fecd 	bl	3d4c <sdc_init>
	return err;
}
   1ffb2:	bd08      	pop	{r3, pc}
   1ffb4:	00032ec0 	.word	0x00032ec0
   1ffb8:	0001ff75 	.word	0x0001ff75

0001ffbc <acl_handle>:
{
   1ffbc:	b538      	push	{r3, r4, r5, lr}
   1ffbe:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ffc0:	f04f 30ff 	mov.w	r0, #4294967295
   1ffc4:	f04f 31ff 	mov.w	r1, #4294967295
   1ffc8:	f7ff ffb8 	bl	1ff3c <multithreading_lock_acquire>
	if (!errcode) {
   1ffcc:	4605      	mov	r5, r0
   1ffce:	b108      	cbz	r0, 1ffd4 <acl_handle+0x18>
}
   1ffd0:	4628      	mov	r0, r5
   1ffd2:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1ffd4:	68a0      	ldr	r0, [r4, #8]
   1ffd6:	f7ec fb51 	bl	c67c <sdc_hci_data_put>
   1ffda:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1ffdc:	f7ff ffb8 	bl	1ff50 <multithreading_lock_release>
		if (errcode) {
   1ffe0:	2d00      	cmp	r5, #0
   1ffe2:	d0f5      	beq.n	1ffd0 <acl_handle+0x14>
   1ffe4:	4801      	ldr	r0, [pc, #4]	; (1ffec <acl_handle+0x30>)
   1ffe6:	f002 fc57 	bl	22898 <z_impl_k_sem_give>
}
   1ffea:	e7f1      	b.n	1ffd0 <acl_handle+0x14>
   1ffec:	2000086c 	.word	0x2000086c

0001fff0 <cmd_handle>:
{
   1fff0:	b538      	push	{r3, r4, r5, lr}
   1fff2:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fff4:	f04f 30ff 	mov.w	r0, #4294967295
   1fff8:	f04f 31ff 	mov.w	r1, #4294967295
   1fffc:	f7ff ff9e 	bl	1ff3c <multithreading_lock_acquire>
	if (!errcode) {
   20000:	4604      	mov	r4, r0
   20002:	b110      	cbz	r0, 2000a <cmd_handle+0x1a>
	if (errcode) {
   20004:	b144      	cbz	r4, 20018 <cmd_handle+0x28>
}
   20006:	4620      	mov	r0, r4
   20008:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   2000a:	68a8      	ldr	r0, [r5, #8]
   2000c:	f000 f9ca 	bl	203a4 <hci_internal_cmd_put>
   20010:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   20012:	f7ff ff9d 	bl	1ff50 <multithreading_lock_release>
   20016:	e7f5      	b.n	20004 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   20018:	4801      	ldr	r0, [pc, #4]	; (20020 <cmd_handle+0x30>)
   2001a:	f002 fc3d 	bl	22898 <z_impl_k_sem_give>
	return 0;
   2001e:	e7f2      	b.n	20006 <cmd_handle+0x16>
   20020:	2000086c 	.word	0x2000086c

00020024 <rand_prio_low_vector_get_blocking>:
{
   20024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20028:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   2002a:	4b13      	ldr	r3, [pc, #76]	; (20078 <rand_prio_low_vector_get_blocking+0x54>)
   2002c:	681e      	ldr	r6, [r3, #0]
   2002e:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   20030:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   20032:	683b      	ldr	r3, [r7, #0]
   20034:	b13b      	cbz	r3, 20046 <rand_prio_low_vector_get_blocking+0x22>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   20036:	683b      	ldr	r3, [r7, #0]
   20038:	462a      	mov	r2, r5
   2003a:	4621      	mov	r1, r4
   2003c:	4630      	mov	r0, r6
   2003e:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   20040:	b968      	cbnz	r0, 2005e <rand_prio_low_vector_get_blocking+0x3a>
}
   20042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(api->get_entropy != NULL,
   20046:	f8df 803c 	ldr.w	r8, [pc, #60]	; 20084 <rand_prio_low_vector_get_blocking+0x60>
   2004a:	224b      	movs	r2, #75	; 0x4b
   2004c:	4641      	mov	r1, r8
   2004e:	480b      	ldr	r0, [pc, #44]	; (2007c <rand_prio_low_vector_get_blocking+0x58>)
   20050:	f008 f977 	bl	28342 <printk>
   20054:	214b      	movs	r1, #75	; 0x4b
   20056:	4640      	mov	r0, r8
   20058:	f008 fd0c 	bl	28a74 <assert_post_action>
   2005c:	e7eb      	b.n	20036 <rand_prio_low_vector_get_blocking+0x12>
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   2005e:	4c08      	ldr	r4, [pc, #32]	; (20080 <rand_prio_low_vector_get_blocking+0x5c>)
   20060:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
   20064:	4621      	mov	r1, r4
   20066:	4805      	ldr	r0, [pc, #20]	; (2007c <rand_prio_low_vector_get_blocking+0x58>)
   20068:	f008 f96b 	bl	28342 <printk>
   2006c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   20070:	4620      	mov	r0, r4
   20072:	f008 fcff 	bl	28a74 <assert_post_action>
}
   20076:	e7e4      	b.n	20042 <rand_prio_low_vector_get_blocking+0x1e>
   20078:	20002a64 	.word	0x20002a64
   2007c:	0002f968 	.word	0x0002f968
   20080:	00032d6c 	.word	0x00032d6c
   20084:	00032d3c 	.word	0x00032d3c

00020088 <rand_prio_high_vector_get>:
{
   20088:	b538      	push	{r3, r4, r5, lr}
   2008a:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   2008c:	4b0e      	ldr	r3, [pc, #56]	; (200c8 <rand_prio_high_vector_get+0x40>)
   2008e:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   20090:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   20092:	685d      	ldr	r5, [r3, #4]
   20094:	b14d      	cbz	r5, 200aa <rand_prio_high_vector_get+0x22>
   20096:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   20098:	2300      	movs	r3, #0
   2009a:	4621      	mov	r1, r4
   2009c:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   2009e:	1e04      	subs	r4, r0, #0
   200a0:	db05      	blt.n	200ae <rand_prio_high_vector_get+0x26>
	return ret >= 0 ? ret : 0;
   200a2:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   200a6:	b2c0      	uxtb	r0, r0
   200a8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   200aa:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   200ae:	4d07      	ldr	r5, [pc, #28]	; (200cc <rand_prio_high_vector_get+0x44>)
   200b0:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
   200b4:	4629      	mov	r1, r5
   200b6:	4806      	ldr	r0, [pc, #24]	; (200d0 <rand_prio_high_vector_get+0x48>)
   200b8:	f008 f943 	bl	28342 <printk>
   200bc:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   200c0:	4628      	mov	r0, r5
   200c2:	f008 fcd7 	bl	28a74 <assert_post_action>
   200c6:	e7ec      	b.n	200a2 <rand_prio_high_vector_get+0x1a>
   200c8:	20002a64 	.word	0x20002a64
   200cc:	00032d6c 	.word	0x00032d6c
   200d0:	0002f968 	.word	0x0002f968

000200d4 <rand_prio_low_vector_get>:
{
   200d4:	b538      	push	{r3, r4, r5, lr}
   200d6:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   200d8:	4b0e      	ldr	r3, [pc, #56]	; (20114 <rand_prio_low_vector_get+0x40>)
   200da:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   200dc:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   200de:	685d      	ldr	r5, [r3, #4]
   200e0:	b14d      	cbz	r5, 200f6 <rand_prio_low_vector_get+0x22>
   200e2:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   200e4:	2300      	movs	r3, #0
   200e6:	4621      	mov	r1, r4
   200e8:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   200ea:	1e04      	subs	r4, r0, #0
   200ec:	db05      	blt.n	200fa <rand_prio_low_vector_get+0x26>
	return ret >= 0 ? ret : 0;
   200ee:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   200f2:	b2c0      	uxtb	r0, r0
   200f4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   200f6:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   200fa:	4d07      	ldr	r5, [pc, #28]	; (20118 <rand_prio_low_vector_get+0x44>)
   200fc:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
   20100:	4629      	mov	r1, r5
   20102:	4806      	ldr	r0, [pc, #24]	; (2011c <rand_prio_low_vector_get+0x48>)
   20104:	f008 f91d 	bl	28342 <printk>
   20108:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   2010c:	4628      	mov	r0, r5
   2010e:	f008 fcb1 	bl	28a74 <assert_post_action>
   20112:	e7ec      	b.n	200ee <rand_prio_low_vector_get+0x1a>
   20114:	20002a64 	.word	0x20002a64
   20118:	00032d6c 	.word	0x00032d6c
   2011c:	0002f968 	.word	0x0002f968

00020120 <event_packet_process>:
{
   20120:	b570      	push	{r4, r5, r6, lr}
   20122:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   20124:	f00e f8ca 	bl	2e2bc <event_packet_is_discardable>
   20128:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   2012a:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2012c:	461d      	mov	r5, r3
   2012e:	b183      	cbz	r3, 20152 <event_packet_process+0x32>
   20130:	2200      	movs	r2, #0
   20132:	2300      	movs	r3, #0
   20134:	4629      	mov	r1, r5
   20136:	f7f4 fb0b 	bl	14750 <bt_buf_get_evt>
	if (!evt_buf) {
   2013a:	4606      	mov	r6, r0
   2013c:	b170      	cbz	r0, 2015c <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   2013e:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20140:	3202      	adds	r2, #2
   20142:	4621      	mov	r1, r4
   20144:	3008      	adds	r0, #8
   20146:	f00d fcc2 	bl	2dace <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2014a:	4630      	mov	r0, r6
   2014c:	f7f5 fea4 	bl	15e98 <bt_recv>
}
   20150:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   20152:	f04f 32ff 	mov.w	r2, #4294967295
   20156:	f04f 33ff 	mov.w	r3, #4294967295
   2015a:	e7eb      	b.n	20134 <event_packet_process+0x14>
		if (discardable) {
   2015c:	2d00      	cmp	r5, #0
   2015e:	d1f7      	bne.n	20150 <event_packet_process+0x30>
		BT_ERR("No event buffer available");
   20160:	2145      	movs	r1, #69	; 0x45
   20162:	4802      	ldr	r0, [pc, #8]	; (2016c <event_packet_process+0x4c>)
   20164:	f008 fc8e 	bl	28a84 <z_log_minimal_printk>
		return;
   20168:	e7f2      	b.n	20150 <event_packet_process+0x30>
   2016a:	bf00      	nop
   2016c:	00032da8 	.word	0x00032da8

00020170 <data_packet_process>:
{
   20170:	b538      	push	{r3, r4, r5, lr}
   20172:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   20174:	f04f 32ff 	mov.w	r2, #4294967295
   20178:	f04f 33ff 	mov.w	r3, #4294967295
   2017c:	2003      	movs	r0, #3
   2017e:	f7f4 faa3 	bl	146c8 <bt_buf_get_rx>
	if (!data_buf) {
   20182:	b150      	cbz	r0, 2019a <data_packet_process+0x2a>
   20184:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   20186:	8862      	ldrh	r2, [r4, #2]
   20188:	3204      	adds	r2, #4
   2018a:	4621      	mov	r1, r4
   2018c:	3008      	adds	r0, #8
   2018e:	f00d fc9e 	bl	2dace <net_buf_simple_add_mem>
	bt_recv(data_buf);
   20192:	4628      	mov	r0, r5
   20194:	f7f5 fe80 	bl	15e98 <bt_recv>
}
   20198:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("No data buffer available");
   2019a:	2145      	movs	r1, #69	; 0x45
   2019c:	4801      	ldr	r0, [pc, #4]	; (201a4 <data_packet_process+0x34>)
   2019e:	f008 fc71 	bl	28a84 <z_log_minimal_printk>
		return;
   201a2:	e7f9      	b.n	20198 <data_packet_process+0x28>
   201a4:	00032dc8 	.word	0x00032dc8

000201a8 <recv_thread>:
{
   201a8:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   201aa:	2500      	movs	r5, #0
	bool received_evt = false;
   201ac:	462c      	mov	r4, r5
   201ae:	e00a      	b.n	201c6 <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   201b0:	4d0b      	ldr	r5, [pc, #44]	; (201e0 <recv_thread+0x38>)
   201b2:	4628      	mov	r0, r5
   201b4:	f00e f8b6 	bl	2e324 <fetch_and_process_hci_evt>
   201b8:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   201ba:	4628      	mov	r0, r5
   201bc:	f00e f8cb 	bl	2e356 <fetch_and_process_acl_data>
   201c0:	4605      	mov	r5, r0
	z_impl_k_yield();
   201c2:	f004 f85b 	bl	2427c <z_impl_k_yield>
		if (!received_evt && !received_data) {
   201c6:	2c00      	cmp	r4, #0
   201c8:	d1f2      	bne.n	201b0 <recv_thread+0x8>
   201ca:	2d00      	cmp	r5, #0
   201cc:	d1f0      	bne.n	201b0 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   201ce:	f04f 32ff 	mov.w	r2, #4294967295
   201d2:	f04f 33ff 	mov.w	r3, #4294967295
   201d6:	4803      	ldr	r0, [pc, #12]	; (201e4 <recv_thread+0x3c>)
   201d8:	f002 fb9e 	bl	22918 <z_impl_k_sem_take>
   201dc:	e7e8      	b.n	201b0 <recv_thread+0x8>
   201de:	bf00      	nop
   201e0:	20002a68 	.word	0x20002a68
   201e4:	2000086c 	.word	0x2000086c

000201e8 <configure_memory_usage>:
{
   201e8:	b500      	push	{lr}
   201ea:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   201ec:	2000      	movs	r0, #0
   201ee:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   201f2:	aa01      	add	r2, sp, #4
   201f4:	2101      	movs	r1, #1
   201f6:	f7e3 fd29 	bl	3c4c <sdc_cfg_set>
	if (required_memory < 0) {
   201fa:	2800      	cmp	r0, #0
   201fc:	db3c      	blt.n	20278 <configure_memory_usage+0x90>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   201fe:	2301      	movs	r3, #1
   20200:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20204:	aa01      	add	r2, sp, #4
   20206:	2102      	movs	r1, #2
   20208:	2000      	movs	r0, #0
   2020a:	f7e3 fd1f 	bl	3c4c <sdc_cfg_set>
	if (required_memory < 0) {
   2020e:	2800      	cmp	r0, #0
   20210:	db32      	blt.n	20278 <configure_memory_usage+0x90>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   20212:	231b      	movs	r3, #27
   20214:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   20218:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   2021c:	2302      	movs	r3, #2
   2021e:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   20222:	2103      	movs	r1, #3
   20224:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20228:	aa01      	add	r2, sp, #4
   2022a:	2000      	movs	r0, #0
   2022c:	f7e3 fd0e 	bl	3c4c <sdc_cfg_set>
	if (required_memory < 0) {
   20230:	2800      	cmp	r0, #0
   20232:	db21      	blt.n	20278 <configure_memory_usage+0x90>
	cfg.event_length.event_length_us =
   20234:	f641 534c 	movw	r3, #7500	; 0x1d4c
   20238:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2023a:	aa01      	add	r2, sp, #4
   2023c:	2104      	movs	r1, #4
   2023e:	2000      	movs	r0, #0
   20240:	f7e3 fd04 	bl	3c4c <sdc_cfg_set>
	if (required_memory < 0) {
   20244:	2800      	cmp	r0, #0
   20246:	db17      	blt.n	20278 <configure_memory_usage+0x90>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   20248:	2301      	movs	r3, #1
   2024a:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2024e:	aa01      	add	r2, sp, #4
   20250:	2105      	movs	r1, #5
   20252:	2000      	movs	r0, #0
   20254:	f7e3 fcfa 	bl	3c4c <sdc_cfg_set>
	if (required_memory < 0) {
   20258:	2800      	cmp	r0, #0
   2025a:	db0d      	blt.n	20278 <configure_memory_usage+0x90>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   2025c:	231f      	movs	r3, #31
   2025e:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20262:	aa01      	add	r2, sp, #4
   20264:	2107      	movs	r1, #7
   20266:	2000      	movs	r0, #0
   20268:	f7e3 fcf0 	bl	3c4c <sdc_cfg_set>
		if (required_memory < 0) {
   2026c:	2800      	cmp	r0, #0
   2026e:	db03      	blt.n	20278 <configure_memory_usage+0x90>
	if (required_memory > sizeof(sdc_mempool)) {
   20270:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   20274:	d803      	bhi.n	2027e <configure_memory_usage+0x96>
	return 0;
   20276:	2000      	movs	r0, #0
}
   20278:	b003      	add	sp, #12
   2027a:	f85d fb04 	ldr.w	pc, [sp], #4
		BT_ERR("Allocated memory too low: %u < %u",
   2027e:	4603      	mov	r3, r0
   20280:	f44f 62af 	mov.w	r2, #1400	; 0x578
   20284:	2145      	movs	r1, #69	; 0x45
   20286:	4806      	ldr	r0, [pc, #24]	; (202a0 <configure_memory_usage+0xb8>)
   20288:	f008 fbfc 	bl	28a84 <z_log_minimal_printk>
		k_panic();
   2028c:	4040      	eors	r0, r0
   2028e:	f380 8811 	msr	BASEPRI, r0
   20292:	f04f 0004 	mov.w	r0, #4
   20296:	df02      	svc	2
		return -ENOMEM;
   20298:	f06f 000b 	mvn.w	r0, #11
   2029c:	e7ec      	b.n	20278 <configure_memory_usage+0x90>
   2029e:	bf00      	nop
   202a0:	00032de8 	.word	0x00032de8

000202a4 <hci_driver_open>:
{
   202a4:	b530      	push	{r4, r5, lr}
   202a6:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   202a8:	4c31      	ldr	r4, [pc, #196]	; (20370 <hci_driver_open+0xcc>)
   202aa:	2200      	movs	r2, #0
   202ac:	2300      	movs	r3, #0
   202ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
   202b2:	2300      	movs	r3, #0
   202b4:	9304      	str	r3, [sp, #16]
   202b6:	f06f 0209 	mvn.w	r2, #9
   202ba:	9203      	str	r2, [sp, #12]
   202bc:	9302      	str	r3, [sp, #8]
   202be:	9301      	str	r3, [sp, #4]
   202c0:	9300      	str	r3, [sp, #0]
   202c2:	4b2c      	ldr	r3, [pc, #176]	; (20374 <hci_driver_open+0xd0>)
   202c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   202c8:	492b      	ldr	r1, [pc, #172]	; (20378 <hci_driver_open+0xd4>)
   202ca:	4620      	mov	r0, r4
   202cc:	f001 fefe 	bl	220cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   202d0:	492a      	ldr	r1, [pc, #168]	; (2037c <hci_driver_open+0xd8>)
   202d2:	4620      	mov	r0, r4
   202d4:	f001 fdbc 	bl	21e50 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   202d8:	a80b      	add	r0, sp, #44	; 0x2c
   202da:	f7e3 fca9 	bl	3c30 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   202de:	4a28      	ldr	r2, [pc, #160]	; (20380 <hci_driver_open+0xdc>)
   202e0:	2149      	movs	r1, #73	; 0x49
   202e2:	4828      	ldr	r0, [pc, #160]	; (20384 <hci_driver_open+0xe0>)
   202e4:	f008 fbce 	bl	28a84 <z_log_minimal_printk>
   202e8:	2214      	movs	r2, #20
   202ea:	a90b      	add	r1, sp, #44	; 0x2c
   202ec:	2003      	movs	r0, #3
   202ee:	f7f1 fa67 	bl	117c0 <z_log_minimal_hexdump_print>
	err = configure_supported_features();
   202f2:	f00e f849 	bl	2e388 <configure_supported_features>
	if (err) {
   202f6:	b118      	cbz	r0, 20300 <hci_driver_open+0x5c>
		return -err;
   202f8:	4244      	negs	r4, r0
}
   202fa:	4620      	mov	r0, r4
   202fc:	b011      	add	sp, #68	; 0x44
   202fe:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   20300:	f7ff ff72 	bl	201e8 <configure_memory_usage>
	if (err) {
   20304:	4604      	mov	r4, r0
   20306:	2800      	cmp	r0, #0
   20308:	d1f7      	bne.n	202fa <hci_driver_open+0x56>
   2030a:	481f      	ldr	r0, [pc, #124]	; (20388 <hci_driver_open+0xe4>)
   2030c:	f001 fa10 	bl	21730 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   20310:	4b1e      	ldr	r3, [pc, #120]	; (2038c <hci_driver_open+0xe8>)
   20312:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   20314:	b1a8      	cbz	r0, 20342 <hci_driver_open+0x9e>
	sdc_rand_source_t rand_functions = {
   20316:	4a1e      	ldr	r2, [pc, #120]	; (20390 <hci_driver_open+0xec>)
   20318:	ab08      	add	r3, sp, #32
   2031a:	ca07      	ldmia	r2, {r0, r1, r2}
   2031c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   20320:	4618      	mov	r0, r3
   20322:	f7e3 fe23 	bl	3f6c <sdc_rand_source_register>
	if (err) {
   20326:	4604      	mov	r4, r0
   20328:	b990      	cbnz	r0, 20350 <hci_driver_open+0xac>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2032a:	f04f 30ff 	mov.w	r0, #4294967295
   2032e:	f04f 31ff 	mov.w	r1, #4294967295
   20332:	f7ff fe03 	bl	1ff3c <multithreading_lock_acquire>
	if (!err) {
   20336:	4605      	mov	r5, r0
   20338:	b190      	cbz	r0, 20360 <hci_driver_open+0xbc>
	if (err < 0) {
   2033a:	2d00      	cmp	r5, #0
   2033c:	dadd      	bge.n	202fa <hci_driver_open+0x56>
		return err;
   2033e:	462c      	mov	r4, r5
   20340:	e7db      	b.n	202fa <hci_driver_open+0x56>
		BT_ERR("An entropy source is required");
   20342:	2145      	movs	r1, #69	; 0x45
   20344:	4813      	ldr	r0, [pc, #76]	; (20394 <hci_driver_open+0xf0>)
   20346:	f008 fb9d 	bl	28a84 <z_log_minimal_printk>
		return -ENODEV;
   2034a:	f06f 0412 	mvn.w	r4, #18
   2034e:	e7d4      	b.n	202fa <hci_driver_open+0x56>
		BT_ERR("Failed to register rand source (%d)", err);
   20350:	4602      	mov	r2, r0
   20352:	2145      	movs	r1, #69	; 0x45
   20354:	4810      	ldr	r0, [pc, #64]	; (20398 <hci_driver_open+0xf4>)
   20356:	f008 fb95 	bl	28a84 <z_log_minimal_printk>
		return -EINVAL;
   2035a:	f06f 0415 	mvn.w	r4, #21
   2035e:	e7cc      	b.n	202fa <hci_driver_open+0x56>
		err = sdc_enable(host_signal, sdc_mempool);
   20360:	490e      	ldr	r1, [pc, #56]	; (2039c <hci_driver_open+0xf8>)
   20362:	480f      	ldr	r0, [pc, #60]	; (203a0 <hci_driver_open+0xfc>)
   20364:	f7e3 fcca 	bl	3cfc <sdc_enable>
   20368:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2036a:	f7ff fdf1 	bl	1ff50 <multithreading_lock_release>
   2036e:	e7e4      	b.n	2033a <hci_driver_open+0x96>
   20370:	20001ce0 	.word	0x20001ce0
   20374:	000201a9 	.word	0x000201a9
   20378:	200054c0 	.word	0x200054c0
   2037c:	00032e10 	.word	0x00032e10
   20380:	00032e18 	.word	0x00032e18
   20384:	00032e40 	.word	0x00032e40
   20388:	00032a64 	.word	0x00032a64
   2038c:	20002a64 	.word	0x20002a64
   20390:	0002f59c 	.word	0x0002f59c
   20394:	00032e48 	.word	0x00032e48
   20398:	00032e6c 	.word	0x00032e6c
   2039c:	20002ab4 	.word	0x20002ab4
   203a0:	0001ff95 	.word	0x0001ff95

000203a4 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   203a4:	4b0b      	ldr	r3, [pc, #44]	; (203d4 <hci_internal_cmd_put+0x30>)
   203a6:	781b      	ldrb	r3, [r3, #0]
   203a8:	b96b      	cbnz	r3, 203c6 <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   203aa:	7883      	ldrb	r3, [r0, #2]
   203ac:	3303      	adds	r3, #3
   203ae:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   203b2:	dc0b      	bgt.n	203cc <hci_internal_cmd_put+0x28>
{
   203b4:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   203b6:	4c07      	ldr	r4, [pc, #28]	; (203d4 <hci_internal_cmd_put+0x30>)
   203b8:	1c61      	adds	r1, r4, #1
   203ba:	f00e fac0 	bl	2e93e <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   203be:	2301      	movs	r3, #1
   203c0:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   203c2:	2000      	movs	r0, #0
}
   203c4:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   203c6:	f04f 30ff 	mov.w	r0, #4294967295
   203ca:	4770      	bx	lr
		return -EINVAL;
   203cc:	f06f 0015 	mvn.w	r0, #21
}
   203d0:	4770      	bx	lr
   203d2:	bf00      	nop
   203d4:	2000302c 	.word	0x2000302c

000203d8 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   203d8:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   203da:	4b07      	ldr	r3, [pc, #28]	; (203f8 <hci_internal_evt_get+0x20>)
   203dc:	781b      	ldrb	r3, [r3, #0]
   203de:	b913      	cbnz	r3, 203e6 <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   203e0:	f7ec f957 	bl	c692 <sdc_hci_evt_get>
}
   203e4:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   203e6:	4c04      	ldr	r4, [pc, #16]	; (203f8 <hci_internal_evt_get+0x20>)
   203e8:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   203ea:	3202      	adds	r2, #2
   203ec:	1c61      	adds	r1, r4, #1
   203ee:	f00a fa56 	bl	2a89e <memcpy>
		cmd_complete_or_status.occurred = false;
   203f2:	2000      	movs	r0, #0
   203f4:	7020      	strb	r0, [r4, #0]
		return 0;
   203f6:	e7f5      	b.n	203e4 <hci_internal_evt_get+0xc>
   203f8:	2000302c 	.word	0x2000302c

000203fc <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   203fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20400:	4607      	mov	r7, r0
   20402:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   20404:	4b12      	ldr	r3, [pc, #72]	; (20450 <bt_rand+0x54>)
   20406:	681b      	ldr	r3, [r3, #0]
   20408:	b163      	cbz	r3, 20424 <bt_rand+0x28>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   2040a:	4b11      	ldr	r3, [pc, #68]	; (20450 <bt_rand+0x54>)
   2040c:	681d      	ldr	r5, [r3, #0]
   2040e:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   20410:	68ae      	ldr	r6, [r5, #8]
	__ASSERT(api->get_entropy != NULL,
   20412:	6833      	ldr	r3, [r6, #0]
   20414:	b183      	cbz	r3, 20438 <bt_rand+0x3c>
	return api->get_entropy(dev, buffer, length);
   20416:	6833      	ldr	r3, [r6, #0]
   20418:	4622      	mov	r2, r4
   2041a:	4639      	mov	r1, r7
   2041c:	4628      	mov	r0, r5
   2041e:	4798      	blx	r3
}
   20420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20424:	480b      	ldr	r0, [pc, #44]	; (20454 <bt_rand+0x58>)
   20426:	f001 f983 	bl	21730 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   2042a:	4b09      	ldr	r3, [pc, #36]	; (20450 <bt_rand+0x54>)
   2042c:	6018      	str	r0, [r3, #0]
		if (!dev) {
   2042e:	2800      	cmp	r0, #0
   20430:	d1eb      	bne.n	2040a <bt_rand+0xe>
			return -ENODEV;
   20432:	f06f 0012 	mvn.w	r0, #18
   20436:	e7f3      	b.n	20420 <bt_rand+0x24>
	__ASSERT(api->get_entropy != NULL,
   20438:	f8df 8020 	ldr.w	r8, [pc, #32]	; 2045c <bt_rand+0x60>
   2043c:	224b      	movs	r2, #75	; 0x4b
   2043e:	4641      	mov	r1, r8
   20440:	4805      	ldr	r0, [pc, #20]	; (20458 <bt_rand+0x5c>)
   20442:	f007 ff7e 	bl	28342 <printk>
   20446:	214b      	movs	r1, #75	; 0x4b
   20448:	4640      	mov	r0, r8
   2044a:	f008 fb13 	bl	28a74 <assert_post_action>
   2044e:	e7e2      	b.n	20416 <bt_rand+0x1a>
   20450:	20003074 	.word	0x20003074
   20454:	00032a64 	.word	0x00032a64
   20458:	0002f968 	.word	0x0002f968
   2045c:	00032d3c 	.word	0x00032d3c

00020460 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   20460:	b5f0      	push	{r4, r5, r6, r7, lr}
   20462:	b08d      	sub	sp, #52	; 0x34
   20464:	4605      	mov	r5, r0
   20466:	460c      	mov	r4, r1
   20468:	4616      	mov	r6, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2046a:	ab08      	add	r3, sp, #32
   2046c:	4298      	cmp	r0, r3
   2046e:	d204      	bcs.n	2047a <bt_encrypt_le+0x1a>
   20470:	f100 0310 	add.w	r3, r0, #16
   20474:	aa08      	add	r2, sp, #32
   20476:	4293      	cmp	r3, r2
   20478:	d911      	bls.n	2049e <bt_encrypt_le+0x3e>
   2047a:	ab08      	add	r3, sp, #32
   2047c:	429d      	cmp	r5, r3
   2047e:	d902      	bls.n	20486 <bt_encrypt_le+0x26>
   20480:	ab0c      	add	r3, sp, #48	; 0x30
   20482:	429d      	cmp	r5, r3
   20484:	d20b      	bcs.n	2049e <bt_encrypt_le+0x3e>
   20486:	4f3a      	ldr	r7, [pc, #232]	; (20570 <bt_encrypt_le+0x110>)
   20488:	f240 2217 	movw	r2, #535	; 0x217
   2048c:	4639      	mov	r1, r7
   2048e:	4839      	ldr	r0, [pc, #228]	; (20574 <bt_encrypt_le+0x114>)
   20490:	f007 ff57 	bl	28342 <printk>
   20494:	f240 2117 	movw	r1, #535	; 0x217
   20498:	4638      	mov	r0, r7
   2049a:	f008 faeb 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   2049e:	350f      	adds	r5, #15
	uint8_t *pdst = (uint8_t *)dst;
   204a0:	ab08      	add	r3, sp, #32
	for (; length > 0; length--) {
   204a2:	2210      	movs	r2, #16
   204a4:	b12a      	cbz	r2, 204b2 <bt_encrypt_le+0x52>
		*pdst++ = *psrc--;
   204a6:	f815 1901 	ldrb.w	r1, [r5], #-1
   204aa:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   204ae:	3a01      	subs	r2, #1
   204b0:	e7f8      	b.n	204a4 <bt_encrypt_le+0x44>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   204b2:	ab04      	add	r3, sp, #16
   204b4:	429c      	cmp	r4, r3
   204b6:	d204      	bcs.n	204c2 <bt_encrypt_le+0x62>
   204b8:	f104 0310 	add.w	r3, r4, #16
   204bc:	aa04      	add	r2, sp, #16
   204be:	4293      	cmp	r3, r2
   204c0:	d911      	bls.n	204e6 <bt_encrypt_le+0x86>
   204c2:	ab04      	add	r3, sp, #16
   204c4:	429c      	cmp	r4, r3
   204c6:	d902      	bls.n	204ce <bt_encrypt_le+0x6e>
   204c8:	ab08      	add	r3, sp, #32
   204ca:	429c      	cmp	r4, r3
   204cc:	d20b      	bcs.n	204e6 <bt_encrypt_le+0x86>
   204ce:	4d28      	ldr	r5, [pc, #160]	; (20570 <bt_encrypt_le+0x110>)
   204d0:	f240 2217 	movw	r2, #535	; 0x217
   204d4:	4629      	mov	r1, r5
   204d6:	4827      	ldr	r0, [pc, #156]	; (20574 <bt_encrypt_le+0x114>)
   204d8:	f007 ff33 	bl	28342 <printk>
   204dc:	f240 2117 	movw	r1, #535	; 0x217
   204e0:	4628      	mov	r0, r5
   204e2:	f008 fac7 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   204e6:	340f      	adds	r4, #15
	uint8_t *pdst = (uint8_t *)dst;
   204e8:	ab04      	add	r3, sp, #16
	for (; length > 0; length--) {
   204ea:	2210      	movs	r2, #16
   204ec:	e004      	b.n	204f8 <bt_encrypt_le+0x98>
		*pdst++ = *psrc--;
   204ee:	f814 1901 	ldrb.w	r1, [r4], #-1
   204f2:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   204f6:	3a01      	subs	r2, #1
   204f8:	2a00      	cmp	r2, #0
   204fa:	d1f8      	bne.n	204ee <bt_encrypt_le+0x8e>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   204fc:	f04f 30ff 	mov.w	r0, #4294967295
   20500:	f04f 31ff 	mov.w	r1, #4294967295
   20504:	f7ff fd1a 	bl	1ff3c <multithreading_lock_acquire>

	if (!errcode) {
   20508:	4604      	mov	r4, r0
   2050a:	b118      	cbz	r0, 20514 <bt_encrypt_le+0xb4>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
		MULTITHREADING_LOCK_RELEASE();
	}

	if (!errcode) {
   2050c:	b15c      	cbz	r4, 20526 <bt_encrypt_le+0xc6>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2050e:	4620      	mov	r0, r4
   20510:	b00d      	add	sp, #52	; 0x34
   20512:	bdf0      	pop	{r4, r5, r6, r7, pc}
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   20514:	466a      	mov	r2, sp
   20516:	a904      	add	r1, sp, #16
   20518:	a808      	add	r0, sp, #32
   2051a:	f7eb fe2b 	bl	c174 <sdc_soc_ecb_block_encrypt>
   2051e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   20520:	f7ff fd16 	bl	1ff50 <multithreading_lock_release>
   20524:	e7f2      	b.n	2050c <bt_encrypt_le+0xac>
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   20526:	466b      	mov	r3, sp
   20528:	429e      	cmp	r6, r3
   2052a:	d902      	bls.n	20532 <bt_encrypt_le+0xd2>
   2052c:	ab04      	add	r3, sp, #16
   2052e:	429e      	cmp	r6, r3
   20530:	d213      	bcs.n	2055a <bt_encrypt_le+0xfa>
   20532:	466b      	mov	r3, sp
   20534:	429e      	cmp	r6, r3
   20536:	d204      	bcs.n	20542 <bt_encrypt_le+0xe2>
   20538:	f106 0310 	add.w	r3, r6, #16
   2053c:	466a      	mov	r2, sp
   2053e:	4293      	cmp	r3, r2
   20540:	d90b      	bls.n	2055a <bt_encrypt_le+0xfa>
   20542:	4d0b      	ldr	r5, [pc, #44]	; (20570 <bt_encrypt_le+0x110>)
   20544:	f240 2217 	movw	r2, #535	; 0x217
   20548:	4629      	mov	r1, r5
   2054a:	480a      	ldr	r0, [pc, #40]	; (20574 <bt_encrypt_le+0x114>)
   2054c:	f007 fef9 	bl	28342 <printk>
   20550:	f240 2117 	movw	r1, #535	; 0x217
   20554:	4628      	mov	r0, r5
   20556:	f008 fa8d 	bl	28a74 <assert_post_action>
	psrc += length - 1;
   2055a:	f10d 030f 	add.w	r3, sp, #15
	for (; length > 0; length--) {
   2055e:	2210      	movs	r2, #16
   20560:	2a00      	cmp	r2, #0
   20562:	d0d4      	beq.n	2050e <bt_encrypt_le+0xae>
		*pdst++ = *psrc--;
   20564:	f813 1901 	ldrb.w	r1, [r3], #-1
   20568:	f806 1b01 	strb.w	r1, [r6], #1
	for (; length > 0; length--) {
   2056c:	3a01      	subs	r2, #1
   2056e:	e7f7      	b.n	20560 <bt_encrypt_le+0x100>
   20570:	000305b4 	.word	0x000305b4
   20574:	0002f968 	.word	0x0002f968

00020578 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   20578:	b510      	push	{r4, lr}
   2057a:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   2057c:	f00e fa36 	bl	2e9ec <m_config_clock_source_get>
   20580:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   20584:	2332      	movs	r3, #50	; 0x32
   20586:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   2058a:	2300      	movs	r3, #0
   2058c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   20590:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   20594:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20598:	4a10      	ldr	r2, [pc, #64]	; (205dc <mpsl_lib_init+0x64>)
   2059a:	2119      	movs	r1, #25
   2059c:	4668      	mov	r0, sp
   2059e:	f7e3 f99d 	bl	38dc <mpsl_init>
	if (err) {
   205a2:	4604      	mov	r4, r0
   205a4:	b110      	cbz	r0, 205ac <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   205a6:	4620      	mov	r0, r4
   205a8:	b002      	add	sp, #8
   205aa:	bd10      	pop	{r4, pc}
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   205ac:	2101      	movs	r1, #1
   205ae:	480c      	ldr	r0, [pc, #48]	; (205e0 <mpsl_lib_init+0x68>)
   205b0:	f7eb fae7 	bl	bb82 <mpsl_timeslot_session_count_set>
	if (err) {
   205b4:	4604      	mov	r4, r0
   205b6:	2800      	cmp	r0, #0
   205b8:	d1f5      	bne.n	205a6 <mpsl_lib_init+0x2e>
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   205ba:	2201      	movs	r2, #1
   205bc:	2100      	movs	r1, #0
   205be:	2008      	movs	r0, #8
   205c0:	f7f2 fe62 	bl	13288 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   205c4:	2201      	movs	r2, #1
   205c6:	2100      	movs	r1, #0
   205c8:	200b      	movs	r0, #11
   205ca:	f7f2 fe5d 	bl	13288 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   205ce:	2201      	movs	r2, #1
   205d0:	2100      	movs	r1, #0
   205d2:	4610      	mov	r0, r2
   205d4:	f7f2 fe58 	bl	13288 <z_arm_irq_priority_set>
	return 0;
   205d8:	e7e5      	b.n	205a6 <mpsl_lib_init+0x2e>
   205da:	bf00      	nop
   205dc:	000205e5 	.word	0x000205e5
   205e0:	20003078 	.word	0x20003078

000205e4 <m_assert_handler>:
{
   205e4:	b508      	push	{r3, lr}
   205e6:	4602      	mov	r2, r0
   205e8:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   205ea:	2145      	movs	r1, #69	; 0x45
   205ec:	4804      	ldr	r0, [pc, #16]	; (20600 <m_assert_handler+0x1c>)
   205ee:	f008 fa49 	bl	28a84 <z_log_minimal_printk>
	k_oops();
   205f2:	4040      	eors	r0, r0
   205f4:	f380 8811 	msr	BASEPRI, r0
   205f8:	f04f 0003 	mov.w	r0, #3
   205fc:	df02      	svc	2
}
   205fe:	bd08      	pop	{r3, pc}
   20600:	00032ef8 	.word	0x00032ef8

00020604 <signal_thread>:
{
   20604:	b538      	push	{r3, r4, r5, lr}
   20606:	e003      	b.n	20610 <signal_thread+0xc>
		mpsl_low_priority_process();
   20608:	f7eb fbd2 	bl	bdb0 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   2060c:	f7ff fca0 	bl	1ff50 <multithreading_lock_release>
		k_sem_take(&sem_signal, K_FOREVER);
   20610:	f04f 34ff 	mov.w	r4, #4294967295
   20614:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   20618:	4622      	mov	r2, r4
   2061a:	462b      	mov	r3, r5
   2061c:	4809      	ldr	r0, [pc, #36]	; (20644 <signal_thread+0x40>)
   2061e:	f002 f97b 	bl	22918 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   20622:	4620      	mov	r0, r4
   20624:	4629      	mov	r1, r5
   20626:	f7ff fc89 	bl	1ff3c <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   2062a:	2800      	cmp	r0, #0
   2062c:	d0ec      	beq.n	20608 <signal_thread+0x4>
   2062e:	4c06      	ldr	r4, [pc, #24]	; (20648 <signal_thread+0x44>)
   20630:	2246      	movs	r2, #70	; 0x46
   20632:	4621      	mov	r1, r4
   20634:	4805      	ldr	r0, [pc, #20]	; (2064c <signal_thread+0x48>)
   20636:	f007 fe84 	bl	28342 <printk>
   2063a:	2146      	movs	r1, #70	; 0x46
   2063c:	4620      	mov	r0, r4
   2063e:	f008 fa19 	bl	28a74 <assert_post_action>
   20642:	e7e1      	b.n	20608 <signal_thread+0x4>
   20644:	20000884 	.word	0x20000884
   20648:	00032f14 	.word	0x00032f14
   2064c:	0002f968 	.word	0x0002f968

00020650 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   20650:	b530      	push	{r4, r5, lr}
   20652:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20654:	4d0f      	ldr	r5, [pc, #60]	; (20694 <mpsl_signal_thread_init+0x44>)
   20656:	2200      	movs	r2, #0
   20658:	2300      	movs	r3, #0
   2065a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2065e:	2400      	movs	r4, #0
   20660:	9404      	str	r4, [sp, #16]
   20662:	f06f 0309 	mvn.w	r3, #9
   20666:	9303      	str	r3, [sp, #12]
   20668:	9402      	str	r4, [sp, #8]
   2066a:	9401      	str	r4, [sp, #4]
   2066c:	9400      	str	r4, [sp, #0]
   2066e:	4b0a      	ldr	r3, [pc, #40]	; (20698 <mpsl_signal_thread_init+0x48>)
   20670:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20674:	4909      	ldr	r1, [pc, #36]	; (2069c <mpsl_signal_thread_init+0x4c>)
   20676:	4628      	mov	r0, r5
   20678:	f001 fd28 	bl	220cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2067c:	4908      	ldr	r1, [pc, #32]	; (206a0 <mpsl_signal_thread_init+0x50>)
   2067e:	4628      	mov	r0, r5
   20680:	f001 fbe6 	bl	21e50 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   20684:	4622      	mov	r2, r4
   20686:	2104      	movs	r1, #4
   20688:	2019      	movs	r0, #25
   2068a:	f7f2 fdfd 	bl	13288 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   2068e:	4620      	mov	r0, r4
   20690:	b009      	add	sp, #36	; 0x24
   20692:	bd30      	pop	{r4, r5, pc}
   20694:	20001d98 	.word	0x20001d98
   20698:	00020605 	.word	0x00020605
   2069c:	200058e0 	.word	0x200058e0
   206a0:	00032f44 	.word	0x00032f44

000206a4 <mpsl_low_prio_irq_handler>:
{
   206a4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   206a6:	4802      	ldr	r0, [pc, #8]	; (206b0 <mpsl_low_prio_irq_handler+0xc>)
   206a8:	f002 f8f6 	bl	22898 <z_impl_k_sem_give>
}
   206ac:	bd08      	pop	{r3, pc}
   206ae:	bf00      	nop
   206b0:	20000884 	.word	0x20000884

000206b4 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   206b4:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   206b6:	4b02      	ldr	r3, [pc, #8]	; (206c0 <mpsl_hfclk_callback+0xc>)
   206b8:	681b      	ldr	r3, [r3, #0]
   206ba:	2000      	movs	r0, #0
   206bc:	4798      	blx	r3
}
   206be:	bd08      	pop	{r3, pc}
   206c0:	2000309c 	.word	0x2000309c

000206c4 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   206c4:	b510      	push	{r4, lr}
	switch (domain) {
   206c6:	b128      	cbz	r0, 206d4 <nrfx_clock_start+0x10>
   206c8:	2801      	cmp	r0, #1
   206ca:	d108      	bne.n	206de <nrfx_clock_start+0x1a>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   206cc:	4809      	ldr	r0, [pc, #36]	; (206f4 <nrfx_clock_start+0x30>)
   206ce:	f7e2 ff65 	bl	359c <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   206d2:	bd10      	pop	{r4, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   206d4:	4b08      	ldr	r3, [pc, #32]	; (206f8 <nrfx_clock_start+0x34>)
   206d6:	681b      	ldr	r3, [r3, #0]
   206d8:	2001      	movs	r0, #1
   206da:	4798      	blx	r3
		break;
   206dc:	e7f9      	b.n	206d2 <nrfx_clock_start+0xe>
		__ASSERT(0, "Not supported");
   206de:	4c07      	ldr	r4, [pc, #28]	; (206fc <nrfx_clock_start+0x38>)
   206e0:	221c      	movs	r2, #28
   206e2:	4621      	mov	r1, r4
   206e4:	4806      	ldr	r0, [pc, #24]	; (20700 <nrfx_clock_start+0x3c>)
   206e6:	f007 fe2c 	bl	28342 <printk>
   206ea:	211c      	movs	r1, #28
   206ec:	4620      	mov	r0, r4
   206ee:	f008 f9c1 	bl	28a74 <assert_post_action>
}
   206f2:	e7ee      	b.n	206d2 <nrfx_clock_start+0xe>
   206f4:	000206b5 	.word	0x000206b5
   206f8:	2000309c 	.word	0x2000309c
   206fc:	00032f5c 	.word	0x00032f5c
   20700:	0002f968 	.word	0x0002f968

00020704 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
	switch (domain) {
   20704:	b180      	cbz	r0, 20728 <nrfx_clock_stop+0x24>
{
   20706:	b510      	push	{r4, lr}
	switch (domain) {
   20708:	2801      	cmp	r0, #1
   2070a:	d102      	bne.n	20712 <nrfx_clock_stop+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_release();
   2070c:	f7e2 ff38 	bl	3580 <mpsl_clock_hfclk_release>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   20710:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Not supported");
   20712:	4c06      	ldr	r4, [pc, #24]	; (2072c <nrfx_clock_stop+0x28>)
   20714:	222a      	movs	r2, #42	; 0x2a
   20716:	4621      	mov	r1, r4
   20718:	4805      	ldr	r0, [pc, #20]	; (20730 <nrfx_clock_stop+0x2c>)
   2071a:	f007 fe12 	bl	28342 <printk>
   2071e:	212a      	movs	r1, #42	; 0x2a
   20720:	4620      	mov	r0, r4
   20722:	f008 f9a7 	bl	28a74 <assert_post_action>
}
   20726:	e7f3      	b.n	20710 <nrfx_clock_stop+0xc>
   20728:	4770      	bx	lr
   2072a:	bf00      	nop
   2072c:	00032f5c 	.word	0x00032f5c
   20730:	0002f968 	.word	0x0002f968

00020734 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   20734:	4b01      	ldr	r3, [pc, #4]	; (2073c <nrfx_clock_init+0x8>)
   20736:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   20738:	4801      	ldr	r0, [pc, #4]	; (20740 <nrfx_clock_init+0xc>)
   2073a:	4770      	bx	lr
   2073c:	2000309c 	.word	0x2000309c
   20740:	0bad0000 	.word	0x0bad0000

00020744 <get_timeslot_time_us>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20744:	4b03      	ldr	r3, [pc, #12]	; (20754 <get_timeslot_time_us+0x10>)
   20746:	2201      	movs	r2, #1
   20748:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   2074a:	3b40      	subs	r3, #64	; 0x40
   2074c:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
 */
static uint32_t get_timeslot_time_us(void)
{
	nrf_timer_task_trigger(NRF_TIMER0, NRF_TIMER_TASK_CAPTURE0);
	return nrf_timer_cc_get(NRF_TIMER0, NRF_TIMER_CC_CHANNEL0);
}
   20750:	4770      	bx	lr
   20752:	bf00      	nop
   20754:	40008040 	.word	0x40008040

00020758 <reschedule_next_timeslot>:

static void reschedule_next_timeslot(void)
{
   20758:	b510      	push	{r4, lr}
	_context.timeslot_request.params.earliest.priority =
   2075a:	4b0b      	ldr	r3, [pc, #44]	; (20788 <reschedule_next_timeslot+0x30>)
   2075c:	2200      	movs	r2, #0
   2075e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		MPSL_TIMESLOT_PRIORITY_HIGH;

	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20762:	f103 0124 	add.w	r1, r3, #36	; 0x24
   20766:	7e18      	ldrb	r0, [r3, #24]
   20768:	f7eb f9b4 	bl	bad4 <mpsl_timeslot_request>
					    &_context.timeslot_request);

	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2076c:	b900      	cbnz	r0, 20770 <reschedule_next_timeslot+0x18>
		      "mpsl_timeslot_request failed: %d", ret);
}
   2076e:	bd10      	pop	{r4, pc}
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20770:	4c06      	ldr	r4, [pc, #24]	; (2078c <reschedule_next_timeslot+0x34>)
   20772:	2244      	movs	r2, #68	; 0x44
   20774:	4621      	mov	r1, r4
   20776:	4806      	ldr	r0, [pc, #24]	; (20790 <reschedule_next_timeslot+0x38>)
   20778:	f007 fde3 	bl	28342 <printk>
   2077c:	2144      	movs	r1, #68	; 0x44
   2077e:	4620      	mov	r0, r4
   20780:	f008 f978 	bl	28a74 <assert_post_action>
}
   20784:	e7f3      	b.n	2076e <reschedule_next_timeslot+0x16>
   20786:	bf00      	nop
   20788:	200030a0 	.word	0x200030a0
   2078c:	00032f9c 	.word	0x00032f9c
   20790:	0002f968 	.word	0x0002f968

00020794 <timeslot_callback>:

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   20794:	b538      	push	{r3, r4, r5, lr}
   20796:	460c      	mov	r4, r1
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   20798:	4b29      	ldr	r3, [pc, #164]	; (20840 <timeslot_callback+0xac>)
   2079a:	7e1b      	ldrb	r3, [r3, #24]
   2079c:	4283      	cmp	r3, r0
   2079e:	d110      	bne.n	207c2 <timeslot_callback+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   207a0:	f3bf 8f5b 	dmb	ish
   207a4:	4b26      	ldr	r3, [pc, #152]	; (20840 <timeslot_callback+0xac>)
   207a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   207a8:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   207ac:	2b00      	cmp	r3, #0
   207ae:	d142      	bne.n	20836 <timeslot_callback+0xa2>
		return NULL;
	}

	switch (signal) {
   207b0:	2c09      	cmp	r4, #9
   207b2:	d834      	bhi.n	2081e <timeslot_callback+0x8a>
   207b4:	e8df f004 	tbb	[pc, r4]
   207b8:	33333310 	.word	0x33333310
   207bc:	2a2f2f33 	.word	0x2a2f2f33
   207c0:	4133      	.short	0x4133
	__ASSERT_NO_MSG(session_id == _context.session_id);
   207c2:	4d20      	ldr	r5, [pc, #128]	; (20844 <timeslot_callback+0xb0>)
   207c4:	224c      	movs	r2, #76	; 0x4c
   207c6:	4629      	mov	r1, r5
   207c8:	481f      	ldr	r0, [pc, #124]	; (20848 <timeslot_callback+0xb4>)
   207ca:	f007 fdba 	bl	28342 <printk>
   207ce:	214c      	movs	r1, #76	; 0x4c
   207d0:	4628      	mov	r0, r5
   207d2:	f008 f94f 	bl	28a74 <assert_post_action>
   207d6:	e7e3      	b.n	207a0 <timeslot_callback+0xc>
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   207d8:	4b19      	ldr	r3, [pc, #100]	; (20840 <timeslot_callback+0xac>)
   207da:	6a1b      	ldr	r3, [r3, #32]
   207dc:	681a      	ldr	r2, [r3, #0]
   207de:	6858      	ldr	r0, [r3, #4]
   207e0:	4790      	blx	r2
   207e2:	4603      	mov	r3, r0
		if (rc != FLASH_OP_ONGOING) {
   207e4:	2801      	cmp	r0, #1
   207e6:	d005      	beq.n	207f4 <timeslot_callback+0x60>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   207e8:	4815      	ldr	r0, [pc, #84]	; (20840 <timeslot_callback+0xac>)
   207ea:	63c3      	str	r3, [r0, #60]	; 0x3c
			_context.return_param.callback_action =
   207ec:	2302      	movs	r3, #2
   207ee:	f800 3f34 	strb.w	r3, [r0, #52]!
   207f2:	e021      	b.n	20838 <timeslot_callback+0xa4>
				MPSL_TIMESLOT_SIGNAL_ACTION_END;
		} else {
			/* Reset the priority back to normal after a successful
			 * timeslot. */
			_context.timeslot_request.params.earliest.priority =
   207f4:	4812      	ldr	r0, [pc, #72]	; (20840 <timeslot_callback+0xac>)
   207f6:	2301      	movs	r3, #1
   207f8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
				MPSL_TIMESLOT_PRIORITY_NORMAL;

			_context.return_param.callback_action =
   207fc:	2303      	movs	r3, #3
   207fe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
				MPSL_TIMESLOT_SIGNAL_ACTION_REQUEST;
			_context.return_param.params.request.p_next =
   20802:	f100 0324 	add.w	r3, r0, #36	; 0x24
   20806:	6383      	str	r3, [r0, #56]	; 0x38
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   20808:	3034      	adds	r0, #52	; 0x34
   2080a:	e015      	b.n	20838 <timeslot_callback+0xa4>
   2080c:	480c      	ldr	r0, [pc, #48]	; (20840 <timeslot_callback+0xac>)
   2080e:	f002 f843 	bl	22898 <z_impl_k_sem_give>
		return NULL;
   20812:	2000      	movs	r0, #0
   20814:	e010      	b.n	20838 <timeslot_callback+0xa4>
		reschedule_next_timeslot();
   20816:	f7ff ff9f 	bl	20758 <reschedule_next_timeslot>
		return NULL;
   2081a:	2000      	movs	r0, #0
   2081c:	e00c      	b.n	20838 <timeslot_callback+0xa4>
		__ASSERT(false, "unexpected signal: %u", signal);
   2081e:	4c09      	ldr	r4, [pc, #36]	; (20844 <timeslot_callback+0xb0>)
   20820:	2276      	movs	r2, #118	; 0x76
   20822:	4621      	mov	r1, r4
   20824:	4808      	ldr	r0, [pc, #32]	; (20848 <timeslot_callback+0xb4>)
   20826:	f007 fd8c 	bl	28342 <printk>
   2082a:	2176      	movs	r1, #118	; 0x76
   2082c:	4620      	mov	r0, r4
   2082e:	f008 f921 	bl	28a74 <assert_post_action>
		return NULL;
   20832:	2000      	movs	r0, #0
   20834:	e000      	b.n	20838 <timeslot_callback+0xa4>
		return NULL;
   20836:	2000      	movs	r0, #0
}
   20838:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_get(&_context.timeout_occured)) {
   2083a:	2000      	movs	r0, #0
   2083c:	e7fc      	b.n	20838 <timeslot_callback+0xa4>
   2083e:	bf00      	nop
   20840:	200030a0 	.word	0x200030a0
   20844:	00032f9c 	.word	0x00032f9c
   20848:	0002f968 	.word	0x0002f968

0002084c <nrf_flash_sync_init>:

int nrf_flash_sync_init(void)
{
   2084c:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2084e:	2201      	movs	r2, #1
   20850:	2100      	movs	r1, #0
   20852:	4802      	ldr	r0, [pc, #8]	; (2085c <nrf_flash_sync_init+0x10>)
   20854:	f00e fa3d 	bl	2ecd2 <z_impl_k_sem_init>
	LOG_DBG("");
	return k_sem_init(&_context.timeout_sem, 0, 1);
}
   20858:	bd08      	pop	{r3, pc}
   2085a:	bf00      	nop
   2085c:	200030a0 	.word	0x200030a0

00020860 <nrf_flash_sync_set_context>:

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   20860:	4b01      	ldr	r3, [pc, #4]	; (20868 <nrf_flash_sync_set_context+0x8>)
   20862:	61d8      	str	r0, [r3, #28]
}
   20864:	4770      	bx	lr
   20866:	bf00      	nop
   20868:	200030a0 	.word	0x200030a0

0002086c <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   2086c:	b538      	push	{r3, r4, r5, lr}
   2086e:	4605      	mov	r5, r0
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20870:	f04f 30ff 	mov.w	r0, #4294967295
   20874:	f04f 31ff 	mov.w	r1, #4294967295
   20878:	f7ff fb60 	bl	1ff3c <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2087c:	2800      	cmp	r0, #0
   2087e:	d16a      	bne.n	20956 <nrf_flash_sync_exe+0xea>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   20880:	4956      	ldr	r1, [pc, #344]	; (209dc <nrf_flash_sync_exe+0x170>)
   20882:	4857      	ldr	r0, [pc, #348]	; (209e0 <nrf_flash_sync_exe+0x174>)
   20884:	f7df fe0c 	bl	4a0 <mpsl_timeslot_session_open>
   20888:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   2088a:	f7ff fb61 	bl	1ff50 <multithreading_lock_release>

	if (ret < 0) {
   2088e:	2c00      	cmp	r4, #0
   20890:	db6c      	blt.n	2096c <nrf_flash_sync_exe+0x100>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   20892:	4b54      	ldr	r3, [pc, #336]	; (209e4 <nrf_flash_sync_exe+0x178>)
   20894:	2100      	movs	r1, #0
   20896:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   2089a:	2201      	movs	r2, #1
   2089c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
   208a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   208a4:	69da      	ldr	r2, [r3, #28]
   208a6:	3264      	adds	r2, #100	; 0x64
	req->params.earliest.length_us =
   208a8:	62da      	str	r2, [r3, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   208aa:	4a4f      	ldr	r2, [pc, #316]	; (209e8 <nrf_flash_sync_exe+0x17c>)
   208ac:	631a      	str	r2, [r3, #48]	; 0x30

	_context.op_desc = op_desc;
   208ae:	621d      	str	r5, [r3, #32]
	_context.status = -ETIMEDOUT;
   208b0:	f06f 0273 	mvn.w	r2, #115	; 0x73
   208b4:	63da      	str	r2, [r3, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   208b6:	f103 0240 	add.w	r2, r3, #64	; 0x40
   208ba:	f3bf 8f5b 	dmb	ish
   208be:	e852 0f00 	ldrex	r0, [r2]
   208c2:	e842 1400 	strex	r4, r1, [r2]
   208c6:	2c00      	cmp	r4, #0
   208c8:	d1f9      	bne.n	208be <nrf_flash_sync_exe+0x52>
   208ca:	f3bf 8f5b 	dmb	ish
	return sem->count;
   208ce:	689b      	ldr	r3, [r3, #8]
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   208d0:	2b00      	cmp	r3, #0
   208d2:	d153      	bne.n	2097c <nrf_flash_sync_exe+0x110>

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   208d4:	f04f 30ff 	mov.w	r0, #4294967295
   208d8:	f04f 31ff 	mov.w	r1, #4294967295
   208dc:	f7ff fb2e 	bl	1ff3c <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   208e0:	2800      	cmp	r0, #0
   208e2:	d156      	bne.n	20992 <nrf_flash_sync_exe+0x126>
	ret = mpsl_timeslot_request(_context.session_id, req);
   208e4:	4b3f      	ldr	r3, [pc, #252]	; (209e4 <nrf_flash_sync_exe+0x178>)
   208e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
   208ea:	7e18      	ldrb	r0, [r3, #24]
   208ec:	f7eb f8f2 	bl	bad4 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   208f0:	2800      	cmp	r0, #0
   208f2:	d159      	bne.n	209a8 <nrf_flash_sync_exe+0x13c>
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   208f4:	f7ff fb2c 	bl	1ff50 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   208f8:	4a3c      	ldr	r2, [pc, #240]	; (209ec <nrf_flash_sync_exe+0x180>)
   208fa:	2300      	movs	r3, #0
   208fc:	4839      	ldr	r0, [pc, #228]	; (209e4 <nrf_flash_sync_exe+0x178>)
   208fe:	f002 f80b 	bl	22918 <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   20902:	2800      	cmp	r0, #0
   20904:	da0f      	bge.n	20926 <nrf_flash_sync_exe+0xba>
		LOG_ERR("timeout");
   20906:	2145      	movs	r1, #69	; 0x45
   20908:	4839      	ldr	r0, [pc, #228]	; (209f0 <nrf_flash_sync_exe+0x184>)
   2090a:	f008 f8bb 	bl	28a84 <z_log_minimal_printk>
   2090e:	4b39      	ldr	r3, [pc, #228]	; (209f4 <nrf_flash_sync_exe+0x188>)
   20910:	2201      	movs	r2, #1
   20912:	f3bf 8f5b 	dmb	ish
   20916:	e853 1f00 	ldrex	r1, [r3]
   2091a:	e843 2000 	strex	r0, r2, [r3]
   2091e:	2800      	cmp	r0, #0
   20920:	d1f9      	bne.n	20916 <nrf_flash_sync_exe+0xaa>
   20922:	f3bf 8f5b 	dmb	ish
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20926:	f04f 30ff 	mov.w	r0, #4294967295
   2092a:	f04f 31ff 	mov.w	r1, #4294967295
   2092e:	f7ff fb05 	bl	1ff3c <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20932:	2800      	cmp	r0, #0
   20934:	d143      	bne.n	209be <nrf_flash_sync_exe+0x152>
	mpsl_timeslot_session_close(_context.session_id);
   20936:	4c2b      	ldr	r4, [pc, #172]	; (209e4 <nrf_flash_sync_exe+0x178>)
   20938:	7e20      	ldrb	r0, [r4, #24]
   2093a:	f7eb f904 	bl	bb46 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   2093e:	f7ff fb07 	bl	1ff50 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20942:	f3bf 8f5b 	dmb	ish
   20946:	6c23      	ldr	r3, [r4, #64]	; 0x40
   20948:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   2094c:	2b00      	cmp	r3, #0
   2094e:	d141      	bne.n	209d4 <nrf_flash_sync_exe+0x168>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   20950:	4b24      	ldr	r3, [pc, #144]	; (209e4 <nrf_flash_sync_exe+0x178>)
   20952:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
   20954:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(errcode == 0);
   20956:	4c28      	ldr	r4, [pc, #160]	; (209f8 <nrf_flash_sync_exe+0x18c>)
   20958:	2293      	movs	r2, #147	; 0x93
   2095a:	4621      	mov	r1, r4
   2095c:	4827      	ldr	r0, [pc, #156]	; (209fc <nrf_flash_sync_exe+0x190>)
   2095e:	f007 fcf0 	bl	28342 <printk>
   20962:	2193      	movs	r1, #147	; 0x93
   20964:	4620      	mov	r0, r4
   20966:	f008 f885 	bl	28a74 <assert_post_action>
   2096a:	e789      	b.n	20880 <nrf_flash_sync_exe+0x14>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   2096c:	4622      	mov	r2, r4
   2096e:	2145      	movs	r1, #69	; 0x45
   20970:	4823      	ldr	r0, [pc, #140]	; (20a00 <nrf_flash_sync_exe+0x194>)
   20972:	f008 f887 	bl	28a84 <z_log_minimal_printk>
		return -ENOMEM;
   20976:	f06f 000b 	mvn.w	r0, #11
   2097a:	e7eb      	b.n	20954 <nrf_flash_sync_exe+0xe8>
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   2097c:	4c1e      	ldr	r4, [pc, #120]	; (209f8 <nrf_flash_sync_exe+0x18c>)
   2097e:	22a9      	movs	r2, #169	; 0xa9
   20980:	4621      	mov	r1, r4
   20982:	481e      	ldr	r0, [pc, #120]	; (209fc <nrf_flash_sync_exe+0x190>)
   20984:	f007 fcdd 	bl	28342 <printk>
   20988:	21a9      	movs	r1, #169	; 0xa9
   2098a:	4620      	mov	r0, r4
   2098c:	f008 f872 	bl	28a74 <assert_post_action>
   20990:	e7a0      	b.n	208d4 <nrf_flash_sync_exe+0x68>
	__ASSERT_NO_MSG(errcode == 0);
   20992:	4c19      	ldr	r4, [pc, #100]	; (209f8 <nrf_flash_sync_exe+0x18c>)
   20994:	22ac      	movs	r2, #172	; 0xac
   20996:	4621      	mov	r1, r4
   20998:	4818      	ldr	r0, [pc, #96]	; (209fc <nrf_flash_sync_exe+0x190>)
   2099a:	f007 fcd2 	bl	28342 <printk>
   2099e:	21ac      	movs	r1, #172	; 0xac
   209a0:	4620      	mov	r0, r4
   209a2:	f008 f867 	bl	28a74 <assert_post_action>
   209a6:	e79d      	b.n	208e4 <nrf_flash_sync_exe+0x78>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   209a8:	4c13      	ldr	r4, [pc, #76]	; (209f8 <nrf_flash_sync_exe+0x18c>)
   209aa:	22ae      	movs	r2, #174	; 0xae
   209ac:	4621      	mov	r1, r4
   209ae:	4813      	ldr	r0, [pc, #76]	; (209fc <nrf_flash_sync_exe+0x190>)
   209b0:	f007 fcc7 	bl	28342 <printk>
   209b4:	21ae      	movs	r1, #174	; 0xae
   209b6:	4620      	mov	r0, r4
   209b8:	f008 f85c 	bl	28a74 <assert_post_action>
   209bc:	e79a      	b.n	208f4 <nrf_flash_sync_exe+0x88>
	__ASSERT_NO_MSG(errcode == 0);
   209be:	4c0e      	ldr	r4, [pc, #56]	; (209f8 <nrf_flash_sync_exe+0x18c>)
   209c0:	22b9      	movs	r2, #185	; 0xb9
   209c2:	4621      	mov	r1, r4
   209c4:	480d      	ldr	r0, [pc, #52]	; (209fc <nrf_flash_sync_exe+0x190>)
   209c6:	f007 fcbc 	bl	28342 <printk>
   209ca:	21b9      	movs	r1, #185	; 0xb9
   209cc:	4620      	mov	r0, r4
   209ce:	f008 f851 	bl	28a74 <assert_post_action>
   209d2:	e7b0      	b.n	20936 <nrf_flash_sync_exe+0xca>
	z_impl_k_sem_reset(sem);
   209d4:	4620      	mov	r0, r4
   209d6:	f002 f815 	bl	22a04 <z_impl_k_sem_reset>
}
   209da:	e7b9      	b.n	20950 <nrf_flash_sync_exe+0xe4>
   209dc:	200030b8 	.word	0x200030b8
   209e0:	00020795 	.word	0x00020795
   209e4:	200030a0 	.word	0x200030a0
   209e8:	07a11fff 	.word	0x07a11fff
   209ec:	000b7b44 	.word	0x000b7b44
   209f0:	00033004 	.word	0x00033004
   209f4:	200030e0 	.word	0x200030e0
   209f8:	00032f9c 	.word	0x00032f9c
   209fc:	0002f968 	.word	0x0002f968
   20a00:	00032fd8 	.word	0x00032fd8

00020a04 <nrf_flash_sync_check_time_limit>:
{
	/* Not needed for this driver. */
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   20a04:	b510      	push	{r4, lr}
   20a06:	4604      	mov	r4, r0
	uint32_t now_us = get_timeslot_time_us();
   20a08:	f7ff fe9c 	bl	20744 <get_timeslot_time_us>
	uint32_t time_per_iteration_us = now_us / iteration;
   20a0c:	fbb0 f4f4 	udiv	r4, r0, r4
	return now_us + time_per_iteration_us >= _context.request_length_us;
   20a10:	4420      	add	r0, r4
   20a12:	4b03      	ldr	r3, [pc, #12]	; (20a20 <nrf_flash_sync_check_time_limit+0x1c>)
   20a14:	69db      	ldr	r3, [r3, #28]
}
   20a16:	4298      	cmp	r0, r3
   20a18:	bf34      	ite	cc
   20a1a:	2000      	movcc	r0, #0
   20a1c:	2001      	movcs	r0, #1
   20a1e:	bd10      	pop	{r4, pc}
   20a20:	200030a0 	.word	0x200030a0

00020a24 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20a24:	4b03      	ldr	r3, [pc, #12]	; (20a34 <nrf52_errata_36+0x10>)
   20a26:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20a28:	2b08      	cmp	r3, #8
   20a2a:	d001      	beq.n	20a30 <nrf52_errata_36+0xc>
        return false;
   20a2c:	2000      	movs	r0, #0
   20a2e:	4770      	bx	lr
                        return true;
   20a30:	2001      	movs	r0, #1
}
   20a32:	4770      	bx	lr
   20a34:	10000130 	.word	0x10000130

00020a38 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20a38:	4b03      	ldr	r3, [pc, #12]	; (20a48 <nrf52_errata_66+0x10>)
   20a3a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20a3c:	2b08      	cmp	r3, #8
   20a3e:	d001      	beq.n	20a44 <nrf52_errata_66+0xc>
        return false;
   20a40:	2000      	movs	r0, #0
   20a42:	4770      	bx	lr
                        return true;
   20a44:	2001      	movs	r0, #1
}
   20a46:	4770      	bx	lr
   20a48:	10000130 	.word	0x10000130

00020a4c <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20a4c:	4b08      	ldr	r3, [pc, #32]	; (20a70 <nrf52_errata_98+0x24>)
   20a4e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20a50:	3304      	adds	r3, #4
   20a52:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20a54:	2a08      	cmp	r2, #8
   20a56:	d001      	beq.n	20a5c <nrf52_errata_98+0x10>
        return false;
   20a58:	2000      	movs	r0, #0
   20a5a:	4770      	bx	lr
                switch(var2)
   20a5c:	2b00      	cmp	r3, #0
   20a5e:	d804      	bhi.n	20a6a <nrf52_errata_98+0x1e>
   20a60:	e8df f003 	tbb	[pc, r3]
   20a64:	01          	.byte	0x01
   20a65:	00          	.byte	0x00
            if (var1 == 0x08)
   20a66:	2001      	movs	r0, #1
   20a68:	4770      	bx	lr
                        return false;
   20a6a:	2000      	movs	r0, #0
}
   20a6c:	4770      	bx	lr
   20a6e:	bf00      	nop
   20a70:	10000130 	.word	0x10000130

00020a74 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20a74:	4b08      	ldr	r3, [pc, #32]	; (20a98 <nrf52_errata_103+0x24>)
   20a76:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20a78:	3304      	adds	r3, #4
   20a7a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20a7c:	2a08      	cmp	r2, #8
   20a7e:	d001      	beq.n	20a84 <nrf52_errata_103+0x10>
        return false;
   20a80:	2000      	movs	r0, #0
   20a82:	4770      	bx	lr
                switch(var2)
   20a84:	2b00      	cmp	r3, #0
   20a86:	d804      	bhi.n	20a92 <nrf52_errata_103+0x1e>
   20a88:	e8df f003 	tbb	[pc, r3]
   20a8c:	01          	.byte	0x01
   20a8d:	00          	.byte	0x00
            if (var1 == 0x08)
   20a8e:	2001      	movs	r0, #1
   20a90:	4770      	bx	lr
                        return false;
   20a92:	2000      	movs	r0, #0
}
   20a94:	4770      	bx	lr
   20a96:	bf00      	nop
   20a98:	10000130 	.word	0x10000130

00020a9c <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20a9c:	4b08      	ldr	r3, [pc, #32]	; (20ac0 <nrf52_errata_115+0x24>)
   20a9e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20aa0:	3304      	adds	r3, #4
   20aa2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20aa4:	2a08      	cmp	r2, #8
   20aa6:	d001      	beq.n	20aac <nrf52_errata_115+0x10>
        return false;
   20aa8:	2000      	movs	r0, #0
   20aaa:	4770      	bx	lr
                switch(var2)
   20aac:	2b00      	cmp	r3, #0
   20aae:	d804      	bhi.n	20aba <nrf52_errata_115+0x1e>
   20ab0:	e8df f003 	tbb	[pc, r3]
   20ab4:	01          	.byte	0x01
   20ab5:	00          	.byte	0x00
            if (var1 == 0x08)
   20ab6:	2001      	movs	r0, #1
   20ab8:	4770      	bx	lr
                        return false;
   20aba:	2000      	movs	r0, #0
}
   20abc:	4770      	bx	lr
   20abe:	bf00      	nop
   20ac0:	10000130 	.word	0x10000130

00020ac4 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20ac4:	4b08      	ldr	r3, [pc, #32]	; (20ae8 <nrf52_errata_120+0x24>)
   20ac6:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20ac8:	3304      	adds	r3, #4
   20aca:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20acc:	2a08      	cmp	r2, #8
   20ace:	d001      	beq.n	20ad4 <nrf52_errata_120+0x10>
        return false;
   20ad0:	2000      	movs	r0, #0
   20ad2:	4770      	bx	lr
                switch(var2)
   20ad4:	2b00      	cmp	r3, #0
   20ad6:	d804      	bhi.n	20ae2 <nrf52_errata_120+0x1e>
   20ad8:	e8df f003 	tbb	[pc, r3]
   20adc:	01          	.byte	0x01
   20add:	00          	.byte	0x00
            if (var1 == 0x08)
   20ade:	2001      	movs	r0, #1
   20ae0:	4770      	bx	lr
                        return false;
   20ae2:	2000      	movs	r0, #0
}
   20ae4:	4770      	bx	lr
   20ae6:	bf00      	nop
   20ae8:	10000130 	.word	0x10000130

00020aec <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20aec:	4b03      	ldr	r3, [pc, #12]	; (20afc <nrf52_errata_136+0x10>)
   20aee:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20af0:	2b08      	cmp	r3, #8
   20af2:	d001      	beq.n	20af8 <nrf52_errata_136+0xc>
        return false;
   20af4:	2000      	movs	r0, #0
   20af6:	4770      	bx	lr
                        return true;
   20af8:	2001      	movs	r0, #1
}
   20afa:	4770      	bx	lr
   20afc:	10000130 	.word	0x10000130

00020b00 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20b00:	4b06      	ldr	r3, [pc, #24]	; (20b1c <nrf52_errata_249+0x1c>)
   20b02:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20b04:	4a06      	ldr	r2, [pc, #24]	; (20b20 <nrf52_errata_249+0x20>)
   20b06:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   20b08:	2b08      	cmp	r3, #8
   20b0a:	d001      	beq.n	20b10 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   20b0c:	2000      	movs	r0, #0
   20b0e:	4770      	bx	lr
                switch(var2)
   20b10:	2a03      	cmp	r2, #3
   20b12:	d801      	bhi.n	20b18 <nrf52_errata_249+0x18>
   20b14:	2000      	movs	r0, #0
   20b16:	4770      	bx	lr
                        return true;
   20b18:	2001      	movs	r0, #1
    #endif
}
   20b1a:	4770      	bx	lr
   20b1c:	10000130 	.word	0x10000130
   20b20:	10000134 	.word	0x10000134

00020b24 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   20b24:	4b02      	ldr	r3, [pc, #8]	; (20b30 <nvmc_wait+0xc>)
   20b26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   20b2a:	2b00      	cmp	r3, #0
   20b2c:	d0fa      	beq.n	20b24 <nvmc_wait>
}
   20b2e:	4770      	bx	lr
   20b30:	4001e000 	.word	0x4001e000

00020b34 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   20b34:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20b36:	4b03      	ldr	r3, [pc, #12]	; (20b44 <nvmc_config+0x10>)
   20b38:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   20b3c:	f7ff fff2 	bl	20b24 <nvmc_wait>
}
   20b40:	bd08      	pop	{r3, pc}
   20b42:	bf00      	nop
   20b44:	4001e000 	.word	0x4001e000

00020b48 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   20b48:	4b01      	ldr	r3, [pc, #4]	; (20b50 <SystemCoreClockUpdate+0x8>)
   20b4a:	4a02      	ldr	r2, [pc, #8]	; (20b54 <SystemCoreClockUpdate+0xc>)
   20b4c:	601a      	str	r2, [r3, #0]
}
   20b4e:	4770      	bx	lr
   20b50:	200006b0 	.word	0x200006b0
   20b54:	03d09000 	.word	0x03d09000

00020b58 <SystemInit>:

void SystemInit(void)
{
   20b58:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   20b5a:	f7ff ff63 	bl	20a24 <nrf52_errata_36>
   20b5e:	b140      	cbz	r0, 20b72 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20b64:	2200      	movs	r2, #0
   20b66:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   20b6a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   20b6e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   20b72:	f7ff ff61 	bl	20a38 <nrf52_errata_66>
   20b76:	2800      	cmp	r0, #0
   20b78:	d046      	beq.n	20c08 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   20b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20b7e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   20b82:	4b56      	ldr	r3, [pc, #344]	; (20cdc <SystemInit+0x184>)
   20b84:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20b88:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20b8c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20b90:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20b94:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20b98:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20b9c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20ba0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20ba4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20ba8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20bac:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20bb0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20bb4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20bb8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20bbc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20bc0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20bc4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20bc8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20bcc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20bd0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20bd4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20bd8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20bdc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20be0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20be4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20be8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   20bec:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   20bf0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   20bf4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   20bf8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   20bfc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   20c00:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   20c04:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   20c08:	f7ff ff20 	bl	20a4c <nrf52_errata_98>
   20c0c:	b110      	cbz	r0, 20c14 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   20c0e:	4b34      	ldr	r3, [pc, #208]	; (20ce0 <SystemInit+0x188>)
   20c10:	4a34      	ldr	r2, [pc, #208]	; (20ce4 <SystemInit+0x18c>)
   20c12:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   20c14:	f7ff ff2e 	bl	20a74 <nrf52_errata_103>
   20c18:	b118      	cbz	r0, 20c22 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   20c1a:	4b33      	ldr	r3, [pc, #204]	; (20ce8 <SystemInit+0x190>)
   20c1c:	22fb      	movs	r2, #251	; 0xfb
   20c1e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   20c22:	f7ff ff3b 	bl	20a9c <nrf52_errata_115>
   20c26:	b148      	cbz	r0, 20c3c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   20c28:	4930      	ldr	r1, [pc, #192]	; (20cec <SystemInit+0x194>)
   20c2a:	680b      	ldr	r3, [r1, #0]
   20c2c:	f023 030f 	bic.w	r3, r3, #15
   20c30:	4a2f      	ldr	r2, [pc, #188]	; (20cf0 <SystemInit+0x198>)
   20c32:	6812      	ldr	r2, [r2, #0]
   20c34:	f002 020f 	and.w	r2, r2, #15
   20c38:	4313      	orrs	r3, r2
   20c3a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   20c3c:	f7ff ff42 	bl	20ac4 <nrf52_errata_120>
   20c40:	b118      	cbz	r0, 20c4a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   20c42:	4b2c      	ldr	r3, [pc, #176]	; (20cf4 <SystemInit+0x19c>)
   20c44:	f44f 7200 	mov.w	r2, #512	; 0x200
   20c48:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20c4a:	f7ff ff4f 	bl	20aec <nrf52_errata_136>
   20c4e:	b160      	cbz	r0, 20c6a <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20c54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   20c58:	f013 0f01 	tst.w	r3, #1
   20c5c:	d005      	beq.n	20c6a <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   20c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20c62:	f06f 0201 	mvn.w	r2, #1
   20c66:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   20c6a:	f7ff ff49 	bl	20b00 <nrf52_errata_249>
   20c6e:	b138      	cbz	r0, 20c80 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   20c70:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20c74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   20c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20c7c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20c80:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   20c88:	2b00      	cmp	r3, #0
   20c8a:	db08      	blt.n	20c9e <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20c8c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20c90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20c94:	2b00      	cmp	r3, #0
   20c96:	db02      	blt.n	20c9e <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   20c98:	f7ff ff56 	bl	20b48 <SystemCoreClockUpdate>
}
   20c9c:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   20c9e:	2001      	movs	r0, #1
   20ca0:	f7ff ff48 	bl	20b34 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20ca4:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   20ca8:	2512      	movs	r5, #18
   20caa:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   20cae:	f7ff ff39 	bl	20b24 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   20cb2:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   20cb6:	f7ff ff35 	bl	20b24 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   20cba:	2000      	movs	r0, #0
   20cbc:	f7ff ff3a 	bl	20b34 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   20cc0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20cc4:	490c      	ldr	r1, [pc, #48]	; (20cf8 <SystemInit+0x1a0>)
   20cc6:	68ca      	ldr	r2, [r1, #12]
   20cc8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20ccc:	4b0b      	ldr	r3, [pc, #44]	; (20cfc <SystemInit+0x1a4>)
   20cce:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20cd0:	60cb      	str	r3, [r1, #12]
   20cd2:	f3bf 8f4f 	dsb	sy
    __NOP();
   20cd6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20cd8:	e7fd      	b.n	20cd6 <SystemInit+0x17e>
   20cda:	bf00      	nop
   20cdc:	4000c000 	.word	0x4000c000
   20ce0:	4000568c 	.word	0x4000568c
   20ce4:	00038148 	.word	0x00038148
   20ce8:	4000f000 	.word	0x4000f000
   20cec:	40000ee4 	.word	0x40000ee4
   20cf0:	10000258 	.word	0x10000258
   20cf4:	40029640 	.word	0x40029640
   20cf8:	e000ed00 	.word	0xe000ed00
   20cfc:	05fa0004 	.word	0x05fa0004

00020d00 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
   20d00:	4b04      	ldr	r3, [pc, #16]	; (20d14 <is_allocated_channel+0x14>)
   20d02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   20d04:	2301      	movs	r3, #1
   20d06:	4083      	lsls	r3, r0
   20d08:	421a      	tst	r2, r3
}
   20d0a:	bf14      	ite	ne
   20d0c:	2001      	movne	r0, #1
   20d0e:	2000      	moveq	r0, #0
   20d10:	4770      	bx	lr
   20d12:	bf00      	nop
   20d14:	200030e4 	.word	0x200030e4

00020d18 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
   20d18:	2301      	movs	r3, #1
   20d1a:	fa03 f000 	lsl.w	r0, r3, r0
   20d1e:	4a02      	ldr	r2, [pc, #8]	; (20d28 <channel_allocated_set+0x10>)
   20d20:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   20d22:	4303      	orrs	r3, r0
   20d24:	65d3      	str	r3, [r2, #92]	; 0x5c
}
   20d26:	4770      	bx	lr
   20d28:	200030e4 	.word	0x200030e4

00020d2c <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
   20d2c:	2301      	movs	r3, #1
   20d2e:	fa03 f000 	lsl.w	r0, r3, r0
   20d32:	4a03      	ldr	r2, [pc, #12]	; (20d40 <channel_allocated_clr+0x14>)
   20d34:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   20d36:	ea23 0300 	bic.w	r3, r3, r0
   20d3a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
   20d3c:	4770      	bx	lr
   20d3e:	bf00      	nop
   20d40:	200030e4 	.word	0x200030e4

00020d44 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
   20d44:	b538      	push	{r3, r4, r5, lr}
   20d46:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   20d48:	f00d fe9c 	bl	2ea84 <is_app_channel>
   20d4c:	b908      	cbnz	r0, 20d52 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   20d4e:	4809      	ldr	r0, [pc, #36]	; (20d74 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20d50:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20d52:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d56:	f3ef 8511 	mrs	r5, BASEPRI
   20d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   20d5e:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
   20d62:	4620      	mov	r0, r4
   20d64:	f7ff ffe2 	bl	20d2c <channel_allocated_clr>
	__asm__ volatile(
   20d68:	f385 8811 	msr	BASEPRI, r5
   20d6c:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
   20d70:	4801      	ldr	r0, [pc, #4]	; (20d78 <nrfx_gpiote_channel_free+0x34>)
}
   20d72:	e7ed      	b.n	20d50 <nrfx_gpiote_channel_free+0xc>
   20d74:	0bad0004 	.word	0x0bad0004
   20d78:	0bad0000 	.word	0x0bad0000

00020d7c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   20d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20d80:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   20d82:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   20d84:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   20d86:	4f17      	ldr	r7, [pc, #92]	; (20de4 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   20d88:	e013      	b.n	20db2 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
   20d8a:	4620      	mov	r0, r4
   20d8c:	f7ff ffc4 	bl	20d18 <channel_allocated_set>
            *p_channel = ch_idx;
   20d90:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
   20d94:	4f14      	ldr	r7, [pc, #80]	; (20de8 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
   20d96:	f386 8811 	msr	BASEPRI, r6
   20d9a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   20d9e:	4b12      	ldr	r3, [pc, #72]	; (20de8 <nrfx_gpiote_channel_alloc+0x6c>)
   20da0:	429f      	cmp	r7, r3
   20da2:	d01b      	beq.n	20ddc <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   20da4:	2301      	movs	r3, #1
   20da6:	fa03 f309 	lsl.w	r3, r3, r9
   20daa:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   20dae:	3401      	adds	r4, #1
   20db0:	b2e4      	uxtb	r4, r4
   20db2:	b19d      	cbz	r5, 20ddc <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
   20db4:	f04f 0340 	mov.w	r3, #64	; 0x40
   20db8:	f3ef 8611 	mrs	r6, BASEPRI
   20dbc:	f383 8812 	msr	BASEPRI_MAX, r3
   20dc0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   20dc4:	46a1      	mov	r9, r4
   20dc6:	fa25 f304 	lsr.w	r3, r5, r4
   20dca:	f013 0f01 	tst.w	r3, #1
   20dce:	d0e2      	beq.n	20d96 <nrfx_gpiote_channel_alloc+0x1a>
   20dd0:	4620      	mov	r0, r4
   20dd2:	f7ff ff95 	bl	20d00 <is_allocated_channel>
   20dd6:	2800      	cmp	r0, #0
   20dd8:	d1dd      	bne.n	20d96 <nrfx_gpiote_channel_alloc+0x1a>
   20dda:	e7d6      	b.n	20d8a <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20ddc:	4638      	mov	r0, r7
   20dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20de2:	bf00      	nop
   20de4:	0bad0002 	.word	0x0bad0002
   20de8:	0bad0000 	.word	0x0bad0000

00020dec <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   20dec:	4b02      	ldr	r3, [pc, #8]	; (20df8 <nvmc_readonly_mode_set+0xc>)
   20dee:	2200      	movs	r2, #0
   20df0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   20df4:	4770      	bx	lr
   20df6:	bf00      	nop
   20df8:	4001e000 	.word	0x4001e000

00020dfc <nvmc_write_mode_set>:
   20dfc:	4b02      	ldr	r3, [pc, #8]	; (20e08 <nvmc_write_mode_set+0xc>)
   20dfe:	2201      	movs	r2, #1
   20e00:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   20e04:	4770      	bx	lr
   20e06:	bf00      	nop
   20e08:	4001e000 	.word	0x4001e000

00020e0c <nvmc_erase_mode_set>:
   20e0c:	4b02      	ldr	r3, [pc, #8]	; (20e18 <nvmc_erase_mode_set+0xc>)
   20e0e:	2202      	movs	r2, #2
   20e10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   20e14:	4770      	bx	lr
   20e16:	bf00      	nop
   20e18:	4001e000 	.word	0x4001e000

00020e1c <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20e1c:	4b04      	ldr	r3, [pc, #16]	; (20e30 <nvmc_word_write+0x14>)
   20e1e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20e22:	f013 0f01 	tst.w	r3, #1
   20e26:	d0f9      	beq.n	20e1c <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   20e28:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   20e2a:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   20e2e:	4770      	bx	lr
   20e30:	4001e000 	.word	0x4001e000

00020e34 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   20e34:	b538      	push	{r3, r4, r5, lr}
   20e36:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   20e38:	f00d fe34 	bl	2eaa4 <flash_total_size_get>
   20e3c:	4284      	cmp	r4, r0
   20e3e:	d30b      	bcc.n	20e58 <nrfx_nvmc_page_erase+0x24>
    NRFX_ASSERT(is_valid_address(addr, false));
   20e40:	4d10      	ldr	r5, [pc, #64]	; (20e84 <nrfx_nvmc_page_erase+0x50>)
   20e42:	f44f 7283 	mov.w	r2, #262	; 0x106
   20e46:	4629      	mov	r1, r5
   20e48:	480f      	ldr	r0, [pc, #60]	; (20e88 <nrfx_nvmc_page_erase+0x54>)
   20e4a:	f007 fa7a 	bl	28342 <printk>
   20e4e:	f44f 7183 	mov.w	r1, #262	; 0x106
   20e52:	4628      	mov	r0, r5
   20e54:	f007 fe0e 	bl	28a74 <assert_post_action>

    if (!is_page_aligned_check(addr))
   20e58:	4620      	mov	r0, r4
   20e5a:	f00d fe2c 	bl	2eab6 <is_page_aligned_check>
   20e5e:	b908      	cbnz	r0, 20e64 <nrfx_nvmc_page_erase+0x30>
    {
        return NRFX_ERROR_INVALID_ADDR;
   20e60:	480a      	ldr	r0, [pc, #40]	; (20e8c <nrfx_nvmc_page_erase+0x58>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   20e62:	bd38      	pop	{r3, r4, r5, pc}
    nvmc_erase_mode_set();
   20e64:	f7ff ffd2 	bl	20e0c <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   20e68:	4b09      	ldr	r3, [pc, #36]	; (20e90 <nrfx_nvmc_page_erase+0x5c>)
   20e6a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20e6e:	4b08      	ldr	r3, [pc, #32]	; (20e90 <nrfx_nvmc_page_erase+0x5c>)
   20e70:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20e74:	f013 0f01 	tst.w	r3, #1
   20e78:	d0f9      	beq.n	20e6e <nrfx_nvmc_page_erase+0x3a>
    nvmc_readonly_mode_set();
   20e7a:	f7ff ffb7 	bl	20dec <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   20e7e:	4805      	ldr	r0, [pc, #20]	; (20e94 <nrfx_nvmc_page_erase+0x60>)
   20e80:	e7ef      	b.n	20e62 <nrfx_nvmc_page_erase+0x2e>
   20e82:	bf00      	nop
   20e84:	00033024 	.word	0x00033024
   20e88:	0002f968 	.word	0x0002f968
   20e8c:	0bad000a 	.word	0x0bad000a
   20e90:	4001e000 	.word	0x4001e000
   20e94:	0bad0000 	.word	0x0bad0000

00020e98 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   20e98:	b570      	push	{r4, r5, r6, lr}
   20e9a:	4604      	mov	r4, r0
   20e9c:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   20e9e:	f00d fe01 	bl	2eaa4 <flash_total_size_get>
   20ea2:	4284      	cmp	r4, r0
   20ea4:	d310      	bcc.n	20ec8 <nrfx_nvmc_word_write+0x30>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   20ea6:	f1a4 2310 	sub.w	r3, r4, #268439552	; 0x10001000
    if (uicr_allowed &&
   20eaa:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
   20eae:	d30b      	bcc.n	20ec8 <nrfx_nvmc_word_write+0x30>
    NRFX_ASSERT(is_valid_address(addr, true));
   20eb0:	4e12      	ldr	r6, [pc, #72]	; (20efc <nrfx_nvmc_word_write+0x64>)
   20eb2:	f44f 72ca 	mov.w	r2, #404	; 0x194
   20eb6:	4631      	mov	r1, r6
   20eb8:	4811      	ldr	r0, [pc, #68]	; (20f00 <nrfx_nvmc_word_write+0x68>)
   20eba:	f007 fa42 	bl	28342 <printk>
   20ebe:	f44f 71ca 	mov.w	r1, #404	; 0x194
   20ec2:	4630      	mov	r0, r6
   20ec4:	f007 fdd6 	bl	28a74 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   20ec8:	f014 0f03 	tst.w	r4, #3
   20ecc:	d108      	bne.n	20ee0 <nrfx_nvmc_word_write+0x48>

    nvmc_write_mode_set();
   20ece:	f7ff ff95 	bl	20dfc <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   20ed2:	4629      	mov	r1, r5
   20ed4:	4620      	mov	r0, r4
   20ed6:	f7ff ffa1 	bl	20e1c <nvmc_word_write>

    nvmc_readonly_mode_set();
   20eda:	f7ff ff87 	bl	20dec <nvmc_readonly_mode_set>
}
   20ede:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   20ee0:	4e06      	ldr	r6, [pc, #24]	; (20efc <nrfx_nvmc_word_write+0x64>)
   20ee2:	f240 1295 	movw	r2, #405	; 0x195
   20ee6:	4631      	mov	r1, r6
   20ee8:	4805      	ldr	r0, [pc, #20]	; (20f00 <nrfx_nvmc_word_write+0x68>)
   20eea:	f007 fa2a 	bl	28342 <printk>
   20eee:	f240 1195 	movw	r1, #405	; 0x195
   20ef2:	4630      	mov	r0, r6
   20ef4:	f007 fdbe 	bl	28a74 <assert_post_action>
   20ef8:	e7e9      	b.n	20ece <nrfx_nvmc_word_write+0x36>
   20efa:	bf00      	nop
   20efc:	00033024 	.word	0x00033024
   20f00:	0002f968 	.word	0x0002f968

00020f04 <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   20f04:	2301      	movs	r3, #1
   20f06:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   20f08:	4a03      	ldr	r2, [pc, #12]	; (20f18 <is_allocated_channel+0x14>)
   20f0a:	6812      	ldr	r2, [r2, #0]
   20f0c:	4213      	tst	r3, r2
}
   20f0e:	bf14      	ite	ne
   20f10:	2001      	movne	r0, #1
   20f12:	2000      	moveq	r0, #0
   20f14:	4770      	bx	lr
   20f16:	bf00      	nop
   20f18:	20003144 	.word	0x20003144

00020f1c <channel_allocated_set>:
   20f1c:	2301      	movs	r3, #1
   20f1e:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   20f22:	4a02      	ldr	r2, [pc, #8]	; (20f2c <channel_allocated_set+0x10>)
   20f24:	6813      	ldr	r3, [r2, #0]
   20f26:	4303      	orrs	r3, r0
   20f28:	6013      	str	r3, [r2, #0]
}
   20f2a:	4770      	bx	lr
   20f2c:	20003144 	.word	0x20003144

00020f30 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   20f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20f34:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   20f36:	4b18      	ldr	r3, [pc, #96]	; (20f98 <nrfx_ppi_channel_alloc+0x68>)
   20f38:	681e      	ldr	r6, [r3, #0]
   20f3a:	43f6      	mvns	r6, r6
   20f3c:	f3c6 0613 	ubfx	r6, r6, #0, #20

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   20f40:	2400      	movs	r4, #0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   20f42:	f8df 805c 	ldr.w	r8, [pc, #92]	; 20fa0 <nrfx_ppi_channel_alloc+0x70>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   20f46:	e011      	b.n	20f6c <nrfx_ppi_channel_alloc+0x3c>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
   20f48:	4620      	mov	r0, r4
   20f4a:	f7ff ffe7 	bl	20f1c <channel_allocated_set>
            *p_channel = channel;
   20f4e:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
   20f52:	f8df 8048 	ldr.w	r8, [pc, #72]	; 20f9c <nrfx_ppi_channel_alloc+0x6c>
	__asm__ volatile(
   20f56:	f387 8811 	msr	BASEPRI, r7
   20f5a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
   20f5e:	4b0f      	ldr	r3, [pc, #60]	; (20f9c <nrfx_ppi_channel_alloc+0x6c>)
   20f60:	4598      	cmp	r8, r3
   20f62:	d016      	beq.n	20f92 <nrfx_ppi_channel_alloc+0x62>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   20f64:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   20f68:	3401      	adds	r4, #1
   20f6a:	b2e4      	uxtb	r4, r4
   20f6c:	b18e      	cbz	r6, 20f92 <nrfx_ppi_channel_alloc+0x62>
	__asm__ volatile(
   20f6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f72:	f3ef 8711 	mrs	r7, BASEPRI
   20f76:	f383 8812 	msr	BASEPRI_MAX, r3
   20f7a:	f3bf 8f6f 	isb	sy
   20f7e:	2501      	movs	r5, #1
   20f80:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   20f82:	4235      	tst	r5, r6
   20f84:	d0e7      	beq.n	20f56 <nrfx_ppi_channel_alloc+0x26>
   20f86:	4620      	mov	r0, r4
   20f88:	f7ff ffbc 	bl	20f04 <is_allocated_channel>
   20f8c:	2800      	cmp	r0, #0
   20f8e:	d1e2      	bne.n	20f56 <nrfx_ppi_channel_alloc+0x26>
   20f90:	e7da      	b.n	20f48 <nrfx_ppi_channel_alloc+0x18>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20f92:	4640      	mov	r0, r8
   20f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20f98:	00032ed4 	.word	0x00032ed4
   20f9c:	0bad0000 	.word	0x0bad0000
   20fa0:	0bad0002 	.word	0x0bad0002

00020fa4 <configure_pins>:
} pwm_control_block_t;
static pwm_control_block_t m_cb[NRFX_PWM_ENABLED_COUNT];

static void configure_pins(nrfx_pwm_t const *        p_instance,
                           nrfx_pwm_config_t const * p_config)
{
   20fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20fa8:	b085      	sub	sp, #20
   20faa:	4607      	mov	r7, r0
   20fac:	460e      	mov	r6, r1
    uint32_t out_pins[NRF_PWM_CHANNEL_COUNT];
    uint8_t i;

    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   20fae:	2400      	movs	r4, #0
   20fb0:	e0a5      	b.n	210fe <configure_pins+0x15a>
    switch (port)
   20fb2:	096b      	lsrs	r3, r5, #5
   20fb4:	d01e      	beq.n	20ff4 <configure_pins+0x50>
   20fb6:	2b01      	cmp	r3, #1
   20fb8:	d11f      	bne.n	20ffa <configure_pins+0x56>
            mask = P1_FEATURE_PINS_PRESENT;
   20fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   20fbe:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20fc2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20fc4:	f013 0f01 	tst.w	r3, #1
   20fc8:	d019      	beq.n	20ffe <configure_pins+0x5a>
    *p_pin = pin_number & 0x1F;
   20fca:	f005 091f 	and.w	r9, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20fce:	096b      	lsrs	r3, r5, #5
   20fd0:	d023      	beq.n	2101a <configure_pins+0x76>
   20fd2:	2b01      	cmp	r3, #1
   20fd4:	d024      	beq.n	21020 <configure_pins+0x7c>
            NRFX_ASSERT(0);
   20fd6:	4d6e      	ldr	r5, [pc, #440]	; (21190 <configure_pins+0x1ec>)
   20fd8:	f240 2219 	movw	r2, #537	; 0x219
   20fdc:	4629      	mov	r1, r5
   20fde:	486d      	ldr	r0, [pc, #436]	; (21194 <configure_pins+0x1f0>)
   20fe0:	f007 f9af 	bl	28342 <printk>
   20fe4:	f240 2119 	movw	r1, #537	; 0x219
   20fe8:	4628      	mov	r0, r5
   20fea:	f007 fd43 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   20fee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   20ff2:	e016      	b.n	21022 <configure_pins+0x7e>
            mask = P0_FEATURE_PINS_PRESENT;
   20ff4:	f04f 33ff 	mov.w	r3, #4294967295
   20ff8:	e7e1      	b.n	20fbe <configure_pins+0x1a>
    switch (port)
   20ffa:	2300      	movs	r3, #0
   20ffc:	e7df      	b.n	20fbe <configure_pins+0x1a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20ffe:	f8df 9190 	ldr.w	r9, [pc, #400]	; 21190 <configure_pins+0x1ec>
   21002:	f44f 7205 	mov.w	r2, #532	; 0x214
   21006:	4649      	mov	r1, r9
   21008:	4862      	ldr	r0, [pc, #392]	; (21194 <configure_pins+0x1f0>)
   2100a:	f007 f99a 	bl	28342 <printk>
   2100e:	f44f 7105 	mov.w	r1, #532	; 0x214
   21012:	4648      	mov	r0, r9
   21014:	f007 fd2e 	bl	28a74 <assert_post_action>
   21018:	e7d7      	b.n	20fca <configure_pins+0x26>
        case 0: return NRF_P0;
   2101a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2101e:	e000      	b.n	21022 <configure_pins+0x7e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21020:	4a5d      	ldr	r2, [pc, #372]	; (21198 <configure_pins+0x1f4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21022:	2301      	movs	r3, #1
   21024:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
   21028:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   2102c:	e01b      	b.n	21066 <configure_pins+0xc2>
            mask = P0_FEATURE_PINS_PRESENT;
   2102e:	f04f 33ff 	mov.w	r3, #4294967295
   21032:	e07e      	b.n	21132 <configure_pins+0x18e>
    switch (port)
   21034:	2300      	movs	r3, #0
   21036:	e07c      	b.n	21132 <configure_pins+0x18e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21038:	f8df 9154 	ldr.w	r9, [pc, #340]	; 21190 <configure_pins+0x1ec>
   2103c:	f44f 7205 	mov.w	r2, #532	; 0x214
   21040:	4649      	mov	r1, r9
   21042:	4854      	ldr	r0, [pc, #336]	; (21194 <configure_pins+0x1f0>)
   21044:	f007 f97d 	bl	28342 <printk>
   21048:	f44f 7105 	mov.w	r1, #532	; 0x214
   2104c:	4648      	mov	r0, r9
   2104e:	f007 fd11 	bl	28a74 <assert_post_action>
   21052:	e075      	b.n	21140 <configure_pins+0x19c>
        case 0: return NRF_P0;
   21054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21058:	e000      	b.n	2105c <configure_pins+0xb8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2105a:	4a4f      	ldr	r2, [pc, #316]	; (21198 <configure_pins+0x1f4>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2105c:	2301      	movs	r3, #1
   2105e:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTCLR = clr_mask;
   21062:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
                else
                {
                    nrf_gpio_pin_clear(out_pins[i]);
                }

                nrf_gpio_cfg_output(out_pins[i]);
   21066:	ab04      	add	r3, sp, #16
   21068:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   2106c:	f858 5c10 	ldr.w	r5, [r8, #-16]
    switch (port)
   21070:	096b      	lsrs	r3, r5, #5
   21072:	d01e      	beq.n	210b2 <configure_pins+0x10e>
   21074:	2b01      	cmp	r3, #1
   21076:	d11f      	bne.n	210b8 <configure_pins+0x114>
            mask = P1_FEATURE_PINS_PRESENT;
   21078:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2107c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21080:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21082:	f013 0f01 	tst.w	r3, #1
   21086:	d019      	beq.n	210bc <configure_pins+0x118>
    *p_pin = pin_number & 0x1F;
   21088:	f005 081f 	and.w	r8, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2108c:	096d      	lsrs	r5, r5, #5
   2108e:	d023      	beq.n	210d8 <configure_pins+0x134>
   21090:	2d01      	cmp	r5, #1
   21092:	d024      	beq.n	210de <configure_pins+0x13a>
            NRFX_ASSERT(0);
   21094:	4d3e      	ldr	r5, [pc, #248]	; (21190 <configure_pins+0x1ec>)
   21096:	f240 2219 	movw	r2, #537	; 0x219
   2109a:	4629      	mov	r1, r5
   2109c:	483d      	ldr	r0, [pc, #244]	; (21194 <configure_pins+0x1f0>)
   2109e:	f007 f950 	bl	28342 <printk>
   210a2:	f240 2119 	movw	r1, #537	; 0x219
   210a6:	4628      	mov	r0, r5
   210a8:	f007 fce4 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   210ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   210b0:	e016      	b.n	210e0 <configure_pins+0x13c>
            mask = P0_FEATURE_PINS_PRESENT;
   210b2:	f04f 33ff 	mov.w	r3, #4294967295
   210b6:	e7e1      	b.n	2107c <configure_pins+0xd8>
    switch (port)
   210b8:	2300      	movs	r3, #0
   210ba:	e7df      	b.n	2107c <configure_pins+0xd8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   210bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 21190 <configure_pins+0x1ec>
   210c0:	f44f 7205 	mov.w	r2, #532	; 0x214
   210c4:	4641      	mov	r1, r8
   210c6:	4833      	ldr	r0, [pc, #204]	; (21194 <configure_pins+0x1f0>)
   210c8:	f007 f93b 	bl	28342 <printk>
   210cc:	f44f 7105 	mov.w	r1, #532	; 0x214
   210d0:	4640      	mov	r0, r8
   210d2:	f007 fccf 	bl	28a74 <assert_post_action>
   210d6:	e7d7      	b.n	21088 <configure_pins+0xe4>
        case 0: return NRF_P0;
   210d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   210dc:	e000      	b.n	210e0 <configure_pins+0x13c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   210de:	4b2e      	ldr	r3, [pc, #184]	; (21198 <configure_pins+0x1f4>)
    reg->PIN_CNF[pin_number] = cnf;
   210e0:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
   210e4:	2203      	movs	r2, #3
   210e6:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
}
   210ea:	e006      	b.n	210fa <configure_pins+0x156>
            }
        }
        else
        {
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   210ec:	f04f 32ff 	mov.w	r2, #4294967295
   210f0:	ab04      	add	r3, sp, #16
   210f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   210f6:	f843 2c10 	str.w	r2, [r3, #-16]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   210fa:	3401      	adds	r4, #1
   210fc:	b2e4      	uxtb	r4, r4
   210fe:	2c03      	cmp	r4, #3
   21100:	d833      	bhi.n	2116a <configure_pins+0x1c6>
        uint8_t output_pin = p_config->output_pins[i];
   21102:	46a0      	mov	r8, r4
   21104:	5d33      	ldrb	r3, [r6, r4]
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   21106:	2bff      	cmp	r3, #255	; 0xff
   21108:	d0f0      	beq.n	210ec <configure_pins+0x148>
            bool inverted = output_pin &  NRFX_PWM_PIN_INVERTED;
   2110a:	b25a      	sxtb	r2, r3
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   2110c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
   21110:	ab04      	add	r3, sp, #16
   21112:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   21116:	f843 5c10 	str.w	r5, [r3, #-16]
            if (!p_config->skip_gpio_cfg)
   2111a:	7b33      	ldrb	r3, [r6, #12]
   2111c:	2b00      	cmp	r3, #0
   2111e:	d1ec      	bne.n	210fa <configure_pins+0x156>
                if (inverted)
   21120:	2a00      	cmp	r2, #0
   21122:	f6ff af46 	blt.w	20fb2 <configure_pins+0xe>
    switch (port)
   21126:	096b      	lsrs	r3, r5, #5
   21128:	d081      	beq.n	2102e <configure_pins+0x8a>
   2112a:	2b01      	cmp	r3, #1
   2112c:	d182      	bne.n	21034 <configure_pins+0x90>
            mask = P1_FEATURE_PINS_PRESENT;
   2112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21132:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21136:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21138:	f013 0f01 	tst.w	r3, #1
   2113c:	f43f af7c 	beq.w	21038 <configure_pins+0x94>
    *p_pin = pin_number & 0x1F;
   21140:	f005 091f 	and.w	r9, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21144:	096b      	lsrs	r3, r5, #5
   21146:	d085      	beq.n	21054 <configure_pins+0xb0>
   21148:	2b01      	cmp	r3, #1
   2114a:	d086      	beq.n	2105a <configure_pins+0xb6>
            NRFX_ASSERT(0);
   2114c:	4d10      	ldr	r5, [pc, #64]	; (21190 <configure_pins+0x1ec>)
   2114e:	f240 2219 	movw	r2, #537	; 0x219
   21152:	4629      	mov	r1, r5
   21154:	480f      	ldr	r0, [pc, #60]	; (21194 <configure_pins+0x1f0>)
   21156:	f007 f8f4 	bl	28342 <printk>
   2115a:	f240 2119 	movw	r1, #537	; 0x219
   2115e:	4628      	mov	r0, r5
   21160:	f007 fc88 	bl	28a74 <assert_post_action>
        case 0: return NRF_P0;
   21164:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21168:	e778      	b.n	2105c <configure_pins+0xb8>
        }
    }

    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   2116a:	6838      	ldr	r0, [r7, #0]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   2116c:	2300      	movs	r3, #0
   2116e:	e00a      	b.n	21186 <configure_pins+0x1e2>
        p_reg->PSEL.OUT[i] = out_pins[i];
   21170:	aa04      	add	r2, sp, #16
   21172:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   21176:	f852 1c10 	ldr.w	r1, [r2, #-16]
   2117a:	f503 72ac 	add.w	r2, r3, #344	; 0x158
   2117e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   21182:	3301      	adds	r3, #1
   21184:	b2db      	uxtb	r3, r3
   21186:	2b03      	cmp	r3, #3
   21188:	d9f2      	bls.n	21170 <configure_pins+0x1cc>
}
   2118a:	b005      	add	sp, #20
   2118c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21190:	000326d8 	.word	0x000326d8
   21194:	0002f968 	.word	0x0002f968
   21198:	50000300 	.word	0x50000300

0002119c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   2119c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211a0:	4604      	mov	r4, r0
   211a2:	4690      	mov	r8, r2
   211a4:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
   211a6:	460e      	mov	r6, r1
   211a8:	b151      	cbz	r1, 211c0 <nrfx_pwm_init+0x24>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   211aa:	7925      	ldrb	r5, [r4, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   211ac:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   211b0:	493a      	ldr	r1, [pc, #232]	; (2129c <nrfx_pwm_init+0x100>)
   211b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   211b6:	7a0b      	ldrb	r3, [r1, #8]
   211b8:	b16b      	cbz	r3, 211d6 <nrfx_pwm_init+0x3a>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   211ba:	4839      	ldr	r0, [pc, #228]	; (212a0 <nrfx_pwm_init+0x104>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   211bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NRFX_ASSERT(p_config);
   211c0:	4d38      	ldr	r5, [pc, #224]	; (212a4 <nrfx_pwm_init+0x108>)
   211c2:	2289      	movs	r2, #137	; 0x89
   211c4:	4629      	mov	r1, r5
   211c6:	4838      	ldr	r0, [pc, #224]	; (212a8 <nrfx_pwm_init+0x10c>)
   211c8:	f007 f8bb 	bl	28342 <printk>
   211cc:	2189      	movs	r1, #137	; 0x89
   211ce:	4628      	mov	r0, r5
   211d0:	f007 fc50 	bl	28a74 <assert_post_action>
   211d4:	e7e9      	b.n	211aa <nrfx_pwm_init+0xe>
    p_cb->handler = handler;
   211d6:	4b31      	ldr	r3, [pc, #196]	; (2129c <nrfx_pwm_init+0x100>)
   211d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   211dc:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
    p_cb->p_context = p_context;
   211e0:	604f      	str	r7, [r1, #4]
    configure_pins(p_instance, p_config);
   211e2:	4631      	mov	r1, r6
   211e4:	4620      	mov	r0, r4
   211e6:	f7ff fedd 	bl	20fa4 <configure_pins>
    nrf_pwm_enable(p_instance->p_registers);
   211ea:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   211ec:	2201      	movs	r2, #1
   211ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
   211f2:	6827      	ldr	r7, [r4, #0]
   211f4:	f896 a005 	ldrb.w	sl, [r6, #5]
   211f8:	f896 9006 	ldrb.w	r9, [r6, #6]
   211fc:	f8b6 8008 	ldrh.w	r8, [r6, #8]
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   21200:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
   21204:	2b00      	cmp	r3, #0
   21206:	db3b      	blt.n	21280 <nrfx_pwm_init+0xe4>
    p_reg->PRESCALER  = base_clock;
   21208:	f8c7 a50c 	str.w	sl, [r7, #1292]	; 0x50c
    p_reg->MODE       = mode;
   2120c:	f8c7 9504 	str.w	r9, [r7, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   21210:	f8c7 8508 	str.w	r8, [r7, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
   21214:	6822      	ldr	r2, [r4, #0]
   21216:	7ab3      	ldrb	r3, [r6, #10]
   21218:	7af1      	ldrb	r1, [r6, #11]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   2121a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2121e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   21222:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
   21224:	2300      	movs	r3, #0
   21226:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
   2122a:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
   2122c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
   21230:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21232:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
   21236:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
   2123a:	6822      	ldr	r2, [r4, #0]
   2123c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
   21240:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
   21244:	6822      	ldr	r2, [r4, #0]
   21246:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   2124a:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   2124e:	6822      	ldr	r2, [r4, #0]
   21250:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   21254:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    if (p_cb->handler)
   21258:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2125c:	4a0f      	ldr	r2, [pc, #60]	; (2129c <nrfx_pwm_init+0x100>)
   2125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   21262:	b123      	cbz	r3, 2126e <nrfx_pwm_init+0xd2>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   21264:	6820      	ldr	r0, [r4, #0]
   21266:	f340 3007 	sbfx	r0, r0, #12, #8
   2126a:	f7f1 ffdb 	bl	13224 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2126e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   21272:	4b0a      	ldr	r3, [pc, #40]	; (2129c <nrfx_pwm_init+0x100>)
   21274:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   21278:	2301      	movs	r3, #1
   2127a:	722b      	strb	r3, [r5, #8]
    return err_code;
   2127c:	480b      	ldr	r0, [pc, #44]	; (212ac <nrfx_pwm_init+0x110>)
   2127e:	e79d      	b.n	211bc <nrfx_pwm_init+0x20>
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   21280:	f8df b02c 	ldr.w	fp, [pc, #44]	; 212b0 <nrfx_pwm_init+0x114>
   21284:	f44f 7227 	mov.w	r2, #668	; 0x29c
   21288:	4659      	mov	r1, fp
   2128a:	4807      	ldr	r0, [pc, #28]	; (212a8 <nrfx_pwm_init+0x10c>)
   2128c:	f007 f859 	bl	28342 <printk>
   21290:	f44f 7127 	mov.w	r1, #668	; 0x29c
   21294:	4658      	mov	r0, fp
   21296:	f007 fbed 	bl	28a74 <assert_post_action>
   2129a:	e7b5      	b.n	21208 <nrfx_pwm_init+0x6c>
   2129c:	20003148 	.word	0x20003148
   212a0:	0bad0005 	.word	0x0bad0005
   212a4:	00033060 	.word	0x00033060
   212a8:	0002f968 	.word	0x0002f968
   212ac:	0bad0000 	.word	0x0bad0000
   212b0:	00032800 	.word	0x00032800

000212b4 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   212b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212b8:	4605      	mov	r5, r0
   212ba:	460c      	mov	r4, r1
   212bc:	4617      	mov	r7, r2
   212be:	461e      	mov	r6, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   212c0:	7903      	ldrb	r3, [r0, #4]
   212c2:	4aad      	ldr	r2, [pc, #692]	; (21578 <nrfx_pwm_simple_playback+0x2c4>)
   212c4:	eb03 0843 	add.w	r8, r3, r3, lsl #1
   212c8:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   212cc:	f898 3008 	ldrb.w	r3, [r8, #8]
   212d0:	2b00      	cmp	r3, #0
   212d2:	d06d      	beq.n	213b0 <nrfx_pwm_simple_playback+0xfc>
    NRFX_ASSERT(playback_count > 0);
   212d4:	2f00      	cmp	r7, #0
   212d6:	d079      	beq.n	213cc <nrfx_pwm_simple_playback+0x118>
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   212d8:	6823      	ldr	r3, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   212da:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   212de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   212e2:	f040 8081 	bne.w	213e8 <nrfx_pwm_simple_playback+0x134>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   212e6:	f8d5 9000 	ldr.w	r9, [r5]
    NRFX_ASSERT(p_seq != NULL);
   212ea:	2c00      	cmp	r4, #0
   212ec:	f000 808a 	beq.w	21404 <nrfx_pwm_simple_playback+0x150>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   212f0:	f8d4 a000 	ldr.w	sl, [r4]
    NRFX_ASSERT(p_values != NULL);
   212f4:	f1ba 0f00 	cmp.w	sl, #0
   212f8:	f000 8092 	beq.w	21420 <nrfx_pwm_simple_playback+0x16c>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   212fc:	f8c9 a520 	str.w	sl, [r9, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   21300:	f8b4 a004 	ldrh.w	sl, [r4, #4]
    NRFX_ASSERT(length != 0);
   21304:	f1ba 0f00 	cmp.w	sl, #0
   21308:	f000 8098 	beq.w	2143c <nrfx_pwm_simple_playback+0x188>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   2130c:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
   21310:	f040 80a2 	bne.w	21458 <nrfx_pwm_simple_playback+0x1a4>
    p_reg->SEQ[seq_id].CNT = length;
   21314:	f8c9 a524 	str.w	sl, [r9, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   21318:	f8d4 a008 	ldr.w	sl, [r4, #8]
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   2131c:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
   21320:	f080 80a8 	bcs.w	21474 <nrfx_pwm_simple_playback+0x1c0>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   21324:	f8c9 a528 	str.w	sl, [r9, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   21328:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   2132c:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
   21330:	f080 80ae 	bcs.w	21490 <nrfx_pwm_simple_playback+0x1dc>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   21334:	f8c9 a52c 	str.w	sl, [r9, #1324]	; 0x52c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   21338:	f8d5 9000 	ldr.w	r9, [r5]
    NRFX_ASSERT(p_seq != NULL);
   2133c:	2c00      	cmp	r4, #0
   2133e:	f000 80b5 	beq.w	214ac <nrfx_pwm_simple_playback+0x1f8>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   21342:	f8d4 a000 	ldr.w	sl, [r4]
    NRFX_ASSERT(p_values != NULL);
   21346:	f1ba 0f00 	cmp.w	sl, #0
   2134a:	f000 80bd 	beq.w	214c8 <nrfx_pwm_simple_playback+0x214>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   2134e:	f8c9 a540 	str.w	sl, [r9, #1344]	; 0x540
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   21352:	f8b4 a004 	ldrh.w	sl, [r4, #4]
    NRFX_ASSERT(length != 0);
   21356:	f1ba 0f00 	cmp.w	sl, #0
   2135a:	f000 80c3 	beq.w	214e4 <nrfx_pwm_simple_playback+0x230>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   2135e:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
   21362:	f040 80cd 	bne.w	21500 <nrfx_pwm_simple_playback+0x24c>
    p_reg->SEQ[seq_id].CNT = length;
   21366:	f8c9 a544 	str.w	sl, [r9, #1348]	; 0x544
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   2136a:	f8d4 a008 	ldr.w	sl, [r4, #8]
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   2136e:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
   21372:	f080 80d3 	bcs.w	2151c <nrfx_pwm_simple_playback+0x268>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   21376:	f8c9 a548 	str.w	sl, [r9, #1352]	; 0x548
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   2137a:	68e4      	ldr	r4, [r4, #12]
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   2137c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   21380:	f080 80da 	bcs.w	21538 <nrfx_pwm_simple_playback+0x284>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   21384:	f8c9 454c 	str.w	r4, [r9, #1356]	; 0x54c
    bool odd = (playback_count & 1);
   21388:	f007 0301 	and.w	r3, r7, #1
    nrf_pwm_loop_set(p_instance->p_registers,
   2138c:	6829      	ldr	r1, [r5, #0]
   2138e:	eb03 0757 	add.w	r7, r3, r7, lsr #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   21392:	f8c1 7514 	str.w	r7, [r1, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   21396:	f016 0f01 	tst.w	r6, #1
   2139a:	f040 80db 	bne.w	21554 <nrfx_pwm_simple_playback+0x2a0>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   2139e:	f016 0202 	ands.w	r2, r6, #2
   213a2:	f000 80d8 	beq.w	21556 <nrfx_pwm_simple_playback+0x2a2>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   213a6:	2b00      	cmp	r3, #0
   213a8:	f000 80e1 	beq.w	2156e <nrfx_pwm_simple_playback+0x2ba>
   213ac:	2208      	movs	r2, #8
   213ae:	e0d2      	b.n	21556 <nrfx_pwm_simple_playback+0x2a2>
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   213b0:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 21580 <nrfx_pwm_simple_playback+0x2cc>
   213b4:	f240 1225 	movw	r2, #293	; 0x125
   213b8:	4649      	mov	r1, r9
   213ba:	4870      	ldr	r0, [pc, #448]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   213bc:	f006 ffc1 	bl	28342 <printk>
   213c0:	f240 1125 	movw	r1, #293	; 0x125
   213c4:	4648      	mov	r0, r9
   213c6:	f007 fb55 	bl	28a74 <assert_post_action>
   213ca:	e783      	b.n	212d4 <nrfx_pwm_simple_playback+0x20>
    NRFX_ASSERT(playback_count > 0);
   213cc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 21580 <nrfx_pwm_simple_playback+0x2cc>
   213d0:	f44f 7293 	mov.w	r2, #294	; 0x126
   213d4:	4649      	mov	r1, r9
   213d6:	4869      	ldr	r0, [pc, #420]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   213d8:	f006 ffb3 	bl	28342 <printk>
   213dc:	f44f 7193 	mov.w	r1, #294	; 0x126
   213e0:	4648      	mov	r0, r9
   213e2:	f007 fb47 	bl	28a74 <assert_post_action>
   213e6:	e777      	b.n	212d8 <nrfx_pwm_simple_playback+0x24>
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   213e8:	f8df 9194 	ldr.w	r9, [pc, #404]	; 21580 <nrfx_pwm_simple_playback+0x2cc>
   213ec:	f240 1227 	movw	r2, #295	; 0x127
   213f0:	4649      	mov	r1, r9
   213f2:	4862      	ldr	r0, [pc, #392]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   213f4:	f006 ffa5 	bl	28342 <printk>
   213f8:	f240 1127 	movw	r1, #295	; 0x127
   213fc:	4648      	mov	r0, r9
   213fe:	f007 fb39 	bl	28a74 <assert_post_action>
   21402:	e770      	b.n	212e6 <nrfx_pwm_simple_playback+0x32>
    NRFX_ASSERT(p_seq != NULL);
   21404:	f8df a17c 	ldr.w	sl, [pc, #380]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   21408:	f240 22a7 	movw	r2, #679	; 0x2a7
   2140c:	4651      	mov	r1, sl
   2140e:	485b      	ldr	r0, [pc, #364]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   21410:	f006 ff97 	bl	28342 <printk>
   21414:	f240 21a7 	movw	r1, #679	; 0x2a7
   21418:	4650      	mov	r0, sl
   2141a:	f007 fb2b 	bl	28a74 <assert_post_action>
   2141e:	e767      	b.n	212f0 <nrfx_pwm_simple_playback+0x3c>
    NRFX_ASSERT(p_values != NULL);
   21420:	f8df b160 	ldr.w	fp, [pc, #352]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   21424:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   21428:	4659      	mov	r1, fp
   2142a:	4854      	ldr	r0, [pc, #336]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   2142c:	f006 ff89 	bl	28342 <printk>
   21430:	f44f 712d 	mov.w	r1, #692	; 0x2b4
   21434:	4658      	mov	r0, fp
   21436:	f007 fb1d 	bl	28a74 <assert_post_action>
   2143a:	e75f      	b.n	212fc <nrfx_pwm_simple_playback+0x48>
    NRFX_ASSERT(length != 0);
   2143c:	f8df b144 	ldr.w	fp, [pc, #324]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   21440:	f240 22bd 	movw	r2, #701	; 0x2bd
   21444:	4659      	mov	r1, fp
   21446:	484d      	ldr	r0, [pc, #308]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   21448:	f006 ff7b 	bl	28342 <printk>
   2144c:	f240 21bd 	movw	r1, #701	; 0x2bd
   21450:	4658      	mov	r0, fp
   21452:	f007 fb0f 	bl	28a74 <assert_post_action>
   21456:	e759      	b.n	2130c <nrfx_pwm_simple_playback+0x58>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   21458:	f8df b128 	ldr.w	fp, [pc, #296]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   2145c:	f240 22be 	movw	r2, #702	; 0x2be
   21460:	4659      	mov	r1, fp
   21462:	4846      	ldr	r0, [pc, #280]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   21464:	f006 ff6d 	bl	28342 <printk>
   21468:	f240 21be 	movw	r1, #702	; 0x2be
   2146c:	4658      	mov	r0, fp
   2146e:	f007 fb01 	bl	28a74 <assert_post_action>
   21472:	e74f      	b.n	21314 <nrfx_pwm_simple_playback+0x60>
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   21474:	f8df b10c 	ldr.w	fp, [pc, #268]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   21478:	f240 22c7 	movw	r2, #711	; 0x2c7
   2147c:	4659      	mov	r1, fp
   2147e:	483f      	ldr	r0, [pc, #252]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   21480:	f006 ff5f 	bl	28342 <printk>
   21484:	f240 21c7 	movw	r1, #711	; 0x2c7
   21488:	4658      	mov	r0, fp
   2148a:	f007 faf3 	bl	28a74 <assert_post_action>
   2148e:	e749      	b.n	21324 <nrfx_pwm_simple_playback+0x70>
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   21490:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   21494:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   21498:	4659      	mov	r1, fp
   2149a:	4838      	ldr	r0, [pc, #224]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   2149c:	f006 ff51 	bl	28342 <printk>
   214a0:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   214a4:	4658      	mov	r0, fp
   214a6:	f007 fae5 	bl	28a74 <assert_post_action>
   214aa:	e743      	b.n	21334 <nrfx_pwm_simple_playback+0x80>
    NRFX_ASSERT(p_seq != NULL);
   214ac:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   214b0:	f240 22a7 	movw	r2, #679	; 0x2a7
   214b4:	4651      	mov	r1, sl
   214b6:	4831      	ldr	r0, [pc, #196]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   214b8:	f006 ff43 	bl	28342 <printk>
   214bc:	f240 21a7 	movw	r1, #679	; 0x2a7
   214c0:	4650      	mov	r0, sl
   214c2:	f007 fad7 	bl	28a74 <assert_post_action>
   214c6:	e73c      	b.n	21342 <nrfx_pwm_simple_playback+0x8e>
    NRFX_ASSERT(p_values != NULL);
   214c8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   214cc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   214d0:	4659      	mov	r1, fp
   214d2:	482a      	ldr	r0, [pc, #168]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   214d4:	f006 ff35 	bl	28342 <printk>
   214d8:	f44f 712d 	mov.w	r1, #692	; 0x2b4
   214dc:	4658      	mov	r0, fp
   214de:	f007 fac9 	bl	28a74 <assert_post_action>
   214e2:	e734      	b.n	2134e <nrfx_pwm_simple_playback+0x9a>
    NRFX_ASSERT(length != 0);
   214e4:	f8df b09c 	ldr.w	fp, [pc, #156]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   214e8:	f240 22bd 	movw	r2, #701	; 0x2bd
   214ec:	4659      	mov	r1, fp
   214ee:	4823      	ldr	r0, [pc, #140]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   214f0:	f006 ff27 	bl	28342 <printk>
   214f4:	f240 21bd 	movw	r1, #701	; 0x2bd
   214f8:	4658      	mov	r0, fp
   214fa:	f007 fabb 	bl	28a74 <assert_post_action>
   214fe:	e72e      	b.n	2135e <nrfx_pwm_simple_playback+0xaa>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   21500:	f8df b080 	ldr.w	fp, [pc, #128]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   21504:	f240 22be 	movw	r2, #702	; 0x2be
   21508:	4659      	mov	r1, fp
   2150a:	481c      	ldr	r0, [pc, #112]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   2150c:	f006 ff19 	bl	28342 <printk>
   21510:	f240 21be 	movw	r1, #702	; 0x2be
   21514:	4658      	mov	r0, fp
   21516:	f007 faad 	bl	28a74 <assert_post_action>
   2151a:	e724      	b.n	21366 <nrfx_pwm_simple_playback+0xb2>
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   2151c:	f8df b064 	ldr.w	fp, [pc, #100]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   21520:	f240 22c7 	movw	r2, #711	; 0x2c7
   21524:	4659      	mov	r1, fp
   21526:	4815      	ldr	r0, [pc, #84]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   21528:	f006 ff0b 	bl	28342 <printk>
   2152c:	f240 21c7 	movw	r1, #711	; 0x2c7
   21530:	4658      	mov	r0, fp
   21532:	f007 fa9f 	bl	28a74 <assert_post_action>
   21536:	e71e      	b.n	21376 <nrfx_pwm_simple_playback+0xc2>
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   21538:	f8df a048 	ldr.w	sl, [pc, #72]	; 21584 <nrfx_pwm_simple_playback+0x2d0>
   2153c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   21540:	4651      	mov	r1, sl
   21542:	480e      	ldr	r0, [pc, #56]	; (2157c <nrfx_pwm_simple_playback+0x2c8>)
   21544:	f006 fefd 	bl	28342 <printk>
   21548:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   2154c:	4650      	mov	r0, sl
   2154e:	f007 fa91 	bl	28a74 <assert_post_action>
   21552:	e717      	b.n	21384 <nrfx_pwm_simple_playback+0xd0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   21554:	2210      	movs	r2, #16
    }
    else
    {
        shorts_mask = 0;
    }
    nrf_pwm_shorts_set(p_instance->p_registers, shorts_mask);
   21556:	6829      	ldr	r1, [r5, #0]
    p_reg->SHORTS = mask;
   21558:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   2155c:	b2f2      	uxtb	r2, r6
   2155e:	b143      	cbz	r3, 21572 <nrfx_pwm_simple_playback+0x2be>
   21560:	230c      	movs	r3, #12
   21562:	4641      	mov	r1, r8
   21564:	4628      	mov	r0, r5
   21566:	f00d fabe 	bl	2eae6 <start_playback>
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   2156a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   2156e:	2204      	movs	r2, #4
   21570:	e7f1      	b.n	21556 <nrfx_pwm_simple_playback+0x2a2>
    return start_playback(p_instance, p_cb, flags,
   21572:	2308      	movs	r3, #8
   21574:	e7f5      	b.n	21562 <nrfx_pwm_simple_playback+0x2ae>
   21576:	bf00      	nop
   21578:	20003148 	.word	0x20003148
   2157c:	0002f968 	.word	0x0002f968
   21580:	00033060 	.word	0x00033060
   21584:	00032800 	.word	0x00032800

00021588 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
   21588:	b570      	push	{r4, r5, r6, lr}
   2158a:	4605      	mov	r5, r0
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2158c:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2158e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   21592:	4b15      	ldr	r3, [pc, #84]	; (215e8 <nrfx_pwm_is_stopped+0x60>)
   21594:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   21598:	7a1b      	ldrb	r3, [r3, #8]
   2159a:	b1ab      	cbz	r3, 215c8 <nrfx_pwm_is_stopped+0x40>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   2159c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   215a0:	4a11      	ldr	r2, [pc, #68]	; (215e8 <nrfx_pwm_is_stopped+0x60>)
   215a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   215a6:	7a1b      	ldrb	r3, [r3, #8]
   215a8:	b2db      	uxtb	r3, r3
   215aa:	2b02      	cmp	r3, #2
   215ac:	d019      	beq.n	215e2 <nrfx_pwm_is_stopped+0x5a>
    {
        ret_val = true;
   215ae:	2001      	movs	r0, #1
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   215b0:	682b      	ldr	r3, [r5, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   215b6:	b133      	cbz	r3, 215c6 <nrfx_pwm_is_stopped+0x3e>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   215b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   215bc:	4b0a      	ldr	r3, [pc, #40]	; (215e8 <nrfx_pwm_is_stopped+0x60>)
   215be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   215c2:	2001      	movs	r0, #1
   215c4:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   215c6:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   215c8:	4e08      	ldr	r6, [pc, #32]	; (215ec <nrfx_pwm_is_stopped+0x64>)
   215ca:	f240 12a3 	movw	r2, #419	; 0x1a3
   215ce:	4631      	mov	r1, r6
   215d0:	4807      	ldr	r0, [pc, #28]	; (215f0 <nrfx_pwm_is_stopped+0x68>)
   215d2:	f006 feb6 	bl	28342 <printk>
   215d6:	f240 11a3 	movw	r1, #419	; 0x1a3
   215da:	4630      	mov	r0, r6
   215dc:	f007 fa4a 	bl	28a74 <assert_post_action>
   215e0:	e7dc      	b.n	2159c <nrfx_pwm_is_stopped+0x14>
    bool ret_val = false;
   215e2:	2000      	movs	r0, #0
   215e4:	e7e4      	b.n	215b0 <nrfx_pwm_is_stopped+0x28>
   215e6:	bf00      	nop
   215e8:	20003148 	.word	0x20003148
   215ec:	00033060 	.word	0x00033060
   215f0:	0002f968 	.word	0x0002f968

000215f4 <nrfx_pwm_stop>:
{
   215f4:	b570      	push	{r4, r5, r6, lr}
   215f6:	4604      	mov	r4, r0
   215f8:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   215fa:	7903      	ldrb	r3, [r0, #4]
   215fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21600:	4a13      	ldr	r2, [pc, #76]	; (21650 <nrfx_pwm_stop+0x5c>)
   21602:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   21606:	7a1b      	ldrb	r3, [r3, #8]
   21608:	b1ab      	cbz	r3, 21636 <nrfx_pwm_stop+0x42>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   2160a:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
   2160c:	2200      	movs	r2, #0
   2160e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   21612:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21614:	2201      	movs	r2, #1
   21616:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
   21618:	4620      	mov	r0, r4
   2161a:	f7ff ffb5 	bl	21588 <nrfx_pwm_is_stopped>
   2161e:	4603      	mov	r3, r0
   21620:	b938      	cbnz	r0, 21632 <nrfx_pwm_stop+0x3e>
            if (nrfx_pwm_is_stopped(p_instance))
   21622:	4620      	mov	r0, r4
   21624:	f7ff ffb0 	bl	21588 <nrfx_pwm_is_stopped>
   21628:	4603      	mov	r3, r0
   2162a:	b910      	cbnz	r0, 21632 <nrfx_pwm_stop+0x3e>
        } while (wait_until_stopped);
   2162c:	2d00      	cmp	r5, #0
   2162e:	d1f8      	bne.n	21622 <nrfx_pwm_stop+0x2e>
    bool ret_val = false;
   21630:	462b      	mov	r3, r5
}
   21632:	4618      	mov	r0, r3
   21634:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   21636:	4e07      	ldr	r6, [pc, #28]	; (21654 <nrfx_pwm_stop+0x60>)
   21638:	f44f 72bf 	mov.w	r2, #382	; 0x17e
   2163c:	4631      	mov	r1, r6
   2163e:	4806      	ldr	r0, [pc, #24]	; (21658 <nrfx_pwm_stop+0x64>)
   21640:	f006 fe7f 	bl	28342 <printk>
   21644:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   21648:	4630      	mov	r0, r6
   2164a:	f007 fa13 	bl	28a74 <assert_post_action>
   2164e:	e7dc      	b.n	2160a <nrfx_pwm_stop+0x16>
   21650:	20003148 	.word	0x20003148
   21654:	00033060 	.word	0x00033060
   21658:	0002f968 	.word	0x0002f968

0002165c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   2165c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2165e:	4c14      	ldr	r4, [pc, #80]	; (216b0 <_DoInit+0x54>)
   21660:	2303      	movs	r3, #3
   21662:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   21664:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   21666:	4a13      	ldr	r2, [pc, #76]	; (216b4 <_DoInit+0x58>)
   21668:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2166a:	4b13      	ldr	r3, [pc, #76]	; (216b8 <_DoInit+0x5c>)
   2166c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   2166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21672:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   21674:	2300      	movs	r3, #0
   21676:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   21678:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2167a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   2167c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   2167e:	4a0f      	ldr	r2, [pc, #60]	; (216bc <_DoInit+0x60>)
   21680:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   21682:	2210      	movs	r2, #16
   21684:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   21686:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   21688:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2168a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   2168c:	490c      	ldr	r1, [pc, #48]	; (216c0 <_DoInit+0x64>)
   2168e:	1de0      	adds	r0, r4, #7
   21690:	f009 f87e 	bl	2a790 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   21694:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   21698:	490a      	ldr	r1, [pc, #40]	; (216c4 <_DoInit+0x68>)
   2169a:	4620      	mov	r0, r4
   2169c:	f009 f878 	bl	2a790 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   216a0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   216a4:	2320      	movs	r3, #32
   216a6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   216a8:	f3bf 8f5f 	dmb	sy
}
   216ac:	bd10      	pop	{r4, pc}
   216ae:	bf00      	nop
   216b0:	20003154 	.word	0x20003154
   216b4:	0003309c 	.word	0x0003309c
   216b8:	2000320c 	.word	0x2000320c
   216bc:	200031fc 	.word	0x200031fc
   216c0:	000330a8 	.word	0x000330a8
   216c4:	000330ac 	.word	0x000330ac

000216c8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   216c8:	4b03      	ldr	r3, [pc, #12]	; (216d8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   216ca:	4a04      	ldr	r2, [pc, #16]	; (216dc <z_device_state_init+0x14>)
   216cc:	4293      	cmp	r3, r2
   216ce:	d201      	bcs.n	216d4 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   216d0:	3318      	adds	r3, #24
   216d2:	e7fa      	b.n	216ca <z_device_state_init+0x2>
	}
}
   216d4:	4770      	bx	lr
   216d6:	bf00      	nop
   216d8:	0002f018 	.word	0x0002f018
   216dc:	0002f120 	.word	0x0002f120

000216e0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   216e0:	b570      	push	{r4, r5, r6, lr}
   216e2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   216e4:	4b11      	ldr	r3, [pc, #68]	; (2172c <z_sys_init_run_level+0x4c>)
   216e6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   216ea:	e009      	b.n	21700 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   216ec:	4240      	negs	r0, r0
   216ee:	e017      	b.n	21720 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   216f0:	68eb      	ldr	r3, [r5, #12]
   216f2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   216f4:	68ea      	ldr	r2, [r5, #12]
   216f6:	7853      	ldrb	r3, [r2, #1]
   216f8:	f043 0301 	orr.w	r3, r3, #1
   216fc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   216fe:	3408      	adds	r4, #8
   21700:	1c73      	adds	r3, r6, #1
   21702:	4a0a      	ldr	r2, [pc, #40]	; (2172c <z_sys_init_run_level+0x4c>)
   21704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   21708:	42a3      	cmp	r3, r4
   2170a:	d90d      	bls.n	21728 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   2170c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   2170e:	6823      	ldr	r3, [r4, #0]
   21710:	4628      	mov	r0, r5
   21712:	4798      	blx	r3
		if (dev != NULL) {
   21714:	2d00      	cmp	r5, #0
   21716:	d0f2      	beq.n	216fe <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   21718:	2800      	cmp	r0, #0
   2171a:	d0eb      	beq.n	216f4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   2171c:	2800      	cmp	r0, #0
   2171e:	dbe5      	blt.n	216ec <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   21720:	28ff      	cmp	r0, #255	; 0xff
   21722:	dde5      	ble.n	216f0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   21724:	20ff      	movs	r0, #255	; 0xff
   21726:	e7e3      	b.n	216f0 <z_sys_init_run_level+0x10>
		}
	}
}
   21728:	bd70      	pop	{r4, r5, r6, pc}
   2172a:	bf00      	nop
   2172c:	000330b4 	.word	0x000330b4

00021730 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   21730:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   21732:	4605      	mov	r5, r0
   21734:	b328      	cbz	r0, 21782 <z_impl_device_get_binding+0x52>
   21736:	7803      	ldrb	r3, [r0, #0]
   21738:	b32b      	cbz	r3, 21786 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   2173a:	4c14      	ldr	r4, [pc, #80]	; (2178c <z_impl_device_get_binding+0x5c>)
   2173c:	e000      	b.n	21740 <z_impl_device_get_binding+0x10>
   2173e:	3418      	adds	r4, #24
   21740:	4b13      	ldr	r3, [pc, #76]	; (21790 <z_impl_device_get_binding+0x60>)
   21742:	429c      	cmp	r4, r3
   21744:	d008      	beq.n	21758 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   21746:	4620      	mov	r0, r4
   21748:	f00d fa01 	bl	2eb4e <z_device_ready>
   2174c:	2800      	cmp	r0, #0
   2174e:	d0f6      	beq.n	2173e <z_impl_device_get_binding+0xe>
   21750:	6823      	ldr	r3, [r4, #0]
   21752:	42ab      	cmp	r3, r5
   21754:	d1f3      	bne.n	2173e <z_impl_device_get_binding+0xe>
   21756:	e012      	b.n	2177e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   21758:	4c0c      	ldr	r4, [pc, #48]	; (2178c <z_impl_device_get_binding+0x5c>)
   2175a:	e000      	b.n	2175e <z_impl_device_get_binding+0x2e>
   2175c:	3418      	adds	r4, #24
   2175e:	4b0c      	ldr	r3, [pc, #48]	; (21790 <z_impl_device_get_binding+0x60>)
   21760:	429c      	cmp	r4, r3
   21762:	d00b      	beq.n	2177c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   21764:	4620      	mov	r0, r4
   21766:	f00d f9f2 	bl	2eb4e <z_device_ready>
   2176a:	2800      	cmp	r0, #0
   2176c:	d0f6      	beq.n	2175c <z_impl_device_get_binding+0x2c>
   2176e:	6821      	ldr	r1, [r4, #0]
   21770:	4628      	mov	r0, r5
   21772:	f009 f842 	bl	2a7fa <strcmp>
   21776:	2800      	cmp	r0, #0
   21778:	d1f0      	bne.n	2175c <z_impl_device_get_binding+0x2c>
   2177a:	e000      	b.n	2177e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   2177c:	2400      	movs	r4, #0
}
   2177e:	4620      	mov	r0, r4
   21780:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   21782:	4604      	mov	r4, r0
   21784:	e7fb      	b.n	2177e <z_impl_device_get_binding+0x4e>
   21786:	2400      	movs	r4, #0
   21788:	e7f9      	b.n	2177e <z_impl_device_get_binding+0x4e>
   2178a:	bf00      	nop
   2178c:	0002f018 	.word	0x0002f018
   21790:	0002f120 	.word	0x0002f120

00021794 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   21794:	4b01      	ldr	r3, [pc, #4]	; (2179c <z_impl_z_errno+0x8>)
   21796:	6898      	ldr	r0, [r3, #8]
}
   21798:	3098      	adds	r0, #152	; 0x98
   2179a:	4770      	bx	lr
   2179c:	2000360c 	.word	0x2000360c

000217a0 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   217a0:	2804      	cmp	r0, #4
   217a2:	d80c      	bhi.n	217be <reason_to_str+0x1e>
   217a4:	e8df f000 	tbb	[pc, r0]
   217a8:	07050d03 	.word	0x07050d03
   217ac:	09          	.byte	0x09
   217ad:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   217ae:	4806      	ldr	r0, [pc, #24]	; (217c8 <reason_to_str+0x28>)
   217b0:	4770      	bx	lr
		return "Stack overflow";
   217b2:	4806      	ldr	r0, [pc, #24]	; (217cc <reason_to_str+0x2c>)
   217b4:	4770      	bx	lr
		return "Kernel oops";
   217b6:	4806      	ldr	r0, [pc, #24]	; (217d0 <reason_to_str+0x30>)
   217b8:	4770      	bx	lr
		return "Kernel panic";
   217ba:	4806      	ldr	r0, [pc, #24]	; (217d4 <reason_to_str+0x34>)
   217bc:	4770      	bx	lr
	default:
		return "Unknown error";
   217be:	4806      	ldr	r0, [pc, #24]	; (217d8 <reason_to_str+0x38>)
   217c0:	4770      	bx	lr
		return "Unhandled interrupt";
   217c2:	4806      	ldr	r0, [pc, #24]	; (217dc <reason_to_str+0x3c>)
	}
}
   217c4:	4770      	bx	lr
   217c6:	bf00      	nop
   217c8:	0003311c 	.word	0x0003311c
   217cc:	000330f0 	.word	0x000330f0
   217d0:	00033100 	.word	0x00033100
   217d4:	0003310c 	.word	0x0003310c
   217d8:	000330cc 	.word	0x000330cc
   217dc:	000330dc 	.word	0x000330dc

000217e0 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   217e0:	b130      	cbz	r0, 217f0 <thread_name_get+0x10>
{
   217e2:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   217e4:	f00d fa06 	bl	2ebf4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   217e8:	b120      	cbz	r0, 217f4 <thread_name_get+0x14>
   217ea:	7803      	ldrb	r3, [r0, #0]
   217ec:	b123      	cbz	r3, 217f8 <thread_name_get+0x18>
}
   217ee:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   217f0:	4802      	ldr	r0, [pc, #8]	; (217fc <thread_name_get+0x1c>)
}
   217f2:	4770      	bx	lr
		thread_name = "unknown";
   217f4:	4801      	ldr	r0, [pc, #4]	; (217fc <thread_name_get+0x1c>)
   217f6:	e7fa      	b.n	217ee <thread_name_get+0xe>
   217f8:	4800      	ldr	r0, [pc, #0]	; (217fc <thread_name_get+0x1c>)
	return thread_name;
   217fa:	e7f8      	b.n	217ee <thread_name_get+0xe>
   217fc:	0003312c 	.word	0x0003312c

00021800 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21800:	b5f0      	push	{r4, r5, r6, r7, lr}
   21802:	b083      	sub	sp, #12
   21804:	4604      	mov	r4, r0
   21806:	460e      	mov	r6, r1
   21808:	f04f 0340 	mov.w	r3, #64	; 0x40
   2180c:	f3ef 8711 	mrs	r7, BASEPRI
   21810:	f383 8812 	msr	BASEPRI_MAX, r3
   21814:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   21818:	f002 fea4 	bl	24564 <z_impl_z_current_get>
   2181c:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2181e:	4620      	mov	r0, r4
   21820:	f7ff ffbe 	bl	217a0 <reason_to_str>
   21824:	4603      	mov	r3, r0
   21826:	2200      	movs	r2, #0
   21828:	9200      	str	r2, [sp, #0]
   2182a:	4622      	mov	r2, r4
   2182c:	2145      	movs	r1, #69	; 0x45
   2182e:	4818      	ldr	r0, [pc, #96]	; (21890 <z_fatal_error+0x90>)
   21830:	f007 f928 	bl	28a84 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21834:	b11e      	cbz	r6, 2183e <z_fatal_error+0x3e>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21836:	69f3      	ldr	r3, [r6, #28]
   21838:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2183c:	b9bb      	cbnz	r3, 2186e <z_fatal_error+0x6e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2183e:	4628      	mov	r0, r5
   21840:	f7ff ffce 	bl	217e0 <thread_name_get>
   21844:	4603      	mov	r3, r0
   21846:	462a      	mov	r2, r5
   21848:	2145      	movs	r1, #69	; 0x45
   2184a:	4812      	ldr	r0, [pc, #72]	; (21894 <z_fatal_error+0x94>)
   2184c:	f007 f91a 	bl	28a84 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   21850:	4631      	mov	r1, r6
   21852:	4620      	mov	r0, r4
   21854:	f7fe fb84 	bl	1ff60 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   21858:	2c04      	cmp	r4, #4
   2185a:	d00d      	beq.n	21878 <z_fatal_error+0x78>
	__asm__ volatile(
   2185c:	f387 8811 	msr	BASEPRI, r7
   21860:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   21864:	4628      	mov	r0, r5
   21866:	f7f2 f959 	bl	13b1c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2186a:	b003      	add	sp, #12
   2186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
   2186e:	2145      	movs	r1, #69	; 0x45
   21870:	4809      	ldr	r0, [pc, #36]	; (21898 <z_fatal_error+0x98>)
   21872:	f007 f907 	bl	28a84 <z_log_minimal_printk>
   21876:	e7e2      	b.n	2183e <z_fatal_error+0x3e>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   21878:	4c08      	ldr	r4, [pc, #32]	; (2189c <z_fatal_error+0x9c>)
   2187a:	228f      	movs	r2, #143	; 0x8f
   2187c:	4621      	mov	r1, r4
   2187e:	4808      	ldr	r0, [pc, #32]	; (218a0 <z_fatal_error+0xa0>)
   21880:	f006 fd5f 	bl	28342 <printk>
   21884:	218f      	movs	r1, #143	; 0x8f
   21886:	4620      	mov	r0, r4
   21888:	f007 f8f4 	bl	28a74 <assert_post_action>
   2188c:	e7e6      	b.n	2185c <z_fatal_error+0x5c>
   2188e:	bf00      	nop
   21890:	00033134 	.word	0x00033134
   21894:	0003318c 	.word	0x0003318c
   21898:	00033164 	.word	0x00033164
   2189c:	000331ac 	.word	0x000331ac
   218a0:	0002f968 	.word	0x0002f968

000218a4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   218a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   218a6:	b089      	sub	sp, #36	; 0x24
   218a8:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   218aa:	4b15      	ldr	r3, [pc, #84]	; (21900 <init_idle_thread+0x5c>)
   218ac:	25b8      	movs	r5, #184	; 0xb8
   218ae:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   218b2:	4b14      	ldr	r3, [pc, #80]	; (21904 <init_idle_thread+0x60>)
   218b4:	f44f 76b0 	mov.w	r6, #352	; 0x160
   218b8:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   218bc:	af06      	add	r7, sp, #24
   218be:	4603      	mov	r3, r0
   218c0:	4a11      	ldr	r2, [pc, #68]	; (21908 <init_idle_thread+0x64>)
   218c2:	2108      	movs	r1, #8
   218c4:	4638      	mov	r0, r7
   218c6:	f006 fd4a 	bl	2835e <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   218ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   218ce:	480f      	ldr	r0, [pc, #60]	; (2190c <init_idle_thread+0x68>)
   218d0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   218d4:	9705      	str	r7, [sp, #20]
   218d6:	2301      	movs	r3, #1
   218d8:	9304      	str	r3, [sp, #16]
   218da:	230f      	movs	r3, #15
   218dc:	9303      	str	r3, [sp, #12]
   218de:	2300      	movs	r3, #0
   218e0:	9302      	str	r3, [sp, #8]
   218e2:	9301      	str	r3, [sp, #4]
   218e4:	9400      	str	r4, [sp, #0]
   218e6:	4b0a      	ldr	r3, [pc, #40]	; (21910 <init_idle_thread+0x6c>)
   218e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   218ec:	4631      	mov	r1, r6
   218ee:	4628      	mov	r0, r5
   218f0:	f000 fb42 	bl	21f78 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   218f4:	7b6b      	ldrb	r3, [r5, #13]
   218f6:	f023 0304 	bic.w	r3, r3, #4
   218fa:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   218fc:	b009      	add	sp, #36	; 0x24
   218fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21900:	20001e50 	.word	0x20001e50
   21904:	20006520 	.word	0x20006520
   21908:	000331d0 	.word	0x000331d0
   2190c:	2000360c 	.word	0x2000360c
   21910:	0002224d 	.word	0x0002224d

00021914 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   21914:	b570      	push	{r4, r5, r6, lr}
   21916:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   21918:	f002 fca2 	bl	24260 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   2191c:	4d1b      	ldr	r5, [pc, #108]	; (2198c <prepare_multithreading+0x78>)
   2191e:	4b1c      	ldr	r3, [pc, #112]	; (21990 <prepare_multithreading+0x7c>)
   21920:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21922:	4b1c      	ldr	r3, [pc, #112]	; (21994 <prepare_multithreading+0x80>)
   21924:	9305      	str	r3, [sp, #20]
   21926:	2301      	movs	r3, #1
   21928:	9304      	str	r3, [sp, #16]
   2192a:	2400      	movs	r4, #0
   2192c:	9403      	str	r4, [sp, #12]
   2192e:	9402      	str	r4, [sp, #8]
   21930:	9401      	str	r4, [sp, #4]
   21932:	9400      	str	r4, [sp, #0]
   21934:	4b18      	ldr	r3, [pc, #96]	; (21998 <prepare_multithreading+0x84>)
   21936:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2193a:	4918      	ldr	r1, [pc, #96]	; (2199c <prepare_multithreading+0x88>)
   2193c:	4628      	mov	r0, r5
   2193e:	f000 fb1b 	bl	21f78 <z_setup_new_thread>
   21942:	4606      	mov	r6, r0
   21944:	7b6b      	ldrb	r3, [r5, #13]
   21946:	f023 0304 	bic.w	r3, r3, #4
   2194a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   2194c:	4628      	mov	r0, r5
   2194e:	f002 f8b9 	bl	23ac4 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   21952:	2c00      	cmp	r4, #0
   21954:	dd02      	ble.n	2195c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   21956:	4630      	mov	r0, r6
   21958:	b006      	add	sp, #24
   2195a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   2195c:	4620      	mov	r0, r4
   2195e:	f7ff ffa1 	bl	218a4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   21962:	4b0f      	ldr	r3, [pc, #60]	; (219a0 <prepare_multithreading+0x8c>)
   21964:	22b8      	movs	r2, #184	; 0xb8
   21966:	fb02 3204 	mla	r2, r2, r4, r3
   2196a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   2196e:	4b08      	ldr	r3, [pc, #32]	; (21990 <prepare_multithreading+0x7c>)
   21970:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   21974:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   21976:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   21978:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   2197c:	4a09      	ldr	r2, [pc, #36]	; (219a4 <prepare_multithreading+0x90>)
   2197e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   21982:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   21986:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   21988:	3401      	adds	r4, #1
   2198a:	e7e2      	b.n	21952 <prepare_multithreading+0x3e>
   2198c:	20001f08 	.word	0x20001f08
   21990:	2000360c 	.word	0x2000360c
   21994:	0002f914 	.word	0x0002f914
   21998:	000219a9 	.word	0x000219a9
   2199c:	20005d00 	.word	0x20005d00
   219a0:	20001e50 	.word	0x20001e50
   219a4:	20006680 	.word	0x20006680

000219a8 <bg_thread_main>:
{
   219a8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   219aa:	4b0a      	ldr	r3, [pc, #40]	; (219d4 <bg_thread_main+0x2c>)
   219ac:	2201      	movs	r2, #1
   219ae:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   219b0:	2002      	movs	r0, #2
   219b2:	f7ff fe95 	bl	216e0 <z_sys_init_run_level>
	boot_banner();
   219b6:	f003 ffd5 	bl	25964 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   219ba:	2003      	movs	r0, #3
   219bc:	f7ff fe90 	bl	216e0 <z_sys_init_run_level>
	z_init_static_threads();
   219c0:	f000 fbc4 	bl	2214c <z_init_static_threads>
	main();
   219c4:	f7ee fbee 	bl	101a4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   219c8:	4a03      	ldr	r2, [pc, #12]	; (219d8 <bg_thread_main+0x30>)
   219ca:	7b13      	ldrb	r3, [r2, #12]
   219cc:	f023 0301 	bic.w	r3, r3, #1
   219d0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   219d2:	bd08      	pop	{r3, pc}
   219d4:	20003f79 	.word	0x20003f79
   219d8:	20001f08 	.word	0x20001f08

000219dc <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   219dc:	b508      	push	{r3, lr}
   219de:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   219e0:	4a01      	ldr	r2, [pc, #4]	; (219e8 <switch_to_main_thread+0xc>)
   219e2:	4802      	ldr	r0, [pc, #8]	; (219ec <switch_to_main_thread+0x10>)
   219e4:	f7f1 fd54 	bl	13490 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   219e8:	000219a9 	.word	0x000219a9
   219ec:	20001f08 	.word	0x20001f08

000219f0 <z_bss_zero>:
{
   219f0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   219f2:	4803      	ldr	r0, [pc, #12]	; (21a00 <z_bss_zero+0x10>)
   219f4:	4a03      	ldr	r2, [pc, #12]	; (21a04 <z_bss_zero+0x14>)
   219f6:	1a12      	subs	r2, r2, r0
   219f8:	2100      	movs	r1, #0
   219fa:	f008 ff74 	bl	2a8e6 <memset>
}
   219fe:	bd08      	pop	{r3, pc}
   21a00:	200009c0 	.word	0x200009c0
   21a04:	20004138 	.word	0x20004138

00021a08 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21a08:	b500      	push	{lr}
   21a0a:	b0af      	sub	sp, #188	; 0xbc
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   21a0c:	4b1d      	ldr	r3, [pc, #116]	; (21a84 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21a0e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   21a12:	4c1d      	ldr	r4, [pc, #116]	; (21a88 <z_cstart+0x80>)
   21a14:	6963      	ldr	r3, [r4, #20]
   21a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   21a1a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21a1c:	23e0      	movs	r3, #224	; 0xe0
   21a1e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   21a22:	2320      	movs	r3, #32
   21a24:	77e3      	strb	r3, [r4, #31]
   21a26:	2500      	movs	r5, #0
   21a28:	7625      	strb	r5, [r4, #24]
   21a2a:	7665      	strb	r5, [r4, #25]
   21a2c:	76a5      	strb	r5, [r4, #26]
   21a2e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21a34:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21a38:	6263      	str	r3, [r4, #36]	; 0x24
   21a3a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21a3e:	f7f1 ffdd 	bl	139fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21a42:	f7f1 fba9 	bl	13198 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21a46:	f04f 33ff 	mov.w	r3, #4294967295
   21a4a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   21a4e:	f7f2 f951 	bl	13cf4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21a52:	f7f2 f879 	bl	13b48 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   21a56:	2401      	movs	r4, #1
   21a58:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   21a5c:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   21a60:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   21a62:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   21a64:	4b09      	ldr	r3, [pc, #36]	; (21a8c <z_cstart+0x84>)
   21a66:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   21a6a:	f7ff fe2d 	bl	216c8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21a6e:	4628      	mov	r0, r5
   21a70:	f7ff fe36 	bl	216e0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21a74:	4620      	mov	r0, r4
   21a76:	f7ff fe33 	bl	216e0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   21a7a:	f7ff ff4b 	bl	21914 <prepare_multithreading>
   21a7e:	f7ff ffad 	bl	219dc <switch_to_main_thread>
   21a82:	bf00      	nop
   21a84:	20006ea0 	.word	0x20006ea0
   21a88:	e000ed00 	.word	0xe000ed00
   21a8c:	2000360c 	.word	0x2000360c

00021a90 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21a90:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21a92:	4c0d      	ldr	r4, [pc, #52]	; (21ac8 <statics_init+0x38>)
   21a94:	e012      	b.n	21abc <statics_init+0x2c>
   21a96:	4d0d      	ldr	r5, [pc, #52]	; (21acc <statics_init+0x3c>)
   21a98:	2218      	movs	r2, #24
   21a9a:	4629      	mov	r1, r5
   21a9c:	480c      	ldr	r0, [pc, #48]	; (21ad0 <statics_init+0x40>)
   21a9e:	f006 fc50 	bl	28342 <printk>
   21aa2:	2118      	movs	r1, #24
   21aa4:	4628      	mov	r0, r5
   21aa6:	f006 ffe5 	bl	28a74 <assert_post_action>
   21aaa:	4b0a      	ldr	r3, [pc, #40]	; (21ad4 <statics_init+0x44>)
   21aac:	429c      	cmp	r4, r3
   21aae:	d209      	bcs.n	21ac4 <statics_init+0x34>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21ab0:	68a2      	ldr	r2, [r4, #8]
   21ab2:	6861      	ldr	r1, [r4, #4]
   21ab4:	4620      	mov	r0, r4
   21ab6:	f00d f857 	bl	2eb68 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21aba:	3418      	adds	r4, #24
   21abc:	4b05      	ldr	r3, [pc, #20]	; (21ad4 <statics_init+0x44>)
   21abe:	429c      	cmp	r4, r3
   21ac0:	d9f3      	bls.n	21aaa <statics_init+0x1a>
   21ac2:	e7e8      	b.n	21a96 <statics_init+0x6>
		}
	}
	return 0;
}
   21ac4:	2000      	movs	r0, #0
   21ac6:	bd38      	pop	{r3, r4, r5, pc}
   21ac8:	200007c4 	.word	0x200007c4
   21acc:	000331e0 	.word	0x000331e0
   21ad0:	0002f968 	.word	0x0002f968
   21ad4:	200007c4 	.word	0x200007c4

00021ad8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21adc:	b087      	sub	sp, #28
   21ade:	4681      	mov	r9, r0
   21ae0:	9103      	str	r1, [sp, #12]
   21ae2:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21ae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21ae8:	f00d f9b3 	bl	2ee52 <sys_clock_timeout_end_calc>
   21aec:	4683      	mov	fp, r0
   21aee:	9105      	str	r1, [sp, #20]
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21af0:	f109 0814 	add.w	r8, r9, #20
	__asm__ volatile(
   21af4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21af8:	f3ef 8511 	mrs	r5, BASEPRI
   21afc:	f383 8812 	msr	BASEPRI_MAX, r3
   21b00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b04:	4640      	mov	r0, r8
   21b06:	f000 f9c7 	bl	21e98 <z_spin_lock_valid>
   21b0a:	b168      	cbz	r0, 21b28 <k_heap_aligned_alloc+0x50>
	z_spin_lock_set_owner(l);
   21b0c:	4640      	mov	r0, r8
   21b0e:	f000 f9e3 	bl	21ed8 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21b12:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21b16:	b11b      	cbz	r3, 21b20 <k_heap_aligned_alloc+0x48>
   21b18:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
   21b1c:	4323      	orrs	r3, r4
   21b1e:	d10e      	bne.n	21b3e <k_heap_aligned_alloc+0x66>

	bool blocked_alloc = false;
   21b20:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   21b24:	4654      	mov	r4, sl

	while (ret == NULL) {
   21b26:	e02c      	b.n	21b82 <k_heap_aligned_alloc+0xaa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b28:	4c33      	ldr	r4, [pc, #204]	; (21bf8 <k_heap_aligned_alloc+0x120>)
   21b2a:	2281      	movs	r2, #129	; 0x81
   21b2c:	4621      	mov	r1, r4
   21b2e:	4833      	ldr	r0, [pc, #204]	; (21bfc <k_heap_aligned_alloc+0x124>)
   21b30:	f006 fc07 	bl	28342 <printk>
   21b34:	2181      	movs	r1, #129	; 0x81
   21b36:	4620      	mov	r0, r4
   21b38:	f006 ff9c 	bl	28a74 <assert_post_action>
   21b3c:	e7e6      	b.n	21b0c <k_heap_aligned_alloc+0x34>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21b3e:	4c30      	ldr	r4, [pc, #192]	; (21c00 <k_heap_aligned_alloc+0x128>)
   21b40:	2249      	movs	r2, #73	; 0x49
   21b42:	4621      	mov	r1, r4
   21b44:	482d      	ldr	r0, [pc, #180]	; (21bfc <k_heap_aligned_alloc+0x124>)
   21b46:	f006 fbfc 	bl	28342 <printk>
   21b4a:	2149      	movs	r1, #73	; 0x49
   21b4c:	4620      	mov	r0, r4
   21b4e:	f006 ff91 	bl	28a74 <assert_post_action>
   21b52:	e7e5      	b.n	21b20 <k_heap_aligned_alloc+0x48>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21b54:	e9cd 6700 	strd	r6, r7, [sp]
   21b58:	f109 020c 	add.w	r2, r9, #12
   21b5c:	4629      	mov	r1, r5
   21b5e:	4640      	mov	r0, r8
   21b60:	f002 f93c 	bl	23ddc <z_pend_curr>
   21b64:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b68:	f3ef 8511 	mrs	r5, BASEPRI
   21b6c:	f383 8812 	msr	BASEPRI_MAX, r3
   21b70:	f3bf 8f6f 	isb	sy
   21b74:	4640      	mov	r0, r8
   21b76:	f000 f98f 	bl	21e98 <z_spin_lock_valid>
   21b7a:	b1d8      	cbz	r0, 21bb4 <k_heap_aligned_alloc+0xdc>
	z_spin_lock_set_owner(l);
   21b7c:	4640      	mov	r0, r8
   21b7e:	f000 f9ab 	bl	21ed8 <z_spin_lock_set_owner>
	while (ret == NULL) {
   21b82:	bb0c      	cbnz	r4, 21bc8 <k_heap_aligned_alloc+0xf0>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21b84:	9a04      	ldr	r2, [sp, #16]
   21b86:	9903      	ldr	r1, [sp, #12]
   21b88:	4648      	mov	r0, r9
   21b8a:	f7ee ff73 	bl	10a74 <sys_heap_aligned_alloc>
   21b8e:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   21b90:	f003 f8be 	bl	24d10 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   21b94:	b9c4      	cbnz	r4, 21bc8 <k_heap_aligned_alloc+0xf0>
		    (ret != NULL) || ((end - now) <= 0)) {
   21b96:	ebbb 0600 	subs.w	r6, fp, r0
   21b9a:	9b05      	ldr	r3, [sp, #20]
   21b9c:	eb63 0701 	sbc.w	r7, r3, r1
   21ba0:	2e01      	cmp	r6, #1
   21ba2:	f177 0300 	sbcs.w	r3, r7, #0
   21ba6:	db0f      	blt.n	21bc8 <k_heap_aligned_alloc+0xf0>
		if (!blocked_alloc) {
   21ba8:	f1ba 0f00 	cmp.w	sl, #0
   21bac:	d1d2      	bne.n	21b54 <k_heap_aligned_alloc+0x7c>
			blocked_alloc = true;
   21bae:	f04f 0a01 	mov.w	sl, #1
   21bb2:	e7cf      	b.n	21b54 <k_heap_aligned_alloc+0x7c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bb4:	2281      	movs	r2, #129	; 0x81
   21bb6:	4910      	ldr	r1, [pc, #64]	; (21bf8 <k_heap_aligned_alloc+0x120>)
   21bb8:	4810      	ldr	r0, [pc, #64]	; (21bfc <k_heap_aligned_alloc+0x124>)
   21bba:	f006 fbc2 	bl	28342 <printk>
   21bbe:	2181      	movs	r1, #129	; 0x81
   21bc0:	480d      	ldr	r0, [pc, #52]	; (21bf8 <k_heap_aligned_alloc+0x120>)
   21bc2:	f006 ff57 	bl	28a74 <assert_post_action>
   21bc6:	e7d9      	b.n	21b7c <k_heap_aligned_alloc+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21bc8:	4640      	mov	r0, r8
   21bca:	f000 f975 	bl	21eb8 <z_spin_unlock_valid>
   21bce:	b138      	cbz	r0, 21be0 <k_heap_aligned_alloc+0x108>
	__asm__ volatile(
   21bd0:	f385 8811 	msr	BASEPRI, r5
   21bd4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21bd8:	4620      	mov	r0, r4
   21bda:	b007      	add	sp, #28
   21bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21be0:	4e05      	ldr	r6, [pc, #20]	; (21bf8 <k_heap_aligned_alloc+0x120>)
   21be2:	22ac      	movs	r2, #172	; 0xac
   21be4:	4631      	mov	r1, r6
   21be6:	4805      	ldr	r0, [pc, #20]	; (21bfc <k_heap_aligned_alloc+0x124>)
   21be8:	f006 fbab 	bl	28342 <printk>
   21bec:	21ac      	movs	r1, #172	; 0xac
   21bee:	4630      	mov	r0, r6
   21bf0:	f006 ff40 	bl	28a74 <assert_post_action>
   21bf4:	e7ec      	b.n	21bd0 <k_heap_aligned_alloc+0xf8>
   21bf6:	bf00      	nop
   21bf8:	0002f9a4 	.word	0x0002f9a4
   21bfc:	0002f968 	.word	0x0002f968
   21c00:	000331e0 	.word	0x000331e0

00021c04 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   21c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c08:	4604      	mov	r4, r0
   21c0a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21c0c:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   21c10:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c14:	f3ef 8711 	mrs	r7, BASEPRI
   21c18:	f383 8812 	msr	BASEPRI_MAX, r3
   21c1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c20:	4628      	mov	r0, r5
   21c22:	f000 f939 	bl	21e98 <z_spin_lock_valid>
   21c26:	b188      	cbz	r0, 21c4c <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
   21c28:	4628      	mov	r0, r5
   21c2a:	f000 f955 	bl	21ed8 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   21c2e:	4631      	mov	r1, r6
   21c30:	4620      	mov	r0, r4
   21c32:	f7ee fec9 	bl	109c8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   21c36:	f104 000c 	add.w	r0, r4, #12
   21c3a:	f00d f8d8 	bl	2edee <z_unpend_all>
   21c3e:	b188      	cbz	r0, 21c64 <k_heap_free+0x60>
		z_reschedule(&h->lock, key);
   21c40:	4639      	mov	r1, r7
   21c42:	4628      	mov	r0, r5
   21c44:	f001 fccc 	bl	235e0 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   21c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c4c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 21c90 <k_heap_free+0x8c>
   21c50:	2281      	movs	r2, #129	; 0x81
   21c52:	4641      	mov	r1, r8
   21c54:	480d      	ldr	r0, [pc, #52]	; (21c8c <k_heap_free+0x88>)
   21c56:	f006 fb74 	bl	28342 <printk>
   21c5a:	2181      	movs	r1, #129	; 0x81
   21c5c:	4640      	mov	r0, r8
   21c5e:	f006 ff09 	bl	28a74 <assert_post_action>
   21c62:	e7e1      	b.n	21c28 <k_heap_free+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c64:	4628      	mov	r0, r5
   21c66:	f000 f927 	bl	21eb8 <z_spin_unlock_valid>
   21c6a:	b120      	cbz	r0, 21c76 <k_heap_free+0x72>
	__asm__ volatile(
   21c6c:	f387 8811 	msr	BASEPRI, r7
   21c70:	f3bf 8f6f 	isb	sy
   21c74:	e7e8      	b.n	21c48 <k_heap_free+0x44>
   21c76:	4c06      	ldr	r4, [pc, #24]	; (21c90 <k_heap_free+0x8c>)
   21c78:	22ac      	movs	r2, #172	; 0xac
   21c7a:	4621      	mov	r1, r4
   21c7c:	4803      	ldr	r0, [pc, #12]	; (21c8c <k_heap_free+0x88>)
   21c7e:	f006 fb60 	bl	28342 <printk>
   21c82:	21ac      	movs	r1, #172	; 0xac
   21c84:	4620      	mov	r0, r4
   21c86:	f006 fef5 	bl	28a74 <assert_post_action>
   21c8a:	e7ef      	b.n	21c6c <k_heap_free+0x68>
   21c8c:	0002f968 	.word	0x0002f968
   21c90:	0002f9a4 	.word	0x0002f9a4

00021c94 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   21c94:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21c96:	4c0e      	ldr	r4, [pc, #56]	; (21cd0 <init_mem_slab_module+0x3c>)
	int rc = 0;
   21c98:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21c9a:	e012      	b.n	21cc2 <init_mem_slab_module+0x2e>
   21c9c:	4e0d      	ldr	r6, [pc, #52]	; (21cd4 <init_mem_slab_module+0x40>)
   21c9e:	223c      	movs	r2, #60	; 0x3c
   21ca0:	4631      	mov	r1, r6
   21ca2:	480d      	ldr	r0, [pc, #52]	; (21cd8 <init_mem_slab_module+0x44>)
   21ca4:	f006 fb4d 	bl	28342 <printk>
   21ca8:	213c      	movs	r1, #60	; 0x3c
   21caa:	4630      	mov	r0, r6
   21cac:	f006 fee2 	bl	28a74 <assert_post_action>
   21cb0:	4b0a      	ldr	r3, [pc, #40]	; (21cdc <init_mem_slab_module+0x48>)
   21cb2:	429c      	cmp	r4, r3
   21cb4:	d209      	bcs.n	21cca <init_mem_slab_module+0x36>
		rc = create_free_list(slab);
   21cb6:	4620      	mov	r0, r4
   21cb8:	f00c ff5e 	bl	2eb78 <create_free_list>
		if (rc < 0) {
   21cbc:	1e05      	subs	r5, r0, #0
   21cbe:	db04      	blt.n	21cca <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21cc0:	3420      	adds	r4, #32
   21cc2:	4b06      	ldr	r3, [pc, #24]	; (21cdc <init_mem_slab_module+0x48>)
   21cc4:	429c      	cmp	r4, r3
   21cc6:	d9f3      	bls.n	21cb0 <init_mem_slab_module+0x1c>
   21cc8:	e7e8      	b.n	21c9c <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   21cca:	4628      	mov	r0, r5
   21ccc:	bd70      	pop	{r4, r5, r6, pc}
   21cce:	bf00      	nop
   21cd0:	20000764 	.word	0x20000764
   21cd4:	00033204 	.word	0x00033204
   21cd8:	0002f968 	.word	0x0002f968
   21cdc:	200007c4 	.word	0x200007c4

00021ce0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21ce4:	b082      	sub	sp, #8
   21ce6:	4604      	mov	r4, r0
   21ce8:	460e      	mov	r6, r1
   21cea:	4690      	mov	r8, r2
   21cec:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21cee:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   21cf2:	f04f 0340 	mov.w	r3, #64	; 0x40
   21cf6:	f3ef 8711 	mrs	r7, BASEPRI
   21cfa:	f383 8812 	msr	BASEPRI_MAX, r3
   21cfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d02:	4628      	mov	r0, r5
   21d04:	f000 f8c8 	bl	21e98 <z_spin_lock_valid>
   21d08:	b1c0      	cbz	r0, 21d3c <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
   21d0a:	4628      	mov	r0, r5
   21d0c:	f000 f8e4 	bl	21ed8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21d10:	69a3      	ldr	r3, [r4, #24]
   21d12:	b1fb      	cbz	r3, 21d54 <k_mem_slab_alloc+0x74>
		/* take a free block */
		*mem = slab->free_list;
   21d14:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   21d16:	69a3      	ldr	r3, [r4, #24]
   21d18:	681b      	ldr	r3, [r3, #0]
   21d1a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   21d1c:	69e3      	ldr	r3, [r4, #28]
   21d1e:	3301      	adds	r3, #1
   21d20:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21d22:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d24:	4628      	mov	r0, r5
   21d26:	f000 f8c7 	bl	21eb8 <z_spin_unlock_valid>
   21d2a:	b350      	cbz	r0, 21d82 <k_mem_slab_alloc+0xa2>
	__asm__ volatile(
   21d2c:	f387 8811 	msr	BASEPRI, r7
   21d30:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   21d34:	4620      	mov	r0, r4
   21d36:	b002      	add	sp, #8
   21d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d3c:	f8df a060 	ldr.w	sl, [pc, #96]	; 21da0 <k_mem_slab_alloc+0xc0>
   21d40:	2281      	movs	r2, #129	; 0x81
   21d42:	4651      	mov	r1, sl
   21d44:	4814      	ldr	r0, [pc, #80]	; (21d98 <k_mem_slab_alloc+0xb8>)
   21d46:	f006 fafc 	bl	28342 <printk>
   21d4a:	2181      	movs	r1, #129	; 0x81
   21d4c:	4650      	mov	r0, sl
   21d4e:	f006 fe91 	bl	28a74 <assert_post_action>
   21d52:	e7da      	b.n	21d0a <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21d54:	ea58 0309 	orrs.w	r3, r8, r9
   21d58:	d104      	bne.n	21d64 <k_mem_slab_alloc+0x84>
		*mem = NULL;
   21d5a:	2300      	movs	r3, #0
   21d5c:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   21d5e:	f06f 040b 	mvn.w	r4, #11
   21d62:	e7df      	b.n	21d24 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21d64:	e9cd 8900 	strd	r8, r9, [sp]
   21d68:	4622      	mov	r2, r4
   21d6a:	4639      	mov	r1, r7
   21d6c:	4628      	mov	r0, r5
   21d6e:	f002 f835 	bl	23ddc <z_pend_curr>
		if (result == 0) {
   21d72:	4604      	mov	r4, r0
   21d74:	2800      	cmp	r0, #0
   21d76:	d1dd      	bne.n	21d34 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   21d78:	4b08      	ldr	r3, [pc, #32]	; (21d9c <k_mem_slab_alloc+0xbc>)
   21d7a:	689b      	ldr	r3, [r3, #8]
   21d7c:	695b      	ldr	r3, [r3, #20]
   21d7e:	6033      	str	r3, [r6, #0]
		return result;
   21d80:	e7d8      	b.n	21d34 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d82:	4d07      	ldr	r5, [pc, #28]	; (21da0 <k_mem_slab_alloc+0xc0>)
   21d84:	22ac      	movs	r2, #172	; 0xac
   21d86:	4629      	mov	r1, r5
   21d88:	4803      	ldr	r0, [pc, #12]	; (21d98 <k_mem_slab_alloc+0xb8>)
   21d8a:	f006 fada 	bl	28342 <printk>
   21d8e:	21ac      	movs	r1, #172	; 0xac
   21d90:	4628      	mov	r0, r5
   21d92:	f006 fe6f 	bl	28a74 <assert_post_action>
   21d96:	e7c9      	b.n	21d2c <k_mem_slab_alloc+0x4c>
   21d98:	0002f968 	.word	0x0002f968
   21d9c:	2000360c 	.word	0x2000360c
   21da0:	0002f9a4 	.word	0x0002f9a4

00021da4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21da8:	4604      	mov	r4, r0
   21daa:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21dac:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21db0:	f04f 0340 	mov.w	r3, #64	; 0x40
   21db4:	f3ef 8711 	mrs	r7, BASEPRI
   21db8:	f383 8812 	msr	BASEPRI_MAX, r3
   21dbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21dc0:	4630      	mov	r0, r6
   21dc2:	f000 f869 	bl	21e98 <z_spin_lock_valid>
   21dc6:	b1b0      	cbz	r0, 21df6 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
   21dc8:	4630      	mov	r0, r6
   21dca:	f000 f885 	bl	21ed8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   21dce:	69a3      	ldr	r3, [r4, #24]
   21dd0:	b1eb      	cbz	r3, 21e0e <k_mem_slab_free+0x6a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   21dd2:	682b      	ldr	r3, [r5, #0]
   21dd4:	69a2      	ldr	r2, [r4, #24]
   21dd6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21dd8:	682b      	ldr	r3, [r5, #0]
   21dda:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   21ddc:	69e3      	ldr	r3, [r4, #28]
   21dde:	3b01      	subs	r3, #1
   21de0:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21de2:	4630      	mov	r0, r6
   21de4:	f000 f868 	bl	21eb8 <z_spin_unlock_valid>
   21de8:	b310      	cbz	r0, 21e30 <k_mem_slab_free+0x8c>
	__asm__ volatile(
   21dea:	f387 8811 	msr	BASEPRI, r7
   21dee:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   21df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21df6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 21e4c <k_mem_slab_free+0xa8>
   21dfa:	2281      	movs	r2, #129	; 0x81
   21dfc:	4641      	mov	r1, r8
   21dfe:	4812      	ldr	r0, [pc, #72]	; (21e48 <k_mem_slab_free+0xa4>)
   21e00:	f006 fa9f 	bl	28342 <printk>
   21e04:	2181      	movs	r1, #129	; 0x81
   21e06:	4640      	mov	r0, r8
   21e08:	f006 fe34 	bl	28a74 <assert_post_action>
   21e0c:	e7dc      	b.n	21dc8 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   21e0e:	4620      	mov	r0, r4
   21e10:	f002 f9d4 	bl	241bc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   21e14:	2800      	cmp	r0, #0
   21e16:	d0dc      	beq.n	21dd2 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   21e18:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21e1a:	2100      	movs	r1, #0
   21e1c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   21e20:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   21e22:	f001 fe4f 	bl	23ac4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   21e26:	4639      	mov	r1, r7
   21e28:	4630      	mov	r0, r6
   21e2a:	f001 fbd9 	bl	235e0 <z_reschedule>
			return;
   21e2e:	e7e0      	b.n	21df2 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e30:	4c06      	ldr	r4, [pc, #24]	; (21e4c <k_mem_slab_free+0xa8>)
   21e32:	22ac      	movs	r2, #172	; 0xac
   21e34:	4621      	mov	r1, r4
   21e36:	4804      	ldr	r0, [pc, #16]	; (21e48 <k_mem_slab_free+0xa4>)
   21e38:	f006 fa83 	bl	28342 <printk>
   21e3c:	21ac      	movs	r1, #172	; 0xac
   21e3e:	4620      	mov	r0, r4
   21e40:	f006 fe18 	bl	28a74 <assert_post_action>
   21e44:	e7d1      	b.n	21dea <k_mem_slab_free+0x46>
   21e46:	bf00      	nop
   21e48:	0002f968 	.word	0x0002f968
   21e4c:	0002f9a4 	.word	0x0002f9a4

00021e50 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   21e50:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   21e52:	4604      	mov	r4, r0
   21e54:	b140      	cbz	r0, 21e68 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   21e56:	2220      	movs	r2, #32
   21e58:	f104 0078 	add.w	r0, r4, #120	; 0x78
   21e5c:	f008 fca1 	bl	2a7a2 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   21e60:	2000      	movs	r0, #0
   21e62:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   21e66:	bd10      	pop	{r4, pc}
		thread = _current;
   21e68:	4b01      	ldr	r3, [pc, #4]	; (21e70 <z_impl_k_thread_name_set+0x20>)
   21e6a:	689c      	ldr	r4, [r3, #8]
   21e6c:	e7f3      	b.n	21e56 <z_impl_k_thread_name_set+0x6>
   21e6e:	bf00      	nop
   21e70:	2000360c 	.word	0x2000360c

00021e74 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   21e74:	b538      	push	{r3, r4, r5, lr}
   21e76:	4614      	mov	r4, r2
   21e78:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21e7a:	ea54 0305 	orrs.w	r3, r4, r5
   21e7e:	d102      	bne.n	21e86 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   21e80:	f00c feba 	bl	2ebf8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   21e84:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21e86:	462b      	mov	r3, r5
   21e88:	4902      	ldr	r1, [pc, #8]	; (21e94 <schedule_new_thread+0x20>)
   21e8a:	3018      	adds	r0, #24
   21e8c:	f002 fcd4 	bl	24838 <z_add_timeout>
   21e90:	e7f8      	b.n	21e84 <schedule_new_thread+0x10>
   21e92:	bf00      	nop
   21e94:	00023bd9 	.word	0x00023bd9

00021e98 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   21e98:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
   21e9a:	b13b      	cbz	r3, 21eac <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   21e9c:	f003 0303 	and.w	r3, r3, #3
   21ea0:	4a04      	ldr	r2, [pc, #16]	; (21eb4 <z_spin_lock_valid+0x1c>)
   21ea2:	7d12      	ldrb	r2, [r2, #20]
   21ea4:	4293      	cmp	r3, r2
   21ea6:	d003      	beq.n	21eb0 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
   21ea8:	2001      	movs	r0, #1
   21eaa:	4770      	bx	lr
   21eac:	2001      	movs	r0, #1
   21eae:	4770      	bx	lr
			return false;
   21eb0:	2000      	movs	r0, #0
}
   21eb2:	4770      	bx	lr
   21eb4:	2000360c 	.word	0x2000360c

00021eb8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21eb8:	6801      	ldr	r1, [r0, #0]
   21eba:	4a06      	ldr	r2, [pc, #24]	; (21ed4 <z_spin_unlock_valid+0x1c>)
   21ebc:	7d13      	ldrb	r3, [r2, #20]
   21ebe:	6892      	ldr	r2, [r2, #8]
   21ec0:	4313      	orrs	r3, r2
   21ec2:	4299      	cmp	r1, r3
   21ec4:	d103      	bne.n	21ece <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
   21ec6:	2300      	movs	r3, #0
   21ec8:	6003      	str	r3, [r0, #0]
	return true;
   21eca:	2001      	movs	r0, #1
   21ecc:	4770      	bx	lr
		return false;
   21ece:	2000      	movs	r0, #0
}
   21ed0:	4770      	bx	lr
   21ed2:	bf00      	nop
   21ed4:	2000360c 	.word	0x2000360c

00021ed8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   21ed8:	4a02      	ldr	r2, [pc, #8]	; (21ee4 <z_spin_lock_set_owner+0xc>)
   21eda:	7d13      	ldrb	r3, [r2, #20]
   21edc:	6892      	ldr	r2, [r2, #8]
   21ede:	4313      	orrs	r3, r2
   21ee0:	6003      	str	r3, [r0, #0]
}
   21ee2:	4770      	bx	lr
   21ee4:	2000360c 	.word	0x2000360c

00021ee8 <z_thread_monitor_exit>:
{
   21ee8:	b570      	push	{r4, r5, r6, lr}
   21eea:	4604      	mov	r4, r0
	__asm__ volatile(
   21eec:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ef0:	f3ef 8511 	mrs	r5, BASEPRI
   21ef4:	f383 8812 	msr	BASEPRI_MAX, r3
   21ef8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21efc:	481a      	ldr	r0, [pc, #104]	; (21f68 <z_thread_monitor_exit+0x80>)
   21efe:	f7ff ffcb 	bl	21e98 <z_spin_lock_valid>
   21f02:	b150      	cbz	r0, 21f1a <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
   21f04:	4818      	ldr	r0, [pc, #96]	; (21f68 <z_thread_monitor_exit+0x80>)
   21f06:	f7ff ffe7 	bl	21ed8 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   21f0a:	4b18      	ldr	r3, [pc, #96]	; (21f6c <z_thread_monitor_exit+0x84>)
   21f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f0e:	42a3      	cmp	r3, r4
   21f10:	d10f      	bne.n	21f32 <z_thread_monitor_exit+0x4a>
		_kernel.threads = _kernel.threads->next_thread;
   21f12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   21f14:	4b15      	ldr	r3, [pc, #84]	; (21f6c <z_thread_monitor_exit+0x84>)
   21f16:	629a      	str	r2, [r3, #40]	; 0x28
   21f18:	e012      	b.n	21f40 <z_thread_monitor_exit+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f1a:	4e15      	ldr	r6, [pc, #84]	; (21f70 <z_thread_monitor_exit+0x88>)
   21f1c:	2281      	movs	r2, #129	; 0x81
   21f1e:	4631      	mov	r1, r6
   21f20:	4814      	ldr	r0, [pc, #80]	; (21f74 <z_thread_monitor_exit+0x8c>)
   21f22:	f006 fa0e 	bl	28342 <printk>
   21f26:	2181      	movs	r1, #129	; 0x81
   21f28:	4630      	mov	r0, r6
   21f2a:	f006 fda3 	bl	28a74 <assert_post_action>
   21f2e:	e7e9      	b.n	21f04 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
   21f30:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   21f32:	b113      	cbz	r3, 21f3a <z_thread_monitor_exit+0x52>
			(thread != prev_thread->next_thread)) {
   21f34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   21f36:	42a2      	cmp	r2, r4
   21f38:	d1fa      	bne.n	21f30 <z_thread_monitor_exit+0x48>
		if (prev_thread != NULL) {
   21f3a:	b10b      	cbz	r3, 21f40 <z_thread_monitor_exit+0x58>
			prev_thread->next_thread = thread->next_thread;
   21f3c:	6f62      	ldr	r2, [r4, #116]	; 0x74
   21f3e:	675a      	str	r2, [r3, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f40:	4809      	ldr	r0, [pc, #36]	; (21f68 <z_thread_monitor_exit+0x80>)
   21f42:	f7ff ffb9 	bl	21eb8 <z_spin_unlock_valid>
   21f46:	b120      	cbz	r0, 21f52 <z_thread_monitor_exit+0x6a>
	__asm__ volatile(
   21f48:	f385 8811 	msr	BASEPRI, r5
   21f4c:	f3bf 8f6f 	isb	sy
}
   21f50:	bd70      	pop	{r4, r5, r6, pc}
   21f52:	4c07      	ldr	r4, [pc, #28]	; (21f70 <z_thread_monitor_exit+0x88>)
   21f54:	22ac      	movs	r2, #172	; 0xac
   21f56:	4621      	mov	r1, r4
   21f58:	4806      	ldr	r0, [pc, #24]	; (21f74 <z_thread_monitor_exit+0x8c>)
   21f5a:	f006 f9f2 	bl	28342 <printk>
   21f5e:	21ac      	movs	r1, #172	; 0xac
   21f60:	4620      	mov	r0, r4
   21f62:	f006 fd87 	bl	28a74 <assert_post_action>
   21f66:	e7ef      	b.n	21f48 <z_thread_monitor_exit+0x60>
   21f68:	20003638 	.word	0x20003638
   21f6c:	2000360c 	.word	0x2000360c
   21f70:	0002f9a4 	.word	0x0002f9a4
   21f74:	0002f968 	.word	0x0002f968

00021f78 <z_setup_new_thread>:
{
   21f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f7c:	b085      	sub	sp, #20
   21f7e:	4604      	mov	r4, r0
   21f80:	460e      	mov	r6, r1
   21f82:	4617      	mov	r7, r2
   21f84:	461d      	mov	r5, r3
   21f86:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   21f8a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
   21f8e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   21f92:	f1b8 0f0f 	cmp.w	r8, #15
   21f96:	d05d      	beq.n	22054 <z_setup_new_thread+0xdc>
   21f98:	f108 0310 	add.w	r3, r8, #16
   21f9c:	2b1e      	cmp	r3, #30
   21f9e:	d85d      	bhi.n	2205c <z_setup_new_thread+0xe4>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21fa0:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   21fa4:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   21fa6:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   21fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21faa:	2204      	movs	r2, #4
   21fac:	4641      	mov	r1, r8
   21fae:	4620      	mov	r0, r4
   21fb0:	f00c fe26 	bl	2ec00 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   21fb4:	463a      	mov	r2, r7
   21fb6:	4631      	mov	r1, r6
   21fb8:	4620      	mov	r0, r4
   21fba:	f00c fe03 	bl	2ebc4 <setup_thread_stack>
   21fbe:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21fc2:	9302      	str	r3, [sp, #8]
   21fc4:	f8cd a004 	str.w	sl, [sp, #4]
   21fc8:	f8cd b000 	str.w	fp, [sp]
   21fcc:	462b      	mov	r3, r5
   21fce:	4602      	mov	r2, r0
   21fd0:	4631      	mov	r1, r6
   21fd2:	4620      	mov	r0, r4
   21fd4:	f7f1 fa0c 	bl	133f0 <arch_new_thread>
	new_thread->init_data = NULL;
   21fd8:	2300      	movs	r3, #0
   21fda:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   21fdc:	6665      	str	r5, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   21fde:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   21fe2:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   21fe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21fe8:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   21fea:	f04f 0340 	mov.w	r3, #64	; 0x40
   21fee:	f3ef 8611 	mrs	r6, BASEPRI
   21ff2:	f383 8812 	msr	BASEPRI_MAX, r3
   21ff6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ffa:	482e      	ldr	r0, [pc, #184]	; (220b4 <z_setup_new_thread+0x13c>)
   21ffc:	f7ff ff4c 	bl	21e98 <z_spin_lock_valid>
   22000:	2800      	cmp	r0, #0
   22002:	d039      	beq.n	22078 <z_setup_new_thread+0x100>
	z_spin_lock_set_owner(l);
   22004:	4d2b      	ldr	r5, [pc, #172]	; (220b4 <z_setup_new_thread+0x13c>)
   22006:	4628      	mov	r0, r5
   22008:	f7ff ff66 	bl	21ed8 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
   2200c:	4b2a      	ldr	r3, [pc, #168]	; (220b8 <z_setup_new_thread+0x140>)
   2200e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   22010:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   22012:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22014:	4628      	mov	r0, r5
   22016:	f7ff ff4f 	bl	21eb8 <z_spin_unlock_valid>
   2201a:	2800      	cmp	r0, #0
   2201c:	d037      	beq.n	2208e <z_setup_new_thread+0x116>
	__asm__ volatile(
   2201e:	f386 8811 	msr	BASEPRI, r6
   22022:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   22026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22028:	2b00      	cmp	r3, #0
   2202a:	d03b      	beq.n	220a4 <z_setup_new_thread+0x12c>
		strncpy(new_thread->name, name,
   2202c:	221f      	movs	r2, #31
   2202e:	4619      	mov	r1, r3
   22030:	f104 0078 	add.w	r0, r4, #120	; 0x78
   22034:	f008 fbb5 	bl	2a7a2 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   22038:	2300      	movs	r3, #0
   2203a:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
   2203e:	4b1e      	ldr	r3, [pc, #120]	; (220b8 <z_setup_new_thread+0x140>)
   22040:	689b      	ldr	r3, [r3, #8]
   22042:	b39b      	cbz	r3, 220ac <z_setup_new_thread+0x134>
	new_thread->resource_pool = _current->resource_pool;
   22044:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   22048:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   2204c:	4638      	mov	r0, r7
   2204e:	b005      	add	sp, #20
   22050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   22054:	4b19      	ldr	r3, [pc, #100]	; (220bc <z_setup_new_thread+0x144>)
   22056:	429d      	cmp	r5, r3
   22058:	d19e      	bne.n	21f98 <z_setup_new_thread+0x20>
   2205a:	e7a1      	b.n	21fa0 <z_setup_new_thread+0x28>
   2205c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 220c8 <z_setup_new_thread+0x150>
   22060:	f240 2205 	movw	r2, #517	; 0x205
   22064:	4649      	mov	r1, r9
   22066:	4816      	ldr	r0, [pc, #88]	; (220c0 <z_setup_new_thread+0x148>)
   22068:	f006 f96b 	bl	28342 <printk>
   2206c:	f240 2105 	movw	r1, #517	; 0x205
   22070:	4648      	mov	r0, r9
   22072:	f006 fcff 	bl	28a74 <assert_post_action>
   22076:	e793      	b.n	21fa0 <z_setup_new_thread+0x28>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22078:	4d12      	ldr	r5, [pc, #72]	; (220c4 <z_setup_new_thread+0x14c>)
   2207a:	2281      	movs	r2, #129	; 0x81
   2207c:	4629      	mov	r1, r5
   2207e:	4810      	ldr	r0, [pc, #64]	; (220c0 <z_setup_new_thread+0x148>)
   22080:	f006 f95f 	bl	28342 <printk>
   22084:	2181      	movs	r1, #129	; 0x81
   22086:	4628      	mov	r0, r5
   22088:	f006 fcf4 	bl	28a74 <assert_post_action>
   2208c:	e7ba      	b.n	22004 <z_setup_new_thread+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2208e:	4d0d      	ldr	r5, [pc, #52]	; (220c4 <z_setup_new_thread+0x14c>)
   22090:	22ac      	movs	r2, #172	; 0xac
   22092:	4629      	mov	r1, r5
   22094:	480a      	ldr	r0, [pc, #40]	; (220c0 <z_setup_new_thread+0x148>)
   22096:	f006 f954 	bl	28342 <printk>
   2209a:	21ac      	movs	r1, #172	; 0xac
   2209c:	4628      	mov	r0, r5
   2209e:	f006 fce9 	bl	28a74 <assert_post_action>
   220a2:	e7bc      	b.n	2201e <z_setup_new_thread+0xa6>
		new_thread->name[0] = '\0';
   220a4:	2300      	movs	r3, #0
   220a6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   220aa:	e7c8      	b.n	2203e <z_setup_new_thread+0xc6>
		new_thread->resource_pool = NULL;
   220ac:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   220b0:	e7cc      	b.n	2204c <z_setup_new_thread+0xd4>
   220b2:	bf00      	nop
   220b4:	20003638 	.word	0x20003638
   220b8:	2000360c 	.word	0x2000360c
   220bc:	0002224d 	.word	0x0002224d
   220c0:	0002f968 	.word	0x0002f968
   220c4:	0002f9a4 	.word	0x0002f9a4
   220c8:	0003322c 	.word	0x0003322c

000220cc <z_impl_k_thread_create>:
{
   220cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   220d0:	b086      	sub	sp, #24
   220d2:	4604      	mov	r4, r0
   220d4:	460d      	mov	r5, r1
   220d6:	4616      	mov	r6, r2
   220d8:	461f      	mov	r7, r3
   220da:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   220de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   220e2:	b9db      	cbnz	r3, 2211c <z_impl_k_thread_create+0x50>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   220e4:	2300      	movs	r3, #0
   220e6:	9305      	str	r3, [sp, #20]
   220e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   220ea:	9304      	str	r3, [sp, #16]
   220ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   220ee:	9303      	str	r3, [sp, #12]
   220f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   220f2:	9302      	str	r3, [sp, #8]
   220f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   220f6:	9301      	str	r3, [sp, #4]
   220f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   220fa:	9300      	str	r3, [sp, #0]
   220fc:	463b      	mov	r3, r7
   220fe:	4632      	mov	r2, r6
   22100:	4629      	mov	r1, r5
   22102:	4620      	mov	r0, r4
   22104:	f7ff ff38 	bl	21f78 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   22108:	f1b9 3fff 	cmp.w	r9, #4294967295
   2210c:	bf08      	it	eq
   2210e:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   22112:	d111      	bne.n	22138 <z_impl_k_thread_create+0x6c>
}
   22114:	4620      	mov	r0, r4
   22116:	b006      	add	sp, #24
   22118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2211c:	f8df a028 	ldr.w	sl, [pc, #40]	; 22148 <z_impl_k_thread_create+0x7c>
   22120:	f240 226e 	movw	r2, #622	; 0x26e
   22124:	4651      	mov	r1, sl
   22126:	4807      	ldr	r0, [pc, #28]	; (22144 <z_impl_k_thread_create+0x78>)
   22128:	f006 f90b 	bl	28342 <printk>
   2212c:	f240 216e 	movw	r1, #622	; 0x26e
   22130:	4650      	mov	r0, sl
   22132:	f006 fc9f 	bl	28a74 <assert_post_action>
   22136:	e7d5      	b.n	220e4 <z_impl_k_thread_create+0x18>
		schedule_new_thread(new_thread, delay);
   22138:	4642      	mov	r2, r8
   2213a:	464b      	mov	r3, r9
   2213c:	4620      	mov	r0, r4
   2213e:	f7ff fe99 	bl	21e74 <schedule_new_thread>
   22142:	e7e7      	b.n	22114 <z_impl_k_thread_create+0x48>
   22144:	0002f968 	.word	0x0002f968
   22148:	0003322c 	.word	0x0003322c

0002214c <z_init_static_threads>:
{
   2214c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   22150:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   22152:	4c33      	ldr	r4, [pc, #204]	; (22220 <z_init_static_threads+0xd4>)
   22154:	e023      	b.n	2219e <z_init_static_threads+0x52>
   22156:	4d33      	ldr	r5, [pc, #204]	; (22224 <z_init_static_threads+0xd8>)
   22158:	f240 22d5 	movw	r2, #725	; 0x2d5
   2215c:	4629      	mov	r1, r5
   2215e:	4832      	ldr	r0, [pc, #200]	; (22228 <z_init_static_threads+0xdc>)
   22160:	f006 f8ef 	bl	28342 <printk>
   22164:	f240 21d5 	movw	r1, #725	; 0x2d5
   22168:	4628      	mov	r0, r5
   2216a:	f006 fc83 	bl	28a74 <assert_post_action>
   2216e:	4b2f      	ldr	r3, [pc, #188]	; (2222c <z_init_static_threads+0xe0>)
   22170:	429c      	cmp	r4, r3
   22172:	d218      	bcs.n	221a6 <z_init_static_threads+0x5a>
		z_setup_new_thread(
   22174:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22176:	9305      	str	r3, [sp, #20]
   22178:	6a23      	ldr	r3, [r4, #32]
   2217a:	9304      	str	r3, [sp, #16]
   2217c:	69e3      	ldr	r3, [r4, #28]
   2217e:	9303      	str	r3, [sp, #12]
   22180:	69a3      	ldr	r3, [r4, #24]
   22182:	9302      	str	r3, [sp, #8]
   22184:	6963      	ldr	r3, [r4, #20]
   22186:	9301      	str	r3, [sp, #4]
   22188:	6923      	ldr	r3, [r4, #16]
   2218a:	9300      	str	r3, [sp, #0]
   2218c:	68e3      	ldr	r3, [r4, #12]
   2218e:	68a2      	ldr	r2, [r4, #8]
   22190:	6861      	ldr	r1, [r4, #4]
   22192:	6820      	ldr	r0, [r4, #0]
   22194:	f7ff fef0 	bl	21f78 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22198:	6823      	ldr	r3, [r4, #0]
   2219a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2219c:	3430      	adds	r4, #48	; 0x30
   2219e:	4b23      	ldr	r3, [pc, #140]	; (2222c <z_init_static_threads+0xe0>)
   221a0:	429c      	cmp	r4, r3
   221a2:	d9e4      	bls.n	2216e <z_init_static_threads+0x22>
   221a4:	e7d7      	b.n	22156 <z_init_static_threads+0xa>
	k_sched_lock();
   221a6:	f001 fa57 	bl	23658 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   221aa:	4c1d      	ldr	r4, [pc, #116]	; (22220 <z_init_static_threads+0xd4>)
   221ac:	e01b      	b.n	221e6 <z_init_static_threads+0x9a>
			schedule_new_thread(thread_data->init_thread,
   221ae:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   221b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   221b4:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   221b8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   221bc:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   221c0:	03d8      	lsls	r0, r3, #15
   221c2:	f240 35e7 	movw	r5, #999	; 0x3e7
   221c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   221ca:	2300      	movs	r3, #0
   221cc:	1940      	adds	r0, r0, r5
   221ce:	f04f 0500 	mov.w	r5, #0
   221d2:	eb45 0101 	adc.w	r1, r5, r1
   221d6:	f7dd ff93 	bl	100 <__aeabi_uldivmod>
   221da:	4602      	mov	r2, r0
   221dc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   221de:	4630      	mov	r0, r6
   221e0:	f7ff fe48 	bl	21e74 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   221e4:	3430      	adds	r4, #48	; 0x30
   221e6:	4b11      	ldr	r3, [pc, #68]	; (2222c <z_init_static_threads+0xe0>)
   221e8:	429c      	cmp	r4, r3
   221ea:	d807      	bhi.n	221fc <z_init_static_threads+0xb0>
   221ec:	4b0f      	ldr	r3, [pc, #60]	; (2222c <z_init_static_threads+0xe0>)
   221ee:	429c      	cmp	r4, r3
   221f0:	d211      	bcs.n	22216 <z_init_static_threads+0xca>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   221f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   221f4:	f1b3 3fff 	cmp.w	r3, #4294967295
   221f8:	d0f4      	beq.n	221e4 <z_init_static_threads+0x98>
   221fa:	e7d8      	b.n	221ae <z_init_static_threads+0x62>
	_FOREACH_STATIC_THREAD(thread_data) {
   221fc:	4d09      	ldr	r5, [pc, #36]	; (22224 <z_init_static_threads+0xd8>)
   221fe:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   22202:	4629      	mov	r1, r5
   22204:	4808      	ldr	r0, [pc, #32]	; (22228 <z_init_static_threads+0xdc>)
   22206:	f006 f89c 	bl	28342 <printk>
   2220a:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   2220e:	4628      	mov	r0, r5
   22210:	f006 fc30 	bl	28a74 <assert_post_action>
   22214:	e7ea      	b.n	221ec <z_init_static_threads+0xa0>
	k_sched_unlock();
   22216:	f001 ff0f 	bl	24038 <k_sched_unlock>
}
   2221a:	b006      	add	sp, #24
   2221c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   22220:	20000764 	.word	0x20000764
   22224:	0003322c 	.word	0x0003322c
   22228:	0002f968 	.word	0x0002f968
   2222c:	20000764 	.word	0x20000764

00022230 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   22230:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   22232:	f002 fc2d 	bl	24a90 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   22236:	4b04      	ldr	r3, [pc, #16]	; (22248 <pm_save_idle+0x18>)
   22238:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   2223a:	f7f0 f8e5 	bl	12408 <pm_system_suspend>
   2223e:	b100      	cbz	r0, 22242 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   22240:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   22242:	f7f0 ffaf 	bl	131a4 <arch_cpu_idle>
   22246:	e7fb      	b.n	22240 <pm_save_idle+0x10>
   22248:	2000360c 	.word	0x2000360c

0002224c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2224c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2224e:	4b0e      	ldr	r3, [pc, #56]	; (22288 <idle+0x3c>)
   22250:	689b      	ldr	r3, [r3, #8]
   22252:	f993 300e 	ldrsb.w	r3, [r3, #14]
   22256:	2b00      	cmp	r3, #0
   22258:	db0a      	blt.n	22270 <idle+0x24>
	__asm__ volatile(
   2225a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2225e:	f3ef 8311 	mrs	r3, BASEPRI
   22262:	f382 8812 	msr	BASEPRI_MAX, r2
   22266:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   2226a:	f7ff ffe1 	bl	22230 <pm_save_idle>
   2226e:	e7f4      	b.n	2225a <idle+0xe>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   22270:	4c06      	ldr	r4, [pc, #24]	; (2228c <idle+0x40>)
   22272:	2246      	movs	r2, #70	; 0x46
   22274:	4621      	mov	r1, r4
   22276:	4806      	ldr	r0, [pc, #24]	; (22290 <idle+0x44>)
   22278:	f006 f863 	bl	28342 <printk>
   2227c:	2146      	movs	r1, #70	; 0x46
   2227e:	4620      	mov	r0, r4
   22280:	f006 fbf8 	bl	28a74 <assert_post_action>
   22284:	e7e9      	b.n	2225a <idle+0xe>
   22286:	bf00      	nop
   22288:	2000360c 	.word	0x2000360c
   2228c:	00033250 	.word	0x00033250
   22290:	0002f968 	.word	0x0002f968

00022294 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22298:	b083      	sub	sp, #12
   2229a:	4604      	mov	r4, r0
   2229c:	4616      	mov	r6, r2
   2229e:	461d      	mov	r5, r3
   222a0:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   222a4:	2900      	cmp	r1, #0
   222a6:	d12a      	bne.n	222fe <z_impl_k_mutex_lock+0x6a>
   222a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   222ac:	f3ef 8711 	mrs	r7, BASEPRI
   222b0:	f383 8812 	msr	BASEPRI_MAX, r3
   222b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222b8:	486c      	ldr	r0, [pc, #432]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   222ba:	f7ff fded 	bl	21e98 <z_spin_lock_valid>
   222be:	b348      	cbz	r0, 22314 <z_impl_k_mutex_lock+0x80>
	z_spin_lock_set_owner(l);
   222c0:	486a      	ldr	r0, [pc, #424]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   222c2:	f7ff fe09 	bl	21ed8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   222c6:	68e1      	ldr	r1, [r4, #12]
   222c8:	2900      	cmp	r1, #0
   222ca:	d12f      	bne.n	2232c <z_impl_k_mutex_lock+0x98>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   222cc:	2900      	cmp	r1, #0
   222ce:	d174      	bne.n	223ba <z_impl_k_mutex_lock+0x126>
   222d0:	4b67      	ldr	r3, [pc, #412]	; (22470 <z_impl_k_mutex_lock+0x1dc>)
   222d2:	689b      	ldr	r3, [r3, #8]
   222d4:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   222d8:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   222da:	3101      	adds	r1, #1
   222dc:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   222de:	4b64      	ldr	r3, [pc, #400]	; (22470 <z_impl_k_mutex_lock+0x1dc>)
   222e0:	689b      	ldr	r3, [r3, #8]
   222e2:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222e4:	4861      	ldr	r0, [pc, #388]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   222e6:	f7ff fde7 	bl	21eb8 <z_spin_unlock_valid>
   222ea:	2800      	cmp	r0, #0
   222ec:	d067      	beq.n	223be <z_impl_k_mutex_lock+0x12a>
	__asm__ volatile(
   222ee:	f387 8811 	msr	BASEPRI, r7
   222f2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   222f6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   222f8:	b003      	add	sp, #12
   222fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   222fe:	4f5d      	ldr	r7, [pc, #372]	; (22474 <z_impl_k_mutex_lock+0x1e0>)
   22300:	2265      	movs	r2, #101	; 0x65
   22302:	4639      	mov	r1, r7
   22304:	485c      	ldr	r0, [pc, #368]	; (22478 <z_impl_k_mutex_lock+0x1e4>)
   22306:	f006 f81c 	bl	28342 <printk>
   2230a:	2165      	movs	r1, #101	; 0x65
   2230c:	4638      	mov	r0, r7
   2230e:	f006 fbb1 	bl	28a74 <assert_post_action>
   22312:	e7c9      	b.n	222a8 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22314:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2247c <z_impl_k_mutex_lock+0x1e8>
   22318:	2281      	movs	r2, #129	; 0x81
   2231a:	4641      	mov	r1, r8
   2231c:	4856      	ldr	r0, [pc, #344]	; (22478 <z_impl_k_mutex_lock+0x1e4>)
   2231e:	f006 f810 	bl	28342 <printk>
   22322:	2181      	movs	r1, #129	; 0x81
   22324:	4640      	mov	r0, r8
   22326:	f006 fba5 	bl	28a74 <assert_post_action>
   2232a:	e7c9      	b.n	222c0 <z_impl_k_mutex_lock+0x2c>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2232c:	68a2      	ldr	r2, [r4, #8]
   2232e:	4b50      	ldr	r3, [pc, #320]	; (22470 <z_impl_k_mutex_lock+0x1dc>)
   22330:	689b      	ldr	r3, [r3, #8]
   22332:	429a      	cmp	r2, r3
   22334:	d0ca      	beq.n	222cc <z_impl_k_mutex_lock+0x38>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   22336:	ea55 0106 	orrs.w	r1, r5, r6
   2233a:	bf0c      	ite	eq
   2233c:	f04f 0801 	moveq.w	r8, #1
   22340:	f04f 0800 	movne.w	r8, #0
   22344:	d046      	beq.n	223d4 <z_impl_k_mutex_lock+0x140>
					    mutex->owner->base.prio);
   22346:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2234a:	4649      	mov	r1, r9
   2234c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   22350:	f00c fc67 	bl	2ec22 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   22354:	4581      	cmp	r9, r0
   22356:	dc53      	bgt.n	22400 <z_impl_k_mutex_lock+0x16c>
	bool resched = false;
   22358:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2235c:	9600      	str	r6, [sp, #0]
   2235e:	9501      	str	r5, [sp, #4]
   22360:	4622      	mov	r2, r4
   22362:	4639      	mov	r1, r7
   22364:	4841      	ldr	r0, [pc, #260]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   22366:	f001 fd39 	bl	23ddc <z_pend_curr>
	if (got_mutex == 0) {
   2236a:	2800      	cmp	r0, #0
   2236c:	d0c4      	beq.n	222f8 <z_impl_k_mutex_lock+0x64>
	__asm__ volatile(
   2236e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22372:	f3ef 8511 	mrs	r5, BASEPRI
   22376:	f383 8812 	msr	BASEPRI_MAX, r3
   2237a:	f3bf 8f6f 	isb	sy
   2237e:	483b      	ldr	r0, [pc, #236]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   22380:	f7ff fd8a 	bl	21e98 <z_spin_lock_valid>
   22384:	2800      	cmp	r0, #0
   22386:	d041      	beq.n	2240c <z_impl_k_mutex_lock+0x178>
	z_spin_lock_set_owner(l);
   22388:	4838      	ldr	r0, [pc, #224]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   2238a:	f7ff fda5 	bl	21ed8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2238e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22390:	429c      	cmp	r4, r3
   22392:	d046      	beq.n	22422 <z_impl_k_mutex_lock+0x18e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22394:	2b00      	cmp	r3, #0
   22396:	d044      	beq.n	22422 <z_impl_k_mutex_lock+0x18e>
   22398:	6921      	ldr	r1, [r4, #16]
   2239a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2239e:	f00c fc40 	bl	2ec22 <new_prio_for_inheritance>
   223a2:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   223a4:	4620      	mov	r0, r4
   223a6:	f00c fc47 	bl	2ec38 <adjust_owner_prio>
   223aa:	2800      	cmp	r0, #0
   223ac:	d13b      	bne.n	22426 <z_impl_k_mutex_lock+0x192>
   223ae:	f1b9 0f00 	cmp.w	r9, #0
   223b2:	d03a      	beq.n	2242a <z_impl_k_mutex_lock+0x196>
   223b4:	f04f 0801 	mov.w	r8, #1
   223b8:	e037      	b.n	2242a <z_impl_k_mutex_lock+0x196>
					_current->base.prio :
   223ba:	6923      	ldr	r3, [r4, #16]
   223bc:	e78c      	b.n	222d8 <z_impl_k_mutex_lock+0x44>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223be:	4c2f      	ldr	r4, [pc, #188]	; (2247c <z_impl_k_mutex_lock+0x1e8>)
   223c0:	22ac      	movs	r2, #172	; 0xac
   223c2:	4621      	mov	r1, r4
   223c4:	482c      	ldr	r0, [pc, #176]	; (22478 <z_impl_k_mutex_lock+0x1e4>)
   223c6:	f005 ffbc 	bl	28342 <printk>
   223ca:	21ac      	movs	r1, #172	; 0xac
   223cc:	4620      	mov	r0, r4
   223ce:	f006 fb51 	bl	28a74 <assert_post_action>
   223d2:	e78c      	b.n	222ee <z_impl_k_mutex_lock+0x5a>
   223d4:	4825      	ldr	r0, [pc, #148]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   223d6:	f7ff fd6f 	bl	21eb8 <z_spin_unlock_valid>
   223da:	b130      	cbz	r0, 223ea <z_impl_k_mutex_lock+0x156>
	__asm__ volatile(
   223dc:	f387 8811 	msr	BASEPRI, r7
   223e0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   223e4:	f06f 000f 	mvn.w	r0, #15
   223e8:	e786      	b.n	222f8 <z_impl_k_mutex_lock+0x64>
   223ea:	4c24      	ldr	r4, [pc, #144]	; (2247c <z_impl_k_mutex_lock+0x1e8>)
   223ec:	22ac      	movs	r2, #172	; 0xac
   223ee:	4621      	mov	r1, r4
   223f0:	4821      	ldr	r0, [pc, #132]	; (22478 <z_impl_k_mutex_lock+0x1e4>)
   223f2:	f005 ffa6 	bl	28342 <printk>
   223f6:	21ac      	movs	r1, #172	; 0xac
   223f8:	4620      	mov	r0, r4
   223fa:	f006 fb3b 	bl	28a74 <assert_post_action>
   223fe:	e7ed      	b.n	223dc <z_impl_k_mutex_lock+0x148>
		resched = adjust_owner_prio(mutex, new_prio);
   22400:	4601      	mov	r1, r0
   22402:	4620      	mov	r0, r4
   22404:	f00c fc18 	bl	2ec38 <adjust_owner_prio>
   22408:	4681      	mov	r9, r0
   2240a:	e7a7      	b.n	2235c <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2240c:	4e1b      	ldr	r6, [pc, #108]	; (2247c <z_impl_k_mutex_lock+0x1e8>)
   2240e:	2281      	movs	r2, #129	; 0x81
   22410:	4631      	mov	r1, r6
   22412:	4819      	ldr	r0, [pc, #100]	; (22478 <z_impl_k_mutex_lock+0x1e4>)
   22414:	f005 ff95 	bl	28342 <printk>
   22418:	2181      	movs	r1, #129	; 0x81
   2241a:	4630      	mov	r0, r6
   2241c:	f006 fb2a 	bl	28a74 <assert_post_action>
   22420:	e7b2      	b.n	22388 <z_impl_k_mutex_lock+0xf4>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22422:	6921      	ldr	r1, [r4, #16]
   22424:	e7be      	b.n	223a4 <z_impl_k_mutex_lock+0x110>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   22426:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   2242a:	f1b8 0f00 	cmp.w	r8, #0
   2242e:	d006      	beq.n	2243e <z_impl_k_mutex_lock+0x1aa>
		z_reschedule(&lock, key);
   22430:	4629      	mov	r1, r5
   22432:	480e      	ldr	r0, [pc, #56]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   22434:	f001 f8d4 	bl	235e0 <z_reschedule>
	return -EAGAIN;
   22438:	f06f 000a 	mvn.w	r0, #10
   2243c:	e75c      	b.n	222f8 <z_impl_k_mutex_lock+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2243e:	480b      	ldr	r0, [pc, #44]	; (2246c <z_impl_k_mutex_lock+0x1d8>)
   22440:	f7ff fd3a 	bl	21eb8 <z_spin_unlock_valid>
   22444:	b130      	cbz	r0, 22454 <z_impl_k_mutex_lock+0x1c0>
   22446:	f385 8811 	msr	BASEPRI, r5
   2244a:	f3bf 8f6f 	isb	sy
   2244e:	f06f 000a 	mvn.w	r0, #10
   22452:	e751      	b.n	222f8 <z_impl_k_mutex_lock+0x64>
   22454:	4c09      	ldr	r4, [pc, #36]	; (2247c <z_impl_k_mutex_lock+0x1e8>)
   22456:	22ac      	movs	r2, #172	; 0xac
   22458:	4621      	mov	r1, r4
   2245a:	4807      	ldr	r0, [pc, #28]	; (22478 <z_impl_k_mutex_lock+0x1e4>)
   2245c:	f005 ff71 	bl	28342 <printk>
   22460:	21ac      	movs	r1, #172	; 0xac
   22462:	4620      	mov	r0, r4
   22464:	f006 fb06 	bl	28a74 <assert_post_action>
   22468:	e7ed      	b.n	22446 <z_impl_k_mutex_lock+0x1b2>
   2246a:	bf00      	nop
   2246c:	2000363c 	.word	0x2000363c
   22470:	2000360c 	.word	0x2000360c
   22474:	00033274 	.word	0x00033274
   22478:	0002f968 	.word	0x0002f968
   2247c:	0002f9a4 	.word	0x0002f9a4

00022480 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   22480:	b570      	push	{r4, r5, r6, lr}
   22482:	4604      	mov	r4, r0
   22484:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22488:	bb03      	cbnz	r3, 224cc <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2248a:	68a3      	ldr	r3, [r4, #8]
   2248c:	2b00      	cmp	r3, #0
   2248e:	f000 808f 	beq.w	225b0 <z_impl_k_mutex_unlock+0x130>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   22492:	4a4a      	ldr	r2, [pc, #296]	; (225bc <z_impl_k_mutex_unlock+0x13c>)
   22494:	6892      	ldr	r2, [r2, #8]
   22496:	4293      	cmp	r3, r2
   22498:	f040 808d 	bne.w	225b6 <z_impl_k_mutex_unlock+0x136>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2249c:	68e3      	ldr	r3, [r4, #12]
   2249e:	b303      	cbz	r3, 224e2 <z_impl_k_mutex_unlock+0x62>
   224a0:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   224a4:	bb43      	cbnz	r3, 224f8 <z_impl_k_mutex_unlock+0x78>
	__ASSERT(_current->base.sched_locked != 1U, "");
   224a6:	4b45      	ldr	r3, [pc, #276]	; (225bc <z_impl_k_mutex_unlock+0x13c>)
   224a8:	689b      	ldr	r3, [r3, #8]
   224aa:	7bdb      	ldrb	r3, [r3, #15]
   224ac:	2b01      	cmp	r3, #1
   224ae:	d02e      	beq.n	2250e <z_impl_k_mutex_unlock+0x8e>

	--_current->base.sched_locked;
   224b0:	4b42      	ldr	r3, [pc, #264]	; (225bc <z_impl_k_mutex_unlock+0x13c>)
   224b2:	689a      	ldr	r2, [r3, #8]
   224b4:	7bd3      	ldrb	r3, [r2, #15]
   224b6:	3b01      	subs	r3, #1
   224b8:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   224ba:	68e3      	ldr	r3, [r4, #12]
   224bc:	2b01      	cmp	r3, #1
   224be:	d931      	bls.n	22524 <z_impl_k_mutex_unlock+0xa4>
		mutex->lock_count--;
   224c0:	3b01      	subs	r3, #1
   224c2:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   224c4:	f001 fdb8 	bl	24038 <k_sched_unlock>

	return 0;
   224c8:	2000      	movs	r0, #0
}
   224ca:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   224cc:	4d3c      	ldr	r5, [pc, #240]	; (225c0 <z_impl_k_mutex_unlock+0x140>)
   224ce:	22c7      	movs	r2, #199	; 0xc7
   224d0:	4629      	mov	r1, r5
   224d2:	483c      	ldr	r0, [pc, #240]	; (225c4 <z_impl_k_mutex_unlock+0x144>)
   224d4:	f005 ff35 	bl	28342 <printk>
   224d8:	21c7      	movs	r1, #199	; 0xc7
   224da:	4628      	mov	r0, r5
   224dc:	f006 faca 	bl	28a74 <assert_post_action>
   224e0:	e7d3      	b.n	2248a <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   224e2:	4d37      	ldr	r5, [pc, #220]	; (225c0 <z_impl_k_mutex_unlock+0x140>)
   224e4:	22df      	movs	r2, #223	; 0xdf
   224e6:	4629      	mov	r1, r5
   224e8:	4836      	ldr	r0, [pc, #216]	; (225c4 <z_impl_k_mutex_unlock+0x144>)
   224ea:	f005 ff2a 	bl	28342 <printk>
   224ee:	21df      	movs	r1, #223	; 0xdf
   224f0:	4628      	mov	r0, r5
   224f2:	f006 fabf 	bl	28a74 <assert_post_action>
   224f6:	e7d3      	b.n	224a0 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
   224f8:	4d33      	ldr	r5, [pc, #204]	; (225c8 <z_impl_k_mutex_unlock+0x148>)
   224fa:	22fd      	movs	r2, #253	; 0xfd
   224fc:	4629      	mov	r1, r5
   224fe:	4831      	ldr	r0, [pc, #196]	; (225c4 <z_impl_k_mutex_unlock+0x144>)
   22500:	f005 ff1f 	bl	28342 <printk>
   22504:	21fd      	movs	r1, #253	; 0xfd
   22506:	4628      	mov	r0, r5
   22508:	f006 fab4 	bl	28a74 <assert_post_action>
   2250c:	e7cb      	b.n	224a6 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2250e:	4d2e      	ldr	r5, [pc, #184]	; (225c8 <z_impl_k_mutex_unlock+0x148>)
   22510:	22fe      	movs	r2, #254	; 0xfe
   22512:	4629      	mov	r1, r5
   22514:	482b      	ldr	r0, [pc, #172]	; (225c4 <z_impl_k_mutex_unlock+0x144>)
   22516:	f005 ff14 	bl	28342 <printk>
   2251a:	21fe      	movs	r1, #254	; 0xfe
   2251c:	4628      	mov	r0, r5
   2251e:	f006 faa9 	bl	28a74 <assert_post_action>
   22522:	e7c5      	b.n	224b0 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
   22524:	f04f 0340 	mov.w	r3, #64	; 0x40
   22528:	f3ef 8511 	mrs	r5, BASEPRI
   2252c:	f383 8812 	msr	BASEPRI_MAX, r3
   22530:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22534:	4825      	ldr	r0, [pc, #148]	; (225cc <z_impl_k_mutex_unlock+0x14c>)
   22536:	f7ff fcaf 	bl	21e98 <z_spin_lock_valid>
   2253a:	b1c0      	cbz	r0, 2256e <z_impl_k_mutex_unlock+0xee>
	z_spin_lock_set_owner(l);
   2253c:	4823      	ldr	r0, [pc, #140]	; (225cc <z_impl_k_mutex_unlock+0x14c>)
   2253e:	f7ff fccb 	bl	21ed8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   22542:	6921      	ldr	r1, [r4, #16]
   22544:	4620      	mov	r0, r4
   22546:	f00c fb77 	bl	2ec38 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2254a:	4620      	mov	r0, r4
   2254c:	f001 fe36 	bl	241bc <z_unpend_first_thread>
	mutex->owner = new_owner;
   22550:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   22552:	b1b8      	cbz	r0, 22584 <z_impl_k_mutex_unlock+0x104>
		mutex->owner_orig_prio = new_owner->base.prio;
   22554:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22558:	6123      	str	r3, [r4, #16]
   2255a:	2300      	movs	r3, #0
   2255c:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   22560:	f001 fab0 	bl	23ac4 <z_ready_thread>
		z_reschedule(&lock, key);
   22564:	4629      	mov	r1, r5
   22566:	4819      	ldr	r0, [pc, #100]	; (225cc <z_impl_k_mutex_unlock+0x14c>)
   22568:	f001 f83a 	bl	235e0 <z_reschedule>
   2256c:	e7aa      	b.n	224c4 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2256e:	4e18      	ldr	r6, [pc, #96]	; (225d0 <z_impl_k_mutex_unlock+0x150>)
   22570:	2281      	movs	r2, #129	; 0x81
   22572:	4631      	mov	r1, r6
   22574:	4813      	ldr	r0, [pc, #76]	; (225c4 <z_impl_k_mutex_unlock+0x144>)
   22576:	f005 fee4 	bl	28342 <printk>
   2257a:	2181      	movs	r1, #129	; 0x81
   2257c:	4630      	mov	r0, r6
   2257e:	f006 fa79 	bl	28a74 <assert_post_action>
   22582:	e7db      	b.n	2253c <z_impl_k_mutex_unlock+0xbc>
		mutex->lock_count = 0U;
   22584:	2300      	movs	r3, #0
   22586:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22588:	4810      	ldr	r0, [pc, #64]	; (225cc <z_impl_k_mutex_unlock+0x14c>)
   2258a:	f7ff fc95 	bl	21eb8 <z_spin_unlock_valid>
   2258e:	b120      	cbz	r0, 2259a <z_impl_k_mutex_unlock+0x11a>
	__asm__ volatile(
   22590:	f385 8811 	msr	BASEPRI, r5
   22594:	f3bf 8f6f 	isb	sy
   22598:	e794      	b.n	224c4 <z_impl_k_mutex_unlock+0x44>
   2259a:	4c0d      	ldr	r4, [pc, #52]	; (225d0 <z_impl_k_mutex_unlock+0x150>)
   2259c:	22ac      	movs	r2, #172	; 0xac
   2259e:	4621      	mov	r1, r4
   225a0:	4808      	ldr	r0, [pc, #32]	; (225c4 <z_impl_k_mutex_unlock+0x144>)
   225a2:	f005 fece 	bl	28342 <printk>
   225a6:	21ac      	movs	r1, #172	; 0xac
   225a8:	4620      	mov	r0, r4
   225aa:	f006 fa63 	bl	28a74 <assert_post_action>
   225ae:	e7ef      	b.n	22590 <z_impl_k_mutex_unlock+0x110>
		return -EINVAL;
   225b0:	f06f 0015 	mvn.w	r0, #21
   225b4:	e789      	b.n	224ca <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
   225b6:	f04f 30ff 	mov.w	r0, #4294967295
   225ba:	e786      	b.n	224ca <z_impl_k_mutex_unlock+0x4a>
   225bc:	2000360c 	.word	0x2000360c
   225c0:	00033274 	.word	0x00033274
   225c4:	0002f968 	.word	0x0002f968
   225c8:	00033298 	.word	0x00033298
   225cc:	2000363c 	.word	0x2000363c
   225d0:	0002f9a4 	.word	0x0002f9a4

000225d4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   225d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225d8:	4604      	mov	r4, r0
   225da:	460e      	mov	r6, r1
   225dc:	4615      	mov	r5, r2
   225de:	4698      	mov	r8, r3
   225e0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   225e4:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   225e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   225ec:	f3ef 8a11 	mrs	sl, BASEPRI
   225f0:	f383 8812 	msr	BASEPRI_MAX, r3
   225f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225f8:	4638      	mov	r0, r7
   225fa:	f7ff fc4d 	bl	21e98 <z_spin_lock_valid>
   225fe:	b1c0      	cbz	r0, 22632 <queue_insert+0x5e>
	z_spin_lock_set_owner(l);
   22600:	4638      	mov	r0, r7
   22602:	f7ff fc69 	bl	21ed8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   22606:	f1b9 0f00 	cmp.w	r9, #0
   2260a:	d000      	beq.n	2260e <queue_insert+0x3a>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2260c:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2260e:	f104 000c 	add.w	r0, r4, #12
   22612:	f001 fdd3 	bl	241bc <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   22616:	b9c0      	cbnz	r0, 2264a <queue_insert+0x76>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   22618:	f1b8 0f00 	cmp.w	r8, #0
   2261c:	d034      	beq.n	22688 <queue_insert+0xb4>
	return z_thread_aligned_alloc(0, size);
   2261e:	2108      	movs	r1, #8
   22620:	2000      	movs	r0, #0
   22622:	f003 f98b 	bl	2593c <z_thread_aligned_alloc>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
		if (anode == NULL) {
   22626:	b1c8      	cbz	r0, 2265c <queue_insert+0x88>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc,
				-ENOMEM);

			return -ENOMEM;
		}
		anode->data = data;
   22628:	6045      	str	r5, [r0, #4]
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2262a:	2201      	movs	r2, #1
   2262c:	6002      	str	r2, [r0, #0]
		sys_sfnode_init(&anode->node, 0x1);
		data = anode;
   2262e:	4605      	mov	r5, r0
}
   22630:	e02c      	b.n	2268c <queue_insert+0xb8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22632:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 226fc <queue_insert+0x128>
   22636:	2281      	movs	r2, #129	; 0x81
   22638:	4659      	mov	r1, fp
   2263a:	482f      	ldr	r0, [pc, #188]	; (226f8 <queue_insert+0x124>)
   2263c:	f005 fe81 	bl	28342 <printk>
   22640:	2181      	movs	r1, #129	; 0x81
   22642:	4658      	mov	r0, fp
   22644:	f006 fa16 	bl	28a74 <assert_post_action>
   22648:	e7da      	b.n	22600 <queue_insert+0x2c>
		prepare_thread_to_run(first_pending_thread, data);
   2264a:	4629      	mov	r1, r5
   2264c:	f00c fb06 	bl	2ec5c <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   22650:	4651      	mov	r1, sl
   22652:	4638      	mov	r0, r7
   22654:	f000 ffc4 	bl	235e0 <z_reschedule>
		return 0;
   22658:	2000      	movs	r0, #0
   2265a:	e04b      	b.n	226f4 <queue_insert+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2265c:	4638      	mov	r0, r7
   2265e:	f7ff fc2b 	bl	21eb8 <z_spin_unlock_valid>
   22662:	b130      	cbz	r0, 22672 <queue_insert+0x9e>
	__asm__ volatile(
   22664:	f38a 8811 	msr	BASEPRI, sl
   22668:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2266c:	f06f 000b 	mvn.w	r0, #11
   22670:	e040      	b.n	226f4 <queue_insert+0x120>
   22672:	4c22      	ldr	r4, [pc, #136]	; (226fc <queue_insert+0x128>)
   22674:	22ac      	movs	r2, #172	; 0xac
   22676:	4621      	mov	r1, r4
   22678:	481f      	ldr	r0, [pc, #124]	; (226f8 <queue_insert+0x124>)
   2267a:	f005 fe62 	bl	28342 <printk>
   2267e:	21ac      	movs	r1, #172	; 0xac
   22680:	4620      	mov	r0, r4
   22682:	f006 f9f7 	bl	28a74 <assert_post_action>
   22686:	e7ed      	b.n	22664 <queue_insert+0x90>
	node->next_and_flags = flags;
   22688:	2300      	movs	r3, #0
   2268a:	602b      	str	r3, [r5, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2268c:	b186      	cbz	r6, 226b0 <queue_insert+0xdc>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2268e:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22690:	f033 0303 	bics.w	r3, r3, #3
   22694:	d11a      	bne.n	226cc <queue_insert+0xf8>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22696:	682b      	ldr	r3, [r5, #0]
   22698:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2269c:	602b      	str	r3, [r5, #0]
	return list->tail;
   2269e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   226a0:	b18a      	cbz	r2, 226c6 <queue_insert+0xf2>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   226a2:	6813      	ldr	r3, [r2, #0]
   226a4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   226a8:	432b      	orrs	r3, r5
   226aa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   226ac:	6065      	str	r5, [r4, #4]
}
   226ae:	e017      	b.n	226e0 <queue_insert+0x10c>
	return list->head;
   226b0:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   226b2:	682b      	ldr	r3, [r5, #0]
   226b4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   226b8:	4313      	orrs	r3, r2
   226ba:	602b      	str	r3, [r5, #0]
	list->head = node;
   226bc:	6025      	str	r5, [r4, #0]
	return list->tail;
   226be:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   226c0:	b973      	cbnz	r3, 226e0 <queue_insert+0x10c>
	list->tail = node;
   226c2:	6065      	str	r5, [r4, #4]
}
   226c4:	e00c      	b.n	226e0 <queue_insert+0x10c>
	list->tail = node;
   226c6:	6065      	str	r5, [r4, #4]
	list->head = node;
   226c8:	6025      	str	r5, [r4, #0]
}
   226ca:	e009      	b.n	226e0 <queue_insert+0x10c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   226cc:	682a      	ldr	r2, [r5, #0]
   226ce:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   226d2:	4313      	orrs	r3, r2
   226d4:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   226d6:	6833      	ldr	r3, [r6, #0]
   226d8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   226dc:	431d      	orrs	r5, r3
   226de:	6035      	str	r5, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   226e0:	2104      	movs	r1, #4
   226e2:	f104 0014 	add.w	r0, r4, #20
   226e6:	f00c fc1f 	bl	2ef28 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   226ea:	4651      	mov	r1, sl
   226ec:	4638      	mov	r0, r7
   226ee:	f000 ff77 	bl	235e0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   226f2:	2000      	movs	r0, #0
}
   226f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226f8:	0002f968 	.word	0x0002f968
   226fc:	0002f9a4 	.word	0x0002f9a4

00022700 <k_queue_append_list>:
int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   22700:	2900      	cmp	r1, #0
   22702:	d049      	beq.n	22798 <k_queue_append_list+0x98>
{
   22704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22708:	4606      	mov	r6, r0
   2270a:	4617      	mov	r7, r2
   2270c:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   2270e:	2a00      	cmp	r2, #0
   22710:	d045      	beq.n	2279e <k_queue_append_list+0x9e>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22712:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   22716:	f04f 0340 	mov.w	r3, #64	; 0x40
   2271a:	f3ef 8911 	mrs	r9, BASEPRI
   2271e:	f383 8812 	msr	BASEPRI_MAX, r3
   22722:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22726:	4640      	mov	r0, r8
   22728:	f7ff fbb6 	bl	21e98 <z_spin_lock_valid>
   2272c:	b140      	cbz	r0, 22740 <k_queue_append_list+0x40>
	z_spin_lock_set_owner(l);
   2272e:	4640      	mov	r0, r8
   22730:	f7ff fbd2 	bl	21ed8 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   22734:	f106 050c 	add.w	r5, r6, #12
   22738:	4628      	mov	r0, r5
   2273a:	f001 fd3f 	bl	241bc <z_unpend_first_thread>
   2273e:	e011      	b.n	22764 <k_queue_append_list+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22740:	4d18      	ldr	r5, [pc, #96]	; (227a4 <k_queue_append_list+0xa4>)
   22742:	2281      	movs	r2, #129	; 0x81
   22744:	4629      	mov	r1, r5
   22746:	4818      	ldr	r0, [pc, #96]	; (227a8 <k_queue_append_list+0xa8>)
   22748:	f005 fdfb 	bl	28342 <printk>
   2274c:	2181      	movs	r1, #129	; 0x81
   2274e:	4628      	mov	r0, r5
   22750:	f006 f990 	bl	28a74 <assert_post_action>
   22754:	e7eb      	b.n	2272e <k_queue_append_list+0x2e>
	}

	while ((head != NULL) && (thread != NULL)) {
		prepare_thread_to_run(thread, head);
   22756:	4621      	mov	r1, r4
   22758:	f00c fa80 	bl	2ec5c <prepare_thread_to_run>
		head = *(void **)head;
   2275c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2275e:	4628      	mov	r0, r5
   22760:	f001 fd2c 	bl	241bc <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22764:	b10c      	cbz	r4, 2276a <k_queue_append_list+0x6a>
   22766:	2800      	cmp	r0, #0
   22768:	d1f5      	bne.n	22756 <k_queue_append_list+0x56>
	}

	if (head != NULL) {
   2276a:	b13c      	cbz	r4, 2277c <k_queue_append_list+0x7c>
	return list->tail;
   2276c:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2276e:	b18a      	cbz	r2, 22794 <k_queue_append_list+0x94>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22770:	6813      	ldr	r3, [r2, #0]
   22772:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   22776:	431c      	orrs	r4, r3
   22778:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2277a:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2277c:	2104      	movs	r1, #4
   2277e:	f106 0014 	add.w	r0, r6, #20
   22782:	f00c fbd1 	bl	2ef28 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   22786:	4649      	mov	r1, r9
   22788:	4640      	mov	r0, r8
   2278a:	f000 ff29 	bl	235e0 <z_reschedule>
	return 0;
   2278e:	2000      	movs	r0, #0
}
   22790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	list->head = node;
   22794:	6034      	str	r4, [r6, #0]
}
   22796:	e7f0      	b.n	2277a <k_queue_append_list+0x7a>
		return -EINVAL;
   22798:	f06f 0015 	mvn.w	r0, #21
}
   2279c:	4770      	bx	lr
		return -EINVAL;
   2279e:	f06f 0015 	mvn.w	r0, #21
   227a2:	e7f5      	b.n	22790 <k_queue_append_list+0x90>
   227a4:	0002f9a4 	.word	0x0002f9a4
   227a8:	0002f968 	.word	0x0002f968

000227ac <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   227ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   227b0:	b083      	sub	sp, #12
   227b2:	4604      	mov	r4, r0
   227b4:	4616      	mov	r6, r2
   227b6:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   227b8:	f100 0508 	add.w	r5, r0, #8
   227bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   227c0:	f3ef 8811 	mrs	r8, BASEPRI
   227c4:	f383 8812 	msr	BASEPRI_MAX, r3
   227c8:	f3bf 8f6f 	isb	sy
   227cc:	4628      	mov	r0, r5
   227ce:	f7ff fb63 	bl	21e98 <z_spin_lock_valid>
   227d2:	b1d8      	cbz	r0, 2280c <z_impl_k_queue_get+0x60>
	z_spin_lock_set_owner(l);
   227d4:	4628      	mov	r0, r5
   227d6:	f7ff fb7f 	bl	21ed8 <z_spin_lock_set_owner>
	return list->head;
   227da:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   227dc:	b378      	cbz	r0, 2283e <z_impl_k_queue_get+0x92>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   227de:	6803      	ldr	r3, [r0, #0]
   227e0:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   227e4:	6023      	str	r3, [r4, #0]
	return list->tail;
   227e6:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   227e8:	4290      	cmp	r0, r2
   227ea:	d01b      	beq.n	22824 <z_impl_k_queue_get+0x78>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   227ec:	2101      	movs	r1, #1
   227ee:	f00c fa3d 	bl	2ec6c <z_queue_node_peek>
   227f2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227f4:	4628      	mov	r0, r5
   227f6:	f7ff fb5f 	bl	21eb8 <z_spin_unlock_valid>
   227fa:	b1a8      	cbz	r0, 22828 <z_impl_k_queue_get+0x7c>
	__asm__ volatile(
   227fc:	f388 8811 	msr	BASEPRI, r8
   22800:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   22804:	4620      	mov	r0, r4
   22806:	b003      	add	sp, #12
   22808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2280c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 22890 <z_impl_k_queue_get+0xe4>
   22810:	2281      	movs	r2, #129	; 0x81
   22812:	4649      	mov	r1, r9
   22814:	481d      	ldr	r0, [pc, #116]	; (2288c <z_impl_k_queue_get+0xe0>)
   22816:	f005 fd94 	bl	28342 <printk>
   2281a:	2181      	movs	r1, #129	; 0x81
   2281c:	4648      	mov	r0, r9
   2281e:	f006 f929 	bl	28a74 <assert_post_action>
   22822:	e7d7      	b.n	227d4 <z_impl_k_queue_get+0x28>
	list->tail = node;
   22824:	6063      	str	r3, [r4, #4]
}
   22826:	e7e1      	b.n	227ec <z_impl_k_queue_get+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22828:	4d19      	ldr	r5, [pc, #100]	; (22890 <z_impl_k_queue_get+0xe4>)
   2282a:	22ac      	movs	r2, #172	; 0xac
   2282c:	4629      	mov	r1, r5
   2282e:	4817      	ldr	r0, [pc, #92]	; (2288c <z_impl_k_queue_get+0xe0>)
   22830:	f005 fd87 	bl	28342 <printk>
   22834:	21ac      	movs	r1, #172	; 0xac
   22836:	4628      	mov	r0, r5
   22838:	f006 f91c 	bl	28a74 <assert_post_action>
   2283c:	e7de      	b.n	227fc <z_impl_k_queue_get+0x50>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2283e:	ea56 0307 	orrs.w	r3, r6, r7
   22842:	d00c      	beq.n	2285e <z_impl_k_queue_get+0xb2>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   22844:	e9cd 6700 	strd	r6, r7, [sp]
   22848:	f104 020c 	add.w	r2, r4, #12
   2284c:	4641      	mov	r1, r8
   2284e:	4628      	mov	r0, r5
   22850:	f001 fac4 	bl	23ddc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22854:	b9c0      	cbnz	r0, 22888 <z_impl_k_queue_get+0xdc>
   22856:	4b0f      	ldr	r3, [pc, #60]	; (22894 <z_impl_k_queue_get+0xe8>)
   22858:	689b      	ldr	r3, [r3, #8]
   2285a:	695c      	ldr	r4, [r3, #20]
   2285c:	e7d2      	b.n	22804 <z_impl_k_queue_get+0x58>
   2285e:	4628      	mov	r0, r5
   22860:	f7ff fb2a 	bl	21eb8 <z_spin_unlock_valid>
   22864:	b128      	cbz	r0, 22872 <z_impl_k_queue_get+0xc6>
   22866:	f388 8811 	msr	BASEPRI, r8
   2286a:	f3bf 8f6f 	isb	sy
		return NULL;
   2286e:	2400      	movs	r4, #0
   22870:	e7c8      	b.n	22804 <z_impl_k_queue_get+0x58>
   22872:	4c07      	ldr	r4, [pc, #28]	; (22890 <z_impl_k_queue_get+0xe4>)
   22874:	22ac      	movs	r2, #172	; 0xac
   22876:	4621      	mov	r1, r4
   22878:	4804      	ldr	r0, [pc, #16]	; (2288c <z_impl_k_queue_get+0xe0>)
   2287a:	f005 fd62 	bl	28342 <printk>
   2287e:	21ac      	movs	r1, #172	; 0xac
   22880:	4620      	mov	r0, r4
   22882:	f006 f8f7 	bl	28a74 <assert_post_action>
   22886:	e7ee      	b.n	22866 <z_impl_k_queue_get+0xba>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22888:	2400      	movs	r4, #0
   2288a:	e7bb      	b.n	22804 <z_impl_k_queue_get+0x58>
   2288c:	0002f968 	.word	0x0002f968
   22890:	0002f9a4 	.word	0x0002f9a4
   22894:	2000360c 	.word	0x2000360c

00022898 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22898:	b570      	push	{r4, r5, r6, lr}
   2289a:	4604      	mov	r4, r0
	__asm__ volatile(
   2289c:	f04f 0340 	mov.w	r3, #64	; 0x40
   228a0:	f3ef 8511 	mrs	r5, BASEPRI
   228a4:	f383 8812 	msr	BASEPRI_MAX, r3
   228a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228ac:	4817      	ldr	r0, [pc, #92]	; (2290c <z_impl_k_sem_give+0x74>)
   228ae:	f7ff faf3 	bl	21e98 <z_spin_lock_valid>
   228b2:	b180      	cbz	r0, 228d6 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
   228b4:	4815      	ldr	r0, [pc, #84]	; (2290c <z_impl_k_sem_give+0x74>)
   228b6:	f7ff fb0f 	bl	21ed8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   228ba:	4620      	mov	r0, r4
   228bc:	f001 fc7e 	bl	241bc <z_unpend_first_thread>

	if (thread != NULL) {
   228c0:	b1a0      	cbz	r0, 228ec <z_impl_k_sem_give+0x54>
   228c2:	2200      	movs	r2, #0
   228c4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   228c8:	f001 f8fc 	bl	23ac4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   228cc:	4629      	mov	r1, r5
   228ce:	480f      	ldr	r0, [pc, #60]	; (2290c <z_impl_k_sem_give+0x74>)
   228d0:	f000 fe86 	bl	235e0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   228d4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228d6:	4e0e      	ldr	r6, [pc, #56]	; (22910 <z_impl_k_sem_give+0x78>)
   228d8:	2281      	movs	r2, #129	; 0x81
   228da:	4631      	mov	r1, r6
   228dc:	480d      	ldr	r0, [pc, #52]	; (22914 <z_impl_k_sem_give+0x7c>)
   228de:	f005 fd30 	bl	28342 <printk>
   228e2:	2181      	movs	r1, #129	; 0x81
   228e4:	4630      	mov	r0, r6
   228e6:	f006 f8c5 	bl	28a74 <assert_post_action>
   228ea:	e7e3      	b.n	228b4 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   228ec:	68a3      	ldr	r3, [r4, #8]
   228ee:	68e2      	ldr	r2, [r4, #12]
   228f0:	4293      	cmp	r3, r2
   228f2:	d008      	beq.n	22906 <z_impl_k_sem_give+0x6e>
   228f4:	2201      	movs	r2, #1
   228f6:	4413      	add	r3, r2
   228f8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   228fa:	2102      	movs	r1, #2
   228fc:	f104 0010 	add.w	r0, r4, #16
   22900:	f00c fb12 	bl	2ef28 <z_handle_obj_poll_events>
}
   22904:	e7e2      	b.n	228cc <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22906:	2200      	movs	r2, #0
   22908:	e7f5      	b.n	228f6 <z_impl_k_sem_give+0x5e>
   2290a:	bf00      	nop
   2290c:	20003640 	.word	0x20003640
   22910:	0002f9a4 	.word	0x0002f9a4
   22914:	0002f968 	.word	0x0002f968

00022918 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   22918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2291c:	b082      	sub	sp, #8
   2291e:	4604      	mov	r4, r0
   22920:	4616      	mov	r6, r2
   22922:	461f      	mov	r7, r3
   22924:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   22928:	b113      	cbz	r3, 22930 <z_impl_k_sem_take+0x18>
   2292a:	ea56 0307 	orrs.w	r3, r6, r7
   2292e:	d11e      	bne.n	2296e <z_impl_k_sem_take+0x56>
   22930:	f04f 0340 	mov.w	r3, #64	; 0x40
   22934:	f3ef 8511 	mrs	r5, BASEPRI
   22938:	f383 8812 	msr	BASEPRI_MAX, r3
   2293c:	f3bf 8f6f 	isb	sy
   22940:	482c      	ldr	r0, [pc, #176]	; (229f4 <z_impl_k_sem_take+0xdc>)
   22942:	f7ff faa9 	bl	21e98 <z_spin_lock_valid>
   22946:	b1e8      	cbz	r0, 22984 <z_impl_k_sem_take+0x6c>
	z_spin_lock_set_owner(l);
   22948:	482a      	ldr	r0, [pc, #168]	; (229f4 <z_impl_k_sem_take+0xdc>)
   2294a:	f7ff fac5 	bl	21ed8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2294e:	68a3      	ldr	r3, [r4, #8]
   22950:	b37b      	cbz	r3, 229b2 <z_impl_k_sem_take+0x9a>
		sem->count--;
   22952:	3b01      	subs	r3, #1
   22954:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22956:	4827      	ldr	r0, [pc, #156]	; (229f4 <z_impl_k_sem_take+0xdc>)
   22958:	f7ff faae 	bl	21eb8 <z_spin_unlock_valid>
   2295c:	b1f0      	cbz	r0, 2299c <z_impl_k_sem_take+0x84>
	__asm__ volatile(
   2295e:	f385 8811 	msr	BASEPRI, r5
   22962:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   22966:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   22968:	b002      	add	sp, #8
   2296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
   2296e:	4d22      	ldr	r5, [pc, #136]	; (229f8 <z_impl_k_sem_take+0xe0>)
   22970:	2279      	movs	r2, #121	; 0x79
   22972:	4629      	mov	r1, r5
   22974:	4821      	ldr	r0, [pc, #132]	; (229fc <z_impl_k_sem_take+0xe4>)
   22976:	f005 fce4 	bl	28342 <printk>
   2297a:	2179      	movs	r1, #121	; 0x79
   2297c:	4628      	mov	r0, r5
   2297e:	f006 f879 	bl	28a74 <assert_post_action>
   22982:	e7d5      	b.n	22930 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22984:	f8df 8078 	ldr.w	r8, [pc, #120]	; 22a00 <z_impl_k_sem_take+0xe8>
   22988:	2281      	movs	r2, #129	; 0x81
   2298a:	4641      	mov	r1, r8
   2298c:	481b      	ldr	r0, [pc, #108]	; (229fc <z_impl_k_sem_take+0xe4>)
   2298e:	f005 fcd8 	bl	28342 <printk>
   22992:	2181      	movs	r1, #129	; 0x81
   22994:	4640      	mov	r0, r8
   22996:	f006 f86d 	bl	28a74 <assert_post_action>
   2299a:	e7d5      	b.n	22948 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2299c:	4c18      	ldr	r4, [pc, #96]	; (22a00 <z_impl_k_sem_take+0xe8>)
   2299e:	22ac      	movs	r2, #172	; 0xac
   229a0:	4621      	mov	r1, r4
   229a2:	4816      	ldr	r0, [pc, #88]	; (229fc <z_impl_k_sem_take+0xe4>)
   229a4:	f005 fccd 	bl	28342 <printk>
   229a8:	21ac      	movs	r1, #172	; 0xac
   229aa:	4620      	mov	r0, r4
   229ac:	f006 f862 	bl	28a74 <assert_post_action>
   229b0:	e7d5      	b.n	2295e <z_impl_k_sem_take+0x46>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   229b2:	ea56 0307 	orrs.w	r3, r6, r7
   229b6:	d007      	beq.n	229c8 <z_impl_k_sem_take+0xb0>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   229b8:	e9cd 6700 	strd	r6, r7, [sp]
   229bc:	4622      	mov	r2, r4
   229be:	4629      	mov	r1, r5
   229c0:	480c      	ldr	r0, [pc, #48]	; (229f4 <z_impl_k_sem_take+0xdc>)
   229c2:	f001 fa0b 	bl	23ddc <z_pend_curr>
	return ret;
   229c6:	e7cf      	b.n	22968 <z_impl_k_sem_take+0x50>
   229c8:	480a      	ldr	r0, [pc, #40]	; (229f4 <z_impl_k_sem_take+0xdc>)
   229ca:	f7ff fa75 	bl	21eb8 <z_spin_unlock_valid>
   229ce:	b130      	cbz	r0, 229de <z_impl_k_sem_take+0xc6>
   229d0:	f385 8811 	msr	BASEPRI, r5
   229d4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   229d8:	f06f 000f 	mvn.w	r0, #15
   229dc:	e7c4      	b.n	22968 <z_impl_k_sem_take+0x50>
   229de:	4c08      	ldr	r4, [pc, #32]	; (22a00 <z_impl_k_sem_take+0xe8>)
   229e0:	22ac      	movs	r2, #172	; 0xac
   229e2:	4621      	mov	r1, r4
   229e4:	4805      	ldr	r0, [pc, #20]	; (229fc <z_impl_k_sem_take+0xe4>)
   229e6:	f005 fcac 	bl	28342 <printk>
   229ea:	21ac      	movs	r1, #172	; 0xac
   229ec:	4620      	mov	r0, r4
   229ee:	f006 f841 	bl	28a74 <assert_post_action>
   229f2:	e7ed      	b.n	229d0 <z_impl_k_sem_take+0xb8>
   229f4:	20003640 	.word	0x20003640
   229f8:	000332c4 	.word	0x000332c4
   229fc:	0002f968 	.word	0x0002f968
   22a00:	0002f9a4 	.word	0x0002f9a4

00022a04 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   22a04:	b570      	push	{r4, r5, r6, lr}
   22a06:	4604      	mov	r4, r0
	__asm__ volatile(
   22a08:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a0c:	f3ef 8511 	mrs	r5, BASEPRI
   22a10:	f383 8812 	msr	BASEPRI_MAX, r3
   22a14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a18:	4814      	ldr	r0, [pc, #80]	; (22a6c <z_impl_k_sem_reset+0x68>)
   22a1a:	f7ff fa3d 	bl	21e98 <z_spin_lock_valid>
   22a1e:	b168      	cbz	r0, 22a3c <z_impl_k_sem_reset+0x38>
	z_spin_lock_set_owner(l);
   22a20:	4812      	ldr	r0, [pc, #72]	; (22a6c <z_impl_k_sem_reset+0x68>)
   22a22:	f7ff fa59 	bl	21ed8 <z_spin_lock_set_owner>
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   22a26:	4620      	mov	r0, r4
   22a28:	f001 fbc8 	bl	241bc <z_unpend_first_thread>
		if (thread == NULL) {
   22a2c:	b188      	cbz	r0, 22a52 <z_impl_k_sem_reset+0x4e>
   22a2e:	f06f 020a 	mvn.w	r2, #10
   22a32:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   22a36:	f001 f845 	bl	23ac4 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   22a3a:	e7f4      	b.n	22a26 <z_impl_k_sem_reset+0x22>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a3c:	4e0c      	ldr	r6, [pc, #48]	; (22a70 <z_impl_k_sem_reset+0x6c>)
   22a3e:	2281      	movs	r2, #129	; 0x81
   22a40:	4631      	mov	r1, r6
   22a42:	480c      	ldr	r0, [pc, #48]	; (22a74 <z_impl_k_sem_reset+0x70>)
   22a44:	f005 fc7d 	bl	28342 <printk>
   22a48:	2181      	movs	r1, #129	; 0x81
   22a4a:	4630      	mov	r0, r6
   22a4c:	f006 f812 	bl	28a74 <assert_post_action>
   22a50:	e7e6      	b.n	22a20 <z_impl_k_sem_reset+0x1c>
	}
	sem->count = 0;
   22a52:	2300      	movs	r3, #0
   22a54:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22a56:	2102      	movs	r1, #2
   22a58:	f104 0010 	add.w	r0, r4, #16
   22a5c:	f00c fa64 	bl	2ef28 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   22a60:	4629      	mov	r1, r5
   22a62:	4802      	ldr	r0, [pc, #8]	; (22a6c <z_impl_k_sem_reset+0x68>)
   22a64:	f000 fdbc 	bl	235e0 <z_reschedule>
}
   22a68:	bd70      	pop	{r4, r5, r6, pc}
   22a6a:	bf00      	nop
   22a6c:	20003640 	.word	0x20003640
   22a70:	0002f9a4 	.word	0x0002f9a4
   22a74:	0002f968 	.word	0x0002f968

00022a78 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   22a78:	b510      	push	{r4, lr}
   22a7a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   22a7c:	4b08      	ldr	r3, [pc, #32]	; (22aa0 <k_sys_work_q_init+0x28>)
   22a7e:	9302      	str	r3, [sp, #8]
   22a80:	2400      	movs	r4, #0
   22a82:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   22a86:	ab02      	add	r3, sp, #8
   22a88:	9300      	str	r3, [sp, #0]
   22a8a:	f04f 33ff 	mov.w	r3, #4294967295
   22a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22a92:	4904      	ldr	r1, [pc, #16]	; (22aa4 <k_sys_work_q_init+0x2c>)
   22a94:	4804      	ldr	r0, [pc, #16]	; (22aa8 <k_sys_work_q_init+0x30>)
   22a96:	f000 faad 	bl	22ff4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   22a9a:	4620      	mov	r0, r4
   22a9c:	b004      	add	sp, #16
   22a9e:	bd10      	pop	{r4, pc}
   22aa0:	000332e4 	.word	0x000332e4
   22aa4:	20006ea0 	.word	0x20006ea0
   22aa8:	20001fc0 	.word	0x20001fc0

00022aac <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   22aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22aae:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   22ab0:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22ab2:	f013 0f02 	tst.w	r3, #2
   22ab6:	d16d      	bne.n	22b94 <submit_to_queue_locked+0xe8>
   22ab8:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   22aba:	f013 0f04 	tst.w	r3, #4
   22abe:	d16e      	bne.n	22b9e <submit_to_queue_locked+0xf2>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   22ac0:	680b      	ldr	r3, [r1, #0]
   22ac2:	2b00      	cmp	r3, #0
   22ac4:	d03c      	beq.n	22b40 <submit_to_queue_locked+0x94>
	return (*flagp & BIT(bit)) != 0U;
   22ac6:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   22ac8:	f013 0f01 	tst.w	r3, #1
   22acc:	d048      	beq.n	22b60 <submit_to_queue_locked+0xb4>
			__ASSERT_NO_MSG(work->queue != NULL);
   22ace:	68a3      	ldr	r3, [r4, #8]
   22ad0:	2b00      	cmp	r3, #0
   22ad2:	d038      	beq.n	22b46 <submit_to_queue_locked+0x9a>
			*queuep = work->queue;
   22ad4:	68a3      	ldr	r3, [r4, #8]
   22ad6:	602b      	str	r3, [r5, #0]
			ret = 2;
   22ad8:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   22ada:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   22adc:	2e00      	cmp	r6, #0
   22ade:	d04d      	beq.n	22b7c <submit_to_queue_locked+0xd0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22ae0:	4b30      	ldr	r3, [pc, #192]	; (22ba4 <submit_to_queue_locked+0xf8>)
   22ae2:	689b      	ldr	r3, [r3, #8]
   22ae4:	42b3      	cmp	r3, r6
   22ae6:	d03d      	beq.n	22b64 <submit_to_queue_locked+0xb8>
   22ae8:	2300      	movs	r3, #0
   22aea:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   22aec:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   22af0:	f3c3 0180 	ubfx	r1, r3, #2, #1
   22af4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22af8:	f013 0f01 	tst.w	r3, #1
   22afc:	d041      	beq.n	22b82 <submit_to_queue_locked+0xd6>
	} else if (draining && !chained) {
   22afe:	b109      	cbz	r1, 22b04 <submit_to_queue_locked+0x58>
   22b00:	2a00      	cmp	r2, #0
   22b02:	d041      	beq.n	22b88 <submit_to_queue_locked+0xdc>
	} else if (plugged && !draining) {
   22b04:	b108      	cbz	r0, 22b0a <submit_to_queue_locked+0x5e>
   22b06:	2900      	cmp	r1, #0
   22b08:	d041      	beq.n	22b8e <submit_to_queue_locked+0xe2>
	parent->next = child;
   22b0a:	2300      	movs	r3, #0
   22b0c:	6023      	str	r3, [r4, #0]
	return list->tail;
   22b0e:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   22b12:	b373      	cbz	r3, 22b72 <submit_to_queue_locked+0xc6>
	parent->next = child;
   22b14:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22b16:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   22b1a:	2200      	movs	r2, #0
   22b1c:	4611      	mov	r1, r2
   22b1e:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   22b22:	f001 fdb3 	bl	2468c <z_sched_wake>
		ret = 1;
   22b26:	2001      	movs	r0, #1

		if (rc < 0) {
   22b28:	2800      	cmp	r0, #0
   22b2a:	db06      	blt.n	22b3a <submit_to_queue_locked+0x8e>
	*flagp |= BIT(bit);
   22b2c:	68e3      	ldr	r3, [r4, #12]
   22b2e:	f043 0304 	orr.w	r3, r3, #4
   22b32:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   22b34:	682b      	ldr	r3, [r5, #0]
   22b36:	60a3      	str	r3, [r4, #8]
   22b38:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   22b3a:	2800      	cmp	r0, #0
   22b3c:	dc2e      	bgt.n	22b9c <submit_to_queue_locked+0xf0>
   22b3e:	e02b      	b.n	22b98 <submit_to_queue_locked+0xec>
			*queuep = work->queue;
   22b40:	6883      	ldr	r3, [r0, #8]
   22b42:	600b      	str	r3, [r1, #0]
   22b44:	e7bf      	b.n	22ac6 <submit_to_queue_locked+0x1a>
			__ASSERT_NO_MSG(work->queue != NULL);
   22b46:	4e18      	ldr	r6, [pc, #96]	; (22ba8 <submit_to_queue_locked+0xfc>)
   22b48:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   22b4c:	4631      	mov	r1, r6
   22b4e:	4817      	ldr	r0, [pc, #92]	; (22bac <submit_to_queue_locked+0x100>)
   22b50:	f005 fbf7 	bl	28342 <printk>
   22b54:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   22b58:	4630      	mov	r0, r6
   22b5a:	f005 ff8b 	bl	28a74 <assert_post_action>
   22b5e:	e7b9      	b.n	22ad4 <submit_to_queue_locked+0x28>
		ret = 1;
   22b60:	2701      	movs	r7, #1
   22b62:	e7ba      	b.n	22ada <submit_to_queue_locked+0x2e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22b64:	f00c f840 	bl	2ebe8 <k_is_in_isr>
   22b68:	b908      	cbnz	r0, 22b6e <submit_to_queue_locked+0xc2>
   22b6a:	2301      	movs	r3, #1
   22b6c:	e7bd      	b.n	22aea <submit_to_queue_locked+0x3e>
   22b6e:	2300      	movs	r3, #0
   22b70:	e7bb      	b.n	22aea <submit_to_queue_locked+0x3e>
   22b72:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   22b76:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   22b7a:	e7ce      	b.n	22b1a <submit_to_queue_locked+0x6e>
		return -EINVAL;
   22b7c:	f06f 0015 	mvn.w	r0, #21
   22b80:	e7d2      	b.n	22b28 <submit_to_queue_locked+0x7c>
		ret = -ENODEV;
   22b82:	f06f 0012 	mvn.w	r0, #18
   22b86:	e7cf      	b.n	22b28 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   22b88:	f06f 000f 	mvn.w	r0, #15
   22b8c:	e7cc      	b.n	22b28 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   22b8e:	f06f 000f 	mvn.w	r0, #15
   22b92:	e7c9      	b.n	22b28 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   22b94:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   22b98:	2300      	movs	r3, #0
   22b9a:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   22b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   22b9e:	2000      	movs	r0, #0
   22ba0:	e7fa      	b.n	22b98 <submit_to_queue_locked+0xec>
   22ba2:	bf00      	nop
   22ba4:	2000360c 	.word	0x2000360c
   22ba8:	000332f0 	.word	0x000332f0
   22bac:	0002f968 	.word	0x0002f968

00022bb0 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   22bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   22bb2:	b083      	sub	sp, #12
   22bb4:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
   22bb6:	f1a0 0610 	sub.w	r6, r0, #16
   22bba:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bbe:	f3ef 8511 	mrs	r5, BASEPRI
   22bc2:	f383 8812 	msr	BASEPRI_MAX, r3
   22bc6:	f3bf 8f6f 	isb	sy
   22bca:	481c      	ldr	r0, [pc, #112]	; (22c3c <work_timeout+0x8c>)
   22bcc:	f7ff f964 	bl	21e98 <z_spin_lock_valid>
   22bd0:	b1b8      	cbz	r0, 22c02 <work_timeout+0x52>
	z_spin_lock_set_owner(l);
   22bd2:	481a      	ldr	r0, [pc, #104]	; (22c3c <work_timeout+0x8c>)
   22bd4:	f7ff f980 	bl	21ed8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   22bd8:	2300      	movs	r3, #0
   22bda:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   22bdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   22be0:	f023 0208 	bic.w	r2, r3, #8
   22be4:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22be8:	f013 0f08 	tst.w	r3, #8
   22bec:	d114      	bne.n	22c18 <work_timeout+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bee:	4813      	ldr	r0, [pc, #76]	; (22c3c <work_timeout+0x8c>)
   22bf0:	f7ff f962 	bl	21eb8 <z_spin_unlock_valid>
   22bf4:	b1b8      	cbz	r0, 22c26 <work_timeout+0x76>
	__asm__ volatile(
   22bf6:	f385 8811 	msr	BASEPRI, r5
   22bfa:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
   22bfe:	b003      	add	sp, #12
   22c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c02:	4f0f      	ldr	r7, [pc, #60]	; (22c40 <work_timeout+0x90>)
   22c04:	2281      	movs	r2, #129	; 0x81
   22c06:	4639      	mov	r1, r7
   22c08:	480e      	ldr	r0, [pc, #56]	; (22c44 <work_timeout+0x94>)
   22c0a:	f005 fb9a 	bl	28342 <printk>
   22c0e:	2181      	movs	r1, #129	; 0x81
   22c10:	4638      	mov	r0, r7
   22c12:	f005 ff2f 	bl	28a74 <assert_post_action>
   22c16:	e7dc      	b.n	22bd2 <work_timeout+0x22>
		queue = dw->queue;
   22c18:	69a3      	ldr	r3, [r4, #24]
   22c1a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   22c1c:	a901      	add	r1, sp, #4
   22c1e:	4630      	mov	r0, r6
   22c20:	f7ff ff44 	bl	22aac <submit_to_queue_locked>
   22c24:	e7e3      	b.n	22bee <work_timeout+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c26:	4c06      	ldr	r4, [pc, #24]	; (22c40 <work_timeout+0x90>)
   22c28:	22ac      	movs	r2, #172	; 0xac
   22c2a:	4621      	mov	r1, r4
   22c2c:	4805      	ldr	r0, [pc, #20]	; (22c44 <work_timeout+0x94>)
   22c2e:	f005 fb88 	bl	28342 <printk>
   22c32:	21ac      	movs	r1, #172	; 0xac
   22c34:	4620      	mov	r0, r4
   22c36:	f005 ff1d 	bl	28a74 <assert_post_action>
   22c3a:	e7dc      	b.n	22bf6 <work_timeout+0x46>
   22c3c:	20003644 	.word	0x20003644
   22c40:	0002f9a4 	.word	0x0002f9a4
   22c44:	0002f968 	.word	0x0002f968

00022c48 <finalize_cancel_locked>:
{
   22c48:	b570      	push	{r4, r5, r6, lr}
   22c4a:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   22c4c:	68c3      	ldr	r3, [r0, #12]
   22c4e:	f023 0302 	bic.w	r3, r3, #2
   22c52:	60c3      	str	r3, [r0, #12]
	return list->head;
   22c54:	4b19      	ldr	r3, [pc, #100]	; (22cbc <finalize_cancel_locked+0x74>)
   22c56:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22c58:	b1e8      	cbz	r0, 22c96 <finalize_cancel_locked+0x4e>
   22c5a:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   22c5c:	b100      	cbz	r0, 22c60 <finalize_cancel_locked+0x18>
	return node->next;
   22c5e:	6804      	ldr	r4, [r0, #0]
   22c60:	2600      	movs	r6, #0
   22c62:	e01d      	b.n	22ca0 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   22c64:	b15e      	cbz	r6, 22c7e <finalize_cancel_locked+0x36>
	return node->next;
   22c66:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   22c68:	6033      	str	r3, [r6, #0]
	return list->tail;
   22c6a:	4b14      	ldr	r3, [pc, #80]	; (22cbc <finalize_cancel_locked+0x74>)
   22c6c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   22c6e:	4298      	cmp	r0, r3
   22c70:	d00e      	beq.n	22c90 <finalize_cancel_locked+0x48>
	parent->next = child;
   22c72:	2300      	movs	r3, #0
   22c74:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   22c78:	f7ff fe0e 	bl	22898 <z_impl_k_sem_give>
}
   22c7c:	e015      	b.n	22caa <finalize_cancel_locked+0x62>
	return node->next;
   22c7e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   22c80:	4b0e      	ldr	r3, [pc, #56]	; (22cbc <finalize_cancel_locked+0x74>)
   22c82:	601a      	str	r2, [r3, #0]
	return list->tail;
   22c84:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   22c86:	4298      	cmp	r0, r3
   22c88:	d1f3      	bne.n	22c72 <finalize_cancel_locked+0x2a>
	list->tail = node;
   22c8a:	4b0c      	ldr	r3, [pc, #48]	; (22cbc <finalize_cancel_locked+0x74>)
   22c8c:	605a      	str	r2, [r3, #4]
}
   22c8e:	e7f0      	b.n	22c72 <finalize_cancel_locked+0x2a>
	list->tail = node;
   22c90:	4b0a      	ldr	r3, [pc, #40]	; (22cbc <finalize_cancel_locked+0x74>)
   22c92:	605e      	str	r6, [r3, #4]
}
   22c94:	e7ed      	b.n	22c72 <finalize_cancel_locked+0x2a>
   22c96:	4604      	mov	r4, r0
   22c98:	e7e2      	b.n	22c60 <finalize_cancel_locked+0x18>
   22c9a:	4623      	mov	r3, r4
   22c9c:	4620      	mov	r0, r4
   22c9e:	461c      	mov	r4, r3
   22ca0:	b150      	cbz	r0, 22cb8 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   22ca2:	6843      	ldr	r3, [r0, #4]
   22ca4:	42ab      	cmp	r3, r5
   22ca6:	d0dd      	beq.n	22c64 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   22ca8:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22caa:	2c00      	cmp	r4, #0
   22cac:	d0f5      	beq.n	22c9a <finalize_cancel_locked+0x52>
   22cae:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   22cb0:	2c00      	cmp	r4, #0
   22cb2:	d0f3      	beq.n	22c9c <finalize_cancel_locked+0x54>
	return node->next;
   22cb4:	6823      	ldr	r3, [r4, #0]
   22cb6:	e7f1      	b.n	22c9c <finalize_cancel_locked+0x54>
}
   22cb8:	bd70      	pop	{r4, r5, r6, pc}
   22cba:	bf00      	nop
   22cbc:	20003648 	.word	0x20003648

00022cc0 <cancel_sync_locked>:
{
   22cc0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   22cc2:	68c5      	ldr	r5, [r0, #12]
   22cc4:	f015 0f02 	tst.w	r5, #2
   22cc8:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (ret) {
   22ccc:	d101      	bne.n	22cd2 <cancel_sync_locked+0x12>
}
   22cce:	4628      	mov	r0, r5
   22cd0:	bd70      	pop	{r4, r5, r6, pc}
   22cd2:	4604      	mov	r4, r0
   22cd4:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   22cd6:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   22cda:	2201      	movs	r2, #1
   22cdc:	2100      	movs	r1, #0
   22cde:	f00b fff8 	bl	2ecd2 <z_impl_k_sem_init>
	canceler->work = work;
   22ce2:	6074      	str	r4, [r6, #4]
	parent->next = child;
   22ce4:	2300      	movs	r3, #0
   22ce6:	6033      	str	r3, [r6, #0]
	return list->tail;
   22ce8:	4b05      	ldr	r3, [pc, #20]	; (22d00 <cancel_sync_locked+0x40>)
   22cea:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   22cec:	b11b      	cbz	r3, 22cf6 <cancel_sync_locked+0x36>
	parent->next = child;
   22cee:	601e      	str	r6, [r3, #0]
	list->tail = node;
   22cf0:	4b03      	ldr	r3, [pc, #12]	; (22d00 <cancel_sync_locked+0x40>)
   22cf2:	605e      	str	r6, [r3, #4]
}
   22cf4:	e7eb      	b.n	22cce <cancel_sync_locked+0xe>
   22cf6:	4b02      	ldr	r3, [pc, #8]	; (22d00 <cancel_sync_locked+0x40>)
   22cf8:	605e      	str	r6, [r3, #4]
	list->head = node;
   22cfa:	601e      	str	r6, [r3, #0]
}
   22cfc:	e7e7      	b.n	22cce <cancel_sync_locked+0xe>
   22cfe:	bf00      	nop
   22d00:	20003648 	.word	0x20003648

00022d04 <work_queue_main>:
{
   22d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d08:	b084      	sub	sp, #16
   22d0a:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   22d0c:	e021      	b.n	22d52 <work_queue_main+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d0e:	4c63      	ldr	r4, [pc, #396]	; (22e9c <work_queue_main+0x198>)
   22d10:	2281      	movs	r2, #129	; 0x81
   22d12:	4621      	mov	r1, r4
   22d14:	4862      	ldr	r0, [pc, #392]	; (22ea0 <work_queue_main+0x19c>)
   22d16:	f005 fb14 	bl	28342 <printk>
   22d1a:	2181      	movs	r1, #129	; 0x81
   22d1c:	4620      	mov	r0, r4
   22d1e:	f005 fea9 	bl	28a74 <assert_post_action>
   22d22:	e023      	b.n	22d6c <work_queue_main+0x68>
	return (*flagp & BIT(bit)) != 0U;
   22d24:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   22d28:	f023 0204 	bic.w	r2, r3, #4
   22d2c:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   22d30:	f013 0f04 	tst.w	r3, #4
   22d34:	d174      	bne.n	22e20 <work_queue_main+0x11c>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22d36:	2300      	movs	r3, #0
   22d38:	9302      	str	r3, [sp, #8]
   22d3a:	f04f 32ff 	mov.w	r2, #4294967295
   22d3e:	f04f 33ff 	mov.w	r3, #4294967295
   22d42:	e9cd 2300 	strd	r2, r3, [sp]
   22d46:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   22d4a:	4631      	mov	r1, r6
   22d4c:	4855      	ldr	r0, [pc, #340]	; (22ea4 <work_queue_main+0x1a0>)
   22d4e:	f001 fcff 	bl	24750 <z_sched_wait>
	__asm__ volatile(
   22d52:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d56:	f3ef 8611 	mrs	r6, BASEPRI
   22d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   22d5e:	f3bf 8f6f 	isb	sy
   22d62:	4850      	ldr	r0, [pc, #320]	; (22ea4 <work_queue_main+0x1a0>)
   22d64:	f7ff f898 	bl	21e98 <z_spin_lock_valid>
   22d68:	2800      	cmp	r0, #0
   22d6a:	d0d0      	beq.n	22d0e <work_queue_main+0xa>
	z_spin_lock_set_owner(l);
   22d6c:	484d      	ldr	r0, [pc, #308]	; (22ea4 <work_queue_main+0x1a0>)
   22d6e:	f7ff f8b3 	bl	21ed8 <z_spin_lock_set_owner>
	return list->head;
   22d72:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   22d76:	2c00      	cmp	r4, #0
   22d78:	d0d4      	beq.n	22d24 <work_queue_main+0x20>
	return node->next;
   22d7a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   22d7c:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   22d80:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22d84:	4294      	cmp	r4, r2
   22d86:	d048      	beq.n	22e1a <work_queue_main+0x116>
	*flagp |= BIT(bit);
   22d88:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   22d8c:	f043 0302 	orr.w	r3, r3, #2
   22d90:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   22d94:	68e3      	ldr	r3, [r4, #12]
   22d96:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   22d9a:	f023 0304 	bic.w	r3, r3, #4
   22d9e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   22da0:	6867      	ldr	r7, [r4, #4]
		if (work == NULL) {
   22da2:	2c00      	cmp	r4, #0
   22da4:	d0c7      	beq.n	22d36 <work_queue_main+0x32>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22da6:	483f      	ldr	r0, [pc, #252]	; (22ea4 <work_queue_main+0x1a0>)
   22da8:	f7ff f886 	bl	21eb8 <z_spin_unlock_valid>
   22dac:	2800      	cmp	r0, #0
   22dae:	d042      	beq.n	22e36 <work_queue_main+0x132>
	__asm__ volatile(
   22db0:	f386 8811 	msr	BASEPRI, r6
   22db4:	f3bf 8f6f 	isb	sy
			__ASSERT_NO_MSG(handler != NULL);
   22db8:	2f00      	cmp	r7, #0
   22dba:	d048      	beq.n	22e4e <work_queue_main+0x14a>
			handler(work);
   22dbc:	4620      	mov	r0, r4
   22dbe:	47b8      	blx	r7
	__asm__ volatile(
   22dc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   22dc4:	f3ef 8611 	mrs	r6, BASEPRI
   22dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   22dcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22dd0:	4834      	ldr	r0, [pc, #208]	; (22ea4 <work_queue_main+0x1a0>)
   22dd2:	f7ff f861 	bl	21e98 <z_spin_lock_valid>
   22dd6:	2800      	cmp	r0, #0
   22dd8:	d046      	beq.n	22e68 <work_queue_main+0x164>
	z_spin_lock_set_owner(l);
   22dda:	4832      	ldr	r0, [pc, #200]	; (22ea4 <work_queue_main+0x1a0>)
   22ddc:	f7ff f87c 	bl	21ed8 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   22de0:	68e3      	ldr	r3, [r4, #12]
   22de2:	f023 0301 	bic.w	r3, r3, #1
   22de6:	60e3      	str	r3, [r4, #12]
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22de8:	f013 0f02 	tst.w	r3, #2
   22dec:	d147      	bne.n	22e7e <work_queue_main+0x17a>
	*flagp &= ~BIT(bit);
   22dee:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   22df2:	f023 0302 	bic.w	r3, r3, #2
   22df6:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   22dfa:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22dfe:	4829      	ldr	r0, [pc, #164]	; (22ea4 <work_queue_main+0x1a0>)
   22e00:	f7ff f85a 	bl	21eb8 <z_spin_unlock_valid>
   22e04:	2800      	cmp	r0, #0
   22e06:	d03e      	beq.n	22e86 <work_queue_main+0x182>
	__asm__ volatile(
   22e08:	f386 8811 	msr	BASEPRI, r6
   22e0c:	f3bf 8f6f 	isb	sy
			if (yield) {
   22e10:	2c00      	cmp	r4, #0
   22e12:	d19e      	bne.n	22d52 <work_queue_main+0x4e>
	z_impl_k_yield();
   22e14:	f001 fa32 	bl	2427c <z_impl_k_yield>
}
   22e18:	e79b      	b.n	22d52 <work_queue_main+0x4e>
	list->tail = node;
   22e1a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   22e1e:	e7b3      	b.n	22d88 <work_queue_main+0x84>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   22e20:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   22e24:	2200      	movs	r2, #0
   22e26:	2101      	movs	r1, #1
   22e28:	4638      	mov	r0, r7
   22e2a:	f001 fc2f 	bl	2468c <z_sched_wake>
   22e2e:	2800      	cmp	r0, #0
   22e30:	d1f8      	bne.n	22e24 <work_queue_main+0x120>
		k_work_handler_t handler = NULL;
   22e32:	2700      	movs	r7, #0
   22e34:	e7b5      	b.n	22da2 <work_queue_main+0x9e>
   22e36:	f8df 8064 	ldr.w	r8, [pc, #100]	; 22e9c <work_queue_main+0x198>
   22e3a:	22ac      	movs	r2, #172	; 0xac
   22e3c:	4641      	mov	r1, r8
   22e3e:	4818      	ldr	r0, [pc, #96]	; (22ea0 <work_queue_main+0x19c>)
   22e40:	f005 fa7f 	bl	28342 <printk>
   22e44:	21ac      	movs	r1, #172	; 0xac
   22e46:	4640      	mov	r0, r8
   22e48:	f005 fe14 	bl	28a74 <assert_post_action>
   22e4c:	e7b0      	b.n	22db0 <work_queue_main+0xac>
			__ASSERT_NO_MSG(handler != NULL);
   22e4e:	4e16      	ldr	r6, [pc, #88]	; (22ea8 <work_queue_main+0x1a4>)
   22e50:	f240 228a 	movw	r2, #650	; 0x28a
   22e54:	4631      	mov	r1, r6
   22e56:	4812      	ldr	r0, [pc, #72]	; (22ea0 <work_queue_main+0x19c>)
   22e58:	f005 fa73 	bl	28342 <printk>
   22e5c:	f240 218a 	movw	r1, #650	; 0x28a
   22e60:	4630      	mov	r0, r6
   22e62:	f005 fe07 	bl	28a74 <assert_post_action>
   22e66:	e7a9      	b.n	22dbc <work_queue_main+0xb8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e68:	4f0c      	ldr	r7, [pc, #48]	; (22e9c <work_queue_main+0x198>)
   22e6a:	2281      	movs	r2, #129	; 0x81
   22e6c:	4639      	mov	r1, r7
   22e6e:	480c      	ldr	r0, [pc, #48]	; (22ea0 <work_queue_main+0x19c>)
   22e70:	f005 fa67 	bl	28342 <printk>
   22e74:	2181      	movs	r1, #129	; 0x81
   22e76:	4638      	mov	r0, r7
   22e78:	f005 fdfc 	bl	28a74 <assert_post_action>
   22e7c:	e7ad      	b.n	22dda <work_queue_main+0xd6>
				finalize_cancel_locked(work);
   22e7e:	4620      	mov	r0, r4
   22e80:	f7ff fee2 	bl	22c48 <finalize_cancel_locked>
   22e84:	e7b3      	b.n	22dee <work_queue_main+0xea>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e86:	4f05      	ldr	r7, [pc, #20]	; (22e9c <work_queue_main+0x198>)
   22e88:	22ac      	movs	r2, #172	; 0xac
   22e8a:	4639      	mov	r1, r7
   22e8c:	4804      	ldr	r0, [pc, #16]	; (22ea0 <work_queue_main+0x19c>)
   22e8e:	f005 fa58 	bl	28342 <printk>
   22e92:	21ac      	movs	r1, #172	; 0xac
   22e94:	4638      	mov	r0, r7
   22e96:	f005 fded 	bl	28a74 <assert_post_action>
   22e9a:	e7b5      	b.n	22e08 <work_queue_main+0x104>
   22e9c:	0002f9a4 	.word	0x0002f9a4
   22ea0:	0002f968 	.word	0x0002f968
   22ea4:	20003644 	.word	0x20003644
   22ea8:	000332f0 	.word	0x000332f0

00022eac <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   22eac:	b570      	push	{r4, r5, r6, lr}
   22eae:	4606      	mov	r6, r0
   22eb0:	4608      	mov	r0, r1
   22eb2:	4614      	mov	r4, r2
   22eb4:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22eb6:	ea54 0305 	orrs.w	r3, r4, r5
   22eba:	d00c      	beq.n	22ed6 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   22ebc:	68cb      	ldr	r3, [r1, #12]
   22ebe:	f043 0308 	orr.w	r3, r3, #8
   22ec2:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   22ec4:	6833      	ldr	r3, [r6, #0]
   22ec6:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22ec8:	462b      	mov	r3, r5
   22eca:	4905      	ldr	r1, [pc, #20]	; (22ee0 <schedule_for_queue_locked+0x34>)
   22ecc:	3010      	adds	r0, #16
   22ece:	f001 fcb3 	bl	24838 <z_add_timeout>

	return ret;
   22ed2:	2001      	movs	r0, #1
}
   22ed4:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   22ed6:	4631      	mov	r1, r6
   22ed8:	f7ff fde8 	bl	22aac <submit_to_queue_locked>
   22edc:	e7fa      	b.n	22ed4 <schedule_for_queue_locked+0x28>
   22ede:	bf00      	nop
   22ee0:	00022bb1 	.word	0x00022bb1

00022ee4 <k_work_init>:
{
   22ee4:	b570      	push	{r4, r5, r6, lr}
   22ee6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   22ee8:	4604      	mov	r4, r0
   22eea:	b130      	cbz	r0, 22efa <k_work_init+0x16>
	__ASSERT_NO_MSG(handler != NULL);
   22eec:	b185      	cbz	r5, 22f10 <k_work_init+0x2c>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22eee:	2300      	movs	r3, #0
   22ef0:	6023      	str	r3, [r4, #0]
   22ef2:	60a3      	str	r3, [r4, #8]
   22ef4:	60e3      	str	r3, [r4, #12]
   22ef6:	6065      	str	r5, [r4, #4]
}
   22ef8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   22efa:	4e0b      	ldr	r6, [pc, #44]	; (22f28 <k_work_init+0x44>)
   22efc:	2289      	movs	r2, #137	; 0x89
   22efe:	4631      	mov	r1, r6
   22f00:	480a      	ldr	r0, [pc, #40]	; (22f2c <k_work_init+0x48>)
   22f02:	f005 fa1e 	bl	28342 <printk>
   22f06:	2189      	movs	r1, #137	; 0x89
   22f08:	4630      	mov	r0, r6
   22f0a:	f005 fdb3 	bl	28a74 <assert_post_action>
   22f0e:	e7ed      	b.n	22eec <k_work_init+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   22f10:	4e05      	ldr	r6, [pc, #20]	; (22f28 <k_work_init+0x44>)
   22f12:	228a      	movs	r2, #138	; 0x8a
   22f14:	4631      	mov	r1, r6
   22f16:	4805      	ldr	r0, [pc, #20]	; (22f2c <k_work_init+0x48>)
   22f18:	f005 fa13 	bl	28342 <printk>
   22f1c:	218a      	movs	r1, #138	; 0x8a
   22f1e:	4630      	mov	r0, r6
   22f20:	f005 fda8 	bl	28a74 <assert_post_action>
   22f24:	e7e3      	b.n	22eee <k_work_init+0xa>
   22f26:	bf00      	nop
   22f28:	000332f0 	.word	0x000332f0
   22f2c:	0002f968 	.word	0x0002f968

00022f30 <k_work_submit_to_queue>:
{
   22f30:	b570      	push	{r4, r5, r6, lr}
   22f32:	b082      	sub	sp, #8
   22f34:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   22f36:	460c      	mov	r4, r1
   22f38:	b309      	cbz	r1, 22f7e <k_work_submit_to_queue+0x4e>
	__asm__ volatile(
   22f3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f3e:	f3ef 8611 	mrs	r6, BASEPRI
   22f42:	f383 8812 	msr	BASEPRI_MAX, r3
   22f46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f4a:	4822      	ldr	r0, [pc, #136]	; (22fd4 <k_work_submit_to_queue+0xa4>)
   22f4c:	f7fe ffa4 	bl	21e98 <z_spin_lock_valid>
   22f50:	b310      	cbz	r0, 22f98 <k_work_submit_to_queue+0x68>
	z_spin_lock_set_owner(l);
   22f52:	4d20      	ldr	r5, [pc, #128]	; (22fd4 <k_work_submit_to_queue+0xa4>)
   22f54:	4628      	mov	r0, r5
   22f56:	f7fe ffbf 	bl	21ed8 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   22f5a:	a901      	add	r1, sp, #4
   22f5c:	4620      	mov	r0, r4
   22f5e:	f7ff fda5 	bl	22aac <submit_to_queue_locked>
   22f62:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f64:	4628      	mov	r0, r5
   22f66:	f7fe ffa7 	bl	21eb8 <z_spin_unlock_valid>
   22f6a:	b300      	cbz	r0, 22fae <k_work_submit_to_queue+0x7e>
	__asm__ volatile(
   22f6c:	f386 8811 	msr	BASEPRI, r6
   22f70:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   22f74:	2c00      	cmp	r4, #0
   22f76:	dc25      	bgt.n	22fc4 <k_work_submit_to_queue+0x94>
}
   22f78:	4620      	mov	r0, r4
   22f7a:	b002      	add	sp, #8
   22f7c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   22f7e:	4d16      	ldr	r5, [pc, #88]	; (22fd8 <k_work_submit_to_queue+0xa8>)
   22f80:	f240 1269 	movw	r2, #361	; 0x169
   22f84:	4629      	mov	r1, r5
   22f86:	4815      	ldr	r0, [pc, #84]	; (22fdc <k_work_submit_to_queue+0xac>)
   22f88:	f005 f9db 	bl	28342 <printk>
   22f8c:	f240 1169 	movw	r1, #361	; 0x169
   22f90:	4628      	mov	r0, r5
   22f92:	f005 fd6f 	bl	28a74 <assert_post_action>
   22f96:	e7d0      	b.n	22f3a <k_work_submit_to_queue+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f98:	4d11      	ldr	r5, [pc, #68]	; (22fe0 <k_work_submit_to_queue+0xb0>)
   22f9a:	2281      	movs	r2, #129	; 0x81
   22f9c:	4629      	mov	r1, r5
   22f9e:	480f      	ldr	r0, [pc, #60]	; (22fdc <k_work_submit_to_queue+0xac>)
   22fa0:	f005 f9cf 	bl	28342 <printk>
   22fa4:	2181      	movs	r1, #129	; 0x81
   22fa6:	4628      	mov	r0, r5
   22fa8:	f005 fd64 	bl	28a74 <assert_post_action>
   22fac:	e7d1      	b.n	22f52 <k_work_submit_to_queue+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fae:	4d0c      	ldr	r5, [pc, #48]	; (22fe0 <k_work_submit_to_queue+0xb0>)
   22fb0:	22ac      	movs	r2, #172	; 0xac
   22fb2:	4629      	mov	r1, r5
   22fb4:	4809      	ldr	r0, [pc, #36]	; (22fdc <k_work_submit_to_queue+0xac>)
   22fb6:	f005 f9c4 	bl	28342 <printk>
   22fba:	21ac      	movs	r1, #172	; 0xac
   22fbc:	4628      	mov	r0, r5
   22fbe:	f005 fd59 	bl	28a74 <assert_post_action>
   22fc2:	e7d3      	b.n	22f6c <k_work_submit_to_queue+0x3c>
	return z_impl_k_is_preempt_thread();
   22fc4:	f001 fad4 	bl	24570 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   22fc8:	2800      	cmp	r0, #0
   22fca:	d0d5      	beq.n	22f78 <k_work_submit_to_queue+0x48>
	z_impl_k_yield();
   22fcc:	f001 f956 	bl	2427c <z_impl_k_yield>
	return ret;
   22fd0:	e7d2      	b.n	22f78 <k_work_submit_to_queue+0x48>
   22fd2:	bf00      	nop
   22fd4:	20003644 	.word	0x20003644
   22fd8:	000332f0 	.word	0x000332f0
   22fdc:	0002f968 	.word	0x0002f968
   22fe0:	0002f9a4 	.word	0x0002f9a4

00022fe4 <k_work_submit>:
{
   22fe4:	b508      	push	{r3, lr}
   22fe6:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   22fe8:	4801      	ldr	r0, [pc, #4]	; (22ff0 <k_work_submit+0xc>)
   22fea:	f7ff ffa1 	bl	22f30 <k_work_submit_to_queue>
}
   22fee:	bd08      	pop	{r3, pc}
   22ff0:	20001fc0 	.word	0x20001fc0

00022ff4 <k_work_queue_start>:
{
   22ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22ff8:	b089      	sub	sp, #36	; 0x24
   22ffa:	460d      	mov	r5, r1
   22ffc:	4617      	mov	r7, r2
   22ffe:	4698      	mov	r8, r3
   23000:	9e10      	ldr	r6, [sp, #64]	; 0x40
	__ASSERT_NO_MSG(queue);
   23002:	4604      	mov	r4, r0
   23004:	2800      	cmp	r0, #0
   23006:	d03e      	beq.n	23086 <k_work_queue_start+0x92>
	__ASSERT_NO_MSG(stack);
   23008:	2d00      	cmp	r5, #0
   2300a:	d04a      	beq.n	230a2 <k_work_queue_start+0xae>
	return (*flagp & BIT(bit)) != 0U;
   2300c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   23010:	f013 0f01 	tst.w	r3, #1
   23014:	d153      	bne.n	230be <k_work_queue_start+0xca>
	list->head = NULL;
   23016:	2300      	movs	r3, #0
   23018:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	list->tail = NULL;
   2301c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   23020:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   23024:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   23028:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   2302c:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   23030:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   23034:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   23038:	2e00      	cmp	r6, #0
   2303a:	d04e      	beq.n	230da <k_work_queue_start+0xe6>
   2303c:	7933      	ldrb	r3, [r6, #4]
   2303e:	2b00      	cmp	r3, #0
   23040:	d14d      	bne.n	230de <k_work_queue_start+0xea>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   23042:	2301      	movs	r3, #1
	*flagp = flags;
   23044:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23048:	f04f 32ff 	mov.w	r2, #4294967295
   2304c:	f04f 33ff 	mov.w	r3, #4294967295
   23050:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23054:	2200      	movs	r2, #0
   23056:	9204      	str	r2, [sp, #16]
   23058:	f8cd 800c 	str.w	r8, [sp, #12]
   2305c:	9202      	str	r2, [sp, #8]
   2305e:	9201      	str	r2, [sp, #4]
   23060:	9400      	str	r4, [sp, #0]
   23062:	4b20      	ldr	r3, [pc, #128]	; (230e4 <k_work_queue_start+0xf0>)
   23064:	463a      	mov	r2, r7
   23066:	4629      	mov	r1, r5
   23068:	4620      	mov	r0, r4
   2306a:	f7ff f82f 	bl	220cc <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2306e:	b126      	cbz	r6, 2307a <k_work_queue_start+0x86>
   23070:	6831      	ldr	r1, [r6, #0]
   23072:	b111      	cbz	r1, 2307a <k_work_queue_start+0x86>
	return z_impl_k_thread_name_set(thread, str);
   23074:	4620      	mov	r0, r4
   23076:	f7fe feeb 	bl	21e50 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2307a:	4620      	mov	r0, r4
   2307c:	f00b fdbc 	bl	2ebf8 <z_impl_k_thread_start>
}
   23080:	b009      	add	sp, #36	; 0x24
   23082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(queue);
   23086:	f8df 9064 	ldr.w	r9, [pc, #100]	; 230ec <k_work_queue_start+0xf8>
   2308a:	f44f 722e 	mov.w	r2, #696	; 0x2b8
   2308e:	4649      	mov	r1, r9
   23090:	4815      	ldr	r0, [pc, #84]	; (230e8 <k_work_queue_start+0xf4>)
   23092:	f005 f956 	bl	28342 <printk>
   23096:	f44f 712e 	mov.w	r1, #696	; 0x2b8
   2309a:	4648      	mov	r0, r9
   2309c:	f005 fcea 	bl	28a74 <assert_post_action>
   230a0:	e7b2      	b.n	23008 <k_work_queue_start+0x14>
	__ASSERT_NO_MSG(stack);
   230a2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 230ec <k_work_queue_start+0xf8>
   230a6:	f240 22b9 	movw	r2, #697	; 0x2b9
   230aa:	4649      	mov	r1, r9
   230ac:	480e      	ldr	r0, [pc, #56]	; (230e8 <k_work_queue_start+0xf4>)
   230ae:	f005 f948 	bl	28342 <printk>
   230b2:	f240 21b9 	movw	r1, #697	; 0x2b9
   230b6:	4648      	mov	r0, r9
   230b8:	f005 fcdc 	bl	28a74 <assert_post_action>
   230bc:	e7a6      	b.n	2300c <k_work_queue_start+0x18>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   230be:	f8df 902c 	ldr.w	r9, [pc, #44]	; 230ec <k_work_queue_start+0xf8>
   230c2:	f240 22ba 	movw	r2, #698	; 0x2ba
   230c6:	4649      	mov	r1, r9
   230c8:	4807      	ldr	r0, [pc, #28]	; (230e8 <k_work_queue_start+0xf4>)
   230ca:	f005 f93a 	bl	28342 <printk>
   230ce:	f240 21ba 	movw	r1, #698	; 0x2ba
   230d2:	4648      	mov	r0, r9
   230d4:	f005 fcce 	bl	28a74 <assert_post_action>
   230d8:	e79d      	b.n	23016 <k_work_queue_start+0x22>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   230da:	2301      	movs	r3, #1
   230dc:	e7b2      	b.n	23044 <k_work_queue_start+0x50>
		flags |= K_WORK_QUEUE_NO_YIELD;
   230de:	f240 1301 	movw	r3, #257	; 0x101
   230e2:	e7af      	b.n	23044 <k_work_queue_start+0x50>
   230e4:	00022d05 	.word	0x00022d05
   230e8:	0002f968 	.word	0x0002f968
   230ec:	000332f0 	.word	0x000332f0

000230f0 <k_work_init_delayable>:
{
   230f0:	b570      	push	{r4, r5, r6, lr}
   230f2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   230f4:	4605      	mov	r5, r0
   230f6:	b150      	cbz	r0, 2310e <k_work_init_delayable+0x1e>
	__ASSERT_NO_MSG(handler != NULL);
   230f8:	b1b4      	cbz	r4, 23128 <k_work_init_delayable+0x38>
	*dwork = (struct k_work_delayable){
   230fa:	2230      	movs	r2, #48	; 0x30
   230fc:	2100      	movs	r1, #0
   230fe:	4628      	mov	r0, r5
   23100:	f007 fbf1 	bl	2a8e6 <memset>
   23104:	606c      	str	r4, [r5, #4]
   23106:	f44f 7380 	mov.w	r3, #256	; 0x100
   2310a:	60eb      	str	r3, [r5, #12]
}
   2310c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   2310e:	4e0d      	ldr	r6, [pc, #52]	; (23144 <k_work_init_delayable+0x54>)
   23110:	f44f 724c 	mov.w	r2, #816	; 0x330
   23114:	4631      	mov	r1, r6
   23116:	480c      	ldr	r0, [pc, #48]	; (23148 <k_work_init_delayable+0x58>)
   23118:	f005 f913 	bl	28342 <printk>
   2311c:	f44f 714c 	mov.w	r1, #816	; 0x330
   23120:	4630      	mov	r0, r6
   23122:	f005 fca7 	bl	28a74 <assert_post_action>
   23126:	e7e7      	b.n	230f8 <k_work_init_delayable+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   23128:	4e06      	ldr	r6, [pc, #24]	; (23144 <k_work_init_delayable+0x54>)
   2312a:	f240 3231 	movw	r2, #817	; 0x331
   2312e:	4631      	mov	r1, r6
   23130:	4805      	ldr	r0, [pc, #20]	; (23148 <k_work_init_delayable+0x58>)
   23132:	f005 f906 	bl	28342 <printk>
   23136:	f240 3131 	movw	r1, #817	; 0x331
   2313a:	4630      	mov	r0, r6
   2313c:	f005 fc9a 	bl	28a74 <assert_post_action>
   23140:	e7db      	b.n	230fa <k_work_init_delayable+0xa>
   23142:	bf00      	nop
   23144:	000332f0 	.word	0x000332f0
   23148:	0002f968 	.word	0x0002f968

0002314c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2314c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23150:	b082      	sub	sp, #8
   23152:	9001      	str	r0, [sp, #4]
   23154:	4617      	mov	r7, r2
   23156:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   23158:	460c      	mov	r4, r1
   2315a:	b1f9      	cbz	r1, 2319c <k_work_schedule_for_queue+0x50>
	__asm__ volatile(
   2315c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23160:	f3ef 8611 	mrs	r6, BASEPRI
   23164:	f383 8812 	msr	BASEPRI_MAX, r3
   23168:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2316c:	4821      	ldr	r0, [pc, #132]	; (231f4 <k_work_schedule_for_queue+0xa8>)
   2316e:	f7fe fe93 	bl	21e98 <z_spin_lock_valid>
   23172:	b300      	cbz	r0, 231b6 <k_work_schedule_for_queue+0x6a>
	z_spin_lock_set_owner(l);
   23174:	481f      	ldr	r0, [pc, #124]	; (231f4 <k_work_schedule_for_queue+0xa8>)
   23176:	f7fe feaf 	bl	21ed8 <z_spin_lock_set_owner>
	return *flagp;
   2317a:	68e1      	ldr	r1, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2317c:	f011 0f0e 	tst.w	r1, #14
   23180:	d025      	beq.n	231ce <k_work_schedule_for_queue+0x82>
	int ret = 0;
   23182:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23184:	481b      	ldr	r0, [pc, #108]	; (231f4 <k_work_schedule_for_queue+0xa8>)
   23186:	f7fe fe97 	bl	21eb8 <z_spin_unlock_valid>
   2318a:	b340      	cbz	r0, 231de <k_work_schedule_for_queue+0x92>
	__asm__ volatile(
   2318c:	f386 8811 	msr	BASEPRI, r6
   23190:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23194:	4620      	mov	r0, r4
   23196:	b002      	add	sp, #8
   23198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   2319c:	4e16      	ldr	r6, [pc, #88]	; (231f8 <k_work_schedule_for_queue+0xac>)
   2319e:	f240 32a7 	movw	r2, #935	; 0x3a7
   231a2:	4631      	mov	r1, r6
   231a4:	4815      	ldr	r0, [pc, #84]	; (231fc <k_work_schedule_for_queue+0xb0>)
   231a6:	f005 f8cc 	bl	28342 <printk>
   231aa:	f240 31a7 	movw	r1, #935	; 0x3a7
   231ae:	4630      	mov	r0, r6
   231b0:	f005 fc60 	bl	28a74 <assert_post_action>
   231b4:	e7d2      	b.n	2315c <k_work_schedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231b6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 23200 <k_work_schedule_for_queue+0xb4>
   231ba:	2281      	movs	r2, #129	; 0x81
   231bc:	4641      	mov	r1, r8
   231be:	480f      	ldr	r0, [pc, #60]	; (231fc <k_work_schedule_for_queue+0xb0>)
   231c0:	f005 f8bf 	bl	28342 <printk>
   231c4:	2181      	movs	r1, #129	; 0x81
   231c6:	4640      	mov	r0, r8
   231c8:	f005 fc54 	bl	28a74 <assert_post_action>
   231cc:	e7d2      	b.n	23174 <k_work_schedule_for_queue+0x28>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   231ce:	463a      	mov	r2, r7
   231d0:	462b      	mov	r3, r5
   231d2:	4621      	mov	r1, r4
   231d4:	a801      	add	r0, sp, #4
   231d6:	f7ff fe69 	bl	22eac <schedule_for_queue_locked>
   231da:	4604      	mov	r4, r0
   231dc:	e7d2      	b.n	23184 <k_work_schedule_for_queue+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231de:	4d08      	ldr	r5, [pc, #32]	; (23200 <k_work_schedule_for_queue+0xb4>)
   231e0:	22ac      	movs	r2, #172	; 0xac
   231e2:	4629      	mov	r1, r5
   231e4:	4805      	ldr	r0, [pc, #20]	; (231fc <k_work_schedule_for_queue+0xb0>)
   231e6:	f005 f8ac 	bl	28342 <printk>
   231ea:	21ac      	movs	r1, #172	; 0xac
   231ec:	4628      	mov	r0, r5
   231ee:	f005 fc41 	bl	28a74 <assert_post_action>
   231f2:	e7cb      	b.n	2318c <k_work_schedule_for_queue+0x40>
   231f4:	20003644 	.word	0x20003644
   231f8:	000332f0 	.word	0x000332f0
   231fc:	0002f968 	.word	0x0002f968
   23200:	0002f9a4 	.word	0x0002f9a4

00023204 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   23204:	b508      	push	{r3, lr}
   23206:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   23208:	4801      	ldr	r0, [pc, #4]	; (23210 <k_work_schedule+0xc>)
   2320a:	f7ff ff9f 	bl	2314c <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   2320e:	bd08      	pop	{r3, pc}
   23210:	20001fc0 	.word	0x20001fc0

00023214 <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   23214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23218:	b082      	sub	sp, #8
   2321a:	9001      	str	r0, [sp, #4]
   2321c:	4616      	mov	r6, r2
   2321e:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   23220:	460c      	mov	r4, r1
   23222:	b341      	cbz	r1, 23276 <k_work_reschedule_for_queue+0x62>
	__asm__ volatile(
   23224:	f04f 0340 	mov.w	r3, #64	; 0x40
   23228:	f3ef 8711 	mrs	r7, BASEPRI
   2322c:	f383 8812 	msr	BASEPRI_MAX, r3
   23230:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23234:	4824      	ldr	r0, [pc, #144]	; (232c8 <k_work_reschedule_for_queue+0xb4>)
   23236:	f7fe fe2f 	bl	21e98 <z_spin_lock_valid>
   2323a:	b348      	cbz	r0, 23290 <k_work_reschedule_for_queue+0x7c>
	z_spin_lock_set_owner(l);
   2323c:	4822      	ldr	r0, [pc, #136]	; (232c8 <k_work_reschedule_for_queue+0xb4>)
   2323e:	f7fe fe4b 	bl	21ed8 <z_spin_lock_set_owner>
	return (*flagp & BIT(bit)) != 0U;
   23242:	68e3      	ldr	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   23244:	f023 0208 	bic.w	r2, r3, #8
   23248:	60e2      	str	r2, [r4, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2324a:	f013 0f08 	tst.w	r3, #8
   2324e:	d12b      	bne.n	232a8 <k_work_reschedule_for_queue+0x94>

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   23250:	4632      	mov	r2, r6
   23252:	462b      	mov	r3, r5
   23254:	4621      	mov	r1, r4
   23256:	a801      	add	r0, sp, #4
   23258:	f7ff fe28 	bl	22eac <schedule_for_queue_locked>
   2325c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2325e:	481a      	ldr	r0, [pc, #104]	; (232c8 <k_work_reschedule_for_queue+0xb4>)
   23260:	f7fe fe2a 	bl	21eb8 <z_spin_unlock_valid>
   23264:	b328      	cbz	r0, 232b2 <k_work_reschedule_for_queue+0x9e>
	__asm__ volatile(
   23266:	f387 8811 	msr	BASEPRI, r7
   2326a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2326e:	4620      	mov	r0, r4
   23270:	b002      	add	sp, #8
   23272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   23276:	4f15      	ldr	r7, [pc, #84]	; (232cc <k_work_reschedule_for_queue+0xb8>)
   23278:	f240 32cb 	movw	r2, #971	; 0x3cb
   2327c:	4639      	mov	r1, r7
   2327e:	4814      	ldr	r0, [pc, #80]	; (232d0 <k_work_reschedule_for_queue+0xbc>)
   23280:	f005 f85f 	bl	28342 <printk>
   23284:	f240 31cb 	movw	r1, #971	; 0x3cb
   23288:	4638      	mov	r0, r7
   2328a:	f005 fbf3 	bl	28a74 <assert_post_action>
   2328e:	e7c9      	b.n	23224 <k_work_reschedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23290:	f8df 8040 	ldr.w	r8, [pc, #64]	; 232d4 <k_work_reschedule_for_queue+0xc0>
   23294:	2281      	movs	r2, #129	; 0x81
   23296:	4641      	mov	r1, r8
   23298:	480d      	ldr	r0, [pc, #52]	; (232d0 <k_work_reschedule_for_queue+0xbc>)
   2329a:	f005 f852 	bl	28342 <printk>
   2329e:	2181      	movs	r1, #129	; 0x81
   232a0:	4640      	mov	r0, r8
   232a2:	f005 fbe7 	bl	28a74 <assert_post_action>
   232a6:	e7c9      	b.n	2323c <k_work_reschedule_for_queue+0x28>
		z_abort_timeout(&dwork->timeout);
   232a8:	f104 0010 	add.w	r0, r4, #16
   232ac:	f001 fba8 	bl	24a00 <z_abort_timeout>
		ret = true;
   232b0:	e7ce      	b.n	23250 <k_work_reschedule_for_queue+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232b2:	4d08      	ldr	r5, [pc, #32]	; (232d4 <k_work_reschedule_for_queue+0xc0>)
   232b4:	22ac      	movs	r2, #172	; 0xac
   232b6:	4629      	mov	r1, r5
   232b8:	4805      	ldr	r0, [pc, #20]	; (232d0 <k_work_reschedule_for_queue+0xbc>)
   232ba:	f005 f842 	bl	28342 <printk>
   232be:	21ac      	movs	r1, #172	; 0xac
   232c0:	4628      	mov	r0, r5
   232c2:	f005 fbd7 	bl	28a74 <assert_post_action>
   232c6:	e7ce      	b.n	23266 <k_work_reschedule_for_queue+0x52>
   232c8:	20003644 	.word	0x20003644
   232cc:	000332f0 	.word	0x000332f0
   232d0:	0002f968 	.word	0x0002f968
   232d4:	0002f9a4 	.word	0x0002f9a4

000232d8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   232d8:	b508      	push	{r3, lr}
   232da:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   232dc:	4801      	ldr	r0, [pc, #4]	; (232e4 <k_work_reschedule+0xc>)
   232de:	f7ff ff99 	bl	23214 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   232e2:	bd08      	pop	{r3, pc}
   232e4:	20001fc0 	.word	0x20001fc0

000232e8 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   232e8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   232ea:	4604      	mov	r4, r0
   232ec:	b1e8      	cbz	r0, 2332a <k_work_cancel_delayable+0x42>
	__asm__ volatile(
   232ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   232f2:	f3ef 8611 	mrs	r6, BASEPRI
   232f6:	f383 8812 	msr	BASEPRI_MAX, r3
   232fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   232fe:	481c      	ldr	r0, [pc, #112]	; (23370 <k_work_cancel_delayable+0x88>)
   23300:	f7fe fdca 	bl	21e98 <z_spin_lock_valid>
   23304:	b1f0      	cbz	r0, 23344 <k_work_cancel_delayable+0x5c>
	z_spin_lock_set_owner(l);
   23306:	4d1a      	ldr	r5, [pc, #104]	; (23370 <k_work_cancel_delayable+0x88>)
   23308:	4628      	mov	r0, r5
   2330a:	f7fe fde5 	bl	21ed8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2330e:	4620      	mov	r0, r4
   23310:	f00b fd34 	bl	2ed7c <cancel_delayable_async_locked>
   23314:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23316:	4628      	mov	r0, r5
   23318:	f7fe fdce 	bl	21eb8 <z_spin_unlock_valid>
   2331c:	b1e8      	cbz	r0, 2335a <k_work_cancel_delayable+0x72>
	__asm__ volatile(
   2331e:	f386 8811 	msr	BASEPRI, r6
   23322:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   23326:	4620      	mov	r0, r4
   23328:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   2332a:	4d12      	ldr	r5, [pc, #72]	; (23374 <k_work_cancel_delayable+0x8c>)
   2332c:	f240 32ed 	movw	r2, #1005	; 0x3ed
   23330:	4629      	mov	r1, r5
   23332:	4811      	ldr	r0, [pc, #68]	; (23378 <k_work_cancel_delayable+0x90>)
   23334:	f005 f805 	bl	28342 <printk>
   23338:	f240 31ed 	movw	r1, #1005	; 0x3ed
   2333c:	4628      	mov	r0, r5
   2333e:	f005 fb99 	bl	28a74 <assert_post_action>
   23342:	e7d4      	b.n	232ee <k_work_cancel_delayable+0x6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23344:	4d0d      	ldr	r5, [pc, #52]	; (2337c <k_work_cancel_delayable+0x94>)
   23346:	2281      	movs	r2, #129	; 0x81
   23348:	4629      	mov	r1, r5
   2334a:	480b      	ldr	r0, [pc, #44]	; (23378 <k_work_cancel_delayable+0x90>)
   2334c:	f004 fff9 	bl	28342 <printk>
   23350:	2181      	movs	r1, #129	; 0x81
   23352:	4628      	mov	r0, r5
   23354:	f005 fb8e 	bl	28a74 <assert_post_action>
   23358:	e7d5      	b.n	23306 <k_work_cancel_delayable+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2335a:	4d08      	ldr	r5, [pc, #32]	; (2337c <k_work_cancel_delayable+0x94>)
   2335c:	22ac      	movs	r2, #172	; 0xac
   2335e:	4629      	mov	r1, r5
   23360:	4805      	ldr	r0, [pc, #20]	; (23378 <k_work_cancel_delayable+0x90>)
   23362:	f004 ffee 	bl	28342 <printk>
   23366:	21ac      	movs	r1, #172	; 0xac
   23368:	4628      	mov	r0, r5
   2336a:	f005 fb83 	bl	28a74 <assert_post_action>
   2336e:	e7d6      	b.n	2331e <k_work_cancel_delayable+0x36>
   23370:	20003644 	.word	0x20003644
   23374:	000332f0 	.word	0x000332f0
   23378:	0002f968 	.word	0x0002f968
   2337c:	0002f9a4 	.word	0x0002f9a4

00023380 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   23380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23384:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   23386:	4605      	mov	r5, r0
   23388:	2800      	cmp	r0, #0
   2338a:	d030      	beq.n	233ee <k_work_cancel_delayable_sync+0x6e>
	__ASSERT_NO_MSG(sync != NULL);
   2338c:	2c00      	cmp	r4, #0
   2338e:	d03b      	beq.n	23408 <k_work_cancel_delayable_sync+0x88>
	__ASSERT_NO_MSG(!k_is_in_isr());
   23390:	f00b fc2a 	bl	2ebe8 <k_is_in_isr>
   23394:	2800      	cmp	r0, #0
   23396:	d144      	bne.n	23422 <k_work_cancel_delayable_sync+0xa2>
	__asm__ volatile(
   23398:	f04f 0340 	mov.w	r3, #64	; 0x40
   2339c:	f3ef 8711 	mrs	r7, BASEPRI
   233a0:	f383 8812 	msr	BASEPRI_MAX, r3
   233a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233a8:	4839      	ldr	r0, [pc, #228]	; (23490 <k_work_cancel_delayable_sync+0x110>)
   233aa:	f7fe fd75 	bl	21e98 <z_spin_lock_valid>
   233ae:	2800      	cmp	r0, #0
   233b0:	d044      	beq.n	2343c <k_work_cancel_delayable_sync+0xbc>
	z_spin_lock_set_owner(l);
   233b2:	4837      	ldr	r0, [pc, #220]	; (23490 <k_work_cancel_delayable_sync+0x110>)
   233b4:	f7fe fd90 	bl	21ed8 <z_spin_lock_set_owner>
   233b8:	f3bf 8f5b 	dmb	ish
   233bc:	68eb      	ldr	r3, [r5, #12]
   233be:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   233c2:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   233c6:	2b00      	cmp	r3, #0
   233c8:	bf14      	ite	ne
   233ca:	2601      	movne	r6, #1
   233cc:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   233ce:	d140      	bne.n	23452 <k_work_cancel_delayable_sync+0xd2>
	bool need_wait = false;
   233d0:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233d2:	482f      	ldr	r0, [pc, #188]	; (23490 <k_work_cancel_delayable_sync+0x110>)
   233d4:	f7fe fd70 	bl	21eb8 <z_spin_unlock_valid>
   233d8:	2800      	cmp	r0, #0
   233da:	d043      	beq.n	23464 <k_work_cancel_delayable_sync+0xe4>
	__asm__ volatile(
   233dc:	f387 8811 	msr	BASEPRI, r7
   233e0:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   233e4:	2d00      	cmp	r5, #0
   233e6:	d149      	bne.n	2347c <k_work_cancel_delayable_sync+0xfc>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   233e8:	4630      	mov	r0, r6
   233ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   233ee:	4e29      	ldr	r6, [pc, #164]	; (23494 <k_work_cancel_delayable_sync+0x114>)
   233f0:	f240 32fe 	movw	r2, #1022	; 0x3fe
   233f4:	4631      	mov	r1, r6
   233f6:	4828      	ldr	r0, [pc, #160]	; (23498 <k_work_cancel_delayable_sync+0x118>)
   233f8:	f004 ffa3 	bl	28342 <printk>
   233fc:	f240 31fe 	movw	r1, #1022	; 0x3fe
   23400:	4630      	mov	r0, r6
   23402:	f005 fb37 	bl	28a74 <assert_post_action>
   23406:	e7c1      	b.n	2338c <k_work_cancel_delayable_sync+0xc>
	__ASSERT_NO_MSG(sync != NULL);
   23408:	4e22      	ldr	r6, [pc, #136]	; (23494 <k_work_cancel_delayable_sync+0x114>)
   2340a:	f240 32ff 	movw	r2, #1023	; 0x3ff
   2340e:	4631      	mov	r1, r6
   23410:	4821      	ldr	r0, [pc, #132]	; (23498 <k_work_cancel_delayable_sync+0x118>)
   23412:	f004 ff96 	bl	28342 <printk>
   23416:	f240 31ff 	movw	r1, #1023	; 0x3ff
   2341a:	4630      	mov	r0, r6
   2341c:	f005 fb2a 	bl	28a74 <assert_post_action>
   23420:	e7b6      	b.n	23390 <k_work_cancel_delayable_sync+0x10>
	__ASSERT_NO_MSG(!k_is_in_isr());
   23422:	4e1c      	ldr	r6, [pc, #112]	; (23494 <k_work_cancel_delayable_sync+0x114>)
   23424:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23428:	4631      	mov	r1, r6
   2342a:	481b      	ldr	r0, [pc, #108]	; (23498 <k_work_cancel_delayable_sync+0x118>)
   2342c:	f004 ff89 	bl	28342 <printk>
   23430:	f44f 6180 	mov.w	r1, #1024	; 0x400
   23434:	4630      	mov	r0, r6
   23436:	f005 fb1d 	bl	28a74 <assert_post_action>
   2343a:	e7ad      	b.n	23398 <k_work_cancel_delayable_sync+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2343c:	4e17      	ldr	r6, [pc, #92]	; (2349c <k_work_cancel_delayable_sync+0x11c>)
   2343e:	2281      	movs	r2, #129	; 0x81
   23440:	4631      	mov	r1, r6
   23442:	4815      	ldr	r0, [pc, #84]	; (23498 <k_work_cancel_delayable_sync+0x118>)
   23444:	f004 ff7d 	bl	28342 <printk>
   23448:	2181      	movs	r1, #129	; 0x81
   2344a:	4630      	mov	r0, r6
   2344c:	f005 fb12 	bl	28a74 <assert_post_action>
   23450:	e7af      	b.n	233b2 <k_work_cancel_delayable_sync+0x32>
		(void)cancel_delayable_async_locked(dwork);
   23452:	4628      	mov	r0, r5
   23454:	f00b fc92 	bl	2ed7c <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   23458:	4621      	mov	r1, r4
   2345a:	4628      	mov	r0, r5
   2345c:	f7ff fc30 	bl	22cc0 <cancel_sync_locked>
   23460:	4605      	mov	r5, r0
   23462:	e7b6      	b.n	233d2 <k_work_cancel_delayable_sync+0x52>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23464:	f8df 8034 	ldr.w	r8, [pc, #52]	; 2349c <k_work_cancel_delayable_sync+0x11c>
   23468:	22ac      	movs	r2, #172	; 0xac
   2346a:	4641      	mov	r1, r8
   2346c:	480a      	ldr	r0, [pc, #40]	; (23498 <k_work_cancel_delayable_sync+0x118>)
   2346e:	f004 ff68 	bl	28342 <printk>
   23472:	21ac      	movs	r1, #172	; 0xac
   23474:	4640      	mov	r0, r8
   23476:	f005 fafd 	bl	28a74 <assert_post_action>
   2347a:	e7af      	b.n	233dc <k_work_cancel_delayable_sync+0x5c>
		k_sem_take(&canceller->sem, K_FOREVER);
   2347c:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
   23480:	f04f 32ff 	mov.w	r2, #4294967295
   23484:	f04f 33ff 	mov.w	r3, #4294967295
   23488:	f7ff fa46 	bl	22918 <z_impl_k_sem_take>
   2348c:	e7ac      	b.n	233e8 <k_work_cancel_delayable_sync+0x68>
   2348e:	bf00      	nop
   23490:	20003644 	.word	0x20003644
   23494:	000332f0 	.word	0x000332f0
   23498:	0002f968 	.word	0x0002f968
   2349c:	0002f9a4 	.word	0x0002f9a4

000234a0 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
   234a0:	b538      	push	{r3, r4, r5, lr}
   234a2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   234a4:	6883      	ldr	r3, [r0, #8]
   234a6:	b10b      	cbz	r3, 234ac <pended_on_thread+0xc>

	return thread->base.pended_on;
}
   234a8:	68a0      	ldr	r0, [r4, #8]
   234aa:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
   234ac:	4d06      	ldr	r5, [pc, #24]	; (234c8 <pended_on_thread+0x28>)
   234ae:	f240 2253 	movw	r2, #595	; 0x253
   234b2:	4629      	mov	r1, r5
   234b4:	4805      	ldr	r0, [pc, #20]	; (234cc <pended_on_thread+0x2c>)
   234b6:	f004 ff44 	bl	28342 <printk>
   234ba:	f240 2153 	movw	r1, #595	; 0x253
   234be:	4628      	mov	r0, r5
   234c0:	f005 fad8 	bl	28a74 <assert_post_action>
   234c4:	e7f0      	b.n	234a8 <pended_on_thread+0x8>
   234c6:	bf00      	nop
   234c8:	00033314 	.word	0x00033314
   234cc:	0002f968 	.word	0x0002f968

000234d0 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   234d0:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   234d2:	f1b3 3fff 	cmp.w	r3, #4294967295
   234d6:	bf08      	it	eq
   234d8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   234dc:	d100      	bne.n	234e0 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   234de:	bd38      	pop	{r3, r4, r5, pc}
   234e0:	4902      	ldr	r1, [pc, #8]	; (234ec <add_thread_timeout+0x1c>)
   234e2:	3018      	adds	r0, #24
   234e4:	f001 f9a8 	bl	24838 <z_add_timeout>
   234e8:	e7f9      	b.n	234de <add_thread_timeout+0xe>
   234ea:	bf00      	nop
   234ec:	00023bd9 	.word	0x00023bd9

000234f0 <z_reset_time_slice>:
{
   234f0:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   234f2:	4b08      	ldr	r3, [pc, #32]	; (23514 <z_reset_time_slice+0x24>)
   234f4:	681b      	ldr	r3, [r3, #0]
   234f6:	b903      	cbnz	r3, 234fa <z_reset_time_slice+0xa>
}
   234f8:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   234fa:	f7fc f955 	bl	1f7a8 <sys_clock_elapsed>
   234fe:	4603      	mov	r3, r0
   23500:	4a04      	ldr	r2, [pc, #16]	; (23514 <z_reset_time_slice+0x24>)
   23502:	6810      	ldr	r0, [r2, #0]
   23504:	4403      	add	r3, r0
   23506:	4a04      	ldr	r2, [pc, #16]	; (23518 <z_reset_time_slice+0x28>)
   23508:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2350a:	2100      	movs	r1, #0
   2350c:	f001 fb00 	bl	24b10 <z_set_timeout_expiry>
}
   23510:	e7f2      	b.n	234f8 <z_reset_time_slice+0x8>
   23512:	bf00      	nop
   23514:	2000365c 	.word	0x2000365c
   23518:	2000360c 	.word	0x2000360c

0002351c <k_sched_time_slice_set>:
{
   2351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23520:	4606      	mov	r6, r0
   23522:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   23524:	2400      	movs	r4, #0
	__asm__ volatile(
   23526:	f04f 0340 	mov.w	r3, #64	; 0x40
   2352a:	f3ef 8711 	mrs	r7, BASEPRI
   2352e:	f383 8812 	msr	BASEPRI_MAX, r3
   23532:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23536:	4824      	ldr	r0, [pc, #144]	; (235c8 <k_sched_time_slice_set+0xac>)
   23538:	f7fe fcae 	bl	21e98 <z_spin_lock_valid>
   2353c:	b118      	cbz	r0, 23546 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
   2353e:	4822      	ldr	r0, [pc, #136]	; (235c8 <k_sched_time_slice_set+0xac>)
   23540:	f7fe fcca 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   23544:	e018      	b.n	23578 <k_sched_time_slice_set+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23546:	4d21      	ldr	r5, [pc, #132]	; (235cc <k_sched_time_slice_set+0xb0>)
   23548:	2281      	movs	r2, #129	; 0x81
   2354a:	4629      	mov	r1, r5
   2354c:	4820      	ldr	r0, [pc, #128]	; (235d0 <k_sched_time_slice_set+0xb4>)
   2354e:	f004 fef8 	bl	28342 <printk>
   23552:	2181      	movs	r1, #129	; 0x81
   23554:	4628      	mov	r0, r5
   23556:	f005 fa8d 	bl	28a74 <assert_post_action>
   2355a:	e7f0      	b.n	2353e <k_sched_time_slice_set+0x22>
		slice_max_prio = prio;
   2355c:	4b1d      	ldr	r3, [pc, #116]	; (235d4 <k_sched_time_slice_set+0xb8>)
   2355e:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   23562:	f7ff ffc5 	bl	234f0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23566:	4818      	ldr	r0, [pc, #96]	; (235c8 <k_sched_time_slice_set+0xac>)
   23568:	f7fe fca6 	bl	21eb8 <z_spin_unlock_valid>
   2356c:	b1f8      	cbz	r0, 235ae <k_sched_time_slice_set+0x92>
	__asm__ volatile(
   2356e:	f387 8811 	msr	BASEPRI, r7
   23572:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23576:	2401      	movs	r4, #1
   23578:	bb24      	cbnz	r4, 235c4 <k_sched_time_slice_set+0xa8>
		_current_cpu->slice_ticks = 0;
   2357a:	2300      	movs	r3, #0
   2357c:	4a16      	ldr	r2, [pc, #88]	; (235d8 <k_sched_time_slice_set+0xbc>)
   2357e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   23580:	0c75      	lsrs	r5, r6, #17
   23582:	03f4      	lsls	r4, r6, #15
   23584:	f240 30e7 	movw	r0, #999	; 0x3e7
   23588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2358c:	2300      	movs	r3, #0
   2358e:	1820      	adds	r0, r4, r0
   23590:	f04f 0100 	mov.w	r1, #0
   23594:	eb45 0101 	adc.w	r1, r5, r1
   23598:	f7dc fdb2 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2359c:	4b0f      	ldr	r3, [pc, #60]	; (235dc <k_sched_time_slice_set+0xc0>)
   2359e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   235a0:	2e00      	cmp	r6, #0
   235a2:	dddb      	ble.n	2355c <k_sched_time_slice_set+0x40>
			slice_time = MAX(2, slice_time);
   235a4:	2802      	cmp	r0, #2
   235a6:	bfb8      	it	lt
   235a8:	2002      	movlt	r0, #2
   235aa:	6018      	str	r0, [r3, #0]
   235ac:	e7d6      	b.n	2355c <k_sched_time_slice_set+0x40>
   235ae:	4c07      	ldr	r4, [pc, #28]	; (235cc <k_sched_time_slice_set+0xb0>)
   235b0:	22ac      	movs	r2, #172	; 0xac
   235b2:	4621      	mov	r1, r4
   235b4:	4806      	ldr	r0, [pc, #24]	; (235d0 <k_sched_time_slice_set+0xb4>)
   235b6:	f004 fec4 	bl	28342 <printk>
   235ba:	21ac      	movs	r1, #172	; 0xac
   235bc:	4620      	mov	r0, r4
   235be:	f005 fa59 	bl	28a74 <assert_post_action>
   235c2:	e7d4      	b.n	2356e <k_sched_time_slice_set+0x52>
}
   235c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   235c8:	20003654 	.word	0x20003654
   235cc:	0002f9a4 	.word	0x0002f9a4
   235d0:	0002f968 	.word	0x0002f968
   235d4:	20003658 	.word	0x20003658
   235d8:	2000360c 	.word	0x2000360c
   235dc:	2000365c 	.word	0x2000365c

000235e0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   235e0:	b538      	push	{r3, r4, r5, lr}
	if (resched(key.key) && need_swap()) {
   235e2:	460c      	mov	r4, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   235e4:	b921      	cbnz	r1, 235f0 <z_reschedule+0x10>
   235e6:	f3ef 8305 	mrs	r3, IPSR
   235ea:	b913      	cbnz	r3, 235f2 <z_reschedule+0x12>
   235ec:	2101      	movs	r1, #1
   235ee:	e000      	b.n	235f2 <z_reschedule+0x12>
   235f0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   235f2:	f011 0f01 	tst.w	r1, #1
   235f6:	d016      	beq.n	23626 <z_reschedule+0x46>
	new_thread = _kernel.ready_q.cache;
   235f8:	4b14      	ldr	r3, [pc, #80]	; (2364c <z_reschedule+0x6c>)
   235fa:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   235fc:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   235fe:	429a      	cmp	r2, r3
   23600:	d011      	beq.n	23626 <z_reschedule+0x46>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23602:	f7fe fc59 	bl	21eb8 <z_spin_unlock_valid>
   23606:	b118      	cbz	r0, 23610 <z_reschedule+0x30>
	ret = arch_swap(key);
   23608:	4620      	mov	r0, r4
   2360a:	f7ef fe99 	bl	13340 <arch_swap>
		z_swap(lock, key);
   2360e:	e011      	b.n	23634 <z_reschedule+0x54>
   23610:	4d0f      	ldr	r5, [pc, #60]	; (23650 <z_reschedule+0x70>)
   23612:	22c3      	movs	r2, #195	; 0xc3
   23614:	4629      	mov	r1, r5
   23616:	480f      	ldr	r0, [pc, #60]	; (23654 <z_reschedule+0x74>)
   23618:	f004 fe93 	bl	28342 <printk>
   2361c:	21c3      	movs	r1, #195	; 0xc3
   2361e:	4628      	mov	r0, r5
   23620:	f005 fa28 	bl	28a74 <assert_post_action>
   23624:	e7f0      	b.n	23608 <z_reschedule+0x28>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23626:	f7fe fc47 	bl	21eb8 <z_spin_unlock_valid>
   2362a:	b120      	cbz	r0, 23636 <z_reschedule+0x56>
   2362c:	f384 8811 	msr	BASEPRI, r4
   23630:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   23634:	bd38      	pop	{r3, r4, r5, pc}
   23636:	4d06      	ldr	r5, [pc, #24]	; (23650 <z_reschedule+0x70>)
   23638:	22ac      	movs	r2, #172	; 0xac
   2363a:	4629      	mov	r1, r5
   2363c:	4805      	ldr	r0, [pc, #20]	; (23654 <z_reschedule+0x74>)
   2363e:	f004 fe80 	bl	28342 <printk>
   23642:	21ac      	movs	r1, #172	; 0xac
   23644:	4628      	mov	r0, r5
   23646:	f005 fa15 	bl	28a74 <assert_post_action>
   2364a:	e7ef      	b.n	2362c <z_reschedule+0x4c>
   2364c:	2000360c 	.word	0x2000360c
   23650:	0002f9a4 	.word	0x0002f9a4
   23654:	0002f968 	.word	0x0002f968

00023658 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   23658:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   2365a:	2400      	movs	r4, #0
	__asm__ volatile(
   2365c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23660:	f3ef 8511 	mrs	r5, BASEPRI
   23664:	f383 8812 	msr	BASEPRI_MAX, r3
   23668:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2366c:	4826      	ldr	r0, [pc, #152]	; (23708 <k_sched_lock+0xb0>)
   2366e:	f7fe fc13 	bl	21e98 <z_spin_lock_valid>
   23672:	b118      	cbz	r0, 2367c <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
   23674:	4824      	ldr	r0, [pc, #144]	; (23708 <k_sched_lock+0xb0>)
   23676:	f7fe fc2f 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   2367a:	e02f      	b.n	236dc <k_sched_lock+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2367c:	4e23      	ldr	r6, [pc, #140]	; (2370c <k_sched_lock+0xb4>)
   2367e:	2281      	movs	r2, #129	; 0x81
   23680:	4631      	mov	r1, r6
   23682:	4823      	ldr	r0, [pc, #140]	; (23710 <k_sched_lock+0xb8>)
   23684:	f004 fe5d 	bl	28342 <printk>
   23688:	2181      	movs	r1, #129	; 0x81
   2368a:	4630      	mov	r0, r6
   2368c:	f005 f9f2 	bl	28a74 <assert_post_action>
   23690:	e7f0      	b.n	23674 <k_sched_lock+0x1c>
	__ASSERT(!arch_is_in_isr(), "");
   23692:	4c20      	ldr	r4, [pc, #128]	; (23714 <k_sched_lock+0xbc>)
   23694:	22fd      	movs	r2, #253	; 0xfd
   23696:	4621      	mov	r1, r4
   23698:	481d      	ldr	r0, [pc, #116]	; (23710 <k_sched_lock+0xb8>)
   2369a:	f004 fe52 	bl	28342 <printk>
   2369e:	21fd      	movs	r1, #253	; 0xfd
   236a0:	4620      	mov	r0, r4
   236a2:	f005 f9e7 	bl	28a74 <assert_post_action>
   236a6:	e01e      	b.n	236e6 <k_sched_lock+0x8e>
	__ASSERT(_current->base.sched_locked != 1U, "");
   236a8:	4c1a      	ldr	r4, [pc, #104]	; (23714 <k_sched_lock+0xbc>)
   236aa:	22fe      	movs	r2, #254	; 0xfe
   236ac:	4621      	mov	r1, r4
   236ae:	4818      	ldr	r0, [pc, #96]	; (23710 <k_sched_lock+0xb8>)
   236b0:	f004 fe47 	bl	28342 <printk>
   236b4:	21fe      	movs	r1, #254	; 0xfe
   236b6:	4620      	mov	r0, r4
   236b8:	f005 f9dc 	bl	28a74 <assert_post_action>
   236bc:	e018      	b.n	236f0 <k_sched_lock+0x98>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   236be:	4c13      	ldr	r4, [pc, #76]	; (2370c <k_sched_lock+0xb4>)
   236c0:	22ac      	movs	r2, #172	; 0xac
   236c2:	4621      	mov	r1, r4
   236c4:	4812      	ldr	r0, [pc, #72]	; (23710 <k_sched_lock+0xb8>)
   236c6:	f004 fe3c 	bl	28342 <printk>
   236ca:	21ac      	movs	r1, #172	; 0xac
   236cc:	4620      	mov	r0, r4
   236ce:	f005 f9d1 	bl	28a74 <assert_post_action>
	__asm__ volatile(
   236d2:	f385 8811 	msr	BASEPRI, r5
   236d6:	f3bf 8f6f 	isb	sy
   236da:	2401      	movs	r4, #1
   236dc:	b99c      	cbnz	r4, 23706 <k_sched_lock+0xae>
   236de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   236e2:	2b00      	cmp	r3, #0
   236e4:	d1d5      	bne.n	23692 <k_sched_lock+0x3a>
	__ASSERT(_current->base.sched_locked != 1U, "");
   236e6:	4b0c      	ldr	r3, [pc, #48]	; (23718 <k_sched_lock+0xc0>)
   236e8:	689b      	ldr	r3, [r3, #8]
   236ea:	7bdb      	ldrb	r3, [r3, #15]
   236ec:	2b01      	cmp	r3, #1
   236ee:	d0db      	beq.n	236a8 <k_sched_lock+0x50>
	--_current->base.sched_locked;
   236f0:	4b09      	ldr	r3, [pc, #36]	; (23718 <k_sched_lock+0xc0>)
   236f2:	689a      	ldr	r2, [r3, #8]
   236f4:	7bd3      	ldrb	r3, [r2, #15]
   236f6:	3b01      	subs	r3, #1
   236f8:	73d3      	strb	r3, [r2, #15]
   236fa:	4803      	ldr	r0, [pc, #12]	; (23708 <k_sched_lock+0xb0>)
   236fc:	f7fe fbdc 	bl	21eb8 <z_spin_unlock_valid>
   23700:	2800      	cmp	r0, #0
   23702:	d1e6      	bne.n	236d2 <k_sched_lock+0x7a>
   23704:	e7db      	b.n	236be <k_sched_lock+0x66>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   23706:	bd70      	pop	{r4, r5, r6, pc}
   23708:	20003654 	.word	0x20003654
   2370c:	0002f9a4 	.word	0x0002f9a4
   23710:	0002f968 	.word	0x0002f968
   23714:	00033298 	.word	0x00033298
   23718:	2000360c 	.word	0x2000360c

0002371c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   2371c:	b538      	push	{r3, r4, r5, lr}
   2371e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23720:	4b0b      	ldr	r3, [pc, #44]	; (23750 <z_priq_dumb_remove+0x34>)
   23722:	4299      	cmp	r1, r3
   23724:	d007      	beq.n	23736 <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   23726:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   23728:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
   2372a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2372c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2372e:	2300      	movs	r3, #0
   23730:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   23732:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   23734:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23736:	4d07      	ldr	r5, [pc, #28]	; (23754 <z_priq_dumb_remove+0x38>)
   23738:	f240 32b5 	movw	r2, #949	; 0x3b5
   2373c:	4629      	mov	r1, r5
   2373e:	4806      	ldr	r0, [pc, #24]	; (23758 <z_priq_dumb_remove+0x3c>)
   23740:	f004 fdff 	bl	28342 <printk>
   23744:	f240 31b5 	movw	r1, #949	; 0x3b5
   23748:	4628      	mov	r0, r5
   2374a:	f005 f993 	bl	28a74 <assert_post_action>
   2374e:	e7ea      	b.n	23726 <z_priq_dumb_remove+0xa>
   23750:	20001e50 	.word	0x20001e50
   23754:	00033314 	.word	0x00033314
   23758:	0002f968 	.word	0x0002f968

0002375c <z_unpend_thread>:
{
   2375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2375e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   23760:	2500      	movs	r5, #0
	__asm__ volatile(
   23762:	f04f 0340 	mov.w	r3, #64	; 0x40
   23766:	f3ef 8611 	mrs	r6, BASEPRI
   2376a:	f383 8812 	msr	BASEPRI_MAX, r3
   2376e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23772:	481d      	ldr	r0, [pc, #116]	; (237e8 <z_unpend_thread+0x8c>)
   23774:	f7fe fb90 	bl	21e98 <z_spin_lock_valid>
   23778:	b118      	cbz	r0, 23782 <z_unpend_thread+0x26>
	z_spin_lock_set_owner(l);
   2377a:	481b      	ldr	r0, [pc, #108]	; (237e8 <z_unpend_thread+0x8c>)
   2377c:	f7fe fbac 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   23780:	e019      	b.n	237b6 <z_unpend_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23782:	4f1a      	ldr	r7, [pc, #104]	; (237ec <z_unpend_thread+0x90>)
   23784:	2281      	movs	r2, #129	; 0x81
   23786:	4639      	mov	r1, r7
   23788:	4819      	ldr	r0, [pc, #100]	; (237f0 <z_unpend_thread+0x94>)
   2378a:	f004 fdda 	bl	28342 <printk>
   2378e:	2181      	movs	r1, #129	; 0x81
   23790:	4638      	mov	r0, r7
   23792:	f005 f96f 	bl	28a74 <assert_post_action>
   23796:	e7f0      	b.n	2377a <z_unpend_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23798:	4d14      	ldr	r5, [pc, #80]	; (237ec <z_unpend_thread+0x90>)
   2379a:	22ac      	movs	r2, #172	; 0xac
   2379c:	4629      	mov	r1, r5
   2379e:	4814      	ldr	r0, [pc, #80]	; (237f0 <z_unpend_thread+0x94>)
   237a0:	f004 fdcf 	bl	28342 <printk>
   237a4:	21ac      	movs	r1, #172	; 0xac
   237a6:	4628      	mov	r0, r5
   237a8:	f005 f964 	bl	28a74 <assert_post_action>
	__asm__ volatile(
   237ac:	f386 8811 	msr	BASEPRI, r6
   237b0:	f3bf 8f6f 	isb	sy
   237b4:	2501      	movs	r5, #1
   237b6:	b98d      	cbnz	r5, 237dc <z_unpend_thread+0x80>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   237b8:	4620      	mov	r0, r4
   237ba:	f7ff fe71 	bl	234a0 <pended_on_thread>
   237be:	4621      	mov	r1, r4
   237c0:	f7ff ffac 	bl	2371c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   237c4:	7b63      	ldrb	r3, [r4, #13]
   237c6:	f023 0302 	bic.w	r3, r3, #2
   237ca:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   237cc:	2300      	movs	r3, #0
   237ce:	60a3      	str	r3, [r4, #8]
   237d0:	4805      	ldr	r0, [pc, #20]	; (237e8 <z_unpend_thread+0x8c>)
   237d2:	f7fe fb71 	bl	21eb8 <z_spin_unlock_valid>
   237d6:	2800      	cmp	r0, #0
   237d8:	d1e8      	bne.n	237ac <z_unpend_thread+0x50>
   237da:	e7dd      	b.n	23798 <z_unpend_thread+0x3c>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   237dc:	f104 0018 	add.w	r0, r4, #24
   237e0:	f001 f90e 	bl	24a00 <z_abort_timeout>
}
   237e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   237e6:	bf00      	nop
   237e8:	20003654 	.word	0x20003654
   237ec:	0002f9a4 	.word	0x0002f9a4
   237f0:	0002f968 	.word	0x0002f968

000237f4 <update_cache>:
{
   237f4:	b538      	push	{r3, r4, r5, lr}
   237f6:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   237f8:	4816      	ldr	r0, [pc, #88]	; (23854 <update_cache+0x60>)
   237fa:	f00b faf1 	bl	2ede0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   237fe:	4605      	mov	r5, r0
   23800:	b188      	cbz	r0, 23826 <update_cache+0x32>
	if (preempt_ok != 0) {
   23802:	b9f4      	cbnz	r4, 23842 <update_cache+0x4e>
	__ASSERT(_current != NULL, "");
   23804:	4b14      	ldr	r3, [pc, #80]	; (23858 <update_cache+0x64>)
   23806:	689b      	ldr	r3, [r3, #8]
   23808:	b183      	cbz	r3, 2382c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   2380a:	4b13      	ldr	r3, [pc, #76]	; (23858 <update_cache+0x64>)
   2380c:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   2380e:	7b5a      	ldrb	r2, [r3, #13]
   23810:	f012 0f1f 	tst.w	r2, #31
   23814:	d115      	bne.n	23842 <update_cache+0x4e>
	return node->next != NULL;
   23816:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23818:	b99a      	cbnz	r2, 23842 <update_cache+0x4e>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2381a:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   2381c:	2a7f      	cmp	r2, #127	; 0x7f
   2381e:	d910      	bls.n	23842 <update_cache+0x4e>
		_kernel.ready_q.cache = _current;
   23820:	4a0d      	ldr	r2, [pc, #52]	; (23858 <update_cache+0x64>)
   23822:	61d3      	str	r3, [r2, #28]
   23824:	e015      	b.n	23852 <update_cache+0x5e>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   23826:	4b0c      	ldr	r3, [pc, #48]	; (23858 <update_cache+0x64>)
   23828:	68dd      	ldr	r5, [r3, #12]
   2382a:	e7ea      	b.n	23802 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
   2382c:	4c0b      	ldr	r4, [pc, #44]	; (2385c <update_cache+0x68>)
   2382e:	2281      	movs	r2, #129	; 0x81
   23830:	4621      	mov	r1, r4
   23832:	480b      	ldr	r0, [pc, #44]	; (23860 <update_cache+0x6c>)
   23834:	f004 fd85 	bl	28342 <printk>
   23838:	2181      	movs	r1, #129	; 0x81
   2383a:	4620      	mov	r0, r4
   2383c:	f005 f91a 	bl	28a74 <assert_post_action>
   23840:	e7e3      	b.n	2380a <update_cache+0x16>
		if (thread != _current) {
   23842:	4b05      	ldr	r3, [pc, #20]	; (23858 <update_cache+0x64>)
   23844:	689b      	ldr	r3, [r3, #8]
   23846:	42ab      	cmp	r3, r5
   23848:	d001      	beq.n	2384e <update_cache+0x5a>
			z_reset_time_slice();
   2384a:	f7ff fe51 	bl	234f0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2384e:	4b02      	ldr	r3, [pc, #8]	; (23858 <update_cache+0x64>)
   23850:	61dd      	str	r5, [r3, #28]
}
   23852:	bd38      	pop	{r3, r4, r5, pc}
   23854:	2000362c 	.word	0x2000362c
   23858:	2000360c 	.word	0x2000360c
   2385c:	00033314 	.word	0x00033314
   23860:	0002f968 	.word	0x0002f968

00023864 <move_thread_to_end_of_prio_q>:
{
   23864:	b538      	push	{r3, r4, r5, lr}
   23866:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   23868:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2386a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2386e:	2b00      	cmp	r3, #0
   23870:	db2b      	blt.n	238ca <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
   23872:	7b6b      	ldrb	r3, [r5, #13]
   23874:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23878:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2387a:	4b21      	ldr	r3, [pc, #132]	; (23900 <move_thread_to_end_of_prio_q+0x9c>)
   2387c:	429d      	cmp	r5, r3
   2387e:	d02c      	beq.n	238da <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
   23880:	4b20      	ldr	r3, [pc, #128]	; (23904 <move_thread_to_end_of_prio_q+0xa0>)
   23882:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23886:	429c      	cmp	r4, r3
   23888:	d038      	beq.n	238fc <move_thread_to_end_of_prio_q+0x98>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2388a:	b16c      	cbz	r4, 238a8 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2388c:	4621      	mov	r1, r4
   2388e:	4628      	mov	r0, r5
   23890:	f00b fa87 	bl	2eda2 <z_sched_prio_cmp>
   23894:	2800      	cmp	r0, #0
   23896:	dc2b      	bgt.n	238f0 <move_thread_to_end_of_prio_q+0x8c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23898:	b134      	cbz	r4, 238a8 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
   2389a:	4b1a      	ldr	r3, [pc, #104]	; (23904 <move_thread_to_end_of_prio_q+0xa0>)
   2389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2389e:	429c      	cmp	r4, r3
   238a0:	d002      	beq.n	238a8 <move_thread_to_end_of_prio_q+0x44>
   238a2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   238a4:	2c00      	cmp	r4, #0
   238a6:	d1f0      	bne.n	2388a <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
   238a8:	4b16      	ldr	r3, [pc, #88]	; (23904 <move_thread_to_end_of_prio_q+0xa0>)
   238aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   238ac:	f103 0120 	add.w	r1, r3, #32
   238b0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   238b2:	606a      	str	r2, [r5, #4]
	tail->next = node;
   238b4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   238b6:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   238b8:	4b12      	ldr	r3, [pc, #72]	; (23904 <move_thread_to_end_of_prio_q+0xa0>)
   238ba:	6898      	ldr	r0, [r3, #8]
   238bc:	42a8      	cmp	r0, r5
   238be:	bf14      	ite	ne
   238c0:	2000      	movne	r0, #0
   238c2:	2001      	moveq	r0, #1
   238c4:	f7ff ff96 	bl	237f4 <update_cache>
}
   238c8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   238ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   238ce:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   238d0:	4601      	mov	r1, r0
   238d2:	480d      	ldr	r0, [pc, #52]	; (23908 <move_thread_to_end_of_prio_q+0xa4>)
   238d4:	f7ff ff22 	bl	2371c <z_priq_dumb_remove>
}
   238d8:	e7cb      	b.n	23872 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   238da:	4c0c      	ldr	r4, [pc, #48]	; (2390c <move_thread_to_end_of_prio_q+0xa8>)
   238dc:	22b1      	movs	r2, #177	; 0xb1
   238de:	4621      	mov	r1, r4
   238e0:	480b      	ldr	r0, [pc, #44]	; (23910 <move_thread_to_end_of_prio_q+0xac>)
   238e2:	f004 fd2e 	bl	28342 <printk>
   238e6:	21b1      	movs	r1, #177	; 0xb1
   238e8:	4620      	mov	r0, r4
   238ea:	f005 f8c3 	bl	28a74 <assert_post_action>
   238ee:	e7c7      	b.n	23880 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
   238f0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   238f2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   238f4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   238f6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   238f8:	6065      	str	r5, [r4, #4]
}
   238fa:	e7dd      	b.n	238b8 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   238fc:	2400      	movs	r4, #0
   238fe:	e7c4      	b.n	2388a <move_thread_to_end_of_prio_q+0x26>
   23900:	20001e50 	.word	0x20001e50
   23904:	2000360c 	.word	0x2000360c
   23908:	2000362c 	.word	0x2000362c
   2390c:	00033314 	.word	0x00033314
   23910:	0002f968 	.word	0x0002f968

00023914 <z_time_slice>:
{
   23914:	b570      	push	{r4, r5, r6, lr}
   23916:	4604      	mov	r4, r0
	__asm__ volatile(
   23918:	f04f 0340 	mov.w	r3, #64	; 0x40
   2391c:	f3ef 8511 	mrs	r5, BASEPRI
   23920:	f383 8812 	msr	BASEPRI_MAX, r3
   23924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23928:	4834      	ldr	r0, [pc, #208]	; (239fc <z_time_slice+0xe8>)
   2392a:	f7fe fab5 	bl	21e98 <z_spin_lock_valid>
   2392e:	b338      	cbz	r0, 23980 <z_time_slice+0x6c>
	z_spin_lock_set_owner(l);
   23930:	4832      	ldr	r0, [pc, #200]	; (239fc <z_time_slice+0xe8>)
   23932:	f7fe fad1 	bl	21ed8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   23936:	4b32      	ldr	r3, [pc, #200]	; (23a00 <z_time_slice+0xec>)
   23938:	689b      	ldr	r3, [r3, #8]
   2393a:	4a32      	ldr	r2, [pc, #200]	; (23a04 <z_time_slice+0xf0>)
   2393c:	6812      	ldr	r2, [r2, #0]
   2393e:	4293      	cmp	r3, r2
   23940:	d029      	beq.n	23996 <z_time_slice+0x82>
	pending_current = NULL;
   23942:	4a30      	ldr	r2, [pc, #192]	; (23a04 <z_time_slice+0xf0>)
   23944:	2100      	movs	r1, #0
   23946:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   23948:	4a2f      	ldr	r2, [pc, #188]	; (23a08 <z_time_slice+0xf4>)
   2394a:	6812      	ldr	r2, [r2, #0]
   2394c:	2a00      	cmp	r2, #0
   2394e:	d03e      	beq.n	239ce <z_time_slice+0xba>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   23950:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   23952:	2a7f      	cmp	r2, #127	; 0x7f
   23954:	d83b      	bhi.n	239ce <z_time_slice+0xba>
	uint8_t state = thread->base.thread_state;
   23956:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   23958:	f012 0f1f 	tst.w	r2, #31
   2395c:	d137      	bne.n	239ce <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2395e:	f993 100e 	ldrsb.w	r1, [r3, #14]
   23962:	4a2a      	ldr	r2, [pc, #168]	; (23a0c <z_time_slice+0xf8>)
   23964:	6812      	ldr	r2, [r2, #0]
   23966:	4291      	cmp	r1, r2
   23968:	db31      	blt.n	239ce <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
   2396a:	4a29      	ldr	r2, [pc, #164]	; (23a10 <z_time_slice+0xfc>)
   2396c:	4293      	cmp	r3, r2
   2396e:	d02e      	beq.n	239ce <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
   23970:	4a23      	ldr	r2, [pc, #140]	; (23a00 <z_time_slice+0xec>)
   23972:	6910      	ldr	r0, [r2, #16]
   23974:	42a0      	cmp	r0, r4
   23976:	dd24      	ble.n	239c2 <z_time_slice+0xae>
			_current_cpu->slice_ticks -= ticks;
   23978:	1b00      	subs	r0, r0, r4
   2397a:	4b21      	ldr	r3, [pc, #132]	; (23a00 <z_time_slice+0xec>)
   2397c:	6118      	str	r0, [r3, #16]
   2397e:	e029      	b.n	239d4 <z_time_slice+0xc0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23980:	4e24      	ldr	r6, [pc, #144]	; (23a14 <z_time_slice+0x100>)
   23982:	2281      	movs	r2, #129	; 0x81
   23984:	4631      	mov	r1, r6
   23986:	4824      	ldr	r0, [pc, #144]	; (23a18 <z_time_slice+0x104>)
   23988:	f004 fcdb 	bl	28342 <printk>
   2398c:	2181      	movs	r1, #129	; 0x81
   2398e:	4630      	mov	r0, r6
   23990:	f005 f870 	bl	28a74 <assert_post_action>
   23994:	e7cc      	b.n	23930 <z_time_slice+0x1c>
		z_reset_time_slice();
   23996:	f7ff fdab 	bl	234f0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2399a:	4818      	ldr	r0, [pc, #96]	; (239fc <z_time_slice+0xe8>)
   2399c:	f7fe fa8c 	bl	21eb8 <z_spin_unlock_valid>
   239a0:	b120      	cbz	r0, 239ac <z_time_slice+0x98>
	__asm__ volatile(
   239a2:	f385 8811 	msr	BASEPRI, r5
   239a6:	f3bf 8f6f 	isb	sy
		return;
   239aa:	e01b      	b.n	239e4 <z_time_slice+0xd0>
   239ac:	4c19      	ldr	r4, [pc, #100]	; (23a14 <z_time_slice+0x100>)
   239ae:	22ac      	movs	r2, #172	; 0xac
   239b0:	4621      	mov	r1, r4
   239b2:	4819      	ldr	r0, [pc, #100]	; (23a18 <z_time_slice+0x104>)
   239b4:	f004 fcc5 	bl	28342 <printk>
   239b8:	21ac      	movs	r1, #172	; 0xac
   239ba:	4620      	mov	r0, r4
   239bc:	f005 f85a 	bl	28a74 <assert_post_action>
   239c0:	e7ef      	b.n	239a2 <z_time_slice+0x8e>
			move_thread_to_end_of_prio_q(_current);
   239c2:	4618      	mov	r0, r3
   239c4:	f7ff ff4e 	bl	23864 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   239c8:	f7ff fd92 	bl	234f0 <z_reset_time_slice>
   239cc:	e002      	b.n	239d4 <z_time_slice+0xc0>
		_current_cpu->slice_ticks = 0;
   239ce:	4b0c      	ldr	r3, [pc, #48]	; (23a00 <z_time_slice+0xec>)
   239d0:	2200      	movs	r2, #0
   239d2:	611a      	str	r2, [r3, #16]
   239d4:	4809      	ldr	r0, [pc, #36]	; (239fc <z_time_slice+0xe8>)
   239d6:	f7fe fa6f 	bl	21eb8 <z_spin_unlock_valid>
   239da:	b120      	cbz	r0, 239e6 <z_time_slice+0xd2>
   239dc:	f385 8811 	msr	BASEPRI, r5
   239e0:	f3bf 8f6f 	isb	sy
}
   239e4:	bd70      	pop	{r4, r5, r6, pc}
   239e6:	4c0b      	ldr	r4, [pc, #44]	; (23a14 <z_time_slice+0x100>)
   239e8:	22ac      	movs	r2, #172	; 0xac
   239ea:	4621      	mov	r1, r4
   239ec:	480a      	ldr	r0, [pc, #40]	; (23a18 <z_time_slice+0x104>)
   239ee:	f004 fca8 	bl	28342 <printk>
   239f2:	21ac      	movs	r1, #172	; 0xac
   239f4:	4620      	mov	r0, r4
   239f6:	f005 f83d 	bl	28a74 <assert_post_action>
   239fa:	e7ef      	b.n	239dc <z_time_slice+0xc8>
   239fc:	20003654 	.word	0x20003654
   23a00:	2000360c 	.word	0x2000360c
   23a04:	20003650 	.word	0x20003650
   23a08:	2000365c 	.word	0x2000365c
   23a0c:	20003658 	.word	0x20003658
   23a10:	20001e50 	.word	0x20001e50
   23a14:	0002f9a4 	.word	0x0002f9a4
   23a18:	0002f968 	.word	0x0002f968

00023a1c <ready_thread>:
{
   23a1c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   23a1e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23a20:	f990 200d 	ldrsb.w	r2, [r0, #13]
   23a24:	2a00      	cmp	r2, #0
   23a26:	db30      	blt.n	23a8a <ready_thread+0x6e>
   23a28:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23a2a:	f013 0f1f 	tst.w	r3, #31
   23a2e:	d105      	bne.n	23a3c <ready_thread+0x20>
	return node->next != NULL;
   23a30:	6982      	ldr	r2, [r0, #24]
   23a32:	b10a      	cbz	r2, 23a38 <ready_thread+0x1c>
   23a34:	2200      	movs	r2, #0
   23a36:	e002      	b.n	23a3e <ready_thread+0x22>
   23a38:	2201      	movs	r2, #1
   23a3a:	e000      	b.n	23a3e <ready_thread+0x22>
   23a3c:	2200      	movs	r2, #0
   23a3e:	b322      	cbz	r2, 23a8a <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
   23a40:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23a44:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23a46:	4b1b      	ldr	r3, [pc, #108]	; (23ab4 <ready_thread+0x98>)
   23a48:	429c      	cmp	r4, r3
   23a4a:	d01f      	beq.n	23a8c <ready_thread+0x70>
	return list->head == list;
   23a4c:	4b1a      	ldr	r3, [pc, #104]	; (23ab8 <ready_thread+0x9c>)
   23a4e:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a52:	429d      	cmp	r5, r3
   23a54:	d02b      	beq.n	23aae <ready_thread+0x92>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a56:	b16d      	cbz	r5, 23a74 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23a58:	4629      	mov	r1, r5
   23a5a:	4620      	mov	r0, r4
   23a5c:	f00b f9a1 	bl	2eda2 <z_sched_prio_cmp>
   23a60:	2800      	cmp	r0, #0
   23a62:	dc1e      	bgt.n	23aa2 <ready_thread+0x86>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23a64:	b135      	cbz	r5, 23a74 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
   23a66:	4b14      	ldr	r3, [pc, #80]	; (23ab8 <ready_thread+0x9c>)
   23a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23a6a:	429d      	cmp	r5, r3
   23a6c:	d002      	beq.n	23a74 <ready_thread+0x58>
   23a6e:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a70:	2d00      	cmp	r5, #0
   23a72:	d1f0      	bne.n	23a56 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
   23a74:	4b10      	ldr	r3, [pc, #64]	; (23ab8 <ready_thread+0x9c>)
   23a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   23a78:	f103 0120 	add.w	r1, r3, #32
   23a7c:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   23a7e:	6062      	str	r2, [r4, #4]
	tail->next = node;
   23a80:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23a82:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   23a84:	2000      	movs	r0, #0
   23a86:	f7ff feb5 	bl	237f4 <update_cache>
}
   23a8a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23a8c:	4d0b      	ldr	r5, [pc, #44]	; (23abc <ready_thread+0xa0>)
   23a8e:	22b1      	movs	r2, #177	; 0xb1
   23a90:	4629      	mov	r1, r5
   23a92:	480b      	ldr	r0, [pc, #44]	; (23ac0 <ready_thread+0xa4>)
   23a94:	f004 fc55 	bl	28342 <printk>
   23a98:	21b1      	movs	r1, #177	; 0xb1
   23a9a:	4628      	mov	r0, r5
   23a9c:	f004 ffea 	bl	28a74 <assert_post_action>
   23aa0:	e7d4      	b.n	23a4c <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
   23aa2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   23aa4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   23aa6:	6025      	str	r5, [r4, #0]
	prev->next = node;
   23aa8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   23aaa:	606c      	str	r4, [r5, #4]
}
   23aac:	e7ea      	b.n	23a84 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23aae:	2500      	movs	r5, #0
   23ab0:	e7d1      	b.n	23a56 <ready_thread+0x3a>
   23ab2:	bf00      	nop
   23ab4:	20001e50 	.word	0x20001e50
   23ab8:	2000360c 	.word	0x2000360c
   23abc:	00033314 	.word	0x00033314
   23ac0:	0002f968 	.word	0x0002f968

00023ac4 <z_ready_thread>:
{
   23ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ac6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   23ac8:	2400      	movs	r4, #0
	__asm__ volatile(
   23aca:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ace:	f3ef 8611 	mrs	r6, BASEPRI
   23ad2:	f383 8812 	msr	BASEPRI_MAX, r3
   23ad6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ada:	4819      	ldr	r0, [pc, #100]	; (23b40 <z_ready_thread+0x7c>)
   23adc:	f7fe f9dc 	bl	21e98 <z_spin_lock_valid>
   23ae0:	b118      	cbz	r0, 23aea <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
   23ae2:	4817      	ldr	r0, [pc, #92]	; (23b40 <z_ready_thread+0x7c>)
   23ae4:	f7fe f9f8 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   23ae8:	e01d      	b.n	23b26 <z_ready_thread+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23aea:	4f16      	ldr	r7, [pc, #88]	; (23b44 <z_ready_thread+0x80>)
   23aec:	2281      	movs	r2, #129	; 0x81
   23aee:	4639      	mov	r1, r7
   23af0:	4815      	ldr	r0, [pc, #84]	; (23b48 <z_ready_thread+0x84>)
   23af2:	f004 fc26 	bl	28342 <printk>
   23af6:	2181      	movs	r1, #129	; 0x81
   23af8:	4638      	mov	r0, r7
   23afa:	f004 ffbb 	bl	28a74 <assert_post_action>
   23afe:	e7f0      	b.n	23ae2 <z_ready_thread+0x1e>
			ready_thread(thread);
   23b00:	4628      	mov	r0, r5
   23b02:	f7ff ff8b 	bl	23a1c <ready_thread>
   23b06:	e014      	b.n	23b32 <z_ready_thread+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b08:	4c0e      	ldr	r4, [pc, #56]	; (23b44 <z_ready_thread+0x80>)
   23b0a:	22ac      	movs	r2, #172	; 0xac
   23b0c:	4621      	mov	r1, r4
   23b0e:	480e      	ldr	r0, [pc, #56]	; (23b48 <z_ready_thread+0x84>)
   23b10:	f004 fc17 	bl	28342 <printk>
   23b14:	21ac      	movs	r1, #172	; 0xac
   23b16:	4620      	mov	r0, r4
   23b18:	f004 ffac 	bl	28a74 <assert_post_action>
	__asm__ volatile(
   23b1c:	f386 8811 	msr	BASEPRI, r6
   23b20:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23b24:	2401      	movs	r4, #1
   23b26:	b954      	cbnz	r4, 23b3e <z_ready_thread+0x7a>
		if (!thread_active_elsewhere(thread)) {
   23b28:	4628      	mov	r0, r5
   23b2a:	f00b f938 	bl	2ed9e <thread_active_elsewhere>
   23b2e:	2800      	cmp	r0, #0
   23b30:	d0e6      	beq.n	23b00 <z_ready_thread+0x3c>
   23b32:	4803      	ldr	r0, [pc, #12]	; (23b40 <z_ready_thread+0x7c>)
   23b34:	f7fe f9c0 	bl	21eb8 <z_spin_unlock_valid>
   23b38:	2800      	cmp	r0, #0
   23b3a:	d1ef      	bne.n	23b1c <z_ready_thread+0x58>
   23b3c:	e7e4      	b.n	23b08 <z_ready_thread+0x44>
}
   23b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23b40:	20003654 	.word	0x20003654
   23b44:	0002f9a4 	.word	0x0002f9a4
   23b48:	0002f968 	.word	0x0002f968

00023b4c <z_sched_start>:
{
   23b4c:	b570      	push	{r4, r5, r6, lr}
   23b4e:	4604      	mov	r4, r0
	__asm__ volatile(
   23b50:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b54:	f3ef 8511 	mrs	r5, BASEPRI
   23b58:	f383 8812 	msr	BASEPRI_MAX, r3
   23b5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b60:	481a      	ldr	r0, [pc, #104]	; (23bcc <z_sched_start+0x80>)
   23b62:	f7fe f999 	bl	21e98 <z_spin_lock_valid>
   23b66:	b188      	cbz	r0, 23b8c <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
   23b68:	4818      	ldr	r0, [pc, #96]	; (23bcc <z_sched_start+0x80>)
   23b6a:	f7fe f9b5 	bl	21ed8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   23b6e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   23b70:	f013 0f04 	tst.w	r3, #4
   23b74:	d015      	beq.n	23ba2 <z_sched_start+0x56>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23b76:	f023 0304 	bic.w	r3, r3, #4
   23b7a:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   23b7c:	4620      	mov	r0, r4
   23b7e:	f7ff ff4d 	bl	23a1c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23b82:	4629      	mov	r1, r5
   23b84:	4811      	ldr	r0, [pc, #68]	; (23bcc <z_sched_start+0x80>)
   23b86:	f7ff fd2b 	bl	235e0 <z_reschedule>
}
   23b8a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b8c:	4e10      	ldr	r6, [pc, #64]	; (23bd0 <z_sched_start+0x84>)
   23b8e:	2281      	movs	r2, #129	; 0x81
   23b90:	4631      	mov	r1, r6
   23b92:	4810      	ldr	r0, [pc, #64]	; (23bd4 <z_sched_start+0x88>)
   23b94:	f004 fbd5 	bl	28342 <printk>
   23b98:	2181      	movs	r1, #129	; 0x81
   23b9a:	4630      	mov	r0, r6
   23b9c:	f004 ff6a 	bl	28a74 <assert_post_action>
   23ba0:	e7e2      	b.n	23b68 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ba2:	480a      	ldr	r0, [pc, #40]	; (23bcc <z_sched_start+0x80>)
   23ba4:	f7fe f988 	bl	21eb8 <z_spin_unlock_valid>
   23ba8:	b120      	cbz	r0, 23bb4 <z_sched_start+0x68>
	__asm__ volatile(
   23baa:	f385 8811 	msr	BASEPRI, r5
   23bae:	f3bf 8f6f 	isb	sy
		return;
   23bb2:	e7ea      	b.n	23b8a <z_sched_start+0x3e>
   23bb4:	4c06      	ldr	r4, [pc, #24]	; (23bd0 <z_sched_start+0x84>)
   23bb6:	22ac      	movs	r2, #172	; 0xac
   23bb8:	4621      	mov	r1, r4
   23bba:	4806      	ldr	r0, [pc, #24]	; (23bd4 <z_sched_start+0x88>)
   23bbc:	f004 fbc1 	bl	28342 <printk>
   23bc0:	21ac      	movs	r1, #172	; 0xac
   23bc2:	4620      	mov	r0, r4
   23bc4:	f004 ff56 	bl	28a74 <assert_post_action>
   23bc8:	e7ef      	b.n	23baa <z_sched_start+0x5e>
   23bca:	bf00      	nop
   23bcc:	20003654 	.word	0x20003654
   23bd0:	0002f9a4 	.word	0x0002f9a4
   23bd4:	0002f968 	.word	0x0002f968

00023bd8 <z_thread_timeout>:
{
   23bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23bdc:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   23bde:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   23be2:	2500      	movs	r5, #0
	__asm__ volatile(
   23be4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23be8:	f3ef 8711 	mrs	r7, BASEPRI
   23bec:	f383 8812 	msr	BASEPRI_MAX, r3
   23bf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bf4:	4824      	ldr	r0, [pc, #144]	; (23c88 <z_thread_timeout+0xb0>)
   23bf6:	f7fe f94f 	bl	21e98 <z_spin_lock_valid>
   23bfa:	b118      	cbz	r0, 23c04 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
   23bfc:	4822      	ldr	r0, [pc, #136]	; (23c88 <z_thread_timeout+0xb0>)
   23bfe:	f7fe f96b 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   23c02:	e029      	b.n	23c58 <z_thread_timeout+0x80>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c04:	f8df 8088 	ldr.w	r8, [pc, #136]	; 23c90 <z_thread_timeout+0xb8>
   23c08:	2281      	movs	r2, #129	; 0x81
   23c0a:	4641      	mov	r1, r8
   23c0c:	481f      	ldr	r0, [pc, #124]	; (23c8c <z_thread_timeout+0xb4>)
   23c0e:	f004 fb98 	bl	28342 <printk>
   23c12:	2181      	movs	r1, #129	; 0x81
   23c14:	4640      	mov	r0, r8
   23c16:	f004 ff2d 	bl	28a74 <assert_post_action>
   23c1a:	e7ef      	b.n	23bfc <z_thread_timeout+0x24>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   23c1c:	4630      	mov	r0, r6
   23c1e:	f7ff fc3f 	bl	234a0 <pended_on_thread>
   23c22:	4631      	mov	r1, r6
   23c24:	f7ff fd7a 	bl	2371c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23c28:	7b73      	ldrb	r3, [r6, #13]
   23c2a:	f023 0302 	bic.w	r3, r3, #2
   23c2e:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
   23c30:	2300      	movs	r3, #0
   23c32:	60b3      	str	r3, [r6, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23c34:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23c38:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   23c3c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   23c40:	4630      	mov	r0, r6
   23c42:	f7ff feeb 	bl	23a1c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c46:	4810      	ldr	r0, [pc, #64]	; (23c88 <z_thread_timeout+0xb0>)
   23c48:	f7fe f936 	bl	21eb8 <z_spin_unlock_valid>
   23c4c:	b178      	cbz	r0, 23c6e <z_thread_timeout+0x96>
	__asm__ volatile(
   23c4e:	f387 8811 	msr	BASEPRI, r7
   23c52:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23c56:	2501      	movs	r5, #1
   23c58:	b9a5      	cbnz	r5, 23c84 <z_thread_timeout+0xac>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   23c5a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   23c5e:	f013 0f28 	tst.w	r3, #40	; 0x28
   23c62:	d1f0      	bne.n	23c46 <z_thread_timeout+0x6e>
			if (thread->base.pended_on != NULL) {
   23c64:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23c68:	2b00      	cmp	r3, #0
   23c6a:	d1d7      	bne.n	23c1c <z_thread_timeout+0x44>
   23c6c:	e7e2      	b.n	23c34 <z_thread_timeout+0x5c>
   23c6e:	4d08      	ldr	r5, [pc, #32]	; (23c90 <z_thread_timeout+0xb8>)
   23c70:	22ac      	movs	r2, #172	; 0xac
   23c72:	4629      	mov	r1, r5
   23c74:	4805      	ldr	r0, [pc, #20]	; (23c8c <z_thread_timeout+0xb4>)
   23c76:	f004 fb64 	bl	28342 <printk>
   23c7a:	21ac      	movs	r1, #172	; 0xac
   23c7c:	4628      	mov	r0, r5
   23c7e:	f004 fef9 	bl	28a74 <assert_post_action>
   23c82:	e7e4      	b.n	23c4e <z_thread_timeout+0x76>
}
   23c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23c88:	20003654 	.word	0x20003654
   23c8c:	0002f968 	.word	0x0002f968
   23c90:	0002f9a4 	.word	0x0002f9a4

00023c94 <unready_thread>:
{
   23c94:	b510      	push	{r4, lr}
   23c96:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   23c98:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   23c9a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   23c9e:	2b00      	cmp	r3, #0
   23ca0:	db08      	blt.n	23cb4 <unready_thread+0x20>
	update_cache(thread == _current);
   23ca2:	4b08      	ldr	r3, [pc, #32]	; (23cc4 <unready_thread+0x30>)
   23ca4:	6898      	ldr	r0, [r3, #8]
   23ca6:	42a0      	cmp	r0, r4
   23ca8:	bf14      	ite	ne
   23caa:	2000      	movne	r0, #0
   23cac:	2001      	moveq	r0, #1
   23cae:	f7ff fda1 	bl	237f4 <update_cache>
}
   23cb2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23cb8:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   23cba:	4601      	mov	r1, r0
   23cbc:	4802      	ldr	r0, [pc, #8]	; (23cc8 <unready_thread+0x34>)
   23cbe:	f7ff fd2d 	bl	2371c <z_priq_dumb_remove>
}
   23cc2:	e7ee      	b.n	23ca2 <unready_thread+0xe>
   23cc4:	2000360c 	.word	0x2000360c
   23cc8:	2000362c 	.word	0x2000362c

00023ccc <add_to_waitq_locked>:
{
   23ccc:	b570      	push	{r4, r5, r6, lr}
   23cce:	4605      	mov	r5, r0
   23cd0:	460e      	mov	r6, r1
	unready_thread(thread);
   23cd2:	f7ff ffdf 	bl	23c94 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   23cd6:	7b6b      	ldrb	r3, [r5, #13]
   23cd8:	f043 0302 	orr.w	r3, r3, #2
   23cdc:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   23cde:	b1ce      	cbz	r6, 23d14 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
   23ce0:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23ce2:	4b16      	ldr	r3, [pc, #88]	; (23d3c <add_to_waitq_locked+0x70>)
   23ce4:	429d      	cmp	r5, r3
   23ce6:	d016      	beq.n	23d16 <add_to_waitq_locked+0x4a>
	return list->head == list;
   23ce8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23cea:	42a6      	cmp	r6, r4
   23cec:	d024      	beq.n	23d38 <add_to_waitq_locked+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23cee:	b164      	cbz	r4, 23d0a <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23cf0:	4621      	mov	r1, r4
   23cf2:	4628      	mov	r0, r5
   23cf4:	f00b f855 	bl	2eda2 <z_sched_prio_cmp>
   23cf8:	2800      	cmp	r0, #0
   23cfa:	dc17      	bgt.n	23d2c <add_to_waitq_locked+0x60>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23cfc:	b12c      	cbz	r4, 23d0a <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
   23cfe:	6873      	ldr	r3, [r6, #4]
   23d00:	429c      	cmp	r4, r3
   23d02:	d002      	beq.n	23d0a <add_to_waitq_locked+0x3e>
   23d04:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23d06:	2c00      	cmp	r4, #0
   23d08:	d1f1      	bne.n	23cee <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   23d0a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   23d0c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   23d0e:	606b      	str	r3, [r5, #4]
	tail->next = node;
   23d10:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23d12:	6075      	str	r5, [r6, #4]
}
   23d14:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23d16:	4c0a      	ldr	r4, [pc, #40]	; (23d40 <add_to_waitq_locked+0x74>)
   23d18:	22b1      	movs	r2, #177	; 0xb1
   23d1a:	4621      	mov	r1, r4
   23d1c:	4809      	ldr	r0, [pc, #36]	; (23d44 <add_to_waitq_locked+0x78>)
   23d1e:	f004 fb10 	bl	28342 <printk>
   23d22:	21b1      	movs	r1, #177	; 0xb1
   23d24:	4620      	mov	r0, r4
   23d26:	f004 fea5 	bl	28a74 <assert_post_action>
   23d2a:	e7dd      	b.n	23ce8 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
   23d2c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   23d2e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   23d30:	602c      	str	r4, [r5, #0]
	prev->next = node;
   23d32:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23d34:	6065      	str	r5, [r4, #4]
}
   23d36:	e7ed      	b.n	23d14 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23d38:	2400      	movs	r4, #0
   23d3a:	e7d8      	b.n	23cee <add_to_waitq_locked+0x22>
   23d3c:	20001e50 	.word	0x20001e50
   23d40:	00033314 	.word	0x00033314
   23d44:	0002f968 	.word	0x0002f968

00023d48 <pend>:
{
   23d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23d4c:	4605      	mov	r5, r0
   23d4e:	460f      	mov	r7, r1
   23d50:	4691      	mov	r9, r2
   23d52:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   23d54:	2400      	movs	r4, #0
	__asm__ volatile(
   23d56:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d5a:	f3ef 8611 	mrs	r6, BASEPRI
   23d5e:	f383 8812 	msr	BASEPRI_MAX, r3
   23d62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d66:	481a      	ldr	r0, [pc, #104]	; (23dd0 <pend+0x88>)
   23d68:	f7fe f896 	bl	21e98 <z_spin_lock_valid>
   23d6c:	b118      	cbz	r0, 23d76 <pend+0x2e>
	z_spin_lock_set_owner(l);
   23d6e:	4818      	ldr	r0, [pc, #96]	; (23dd0 <pend+0x88>)
   23d70:	f7fe f8b2 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   23d74:	e01a      	b.n	23dac <pend+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d76:	f8df a060 	ldr.w	sl, [pc, #96]	; 23dd8 <pend+0x90>
   23d7a:	2281      	movs	r2, #129	; 0x81
   23d7c:	4651      	mov	r1, sl
   23d7e:	4815      	ldr	r0, [pc, #84]	; (23dd4 <pend+0x8c>)
   23d80:	f004 fadf 	bl	28342 <printk>
   23d84:	2181      	movs	r1, #129	; 0x81
   23d86:	4650      	mov	r0, sl
   23d88:	f004 fe74 	bl	28a74 <assert_post_action>
   23d8c:	e7ef      	b.n	23d6e <pend+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d8e:	4c12      	ldr	r4, [pc, #72]	; (23dd8 <pend+0x90>)
   23d90:	22ac      	movs	r2, #172	; 0xac
   23d92:	4621      	mov	r1, r4
   23d94:	480f      	ldr	r0, [pc, #60]	; (23dd4 <pend+0x8c>)
   23d96:	f004 fad4 	bl	28342 <printk>
   23d9a:	21ac      	movs	r1, #172	; 0xac
   23d9c:	4620      	mov	r0, r4
   23d9e:	f004 fe69 	bl	28a74 <assert_post_action>
	__asm__ volatile(
   23da2:	f386 8811 	msr	BASEPRI, r6
   23da6:	f3bf 8f6f 	isb	sy
   23daa:	2401      	movs	r4, #1
   23dac:	b94c      	cbnz	r4, 23dc2 <pend+0x7a>
		add_to_waitq_locked(thread, wait_q);
   23dae:	4639      	mov	r1, r7
   23db0:	4628      	mov	r0, r5
   23db2:	f7ff ff8b 	bl	23ccc <add_to_waitq_locked>
   23db6:	4806      	ldr	r0, [pc, #24]	; (23dd0 <pend+0x88>)
   23db8:	f7fe f87e 	bl	21eb8 <z_spin_unlock_valid>
   23dbc:	2800      	cmp	r0, #0
   23dbe:	d1f0      	bne.n	23da2 <pend+0x5a>
   23dc0:	e7e5      	b.n	23d8e <pend+0x46>
	add_thread_timeout(thread, timeout);
   23dc2:	464a      	mov	r2, r9
   23dc4:	4643      	mov	r3, r8
   23dc6:	4628      	mov	r0, r5
   23dc8:	f7ff fb82 	bl	234d0 <add_thread_timeout>
}
   23dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23dd0:	20003654 	.word	0x20003654
   23dd4:	0002f968 	.word	0x0002f968
   23dd8:	0002f9a4 	.word	0x0002f9a4

00023ddc <z_pend_curr>:
{
   23ddc:	b538      	push	{r3, r4, r5, lr}
   23dde:	4605      	mov	r5, r0
   23de0:	460c      	mov	r4, r1
   23de2:	4611      	mov	r1, r2
	pending_current = _current;
   23de4:	4b0d      	ldr	r3, [pc, #52]	; (23e1c <z_pend_curr+0x40>)
   23de6:	6898      	ldr	r0, [r3, #8]
   23de8:	4b0d      	ldr	r3, [pc, #52]	; (23e20 <z_pend_curr+0x44>)
   23dea:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   23dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23df0:	f7ff ffaa 	bl	23d48 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23df4:	4628      	mov	r0, r5
   23df6:	f7fe f85f 	bl	21eb8 <z_spin_unlock_valid>
   23dfa:	b118      	cbz	r0, 23e04 <z_pend_curr+0x28>
   23dfc:	4620      	mov	r0, r4
   23dfe:	f7ef fa9f 	bl	13340 <arch_swap>
}
   23e02:	bd38      	pop	{r3, r4, r5, pc}
   23e04:	4d07      	ldr	r5, [pc, #28]	; (23e24 <z_pend_curr+0x48>)
   23e06:	22c3      	movs	r2, #195	; 0xc3
   23e08:	4629      	mov	r1, r5
   23e0a:	4807      	ldr	r0, [pc, #28]	; (23e28 <z_pend_curr+0x4c>)
   23e0c:	f004 fa99 	bl	28342 <printk>
   23e10:	21c3      	movs	r1, #195	; 0xc3
   23e12:	4628      	mov	r0, r5
   23e14:	f004 fe2e 	bl	28a74 <assert_post_action>
   23e18:	e7f0      	b.n	23dfc <z_pend_curr+0x20>
   23e1a:	bf00      	nop
   23e1c:	2000360c 	.word	0x2000360c
   23e20:	20003650 	.word	0x20003650
   23e24:	0002f9a4 	.word	0x0002f9a4
   23e28:	0002f968 	.word	0x0002f968

00023e2c <z_set_prio>:
{
   23e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e30:	4604      	mov	r4, r0
   23e32:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   23e34:	2500      	movs	r5, #0
	__asm__ volatile(
   23e36:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e3a:	f3ef 8611 	mrs	r6, BASEPRI
   23e3e:	f383 8812 	msr	BASEPRI_MAX, r3
   23e42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e46:	4840      	ldr	r0, [pc, #256]	; (23f48 <z_set_prio+0x11c>)
   23e48:	f7fe f826 	bl	21e98 <z_spin_lock_valid>
   23e4c:	b128      	cbz	r0, 23e5a <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
   23e4e:	483e      	ldr	r0, [pc, #248]	; (23f48 <z_set_prio+0x11c>)
   23e50:	f7fe f842 	bl	21ed8 <z_spin_lock_set_owner>
	bool need_sched = 0;
   23e54:	f04f 0800 	mov.w	r8, #0
	return k;
   23e58:	e019      	b.n	23e8e <z_set_prio+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e5a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 23f60 <z_set_prio+0x134>
   23e5e:	2281      	movs	r2, #129	; 0x81
   23e60:	4641      	mov	r1, r8
   23e62:	483a      	ldr	r0, [pc, #232]	; (23f4c <z_set_prio+0x120>)
   23e64:	f004 fa6d 	bl	28342 <printk>
   23e68:	2181      	movs	r1, #129	; 0x81
   23e6a:	4640      	mov	r0, r8
   23e6c:	f004 fe02 	bl	28a74 <assert_post_action>
   23e70:	e7ed      	b.n	23e4e <z_set_prio+0x22>
		if (need_sched) {
   23e72:	f013 0801 	ands.w	r8, r3, #1
   23e76:	d116      	bne.n	23ea6 <z_set_prio+0x7a>
			thread->base.prio = prio;
   23e78:	73a7      	strb	r7, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e7a:	4833      	ldr	r0, [pc, #204]	; (23f48 <z_set_prio+0x11c>)
   23e7c:	f7fe f81c 	bl	21eb8 <z_spin_unlock_valid>
   23e80:	2800      	cmp	r0, #0
   23e82:	d052      	beq.n	23f2a <z_set_prio+0xfe>
	__asm__ volatile(
   23e84:	f386 8811 	msr	BASEPRI, r6
   23e88:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23e8c:	2501      	movs	r5, #1
   23e8e:	462b      	mov	r3, r5
   23e90:	2d00      	cmp	r5, #0
   23e92:	d155      	bne.n	23f40 <z_set_prio+0x114>
	uint8_t state = thread->base.thread_state;
   23e94:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23e96:	f012 0f1f 	tst.w	r2, #31
   23e9a:	d1ea      	bne.n	23e72 <z_set_prio+0x46>
	return node->next != NULL;
   23e9c:	69a1      	ldr	r1, [r4, #24]
   23e9e:	2900      	cmp	r1, #0
   23ea0:	d1e7      	bne.n	23e72 <z_set_prio+0x46>
   23ea2:	2301      	movs	r3, #1
   23ea4:	e7e5      	b.n	23e72 <z_set_prio+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23ea6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23eaa:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   23eac:	4621      	mov	r1, r4
   23eae:	4828      	ldr	r0, [pc, #160]	; (23f50 <z_set_prio+0x124>)
   23eb0:	f7ff fc34 	bl	2371c <z_priq_dumb_remove>
				thread->base.prio = prio;
   23eb4:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23eb6:	7b63      	ldrb	r3, [r4, #13]
   23eb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23ebc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23ebe:	4b25      	ldr	r3, [pc, #148]	; (23f54 <z_set_prio+0x128>)
   23ec0:	429c      	cmp	r4, r3
   23ec2:	d01f      	beq.n	23f04 <z_set_prio+0xd8>
	return list->head == list;
   23ec4:	4b24      	ldr	r3, [pc, #144]	; (23f58 <z_set_prio+0x12c>)
   23ec6:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23eca:	429d      	cmp	r5, r3
   23ecc:	d02b      	beq.n	23f26 <z_set_prio+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23ece:	b16d      	cbz	r5, 23eec <z_set_prio+0xc0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23ed0:	4629      	mov	r1, r5
   23ed2:	4620      	mov	r0, r4
   23ed4:	f00a ff65 	bl	2eda2 <z_sched_prio_cmp>
   23ed8:	2800      	cmp	r0, #0
   23eda:	dc1e      	bgt.n	23f1a <z_set_prio+0xee>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23edc:	b135      	cbz	r5, 23eec <z_set_prio+0xc0>
	return (node == list->tail) ? NULL : node->next;
   23ede:	4b1e      	ldr	r3, [pc, #120]	; (23f58 <z_set_prio+0x12c>)
   23ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23ee2:	429d      	cmp	r5, r3
   23ee4:	d002      	beq.n	23eec <z_set_prio+0xc0>
   23ee6:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23ee8:	2d00      	cmp	r5, #0
   23eea:	d1f0      	bne.n	23ece <z_set_prio+0xa2>
	sys_dnode_t *const tail = list->tail;
   23eec:	4b1a      	ldr	r3, [pc, #104]	; (23f58 <z_set_prio+0x12c>)
   23eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   23ef0:	f103 0120 	add.w	r1, r3, #32
   23ef4:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   23ef6:	6062      	str	r2, [r4, #4]
	tail->next = node;
   23ef8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23efa:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   23efc:	2001      	movs	r0, #1
   23efe:	f7ff fc79 	bl	237f4 <update_cache>
   23f02:	e7ba      	b.n	23e7a <z_set_prio+0x4e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23f04:	4d15      	ldr	r5, [pc, #84]	; (23f5c <z_set_prio+0x130>)
   23f06:	22b1      	movs	r2, #177	; 0xb1
   23f08:	4629      	mov	r1, r5
   23f0a:	4810      	ldr	r0, [pc, #64]	; (23f4c <z_set_prio+0x120>)
   23f0c:	f004 fa19 	bl	28342 <printk>
   23f10:	21b1      	movs	r1, #177	; 0xb1
   23f12:	4628      	mov	r0, r5
   23f14:	f004 fdae 	bl	28a74 <assert_post_action>
   23f18:	e7d4      	b.n	23ec4 <z_set_prio+0x98>
	sys_dnode_t *const prev = successor->prev;
   23f1a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   23f1c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   23f1e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   23f20:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   23f22:	606c      	str	r4, [r5, #4]
}
   23f24:	e7ea      	b.n	23efc <z_set_prio+0xd0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23f26:	2500      	movs	r5, #0
   23f28:	e7d1      	b.n	23ece <z_set_prio+0xa2>
   23f2a:	4d0d      	ldr	r5, [pc, #52]	; (23f60 <z_set_prio+0x134>)
   23f2c:	22ac      	movs	r2, #172	; 0xac
   23f2e:	4629      	mov	r1, r5
   23f30:	4806      	ldr	r0, [pc, #24]	; (23f4c <z_set_prio+0x120>)
   23f32:	f004 fa06 	bl	28342 <printk>
   23f36:	21ac      	movs	r1, #172	; 0xac
   23f38:	4628      	mov	r0, r5
   23f3a:	f004 fd9b 	bl	28a74 <assert_post_action>
   23f3e:	e7a1      	b.n	23e84 <z_set_prio+0x58>
}
   23f40:	4640      	mov	r0, r8
   23f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23f46:	bf00      	nop
   23f48:	20003654 	.word	0x20003654
   23f4c:	0002f968 	.word	0x0002f968
   23f50:	2000362c 	.word	0x2000362c
   23f54:	20001e50 	.word	0x20001e50
   23f58:	2000360c 	.word	0x2000360c
   23f5c:	00033314 	.word	0x00033314
   23f60:	0002f9a4 	.word	0x0002f9a4

00023f64 <z_impl_k_thread_suspend>:
{
   23f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f66:	4604      	mov	r4, r0
   23f68:	3018      	adds	r0, #24
   23f6a:	f000 fd49 	bl	24a00 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   23f6e:	2500      	movs	r5, #0
	__asm__ volatile(
   23f70:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f74:	f3ef 8611 	mrs	r6, BASEPRI
   23f78:	f383 8812 	msr	BASEPRI_MAX, r3
   23f7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f80:	4828      	ldr	r0, [pc, #160]	; (24024 <z_impl_k_thread_suspend+0xc0>)
   23f82:	f7fd ff89 	bl	21e98 <z_spin_lock_valid>
   23f86:	b118      	cbz	r0, 23f90 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
   23f88:	4826      	ldr	r0, [pc, #152]	; (24024 <z_impl_k_thread_suspend+0xc0>)
   23f8a:	f7fd ffa5 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   23f8e:	e021      	b.n	23fd4 <z_impl_k_thread_suspend+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f90:	4f25      	ldr	r7, [pc, #148]	; (24028 <z_impl_k_thread_suspend+0xc4>)
   23f92:	2281      	movs	r2, #129	; 0x81
   23f94:	4639      	mov	r1, r7
   23f96:	4825      	ldr	r0, [pc, #148]	; (2402c <z_impl_k_thread_suspend+0xc8>)
   23f98:	f004 f9d3 	bl	28342 <printk>
   23f9c:	2181      	movs	r1, #129	; 0x81
   23f9e:	4638      	mov	r0, r7
   23fa0:	f004 fd68 	bl	28a74 <assert_post_action>
   23fa4:	e7f0      	b.n	23f88 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23faa:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   23fac:	4621      	mov	r1, r4
   23fae:	4820      	ldr	r0, [pc, #128]	; (24030 <z_impl_k_thread_suspend+0xcc>)
   23fb0:	f7ff fbb4 	bl	2371c <z_priq_dumb_remove>
}
   23fb4:	e014      	b.n	23fe0 <z_impl_k_thread_suspend+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fb6:	4d1c      	ldr	r5, [pc, #112]	; (24028 <z_impl_k_thread_suspend+0xc4>)
   23fb8:	22ac      	movs	r2, #172	; 0xac
   23fba:	4629      	mov	r1, r5
   23fbc:	481b      	ldr	r0, [pc, #108]	; (2402c <z_impl_k_thread_suspend+0xc8>)
   23fbe:	f004 f9c0 	bl	28342 <printk>
   23fc2:	21ac      	movs	r1, #172	; 0xac
   23fc4:	4628      	mov	r0, r5
   23fc6:	f004 fd55 	bl	28a74 <assert_post_action>
	__asm__ volatile(
   23fca:	f386 8811 	msr	BASEPRI, r6
   23fce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   23fd2:	2501      	movs	r5, #1
   23fd4:	b9b5      	cbnz	r5, 24004 <z_impl_k_thread_suspend+0xa0>
	return (thread->base.thread_state & state) != 0U;
   23fd6:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   23fd8:	f994 300d 	ldrsb.w	r3, [r4, #13]
   23fdc:	2b00      	cmp	r3, #0
   23fde:	dbe2      	blt.n	23fa6 <z_impl_k_thread_suspend+0x42>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23fe0:	7b63      	ldrb	r3, [r4, #13]
   23fe2:	f043 0310 	orr.w	r3, r3, #16
   23fe6:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   23fe8:	4b12      	ldr	r3, [pc, #72]	; (24034 <z_impl_k_thread_suspend+0xd0>)
   23fea:	6898      	ldr	r0, [r3, #8]
   23fec:	42a0      	cmp	r0, r4
   23fee:	bf14      	ite	ne
   23ff0:	2000      	movne	r0, #0
   23ff2:	2001      	moveq	r0, #1
   23ff4:	f7ff fbfe 	bl	237f4 <update_cache>
   23ff8:	480a      	ldr	r0, [pc, #40]	; (24024 <z_impl_k_thread_suspend+0xc0>)
   23ffa:	f7fd ff5d 	bl	21eb8 <z_spin_unlock_valid>
   23ffe:	2800      	cmp	r0, #0
   24000:	d1e3      	bne.n	23fca <z_impl_k_thread_suspend+0x66>
   24002:	e7d8      	b.n	23fb6 <z_impl_k_thread_suspend+0x52>
	if (thread == _current) {
   24004:	4b0b      	ldr	r3, [pc, #44]	; (24034 <z_impl_k_thread_suspend+0xd0>)
   24006:	689b      	ldr	r3, [r3, #8]
   24008:	42a3      	cmp	r3, r4
   2400a:	d000      	beq.n	2400e <z_impl_k_thread_suspend+0xaa>
}
   2400c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   2400e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24012:	f3ef 8011 	mrs	r0, BASEPRI
   24016:	f383 8812 	msr	BASEPRI_MAX, r3
   2401a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2401e:	f00a feca 	bl	2edb6 <z_reschedule_irqlock>
   24022:	e7f3      	b.n	2400c <z_impl_k_thread_suspend+0xa8>
   24024:	20003654 	.word	0x20003654
   24028:	0002f9a4 	.word	0x0002f9a4
   2402c:	0002f968 	.word	0x0002f968
   24030:	2000362c 	.word	0x2000362c
   24034:	2000360c 	.word	0x2000360c

00024038 <k_sched_unlock>:
{
   24038:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   2403a:	2400      	movs	r4, #0
   2403c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24040:	f3ef 8511 	mrs	r5, BASEPRI
   24044:	f383 8812 	msr	BASEPRI_MAX, r3
   24048:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2404c:	482f      	ldr	r0, [pc, #188]	; (2410c <k_sched_unlock+0xd4>)
   2404e:	f7fd ff23 	bl	21e98 <z_spin_lock_valid>
   24052:	b118      	cbz	r0, 2405c <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
   24054:	482d      	ldr	r0, [pc, #180]	; (2410c <k_sched_unlock+0xd4>)
   24056:	f7fd ff3f 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   2405a:	e033      	b.n	240c4 <k_sched_unlock+0x8c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2405c:	4e2c      	ldr	r6, [pc, #176]	; (24110 <k_sched_unlock+0xd8>)
   2405e:	2281      	movs	r2, #129	; 0x81
   24060:	4631      	mov	r1, r6
   24062:	482c      	ldr	r0, [pc, #176]	; (24114 <k_sched_unlock+0xdc>)
   24064:	f004 f96d 	bl	28342 <printk>
   24068:	2181      	movs	r1, #129	; 0x81
   2406a:	4630      	mov	r0, r6
   2406c:	f004 fd02 	bl	28a74 <assert_post_action>
   24070:	e7f0      	b.n	24054 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
   24072:	4c29      	ldr	r4, [pc, #164]	; (24118 <k_sched_unlock+0xe0>)
   24074:	f240 3255 	movw	r2, #853	; 0x355
   24078:	4621      	mov	r1, r4
   2407a:	4826      	ldr	r0, [pc, #152]	; (24114 <k_sched_unlock+0xdc>)
   2407c:	f004 f961 	bl	28342 <printk>
   24080:	f240 3155 	movw	r1, #853	; 0x355
   24084:	4620      	mov	r0, r4
   24086:	f004 fcf5 	bl	28a74 <assert_post_action>
   2408a:	e021      	b.n	240d0 <k_sched_unlock+0x98>
		__ASSERT(!arch_is_in_isr(), "");
   2408c:	4c22      	ldr	r4, [pc, #136]	; (24118 <k_sched_unlock+0xe0>)
   2408e:	f240 3256 	movw	r2, #854	; 0x356
   24092:	4621      	mov	r1, r4
   24094:	481f      	ldr	r0, [pc, #124]	; (24114 <k_sched_unlock+0xdc>)
   24096:	f004 f954 	bl	28342 <printk>
   2409a:	f240 3156 	movw	r1, #854	; 0x356
   2409e:	4620      	mov	r0, r4
   240a0:	f004 fce8 	bl	28a74 <assert_post_action>
   240a4:	e018      	b.n	240d8 <k_sched_unlock+0xa0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   240a6:	4c1a      	ldr	r4, [pc, #104]	; (24110 <k_sched_unlock+0xd8>)
   240a8:	22ac      	movs	r2, #172	; 0xac
   240aa:	4621      	mov	r1, r4
   240ac:	4819      	ldr	r0, [pc, #100]	; (24114 <k_sched_unlock+0xdc>)
   240ae:	f004 f948 	bl	28342 <printk>
   240b2:	21ac      	movs	r1, #172	; 0xac
   240b4:	4620      	mov	r0, r4
   240b6:	f004 fcdd 	bl	28a74 <assert_post_action>
	__asm__ volatile(
   240ba:	f385 8811 	msr	BASEPRI, r5
   240be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   240c2:	2401      	movs	r4, #1
   240c4:	b9b4      	cbnz	r4, 240f4 <k_sched_unlock+0xbc>
		__ASSERT(_current->base.sched_locked != 0U, "");
   240c6:	4b15      	ldr	r3, [pc, #84]	; (2411c <k_sched_unlock+0xe4>)
   240c8:	689b      	ldr	r3, [r3, #8]
   240ca:	7bdb      	ldrb	r3, [r3, #15]
   240cc:	2b00      	cmp	r3, #0
   240ce:	d0d0      	beq.n	24072 <k_sched_unlock+0x3a>
   240d0:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   240d4:	2b00      	cmp	r3, #0
   240d6:	d1d9      	bne.n	2408c <k_sched_unlock+0x54>
		++_current->base.sched_locked;
   240d8:	4b10      	ldr	r3, [pc, #64]	; (2411c <k_sched_unlock+0xe4>)
   240da:	689a      	ldr	r2, [r3, #8]
   240dc:	7bd3      	ldrb	r3, [r2, #15]
   240de:	3301      	adds	r3, #1
   240e0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   240e2:	2000      	movs	r0, #0
   240e4:	f7ff fb86 	bl	237f4 <update_cache>
   240e8:	4808      	ldr	r0, [pc, #32]	; (2410c <k_sched_unlock+0xd4>)
   240ea:	f7fd fee5 	bl	21eb8 <z_spin_unlock_valid>
   240ee:	2800      	cmp	r0, #0
   240f0:	d1e3      	bne.n	240ba <k_sched_unlock+0x82>
   240f2:	e7d8      	b.n	240a6 <k_sched_unlock+0x6e>
	__asm__ volatile(
   240f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   240f8:	f3ef 8011 	mrs	r0, BASEPRI
   240fc:	f383 8812 	msr	BASEPRI_MAX, r3
   24100:	f3bf 8f6f 	isb	sy
   24104:	f00a fe57 	bl	2edb6 <z_reschedule_irqlock>
}
   24108:	bd70      	pop	{r4, r5, r6, pc}
   2410a:	bf00      	nop
   2410c:	20003654 	.word	0x20003654
   24110:	0002f9a4 	.word	0x0002f9a4
   24114:	0002f968 	.word	0x0002f968
   24118:	00033314 	.word	0x00033314
   2411c:	2000360c 	.word	0x2000360c

00024120 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   24120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   24122:	7b43      	ldrb	r3, [r0, #13]
   24124:	f013 0f08 	tst.w	r3, #8
   24128:	d145      	bne.n	241b6 <end_thread+0x96>
   2412a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   2412c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24130:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24134:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   24136:	f013 0f80 	tst.w	r3, #128	; 0x80
   2413a:	d114      	bne.n	24166 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   2413c:	68ab      	ldr	r3, [r5, #8]
   2413e:	b15b      	cbz	r3, 24158 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24140:	4628      	mov	r0, r5
   24142:	f7ff f9ad 	bl	234a0 <pended_on_thread>
   24146:	4629      	mov	r1, r5
   24148:	f7ff fae8 	bl	2371c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2414c:	7b6b      	ldrb	r3, [r5, #13]
   2414e:	f023 0302 	bic.w	r3, r3, #2
   24152:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   24154:	2300      	movs	r3, #0
   24156:	60ab      	str	r3, [r5, #8]
   24158:	f105 0018 	add.w	r0, r5, #24
   2415c:	f000 fc50 	bl	24a00 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   24160:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24164:	e01c      	b.n	241a0 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2416a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   2416c:	4601      	mov	r1, r0
   2416e:	4812      	ldr	r0, [pc, #72]	; (241b8 <end_thread+0x98>)
   24170:	f7ff fad4 	bl	2371c <z_priq_dumb_remove>
}
   24174:	e7e2      	b.n	2413c <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24176:	4620      	mov	r0, r4
   24178:	f7ff f992 	bl	234a0 <pended_on_thread>
   2417c:	4621      	mov	r1, r4
   2417e:	f7ff facd 	bl	2371c <z_priq_dumb_remove>
   24182:	7b63      	ldrb	r3, [r4, #13]
   24184:	f023 0302 	bic.w	r3, r3, #2
   24188:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2418a:	2600      	movs	r6, #0
   2418c:	60a6      	str	r6, [r4, #8]
   2418e:	f104 0018 	add.w	r0, r4, #24
   24192:	f000 fc35 	bl	24a00 <z_abort_timeout>
   24196:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   2419a:	4620      	mov	r0, r4
   2419c:	f7ff fc3e 	bl	23a1c <ready_thread>
	return list->head == list;
   241a0:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   241a2:	42bc      	cmp	r4, r7
   241a4:	d001      	beq.n	241aa <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   241a6:	2c00      	cmp	r4, #0
   241a8:	d1e5      	bne.n	24176 <end_thread+0x56>
		update_cache(1);
   241aa:	2001      	movs	r0, #1
   241ac:	f7ff fb22 	bl	237f4 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   241b0:	4628      	mov	r0, r5
   241b2:	f7fd fe99 	bl	21ee8 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   241b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   241b8:	2000362c 	.word	0x2000362c

000241bc <z_unpend_first_thread>:
{
   241bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   241be:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
   241c0:	2500      	movs	r5, #0
   241c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   241c6:	f3ef 8611 	mrs	r6, BASEPRI
   241ca:	f383 8812 	msr	BASEPRI_MAX, r3
   241ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241d2:	4820      	ldr	r0, [pc, #128]	; (24254 <z_unpend_first_thread+0x98>)
   241d4:	f7fd fe60 	bl	21e98 <z_spin_lock_valid>
   241d8:	b120      	cbz	r0, 241e4 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
   241da:	481e      	ldr	r0, [pc, #120]	; (24254 <z_unpend_first_thread+0x98>)
   241dc:	f7fd fe7c 	bl	21ed8 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   241e0:	2400      	movs	r4, #0
	return k;
   241e2:	e022      	b.n	2422a <z_unpend_first_thread+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241e4:	4c1c      	ldr	r4, [pc, #112]	; (24258 <z_unpend_first_thread+0x9c>)
   241e6:	2281      	movs	r2, #129	; 0x81
   241e8:	4621      	mov	r1, r4
   241ea:	481c      	ldr	r0, [pc, #112]	; (2425c <z_unpend_first_thread+0xa0>)
   241ec:	f004 f8a9 	bl	28342 <printk>
   241f0:	2181      	movs	r1, #129	; 0x81
   241f2:	4620      	mov	r0, r4
   241f4:	f004 fc3e 	bl	28a74 <assert_post_action>
   241f8:	e7ef      	b.n	241da <z_unpend_first_thread+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   241fa:	f7ff f951 	bl	234a0 <pended_on_thread>
   241fe:	4621      	mov	r1, r4
   24200:	f7ff fa8c 	bl	2371c <z_priq_dumb_remove>
   24204:	7b63      	ldrb	r3, [r4, #13]
   24206:	f023 0302 	bic.w	r3, r3, #2
   2420a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2420c:	2300      	movs	r3, #0
   2420e:	60a3      	str	r3, [r4, #8]
   24210:	f104 0018 	add.w	r0, r4, #24
   24214:	f000 fbf4 	bl	24a00 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24218:	480e      	ldr	r0, [pc, #56]	; (24254 <z_unpend_first_thread+0x98>)
   2421a:	f7fd fe4d 	bl	21eb8 <z_spin_unlock_valid>
   2421e:	b160      	cbz	r0, 2423a <z_unpend_first_thread+0x7e>
	__asm__ volatile(
   24220:	f386 8811 	msr	BASEPRI, r6
   24224:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24228:	2501      	movs	r5, #1
   2422a:	b98d      	cbnz	r5, 24250 <z_unpend_first_thread+0x94>
		thread = _priq_wait_best(&wait_q->waitq);
   2422c:	4638      	mov	r0, r7
   2422e:	f00a fdd7 	bl	2ede0 <z_priq_dumb_best>
		if (thread != NULL) {
   24232:	4604      	mov	r4, r0
   24234:	2800      	cmp	r0, #0
   24236:	d1e0      	bne.n	241fa <z_unpend_first_thread+0x3e>
   24238:	e7ee      	b.n	24218 <z_unpend_first_thread+0x5c>
   2423a:	4d07      	ldr	r5, [pc, #28]	; (24258 <z_unpend_first_thread+0x9c>)
   2423c:	22ac      	movs	r2, #172	; 0xac
   2423e:	4629      	mov	r1, r5
   24240:	4806      	ldr	r0, [pc, #24]	; (2425c <z_unpend_first_thread+0xa0>)
   24242:	f004 f87e 	bl	28342 <printk>
   24246:	21ac      	movs	r1, #172	; 0xac
   24248:	4628      	mov	r0, r5
   2424a:	f004 fc13 	bl	28a74 <assert_post_action>
   2424e:	e7e7      	b.n	24220 <z_unpend_first_thread+0x64>
}
   24250:	4620      	mov	r0, r4
   24252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24254:	20003654 	.word	0x20003654
   24258:	0002f9a4 	.word	0x0002f9a4
   2425c:	0002f968 	.word	0x0002f968

00024260 <z_sched_init>:
{
   24260:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   24262:	4b05      	ldr	r3, [pc, #20]	; (24278 <z_sched_init+0x18>)
   24264:	f103 0220 	add.w	r2, r3, #32
   24268:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   2426a:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2426c:	2100      	movs	r1, #0
   2426e:	4608      	mov	r0, r1
   24270:	f7ff f954 	bl	2351c <k_sched_time_slice_set>
}
   24274:	bd08      	pop	{r3, pc}
   24276:	bf00      	nop
   24278:	2000360c 	.word	0x2000360c

0002427c <z_impl_k_yield>:
{
   2427c:	b570      	push	{r4, r5, r6, lr}
   2427e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   24282:	2b00      	cmp	r3, #0
   24284:	d148      	bne.n	24318 <z_impl_k_yield+0x9c>
	__asm__ volatile(
   24286:	f04f 0340 	mov.w	r3, #64	; 0x40
   2428a:	f3ef 8611 	mrs	r6, BASEPRI
   2428e:	f383 8812 	msr	BASEPRI_MAX, r3
   24292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24296:	483b      	ldr	r0, [pc, #236]	; (24384 <z_impl_k_yield+0x108>)
   24298:	f7fd fdfe 	bl	21e98 <z_spin_lock_valid>
   2429c:	2800      	cmp	r0, #0
   2429e:	d048      	beq.n	24332 <z_impl_k_yield+0xb6>
	z_spin_lock_set_owner(l);
   242a0:	4838      	ldr	r0, [pc, #224]	; (24384 <z_impl_k_yield+0x108>)
   242a2:	f7fd fe19 	bl	21ed8 <z_spin_lock_set_owner>
		dequeue_thread(&_kernel.ready_q.runq,
   242a6:	4c38      	ldr	r4, [pc, #224]	; (24388 <z_impl_k_yield+0x10c>)
   242a8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   242aa:	7b4b      	ldrb	r3, [r1, #13]
   242ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   242b0:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   242b2:	f104 0020 	add.w	r0, r4, #32
   242b6:	f7ff fa31 	bl	2371c <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   242ba:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   242bc:	7b6b      	ldrb	r3, [r5, #13]
   242be:	f063 037f 	orn	r3, r3, #127	; 0x7f
   242c2:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   242c4:	4b31      	ldr	r3, [pc, #196]	; (2438c <z_impl_k_yield+0x110>)
   242c6:	429d      	cmp	r5, r3
   242c8:	d03e      	beq.n	24348 <z_impl_k_yield+0xcc>
	return list->head == list;
   242ca:	4b2f      	ldr	r3, [pc, #188]	; (24388 <z_impl_k_yield+0x10c>)
   242cc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   242d0:	429c      	cmp	r4, r3
   242d2:	d04a      	beq.n	2436a <z_impl_k_yield+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   242d4:	b16c      	cbz	r4, 242f2 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   242d6:	4621      	mov	r1, r4
   242d8:	4628      	mov	r0, r5
   242da:	f00a fd62 	bl	2eda2 <z_sched_prio_cmp>
   242de:	2800      	cmp	r0, #0
   242e0:	dc3d      	bgt.n	2435e <z_impl_k_yield+0xe2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   242e2:	b134      	cbz	r4, 242f2 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
   242e4:	4b28      	ldr	r3, [pc, #160]	; (24388 <z_impl_k_yield+0x10c>)
   242e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   242e8:	429c      	cmp	r4, r3
   242ea:	d002      	beq.n	242f2 <z_impl_k_yield+0x76>
   242ec:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   242ee:	2c00      	cmp	r4, #0
   242f0:	d1f0      	bne.n	242d4 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
   242f2:	4b25      	ldr	r3, [pc, #148]	; (24388 <z_impl_k_yield+0x10c>)
   242f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   242f6:	f103 0120 	add.w	r1, r3, #32
   242fa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   242fc:	606a      	str	r2, [r5, #4]
	tail->next = node;
   242fe:	6015      	str	r5, [r2, #0]
	list->tail = node;
   24300:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   24302:	2001      	movs	r0, #1
   24304:	f7ff fa76 	bl	237f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24308:	481e      	ldr	r0, [pc, #120]	; (24384 <z_impl_k_yield+0x108>)
   2430a:	f7fd fdd5 	bl	21eb8 <z_spin_unlock_valid>
   2430e:	b370      	cbz	r0, 2436e <z_impl_k_yield+0xf2>
   24310:	4630      	mov	r0, r6
   24312:	f7ef f815 	bl	13340 <arch_swap>
}
   24316:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   24318:	4c1d      	ldr	r4, [pc, #116]	; (24390 <z_impl_k_yield+0x114>)
   2431a:	f240 42a1 	movw	r2, #1185	; 0x4a1
   2431e:	4621      	mov	r1, r4
   24320:	481c      	ldr	r0, [pc, #112]	; (24394 <z_impl_k_yield+0x118>)
   24322:	f004 f80e 	bl	28342 <printk>
   24326:	f240 41a1 	movw	r1, #1185	; 0x4a1
   2432a:	4620      	mov	r0, r4
   2432c:	f004 fba2 	bl	28a74 <assert_post_action>
   24330:	e7a9      	b.n	24286 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24332:	4c19      	ldr	r4, [pc, #100]	; (24398 <z_impl_k_yield+0x11c>)
   24334:	2281      	movs	r2, #129	; 0x81
   24336:	4621      	mov	r1, r4
   24338:	4816      	ldr	r0, [pc, #88]	; (24394 <z_impl_k_yield+0x118>)
   2433a:	f004 f802 	bl	28342 <printk>
   2433e:	2181      	movs	r1, #129	; 0x81
   24340:	4620      	mov	r0, r4
   24342:	f004 fb97 	bl	28a74 <assert_post_action>
   24346:	e7ab      	b.n	242a0 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24348:	4c11      	ldr	r4, [pc, #68]	; (24390 <z_impl_k_yield+0x114>)
   2434a:	22b1      	movs	r2, #177	; 0xb1
   2434c:	4621      	mov	r1, r4
   2434e:	4811      	ldr	r0, [pc, #68]	; (24394 <z_impl_k_yield+0x118>)
   24350:	f003 fff7 	bl	28342 <printk>
   24354:	21b1      	movs	r1, #177	; 0xb1
   24356:	4620      	mov	r0, r4
   24358:	f004 fb8c 	bl	28a74 <assert_post_action>
   2435c:	e7b5      	b.n	242ca <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
   2435e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   24360:	606b      	str	r3, [r5, #4]
	node->next = successor;
   24362:	602c      	str	r4, [r5, #0]
	prev->next = node;
   24364:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   24366:	6065      	str	r5, [r4, #4]
}
   24368:	e7cb      	b.n	24302 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2436a:	2400      	movs	r4, #0
   2436c:	e7b2      	b.n	242d4 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2436e:	4c0a      	ldr	r4, [pc, #40]	; (24398 <z_impl_k_yield+0x11c>)
   24370:	22c3      	movs	r2, #195	; 0xc3
   24372:	4621      	mov	r1, r4
   24374:	4807      	ldr	r0, [pc, #28]	; (24394 <z_impl_k_yield+0x118>)
   24376:	f003 ffe4 	bl	28342 <printk>
   2437a:	21c3      	movs	r1, #195	; 0xc3
   2437c:	4620      	mov	r0, r4
   2437e:	f004 fb79 	bl	28a74 <assert_post_action>
   24382:	e7c5      	b.n	24310 <z_impl_k_yield+0x94>
   24384:	20003654 	.word	0x20003654
   24388:	2000360c 	.word	0x2000360c
   2438c:	20001e50 	.word	0x20001e50
   24390:	00033314 	.word	0x00033314
   24394:	0002f968 	.word	0x0002f968
   24398:	0002f9a4 	.word	0x0002f9a4

0002439c <z_tick_sleep>:
{
   2439c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   243a0:	4604      	mov	r4, r0
   243a2:	460d      	mov	r5, r1
   243a4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   243a8:	2b00      	cmp	r3, #0
   243aa:	d14e      	bne.n	2444a <z_tick_sleep+0xae>
	if (ticks == 0) {
   243ac:	ea54 0305 	orrs.w	r3, r4, r5
   243b0:	d059      	beq.n	24466 <z_tick_sleep+0xca>
	if (Z_TICK_ABS(ticks) <= 0) {
   243b2:	f06f 0301 	mvn.w	r3, #1
   243b6:	1b1e      	subs	r6, r3, r4
   243b8:	f04f 33ff 	mov.w	r3, #4294967295
   243bc:	eb63 0705 	sbc.w	r7, r3, r5
   243c0:	2e01      	cmp	r6, #1
   243c2:	f177 0300 	sbcs.w	r3, r7, #0
   243c6:	db52      	blt.n	2446e <z_tick_sleep+0xd2>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   243c8:	f06f 0601 	mvn.w	r6, #1
   243cc:	1b36      	subs	r6, r6, r4
   243ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   243d2:	f3ef 8911 	mrs	r9, BASEPRI
   243d6:	f383 8812 	msr	BASEPRI_MAX, r3
   243da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   243de:	4838      	ldr	r0, [pc, #224]	; (244c0 <z_tick_sleep+0x124>)
   243e0:	f7fd fd5a 	bl	21e98 <z_spin_lock_valid>
   243e4:	2800      	cmp	r0, #0
   243e6:	d046      	beq.n	24476 <z_tick_sleep+0xda>
	z_spin_lock_set_owner(l);
   243e8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 244c0 <z_tick_sleep+0x124>
   243ec:	4640      	mov	r0, r8
   243ee:	f7fd fd73 	bl	21ed8 <z_spin_lock_set_owner>
	pending_current = _current;
   243f2:	4f34      	ldr	r7, [pc, #208]	; (244c4 <z_tick_sleep+0x128>)
   243f4:	68b8      	ldr	r0, [r7, #8]
   243f6:	4b34      	ldr	r3, [pc, #208]	; (244c8 <z_tick_sleep+0x12c>)
   243f8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   243fa:	f7ff fc4b 	bl	23c94 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   243fe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24400:	4622      	mov	r2, r4
   24402:	462b      	mov	r3, r5
   24404:	4931      	ldr	r1, [pc, #196]	; (244cc <z_tick_sleep+0x130>)
   24406:	3018      	adds	r0, #24
   24408:	f000 fa16 	bl	24838 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2440c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2440e:	7b53      	ldrb	r3, [r2, #13]
   24410:	f043 0310 	orr.w	r3, r3, #16
   24414:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24416:	4640      	mov	r0, r8
   24418:	f7fd fd4e 	bl	21eb8 <z_spin_unlock_valid>
   2441c:	b3b0      	cbz	r0, 2448c <z_tick_sleep+0xf0>
   2441e:	4648      	mov	r0, r9
   24420:	f7ee ff8e 	bl	13340 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   24424:	4b27      	ldr	r3, [pc, #156]	; (244c4 <z_tick_sleep+0x128>)
   24426:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
   24428:	7b5b      	ldrb	r3, [r3, #13]
   2442a:	f013 0f10 	tst.w	r3, #16
   2442e:	d138      	bne.n	244a2 <z_tick_sleep+0x106>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   24430:	2500      	movs	r5, #0
   24432:	f00a fd04 	bl	2ee3e <sys_clock_tick_get_32>
   24436:	1a34      	subs	r4, r6, r0
   24438:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   2443c:	2c01      	cmp	r4, #1
   2443e:	f175 0300 	sbcs.w	r3, r5, #0
   24442:	da3b      	bge.n	244bc <z_tick_sleep+0x120>
	return 0;
   24444:	2000      	movs	r0, #0
}
   24446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
   2444a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 244d8 <z_tick_sleep+0x13c>
   2444e:	f240 42be 	movw	r2, #1214	; 0x4be
   24452:	4641      	mov	r1, r8
   24454:	481e      	ldr	r0, [pc, #120]	; (244d0 <z_tick_sleep+0x134>)
   24456:	f003 ff74 	bl	28342 <printk>
   2445a:	f240 41be 	movw	r1, #1214	; 0x4be
   2445e:	4640      	mov	r0, r8
   24460:	f004 fb08 	bl	28a74 <assert_post_action>
   24464:	e7a2      	b.n	243ac <z_tick_sleep+0x10>
	z_impl_k_yield();
   24466:	f7ff ff09 	bl	2427c <z_impl_k_yield>
		return 0;
   2446a:	2000      	movs	r0, #0
   2446c:	e7eb      	b.n	24446 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2446e:	f00a fce6 	bl	2ee3e <sys_clock_tick_get_32>
   24472:	1906      	adds	r6, r0, r4
   24474:	e7ab      	b.n	243ce <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24476:	4f17      	ldr	r7, [pc, #92]	; (244d4 <z_tick_sleep+0x138>)
   24478:	2281      	movs	r2, #129	; 0x81
   2447a:	4639      	mov	r1, r7
   2447c:	4814      	ldr	r0, [pc, #80]	; (244d0 <z_tick_sleep+0x134>)
   2447e:	f003 ff60 	bl	28342 <printk>
   24482:	2181      	movs	r1, #129	; 0x81
   24484:	4638      	mov	r0, r7
   24486:	f004 faf5 	bl	28a74 <assert_post_action>
   2448a:	e7ad      	b.n	243e8 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2448c:	4c11      	ldr	r4, [pc, #68]	; (244d4 <z_tick_sleep+0x138>)
   2448e:	22c3      	movs	r2, #195	; 0xc3
   24490:	4621      	mov	r1, r4
   24492:	480f      	ldr	r0, [pc, #60]	; (244d0 <z_tick_sleep+0x134>)
   24494:	f003 ff55 	bl	28342 <printk>
   24498:	21c3      	movs	r1, #195	; 0xc3
   2449a:	4620      	mov	r0, r4
   2449c:	f004 faea 	bl	28a74 <assert_post_action>
   244a0:	e7bd      	b.n	2441e <z_tick_sleep+0x82>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   244a2:	4c0d      	ldr	r4, [pc, #52]	; (244d8 <z_tick_sleep+0x13c>)
   244a4:	f240 42df 	movw	r2, #1247	; 0x4df
   244a8:	4621      	mov	r1, r4
   244aa:	4809      	ldr	r0, [pc, #36]	; (244d0 <z_tick_sleep+0x134>)
   244ac:	f003 ff49 	bl	28342 <printk>
   244b0:	f240 41df 	movw	r1, #1247	; 0x4df
   244b4:	4620      	mov	r0, r4
   244b6:	f004 fadd 	bl	28a74 <assert_post_action>
   244ba:	e7b9      	b.n	24430 <z_tick_sleep+0x94>
		return ticks;
   244bc:	4620      	mov	r0, r4
   244be:	e7c2      	b.n	24446 <z_tick_sleep+0xaa>
   244c0:	20003654 	.word	0x20003654
   244c4:	2000360c 	.word	0x2000360c
   244c8:	20003650 	.word	0x20003650
   244cc:	00023bd9 	.word	0x00023bd9
   244d0:	0002f968 	.word	0x0002f968
   244d4:	0002f9a4 	.word	0x0002f9a4
   244d8:	00033314 	.word	0x00033314

000244dc <z_impl_k_sleep>:
{
   244dc:	b570      	push	{r4, r5, r6, lr}
   244de:	4604      	mov	r4, r0
   244e0:	460d      	mov	r5, r1
   244e2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   244e6:	bb13      	cbnz	r3, 2452e <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   244e8:	f1b5 3fff 	cmp.w	r5, #4294967295
   244ec:	bf08      	it	eq
   244ee:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   244f2:	d029      	beq.n	24548 <z_impl_k_sleep+0x6c>
	ticks = z_tick_sleep(ticks);
   244f4:	4620      	mov	r0, r4
   244f6:	4629      	mov	r1, r5
   244f8:	f7ff ff50 	bl	2439c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   244fc:	4604      	mov	r4, r0
   244fe:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   24500:	0169      	lsls	r1, r5, #5
   24502:	0143      	lsls	r3, r0, #5
   24504:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   24508:	1a18      	subs	r0, r3, r0
   2450a:	eb62 0305 	sbc.w	r3, r2, r5
   2450e:	009a      	lsls	r2, r3, #2
   24510:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   24514:	0081      	lsls	r1, r0, #2
   24516:	4613      	mov	r3, r2
   24518:	1908      	adds	r0, r1, r4
   2451a:	eb45 0303 	adc.w	r3, r5, r3
   2451e:	00da      	lsls	r2, r3, #3
   24520:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   24524:	00c1      	lsls	r1, r0, #3
   24526:	0bc8      	lsrs	r0, r1, #15
   24528:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   2452c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   2452e:	4e0a      	ldr	r6, [pc, #40]	; (24558 <z_impl_k_sleep+0x7c>)
   24530:	f240 42ee 	movw	r2, #1262	; 0x4ee
   24534:	4631      	mov	r1, r6
   24536:	4809      	ldr	r0, [pc, #36]	; (2455c <z_impl_k_sleep+0x80>)
   24538:	f003 ff03 	bl	28342 <printk>
   2453c:	f240 41ee 	movw	r1, #1262	; 0x4ee
   24540:	4630      	mov	r0, r6
   24542:	f004 fa97 	bl	28a74 <assert_post_action>
   24546:	e7cf      	b.n	244e8 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
   24548:	4b05      	ldr	r3, [pc, #20]	; (24560 <z_impl_k_sleep+0x84>)
   2454a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2454c:	f7ff fd0a 	bl	23f64 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   24550:	f04f 30ff 	mov.w	r0, #4294967295
   24554:	e7ea      	b.n	2452c <z_impl_k_sleep+0x50>
   24556:	bf00      	nop
   24558:	00033314 	.word	0x00033314
   2455c:	0002f968 	.word	0x0002f968
   24560:	2000360c 	.word	0x2000360c

00024564 <z_impl_z_current_get>:
}
   24564:	4b01      	ldr	r3, [pc, #4]	; (2456c <z_impl_z_current_get+0x8>)
   24566:	6898      	ldr	r0, [r3, #8]
   24568:	4770      	bx	lr
   2456a:	bf00      	nop
   2456c:	2000360c 	.word	0x2000360c

00024570 <z_impl_k_is_preempt_thread>:
   24570:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   24574:	b933      	cbnz	r3, 24584 <z_impl_k_is_preempt_thread+0x14>
   24576:	4b05      	ldr	r3, [pc, #20]	; (2458c <z_impl_k_is_preempt_thread+0x1c>)
   24578:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2457a:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   2457c:	2b7f      	cmp	r3, #127	; 0x7f
   2457e:	d803      	bhi.n	24588 <z_impl_k_is_preempt_thread+0x18>
   24580:	2001      	movs	r0, #1
   24582:	4770      	bx	lr
   24584:	2000      	movs	r0, #0
   24586:	4770      	bx	lr
   24588:	2000      	movs	r0, #0
}
   2458a:	4770      	bx	lr
   2458c:	2000360c 	.word	0x2000360c

00024590 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   24590:	b570      	push	{r4, r5, r6, lr}
   24592:	4604      	mov	r4, r0
   24594:	f04f 0340 	mov.w	r3, #64	; 0x40
   24598:	f3ef 8511 	mrs	r5, BASEPRI
   2459c:	f383 8812 	msr	BASEPRI_MAX, r3
   245a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245a4:	4834      	ldr	r0, [pc, #208]	; (24678 <z_thread_abort+0xe8>)
   245a6:	f7fd fc77 	bl	21e98 <z_spin_lock_valid>
   245aa:	b1b8      	cbz	r0, 245dc <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
   245ac:	4832      	ldr	r0, [pc, #200]	; (24678 <z_thread_abort+0xe8>)
   245ae:	f7fd fc93 	bl	21ed8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   245b2:	7b63      	ldrb	r3, [r4, #13]
   245b4:	f013 0f08 	tst.w	r3, #8
   245b8:	d11b      	bne.n	245f2 <z_thread_abort+0x62>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
   245ba:	4620      	mov	r0, r4
   245bc:	f7ff fdb0 	bl	24120 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   245c0:	4b2e      	ldr	r3, [pc, #184]	; (2467c <z_thread_abort+0xec>)
   245c2:	689b      	ldr	r3, [r3, #8]
   245c4:	42a3      	cmp	r3, r4
   245c6:	d028      	beq.n	2461a <z_thread_abort+0x8a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   245c8:	482b      	ldr	r0, [pc, #172]	; (24678 <z_thread_abort+0xe8>)
   245ca:	f7fd fc75 	bl	21eb8 <z_spin_unlock_valid>
   245ce:	2800      	cmp	r0, #0
   245d0:	d046      	beq.n	24660 <z_thread_abort+0xd0>
	__asm__ volatile(
   245d2:	f385 8811 	msr	BASEPRI, r5
   245d6:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   245da:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245dc:	4e28      	ldr	r6, [pc, #160]	; (24680 <z_thread_abort+0xf0>)
   245de:	2281      	movs	r2, #129	; 0x81
   245e0:	4631      	mov	r1, r6
   245e2:	4828      	ldr	r0, [pc, #160]	; (24684 <z_thread_abort+0xf4>)
   245e4:	f003 fead 	bl	28342 <printk>
   245e8:	2181      	movs	r1, #129	; 0x81
   245ea:	4630      	mov	r0, r6
   245ec:	f004 fa42 	bl	28a74 <assert_post_action>
   245f0:	e7dc      	b.n	245ac <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   245f2:	4821      	ldr	r0, [pc, #132]	; (24678 <z_thread_abort+0xe8>)
   245f4:	f7fd fc60 	bl	21eb8 <z_spin_unlock_valid>
   245f8:	b120      	cbz	r0, 24604 <z_thread_abort+0x74>
   245fa:	f385 8811 	msr	BASEPRI, r5
   245fe:	f3bf 8f6f 	isb	sy
		return;
   24602:	e7ea      	b.n	245da <z_thread_abort+0x4a>
   24604:	4c1e      	ldr	r4, [pc, #120]	; (24680 <z_thread_abort+0xf0>)
   24606:	22ac      	movs	r2, #172	; 0xac
   24608:	4621      	mov	r1, r4
   2460a:	481e      	ldr	r0, [pc, #120]	; (24684 <z_thread_abort+0xf4>)
   2460c:	f003 fe99 	bl	28342 <printk>
   24610:	21ac      	movs	r1, #172	; 0xac
   24612:	4620      	mov	r0, r4
   24614:	f004 fa2e 	bl	28a74 <assert_post_action>
   24618:	e7ef      	b.n	245fa <z_thread_abort+0x6a>
   2461a:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
   2461e:	2b00      	cmp	r3, #0
   24620:	d1d2      	bne.n	245c8 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24622:	4815      	ldr	r0, [pc, #84]	; (24678 <z_thread_abort+0xe8>)
   24624:	f7fd fc48 	bl	21eb8 <z_spin_unlock_valid>
   24628:	b178      	cbz	r0, 2464a <z_thread_abort+0xba>
   2462a:	4628      	mov	r0, r5
   2462c:	f7ee fe88 	bl	13340 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   24630:	4c15      	ldr	r4, [pc, #84]	; (24688 <z_thread_abort+0xf8>)
   24632:	f240 6209 	movw	r2, #1545	; 0x609
   24636:	4621      	mov	r1, r4
   24638:	4812      	ldr	r0, [pc, #72]	; (24684 <z_thread_abort+0xf4>)
   2463a:	f003 fe82 	bl	28342 <printk>
   2463e:	f240 6109 	movw	r1, #1545	; 0x609
   24642:	4620      	mov	r0, r4
   24644:	f004 fa16 	bl	28a74 <assert_post_action>
   24648:	e7be      	b.n	245c8 <z_thread_abort+0x38>
   2464a:	4c0d      	ldr	r4, [pc, #52]	; (24680 <z_thread_abort+0xf0>)
   2464c:	22c3      	movs	r2, #195	; 0xc3
   2464e:	4621      	mov	r1, r4
   24650:	480c      	ldr	r0, [pc, #48]	; (24684 <z_thread_abort+0xf4>)
   24652:	f003 fe76 	bl	28342 <printk>
   24656:	21c3      	movs	r1, #195	; 0xc3
   24658:	4620      	mov	r0, r4
   2465a:	f004 fa0b 	bl	28a74 <assert_post_action>
   2465e:	e7e4      	b.n	2462a <z_thread_abort+0x9a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24660:	4c07      	ldr	r4, [pc, #28]	; (24680 <z_thread_abort+0xf0>)
   24662:	22ac      	movs	r2, #172	; 0xac
   24664:	4621      	mov	r1, r4
   24666:	4807      	ldr	r0, [pc, #28]	; (24684 <z_thread_abort+0xf4>)
   24668:	f003 fe6b 	bl	28342 <printk>
   2466c:	21ac      	movs	r1, #172	; 0xac
   2466e:	4620      	mov	r0, r4
   24670:	f004 fa00 	bl	28a74 <assert_post_action>
   24674:	e7ad      	b.n	245d2 <z_thread_abort+0x42>
   24676:	bf00      	nop
   24678:	20003654 	.word	0x20003654
   2467c:	2000360c 	.word	0x2000360c
   24680:	0002f9a4 	.word	0x0002f9a4
   24684:	0002f968 	.word	0x0002f968
   24688:	00033314 	.word	0x00033314

0002468c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2468c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24690:	4606      	mov	r6, r0
   24692:	460f      	mov	r7, r1
   24694:	4690      	mov	r8, r2
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
   24696:	2400      	movs	r4, #0
	__asm__ volatile(
   24698:	f04f 0340 	mov.w	r3, #64	; 0x40
   2469c:	f3ef 8511 	mrs	r5, BASEPRI
   246a0:	f383 8812 	msr	BASEPRI_MAX, r3
   246a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246a8:	4826      	ldr	r0, [pc, #152]	; (24744 <z_sched_wake+0xb8>)
   246aa:	f7fd fbf5 	bl	21e98 <z_spin_lock_valid>
   246ae:	b128      	cbz	r0, 246bc <z_sched_wake+0x30>
	z_spin_lock_set_owner(l);
   246b0:	4824      	ldr	r0, [pc, #144]	; (24744 <z_sched_wake+0xb8>)
   246b2:	f7fd fc11 	bl	21ed8 <z_spin_lock_set_owner>
	bool ret = false;
   246b6:	f04f 0900 	mov.w	r9, #0
	return k;
   246ba:	e02c      	b.n	24716 <z_sched_wake+0x8a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246bc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2474c <z_sched_wake+0xc0>
   246c0:	2281      	movs	r2, #129	; 0x81
   246c2:	4649      	mov	r1, r9
   246c4:	4820      	ldr	r0, [pc, #128]	; (24748 <z_sched_wake+0xbc>)
   246c6:	f003 fe3c 	bl	28342 <printk>
   246ca:	2181      	movs	r1, #129	; 0x81
   246cc:	4648      	mov	r0, r9
   246ce:	f004 f9d1 	bl	28a74 <assert_post_action>
   246d2:	e7ed      	b.n	246b0 <z_sched_wake+0x24>
   246d4:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   246d8:	f8c0 8014 	str.w	r8, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   246dc:	f7fe fee0 	bl	234a0 <pended_on_thread>
   246e0:	4621      	mov	r1, r4
   246e2:	f7ff f81b 	bl	2371c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   246e6:	7b63      	ldrb	r3, [r4, #13]
   246e8:	f023 0302 	bic.w	r3, r3, #2
   246ec:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   246ee:	2300      	movs	r3, #0
   246f0:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   246f2:	f104 0018 	add.w	r0, r4, #24
   246f6:	f000 f983 	bl	24a00 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   246fa:	4620      	mov	r0, r4
   246fc:	f7ff f98e 	bl	23a1c <ready_thread>
			ret = true;
   24700:	f04f 0901 	mov.w	r9, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24704:	480f      	ldr	r0, [pc, #60]	; (24744 <z_sched_wake+0xb8>)
   24706:	f7fd fbd7 	bl	21eb8 <z_spin_unlock_valid>
   2470a:	b160      	cbz	r0, 24726 <z_sched_wake+0x9a>
	__asm__ volatile(
   2470c:	f385 8811 	msr	BASEPRI, r5
   24710:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24714:	2401      	movs	r4, #1
   24716:	b98c      	cbnz	r4, 2473c <z_sched_wake+0xb0>
		thread = _priq_wait_best(&wait_q->waitq);
   24718:	4630      	mov	r0, r6
   2471a:	f00a fb61 	bl	2ede0 <z_priq_dumb_best>
		if (thread != NULL) {
   2471e:	4604      	mov	r4, r0
   24720:	2800      	cmp	r0, #0
   24722:	d1d7      	bne.n	246d4 <z_sched_wake+0x48>
   24724:	e7ee      	b.n	24704 <z_sched_wake+0x78>
   24726:	4c09      	ldr	r4, [pc, #36]	; (2474c <z_sched_wake+0xc0>)
   24728:	22ac      	movs	r2, #172	; 0xac
   2472a:	4621      	mov	r1, r4
   2472c:	4806      	ldr	r0, [pc, #24]	; (24748 <z_sched_wake+0xbc>)
   2472e:	f003 fe08 	bl	28342 <printk>
   24732:	21ac      	movs	r1, #172	; 0xac
   24734:	4620      	mov	r0, r4
   24736:	f004 f99d 	bl	28a74 <assert_post_action>
   2473a:	e7e7      	b.n	2470c <z_sched_wake+0x80>
		}
	}

	return ret;
}
   2473c:	4648      	mov	r0, r9
   2473e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24742:	bf00      	nop
   24744:	20003654 	.word	0x20003654
   24748:	0002f968 	.word	0x0002f968
   2474c:	0002f9a4 	.word	0x0002f9a4

00024750 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   24750:	b5d0      	push	{r4, r6, r7, lr}
   24752:	b082      	sub	sp, #8
   24754:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24756:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   2475a:	e9cd 6700 	strd	r6, r7, [sp]
   2475e:	f7ff fb3d 	bl	23ddc <z_pend_curr>

	if (data != NULL) {
   24762:	b11c      	cbz	r4, 2476c <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   24764:	4b02      	ldr	r3, [pc, #8]	; (24770 <z_sched_wait+0x20>)
   24766:	689b      	ldr	r3, [r3, #8]
   24768:	695b      	ldr	r3, [r3, #20]
   2476a:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2476c:	b002      	add	sp, #8
   2476e:	bdd0      	pop	{r4, r6, r7, pc}
   24770:	2000360c 	.word	0x2000360c

00024774 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   24774:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   24776:	4806      	ldr	r0, [pc, #24]	; (24790 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   24778:	4a06      	ldr	r2, [pc, #24]	; (24794 <z_data_copy+0x20>)
   2477a:	1a12      	subs	r2, r2, r0
   2477c:	4906      	ldr	r1, [pc, #24]	; (24798 <z_data_copy+0x24>)
   2477e:	f006 f88e 	bl	2a89e <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   24782:	4a06      	ldr	r2, [pc, #24]	; (2479c <z_data_copy+0x28>)
   24784:	4906      	ldr	r1, [pc, #24]	; (247a0 <z_data_copy+0x2c>)
   24786:	4807      	ldr	r0, [pc, #28]	; (247a4 <z_data_copy+0x30>)
   24788:	f006 f889 	bl	2a89e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2478c:	bd08      	pop	{r3, pc}
   2478e:	bf00      	nop
   24790:	20000000 	.word	0x20000000
   24794:	200009c0 	.word	0x200009c0
   24798:	00033560 	.word	0x00033560
   2479c:	00000000 	.word	0x00000000
   247a0:	00033560 	.word	0x00033560
   247a4:	20000000 	.word	0x20000000

000247a8 <first>:
	return list->head == list;
   247a8:	4b03      	ldr	r3, [pc, #12]	; (247b8 <first+0x10>)
   247aa:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   247ac:	4298      	cmp	r0, r3
   247ae:	d000      	beq.n	247b2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   247b0:	4770      	bx	lr
   247b2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   247b4:	e7fc      	b.n	247b0 <first+0x8>
   247b6:	bf00      	nop
   247b8:	200006b4 	.word	0x200006b4

000247bc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   247bc:	b130      	cbz	r0, 247cc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   247be:	4a04      	ldr	r2, [pc, #16]	; (247d0 <next+0x14>)
   247c0:	6852      	ldr	r2, [r2, #4]
   247c2:	4290      	cmp	r0, r2
   247c4:	d001      	beq.n	247ca <next+0xe>
   247c6:	6800      	ldr	r0, [r0, #0]
   247c8:	4770      	bx	lr
   247ca:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   247cc:	4770      	bx	lr
   247ce:	bf00      	nop
   247d0:	200006b4 	.word	0x200006b4

000247d4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   247d4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   247d6:	4b04      	ldr	r3, [pc, #16]	; (247e8 <elapsed+0x14>)
   247d8:	681b      	ldr	r3, [r3, #0]
   247da:	b10b      	cbz	r3, 247e0 <elapsed+0xc>
   247dc:	2000      	movs	r0, #0
}
   247de:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   247e0:	f7fa ffe2 	bl	1f7a8 <sys_clock_elapsed>
   247e4:	e7fb      	b.n	247de <elapsed+0xa>
   247e6:	bf00      	nop
   247e8:	20003660 	.word	0x20003660

000247ec <next_timeout>:

static int32_t next_timeout(void)
{
   247ec:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   247ee:	f7ff ffdb 	bl	247a8 <first>
   247f2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   247f4:	f7ff ffee 	bl	247d4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   247f8:	b18c      	cbz	r4, 2481e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   247fa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   247fe:	1a12      	subs	r2, r2, r0
   24800:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   24804:	2a01      	cmp	r2, #1
   24806:	f173 0100 	sbcs.w	r1, r3, #0
   2480a:	db11      	blt.n	24830 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2480c:	4610      	mov	r0, r2
   2480e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   24812:	f173 0300 	sbcs.w	r3, r3, #0
   24816:	db04      	blt.n	24822 <next_timeout+0x36>
   24818:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2481c:	e001      	b.n	24822 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   2481e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24822:	4b04      	ldr	r3, [pc, #16]	; (24834 <next_timeout+0x48>)
   24824:	691b      	ldr	r3, [r3, #16]
   24826:	b113      	cbz	r3, 2482e <next_timeout+0x42>
   24828:	4283      	cmp	r3, r0
   2482a:	da00      	bge.n	2482e <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   2482c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   2482e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   24830:	2000      	movs	r0, #0
   24832:	e7f6      	b.n	24822 <next_timeout+0x36>
   24834:	2000360c 	.word	0x2000360c

00024838 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   24838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2483c:	b087      	sub	sp, #28
   2483e:	9100      	str	r1, [sp, #0]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24840:	f1b3 3fff 	cmp.w	r3, #4294967295
   24844:	bf08      	it	eq
   24846:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2484a:	f000 80c7 	beq.w	249dc <z_add_timeout+0x1a4>
   2484e:	4604      	mov	r4, r0
   24850:	4616      	mov	r6, r2
   24852:	461f      	mov	r7, r3
	return node->next != NULL;
   24854:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24856:	b14b      	cbz	r3, 2486c <z_add_timeout+0x34>
   24858:	4d62      	ldr	r5, [pc, #392]	; (249e4 <z_add_timeout+0x1ac>)
   2485a:	225d      	movs	r2, #93	; 0x5d
   2485c:	4629      	mov	r1, r5
   2485e:	4862      	ldr	r0, [pc, #392]	; (249e8 <z_add_timeout+0x1b0>)
   24860:	f003 fd6f 	bl	28342 <printk>
   24864:	215d      	movs	r1, #93	; 0x5d
   24866:	4628      	mov	r0, r5
   24868:	f004 f904 	bl	28a74 <assert_post_action>
	to->fn = fn;
   2486c:	9b00      	ldr	r3, [sp, #0]
   2486e:	60a3      	str	r3, [r4, #8]

	LOCKED(&timeout_lock) {
   24870:	2500      	movs	r5, #0
	__asm__ volatile(
   24872:	f04f 0340 	mov.w	r3, #64	; 0x40
   24876:	f3ef 8211 	mrs	r2, BASEPRI
   2487a:	f383 8812 	msr	BASEPRI_MAX, r3
   2487e:	f3bf 8f6f 	isb	sy
   24882:	9200      	str	r2, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24884:	4859      	ldr	r0, [pc, #356]	; (249ec <z_add_timeout+0x1b4>)
   24886:	f7fd fb07 	bl	21e98 <z_spin_lock_valid>
   2488a:	b140      	cbz	r0, 2489e <z_add_timeout+0x66>
	z_spin_lock_set_owner(l);
   2488c:	4857      	ldr	r0, [pc, #348]	; (249ec <z_add_timeout+0x1b4>)
   2488e:	f7fd fb23 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   24892:	9b00      	ldr	r3, [sp, #0]
   24894:	9305      	str	r3, [sp, #20]
   24896:	e9cd ab02 	strd	sl, fp, [sp, #8]
   2489a:	46a3      	mov	fp, r4
   2489c:	e03a      	b.n	24914 <z_add_timeout+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2489e:	2281      	movs	r2, #129	; 0x81
   248a0:	4953      	ldr	r1, [pc, #332]	; (249f0 <z_add_timeout+0x1b8>)
   248a2:	4851      	ldr	r0, [pc, #324]	; (249e8 <z_add_timeout+0x1b0>)
   248a4:	f003 fd4d 	bl	28342 <printk>
   248a8:	2181      	movs	r1, #129	; 0x81
   248aa:	4851      	ldr	r0, [pc, #324]	; (249f0 <z_add_timeout+0x1b8>)
   248ac:	f004 f8e2 	bl	28a74 <assert_post_action>
   248b0:	e7ec      	b.n	2488c <z_add_timeout+0x54>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   248b2:	2201      	movs	r2, #1
   248b4:	2300      	movs	r3, #0
   248b6:	e051      	b.n	2495c <z_add_timeout+0x124>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   248b8:	f7ff ff8c 	bl	247d4 <elapsed>
   248bc:	1833      	adds	r3, r6, r0
   248be:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
   248c2:	1c5a      	adds	r2, r3, #1
   248c4:	f144 0300 	adc.w	r3, r4, #0
   248c8:	f8cb 2010 	str.w	r2, [fp, #16]
   248cc:	f8cb 3014 	str.w	r3, [fp, #20]
   248d0:	e048      	b.n	24964 <z_add_timeout+0x12c>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   248d2:	9b00      	ldr	r3, [sp, #0]
   248d4:	1ae2      	subs	r2, r4, r3
   248d6:	9b01      	ldr	r3, [sp, #4]
   248d8:	eb65 0303 	sbc.w	r3, r5, r3
   248dc:	6102      	str	r2, [r0, #16]
   248de:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   248e0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   248e2:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
   248e6:	f8cb 0000 	str.w	r0, [fp]
	prev->next = node;
   248ea:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
   248ee:	f8c0 b004 	str.w	fp, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   248f2:	2800      	cmp	r0, #0
   248f4:	d04f      	beq.n	24996 <z_add_timeout+0x15e>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   248f6:	f7ff ff57 	bl	247a8 <first>
   248fa:	4583      	cmp	fp, r0
   248fc:	d056      	beq.n	249ac <z_add_timeout+0x174>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   248fe:	483b      	ldr	r0, [pc, #236]	; (249ec <z_add_timeout+0x1b4>)
   24900:	f7fd fada 	bl	21eb8 <z_spin_unlock_valid>
   24904:	2800      	cmp	r0, #0
   24906:	d05e      	beq.n	249c6 <z_add_timeout+0x18e>
	__asm__ volatile(
   24908:	9b05      	ldr	r3, [sp, #20]
   2490a:	f383 8811 	msr	BASEPRI, r3
   2490e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24912:	2501      	movs	r5, #1
   24914:	2d00      	cmp	r5, #0
   24916:	d161      	bne.n	249dc <z_add_timeout+0x1a4>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   24918:	f06f 0301 	mvn.w	r3, #1
   2491c:	ebb3 0806 	subs.w	r8, r3, r6
   24920:	f04f 30ff 	mov.w	r0, #4294967295
   24924:	eb60 0907 	sbc.w	r9, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   24928:	f1b8 0f00 	cmp.w	r8, #0
   2492c:	f179 0300 	sbcs.w	r3, r9, #0
   24930:	dbc2      	blt.n	248b8 <z_add_timeout+0x80>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24932:	4a30      	ldr	r2, [pc, #192]	; (249f4 <z_add_timeout+0x1bc>)
   24934:	6813      	ldr	r3, [r2, #0]
   24936:	6852      	ldr	r2, [r2, #4]
   24938:	18f3      	adds	r3, r6, r3
   2493a:	eb47 0202 	adc.w	r2, r7, r2
   2493e:	f06f 0101 	mvn.w	r1, #1
   24942:	1acb      	subs	r3, r1, r3
   24944:	9302      	str	r3, [sp, #8]
   24946:	eb60 0302 	sbc.w	r3, r0, r2
   2494a:	9303      	str	r3, [sp, #12]
			to->dticks = MAX(1, ticks);
   2494c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   24950:	4602      	mov	r2, r0
   24952:	460b      	mov	r3, r1
   24954:	2801      	cmp	r0, #1
   24956:	f171 0100 	sbcs.w	r1, r1, #0
   2495a:	dbaa      	blt.n	248b2 <z_add_timeout+0x7a>
   2495c:	f8cb 2010 	str.w	r2, [fp, #16]
   24960:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
   24964:	f7ff ff20 	bl	247a8 <first>
   24968:	2800      	cmp	r0, #0
   2496a:	d0c2      	beq.n	248f2 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   2496c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24970:	e9db 2304 	ldrd	r2, r3, [fp, #16]
   24974:	e9cd 2300 	strd	r2, r3, [sp]
   24978:	42a2      	cmp	r2, r4
   2497a:	41ab      	sbcs	r3, r5
   2497c:	dba9      	blt.n	248d2 <z_add_timeout+0x9a>
			to->dticks -= t->dticks;
   2497e:	9b00      	ldr	r3, [sp, #0]
   24980:	1b1a      	subs	r2, r3, r4
   24982:	9b01      	ldr	r3, [sp, #4]
   24984:	eb63 0305 	sbc.w	r3, r3, r5
   24988:	f8cb 2010 	str.w	r2, [fp, #16]
   2498c:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
   24990:	f7ff ff14 	bl	247bc <next>
   24994:	e7e8      	b.n	24968 <z_add_timeout+0x130>
	sys_dnode_t *const tail = list->tail;
   24996:	4b18      	ldr	r3, [pc, #96]	; (249f8 <z_add_timeout+0x1c0>)
   24998:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   2499a:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
   2499e:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
   249a2:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
   249a6:	f8c3 b004 	str.w	fp, [r3, #4]
}
   249aa:	e7a4      	b.n	248f6 <z_add_timeout+0xbe>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   249ac:	f7ff ff1e 	bl	247ec <next_timeout>

			if (next_time == 0 ||
   249b0:	4603      	mov	r3, r0
   249b2:	b118      	cbz	r0, 249bc <z_add_timeout+0x184>
			    _current_cpu->slice_ticks != next_time) {
   249b4:	4a11      	ldr	r2, [pc, #68]	; (249fc <z_add_timeout+0x1c4>)
   249b6:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   249b8:	4282      	cmp	r2, r0
   249ba:	d0a0      	beq.n	248fe <z_add_timeout+0xc6>
				sys_clock_set_timeout(next_time, false);
   249bc:	2100      	movs	r1, #0
   249be:	4618      	mov	r0, r3
   249c0:	f7fa febe 	bl	1f740 <sys_clock_set_timeout>
   249c4:	e79b      	b.n	248fe <z_add_timeout+0xc6>
   249c6:	4c0a      	ldr	r4, [pc, #40]	; (249f0 <z_add_timeout+0x1b8>)
   249c8:	22ac      	movs	r2, #172	; 0xac
   249ca:	4621      	mov	r1, r4
   249cc:	4806      	ldr	r0, [pc, #24]	; (249e8 <z_add_timeout+0x1b0>)
   249ce:	f003 fcb8 	bl	28342 <printk>
   249d2:	21ac      	movs	r1, #172	; 0xac
   249d4:	4620      	mov	r0, r4
   249d6:	f004 f84d 	bl	28a74 <assert_post_action>
   249da:	e795      	b.n	24908 <z_add_timeout+0xd0>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   249dc:	b007      	add	sp, #28
   249de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249e2:	bf00      	nop
   249e4:	00033338 	.word	0x00033338
   249e8:	0002f968 	.word	0x0002f968
   249ec:	20003664 	.word	0x20003664
   249f0:	0002f9a4 	.word	0x0002f9a4
   249f4:	20002098 	.word	0x20002098
   249f8:	200006b4 	.word	0x200006b4
   249fc:	2000360c 	.word	0x2000360c

00024a00 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   24a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a04:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
   24a06:	2400      	movs	r4, #0
	__asm__ volatile(
   24a08:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a0c:	f3ef 8711 	mrs	r7, BASEPRI
   24a10:	f383 8812 	msr	BASEPRI_MAX, r3
   24a14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a18:	481a      	ldr	r0, [pc, #104]	; (24a84 <z_abort_timeout+0x84>)
   24a1a:	f7fd fa3d 	bl	21e98 <z_spin_lock_valid>
   24a1e:	b128      	cbz	r0, 24a2c <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
   24a20:	4818      	ldr	r0, [pc, #96]	; (24a84 <z_abort_timeout+0x84>)
   24a22:	f7fd fa59 	bl	21ed8 <z_spin_lock_set_owner>
	int ret = -EINVAL;
   24a26:	f06f 0815 	mvn.w	r8, #21
	return k;
   24a2a:	e017      	b.n	24a5c <z_abort_timeout+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a2c:	4e16      	ldr	r6, [pc, #88]	; (24a88 <z_abort_timeout+0x88>)
   24a2e:	2281      	movs	r2, #129	; 0x81
   24a30:	4631      	mov	r1, r6
   24a32:	4816      	ldr	r0, [pc, #88]	; (24a8c <z_abort_timeout+0x8c>)
   24a34:	f003 fc85 	bl	28342 <printk>
   24a38:	2181      	movs	r1, #129	; 0x81
   24a3a:	4630      	mov	r0, r6
   24a3c:	f004 f81a 	bl	28a74 <assert_post_action>
   24a40:	e7ee      	b.n	24a20 <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
   24a42:	4628      	mov	r0, r5
   24a44:	f00a f9e4 	bl	2ee10 <remove_timeout>
			ret = 0;
   24a48:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a4a:	480e      	ldr	r0, [pc, #56]	; (24a84 <z_abort_timeout+0x84>)
   24a4c:	f7fd fa34 	bl	21eb8 <z_spin_unlock_valid>
   24a50:	b150      	cbz	r0, 24a68 <z_abort_timeout+0x68>
	__asm__ volatile(
   24a52:	f387 8811 	msr	BASEPRI, r7
   24a56:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24a5a:	2401      	movs	r4, #1
   24a5c:	4626      	mov	r6, r4
   24a5e:	b974      	cbnz	r4, 24a7e <z_abort_timeout+0x7e>
	return node->next != NULL;
   24a60:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
   24a62:	2b00      	cmp	r3, #0
   24a64:	d1ed      	bne.n	24a42 <z_abort_timeout+0x42>
   24a66:	e7f0      	b.n	24a4a <z_abort_timeout+0x4a>
   24a68:	4c07      	ldr	r4, [pc, #28]	; (24a88 <z_abort_timeout+0x88>)
   24a6a:	22ac      	movs	r2, #172	; 0xac
   24a6c:	4621      	mov	r1, r4
   24a6e:	4807      	ldr	r0, [pc, #28]	; (24a8c <z_abort_timeout+0x8c>)
   24a70:	f003 fc67 	bl	28342 <printk>
   24a74:	21ac      	movs	r1, #172	; 0xac
   24a76:	4620      	mov	r0, r4
   24a78:	f003 fffc 	bl	28a74 <assert_post_action>
   24a7c:	e7e9      	b.n	24a52 <z_abort_timeout+0x52>
		}
	}

	return ret;
}
   24a7e:	4640      	mov	r0, r8
   24a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24a84:	20003664 	.word	0x20003664
   24a88:	0002f9a4 	.word	0x0002f9a4
   24a8c:	0002f968 	.word	0x0002f968

00024a90 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   24a90:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
   24a92:	2500      	movs	r5, #0
	__asm__ volatile(
   24a94:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a98:	f3ef 8611 	mrs	r6, BASEPRI
   24a9c:	f383 8812 	msr	BASEPRI_MAX, r3
   24aa0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24aa4:	4817      	ldr	r0, [pc, #92]	; (24b04 <z_get_next_timeout_expiry+0x74>)
   24aa6:	f7fd f9f7 	bl	21e98 <z_spin_lock_valid>
   24aaa:	b128      	cbz	r0, 24ab8 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
   24aac:	4815      	ldr	r0, [pc, #84]	; (24b04 <z_get_next_timeout_expiry+0x74>)
   24aae:	f7fd fa13 	bl	21ed8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   24ab2:	f04f 34ff 	mov.w	r4, #4294967295
	return k;
   24ab6:	e019      	b.n	24aec <z_get_next_timeout_expiry+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ab8:	4c13      	ldr	r4, [pc, #76]	; (24b08 <z_get_next_timeout_expiry+0x78>)
   24aba:	2281      	movs	r2, #129	; 0x81
   24abc:	4621      	mov	r1, r4
   24abe:	4813      	ldr	r0, [pc, #76]	; (24b0c <z_get_next_timeout_expiry+0x7c>)
   24ac0:	f003 fc3f 	bl	28342 <printk>
   24ac4:	2181      	movs	r1, #129	; 0x81
   24ac6:	4620      	mov	r0, r4
   24ac8:	f003 ffd4 	bl	28a74 <assert_post_action>
   24acc:	e7ee      	b.n	24aac <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ace:	4d0e      	ldr	r5, [pc, #56]	; (24b08 <z_get_next_timeout_expiry+0x78>)
   24ad0:	22ac      	movs	r2, #172	; 0xac
   24ad2:	4629      	mov	r1, r5
   24ad4:	480d      	ldr	r0, [pc, #52]	; (24b0c <z_get_next_timeout_expiry+0x7c>)
   24ad6:	f003 fc34 	bl	28342 <printk>
   24ada:	21ac      	movs	r1, #172	; 0xac
   24adc:	4628      	mov	r0, r5
   24ade:	f003 ffc9 	bl	28a74 <assert_post_action>
	__asm__ volatile(
   24ae2:	f386 8811 	msr	BASEPRI, r6
   24ae6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24aea:	2501      	movs	r5, #1
   24aec:	b945      	cbnz	r5, 24b00 <z_get_next_timeout_expiry+0x70>
		ret = next_timeout();
   24aee:	f7ff fe7d 	bl	247ec <next_timeout>
   24af2:	4604      	mov	r4, r0
   24af4:	4803      	ldr	r0, [pc, #12]	; (24b04 <z_get_next_timeout_expiry+0x74>)
   24af6:	f7fd f9df 	bl	21eb8 <z_spin_unlock_valid>
   24afa:	2800      	cmp	r0, #0
   24afc:	d1f1      	bne.n	24ae2 <z_get_next_timeout_expiry+0x52>
   24afe:	e7e6      	b.n	24ace <z_get_next_timeout_expiry+0x3e>
	}
	return ret;
}
   24b00:	4620      	mov	r0, r4
   24b02:	bd70      	pop	{r4, r5, r6, pc}
   24b04:	20003664 	.word	0x20003664
   24b08:	0002f9a4 	.word	0x0002f9a4
   24b0c:	0002f968 	.word	0x0002f968

00024b10 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   24b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b14:	4607      	mov	r7, r0
   24b16:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
   24b18:	2500      	movs	r5, #0
	__asm__ volatile(
   24b1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b1e:	f3ef 8611 	mrs	r6, BASEPRI
   24b22:	f383 8812 	msr	BASEPRI_MAX, r3
   24b26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b2a:	4820      	ldr	r0, [pc, #128]	; (24bac <z_set_timeout_expiry+0x9c>)
   24b2c:	f7fd f9b4 	bl	21e98 <z_spin_lock_valid>
   24b30:	b118      	cbz	r0, 24b3a <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
   24b32:	481e      	ldr	r0, [pc, #120]	; (24bac <z_set_timeout_expiry+0x9c>)
   24b34:	f7fd f9d0 	bl	21ed8 <z_spin_lock_set_owner>
	return k;
   24b38:	e019      	b.n	24b6e <z_set_timeout_expiry+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b3a:	4c1d      	ldr	r4, [pc, #116]	; (24bb0 <z_set_timeout_expiry+0xa0>)
   24b3c:	2281      	movs	r2, #129	; 0x81
   24b3e:	4621      	mov	r1, r4
   24b40:	481c      	ldr	r0, [pc, #112]	; (24bb4 <z_set_timeout_expiry+0xa4>)
   24b42:	f003 fbfe 	bl	28342 <printk>
   24b46:	2181      	movs	r1, #129	; 0x81
   24b48:	4620      	mov	r0, r4
   24b4a:	f003 ff93 	bl	28a74 <assert_post_action>
   24b4e:	e7f0      	b.n	24b32 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   24b50:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   24b52:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24b56:	2801      	cmp	r0, #1
   24b58:	dd00      	ble.n	24b5c <z_set_timeout_expiry+0x4c>
   24b5a:	b99c      	cbnz	r4, 24b84 <z_set_timeout_expiry+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b5c:	4813      	ldr	r0, [pc, #76]	; (24bac <z_set_timeout_expiry+0x9c>)
   24b5e:	f7fd f9ab 	bl	21eb8 <z_spin_unlock_valid>
   24b62:	b1b0      	cbz	r0, 24b92 <z_set_timeout_expiry+0x82>
	__asm__ volatile(
   24b64:	f386 8811 	msr	BASEPRI, r6
   24b68:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24b6c:	2501      	movs	r5, #1
   24b6e:	462c      	mov	r4, r5
   24b70:	b9d5      	cbnz	r5, 24ba8 <z_set_timeout_expiry+0x98>
		int next_to = next_timeout();
   24b72:	f7ff fe3b 	bl	247ec <next_timeout>
			      || (ticks <= next_to);
   24b76:	f1b0 3fff 	cmp.w	r0, #4294967295
   24b7a:	d0e9      	beq.n	24b50 <z_set_timeout_expiry+0x40>
   24b7c:	42b8      	cmp	r0, r7
   24b7e:	dbe8      	blt.n	24b52 <z_set_timeout_expiry+0x42>
   24b80:	2401      	movs	r4, #1
   24b82:	e7e6      	b.n	24b52 <z_set_timeout_expiry+0x42>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   24b84:	4641      	mov	r1, r8
   24b86:	42b8      	cmp	r0, r7
   24b88:	bfa8      	it	ge
   24b8a:	4638      	movge	r0, r7
   24b8c:	f7fa fdd8 	bl	1f740 <sys_clock_set_timeout>
   24b90:	e7e4      	b.n	24b5c <z_set_timeout_expiry+0x4c>
   24b92:	4c07      	ldr	r4, [pc, #28]	; (24bb0 <z_set_timeout_expiry+0xa0>)
   24b94:	22ac      	movs	r2, #172	; 0xac
   24b96:	4621      	mov	r1, r4
   24b98:	4806      	ldr	r0, [pc, #24]	; (24bb4 <z_set_timeout_expiry+0xa4>)
   24b9a:	f003 fbd2 	bl	28342 <printk>
   24b9e:	21ac      	movs	r1, #172	; 0xac
   24ba0:	4620      	mov	r0, r4
   24ba2:	f003 ff67 	bl	28a74 <assert_post_action>
   24ba6:	e7dd      	b.n	24b64 <z_set_timeout_expiry+0x54>
		}
	}
}
   24ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24bac:	20003664 	.word	0x20003664
   24bb0:	0002f9a4 	.word	0x0002f9a4
   24bb4:	0002f968 	.word	0x0002f968

00024bb8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   24bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bba:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24bbc:	f7fe feaa 	bl	23914 <z_time_slice>
	__asm__ volatile(
   24bc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   24bc4:	f3ef 8411 	mrs	r4, BASEPRI
   24bc8:	f383 8812 	msr	BASEPRI_MAX, r3
   24bcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24bd0:	484a      	ldr	r0, [pc, #296]	; (24cfc <sys_clock_announce+0x144>)
   24bd2:	f7fd f961 	bl	21e98 <z_spin_lock_valid>
   24bd6:	b128      	cbz	r0, 24be4 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
   24bd8:	4848      	ldr	r0, [pc, #288]	; (24cfc <sys_clock_announce+0x144>)
   24bda:	f7fd f97d 	bl	21ed8 <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   24bde:	4b48      	ldr	r3, [pc, #288]	; (24d00 <sys_clock_announce+0x148>)
   24be0:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24be2:	e022      	b.n	24c2a <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24be4:	4e47      	ldr	r6, [pc, #284]	; (24d04 <sys_clock_announce+0x14c>)
   24be6:	2281      	movs	r2, #129	; 0x81
   24be8:	4631      	mov	r1, r6
   24bea:	4847      	ldr	r0, [pc, #284]	; (24d08 <sys_clock_announce+0x150>)
   24bec:	f003 fba9 	bl	28342 <printk>
   24bf0:	2181      	movs	r1, #129	; 0x81
   24bf2:	4630      	mov	r0, r6
   24bf4:	f003 ff3e 	bl	28a74 <assert_post_action>
   24bf8:	e7ee      	b.n	24bd8 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bfa:	4e42      	ldr	r6, [pc, #264]	; (24d04 <sys_clock_announce+0x14c>)
   24bfc:	22ac      	movs	r2, #172	; 0xac
   24bfe:	4631      	mov	r1, r6
   24c00:	4841      	ldr	r0, [pc, #260]	; (24d08 <sys_clock_announce+0x150>)
   24c02:	f003 fb9e 	bl	28342 <printk>
   24c06:	21ac      	movs	r1, #172	; 0xac
   24c08:	4630      	mov	r0, r6
   24c0a:	f003 ff33 	bl	28a74 <assert_post_action>
   24c0e:	e030      	b.n	24c72 <sys_clock_announce+0xba>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c10:	4d3c      	ldr	r5, [pc, #240]	; (24d04 <sys_clock_announce+0x14c>)
   24c12:	2281      	movs	r2, #129	; 0x81
   24c14:	4629      	mov	r1, r5
   24c16:	483c      	ldr	r0, [pc, #240]	; (24d08 <sys_clock_announce+0x150>)
   24c18:	f003 fb93 	bl	28342 <printk>
   24c1c:	2181      	movs	r1, #129	; 0x81
   24c1e:	4628      	mov	r0, r5
   24c20:	f003 ff28 	bl	28a74 <assert_post_action>
	z_spin_lock_set_owner(l);
   24c24:	4835      	ldr	r0, [pc, #212]	; (24cfc <sys_clock_announce+0x144>)
   24c26:	f7fd f957 	bl	21ed8 <z_spin_lock_set_owner>
   24c2a:	f7ff fdbd 	bl	247a8 <first>
   24c2e:	4605      	mov	r5, r0
   24c30:	2800      	cmp	r0, #0
   24c32:	d033      	beq.n	24c9c <sys_clock_announce+0xe4>
   24c34:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   24c38:	4b31      	ldr	r3, [pc, #196]	; (24d00 <sys_clock_announce+0x148>)
   24c3a:	6819      	ldr	r1, [r3, #0]
   24c3c:	17cb      	asrs	r3, r1, #31
   24c3e:	42b1      	cmp	r1, r6
   24c40:	41bb      	sbcs	r3, r7
   24c42:	db2b      	blt.n	24c9c <sys_clock_announce+0xe4>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   24c44:	4831      	ldr	r0, [pc, #196]	; (24d0c <sys_clock_announce+0x154>)
   24c46:	e9d0 2300 	ldrd	r2, r3, [r0]
   24c4a:	1992      	adds	r2, r2, r6
   24c4c:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
   24c50:	e9c0 2300 	strd	r2, r3, [r0]
		announce_remaining -= dt;
   24c54:	1b89      	subs	r1, r1, r6
   24c56:	4b2a      	ldr	r3, [pc, #168]	; (24d00 <sys_clock_announce+0x148>)
   24c58:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
   24c5a:	2200      	movs	r2, #0
   24c5c:	2300      	movs	r3, #0
   24c5e:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   24c62:	4628      	mov	r0, r5
   24c64:	f00a f8d4 	bl	2ee10 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c68:	4824      	ldr	r0, [pc, #144]	; (24cfc <sys_clock_announce+0x144>)
   24c6a:	f7fd f925 	bl	21eb8 <z_spin_unlock_valid>
   24c6e:	2800      	cmp	r0, #0
   24c70:	d0c3      	beq.n	24bfa <sys_clock_announce+0x42>
	__asm__ volatile(
   24c72:	f384 8811 	msr	BASEPRI, r4
   24c76:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   24c7a:	68ab      	ldr	r3, [r5, #8]
   24c7c:	4628      	mov	r0, r5
   24c7e:	4798      	blx	r3
	__asm__ volatile(
   24c80:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c84:	f3ef 8411 	mrs	r4, BASEPRI
   24c88:	f383 8812 	msr	BASEPRI_MAX, r3
   24c8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c90:	481a      	ldr	r0, [pc, #104]	; (24cfc <sys_clock_announce+0x144>)
   24c92:	f7fd f901 	bl	21e98 <z_spin_lock_valid>
   24c96:	2800      	cmp	r0, #0
   24c98:	d1c4      	bne.n	24c24 <sys_clock_announce+0x6c>
   24c9a:	e7b9      	b.n	24c10 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   24c9c:	b145      	cbz	r5, 24cb0 <sys_clock_announce+0xf8>
		first()->dticks -= announce_remaining;
   24c9e:	4b18      	ldr	r3, [pc, #96]	; (24d00 <sys_clock_announce+0x148>)
   24ca0:	6819      	ldr	r1, [r3, #0]
   24ca2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   24ca6:	1a52      	subs	r2, r2, r1
   24ca8:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   24cac:	e9c5 2304 	strd	r2, r3, [r5, #16]
	}

	curr_tick += announce_remaining;
   24cb0:	4816      	ldr	r0, [pc, #88]	; (24d0c <sys_clock_announce+0x154>)
   24cb2:	4913      	ldr	r1, [pc, #76]	; (24d00 <sys_clock_announce+0x148>)
   24cb4:	680d      	ldr	r5, [r1, #0]
   24cb6:	e9d0 2300 	ldrd	r2, r3, [r0]
   24cba:	1952      	adds	r2, r2, r5
   24cbc:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   24cc0:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   24cc4:	2500      	movs	r5, #0
   24cc6:	600d      	str	r5, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   24cc8:	f7ff fd90 	bl	247ec <next_timeout>
   24ccc:	4629      	mov	r1, r5
   24cce:	f7fa fd37 	bl	1f740 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24cd2:	480a      	ldr	r0, [pc, #40]	; (24cfc <sys_clock_announce+0x144>)
   24cd4:	f7fd f8f0 	bl	21eb8 <z_spin_unlock_valid>
   24cd8:	b120      	cbz	r0, 24ce4 <sys_clock_announce+0x12c>
	__asm__ volatile(
   24cda:	f384 8811 	msr	BASEPRI, r4
   24cde:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24ce4:	4d07      	ldr	r5, [pc, #28]	; (24d04 <sys_clock_announce+0x14c>)
   24ce6:	22ac      	movs	r2, #172	; 0xac
   24ce8:	4629      	mov	r1, r5
   24cea:	4807      	ldr	r0, [pc, #28]	; (24d08 <sys_clock_announce+0x150>)
   24cec:	f003 fb29 	bl	28342 <printk>
   24cf0:	21ac      	movs	r1, #172	; 0xac
   24cf2:	4628      	mov	r0, r5
   24cf4:	f003 febe 	bl	28a74 <assert_post_action>
   24cf8:	e7ef      	b.n	24cda <sys_clock_announce+0x122>
   24cfa:	bf00      	nop
   24cfc:	20003664 	.word	0x20003664
   24d00:	20003660 	.word	0x20003660
   24d04:	0002f9a4 	.word	0x0002f9a4
   24d08:	0002f968 	.word	0x0002f968
   24d0c:	20002098 	.word	0x20002098

00024d10 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   24d12:	2400      	movs	r4, #0
	__asm__ volatile(
   24d14:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d18:	f3ef 8511 	mrs	r5, BASEPRI
   24d1c:	f383 8812 	msr	BASEPRI_MAX, r3
   24d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d24:	481a      	ldr	r0, [pc, #104]	; (24d90 <sys_clock_tick_get+0x80>)
   24d26:	f7fd f8b7 	bl	21e98 <z_spin_lock_valid>
   24d2a:	b128      	cbz	r0, 24d38 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
   24d2c:	4818      	ldr	r0, [pc, #96]	; (24d90 <sys_clock_tick_get+0x80>)
   24d2e:	f7fd f8d3 	bl	21ed8 <z_spin_lock_set_owner>
	uint64_t t = 0U;
   24d32:	2600      	movs	r6, #0
   24d34:	2700      	movs	r7, #0
	return k;
   24d36:	e019      	b.n	24d6c <sys_clock_tick_get+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d38:	4e16      	ldr	r6, [pc, #88]	; (24d94 <sys_clock_tick_get+0x84>)
   24d3a:	2281      	movs	r2, #129	; 0x81
   24d3c:	4631      	mov	r1, r6
   24d3e:	4816      	ldr	r0, [pc, #88]	; (24d98 <sys_clock_tick_get+0x88>)
   24d40:	f003 faff 	bl	28342 <printk>
   24d44:	2181      	movs	r1, #129	; 0x81
   24d46:	4630      	mov	r0, r6
   24d48:	f003 fe94 	bl	28a74 <assert_post_action>
   24d4c:	e7ee      	b.n	24d2c <sys_clock_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d4e:	4c11      	ldr	r4, [pc, #68]	; (24d94 <sys_clock_tick_get+0x84>)
   24d50:	22ac      	movs	r2, #172	; 0xac
   24d52:	4621      	mov	r1, r4
   24d54:	4810      	ldr	r0, [pc, #64]	; (24d98 <sys_clock_tick_get+0x88>)
   24d56:	f003 faf4 	bl	28342 <printk>
   24d5a:	21ac      	movs	r1, #172	; 0xac
   24d5c:	4620      	mov	r0, r4
   24d5e:	f003 fe89 	bl	28a74 <assert_post_action>
	__asm__ volatile(
   24d62:	f385 8811 	msr	BASEPRI, r5
   24d66:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24d6a:	2401      	movs	r4, #1
   24d6c:	b96c      	cbnz	r4, 24d8a <sys_clock_tick_get+0x7a>
		t = curr_tick + sys_clock_elapsed();
   24d6e:	f7fa fd1b 	bl	1f7a8 <sys_clock_elapsed>
   24d72:	4b0a      	ldr	r3, [pc, #40]	; (24d9c <sys_clock_tick_get+0x8c>)
   24d74:	e9d3 6700 	ldrd	r6, r7, [r3]
   24d78:	1836      	adds	r6, r6, r0
   24d7a:	f147 0700 	adc.w	r7, r7, #0
   24d7e:	4804      	ldr	r0, [pc, #16]	; (24d90 <sys_clock_tick_get+0x80>)
   24d80:	f7fd f89a 	bl	21eb8 <z_spin_unlock_valid>
   24d84:	2800      	cmp	r0, #0
   24d86:	d1ec      	bne.n	24d62 <sys_clock_tick_get+0x52>
   24d88:	e7e1      	b.n	24d4e <sys_clock_tick_get+0x3e>
	}
	return t;
}
   24d8a:	4630      	mov	r0, r6
   24d8c:	4639      	mov	r1, r7
   24d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24d90:	20003664 	.word	0x20003664
   24d94:	0002f9a4 	.word	0x0002f9a4
   24d98:	0002f968 	.word	0x0002f968
   24d9c:	20002098 	.word	0x20002098

00024da0 <signal_poller>:

	return events_registered;
}

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
   24da0:	b570      	push	{r4, r5, r6, lr}
   24da2:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   24da4:	6880      	ldr	r0, [r0, #8]
   24da6:	f00a f884 	bl	2eeb2 <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
   24daa:	4604      	mov	r4, r0
   24dac:	b1e8      	cbz	r0, 24dea <signal_poller+0x4a>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   24dae:	7b63      	ldrb	r3, [r4, #13]

	if (!z_is_thread_pending(thread)) {
   24db0:	f013 0f02 	tst.w	r3, #2
   24db4:	d032      	beq.n	24e1c <signal_poller+0x7c>
	return thread->base.timeout.dticks == _EXPIRED;
   24db6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   24dba:	f06f 0001 	mvn.w	r0, #1
   24dbe:	f04f 31ff 	mov.w	r1, #4294967295
   24dc2:	428b      	cmp	r3, r1
   24dc4:	bf08      	it	eq
   24dc6:	4282      	cmpeq	r2, r0
   24dc8:	d02a      	beq.n	24e20 <signal_poller+0x80>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   24dca:	4620      	mov	r0, r4
   24dcc:	f7fe fcc6 	bl	2375c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   24dd0:	2d08      	cmp	r5, #8
   24dd2:	d015      	beq.n	24e00 <signal_poller+0x60>
   24dd4:	2300      	movs	r3, #0
   24dd6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   24dda:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24ddc:	f013 0f1f 	tst.w	r3, #31
   24de0:	d113      	bne.n	24e0a <signal_poller+0x6a>
   24de2:	69a3      	ldr	r3, [r4, #24]
   24de4:	b17b      	cbz	r3, 24e06 <signal_poller+0x66>
   24de6:	2300      	movs	r3, #0
   24de8:	e010      	b.n	24e0c <signal_poller+0x6c>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   24dea:	4e0f      	ldr	r6, [pc, #60]	; (24e28 <signal_poller+0x88>)
   24dec:	22f9      	movs	r2, #249	; 0xf9
   24dee:	4631      	mov	r1, r6
   24df0:	480e      	ldr	r0, [pc, #56]	; (24e2c <signal_poller+0x8c>)
   24df2:	f003 faa6 	bl	28342 <printk>
   24df6:	21f9      	movs	r1, #249	; 0xf9
   24df8:	4630      	mov	r0, r6
   24dfa:	f003 fe3b 	bl	28a74 <assert_post_action>
   24dfe:	e7d6      	b.n	24dae <signal_poller+0xe>
	arch_thread_return_value_set(thread,
   24e00:	f06f 0303 	mvn.w	r3, #3
   24e04:	e7e7      	b.n	24dd6 <signal_poller+0x36>
   24e06:	2301      	movs	r3, #1
   24e08:	e000      	b.n	24e0c <signal_poller+0x6c>
   24e0a:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   24e0c:	b90b      	cbnz	r3, 24e12 <signal_poller+0x72>
		return 0;
   24e0e:	2000      	movs	r0, #0
   24e10:	e005      	b.n	24e1e <signal_poller+0x7e>
	}

	z_ready_thread(thread);
   24e12:	4620      	mov	r0, r4
   24e14:	f7fe fe56 	bl	23ac4 <z_ready_thread>

	return 0;
   24e18:	2000      	movs	r0, #0
   24e1a:	e000      	b.n	24e1e <signal_poller+0x7e>
		return 0;
   24e1c:	2000      	movs	r0, #0
}
   24e1e:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   24e20:	f06f 000a 	mvn.w	r0, #10
   24e24:	e7fb      	b.n	24e1e <signal_poller+0x7e>
   24e26:	bf00      	nop
   24e28:	0003335c 	.word	0x0003335c
   24e2c:	0002f968 	.word	0x0002f968

00024e30 <k_poll_event_init>:
{
   24e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e34:	4604      	mov	r4, r0
   24e36:	460e      	mov	r6, r1
   24e38:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24e3a:	4617      	mov	r7, r2
   24e3c:	b9c2      	cbnz	r2, 24e70 <k_poll_event_init+0x40>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   24e3e:	2e1f      	cmp	r6, #31
   24e40:	d822      	bhi.n	24e88 <k_poll_event_init+0x58>
	__ASSERT(obj != NULL, "must provide an object\n");
   24e42:	b36d      	cbz	r5, 24ea0 <k_poll_event_init+0x70>
	event->poller = NULL;
   24e44:	2300      	movs	r3, #0
   24e46:	60a3      	str	r3, [r4, #8]
	event->type = type;
   24e48:	7b62      	ldrb	r2, [r4, #13]
   24e4a:	f366 0204 	bfi	r2, r6, #0, #5
   24e4e:	7362      	strb	r2, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   24e50:	68e2      	ldr	r2, [r4, #12]
   24e52:	f363 3252 	bfi	r2, r3, #13, #6
   24e56:	60e2      	str	r2, [r4, #12]
	event->mode = mode;
   24e58:	f3c2 4207 	ubfx	r2, r2, #16, #8
   24e5c:	f367 02c3 	bfi	r2, r7, #3, #1
   24e60:	73a2      	strb	r2, [r4, #14]
	event->unused = 0U;
   24e62:	89e2      	ldrh	r2, [r4, #14]
   24e64:	f363 120f 	bfi	r2, r3, #4, #12
   24e68:	81e2      	strh	r2, [r4, #14]
	event->obj = obj;
   24e6a:	6125      	str	r5, [r4, #16]
}
   24e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24e70:	f8df 8048 	ldr.w	r8, [pc, #72]	; 24ebc <k_poll_event_init+0x8c>
   24e74:	222d      	movs	r2, #45	; 0x2d
   24e76:	4641      	mov	r1, r8
   24e78:	480f      	ldr	r0, [pc, #60]	; (24eb8 <k_poll_event_init+0x88>)
   24e7a:	f003 fa62 	bl	28342 <printk>
   24e7e:	212d      	movs	r1, #45	; 0x2d
   24e80:	4640      	mov	r0, r8
   24e82:	f003 fdf7 	bl	28a74 <assert_post_action>
   24e86:	e7da      	b.n	24e3e <k_poll_event_init+0xe>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   24e88:	f8df 8030 	ldr.w	r8, [pc, #48]	; 24ebc <k_poll_event_init+0x8c>
   24e8c:	222f      	movs	r2, #47	; 0x2f
   24e8e:	4641      	mov	r1, r8
   24e90:	4809      	ldr	r0, [pc, #36]	; (24eb8 <k_poll_event_init+0x88>)
   24e92:	f003 fa56 	bl	28342 <printk>
   24e96:	212f      	movs	r1, #47	; 0x2f
   24e98:	4640      	mov	r0, r8
   24e9a:	f003 fdeb 	bl	28a74 <assert_post_action>
   24e9e:	e7d0      	b.n	24e42 <k_poll_event_init+0x12>
	__ASSERT(obj != NULL, "must provide an object\n");
   24ea0:	f8df 8018 	ldr.w	r8, [pc, #24]	; 24ebc <k_poll_event_init+0x8c>
   24ea4:	2230      	movs	r2, #48	; 0x30
   24ea6:	4641      	mov	r1, r8
   24ea8:	4803      	ldr	r0, [pc, #12]	; (24eb8 <k_poll_event_init+0x88>)
   24eaa:	f003 fa4a 	bl	28342 <printk>
   24eae:	2130      	movs	r1, #48	; 0x30
   24eb0:	4640      	mov	r0, r8
   24eb2:	f003 fddf 	bl	28a74 <assert_post_action>
   24eb6:	e7c5      	b.n	24e44 <k_poll_event_init+0x14>
   24eb8:	0002f968 	.word	0x0002f968
   24ebc:	0003335c 	.word	0x0003335c

00024ec0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   24ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ec4:	b08d      	sub	sp, #52	; 0x34
   24ec6:	4605      	mov	r5, r0
   24ec8:	9106      	str	r1, [sp, #24]
   24eca:	9202      	str	r2, [sp, #8]
   24ecc:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   24ece:	4ba6      	ldr	r3, [pc, #664]	; (25168 <z_impl_k_poll+0x2a8>)
   24ed0:	f8d3 9008 	ldr.w	r9, [r3, #8]
   24ed4:	f109 0660 	add.w	r6, r9, #96	; 0x60

	poller->is_polling = true;
   24ed8:	2301      	movs	r3, #1
   24eda:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   24ede:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
   24ee2:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   24ee6:	b973      	cbnz	r3, 24f06 <z_impl_k_poll+0x46>
	__ASSERT(events != NULL, "NULL events\n");
   24ee8:	b1d5      	cbz	r5, 24f20 <z_impl_k_poll+0x60>
	__ASSERT(num_events >= 0, "<0 events\n");
   24eea:	9b06      	ldr	r3, [sp, #24]
   24eec:	2b00      	cmp	r3, #0
   24eee:	db24      	blt.n	24f3a <z_impl_k_poll+0x7a>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24ef0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   24ef4:	4613      	mov	r3, r2
   24ef6:	430b      	orrs	r3, r1
   24ef8:	bf0c      	ite	eq
   24efa:	2301      	moveq	r3, #1
   24efc:	2300      	movne	r3, #0
   24efe:	9307      	str	r3, [sp, #28]
	for (int ii = 0; ii < num_events; ii++) {
   24f00:	2700      	movs	r7, #0
	int events_registered = 0;
   24f02:	46bb      	mov	fp, r7
	for (int ii = 0; ii < num_events; ii++) {
   24f04:	e071      	b.n	24fea <z_impl_k_poll+0x12a>
	__ASSERT(!arch_is_in_isr(), "");
   24f06:	4c99      	ldr	r4, [pc, #612]	; (2516c <z_impl_k_poll+0x2ac>)
   24f08:	f44f 728d 	mov.w	r2, #282	; 0x11a
   24f0c:	4621      	mov	r1, r4
   24f0e:	4898      	ldr	r0, [pc, #608]	; (25170 <z_impl_k_poll+0x2b0>)
   24f10:	f003 fa17 	bl	28342 <printk>
   24f14:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24f18:	4620      	mov	r0, r4
   24f1a:	f003 fdab 	bl	28a74 <assert_post_action>
   24f1e:	e7e3      	b.n	24ee8 <z_impl_k_poll+0x28>
	__ASSERT(events != NULL, "NULL events\n");
   24f20:	4c92      	ldr	r4, [pc, #584]	; (2516c <z_impl_k_poll+0x2ac>)
   24f22:	f240 121b 	movw	r2, #283	; 0x11b
   24f26:	4621      	mov	r1, r4
   24f28:	4891      	ldr	r0, [pc, #580]	; (25170 <z_impl_k_poll+0x2b0>)
   24f2a:	f003 fa0a 	bl	28342 <printk>
   24f2e:	f240 111b 	movw	r1, #283	; 0x11b
   24f32:	4620      	mov	r0, r4
   24f34:	f003 fd9e 	bl	28a74 <assert_post_action>
   24f38:	e7d7      	b.n	24eea <z_impl_k_poll+0x2a>
	__ASSERT(num_events >= 0, "<0 events\n");
   24f3a:	4c8c      	ldr	r4, [pc, #560]	; (2516c <z_impl_k_poll+0x2ac>)
   24f3c:	f44f 728e 	mov.w	r2, #284	; 0x11c
   24f40:	4621      	mov	r1, r4
   24f42:	488b      	ldr	r0, [pc, #556]	; (25170 <z_impl_k_poll+0x2b0>)
   24f44:	f003 f9fd 	bl	28342 <printk>
   24f48:	f44f 718e 	mov.w	r1, #284	; 0x11c
   24f4c:	4620      	mov	r0, r4
   24f4e:	f003 fd91 	bl	28a74 <assert_post_action>
   24f52:	e7cd      	b.n	24ef0 <z_impl_k_poll+0x30>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24f54:	4c87      	ldr	r4, [pc, #540]	; (25174 <z_impl_k_poll+0x2b4>)
   24f56:	2281      	movs	r2, #129	; 0x81
   24f58:	4621      	mov	r1, r4
   24f5a:	4885      	ldr	r0, [pc, #532]	; (25170 <z_impl_k_poll+0x2b0>)
   24f5c:	f003 f9f1 	bl	28342 <printk>
   24f60:	2181      	movs	r1, #129	; 0x81
   24f62:	4620      	mov	r0, r4
   24f64:	f003 fd86 	bl	28a74 <assert_post_action>
   24f68:	e051      	b.n	2500e <z_impl_k_poll+0x14e>
		if (k_sem_count_get(event->sem) > 0U) {
   24f6a:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   24f6c:	689b      	ldr	r3, [r3, #8]
   24f6e:	b31b      	cbz	r3, 24fb8 <z_impl_k_poll+0xf8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24f70:	2302      	movs	r3, #2
   24f72:	9305      	str	r3, [sp, #20]
			return true;
   24f74:	2301      	movs	r3, #1
   24f76:	e01f      	b.n	24fb8 <z_impl_k_poll+0xf8>
		if (!k_queue_is_empty(event->queue)) {
   24f78:	6923      	ldr	r3, [r4, #16]
	return list->head;
   24f7a:	681b      	ldr	r3, [r3, #0]
   24f7c:	b1e3      	cbz	r3, 24fb8 <z_impl_k_poll+0xf8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   24f7e:	2304      	movs	r3, #4
   24f80:	9305      	str	r3, [sp, #20]
			return true;
   24f82:	2301      	movs	r3, #1
   24f84:	e018      	b.n	24fb8 <z_impl_k_poll+0xf8>
		if (event->signal->signaled != 0U) {
   24f86:	6923      	ldr	r3, [r4, #16]
   24f88:	689b      	ldr	r3, [r3, #8]
   24f8a:	b1ab      	cbz	r3, 24fb8 <z_impl_k_poll+0xf8>
			*state = K_POLL_STATE_SIGNALED;
   24f8c:	2301      	movs	r3, #1
   24f8e:	9305      	str	r3, [sp, #20]
   24f90:	e012      	b.n	24fb8 <z_impl_k_poll+0xf8>
		if (event->msgq->used_msgs > 0) {
   24f92:	6923      	ldr	r3, [r4, #16]
   24f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24f96:	b17b      	cbz	r3, 24fb8 <z_impl_k_poll+0xf8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24f98:	2310      	movs	r3, #16
   24f9a:	9305      	str	r3, [sp, #20]
			return true;
   24f9c:	2301      	movs	r3, #1
   24f9e:	e00b      	b.n	24fb8 <z_impl_k_poll+0xf8>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   24fa0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 2516c <z_impl_k_poll+0x2ac>
   24fa4:	225c      	movs	r2, #92	; 0x5c
   24fa6:	4641      	mov	r1, r8
   24fa8:	4871      	ldr	r0, [pc, #452]	; (25170 <z_impl_k_poll+0x2b0>)
   24faa:	f003 f9ca 	bl	28342 <printk>
   24fae:	215c      	movs	r1, #92	; 0x5c
   24fb0:	4640      	mov	r0, r8
   24fb2:	f003 fd5f 	bl	28a74 <assert_post_action>
	return false;
   24fb6:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   24fb8:	2b00      	cmp	r3, #0
   24fba:	d04d      	beq.n	25058 <z_impl_k_poll+0x198>
	event->poller = NULL;
   24fbc:	2100      	movs	r1, #0
   24fbe:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   24fc0:	68e3      	ldr	r3, [r4, #12]
   24fc2:	f3c3 3245 	ubfx	r2, r3, #13, #6
   24fc6:	9805      	ldr	r0, [sp, #20]
   24fc8:	4302      	orrs	r2, r0
   24fca:	f362 3352 	bfi	r3, r2, #13, #6
   24fce:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   24fd0:	7031      	strb	r1, [r6, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24fd2:	4869      	ldr	r0, [pc, #420]	; (25178 <z_impl_k_poll+0x2b8>)
   24fd4:	f7fc ff70 	bl	21eb8 <z_spin_unlock_valid>
   24fd8:	2800      	cmp	r0, #0
   24fda:	f000 822a 	beq.w	25432 <z_impl_k_poll+0x572>
   24fde:	9b08      	ldr	r3, [sp, #32]
   24fe0:	f383 8811 	msr	BASEPRI, r3
   24fe4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24fe8:	3701      	adds	r7, #1
   24fea:	9b06      	ldr	r3, [sp, #24]
   24fec:	42bb      	cmp	r3, r7
   24fee:	f340 822b 	ble.w	25448 <z_impl_k_poll+0x588>
	__asm__ volatile(
   24ff2:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ff6:	f3ef 8211 	mrs	r2, BASEPRI
   24ffa:	f383 8812 	msr	BASEPRI_MAX, r3
   24ffe:	f3bf 8f6f 	isb	sy
   25002:	9208      	str	r2, [sp, #32]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25004:	485c      	ldr	r0, [pc, #368]	; (25178 <z_impl_k_poll+0x2b8>)
   25006:	f7fc ff47 	bl	21e98 <z_spin_lock_valid>
   2500a:	2800      	cmp	r0, #0
   2500c:	d0a2      	beq.n	24f54 <z_impl_k_poll+0x94>
	z_spin_lock_set_owner(l);
   2500e:	485a      	ldr	r0, [pc, #360]	; (25178 <z_impl_k_poll+0x2b8>)
   25010:	f7fc ff62 	bl	21ed8 <z_spin_lock_set_owner>
		if (is_condition_met(&events[ii], &state)) {
   25014:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   25018:	00a3      	lsls	r3, r4, #2
   2501a:	9309      	str	r3, [sp, #36]	; 0x24
   2501c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   25020:	7b63      	ldrb	r3, [r4, #13]
   25022:	f003 031f 	and.w	r3, r3, #31
   25026:	2b08      	cmp	r3, #8
   25028:	d8ba      	bhi.n	24fa0 <z_impl_k_poll+0xe0>
   2502a:	a201      	add	r2, pc, #4	; (adr r2, 25030 <z_impl_k_poll+0x170>)
   2502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25030:	00025055 	.word	0x00025055
   25034:	00024f87 	.word	0x00024f87
   25038:	00024f6b 	.word	0x00024f6b
   2503c:	00024fa1 	.word	0x00024fa1
   25040:	00024f79 	.word	0x00024f79
   25044:	00024fa1 	.word	0x00024fa1
   25048:	00024fa1 	.word	0x00024fa1
   2504c:	00024fa1 	.word	0x00024fa1
   25050:	00024f93 	.word	0x00024f93
   25054:	2300      	movs	r3, #0
   25056:	e7af      	b.n	24fb8 <z_impl_k_poll+0xf8>
		} else if (!just_check && poller->is_polling) {
   25058:	9b07      	ldr	r3, [sp, #28]
   2505a:	2b00      	cmp	r3, #0
   2505c:	d1b9      	bne.n	24fd2 <z_impl_k_poll+0x112>
   2505e:	7833      	ldrb	r3, [r6, #0]
   25060:	2b00      	cmp	r3, #0
   25062:	d0b6      	beq.n	24fd2 <z_impl_k_poll+0x112>
	switch (event->type) {
   25064:	7b63      	ldrb	r3, [r4, #13]
   25066:	f003 031f 	and.w	r3, r3, #31
   2506a:	2b08      	cmp	r3, #8
   2506c:	f200 81d2 	bhi.w	25414 <z_impl_k_poll+0x554>
   25070:	e8df f013 	tbh	[pc, r3, lsl #1]
   25074:	00f401db 	.word	0x00f401db
   25078:	01d00009 	.word	0x01d00009
   2507c:	01d00084 	.word	0x01d00084
   25080:	01d001d0 	.word	0x01d001d0
   25084:	0160      	.short	0x0160
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25086:	6923      	ldr	r3, [r4, #16]
   25088:	2b00      	cmp	r3, #0
   2508a:	d035      	beq.n	250f8 <z_impl_k_poll+0x238>
		add_event(&event->sem->poll_events, event, poller);
   2508c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   25090:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   25094:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   25098:	4598      	cmp	r8, r3
   2509a:	d039      	beq.n	25110 <z_impl_k_poll+0x250>
   2509c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   250a0:	2b00      	cmp	r3, #0
   250a2:	d035      	beq.n	25110 <z_impl_k_poll+0x250>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   250a4:	6898      	ldr	r0, [r3, #8]
   250a6:	f009 ff04 	bl	2eeb2 <poller_thread>
   250aa:	900b      	str	r0, [sp, #44]	; 0x2c
   250ac:	4630      	mov	r0, r6
   250ae:	f009 ff00 	bl	2eeb2 <poller_thread>
   250b2:	4601      	mov	r1, r0
   250b4:	900a      	str	r0, [sp, #40]	; 0x28
   250b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   250b8:	f009 fe73 	bl	2eda2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   250bc:	2800      	cmp	r0, #0
   250be:	dc27      	bgt.n	25110 <z_impl_k_poll+0x250>
	return list->head == list;
   250c0:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   250c4:	45d0      	cmp	r8, sl
   250c6:	d039      	beq.n	2513c <z_impl_k_poll+0x27c>
   250c8:	4653      	mov	r3, sl
   250ca:	46a2      	mov	sl, r4
   250cc:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   250ce:	2c00      	cmp	r4, #0
   250d0:	d03a      	beq.n	25148 <z_impl_k_poll+0x288>
		if (z_sched_prio_cmp(poller_thread(poller),
   250d2:	68a0      	ldr	r0, [r4, #8]
   250d4:	f009 feed 	bl	2eeb2 <poller_thread>
   250d8:	4601      	mov	r1, r0
   250da:	980a      	ldr	r0, [sp, #40]	; 0x28
   250dc:	f009 fe61 	bl	2eda2 <z_sched_prio_cmp>
   250e0:	2800      	cmp	r0, #0
   250e2:	dc1f      	bgt.n	25124 <z_impl_k_poll+0x264>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   250e4:	b394      	cbz	r4, 2514c <z_impl_k_poll+0x28c>
	return (node == list->tail) ? NULL : node->next;
   250e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   250ea:	429c      	cmp	r4, r3
   250ec:	d039      	beq.n	25162 <z_impl_k_poll+0x2a2>
   250ee:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   250f0:	2c00      	cmp	r4, #0
   250f2:	d1ec      	bne.n	250ce <z_impl_k_poll+0x20e>
   250f4:	4654      	mov	r4, sl
   250f6:	e02a      	b.n	2514e <z_impl_k_poll+0x28e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   250f8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2516c <z_impl_k_poll+0x2ac>
   250fc:	2286      	movs	r2, #134	; 0x86
   250fe:	4641      	mov	r1, r8
   25100:	481b      	ldr	r0, [pc, #108]	; (25170 <z_impl_k_poll+0x2b0>)
   25102:	f003 f91e 	bl	28342 <printk>
   25106:	2186      	movs	r1, #134	; 0x86
   25108:	4640      	mov	r0, r8
   2510a:	f003 fcb3 	bl	28a74 <assert_post_action>
   2510e:	e7bd      	b.n	2508c <z_impl_k_poll+0x1cc>
	sys_dnode_t *const tail = list->tail;
   25110:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   25114:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25116:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2511a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2511c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2511e:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   25122:	e182      	b.n	2542a <z_impl_k_poll+0x56a>
   25124:	4623      	mov	r3, r4
   25126:	4654      	mov	r4, sl
   25128:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   2512a:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   2512c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2512e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25130:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   25134:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   25136:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   2513a:	e176      	b.n	2542a <z_impl_k_poll+0x56a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2513c:	f04f 0a00 	mov.w	sl, #0
   25140:	4653      	mov	r3, sl
   25142:	46a2      	mov	sl, r4
   25144:	461c      	mov	r4, r3
   25146:	e7c2      	b.n	250ce <z_impl_k_poll+0x20e>
   25148:	4654      	mov	r4, sl
   2514a:	e000      	b.n	2514e <z_impl_k_poll+0x28e>
   2514c:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   2514e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   25152:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25154:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   25158:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2515a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2515c:	f8c8 4004 	str.w	r4, [r8, #4]
}
   25160:	e163      	b.n	2542a <z_impl_k_poll+0x56a>
   25162:	4654      	mov	r4, sl
   25164:	e7f3      	b.n	2514e <z_impl_k_poll+0x28e>
   25166:	bf00      	nop
   25168:	2000360c 	.word	0x2000360c
   2516c:	0003335c 	.word	0x0003335c
   25170:	0002f968 	.word	0x0002f968
   25174:	0002f9a4 	.word	0x0002f9a4
   25178:	20003668 	.word	0x20003668
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2517c:	6923      	ldr	r3, [r4, #16]
   2517e:	2b00      	cmp	r3, #0
   25180:	d035      	beq.n	251ee <z_impl_k_poll+0x32e>
		add_event(&event->queue->poll_events, event, poller);
   25182:	f8d4 a010 	ldr.w	sl, [r4, #16]
   25186:	f10a 0814 	add.w	r8, sl, #20
	return list->head == list;
   2518a:	f8da 3014 	ldr.w	r3, [sl, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2518e:	4598      	cmp	r8, r3
   25190:	d039      	beq.n	25206 <z_impl_k_poll+0x346>
   25192:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   25196:	2b00      	cmp	r3, #0
   25198:	d035      	beq.n	25206 <z_impl_k_poll+0x346>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2519a:	6898      	ldr	r0, [r3, #8]
   2519c:	f009 fe89 	bl	2eeb2 <poller_thread>
   251a0:	900b      	str	r0, [sp, #44]	; 0x2c
   251a2:	4630      	mov	r0, r6
   251a4:	f009 fe85 	bl	2eeb2 <poller_thread>
   251a8:	4601      	mov	r1, r0
   251aa:	900a      	str	r0, [sp, #40]	; 0x28
   251ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
   251ae:	f009 fdf8 	bl	2eda2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   251b2:	2800      	cmp	r0, #0
   251b4:	dc27      	bgt.n	25206 <z_impl_k_poll+0x346>
	return list->head == list;
   251b6:	f8da a014 	ldr.w	sl, [sl, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   251ba:	45d0      	cmp	r8, sl
   251bc:	d039      	beq.n	25232 <z_impl_k_poll+0x372>
   251be:	4653      	mov	r3, sl
   251c0:	46a2      	mov	sl, r4
   251c2:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   251c4:	2c00      	cmp	r4, #0
   251c6:	d03a      	beq.n	2523e <z_impl_k_poll+0x37e>
		if (z_sched_prio_cmp(poller_thread(poller),
   251c8:	68a0      	ldr	r0, [r4, #8]
   251ca:	f009 fe72 	bl	2eeb2 <poller_thread>
   251ce:	4601      	mov	r1, r0
   251d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   251d2:	f009 fde6 	bl	2eda2 <z_sched_prio_cmp>
   251d6:	2800      	cmp	r0, #0
   251d8:	dc1f      	bgt.n	2521a <z_impl_k_poll+0x35a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   251da:	b394      	cbz	r4, 25242 <z_impl_k_poll+0x382>
	return (node == list->tail) ? NULL : node->next;
   251dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   251e0:	429c      	cmp	r4, r3
   251e2:	d039      	beq.n	25258 <z_impl_k_poll+0x398>
   251e4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   251e6:	2c00      	cmp	r4, #0
   251e8:	d1ec      	bne.n	251c4 <z_impl_k_poll+0x304>
   251ea:	4654      	mov	r4, sl
   251ec:	e02a      	b.n	25244 <z_impl_k_poll+0x384>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   251ee:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 254e8 <z_impl_k_poll+0x628>
   251f2:	228a      	movs	r2, #138	; 0x8a
   251f4:	4641      	mov	r1, r8
   251f6:	48b8      	ldr	r0, [pc, #736]	; (254d8 <z_impl_k_poll+0x618>)
   251f8:	f003 f8a3 	bl	28342 <printk>
   251fc:	218a      	movs	r1, #138	; 0x8a
   251fe:	4640      	mov	r0, r8
   25200:	f003 fc38 	bl	28a74 <assert_post_action>
   25204:	e7bd      	b.n	25182 <z_impl_k_poll+0x2c2>
	sys_dnode_t *const tail = list->tail;
   25206:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2520a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2520c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   25210:	6063      	str	r3, [r4, #4]
	tail->next = node;
   25212:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25214:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   25218:	e107      	b.n	2542a <z_impl_k_poll+0x56a>
   2521a:	4623      	mov	r3, r4
   2521c:	4654      	mov	r4, sl
   2521e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   25220:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   25222:	6063      	str	r3, [r4, #4]
	node->next = successor;
   25224:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25226:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2522a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2522c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   25230:	e0fb      	b.n	2542a <z_impl_k_poll+0x56a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   25232:	f04f 0a00 	mov.w	sl, #0
   25236:	4653      	mov	r3, sl
   25238:	46a2      	mov	sl, r4
   2523a:	461c      	mov	r4, r3
   2523c:	e7c2      	b.n	251c4 <z_impl_k_poll+0x304>
   2523e:	4654      	mov	r4, sl
   25240:	e000      	b.n	25244 <z_impl_k_poll+0x384>
   25242:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   25244:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   25248:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2524a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2524e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   25250:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25252:	f8c8 4004 	str.w	r4, [r8, #4]
}
   25256:	e0e8      	b.n	2542a <z_impl_k_poll+0x56a>
   25258:	4654      	mov	r4, sl
   2525a:	e7f3      	b.n	25244 <z_impl_k_poll+0x384>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2525c:	6923      	ldr	r3, [r4, #16]
   2525e:	b393      	cbz	r3, 252c6 <z_impl_k_poll+0x406>
		add_event(&event->signal->poll_events, event, poller);
   25260:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   25264:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   25268:	4598      	cmp	r8, r3
   2526a:	d038      	beq.n	252de <z_impl_k_poll+0x41e>
   2526c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   25270:	b3ab      	cbz	r3, 252de <z_impl_k_poll+0x41e>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   25272:	6898      	ldr	r0, [r3, #8]
   25274:	f009 fe1d 	bl	2eeb2 <poller_thread>
   25278:	4682      	mov	sl, r0
   2527a:	4630      	mov	r0, r6
   2527c:	f009 fe19 	bl	2eeb2 <poller_thread>
   25280:	4601      	mov	r1, r0
   25282:	900a      	str	r0, [sp, #40]	; 0x28
   25284:	4650      	mov	r0, sl
   25286:	f009 fd8c 	bl	2eda2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2528a:	2800      	cmp	r0, #0
   2528c:	dc27      	bgt.n	252de <z_impl_k_poll+0x41e>
	return list->head == list;
   2528e:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25292:	45d0      	cmp	r8, sl
   25294:	d039      	beq.n	2530a <z_impl_k_poll+0x44a>
   25296:	4653      	mov	r3, sl
   25298:	46a2      	mov	sl, r4
   2529a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2529c:	2c00      	cmp	r4, #0
   2529e:	d03a      	beq.n	25316 <z_impl_k_poll+0x456>
		if (z_sched_prio_cmp(poller_thread(poller),
   252a0:	68a0      	ldr	r0, [r4, #8]
   252a2:	f009 fe06 	bl	2eeb2 <poller_thread>
   252a6:	4601      	mov	r1, r0
   252a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   252aa:	f009 fd7a 	bl	2eda2 <z_sched_prio_cmp>
   252ae:	2800      	cmp	r0, #0
   252b0:	dc1f      	bgt.n	252f2 <z_impl_k_poll+0x432>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   252b2:	b394      	cbz	r4, 2531a <z_impl_k_poll+0x45a>
	return (node == list->tail) ? NULL : node->next;
   252b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   252b8:	429c      	cmp	r4, r3
   252ba:	d039      	beq.n	25330 <z_impl_k_poll+0x470>
   252bc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   252be:	2c00      	cmp	r4, #0
   252c0:	d1ec      	bne.n	2529c <z_impl_k_poll+0x3dc>
   252c2:	4654      	mov	r4, sl
   252c4:	e02a      	b.n	2531c <z_impl_k_poll+0x45c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   252c6:	f8df 8220 	ldr.w	r8, [pc, #544]	; 254e8 <z_impl_k_poll+0x628>
   252ca:	228e      	movs	r2, #142	; 0x8e
   252cc:	4641      	mov	r1, r8
   252ce:	4882      	ldr	r0, [pc, #520]	; (254d8 <z_impl_k_poll+0x618>)
   252d0:	f003 f837 	bl	28342 <printk>
   252d4:	218e      	movs	r1, #142	; 0x8e
   252d6:	4640      	mov	r0, r8
   252d8:	f003 fbcc 	bl	28a74 <assert_post_action>
   252dc:	e7c0      	b.n	25260 <z_impl_k_poll+0x3a0>
	sys_dnode_t *const tail = list->tail;
   252de:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   252e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   252e4:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   252e8:	6063      	str	r3, [r4, #4]
	tail->next = node;
   252ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   252ec:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   252f0:	e09b      	b.n	2542a <z_impl_k_poll+0x56a>
   252f2:	4623      	mov	r3, r4
   252f4:	4654      	mov	r4, sl
   252f6:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   252f8:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   252fa:	6063      	str	r3, [r4, #4]
	node->next = successor;
   252fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   252fe:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   25302:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   25304:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   25308:	e08f      	b.n	2542a <z_impl_k_poll+0x56a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2530a:	f04f 0a00 	mov.w	sl, #0
   2530e:	4653      	mov	r3, sl
   25310:	46a2      	mov	sl, r4
   25312:	461c      	mov	r4, r3
   25314:	e7c2      	b.n	2529c <z_impl_k_poll+0x3dc>
   25316:	4654      	mov	r4, sl
   25318:	e000      	b.n	2531c <z_impl_k_poll+0x45c>
   2531a:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   2531c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   25320:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25322:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   25326:	6063      	str	r3, [r4, #4]
	tail->next = node;
   25328:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2532a:	f8c8 4004 	str.w	r4, [r8, #4]
}
   2532e:	e07c      	b.n	2542a <z_impl_k_poll+0x56a>
   25330:	4654      	mov	r4, sl
   25332:	e7f3      	b.n	2531c <z_impl_k_poll+0x45c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   25334:	6923      	ldr	r3, [r4, #16]
   25336:	2b00      	cmp	r3, #0
   25338:	d035      	beq.n	253a6 <z_impl_k_poll+0x4e6>
		add_event(&event->msgq->poll_events, event, poller);
   2533a:	f8d4 a010 	ldr.w	sl, [r4, #16]
   2533e:	f10a 0828 	add.w	r8, sl, #40	; 0x28
	return list->head == list;
   25342:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   25346:	4598      	cmp	r8, r3
   25348:	d039      	beq.n	253be <z_impl_k_poll+0x4fe>
   2534a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   2534e:	2b00      	cmp	r3, #0
   25350:	d035      	beq.n	253be <z_impl_k_poll+0x4fe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   25352:	6898      	ldr	r0, [r3, #8]
   25354:	f009 fdad 	bl	2eeb2 <poller_thread>
   25358:	900b      	str	r0, [sp, #44]	; 0x2c
   2535a:	4630      	mov	r0, r6
   2535c:	f009 fda9 	bl	2eeb2 <poller_thread>
   25360:	4601      	mov	r1, r0
   25362:	900a      	str	r0, [sp, #40]	; 0x28
   25364:	980b      	ldr	r0, [sp, #44]	; 0x2c
   25366:	f009 fd1c 	bl	2eda2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2536a:	2800      	cmp	r0, #0
   2536c:	dc27      	bgt.n	253be <z_impl_k_poll+0x4fe>
	return list->head == list;
   2536e:	f8da a028 	ldr.w	sl, [sl, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25372:	45d0      	cmp	r8, sl
   25374:	d039      	beq.n	253ea <z_impl_k_poll+0x52a>
   25376:	4653      	mov	r3, sl
   25378:	46a2      	mov	sl, r4
   2537a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2537c:	2c00      	cmp	r4, #0
   2537e:	d03a      	beq.n	253f6 <z_impl_k_poll+0x536>
		if (z_sched_prio_cmp(poller_thread(poller),
   25380:	68a0      	ldr	r0, [r4, #8]
   25382:	f009 fd96 	bl	2eeb2 <poller_thread>
   25386:	4601      	mov	r1, r0
   25388:	980a      	ldr	r0, [sp, #40]	; 0x28
   2538a:	f009 fd0a 	bl	2eda2 <z_sched_prio_cmp>
   2538e:	2800      	cmp	r0, #0
   25390:	dc1f      	bgt.n	253d2 <z_impl_k_poll+0x512>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25392:	b394      	cbz	r4, 253fa <z_impl_k_poll+0x53a>
	return (node == list->tail) ? NULL : node->next;
   25394:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25398:	429c      	cmp	r4, r3
   2539a:	d039      	beq.n	25410 <z_impl_k_poll+0x550>
   2539c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2539e:	2c00      	cmp	r4, #0
   253a0:	d1ec      	bne.n	2537c <z_impl_k_poll+0x4bc>
   253a2:	4654      	mov	r4, sl
   253a4:	e02a      	b.n	253fc <z_impl_k_poll+0x53c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   253a6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 254e8 <z_impl_k_poll+0x628>
   253aa:	2292      	movs	r2, #146	; 0x92
   253ac:	4641      	mov	r1, r8
   253ae:	484a      	ldr	r0, [pc, #296]	; (254d8 <z_impl_k_poll+0x618>)
   253b0:	f002 ffc7 	bl	28342 <printk>
   253b4:	2192      	movs	r1, #146	; 0x92
   253b6:	4640      	mov	r0, r8
   253b8:	f003 fb5c 	bl	28a74 <assert_post_action>
   253bc:	e7bd      	b.n	2533a <z_impl_k_poll+0x47a>
	sys_dnode_t *const tail = list->tail;
   253be:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   253c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   253c4:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   253c8:	6063      	str	r3, [r4, #4]
	tail->next = node;
   253ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
   253cc:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   253d0:	e02b      	b.n	2542a <z_impl_k_poll+0x56a>
   253d2:	4623      	mov	r3, r4
   253d4:	4654      	mov	r4, sl
   253d6:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   253d8:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   253da:	6063      	str	r3, [r4, #4]
	node->next = successor;
   253dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   253de:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   253e2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   253e4:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   253e8:	e01f      	b.n	2542a <z_impl_k_poll+0x56a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   253ea:	f04f 0a00 	mov.w	sl, #0
   253ee:	4653      	mov	r3, sl
   253f0:	46a2      	mov	sl, r4
   253f2:	461c      	mov	r4, r3
   253f4:	e7c2      	b.n	2537c <z_impl_k_poll+0x4bc>
   253f6:	4654      	mov	r4, sl
   253f8:	e000      	b.n	253fc <z_impl_k_poll+0x53c>
   253fa:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   253fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   25400:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25402:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   25406:	6063      	str	r3, [r4, #4]
	tail->next = node;
   25408:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2540a:	f8c8 4004 	str.w	r4, [r8, #4]
}
   2540e:	e00c      	b.n	2542a <z_impl_k_poll+0x56a>
   25410:	4654      	mov	r4, sl
   25412:	e7f3      	b.n	253fc <z_impl_k_poll+0x53c>
		__ASSERT(false, "invalid event type\n");
   25414:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 254e8 <z_impl_k_poll+0x628>
   25418:	2299      	movs	r2, #153	; 0x99
   2541a:	4641      	mov	r1, r8
   2541c:	482e      	ldr	r0, [pc, #184]	; (254d8 <z_impl_k_poll+0x618>)
   2541e:	f002 ff90 	bl	28342 <printk>
   25422:	2199      	movs	r1, #153	; 0x99
   25424:	4640      	mov	r0, r8
   25426:	f003 fb25 	bl	28a74 <assert_post_action>
	event->poller = poller;
   2542a:	60a6      	str	r6, [r4, #8]
			events_registered += 1;
   2542c:	f10b 0b01 	add.w	fp, fp, #1
   25430:	e5cf      	b.n	24fd2 <z_impl_k_poll+0x112>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25432:	4c2a      	ldr	r4, [pc, #168]	; (254dc <z_impl_k_poll+0x61c>)
   25434:	22ac      	movs	r2, #172	; 0xac
   25436:	4621      	mov	r1, r4
   25438:	4827      	ldr	r0, [pc, #156]	; (254d8 <z_impl_k_poll+0x618>)
   2543a:	f002 ff82 	bl	28342 <printk>
   2543e:	21ac      	movs	r1, #172	; 0xac
   25440:	4620      	mov	r0, r4
   25442:	f003 fb17 	bl	28a74 <assert_post_action>
   25446:	e5ca      	b.n	24fde <z_impl_k_poll+0x11e>
   25448:	f04f 0340 	mov.w	r3, #64	; 0x40
   2544c:	f3ef 8611 	mrs	r6, BASEPRI
   25450:	f383 8812 	msr	BASEPRI_MAX, r3
   25454:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25458:	4821      	ldr	r0, [pc, #132]	; (254e0 <z_impl_k_poll+0x620>)
   2545a:	f7fc fd1d 	bl	21e98 <z_spin_lock_valid>
   2545e:	b368      	cbz	r0, 254bc <z_impl_k_poll+0x5fc>
	z_spin_lock_set_owner(l);
   25460:	481f      	ldr	r0, [pc, #124]	; (254e0 <z_impl_k_poll+0x620>)
   25462:	f7fc fd39 	bl	21ed8 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   25466:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   2546a:	2b00      	cmp	r3, #0
   2546c:	d031      	beq.n	254d2 <z_impl_k_poll+0x612>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   2546e:	2300      	movs	r3, #0
   25470:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25474:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   25478:	4323      	orrs	r3, r4
   2547a:	f000 80ef 	beq.w	2565c <z_impl_k_poll+0x79c>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2547e:	4c18      	ldr	r4, [pc, #96]	; (254e0 <z_impl_k_poll+0x620>)
   25480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25484:	e9cd 2300 	strd	r2, r3, [sp]
   25488:	4a16      	ldr	r2, [pc, #88]	; (254e4 <z_impl_k_poll+0x624>)
   2548a:	4631      	mov	r1, r6
   2548c:	4620      	mov	r0, r4
   2548e:	f7fe fca5 	bl	23ddc <z_pend_curr>
   25492:	4607      	mov	r7, r0
   25494:	f04f 0340 	mov.w	r3, #64	; 0x40
   25498:	f3ef 8911 	mrs	r9, BASEPRI
   2549c:	f383 8812 	msr	BASEPRI_MAX, r3
   254a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254a4:	4620      	mov	r0, r4
   254a6:	f7fc fcf7 	bl	21e98 <z_spin_lock_valid>
   254aa:	2800      	cmp	r0, #0
   254ac:	f000 80ec 	beq.w	25688 <z_impl_k_poll+0x7c8>
	z_spin_lock_set_owner(l);
   254b0:	480b      	ldr	r0, [pc, #44]	; (254e0 <z_impl_k_poll+0x620>)
   254b2:	f7fc fd11 	bl	21ed8 <z_spin_lock_set_owner>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   254b6:	464e      	mov	r6, r9
	while (num_events--) {
   254b8:	465b      	mov	r3, fp
   254ba:	e118      	b.n	256ee <z_impl_k_poll+0x82e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254bc:	4c07      	ldr	r4, [pc, #28]	; (254dc <z_impl_k_poll+0x61c>)
   254be:	2281      	movs	r2, #129	; 0x81
   254c0:	4621      	mov	r1, r4
   254c2:	4805      	ldr	r0, [pc, #20]	; (254d8 <z_impl_k_poll+0x618>)
   254c4:	f002 ff3d 	bl	28342 <printk>
   254c8:	2181      	movs	r1, #129	; 0x81
   254ca:	4620      	mov	r0, r4
   254cc:	f003 fad2 	bl	28a74 <assert_post_action>
   254d0:	e7c6      	b.n	25460 <z_impl_k_poll+0x5a0>
		clear_event_registrations(events, events_registered, key);
   254d2:	46b0      	mov	r8, r6
	while (num_events--) {
   254d4:	465f      	mov	r7, fp
   254d6:	e02e      	b.n	25536 <z_impl_k_poll+0x676>
   254d8:	0002f968 	.word	0x0002f968
   254dc:	0002f9a4 	.word	0x0002f9a4
   254e0:	20003668 	.word	0x20003668
   254e4:	200006bc 	.word	0x200006bc
   254e8:	0003335c 	.word	0x0003335c
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   254ec:	6923      	ldr	r3, [r4, #16]
   254ee:	2b00      	cmp	r3, #0
   254f0:	d046      	beq.n	25580 <z_impl_k_poll+0x6c0>
	return node->next != NULL;
   254f2:	59eb      	ldr	r3, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   254f4:	b12b      	cbz	r3, 25502 <z_impl_k_poll+0x642>
	sys_dnode_t *const prev = node->prev;
   254f6:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   254f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   254fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   254fc:	2300      	movs	r3, #0
   254fe:	51eb      	str	r3, [r5, r7]
	node->prev = NULL;
   25500:	6063      	str	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25502:	48bb      	ldr	r0, [pc, #748]	; (257f0 <z_impl_k_poll+0x930>)
   25504:	f7fc fcd8 	bl	21eb8 <z_spin_unlock_valid>
   25508:	2800      	cmp	r0, #0
   2550a:	d07d      	beq.n	25608 <z_impl_k_poll+0x748>
	__asm__ volatile(
   2550c:	f388 8811 	msr	BASEPRI, r8
   25510:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   25514:	f04f 0340 	mov.w	r3, #64	; 0x40
   25518:	f3ef 8811 	mrs	r8, BASEPRI
   2551c:	f383 8812 	msr	BASEPRI_MAX, r3
   25520:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25524:	48b2      	ldr	r0, [pc, #712]	; (257f0 <z_impl_k_poll+0x930>)
   25526:	f7fc fcb7 	bl	21e98 <z_spin_lock_valid>
   2552a:	2800      	cmp	r0, #0
   2552c:	d077      	beq.n	2561e <z_impl_k_poll+0x75e>
	z_spin_lock_set_owner(l);
   2552e:	48b0      	ldr	r0, [pc, #704]	; (257f0 <z_impl_k_poll+0x930>)
   25530:	f7fc fcd2 	bl	21ed8 <z_spin_lock_set_owner>
	while (num_events--) {
   25534:	464f      	mov	r7, r9
   25536:	f107 39ff 	add.w	r9, r7, #4294967295
   2553a:	2f00      	cmp	r7, #0
   2553c:	d07a      	beq.n	25634 <z_impl_k_poll+0x774>
		clear_event_registration(&events[num_events]);
   2553e:	eb09 0489 	add.w	r4, r9, r9, lsl #2
   25542:	00a7      	lsls	r7, r4, #2
   25544:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	event->poller = NULL;
   25548:	2300      	movs	r3, #0
   2554a:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   2554c:	7b63      	ldrb	r3, [r4, #13]
   2554e:	f003 031f 	and.w	r3, r3, #31
   25552:	2b08      	cmp	r3, #8
   25554:	d84d      	bhi.n	255f2 <z_impl_k_poll+0x732>
   25556:	a201      	add	r2, pc, #4	; (adr r2, 2555c <z_impl_k_poll+0x69c>)
   25558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2555c:	00025503 	.word	0x00025503
   25560:	000255b7 	.word	0x000255b7
   25564:	000254ed 	.word	0x000254ed
   25568:	000255f3 	.word	0x000255f3
   2556c:	00025599 	.word	0x00025599
   25570:	000255f3 	.word	0x000255f3
   25574:	000255f3 	.word	0x000255f3
   25578:	000255f3 	.word	0x000255f3
   2557c:	000255d5 	.word	0x000255d5
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25580:	f8df a274 	ldr.w	sl, [pc, #628]	; 257f8 <z_impl_k_poll+0x938>
   25584:	22a9      	movs	r2, #169	; 0xa9
   25586:	4651      	mov	r1, sl
   25588:	489a      	ldr	r0, [pc, #616]	; (257f4 <z_impl_k_poll+0x934>)
   2558a:	f002 feda 	bl	28342 <printk>
   2558e:	21a9      	movs	r1, #169	; 0xa9
   25590:	4650      	mov	r0, sl
   25592:	f003 fa6f 	bl	28a74 <assert_post_action>
   25596:	e7ac      	b.n	254f2 <z_impl_k_poll+0x632>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25598:	6923      	ldr	r3, [r4, #16]
   2559a:	2b00      	cmp	r3, #0
   2559c:	d1a9      	bne.n	254f2 <z_impl_k_poll+0x632>
   2559e:	f8df a258 	ldr.w	sl, [pc, #600]	; 257f8 <z_impl_k_poll+0x938>
   255a2:	22ad      	movs	r2, #173	; 0xad
   255a4:	4651      	mov	r1, sl
   255a6:	4893      	ldr	r0, [pc, #588]	; (257f4 <z_impl_k_poll+0x934>)
   255a8:	f002 fecb 	bl	28342 <printk>
   255ac:	21ad      	movs	r1, #173	; 0xad
   255ae:	4650      	mov	r0, sl
   255b0:	f003 fa60 	bl	28a74 <assert_post_action>
   255b4:	e79d      	b.n	254f2 <z_impl_k_poll+0x632>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   255b6:	6923      	ldr	r3, [r4, #16]
   255b8:	2b00      	cmp	r3, #0
   255ba:	d19a      	bne.n	254f2 <z_impl_k_poll+0x632>
   255bc:	f8df a238 	ldr.w	sl, [pc, #568]	; 257f8 <z_impl_k_poll+0x938>
   255c0:	22b1      	movs	r2, #177	; 0xb1
   255c2:	4651      	mov	r1, sl
   255c4:	488b      	ldr	r0, [pc, #556]	; (257f4 <z_impl_k_poll+0x934>)
   255c6:	f002 febc 	bl	28342 <printk>
   255ca:	21b1      	movs	r1, #177	; 0xb1
   255cc:	4650      	mov	r0, sl
   255ce:	f003 fa51 	bl	28a74 <assert_post_action>
   255d2:	e78e      	b.n	254f2 <z_impl_k_poll+0x632>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   255d4:	6923      	ldr	r3, [r4, #16]
   255d6:	2b00      	cmp	r3, #0
   255d8:	d18b      	bne.n	254f2 <z_impl_k_poll+0x632>
   255da:	f8df a21c 	ldr.w	sl, [pc, #540]	; 257f8 <z_impl_k_poll+0x938>
   255de:	22b5      	movs	r2, #181	; 0xb5
   255e0:	4651      	mov	r1, sl
   255e2:	4884      	ldr	r0, [pc, #528]	; (257f4 <z_impl_k_poll+0x934>)
   255e4:	f002 fead 	bl	28342 <printk>
   255e8:	21b5      	movs	r1, #181	; 0xb5
   255ea:	4650      	mov	r0, sl
   255ec:	f003 fa42 	bl	28a74 <assert_post_action>
   255f0:	e77f      	b.n	254f2 <z_impl_k_poll+0x632>
		__ASSERT(false, "invalid event type\n");
   255f2:	4c81      	ldr	r4, [pc, #516]	; (257f8 <z_impl_k_poll+0x938>)
   255f4:	22bc      	movs	r2, #188	; 0xbc
   255f6:	4621      	mov	r1, r4
   255f8:	487e      	ldr	r0, [pc, #504]	; (257f4 <z_impl_k_poll+0x934>)
   255fa:	f002 fea2 	bl	28342 <printk>
   255fe:	21bc      	movs	r1, #188	; 0xbc
   25600:	4620      	mov	r0, r4
   25602:	f003 fa37 	bl	28a74 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   25606:	e77c      	b.n	25502 <z_impl_k_poll+0x642>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25608:	4c7c      	ldr	r4, [pc, #496]	; (257fc <z_impl_k_poll+0x93c>)
   2560a:	22ac      	movs	r2, #172	; 0xac
   2560c:	4621      	mov	r1, r4
   2560e:	4879      	ldr	r0, [pc, #484]	; (257f4 <z_impl_k_poll+0x934>)
   25610:	f002 fe97 	bl	28342 <printk>
   25614:	21ac      	movs	r1, #172	; 0xac
   25616:	4620      	mov	r0, r4
   25618:	f003 fa2c 	bl	28a74 <assert_post_action>
   2561c:	e776      	b.n	2550c <z_impl_k_poll+0x64c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2561e:	4c77      	ldr	r4, [pc, #476]	; (257fc <z_impl_k_poll+0x93c>)
   25620:	2281      	movs	r2, #129	; 0x81
   25622:	4621      	mov	r1, r4
   25624:	4873      	ldr	r0, [pc, #460]	; (257f4 <z_impl_k_poll+0x934>)
   25626:	f002 fe8c 	bl	28342 <printk>
   2562a:	2181      	movs	r1, #129	; 0x81
   2562c:	4620      	mov	r0, r4
   2562e:	f003 fa21 	bl	28a74 <assert_post_action>
   25632:	e77c      	b.n	2552e <z_impl_k_poll+0x66e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25634:	486e      	ldr	r0, [pc, #440]	; (257f0 <z_impl_k_poll+0x930>)
   25636:	f7fc fc3f 	bl	21eb8 <z_spin_unlock_valid>
   2563a:	b120      	cbz	r0, 25646 <z_impl_k_poll+0x786>
	__asm__ volatile(
   2563c:	f386 8811 	msr	BASEPRI, r6
   25640:	f3bf 8f6f 	isb	sy
		return 0;
   25644:	e0e4      	b.n	25810 <z_impl_k_poll+0x950>
   25646:	4c6d      	ldr	r4, [pc, #436]	; (257fc <z_impl_k_poll+0x93c>)
   25648:	22ac      	movs	r2, #172	; 0xac
   2564a:	4621      	mov	r1, r4
   2564c:	4869      	ldr	r0, [pc, #420]	; (257f4 <z_impl_k_poll+0x934>)
   2564e:	f002 fe78 	bl	28342 <printk>
   25652:	21ac      	movs	r1, #172	; 0xac
   25654:	4620      	mov	r0, r4
   25656:	f003 fa0d 	bl	28a74 <assert_post_action>
   2565a:	e7ef      	b.n	2563c <z_impl_k_poll+0x77c>
   2565c:	4864      	ldr	r0, [pc, #400]	; (257f0 <z_impl_k_poll+0x930>)
   2565e:	f7fc fc2b 	bl	21eb8 <z_spin_unlock_valid>
   25662:	b130      	cbz	r0, 25672 <z_impl_k_poll+0x7b2>
   25664:	f386 8811 	msr	BASEPRI, r6
   25668:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2566c:	f06f 070a 	mvn.w	r7, #10
   25670:	e0ce      	b.n	25810 <z_impl_k_poll+0x950>
   25672:	4c62      	ldr	r4, [pc, #392]	; (257fc <z_impl_k_poll+0x93c>)
   25674:	22ac      	movs	r2, #172	; 0xac
   25676:	4621      	mov	r1, r4
   25678:	485e      	ldr	r0, [pc, #376]	; (257f4 <z_impl_k_poll+0x934>)
   2567a:	f002 fe62 	bl	28342 <printk>
   2567e:	21ac      	movs	r1, #172	; 0xac
   25680:	4620      	mov	r0, r4
   25682:	f003 f9f7 	bl	28a74 <assert_post_action>
   25686:	e7ed      	b.n	25664 <z_impl_k_poll+0x7a4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25688:	4c5c      	ldr	r4, [pc, #368]	; (257fc <z_impl_k_poll+0x93c>)
   2568a:	2281      	movs	r2, #129	; 0x81
   2568c:	4621      	mov	r1, r4
   2568e:	4859      	ldr	r0, [pc, #356]	; (257f4 <z_impl_k_poll+0x934>)
   25690:	f002 fe57 	bl	28342 <printk>
   25694:	2181      	movs	r1, #129	; 0x81
   25696:	4620      	mov	r0, r4
   25698:	f003 f9ec 	bl	28a74 <assert_post_action>
   2569c:	e708      	b.n	254b0 <z_impl_k_poll+0x5f0>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2569e:	6923      	ldr	r3, [r4, #16]
   256a0:	2b00      	cmp	r3, #0
   256a2:	d04b      	beq.n	2573c <z_impl_k_poll+0x87c>
	return node->next != NULL;
   256a4:	f855 300a 	ldr.w	r3, [r5, sl]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   256a8:	b133      	cbz	r3, 256b8 <z_impl_k_poll+0x7f8>
	sys_dnode_t *const prev = node->prev;
   256aa:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   256ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   256ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   256b0:	2300      	movs	r3, #0
   256b2:	f845 300a 	str.w	r3, [r5, sl]
	node->prev = NULL;
   256b6:	6063      	str	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   256b8:	484d      	ldr	r0, [pc, #308]	; (257f0 <z_impl_k_poll+0x930>)
   256ba:	f7fc fbfd 	bl	21eb8 <z_spin_unlock_valid>
   256be:	2800      	cmp	r0, #0
   256c0:	f000 8080 	beq.w	257c4 <z_impl_k_poll+0x904>
   256c4:	f386 8811 	msr	BASEPRI, r6
   256c8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   256cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   256d0:	f3ef 8611 	mrs	r6, BASEPRI
   256d4:	f383 8812 	msr	BASEPRI_MAX, r3
   256d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   256dc:	4844      	ldr	r0, [pc, #272]	; (257f0 <z_impl_k_poll+0x930>)
   256de:	f7fc fbdb 	bl	21e98 <z_spin_lock_valid>
   256e2:	2800      	cmp	r0, #0
   256e4:	d079      	beq.n	257da <z_impl_k_poll+0x91a>
	z_spin_lock_set_owner(l);
   256e6:	4842      	ldr	r0, [pc, #264]	; (257f0 <z_impl_k_poll+0x930>)
   256e8:	f7fc fbf6 	bl	21ed8 <z_spin_lock_set_owner>
	while (num_events--) {
   256ec:	4643      	mov	r3, r8
   256ee:	f103 38ff 	add.w	r8, r3, #4294967295
   256f2:	2b00      	cmp	r3, #0
   256f4:	f000 8084 	beq.w	25800 <z_impl_k_poll+0x940>
		clear_event_registration(&events[num_events]);
   256f8:	eb08 0488 	add.w	r4, r8, r8, lsl #2
   256fc:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   25700:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	event->poller = NULL;
   25704:	2300      	movs	r3, #0
   25706:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   25708:	7b63      	ldrb	r3, [r4, #13]
   2570a:	f003 031f 	and.w	r3, r3, #31
   2570e:	2b08      	cmp	r3, #8
   25710:	d84d      	bhi.n	257ae <z_impl_k_poll+0x8ee>
   25712:	a201      	add	r2, pc, #4	; (adr r2, 25718 <z_impl_k_poll+0x858>)
   25714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25718:	000256b9 	.word	0x000256b9
   2571c:	00025773 	.word	0x00025773
   25720:	0002569f 	.word	0x0002569f
   25724:	000257af 	.word	0x000257af
   25728:	00025755 	.word	0x00025755
   2572c:	000257af 	.word	0x000257af
   25730:	000257af 	.word	0x000257af
   25734:	000257af 	.word	0x000257af
   25738:	00025791 	.word	0x00025791
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2573c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 257f8 <z_impl_k_poll+0x938>
   25740:	22a9      	movs	r2, #169	; 0xa9
   25742:	4659      	mov	r1, fp
   25744:	482b      	ldr	r0, [pc, #172]	; (257f4 <z_impl_k_poll+0x934>)
   25746:	f002 fdfc 	bl	28342 <printk>
   2574a:	21a9      	movs	r1, #169	; 0xa9
   2574c:	4658      	mov	r0, fp
   2574e:	f003 f991 	bl	28a74 <assert_post_action>
   25752:	e7a7      	b.n	256a4 <z_impl_k_poll+0x7e4>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25754:	6923      	ldr	r3, [r4, #16]
   25756:	2b00      	cmp	r3, #0
   25758:	d1a4      	bne.n	256a4 <z_impl_k_poll+0x7e4>
   2575a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 257f8 <z_impl_k_poll+0x938>
   2575e:	22ad      	movs	r2, #173	; 0xad
   25760:	4659      	mov	r1, fp
   25762:	4824      	ldr	r0, [pc, #144]	; (257f4 <z_impl_k_poll+0x934>)
   25764:	f002 fded 	bl	28342 <printk>
   25768:	21ad      	movs	r1, #173	; 0xad
   2576a:	4658      	mov	r0, fp
   2576c:	f003 f982 	bl	28a74 <assert_post_action>
   25770:	e798      	b.n	256a4 <z_impl_k_poll+0x7e4>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25772:	6923      	ldr	r3, [r4, #16]
   25774:	2b00      	cmp	r3, #0
   25776:	d195      	bne.n	256a4 <z_impl_k_poll+0x7e4>
   25778:	f8df b07c 	ldr.w	fp, [pc, #124]	; 257f8 <z_impl_k_poll+0x938>
   2577c:	22b1      	movs	r2, #177	; 0xb1
   2577e:	4659      	mov	r1, fp
   25780:	481c      	ldr	r0, [pc, #112]	; (257f4 <z_impl_k_poll+0x934>)
   25782:	f002 fdde 	bl	28342 <printk>
   25786:	21b1      	movs	r1, #177	; 0xb1
   25788:	4658      	mov	r0, fp
   2578a:	f003 f973 	bl	28a74 <assert_post_action>
   2578e:	e789      	b.n	256a4 <z_impl_k_poll+0x7e4>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   25790:	6923      	ldr	r3, [r4, #16]
   25792:	2b00      	cmp	r3, #0
   25794:	d186      	bne.n	256a4 <z_impl_k_poll+0x7e4>
   25796:	f8df b060 	ldr.w	fp, [pc, #96]	; 257f8 <z_impl_k_poll+0x938>
   2579a:	22b5      	movs	r2, #181	; 0xb5
   2579c:	4659      	mov	r1, fp
   2579e:	4815      	ldr	r0, [pc, #84]	; (257f4 <z_impl_k_poll+0x934>)
   257a0:	f002 fdcf 	bl	28342 <printk>
   257a4:	21b5      	movs	r1, #181	; 0xb5
   257a6:	4658      	mov	r0, fp
   257a8:	f003 f964 	bl	28a74 <assert_post_action>
   257ac:	e77a      	b.n	256a4 <z_impl_k_poll+0x7e4>
		__ASSERT(false, "invalid event type\n");
   257ae:	4c12      	ldr	r4, [pc, #72]	; (257f8 <z_impl_k_poll+0x938>)
   257b0:	22bc      	movs	r2, #188	; 0xbc
   257b2:	4621      	mov	r1, r4
   257b4:	480f      	ldr	r0, [pc, #60]	; (257f4 <z_impl_k_poll+0x934>)
   257b6:	f002 fdc4 	bl	28342 <printk>
   257ba:	21bc      	movs	r1, #188	; 0xbc
   257bc:	4620      	mov	r0, r4
   257be:	f003 f959 	bl	28a74 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   257c2:	e779      	b.n	256b8 <z_impl_k_poll+0x7f8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   257c4:	4c0d      	ldr	r4, [pc, #52]	; (257fc <z_impl_k_poll+0x93c>)
   257c6:	22ac      	movs	r2, #172	; 0xac
   257c8:	4621      	mov	r1, r4
   257ca:	480a      	ldr	r0, [pc, #40]	; (257f4 <z_impl_k_poll+0x934>)
   257cc:	f002 fdb9 	bl	28342 <printk>
   257d0:	21ac      	movs	r1, #172	; 0xac
   257d2:	4620      	mov	r0, r4
   257d4:	f003 f94e 	bl	28a74 <assert_post_action>
   257d8:	e774      	b.n	256c4 <z_impl_k_poll+0x804>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257da:	4c08      	ldr	r4, [pc, #32]	; (257fc <z_impl_k_poll+0x93c>)
   257dc:	2281      	movs	r2, #129	; 0x81
   257de:	4621      	mov	r1, r4
   257e0:	4804      	ldr	r0, [pc, #16]	; (257f4 <z_impl_k_poll+0x934>)
   257e2:	f002 fdae 	bl	28342 <printk>
   257e6:	2181      	movs	r1, #129	; 0x81
   257e8:	4620      	mov	r0, r4
   257ea:	f003 f943 	bl	28a74 <assert_post_action>
   257ee:	e77a      	b.n	256e6 <z_impl_k_poll+0x826>
   257f0:	20003668 	.word	0x20003668
   257f4:	0002f968 	.word	0x0002f968
   257f8:	0003335c 	.word	0x0003335c
   257fc:	0002f9a4 	.word	0x0002f9a4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25800:	480b      	ldr	r0, [pc, #44]	; (25830 <z_impl_k_poll+0x970>)
   25802:	f7fc fb59 	bl	21eb8 <z_spin_unlock_valid>
   25806:	b138      	cbz	r0, 25818 <z_impl_k_poll+0x958>
	__asm__ volatile(
   25808:	f389 8811 	msr	BASEPRI, r9
   2580c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   25810:	4638      	mov	r0, r7
   25812:	b00d      	add	sp, #52	; 0x34
   25814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25818:	4c06      	ldr	r4, [pc, #24]	; (25834 <z_impl_k_poll+0x974>)
   2581a:	22ac      	movs	r2, #172	; 0xac
   2581c:	4621      	mov	r1, r4
   2581e:	4806      	ldr	r0, [pc, #24]	; (25838 <z_impl_k_poll+0x978>)
   25820:	f002 fd8f 	bl	28342 <printk>
   25824:	21ac      	movs	r1, #172	; 0xac
   25826:	4620      	mov	r0, r4
   25828:	f003 f924 	bl	28a74 <assert_post_action>
   2582c:	e7ec      	b.n	25808 <z_impl_k_poll+0x948>
   2582e:	bf00      	nop
   25830:	20003668 	.word	0x20003668
   25834:	0002f9a4 	.word	0x0002f9a4
   25838:	0002f968 	.word	0x0002f968

0002583c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2583e:	4604      	mov	r4, r0
   25840:	460d      	mov	r5, r1
	__asm__ volatile(
   25842:	f04f 0340 	mov.w	r3, #64	; 0x40
   25846:	f3ef 8611 	mrs	r6, BASEPRI
   2584a:	f383 8812 	msr	BASEPRI_MAX, r3
   2584e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25852:	481f      	ldr	r0, [pc, #124]	; (258d0 <z_impl_k_poll_signal_raise+0x94>)
   25854:	f7fc fb20 	bl	21e98 <z_spin_lock_valid>
   25858:	b1d0      	cbz	r0, 25890 <z_impl_k_poll_signal_raise+0x54>
	z_spin_lock_set_owner(l);
   2585a:	481d      	ldr	r0, [pc, #116]	; (258d0 <z_impl_k_poll_signal_raise+0x94>)
   2585c:	f7fc fb3c 	bl	21ed8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   25860:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   25862:	2301      	movs	r3, #1
   25864:	60a3      	str	r3, [r4, #8]
	return list->head == list;
   25866:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   25868:	4284      	cmp	r4, r0
   2586a:	d01c      	beq.n	258a6 <z_impl_k_poll_signal_raise+0x6a>
	sys_dnode_t *const prev = node->prev;
   2586c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2586e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   25870:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25872:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25874:	2300      	movs	r3, #0
   25876:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   25878:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   2587a:	b1a0      	cbz	r0, 258a6 <z_impl_k_poll_signal_raise+0x6a>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2587c:	2101      	movs	r1, #1
   2587e:	f009 fb31 	bl	2eee4 <signal_poll_event>
   25882:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   25884:	4631      	mov	r1, r6
   25886:	4812      	ldr	r0, [pc, #72]	; (258d0 <z_impl_k_poll_signal_raise+0x94>)
   25888:	f7fd feaa 	bl	235e0 <z_reschedule>
	return rc;
}
   2588c:	4620      	mov	r0, r4
   2588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25890:	4f10      	ldr	r7, [pc, #64]	; (258d4 <z_impl_k_poll_signal_raise+0x98>)
   25892:	2281      	movs	r2, #129	; 0x81
   25894:	4639      	mov	r1, r7
   25896:	4810      	ldr	r0, [pc, #64]	; (258d8 <z_impl_k_poll_signal_raise+0x9c>)
   25898:	f002 fd53 	bl	28342 <printk>
   2589c:	2181      	movs	r1, #129	; 0x81
   2589e:	4638      	mov	r0, r7
   258a0:	f003 f8e8 	bl	28a74 <assert_post_action>
   258a4:	e7d9      	b.n	2585a <z_impl_k_poll_signal_raise+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258a6:	480a      	ldr	r0, [pc, #40]	; (258d0 <z_impl_k_poll_signal_raise+0x94>)
   258a8:	f7fc fb06 	bl	21eb8 <z_spin_unlock_valid>
   258ac:	b128      	cbz	r0, 258ba <z_impl_k_poll_signal_raise+0x7e>
	__asm__ volatile(
   258ae:	f386 8811 	msr	BASEPRI, r6
   258b2:	f3bf 8f6f 	isb	sy
		return 0;
   258b6:	2400      	movs	r4, #0
   258b8:	e7e8      	b.n	2588c <z_impl_k_poll_signal_raise+0x50>
   258ba:	4c06      	ldr	r4, [pc, #24]	; (258d4 <z_impl_k_poll_signal_raise+0x98>)
   258bc:	22ac      	movs	r2, #172	; 0xac
   258be:	4621      	mov	r1, r4
   258c0:	4805      	ldr	r0, [pc, #20]	; (258d8 <z_impl_k_poll_signal_raise+0x9c>)
   258c2:	f002 fd3e 	bl	28342 <printk>
   258c6:	21ac      	movs	r1, #172	; 0xac
   258c8:	4620      	mov	r0, r4
   258ca:	f003 f8d3 	bl	28a74 <assert_post_action>
   258ce:	e7ee      	b.n	258ae <z_impl_k_poll_signal_raise+0x72>
   258d0:	20003668 	.word	0x20003668
   258d4:	0002f9a4 	.word	0x0002f9a4
   258d8:	0002f968 	.word	0x0002f968

000258dc <z_heap_aligned_alloc>:
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   258dc:	b570      	push	{r4, r5, r6, lr}
   258de:	b082      	sub	sp, #8
   258e0:	4606      	mov	r6, r0
   258e2:	460c      	mov	r4, r1
	return __builtin_add_overflow(a, b, result);
   258e4:	2100      	movs	r1, #0
   258e6:	2304      	movs	r3, #4
   258e8:	18d2      	adds	r2, r2, r3
   258ea:	d21c      	bcs.n	25926 <z_heap_aligned_alloc+0x4a>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   258ec:	b9e9      	cbnz	r1, 2592a <z_heap_aligned_alloc+0x4e>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   258ee:	2000      	movs	r0, #0
   258f0:	2100      	movs	r1, #0
   258f2:	e9cd 0100 	strd	r0, r1, [sp]
   258f6:	f044 0104 	orr.w	r1, r4, #4
   258fa:	4630      	mov	r0, r6
   258fc:	f7fc f8ec 	bl	21ad8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   25900:	4605      	mov	r5, r0
   25902:	b198      	cbz	r0, 2592c <z_heap_aligned_alloc+0x50>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   25904:	f845 6b04 	str.w	r6, [r5], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   25908:	b184      	cbz	r4, 2592c <z_heap_aligned_alloc+0x50>
   2590a:	3c01      	subs	r4, #1
   2590c:	4225      	tst	r5, r4
   2590e:	d00d      	beq.n	2592c <z_heap_aligned_alloc+0x50>
   25910:	4c08      	ldr	r4, [pc, #32]	; (25934 <z_heap_aligned_alloc+0x58>)
   25912:	2225      	movs	r2, #37	; 0x25
   25914:	4621      	mov	r1, r4
   25916:	4808      	ldr	r0, [pc, #32]	; (25938 <z_heap_aligned_alloc+0x5c>)
   25918:	f002 fd13 	bl	28342 <printk>
   2591c:	2125      	movs	r1, #37	; 0x25
   2591e:	4620      	mov	r0, r4
   25920:	f003 f8a8 	bl	28a74 <assert_post_action>
   25924:	e002      	b.n	2592c <z_heap_aligned_alloc+0x50>
   25926:	2101      	movs	r1, #1
   25928:	e7e0      	b.n	258ec <z_heap_aligned_alloc+0x10>
		return NULL;
   2592a:	2500      	movs	r5, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   2592c:	4628      	mov	r0, r5
   2592e:	b002      	add	sp, #8
   25930:	bd70      	pop	{r4, r5, r6, pc}
   25932:	bf00      	nop
   25934:	00033380 	.word	0x00033380
   25938:	0002f968 	.word	0x0002f968

0002593c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2593c:	b538      	push	{r3, r4, r5, lr}
   2593e:	4604      	mov	r4, r0
   25940:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   25942:	f009 f951 	bl	2ebe8 <k_is_in_isr>
   25946:	b948      	cbnz	r0, 2595c <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   25948:	4b05      	ldr	r3, [pc, #20]	; (25960 <z_thread_aligned_alloc+0x24>)
   2594a:	689b      	ldr	r3, [r3, #8]
   2594c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   25950:	b118      	cbz	r0, 2595a <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   25952:	462a      	mov	r2, r5
   25954:	4621      	mov	r1, r4
   25956:	f7ff ffc1 	bl	258dc <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   2595a:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   2595c:	2000      	movs	r0, #0
	return ret;
   2595e:	e7fc      	b.n	2595a <z_thread_aligned_alloc+0x1e>
   25960:	2000360c 	.word	0x2000360c

00025964 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   25964:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   25966:	4a03      	ldr	r2, [pc, #12]	; (25974 <boot_banner+0x10>)
   25968:	4903      	ldr	r1, [pc, #12]	; (25978 <boot_banner+0x14>)
   2596a:	4804      	ldr	r0, [pc, #16]	; (2597c <boot_banner+0x18>)
   2596c:	f002 fce9 	bl	28342 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   25970:	bd08      	pop	{r3, pc}
   25972:	bf00      	nop
   25974:	00030464 	.word	0x00030464
   25978:	000333a4 	.word	0x000333a4
   2597c:	000333b0 	.word	0x000333b0

00025980 <nrf_cc3xx_platform_init>:
   25980:	b510      	push	{r4, lr}
   25982:	4c0c      	ldr	r4, [pc, #48]	; (259b4 <nrf_cc3xx_platform_init+0x34>)
   25984:	6823      	ldr	r3, [r4, #0]
   25986:	b113      	cbz	r3, 2598e <nrf_cc3xx_platform_init+0xe>
   25988:	4b0b      	ldr	r3, [pc, #44]	; (259b8 <nrf_cc3xx_platform_init+0x38>)
   2598a:	681b      	ldr	r3, [r3, #0]
   2598c:	b92b      	cbnz	r3, 2599a <nrf_cc3xx_platform_init+0x1a>
   2598e:	f000 fabd 	bl	25f0c <CC_LibInit>
   25992:	b930      	cbnz	r0, 259a2 <nrf_cc3xx_platform_init+0x22>
   25994:	4b08      	ldr	r3, [pc, #32]	; (259b8 <nrf_cc3xx_platform_init+0x38>)
   25996:	2201      	movs	r2, #1
   25998:	601a      	str	r2, [r3, #0]
   2599a:	2301      	movs	r3, #1
   2599c:	6023      	str	r3, [r4, #0]
   2599e:	2000      	movs	r0, #0
   259a0:	bd10      	pop	{r4, pc}
   259a2:	3801      	subs	r0, #1
   259a4:	2806      	cmp	r0, #6
   259a6:	d901      	bls.n	259ac <nrf_cc3xx_platform_init+0x2c>
   259a8:	4804      	ldr	r0, [pc, #16]	; (259bc <nrf_cc3xx_platform_init+0x3c>)
   259aa:	bd10      	pop	{r4, pc}
   259ac:	4b04      	ldr	r3, [pc, #16]	; (259c0 <nrf_cc3xx_platform_init+0x40>)
   259ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   259b2:	bd10      	pop	{r4, pc}
   259b4:	2000366c 	.word	0x2000366c
   259b8:	20003670 	.word	0x20003670
   259bc:	ffff8ffe 	.word	0xffff8ffe
   259c0:	000333d8 	.word	0x000333d8

000259c4 <nrf_cc3xx_platform_abort>:
   259c4:	f3bf 8f4f 	dsb	sy
   259c8:	4905      	ldr	r1, [pc, #20]	; (259e0 <nrf_cc3xx_platform_abort+0x1c>)
   259ca:	4b06      	ldr	r3, [pc, #24]	; (259e4 <nrf_cc3xx_platform_abort+0x20>)
   259cc:	68ca      	ldr	r2, [r1, #12]
   259ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   259d2:	4313      	orrs	r3, r2
   259d4:	60cb      	str	r3, [r1, #12]
   259d6:	f3bf 8f4f 	dsb	sy
   259da:	bf00      	nop
   259dc:	e7fd      	b.n	259da <nrf_cc3xx_platform_abort+0x16>
   259de:	bf00      	nop
   259e0:	e000ed00 	.word	0xe000ed00
   259e4:	05fa0004 	.word	0x05fa0004

000259e8 <CC_PalAbort>:
   259e8:	b4f0      	push	{r4, r5, r6, r7}
   259ea:	4f09      	ldr	r7, [pc, #36]	; (25a10 <CC_PalAbort+0x28>)
   259ec:	4e09      	ldr	r6, [pc, #36]	; (25a14 <CC_PalAbort+0x2c>)
   259ee:	4c0a      	ldr	r4, [pc, #40]	; (25a18 <CC_PalAbort+0x30>)
   259f0:	4a0a      	ldr	r2, [pc, #40]	; (25a1c <CC_PalAbort+0x34>)
   259f2:	4d0b      	ldr	r5, [pc, #44]	; (25a20 <CC_PalAbort+0x38>)
   259f4:	490b      	ldr	r1, [pc, #44]	; (25a24 <CC_PalAbort+0x3c>)
   259f6:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   259fa:	603b      	str	r3, [r7, #0]
   259fc:	6852      	ldr	r2, [r2, #4]
   259fe:	6033      	str	r3, [r6, #0]
   25a00:	6023      	str	r3, [r4, #0]
   25a02:	2400      	movs	r4, #0
   25a04:	602b      	str	r3, [r5, #0]
   25a06:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   25a0a:	bcf0      	pop	{r4, r5, r6, r7}
   25a0c:	4710      	bx	r2
   25a0e:	bf00      	nop
   25a10:	5002b400 	.word	0x5002b400
   25a14:	5002b404 	.word	0x5002b404
   25a18:	5002b408 	.word	0x5002b408
   25a1c:	200006c4 	.word	0x200006c4
   25a20:	5002b40c 	.word	0x5002b40c
   25a24:	5002a000 	.word	0x5002a000

00025a28 <nrf_cc3xx_platform_set_abort>:
   25a28:	e9d0 1200 	ldrd	r1, r2, [r0]
   25a2c:	4b01      	ldr	r3, [pc, #4]	; (25a34 <nrf_cc3xx_platform_set_abort+0xc>)
   25a2e:	e9c3 1200 	strd	r1, r2, [r3]
   25a32:	4770      	bx	lr
   25a34:	200006c4 	.word	0x200006c4

00025a38 <nrf_cc3xx_platform_ctr_drbg_init>:
   25a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25a3c:	4c15      	ldr	r4, [pc, #84]	; (25a94 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   25a3e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 25a9c <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   25a42:	2800      	cmp	r0, #0
   25a44:	bf18      	it	ne
   25a46:	4604      	movne	r4, r0
   25a48:	b083      	sub	sp, #12
   25a4a:	6820      	ldr	r0, [r4, #0]
   25a4c:	4540      	cmp	r0, r8
   25a4e:	d01d      	beq.n	25a8c <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   25a50:	460d      	mov	r5, r1
   25a52:	4620      	mov	r0, r4
   25a54:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   25a58:	f104 0904 	add.w	r9, r4, #4
   25a5c:	4616      	mov	r6, r2
   25a5e:	f504 778c 	add.w	r7, r4, #280	; 0x118
   25a62:	f000 fe9f 	bl	267a4 <mbedtls_platform_zeroize>
   25a66:	4648      	mov	r0, r9
   25a68:	f000 f940 	bl	25cec <cc_mbedtls_entropy_init>
   25a6c:	4638      	mov	r0, r7
   25a6e:	f001 fa75 	bl	26f5c <cc_mbedtls_ctr_drbg_init>
   25a72:	4909      	ldr	r1, [pc, #36]	; (25a98 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   25a74:	9600      	str	r6, [sp, #0]
   25a76:	464a      	mov	r2, r9
   25a78:	4638      	mov	r0, r7
   25a7a:	462b      	mov	r3, r5
   25a7c:	f001 fa80 	bl	26f80 <cc_mbedtls_ctr_drbg_seed>
   25a80:	b908      	cbnz	r0, 25a86 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   25a82:	f8c4 8000 	str.w	r8, [r4]
   25a86:	b003      	add	sp, #12
   25a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25a8c:	2000      	movs	r0, #0
   25a8e:	b003      	add	sp, #12
   25a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25a94:	20003f7c 	.word	0x20003f7c
   25a98:	00025d69 	.word	0x00025d69
   25a9c:	5ac9bca5 	.word	0x5ac9bca5

00025aa0 <nrf_cc3xx_platform_ctr_drbg_get>:
   25aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25aa2:	4c0d      	ldr	r4, [pc, #52]	; (25ad8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   25aa4:	4e0d      	ldr	r6, [pc, #52]	; (25adc <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   25aa6:	2800      	cmp	r0, #0
   25aa8:	bf08      	it	eq
   25aaa:	4620      	moveq	r0, r4
   25aac:	b083      	sub	sp, #12
   25aae:	6807      	ldr	r7, [r0, #0]
   25ab0:	42b7      	cmp	r7, r6
   25ab2:	d10e      	bne.n	25ad2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   25ab4:	2600      	movs	r6, #0
   25ab6:	461d      	mov	r5, r3
   25ab8:	f500 708c 	add.w	r0, r0, #280	; 0x118
   25abc:	9600      	str	r6, [sp, #0]
   25abe:	4633      	mov	r3, r6
   25ac0:	4614      	mov	r4, r2
   25ac2:	f001 faad 	bl	27020 <cc_mbedtls_ctr_drbg_random_with_add>
   25ac6:	2800      	cmp	r0, #0
   25ac8:	bf18      	it	ne
   25aca:	4634      	movne	r4, r6
   25acc:	602c      	str	r4, [r5, #0]
   25ace:	b003      	add	sp, #12
   25ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25ad2:	4803      	ldr	r0, [pc, #12]	; (25ae0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   25ad4:	e7fb      	b.n	25ace <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   25ad6:	bf00      	nop
   25ad8:	20003f7c 	.word	0x20003f7c
   25adc:	5ac9bca5 	.word	0x5ac9bca5
   25ae0:	ffff8fe8 	.word	0xffff8fe8

00025ae4 <mutex_free>:
   25ae4:	b510      	push	{r4, lr}
   25ae6:	4604      	mov	r4, r0
   25ae8:	b130      	cbz	r0, 25af8 <mutex_free+0x14>
   25aea:	6863      	ldr	r3, [r4, #4]
   25aec:	06db      	lsls	r3, r3, #27
   25aee:	d502      	bpl.n	25af6 <mutex_free+0x12>
   25af0:	2300      	movs	r3, #0
   25af2:	6023      	str	r3, [r4, #0]
   25af4:	6063      	str	r3, [r4, #4]
   25af6:	bd10      	pop	{r4, pc}
   25af8:	4b02      	ldr	r3, [pc, #8]	; (25b04 <mutex_free+0x20>)
   25afa:	4803      	ldr	r0, [pc, #12]	; (25b08 <mutex_free+0x24>)
   25afc:	685b      	ldr	r3, [r3, #4]
   25afe:	4798      	blx	r3
   25b00:	e7f3      	b.n	25aea <mutex_free+0x6>
   25b02:	bf00      	nop
   25b04:	200006c4 	.word	0x200006c4
   25b08:	000333f4 	.word	0x000333f4

00025b0c <mutex_unlock>:
   25b0c:	b168      	cbz	r0, 25b2a <mutex_unlock+0x1e>
   25b0e:	6843      	ldr	r3, [r0, #4]
   25b10:	b13b      	cbz	r3, 25b22 <mutex_unlock+0x16>
   25b12:	06db      	lsls	r3, r3, #27
   25b14:	d507      	bpl.n	25b26 <mutex_unlock+0x1a>
   25b16:	f3bf 8f5f 	dmb	sy
   25b1a:	2300      	movs	r3, #0
   25b1c:	6003      	str	r3, [r0, #0]
   25b1e:	4618      	mov	r0, r3
   25b20:	4770      	bx	lr
   25b22:	4803      	ldr	r0, [pc, #12]	; (25b30 <mutex_unlock+0x24>)
   25b24:	4770      	bx	lr
   25b26:	4803      	ldr	r0, [pc, #12]	; (25b34 <mutex_unlock+0x28>)
   25b28:	4770      	bx	lr
   25b2a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25b2e:	4770      	bx	lr
   25b30:	ffff8fea 	.word	0xffff8fea
   25b34:	ffff8fe9 	.word	0xffff8fe9

00025b38 <mutex_init>:
   25b38:	b510      	push	{r4, lr}
   25b3a:	4604      	mov	r4, r0
   25b3c:	b120      	cbz	r0, 25b48 <mutex_init+0x10>
   25b3e:	2200      	movs	r2, #0
   25b40:	2311      	movs	r3, #17
   25b42:	6022      	str	r2, [r4, #0]
   25b44:	6063      	str	r3, [r4, #4]
   25b46:	bd10      	pop	{r4, pc}
   25b48:	4801      	ldr	r0, [pc, #4]	; (25b50 <mutex_init+0x18>)
   25b4a:	f7ff ff4d 	bl	259e8 <CC_PalAbort>
   25b4e:	e7f6      	b.n	25b3e <mutex_init+0x6>
   25b50:	0003341c 	.word	0x0003341c

00025b54 <mutex_lock>:
   25b54:	b1c0      	cbz	r0, 25b88 <mutex_lock+0x34>
   25b56:	6843      	ldr	r3, [r0, #4]
   25b58:	b1a3      	cbz	r3, 25b84 <mutex_lock+0x30>
   25b5a:	06db      	lsls	r3, r3, #27
   25b5c:	d510      	bpl.n	25b80 <mutex_lock+0x2c>
   25b5e:	2201      	movs	r2, #1
   25b60:	f3bf 8f5b 	dmb	ish
   25b64:	e850 3f00 	ldrex	r3, [r0]
   25b68:	e840 2100 	strex	r1, r2, [r0]
   25b6c:	2900      	cmp	r1, #0
   25b6e:	d1f9      	bne.n	25b64 <mutex_lock+0x10>
   25b70:	f3bf 8f5b 	dmb	ish
   25b74:	2b01      	cmp	r3, #1
   25b76:	d0f3      	beq.n	25b60 <mutex_lock+0xc>
   25b78:	f3bf 8f5f 	dmb	sy
   25b7c:	2000      	movs	r0, #0
   25b7e:	4770      	bx	lr
   25b80:	4803      	ldr	r0, [pc, #12]	; (25b90 <mutex_lock+0x3c>)
   25b82:	4770      	bx	lr
   25b84:	4803      	ldr	r0, [pc, #12]	; (25b94 <mutex_lock+0x40>)
   25b86:	4770      	bx	lr
   25b88:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25b8c:	4770      	bx	lr
   25b8e:	bf00      	nop
   25b90:	ffff8fe9 	.word	0xffff8fe9
   25b94:	ffff8fea 	.word	0xffff8fea

00025b98 <nrf_cc3xx_platform_set_mutexes>:
   25b98:	b570      	push	{r4, r5, r6, lr}
   25b9a:	e9d0 2300 	ldrd	r2, r3, [r0]
   25b9e:	4c13      	ldr	r4, [pc, #76]	; (25bec <nrf_cc3xx_platform_set_mutexes+0x54>)
   25ba0:	4d13      	ldr	r5, [pc, #76]	; (25bf0 <nrf_cc3xx_platform_set_mutexes+0x58>)
   25ba2:	e9c4 2300 	strd	r2, r3, [r4]
   25ba6:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   25baa:	e9c4 6302 	strd	r6, r3, [r4, #8]
   25bae:	4b11      	ldr	r3, [pc, #68]	; (25bf4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   25bb0:	6808      	ldr	r0, [r1, #0]
   25bb2:	6018      	str	r0, [r3, #0]
   25bb4:	6848      	ldr	r0, [r1, #4]
   25bb6:	6058      	str	r0, [r3, #4]
   25bb8:	6888      	ldr	r0, [r1, #8]
   25bba:	6098      	str	r0, [r3, #8]
   25bbc:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   25bc0:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   25bc4:	60de      	str	r6, [r3, #12]
   25bc6:	6118      	str	r0, [r3, #16]
   25bc8:	06cb      	lsls	r3, r1, #27
   25bca:	d50d      	bpl.n	25be8 <nrf_cc3xx_platform_set_mutexes+0x50>
   25bcc:	2300      	movs	r3, #0
   25bce:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   25bd2:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   25bd6:	f505 7088 	add.w	r0, r5, #272	; 0x110
   25bda:	4790      	blx	r2
   25bdc:	6823      	ldr	r3, [r4, #0]
   25bde:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   25be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25be6:	4718      	bx	r3
   25be8:	bd70      	pop	{r4, r5, r6, pc}
   25bea:	bf00      	nop
   25bec:	200006d4 	.word	0x200006d4
   25bf0:	20003f7c 	.word	0x20003f7c
   25bf4:	200006e4 	.word	0x200006e4

00025bf8 <entropy_update>:
   25bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25bfc:	2b20      	cmp	r3, #32
   25bfe:	b08b      	sub	sp, #44	; 0x2c
   25c00:	461d      	mov	r5, r3
   25c02:	4606      	mov	r6, r0
   25c04:	4689      	mov	r9, r1
   25c06:	4690      	mov	r8, r2
   25c08:	d826      	bhi.n	25c58 <entropy_update+0x60>
   25c0a:	b2db      	uxtb	r3, r3
   25c0c:	af02      	add	r7, sp, #8
   25c0e:	6831      	ldr	r1, [r6, #0]
   25c10:	f88d 9004 	strb.w	r9, [sp, #4]
   25c14:	f88d 3005 	strb.w	r3, [sp, #5]
   25c18:	f106 0904 	add.w	r9, r6, #4
   25c1c:	b921      	cbnz	r1, 25c28 <entropy_update+0x30>
   25c1e:	4648      	mov	r0, r9
   25c20:	f000 fe62 	bl	268e8 <cc_mbedtls_sha256_starts_ret>
   25c24:	4604      	mov	r4, r0
   25c26:	b940      	cbnz	r0, 25c3a <entropy_update+0x42>
   25c28:	2301      	movs	r3, #1
   25c2a:	6033      	str	r3, [r6, #0]
   25c2c:	2202      	movs	r2, #2
   25c2e:	a901      	add	r1, sp, #4
   25c30:	4648      	mov	r0, r9
   25c32:	f000 fe6d 	bl	26910 <cc_mbedtls_sha256_update_ret>
   25c36:	4604      	mov	r4, r0
   25c38:	b138      	cbz	r0, 25c4a <entropy_update+0x52>
   25c3a:	4638      	mov	r0, r7
   25c3c:	2120      	movs	r1, #32
   25c3e:	f000 fdb1 	bl	267a4 <mbedtls_platform_zeroize>
   25c42:	4620      	mov	r0, r4
   25c44:	b00b      	add	sp, #44	; 0x2c
   25c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25c4a:	462a      	mov	r2, r5
   25c4c:	4641      	mov	r1, r8
   25c4e:	4648      	mov	r0, r9
   25c50:	f000 fe5e 	bl	26910 <cc_mbedtls_sha256_update_ret>
   25c54:	4604      	mov	r4, r0
   25c56:	e7f0      	b.n	25c3a <entropy_update+0x42>
   25c58:	af02      	add	r7, sp, #8
   25c5a:	4619      	mov	r1, r3
   25c5c:	4610      	mov	r0, r2
   25c5e:	2300      	movs	r3, #0
   25c60:	463a      	mov	r2, r7
   25c62:	f001 fad1 	bl	27208 <cc_mbedtls_sha256_ret>
   25c66:	4604      	mov	r4, r0
   25c68:	2800      	cmp	r0, #0
   25c6a:	d1e6      	bne.n	25c3a <entropy_update+0x42>
   25c6c:	2320      	movs	r3, #32
   25c6e:	461d      	mov	r5, r3
   25c70:	46b8      	mov	r8, r7
   25c72:	e7cc      	b.n	25c0e <entropy_update+0x16>

00025c74 <entropy_gather_internal.part.0>:
   25c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c76:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   25c7a:	b0a7      	sub	sp, #156	; 0x9c
   25c7c:	2b00      	cmp	r3, #0
   25c7e:	bfd8      	it	le
   25c80:	ae02      	addle	r6, sp, #8
   25c82:	dd2c      	ble.n	25cde <entropy_gather_internal.part.0+0x6a>
   25c84:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   25c88:	4605      	mov	r5, r0
   25c8a:	2300      	movs	r3, #0
   25c8c:	ae02      	add	r6, sp, #8
   25c8e:	9301      	str	r3, [sp, #4]
   25c90:	f1a4 0701 	sub.w	r7, r4, #1
   25c94:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   25c98:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   25c9c:	4631      	mov	r1, r6
   25c9e:	ab01      	add	r3, sp, #4
   25ca0:	2290      	movs	r2, #144	; 0x90
   25ca2:	47a0      	blx	r4
   25ca4:	fab7 f787 	clz	r7, r7
   25ca8:	097f      	lsrs	r7, r7, #5
   25caa:	4604      	mov	r4, r0
   25cac:	b910      	cbnz	r0, 25cb4 <entropy_gather_internal.part.0+0x40>
   25cae:	9b01      	ldr	r3, [sp, #4]
   25cb0:	b93b      	cbnz	r3, 25cc2 <entropy_gather_internal.part.0+0x4e>
   25cb2:	b1a7      	cbz	r7, 25cde <entropy_gather_internal.part.0+0x6a>
   25cb4:	4630      	mov	r0, r6
   25cb6:	2190      	movs	r1, #144	; 0x90
   25cb8:	f000 fd74 	bl	267a4 <mbedtls_platform_zeroize>
   25cbc:	4620      	mov	r0, r4
   25cbe:	b027      	add	sp, #156	; 0x9c
   25cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25cc2:	4601      	mov	r1, r0
   25cc4:	4632      	mov	r2, r6
   25cc6:	4628      	mov	r0, r5
   25cc8:	f7ff ff96 	bl	25bf8 <entropy_update>
   25ccc:	b950      	cbnz	r0, 25ce4 <entropy_gather_internal.part.0+0x70>
   25cce:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   25cd2:	9a01      	ldr	r2, [sp, #4]
   25cd4:	4413      	add	r3, r2
   25cd6:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   25cda:	2f00      	cmp	r7, #0
   25cdc:	d1ea      	bne.n	25cb4 <entropy_gather_internal.part.0+0x40>
   25cde:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   25ce2:	e7e7      	b.n	25cb4 <entropy_gather_internal.part.0+0x40>
   25ce4:	4604      	mov	r4, r0
   25ce6:	4620      	mov	r0, r4
   25ce8:	b027      	add	sp, #156	; 0x9c
   25cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025cec <cc_mbedtls_entropy_init>:
   25cec:	b570      	push	{r4, r5, r6, lr}
   25cee:	2500      	movs	r5, #0
   25cf0:	4604      	mov	r4, r0
   25cf2:	4629      	mov	r1, r5
   25cf4:	2214      	movs	r2, #20
   25cf6:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   25cfa:	30f8      	adds	r0, #248	; 0xf8
   25cfc:	f004 fdf3 	bl	2a8e6 <memset>
   25d00:	4b15      	ldr	r3, [pc, #84]	; (25d58 <cc_mbedtls_entropy_init+0x6c>)
   25d02:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   25d06:	681b      	ldr	r3, [r3, #0]
   25d08:	4630      	mov	r0, r6
   25d0a:	4798      	blx	r3
   25d0c:	4620      	mov	r0, r4
   25d0e:	f840 5b04 	str.w	r5, [r0], #4
   25d12:	f000 fdcf 	bl	268b4 <cc_mbedtls_sha256_init>
   25d16:	4b11      	ldr	r3, [pc, #68]	; (25d5c <cc_mbedtls_entropy_init+0x70>)
   25d18:	4630      	mov	r0, r6
   25d1a:	681b      	ldr	r3, [r3, #0]
   25d1c:	4798      	blx	r3
   25d1e:	b9c8      	cbnz	r0, 25d54 <cc_mbedtls_entropy_init+0x68>
   25d20:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   25d24:	42ab      	cmp	r3, r5
   25d26:	dc0f      	bgt.n	25d48 <cc_mbedtls_entropy_init+0x5c>
   25d28:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   25d2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   25d30:	490b      	ldr	r1, [pc, #44]	; (25d60 <cc_mbedtls_entropy_init+0x74>)
   25d32:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   25d36:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   25d3a:	3301      	adds	r3, #1
   25d3c:	2020      	movs	r0, #32
   25d3e:	2101      	movs	r1, #1
   25d40:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   25d44:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   25d48:	4b06      	ldr	r3, [pc, #24]	; (25d64 <cc_mbedtls_entropy_init+0x78>)
   25d4a:	4630      	mov	r0, r6
   25d4c:	681b      	ldr	r3, [r3, #0]
   25d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25d52:	4718      	bx	r3
   25d54:	bd70      	pop	{r4, r5, r6, pc}
   25d56:	bf00      	nop
   25d58:	20000728 	.word	0x20000728
   25d5c:	2000072c 	.word	0x2000072c
   25d60:	000267b9 	.word	0x000267b9
   25d64:	20000730 	.word	0x20000730

00025d68 <cc_mbedtls_entropy_func>:
   25d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d6c:	2a20      	cmp	r2, #32
   25d6e:	b088      	sub	sp, #32
   25d70:	d876      	bhi.n	25e60 <cc_mbedtls_entropy_func+0xf8>
   25d72:	4b3d      	ldr	r3, [pc, #244]	; (25e68 <cc_mbedtls_entropy_func+0x100>)
   25d74:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   25d78:	681b      	ldr	r3, [r3, #0]
   25d7a:	4604      	mov	r4, r0
   25d7c:	4648      	mov	r0, r9
   25d7e:	4617      	mov	r7, r2
   25d80:	4688      	mov	r8, r1
   25d82:	4798      	blx	r3
   25d84:	4605      	mov	r5, r0
   25d86:	bba0      	cbnz	r0, 25df2 <cc_mbedtls_entropy_func+0x8a>
   25d88:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   25d8c:	f240 1601 	movw	r6, #257	; 0x101
   25d90:	e001      	b.n	25d96 <cc_mbedtls_entropy_func+0x2e>
   25d92:	3e01      	subs	r6, #1
   25d94:	d060      	beq.n	25e58 <cc_mbedtls_entropy_func+0xf0>
   25d96:	4620      	mov	r0, r4
   25d98:	b37b      	cbz	r3, 25dfa <cc_mbedtls_entropy_func+0x92>
   25d9a:	f7ff ff6b 	bl	25c74 <entropy_gather_internal.part.0>
   25d9e:	4605      	mov	r5, r0
   25da0:	bb68      	cbnz	r0, 25dfe <cc_mbedtls_entropy_func+0x96>
   25da2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   25da6:	2b00      	cmp	r3, #0
   25da8:	ddf3      	ble.n	25d92 <cc_mbedtls_entropy_func+0x2a>
   25daa:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   25dae:	4290      	cmp	r0, r2
   25db0:	d3ef      	bcc.n	25d92 <cc_mbedtls_entropy_func+0x2a>
   25db2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   25db6:	2a01      	cmp	r2, #1
   25db8:	d1eb      	bne.n	25d92 <cc_mbedtls_entropy_func+0x2a>
   25dba:	281f      	cmp	r0, #31
   25dbc:	d9e9      	bls.n	25d92 <cc_mbedtls_entropy_func+0x2a>
   25dbe:	466e      	mov	r6, sp
   25dc0:	4629      	mov	r1, r5
   25dc2:	2220      	movs	r2, #32
   25dc4:	4630      	mov	r0, r6
   25dc6:	f104 0a04 	add.w	sl, r4, #4
   25dca:	f004 fd8c 	bl	2a8e6 <memset>
   25dce:	4631      	mov	r1, r6
   25dd0:	4650      	mov	r0, sl
   25dd2:	f000 fda5 	bl	26920 <cc_mbedtls_sha256_finish_ret>
   25dd6:	4605      	mov	r5, r0
   25dd8:	b198      	cbz	r0, 25e02 <cc_mbedtls_entropy_func+0x9a>
   25dda:	4630      	mov	r0, r6
   25ddc:	2120      	movs	r1, #32
   25dde:	f000 fce1 	bl	267a4 <mbedtls_platform_zeroize>
   25de2:	4b22      	ldr	r3, [pc, #136]	; (25e6c <cc_mbedtls_entropy_func+0x104>)
   25de4:	4648      	mov	r0, r9
   25de6:	681b      	ldr	r3, [r3, #0]
   25de8:	4798      	blx	r3
   25dea:	2800      	cmp	r0, #0
   25dec:	bf18      	it	ne
   25dee:	f06f 051d 	mvnne.w	r5, #29
   25df2:	4628      	mov	r0, r5
   25df4:	b008      	add	sp, #32
   25df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25dfa:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   25dfe:	466e      	mov	r6, sp
   25e00:	e7eb      	b.n	25dda <cc_mbedtls_entropy_func+0x72>
   25e02:	4650      	mov	r0, sl
   25e04:	f000 fd6a 	bl	268dc <cc_mbedtls_sha256_free>
   25e08:	4650      	mov	r0, sl
   25e0a:	f000 fd53 	bl	268b4 <cc_mbedtls_sha256_init>
   25e0e:	4629      	mov	r1, r5
   25e10:	4650      	mov	r0, sl
   25e12:	f000 fd69 	bl	268e8 <cc_mbedtls_sha256_starts_ret>
   25e16:	4605      	mov	r5, r0
   25e18:	2800      	cmp	r0, #0
   25e1a:	d1de      	bne.n	25dda <cc_mbedtls_entropy_func+0x72>
   25e1c:	4650      	mov	r0, sl
   25e1e:	2220      	movs	r2, #32
   25e20:	4631      	mov	r1, r6
   25e22:	f000 fd75 	bl	26910 <cc_mbedtls_sha256_update_ret>
   25e26:	4605      	mov	r5, r0
   25e28:	2800      	cmp	r0, #0
   25e2a:	d1d6      	bne.n	25dda <cc_mbedtls_entropy_func+0x72>
   25e2c:	4603      	mov	r3, r0
   25e2e:	4632      	mov	r2, r6
   25e30:	2120      	movs	r1, #32
   25e32:	4630      	mov	r0, r6
   25e34:	f001 f9e8 	bl	27208 <cc_mbedtls_sha256_ret>
   25e38:	4605      	mov	r5, r0
   25e3a:	2800      	cmp	r0, #0
   25e3c:	d1cd      	bne.n	25dda <cc_mbedtls_entropy_func+0x72>
   25e3e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   25e42:	2b00      	cmp	r3, #0
   25e44:	bfc4      	itt	gt
   25e46:	2300      	movgt	r3, #0
   25e48:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   25e4c:	463a      	mov	r2, r7
   25e4e:	4640      	mov	r0, r8
   25e50:	4631      	mov	r1, r6
   25e52:	f004 fd24 	bl	2a89e <memcpy>
   25e56:	e7c0      	b.n	25dda <cc_mbedtls_entropy_func+0x72>
   25e58:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   25e5c:	466e      	mov	r6, sp
   25e5e:	e7bc      	b.n	25dda <cc_mbedtls_entropy_func+0x72>
   25e60:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   25e64:	e7c5      	b.n	25df2 <cc_mbedtls_entropy_func+0x8a>
   25e66:	bf00      	nop
   25e68:	2000072c 	.word	0x2000072c
   25e6c:	20000730 	.word	0x20000730

00025e70 <RndStartupTest.constprop.0>:
   25e70:	b530      	push	{r4, r5, lr}
   25e72:	b08d      	sub	sp, #52	; 0x34
   25e74:	2100      	movs	r1, #0
   25e76:	2228      	movs	r2, #40	; 0x28
   25e78:	a802      	add	r0, sp, #8
   25e7a:	9101      	str	r1, [sp, #4]
   25e7c:	f004 fd33 	bl	2a8e6 <memset>
   25e80:	a802      	add	r0, sp, #8
   25e82:	f001 f9e9 	bl	27258 <RNG_PLAT_SetUserRngParameters>
   25e86:	4604      	mov	r4, r0
   25e88:	b110      	cbz	r0, 25e90 <RndStartupTest.constprop.0+0x20>
   25e8a:	4620      	mov	r0, r4
   25e8c:	b00d      	add	sp, #52	; 0x34
   25e8e:	bd30      	pop	{r4, r5, pc}
   25e90:	4d18      	ldr	r5, [pc, #96]	; (25ef4 <RndStartupTest.constprop.0+0x84>)
   25e92:	f04f 31ff 	mov.w	r1, #4294967295
   25e96:	6828      	ldr	r0, [r5, #0]
   25e98:	f000 f93c 	bl	26114 <CC_PalMutexLock>
   25e9c:	4604      	mov	r4, r0
   25e9e:	b9c0      	cbnz	r0, 25ed2 <RndStartupTest.constprop.0+0x62>
   25ea0:	2000      	movs	r0, #0
   25ea2:	f000 f967 	bl	26174 <CC_PalPowerSaveModeSelect>
   25ea6:	bb00      	cbnz	r0, 25eea <RndStartupTest.constprop.0+0x7a>
   25ea8:	4a13      	ldr	r2, [pc, #76]	; (25ef8 <RndStartupTest.constprop.0+0x88>)
   25eaa:	a902      	add	r1, sp, #8
   25eac:	a801      	add	r0, sp, #4
   25eae:	f000 fc6b 	bl	26788 <LLF_RND_RunTrngStartupTest>
   25eb2:	4604      	mov	r4, r0
   25eb4:	2001      	movs	r0, #1
   25eb6:	f000 f95d 	bl	26174 <CC_PalPowerSaveModeSelect>
   25eba:	b990      	cbnz	r0, 25ee2 <RndStartupTest.constprop.0+0x72>
   25ebc:	6828      	ldr	r0, [r5, #0]
   25ebe:	f000 f931 	bl	26124 <CC_PalMutexUnlock>
   25ec2:	2800      	cmp	r0, #0
   25ec4:	d0e1      	beq.n	25e8a <RndStartupTest.constprop.0+0x1a>
   25ec6:	480d      	ldr	r0, [pc, #52]	; (25efc <RndStartupTest.constprop.0+0x8c>)
   25ec8:	f7ff fd8e 	bl	259e8 <CC_PalAbort>
   25ecc:	4620      	mov	r0, r4
   25ece:	b00d      	add	sp, #52	; 0x34
   25ed0:	bd30      	pop	{r4, r5, pc}
   25ed2:	480b      	ldr	r0, [pc, #44]	; (25f00 <RndStartupTest.constprop.0+0x90>)
   25ed4:	f7ff fd88 	bl	259e8 <CC_PalAbort>
   25ed8:	2c01      	cmp	r4, #1
   25eda:	bf08      	it	eq
   25edc:	2405      	moveq	r4, #5
   25ede:	d0ed      	beq.n	25ebc <RndStartupTest.constprop.0+0x4c>
   25ee0:	e7de      	b.n	25ea0 <RndStartupTest.constprop.0+0x30>
   25ee2:	4808      	ldr	r0, [pc, #32]	; (25f04 <RndStartupTest.constprop.0+0x94>)
   25ee4:	f7ff fd80 	bl	259e8 <CC_PalAbort>
   25ee8:	e7e8      	b.n	25ebc <RndStartupTest.constprop.0+0x4c>
   25eea:	4807      	ldr	r0, [pc, #28]	; (25f08 <RndStartupTest.constprop.0+0x98>)
   25eec:	f7ff fd7c 	bl	259e8 <CC_PalAbort>
   25ef0:	e7da      	b.n	25ea8 <RndStartupTest.constprop.0+0x38>
   25ef2:	bf00      	nop
   25ef4:	20000724 	.word	0x20000724
   25ef8:	200036ec 	.word	0x200036ec
   25efc:	00033498 	.word	0x00033498
   25f00:	00033440 	.word	0x00033440
   25f04:	00033478 	.word	0x00033478
   25f08:	00033458 	.word	0x00033458

00025f0c <CC_LibInit>:
   25f0c:	b510      	push	{r4, lr}
   25f0e:	b082      	sub	sp, #8
   25f10:	f000 f854 	bl	25fbc <CC_HalInit>
   25f14:	b128      	cbz	r0, 25f22 <CC_LibInit+0x16>
   25f16:	f000 f8a3 	bl	26060 <CC_PalTerminate>
   25f1a:	2403      	movs	r4, #3
   25f1c:	4620      	mov	r0, r4
   25f1e:	b002      	add	sp, #8
   25f20:	bd10      	pop	{r4, pc}
   25f22:	f000 f86f 	bl	26004 <CC_PalInit>
   25f26:	b9d0      	cbnz	r0, 25f5e <CC_LibInit+0x52>
   25f28:	f000 f924 	bl	26174 <CC_PalPowerSaveModeSelect>
   25f2c:	b9d8      	cbnz	r0, 25f66 <CC_LibInit+0x5a>
   25f2e:	4b1e      	ldr	r3, [pc, #120]	; (25fa8 <CC_LibInit+0x9c>)
   25f30:	681b      	ldr	r3, [r3, #0]
   25f32:	0e1b      	lsrs	r3, r3, #24
   25f34:	2bf0      	cmp	r3, #240	; 0xf0
   25f36:	d10a      	bne.n	25f4e <CC_LibInit+0x42>
   25f38:	4a1c      	ldr	r2, [pc, #112]	; (25fac <CC_LibInit+0xa0>)
   25f3a:	4b1d      	ldr	r3, [pc, #116]	; (25fb0 <CC_LibInit+0xa4>)
   25f3c:	6812      	ldr	r2, [r2, #0]
   25f3e:	429a      	cmp	r2, r3
   25f40:	d029      	beq.n	25f96 <CC_LibInit+0x8a>
   25f42:	f000 f83d 	bl	25fc0 <CC_HalTerminate>
   25f46:	2407      	movs	r4, #7
   25f48:	f000 f88a 	bl	26060 <CC_PalTerminate>
   25f4c:	e7e6      	b.n	25f1c <CC_LibInit+0x10>
   25f4e:	f000 f837 	bl	25fc0 <CC_HalTerminate>
   25f52:	f000 f885 	bl	26060 <CC_PalTerminate>
   25f56:	2406      	movs	r4, #6
   25f58:	4620      	mov	r0, r4
   25f5a:	b002      	add	sp, #8
   25f5c:	bd10      	pop	{r4, pc}
   25f5e:	2404      	movs	r4, #4
   25f60:	4620      	mov	r0, r4
   25f62:	b002      	add	sp, #8
   25f64:	bd10      	pop	{r4, pc}
   25f66:	f000 f82b 	bl	25fc0 <CC_HalTerminate>
   25f6a:	f000 f879 	bl	26060 <CC_PalTerminate>
   25f6e:	f7ff ff7f 	bl	25e70 <RndStartupTest.constprop.0>
   25f72:	4604      	mov	r4, r0
   25f74:	b958      	cbnz	r0, 25f8e <CC_LibInit+0x82>
   25f76:	4602      	mov	r2, r0
   25f78:	4601      	mov	r1, r0
   25f7a:	f7ff fd5d 	bl	25a38 <nrf_cc3xx_platform_ctr_drbg_init>
   25f7e:	b930      	cbnz	r0, 25f8e <CC_LibInit+0x82>
   25f80:	490c      	ldr	r1, [pc, #48]	; (25fb4 <CC_LibInit+0xa8>)
   25f82:	ab01      	add	r3, sp, #4
   25f84:	2268      	movs	r2, #104	; 0x68
   25f86:	f7ff fd8b 	bl	25aa0 <nrf_cc3xx_platform_ctr_drbg_get>
   25f8a:	2800      	cmp	r0, #0
   25f8c:	d0c6      	beq.n	25f1c <CC_LibInit+0x10>
   25f8e:	2405      	movs	r4, #5
   25f90:	4620      	mov	r0, r4
   25f92:	b002      	add	sp, #8
   25f94:	bd10      	pop	{r4, pc}
   25f96:	2001      	movs	r0, #1
   25f98:	f000 f8ec 	bl	26174 <CC_PalPowerSaveModeSelect>
   25f9c:	2800      	cmp	r0, #0
   25f9e:	d1e2      	bne.n	25f66 <CC_LibInit+0x5a>
   25fa0:	4b05      	ldr	r3, [pc, #20]	; (25fb8 <CC_LibInit+0xac>)
   25fa2:	6018      	str	r0, [r3, #0]
   25fa4:	e7e3      	b.n	25f6e <CC_LibInit+0x62>
   25fa6:	bf00      	nop
   25fa8:	5002b928 	.word	0x5002b928
   25fac:	5002ba24 	.word	0x5002ba24
   25fb0:	20e00000 	.word	0x20e00000
   25fb4:	20003684 	.word	0x20003684
   25fb8:	5002ba0c 	.word	0x5002ba0c

00025fbc <CC_HalInit>:
   25fbc:	2000      	movs	r0, #0
   25fbe:	4770      	bx	lr

00025fc0 <CC_HalTerminate>:
   25fc0:	2000      	movs	r0, #0
   25fc2:	4770      	bx	lr

00025fc4 <CC_HalClearInterruptBit>:
   25fc4:	0543      	lsls	r3, r0, #21
   25fc6:	d503      	bpl.n	25fd0 <CC_HalClearInterruptBit+0xc>
   25fc8:	4b03      	ldr	r3, [pc, #12]	; (25fd8 <CC_HalClearInterruptBit+0x14>)
   25fca:	f04f 32ff 	mov.w	r2, #4294967295
   25fce:	601a      	str	r2, [r3, #0]
   25fd0:	4b02      	ldr	r3, [pc, #8]	; (25fdc <CC_HalClearInterruptBit+0x18>)
   25fd2:	6018      	str	r0, [r3, #0]
   25fd4:	4770      	bx	lr
   25fd6:	bf00      	nop
   25fd8:	5002b108 	.word	0x5002b108
   25fdc:	5002ba08 	.word	0x5002ba08

00025fe0 <CC_HalMaskInterrupt>:
   25fe0:	4b01      	ldr	r3, [pc, #4]	; (25fe8 <CC_HalMaskInterrupt+0x8>)
   25fe2:	6018      	str	r0, [r3, #0]
   25fe4:	4770      	bx	lr
   25fe6:	bf00      	nop
   25fe8:	5002ba04 	.word	0x5002ba04

00025fec <CC_HalWaitInterrupt>:
   25fec:	b108      	cbz	r0, 25ff2 <CC_HalWaitInterrupt+0x6>
   25fee:	f000 b86f 	b.w	260d0 <CC_PalWaitInterrupt>
   25ff2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   25ff6:	4770      	bx	lr

00025ff8 <CC_HalWaitInterruptRND>:
   25ff8:	b108      	cbz	r0, 25ffe <CC_HalWaitInterruptRND+0x6>
   25ffa:	f000 b84f 	b.w	2609c <CC_PalWaitInterruptRND>
   25ffe:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   26002:	4770      	bx	lr

00026004 <CC_PalInit>:
   26004:	b510      	push	{r4, lr}
   26006:	4811      	ldr	r0, [pc, #68]	; (2604c <CC_PalInit+0x48>)
   26008:	f000 f870 	bl	260ec <CC_PalMutexCreate>
   2600c:	b100      	cbz	r0, 26010 <CC_PalInit+0xc>
   2600e:	bd10      	pop	{r4, pc}
   26010:	480f      	ldr	r0, [pc, #60]	; (26050 <CC_PalInit+0x4c>)
   26012:	f000 f86b 	bl	260ec <CC_PalMutexCreate>
   26016:	2800      	cmp	r0, #0
   26018:	d1f9      	bne.n	2600e <CC_PalInit+0xa>
   2601a:	4c0e      	ldr	r4, [pc, #56]	; (26054 <CC_PalInit+0x50>)
   2601c:	4620      	mov	r0, r4
   2601e:	f000 f865 	bl	260ec <CC_PalMutexCreate>
   26022:	2800      	cmp	r0, #0
   26024:	d1f3      	bne.n	2600e <CC_PalInit+0xa>
   26026:	4b0c      	ldr	r3, [pc, #48]	; (26058 <CC_PalInit+0x54>)
   26028:	480c      	ldr	r0, [pc, #48]	; (2605c <CC_PalInit+0x58>)
   2602a:	601c      	str	r4, [r3, #0]
   2602c:	f000 f85e 	bl	260ec <CC_PalMutexCreate>
   26030:	4601      	mov	r1, r0
   26032:	2800      	cmp	r0, #0
   26034:	d1eb      	bne.n	2600e <CC_PalInit+0xa>
   26036:	f000 f82d 	bl	26094 <CC_PalDmaInit>
   2603a:	4604      	mov	r4, r0
   2603c:	b108      	cbz	r0, 26042 <CC_PalInit+0x3e>
   2603e:	4620      	mov	r0, r4
   26040:	bd10      	pop	{r4, pc}
   26042:	f000 f879 	bl	26138 <CC_PalPowerSaveModeInit>
   26046:	4620      	mov	r0, r4
   26048:	e7fa      	b.n	26040 <CC_PalInit+0x3c>
   2604a:	bf00      	nop
   2604c:	20000720 	.word	0x20000720
   26050:	20000714 	.word	0x20000714
   26054:	2000071c 	.word	0x2000071c
   26058:	20000724 	.word	0x20000724
   2605c:	20000718 	.word	0x20000718

00026060 <CC_PalTerminate>:
   26060:	b508      	push	{r3, lr}
   26062:	4808      	ldr	r0, [pc, #32]	; (26084 <CC_PalTerminate+0x24>)
   26064:	f000 f84c 	bl	26100 <CC_PalMutexDestroy>
   26068:	4807      	ldr	r0, [pc, #28]	; (26088 <CC_PalTerminate+0x28>)
   2606a:	f000 f849 	bl	26100 <CC_PalMutexDestroy>
   2606e:	4807      	ldr	r0, [pc, #28]	; (2608c <CC_PalTerminate+0x2c>)
   26070:	f000 f846 	bl	26100 <CC_PalMutexDestroy>
   26074:	4806      	ldr	r0, [pc, #24]	; (26090 <CC_PalTerminate+0x30>)
   26076:	f000 f843 	bl	26100 <CC_PalMutexDestroy>
   2607a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2607e:	f000 b80b 	b.w	26098 <CC_PalDmaTerminate>
   26082:	bf00      	nop
   26084:	20000720 	.word	0x20000720
   26088:	20000714 	.word	0x20000714
   2608c:	2000071c 	.word	0x2000071c
   26090:	20000718 	.word	0x20000718

00026094 <CC_PalDmaInit>:
   26094:	2000      	movs	r0, #0
   26096:	4770      	bx	lr

00026098 <CC_PalDmaTerminate>:
   26098:	4770      	bx	lr
   2609a:	bf00      	nop

0002609c <CC_PalWaitInterruptRND>:
   2609c:	b410      	push	{r4}
   2609e:	4c08      	ldr	r4, [pc, #32]	; (260c0 <CC_PalWaitInterruptRND+0x24>)
   260a0:	4602      	mov	r2, r0
   260a2:	6823      	ldr	r3, [r4, #0]
   260a4:	4213      	tst	r3, r2
   260a6:	d0fc      	beq.n	260a2 <CC_PalWaitInterruptRND+0x6>
   260a8:	b121      	cbz	r1, 260b4 <CC_PalWaitInterruptRND+0x18>
   260aa:	4b06      	ldr	r3, [pc, #24]	; (260c4 <CC_PalWaitInterruptRND+0x28>)
   260ac:	4806      	ldr	r0, [pc, #24]	; (260c8 <CC_PalWaitInterruptRND+0x2c>)
   260ae:	681b      	ldr	r3, [r3, #0]
   260b0:	600b      	str	r3, [r1, #0]
   260b2:	6003      	str	r3, [r0, #0]
   260b4:	4b05      	ldr	r3, [pc, #20]	; (260cc <CC_PalWaitInterruptRND+0x30>)
   260b6:	601a      	str	r2, [r3, #0]
   260b8:	2000      	movs	r0, #0
   260ba:	bc10      	pop	{r4}
   260bc:	4770      	bx	lr
   260be:	bf00      	nop
   260c0:	5002ba00 	.word	0x5002ba00
   260c4:	5002b104 	.word	0x5002b104
   260c8:	5002b108 	.word	0x5002b108
   260cc:	5002ba08 	.word	0x5002ba08

000260d0 <CC_PalWaitInterrupt>:
   260d0:	4904      	ldr	r1, [pc, #16]	; (260e4 <CC_PalWaitInterrupt+0x14>)
   260d2:	4602      	mov	r2, r0
   260d4:	680b      	ldr	r3, [r1, #0]
   260d6:	421a      	tst	r2, r3
   260d8:	d0fc      	beq.n	260d4 <CC_PalWaitInterrupt+0x4>
   260da:	4b03      	ldr	r3, [pc, #12]	; (260e8 <CC_PalWaitInterrupt+0x18>)
   260dc:	2000      	movs	r0, #0
   260de:	601a      	str	r2, [r3, #0]
   260e0:	4770      	bx	lr
   260e2:	bf00      	nop
   260e4:	5002ba00 	.word	0x5002ba00
   260e8:	5002ba08 	.word	0x5002ba08

000260ec <CC_PalMutexCreate>:
   260ec:	b508      	push	{r3, lr}
   260ee:	4b03      	ldr	r3, [pc, #12]	; (260fc <CC_PalMutexCreate+0x10>)
   260f0:	6802      	ldr	r2, [r0, #0]
   260f2:	681b      	ldr	r3, [r3, #0]
   260f4:	6810      	ldr	r0, [r2, #0]
   260f6:	4798      	blx	r3
   260f8:	2000      	movs	r0, #0
   260fa:	bd08      	pop	{r3, pc}
   260fc:	200006d4 	.word	0x200006d4

00026100 <CC_PalMutexDestroy>:
   26100:	b508      	push	{r3, lr}
   26102:	4b03      	ldr	r3, [pc, #12]	; (26110 <CC_PalMutexDestroy+0x10>)
   26104:	6802      	ldr	r2, [r0, #0]
   26106:	685b      	ldr	r3, [r3, #4]
   26108:	6810      	ldr	r0, [r2, #0]
   2610a:	4798      	blx	r3
   2610c:	2000      	movs	r0, #0
   2610e:	bd08      	pop	{r3, pc}
   26110:	200006d4 	.word	0x200006d4

00026114 <CC_PalMutexLock>:
   26114:	4b02      	ldr	r3, [pc, #8]	; (26120 <CC_PalMutexLock+0xc>)
   26116:	6802      	ldr	r2, [r0, #0]
   26118:	689b      	ldr	r3, [r3, #8]
   2611a:	6810      	ldr	r0, [r2, #0]
   2611c:	4718      	bx	r3
   2611e:	bf00      	nop
   26120:	200006d4 	.word	0x200006d4

00026124 <CC_PalMutexUnlock>:
   26124:	b508      	push	{r3, lr}
   26126:	4b03      	ldr	r3, [pc, #12]	; (26134 <CC_PalMutexUnlock+0x10>)
   26128:	6802      	ldr	r2, [r0, #0]
   2612a:	68db      	ldr	r3, [r3, #12]
   2612c:	6810      	ldr	r0, [r2, #0]
   2612e:	4798      	blx	r3
   26130:	2000      	movs	r0, #0
   26132:	bd08      	pop	{r3, pc}
   26134:	200006d4 	.word	0x200006d4

00026138 <CC_PalPowerSaveModeInit>:
   26138:	b570      	push	{r4, r5, r6, lr}
   2613a:	4c09      	ldr	r4, [pc, #36]	; (26160 <CC_PalPowerSaveModeInit+0x28>)
   2613c:	4d09      	ldr	r5, [pc, #36]	; (26164 <CC_PalPowerSaveModeInit+0x2c>)
   2613e:	6920      	ldr	r0, [r4, #16]
   26140:	68ab      	ldr	r3, [r5, #8]
   26142:	4798      	blx	r3
   26144:	b118      	cbz	r0, 2614e <CC_PalPowerSaveModeInit+0x16>
   26146:	4b08      	ldr	r3, [pc, #32]	; (26168 <CC_PalPowerSaveModeInit+0x30>)
   26148:	4808      	ldr	r0, [pc, #32]	; (2616c <CC_PalPowerSaveModeInit+0x34>)
   2614a:	685b      	ldr	r3, [r3, #4]
   2614c:	4798      	blx	r3
   2614e:	4a08      	ldr	r2, [pc, #32]	; (26170 <CC_PalPowerSaveModeInit+0x38>)
   26150:	68eb      	ldr	r3, [r5, #12]
   26152:	6920      	ldr	r0, [r4, #16]
   26154:	2100      	movs	r1, #0
   26156:	6011      	str	r1, [r2, #0]
   26158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2615c:	4718      	bx	r3
   2615e:	bf00      	nop
   26160:	200006e4 	.word	0x200006e4
   26164:	200006d4 	.word	0x200006d4
   26168:	200006c4 	.word	0x200006c4
   2616c:	000334b0 	.word	0x000334b0
   26170:	2000390c 	.word	0x2000390c

00026174 <CC_PalPowerSaveModeSelect>:
   26174:	b570      	push	{r4, r5, r6, lr}
   26176:	4d1a      	ldr	r5, [pc, #104]	; (261e0 <CC_PalPowerSaveModeSelect+0x6c>)
   26178:	4e1a      	ldr	r6, [pc, #104]	; (261e4 <CC_PalPowerSaveModeSelect+0x70>)
   2617a:	4604      	mov	r4, r0
   2617c:	68b2      	ldr	r2, [r6, #8]
   2617e:	6928      	ldr	r0, [r5, #16]
   26180:	4790      	blx	r2
   26182:	b9f0      	cbnz	r0, 261c2 <CC_PalPowerSaveModeSelect+0x4e>
   26184:	b15c      	cbz	r4, 2619e <CC_PalPowerSaveModeSelect+0x2a>
   26186:	4c18      	ldr	r4, [pc, #96]	; (261e8 <CC_PalPowerSaveModeSelect+0x74>)
   26188:	6823      	ldr	r3, [r4, #0]
   2618a:	b1ab      	cbz	r3, 261b8 <CC_PalPowerSaveModeSelect+0x44>
   2618c:	2b01      	cmp	r3, #1
   2618e:	d01a      	beq.n	261c6 <CC_PalPowerSaveModeSelect+0x52>
   26190:	3b01      	subs	r3, #1
   26192:	6023      	str	r3, [r4, #0]
   26194:	6928      	ldr	r0, [r5, #16]
   26196:	68f3      	ldr	r3, [r6, #12]
   26198:	4798      	blx	r3
   2619a:	2000      	movs	r0, #0
   2619c:	bd70      	pop	{r4, r5, r6, pc}
   2619e:	4c12      	ldr	r4, [pc, #72]	; (261e8 <CC_PalPowerSaveModeSelect+0x74>)
   261a0:	6821      	ldr	r1, [r4, #0]
   261a2:	b939      	cbnz	r1, 261b4 <CC_PalPowerSaveModeSelect+0x40>
   261a4:	4b11      	ldr	r3, [pc, #68]	; (261ec <CC_PalPowerSaveModeSelect+0x78>)
   261a6:	4a12      	ldr	r2, [pc, #72]	; (261f0 <CC_PalPowerSaveModeSelect+0x7c>)
   261a8:	2001      	movs	r0, #1
   261aa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   261ae:	6813      	ldr	r3, [r2, #0]
   261b0:	2b00      	cmp	r3, #0
   261b2:	d1fc      	bne.n	261ae <CC_PalPowerSaveModeSelect+0x3a>
   261b4:	3101      	adds	r1, #1
   261b6:	6021      	str	r1, [r4, #0]
   261b8:	68f3      	ldr	r3, [r6, #12]
   261ba:	6928      	ldr	r0, [r5, #16]
   261bc:	4798      	blx	r3
   261be:	2000      	movs	r0, #0
   261c0:	bd70      	pop	{r4, r5, r6, pc}
   261c2:	480c      	ldr	r0, [pc, #48]	; (261f4 <CC_PalPowerSaveModeSelect+0x80>)
   261c4:	bd70      	pop	{r4, r5, r6, pc}
   261c6:	4a0a      	ldr	r2, [pc, #40]	; (261f0 <CC_PalPowerSaveModeSelect+0x7c>)
   261c8:	6813      	ldr	r3, [r2, #0]
   261ca:	2b00      	cmp	r3, #0
   261cc:	d1fc      	bne.n	261c8 <CC_PalPowerSaveModeSelect+0x54>
   261ce:	4a07      	ldr	r2, [pc, #28]	; (261ec <CC_PalPowerSaveModeSelect+0x78>)
   261d0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   261d4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   261d8:	f7ff ff02 	bl	25fe0 <CC_HalMaskInterrupt>
   261dc:	6823      	ldr	r3, [r4, #0]
   261de:	e7d7      	b.n	26190 <CC_PalPowerSaveModeSelect+0x1c>
   261e0:	200006e4 	.word	0x200006e4
   261e4:	200006d4 	.word	0x200006d4
   261e8:	2000390c 	.word	0x2000390c
   261ec:	5002a000 	.word	0x5002a000
   261f0:	5002b910 	.word	0x5002b910
   261f4:	ffff8fe9 	.word	0xffff8fe9

000261f8 <mutex_init>:
   261f8:	4b01      	ldr	r3, [pc, #4]	; (26200 <mutex_init+0x8>)
   261fa:	681b      	ldr	r3, [r3, #0]
   261fc:	4718      	bx	r3
   261fe:	bf00      	nop
   26200:	200006d4 	.word	0x200006d4

00026204 <mutex_lock>:
   26204:	4b01      	ldr	r3, [pc, #4]	; (2620c <mutex_lock+0x8>)
   26206:	689b      	ldr	r3, [r3, #8]
   26208:	4718      	bx	r3
   2620a:	bf00      	nop
   2620c:	200006d4 	.word	0x200006d4

00026210 <mutex_unlock>:
   26210:	4b01      	ldr	r3, [pc, #4]	; (26218 <mutex_unlock+0x8>)
   26212:	68db      	ldr	r3, [r3, #12]
   26214:	4718      	bx	r3
   26216:	bf00      	nop
   26218:	200006d4 	.word	0x200006d4

0002621c <startTrngHW>:
   2621c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26220:	2800      	cmp	r0, #0
   26222:	d077      	beq.n	26314 <startTrngHW+0xf8>
   26224:	460c      	mov	r4, r1
   26226:	2900      	cmp	r1, #0
   26228:	d074      	beq.n	26314 <startTrngHW+0xf8>
   2622a:	461d      	mov	r5, r3
   2622c:	2b00      	cmp	r3, #0
   2622e:	d071      	beq.n	26314 <startTrngHW+0xf8>
   26230:	4606      	mov	r6, r0
   26232:	b11a      	cbz	r2, 2623c <startTrngHW+0x20>
   26234:	2201      	movs	r2, #1
   26236:	2300      	movs	r3, #0
   26238:	602a      	str	r2, [r5, #0]
   2623a:	6003      	str	r3, [r0, #0]
   2623c:	682b      	ldr	r3, [r5, #0]
   2623e:	2b00      	cmp	r3, #0
   26240:	d064      	beq.n	2630c <startTrngHW+0xf0>
   26242:	4629      	mov	r1, r5
   26244:	4620      	mov	r0, r4
   26246:	f001 f8cd 	bl	273e4 <LLF_RND_GetFastestRosc>
   2624a:	4607      	mov	r7, r0
   2624c:	2800      	cmp	r0, #0
   2624e:	d15e      	bne.n	2630e <startTrngHW+0xf2>
   26250:	6828      	ldr	r0, [r5, #0]
   26252:	4621      	mov	r1, r4
   26254:	f001 f8a8 	bl	273a8 <LLF_RND_GetRoscSampleCnt>
   26258:	4607      	mov	r7, r0
   2625a:	2800      	cmp	r0, #0
   2625c:	d157      	bne.n	2630e <startTrngHW+0xf2>
   2625e:	682b      	ldr	r3, [r5, #0]
   26260:	2b08      	cmp	r3, #8
   26262:	d066      	beq.n	26332 <startTrngHW+0x116>
   26264:	2b04      	cmp	r3, #4
   26266:	d067      	beq.n	26338 <startTrngHW+0x11c>
   26268:	f1a3 0802 	sub.w	r8, r3, #2
   2626c:	fab8 f888 	clz	r8, r8
   26270:	ea4f 1858 	mov.w	r8, r8, lsr #5
   26274:	4b32      	ldr	r3, [pc, #200]	; (26340 <startTrngHW+0x124>)
   26276:	4933      	ldr	r1, [pc, #204]	; (26344 <startTrngHW+0x128>)
   26278:	4a33      	ldr	r2, [pc, #204]	; (26348 <startTrngHW+0x12c>)
   2627a:	2001      	movs	r0, #1
   2627c:	6018      	str	r0, [r3, #0]
   2627e:	469c      	mov	ip, r3
   26280:	6008      	str	r0, [r1, #0]
   26282:	f8cc 0000 	str.w	r0, [ip]
   26286:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26288:	6013      	str	r3, [r2, #0]
   2628a:	6811      	ldr	r1, [r2, #0]
   2628c:	428b      	cmp	r3, r1
   2628e:	d1f8      	bne.n	26282 <startTrngHW+0x66>
   26290:	4b2e      	ldr	r3, [pc, #184]	; (2634c <startTrngHW+0x130>)
   26292:	f04f 0900 	mov.w	r9, #0
   26296:	f8c3 9000 	str.w	r9, [r3]
   2629a:	f04f 30ff 	mov.w	r0, #4294967295
   2629e:	f7ff fe91 	bl	25fc4 <CC_HalClearInterruptBit>
   262a2:	4b2b      	ldr	r3, [pc, #172]	; (26350 <startTrngHW+0x134>)
   262a4:	f06f 021b 	mvn.w	r2, #27
   262a8:	601a      	str	r2, [r3, #0]
   262aa:	4648      	mov	r0, r9
   262ac:	f7ff fe98 	bl	25fe0 <CC_HalMaskInterrupt>
   262b0:	4a28      	ldr	r2, [pc, #160]	; (26354 <startTrngHW+0x138>)
   262b2:	4b29      	ldr	r3, [pc, #164]	; (26358 <startTrngHW+0x13c>)
   262b4:	f8c2 8000 	str.w	r8, [r2]
   262b8:	6818      	ldr	r0, [r3, #0]
   262ba:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   262be:	f7ff fe8f 	bl	25fe0 <CC_HalMaskInterrupt>
   262c2:	4b26      	ldr	r3, [pc, #152]	; (2635c <startTrngHW+0x140>)
   262c4:	220a      	movs	r2, #10
   262c6:	601a      	str	r2, [r3, #0]
   262c8:	9908      	ldr	r1, [sp, #32]
   262ca:	6923      	ldr	r3, [r4, #16]
   262cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   262ce:	2901      	cmp	r1, #1
   262d0:	d024      	beq.n	2631c <startTrngHW+0x100>
   262d2:	4923      	ldr	r1, [pc, #140]	; (26360 <startTrngHW+0x144>)
   262d4:	fba1 1303 	umull	r1, r3, r1, r3
   262d8:	091b      	lsrs	r3, r3, #4
   262da:	fb03 f302 	mul.w	r3, r3, r2
   262de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   262e2:	4920      	ldr	r1, [pc, #128]	; (26364 <startTrngHW+0x148>)
   262e4:	4a19      	ldr	r2, [pc, #100]	; (2634c <startTrngHW+0x130>)
   262e6:	03db      	lsls	r3, r3, #15
   262e8:	099b      	lsrs	r3, r3, #6
   262ea:	600b      	str	r3, [r1, #0]
   262ec:	2301      	movs	r3, #1
   262ee:	6013      	str	r3, [r2, #0]
   262f0:	6833      	ldr	r3, [r6, #0]
   262f2:	682a      	ldr	r2, [r5, #0]
   262f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   262f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   262fc:	6033      	str	r3, [r6, #0]
   262fe:	682a      	ldr	r2, [r5, #0]
   26300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26304:	6033      	str	r3, [r6, #0]
   26306:	4638      	mov	r0, r7
   26308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2630c:	4f16      	ldr	r7, [pc, #88]	; (26368 <startTrngHW+0x14c>)
   2630e:	4638      	mov	r0, r7
   26310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26314:	4f15      	ldr	r7, [pc, #84]	; (2636c <startTrngHW+0x150>)
   26316:	4638      	mov	r0, r7
   26318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2631c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26320:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   26324:	3101      	adds	r1, #1
   26326:	d002      	beq.n	2632e <startTrngHW+0x112>
   26328:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   2632c:	e7d1      	b.n	262d2 <startTrngHW+0xb6>
   2632e:	2316      	movs	r3, #22
   26330:	e7d3      	b.n	262da <startTrngHW+0xbe>
   26332:	f04f 0803 	mov.w	r8, #3
   26336:	e79d      	b.n	26274 <startTrngHW+0x58>
   26338:	f04f 0802 	mov.w	r8, #2
   2633c:	e79a      	b.n	26274 <startTrngHW+0x58>
   2633e:	bf00      	nop
   26340:	5002b1c4 	.word	0x5002b1c4
   26344:	5002b140 	.word	0x5002b140
   26348:	5002b130 	.word	0x5002b130
   2634c:	5002b12c 	.word	0x5002b12c
   26350:	5002b100 	.word	0x5002b100
   26354:	5002b10c 	.word	0x5002b10c
   26358:	5002ba04 	.word	0x5002ba04
   2635c:	5002b138 	.word	0x5002b138
   26360:	aaaaaaab 	.word	0xaaaaaaab
   26364:	5002b1d8 	.word	0x5002b1d8
   26368:	00f10c31 	.word	0x00f10c31
   2636c:	00f10c35 	.word	0x00f10c35

00026370 <LLF_RND_RepetitionCounterTest.part.0>:
   26370:	b4f0      	push	{r4, r5, r6, r7}
   26372:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   26376:	2400      	movs	r4, #0
   26378:	f10c 3cff 	add.w	ip, ip, #4294967295
   2637c:	4626      	mov	r6, r4
   2637e:	4627      	mov	r7, r4
   26380:	e006      	b.n	26390 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   26382:	429f      	cmp	r7, r3
   26384:	d016      	beq.n	263b4 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   26386:	2601      	movs	r6, #1
   26388:	4565      	cmp	r5, ip
   2638a:	d819      	bhi.n	263c0 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   2638c:	462c      	mov	r4, r5
   2638e:	461f      	mov	r7, r3
   26390:	0963      	lsrs	r3, r4, #5
   26392:	f004 011f 	and.w	r1, r4, #31
   26396:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2639a:	291f      	cmp	r1, #31
   2639c:	fa23 f301 	lsr.w	r3, r3, r1
   263a0:	f104 0501 	add.w	r5, r4, #1
   263a4:	bf18      	it	ne
   263a6:	f003 0301 	andne.w	r3, r3, #1
   263aa:	2c00      	cmp	r4, #0
   263ac:	d1e9      	bne.n	26382 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   263ae:	2601      	movs	r6, #1
   263b0:	4635      	mov	r5, r6
   263b2:	e7eb      	b.n	2638c <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   263b4:	3601      	adds	r6, #1
   263b6:	4296      	cmp	r6, r2
   263b8:	d1e6      	bne.n	26388 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   263ba:	4803      	ldr	r0, [pc, #12]	; (263c8 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   263bc:	bcf0      	pop	{r4, r5, r6, r7}
   263be:	4770      	bx	lr
   263c0:	2000      	movs	r0, #0
   263c2:	bcf0      	pop	{r4, r5, r6, r7}
   263c4:	4770      	bx	lr
   263c6:	bf00      	nop
   263c8:	00f10c36 	.word	0x00f10c36

000263cc <LLF_RND_AdaptiveProportionTest>:
   263cc:	2800      	cmp	r0, #0
   263ce:	d061      	beq.n	26494 <LLF_RND_AdaptiveProportionTest+0xc8>
   263d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263d4:	1e4c      	subs	r4, r1, #1
   263d6:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   263da:	d227      	bcs.n	2642c <LLF_RND_AdaptiveProportionTest+0x60>
   263dc:	b333      	cbz	r3, 2642c <LLF_RND_AdaptiveProportionTest+0x60>
   263de:	b32a      	cbz	r2, 2642c <LLF_RND_AdaptiveProportionTest+0x60>
   263e0:	00cd      	lsls	r5, r1, #3
   263e2:	2b01      	cmp	r3, #1
   263e4:	f105 3eff 	add.w	lr, r5, #4294967295
   263e8:	d030      	beq.n	2644c <LLF_RND_AdaptiveProportionTest+0x80>
   263ea:	2100      	movs	r1, #0
   263ec:	468c      	mov	ip, r1
   263ee:	460f      	mov	r7, r1
   263f0:	460e      	mov	r6, r1
   263f2:	f103 38ff 	add.w	r8, r3, #4294967295
   263f6:	094c      	lsrs	r4, r1, #5
   263f8:	f001 051f 	and.w	r5, r1, #31
   263fc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   26400:	2d1f      	cmp	r5, #31
   26402:	fa24 f405 	lsr.w	r4, r4, r5
   26406:	bf18      	it	ne
   26408:	f004 0401 	andne.w	r4, r4, #1
   2640c:	b921      	cbnz	r1, 26418 <LLF_RND_AdaptiveProportionTest+0x4c>
   2640e:	2601      	movs	r6, #1
   26410:	46b4      	mov	ip, r6
   26412:	4631      	mov	r1, r6
   26414:	4627      	mov	r7, r4
   26416:	e7ee      	b.n	263f6 <LLF_RND_AdaptiveProportionTest+0x2a>
   26418:	42b3      	cmp	r3, r6
   2641a:	d013      	beq.n	26444 <LLF_RND_AdaptiveProportionTest+0x78>
   2641c:	42a7      	cmp	r7, r4
   2641e:	d101      	bne.n	26424 <LLF_RND_AdaptiveProportionTest+0x58>
   26420:	f10c 0c01 	add.w	ip, ip, #1
   26424:	4546      	cmp	r6, r8
   26426:	d104      	bne.n	26432 <LLF_RND_AdaptiveProportionTest+0x66>
   26428:	4562      	cmp	r2, ip
   2642a:	d202      	bcs.n	26432 <LLF_RND_AdaptiveProportionTest+0x66>
   2642c:	481a      	ldr	r0, [pc, #104]	; (26498 <LLF_RND_AdaptiveProportionTest+0xcc>)
   2642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26432:	463c      	mov	r4, r7
   26434:	3101      	adds	r1, #1
   26436:	458e      	cmp	lr, r1
   26438:	f106 0601 	add.w	r6, r6, #1
   2643c:	d2ea      	bcs.n	26414 <LLF_RND_AdaptiveProportionTest+0x48>
   2643e:	2000      	movs	r0, #0
   26440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26444:	2600      	movs	r6, #0
   26446:	f04f 0c01 	mov.w	ip, #1
   2644a:	e7f3      	b.n	26434 <LLF_RND_AdaptiveProportionTest+0x68>
   2644c:	2600      	movs	r6, #0
   2644e:	46b4      	mov	ip, r6
   26450:	4637      	mov	r7, r6
   26452:	4634      	mov	r4, r6
   26454:	0961      	lsrs	r1, r4, #5
   26456:	f004 031f 	and.w	r3, r4, #31
   2645a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   2645e:	2b1f      	cmp	r3, #31
   26460:	fa21 f103 	lsr.w	r1, r1, r3
   26464:	bf18      	it	ne
   26466:	f001 0101 	andne.w	r1, r1, #1
   2646a:	b13c      	cbz	r4, 2647c <LLF_RND_AdaptiveProportionTest+0xb0>
   2646c:	b95f      	cbnz	r7, 26486 <LLF_RND_AdaptiveProportionTest+0xba>
   2646e:	458c      	cmp	ip, r1
   26470:	d001      	beq.n	26476 <LLF_RND_AdaptiveProportionTest+0xaa>
   26472:	4661      	mov	r1, ip
   26474:	e008      	b.n	26488 <LLF_RND_AdaptiveProportionTest+0xbc>
   26476:	3601      	adds	r6, #1
   26478:	4661      	mov	r1, ip
   2647a:	e005      	b.n	26488 <LLF_RND_AdaptiveProportionTest+0xbc>
   2647c:	2601      	movs	r6, #1
   2647e:	4634      	mov	r4, r6
   26480:	468c      	mov	ip, r1
   26482:	2701      	movs	r7, #1
   26484:	e7e6      	b.n	26454 <LLF_RND_AdaptiveProportionTest+0x88>
   26486:	463e      	mov	r6, r7
   26488:	42b2      	cmp	r2, r6
   2648a:	d3cf      	bcc.n	2642c <LLF_RND_AdaptiveProportionTest+0x60>
   2648c:	3401      	adds	r4, #1
   2648e:	42ac      	cmp	r4, r5
   26490:	d1f6      	bne.n	26480 <LLF_RND_AdaptiveProportionTest+0xb4>
   26492:	e7d4      	b.n	2643e <LLF_RND_AdaptiveProportionTest+0x72>
   26494:	4800      	ldr	r0, [pc, #0]	; (26498 <LLF_RND_AdaptiveProportionTest+0xcc>)
   26496:	4770      	bx	lr
   26498:	00f10c37 	.word	0x00f10c37

0002649c <getTrngSource>:
   2649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264a0:	b08d      	sub	sp, #52	; 0x34
   264a2:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   264a6:	4607      	mov	r7, r0
   264a8:	460c      	mov	r4, r1
   264aa:	2d00      	cmp	r5, #0
   264ac:	d14c      	bne.n	26548 <getTrngSource+0xac>
   264ae:	f8d1 a010 	ldr.w	sl, [r1, #16]
   264b2:	601e      	str	r6, [r3, #0]
   264b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   264b6:	2100      	movs	r1, #0
   264b8:	6019      	str	r1, [r3, #0]
   264ba:	2a00      	cmp	r2, #0
   264bc:	f000 811f 	beq.w	266fe <getTrngSource+0x262>
   264c0:	4a9b      	ldr	r2, [pc, #620]	; (26730 <getTrngSource+0x294>)
   264c2:	4b9c      	ldr	r3, [pc, #624]	; (26734 <getTrngSource+0x298>)
   264c4:	6811      	ldr	r1, [r2, #0]
   264c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   264c8:	681b      	ldr	r3, [r3, #0]
   264ca:	429a      	cmp	r2, r3
   264cc:	d147      	bne.n	2655e <getTrngSource+0xc2>
   264ce:	290a      	cmp	r1, #10
   264d0:	d145      	bne.n	2655e <getTrngSource+0xc2>
   264d2:	78fb      	ldrb	r3, [r7, #3]
   264d4:	9304      	str	r3, [sp, #16]
   264d6:	4b98      	ldr	r3, [pc, #608]	; (26738 <getTrngSource+0x29c>)
   264d8:	fba3 230a 	umull	r2, r3, r3, sl
   264dc:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   264e0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   264e4:	f106 0208 	add.w	r2, r6, #8
   264e8:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   264ec:	2304      	movs	r3, #4
   264ee:	9203      	str	r2, [sp, #12]
   264f0:	9302      	str	r3, [sp, #8]
   264f2:	46b8      	mov	r8, r7
   264f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   264f6:	f8c3 a000 	str.w	sl, [r3]
   264fa:	f1ba 0f00 	cmp.w	sl, #0
   264fe:	f000 80c4 	beq.w	2668a <getTrngSource+0x1ee>
   26502:	9e03      	ldr	r6, [sp, #12]
   26504:	4655      	mov	r5, sl
   26506:	f04f 0900 	mov.w	r9, #0
   2650a:	f000 ff7b 	bl	27404 <LLF_RND_TurnOffTrng>
   2650e:	2300      	movs	r3, #0
   26510:	9305      	str	r3, [sp, #20]
   26512:	f1b8 0f00 	cmp.w	r8, #0
   26516:	f000 80e6 	beq.w	266e6 <getTrngSource+0x24a>
   2651a:	2c00      	cmp	r4, #0
   2651c:	f000 80e3 	beq.w	266e6 <getTrngSource+0x24a>
   26520:	9b04      	ldr	r3, [sp, #16]
   26522:	2b00      	cmp	r3, #0
   26524:	f000 80dd 	beq.w	266e2 <getTrngSource+0x246>
   26528:	a904      	add	r1, sp, #16
   2652a:	4620      	mov	r0, r4
   2652c:	f000 ff5a 	bl	273e4 <LLF_RND_GetFastestRosc>
   26530:	b1b8      	cbz	r0, 26562 <getTrngSource+0xc6>
   26532:	4b82      	ldr	r3, [pc, #520]	; (2673c <getTrngSource+0x2a0>)
   26534:	4298      	cmp	r0, r3
   26536:	f040 80a8 	bne.w	2668a <getTrngSource+0x1ee>
   2653a:	9002      	str	r0, [sp, #8]
   2653c:	f000 ff62 	bl	27404 <LLF_RND_TurnOffTrng>
   26540:	9802      	ldr	r0, [sp, #8]
   26542:	b00d      	add	sp, #52	; 0x34
   26544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26548:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2654c:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   26550:	3001      	adds	r0, #1
   26552:	bf14      	ite	ne
   26554:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   26558:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   2655c:	e7a9      	b.n	264b2 <getTrngSource+0x16>
   2655e:	4878      	ldr	r0, [pc, #480]	; (26740 <getTrngSource+0x2a4>)
   26560:	e7eb      	b.n	2653a <getTrngSource+0x9e>
   26562:	9804      	ldr	r0, [sp, #16]
   26564:	4621      	mov	r1, r4
   26566:	f000 ff1f 	bl	273a8 <LLF_RND_GetRoscSampleCnt>
   2656a:	2800      	cmp	r0, #0
   2656c:	d1e1      	bne.n	26532 <getTrngSource+0x96>
   2656e:	9f04      	ldr	r7, [sp, #16]
   26570:	2f08      	cmp	r7, #8
   26572:	f000 80ba 	beq.w	266ea <getTrngSource+0x24e>
   26576:	2f04      	cmp	r7, #4
   26578:	f000 80b9 	beq.w	266ee <getTrngSource+0x252>
   2657c:	f1a7 0702 	sub.w	r7, r7, #2
   26580:	fab7 f787 	clz	r7, r7
   26584:	097f      	lsrs	r7, r7, #5
   26586:	496f      	ldr	r1, [pc, #444]	; (26744 <getTrngSource+0x2a8>)
   26588:	2301      	movs	r3, #1
   2658a:	600b      	str	r3, [r1, #0]
   2658c:	f841 3c84 	str.w	r3, [r1, #-132]
   26590:	4619      	mov	r1, r3
   26592:	4b6c      	ldr	r3, [pc, #432]	; (26744 <getTrngSource+0x2a8>)
   26594:	4867      	ldr	r0, [pc, #412]	; (26734 <getTrngSource+0x298>)
   26596:	6019      	str	r1, [r3, #0]
   26598:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2659a:	6003      	str	r3, [r0, #0]
   2659c:	6800      	ldr	r0, [r0, #0]
   2659e:	4283      	cmp	r3, r0
   265a0:	d1f7      	bne.n	26592 <getTrngSource+0xf6>
   265a2:	4a69      	ldr	r2, [pc, #420]	; (26748 <getTrngSource+0x2ac>)
   265a4:	2300      	movs	r3, #0
   265a6:	6013      	str	r3, [r2, #0]
   265a8:	f04f 30ff 	mov.w	r0, #4294967295
   265ac:	f7ff fd0a 	bl	25fc4 <CC_HalClearInterruptBit>
   265b0:	2300      	movs	r3, #0
   265b2:	4618      	mov	r0, r3
   265b4:	4b65      	ldr	r3, [pc, #404]	; (2674c <getTrngSource+0x2b0>)
   265b6:	f06f 011b 	mvn.w	r1, #27
   265ba:	6019      	str	r1, [r3, #0]
   265bc:	f7ff fd10 	bl	25fe0 <CC_HalMaskInterrupt>
   265c0:	4963      	ldr	r1, [pc, #396]	; (26750 <getTrngSource+0x2b4>)
   265c2:	4b64      	ldr	r3, [pc, #400]	; (26754 <getTrngSource+0x2b8>)
   265c4:	600f      	str	r7, [r1, #0]
   265c6:	6818      	ldr	r0, [r3, #0]
   265c8:	4f5b      	ldr	r7, [pc, #364]	; (26738 <getTrngSource+0x29c>)
   265ca:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   265ce:	f7ff fd07 	bl	25fe0 <CC_HalMaskInterrupt>
   265d2:	4b57      	ldr	r3, [pc, #348]	; (26730 <getTrngSource+0x294>)
   265d4:	4860      	ldr	r0, [pc, #384]	; (26758 <getTrngSource+0x2bc>)
   265d6:	210a      	movs	r1, #10
   265d8:	6019      	str	r1, [r3, #0]
   265da:	6921      	ldr	r1, [r4, #16]
   265dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   265de:	fba7 c101 	umull	ip, r1, r7, r1
   265e2:	0909      	lsrs	r1, r1, #4
   265e4:	fb03 f301 	mul.w	r3, r3, r1
   265e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   265ec:	03db      	lsls	r3, r3, #15
   265ee:	099b      	lsrs	r3, r3, #6
   265f0:	6003      	str	r3, [r0, #0]
   265f2:	4b55      	ldr	r3, [pc, #340]	; (26748 <getTrngSource+0x2ac>)
   265f4:	2201      	movs	r2, #1
   265f6:	601a      	str	r2, [r3, #0]
   265f8:	9904      	ldr	r1, [sp, #16]
   265fa:	f8d8 2000 	ldr.w	r2, [r8]
   265fe:	020b      	lsls	r3, r1, #8
   26600:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   26604:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26608:	4313      	orrs	r3, r2
   2660a:	f8c8 3000 	str.w	r3, [r8]
   2660e:	a805      	add	r0, sp, #20
   26610:	f000 feba 	bl	27388 <LLF_RND_WaitRngInterrupt>
   26614:	9b05      	ldr	r3, [sp, #20]
   26616:	f003 031a 	and.w	r3, r3, #26
   2661a:	4303      	orrs	r3, r0
   2661c:	d135      	bne.n	2668a <getTrngSource+0x1ee>
   2661e:	4a4f      	ldr	r2, [pc, #316]	; (2675c <getTrngSource+0x2c0>)
   26620:	4b4f      	ldr	r3, [pc, #316]	; (26760 <getTrngSource+0x2c4>)
   26622:	6812      	ldr	r2, [r2, #0]
   26624:	9206      	str	r2, [sp, #24]
   26626:	681a      	ldr	r2, [r3, #0]
   26628:	9207      	str	r2, [sp, #28]
   2662a:	685a      	ldr	r2, [r3, #4]
   2662c:	9208      	str	r2, [sp, #32]
   2662e:	689a      	ldr	r2, [r3, #8]
   26630:	9209      	str	r2, [sp, #36]	; 0x24
   26632:	68da      	ldr	r2, [r3, #12]
   26634:	920a      	str	r2, [sp, #40]	; 0x28
   26636:	3310      	adds	r3, #16
   26638:	fba7 2705 	umull	r2, r7, r7, r5
   2663c:	681b      	ldr	r3, [r3, #0]
   2663e:	930b      	str	r3, [sp, #44]	; 0x2c
   26640:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   26644:	d102      	bne.n	2664c <getTrngSource+0x1b0>
   26646:	f1bb 0f00 	cmp.w	fp, #0
   2664a:	d141      	bne.n	266d0 <getTrngSource+0x234>
   2664c:	2218      	movs	r2, #24
   2664e:	4630      	mov	r0, r6
   26650:	eb0d 0102 	add.w	r1, sp, r2
   26654:	f000 fe3c 	bl	272d0 <CC_PalMemCopyPlat>
   26658:	3d18      	subs	r5, #24
   2665a:	3618      	adds	r6, #24
   2665c:	f109 0901 	add.w	r9, r9, #1
   26660:	2d00      	cmp	r5, #0
   26662:	f47f af52 	bne.w	2650a <getTrngSource+0x6e>
   26666:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   2666a:	d85d      	bhi.n	26728 <getTrngSource+0x28c>
   2666c:	9d03      	ldr	r5, [sp, #12]
   2666e:	6962      	ldr	r2, [r4, #20]
   26670:	4651      	mov	r1, sl
   26672:	4628      	mov	r0, r5
   26674:	f7ff fe7c 	bl	26370 <LLF_RND_RepetitionCounterTest.part.0>
   26678:	2800      	cmp	r0, #0
   2667a:	d04b      	beq.n	26714 <getTrngSource+0x278>
   2667c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2667e:	2300      	movs	r3, #0
   26680:	6013      	str	r3, [r2, #0]
   26682:	4b2e      	ldr	r3, [pc, #184]	; (2673c <getTrngSource+0x2a0>)
   26684:	4298      	cmp	r0, r3
   26686:	f43f af58 	beq.w	2653a <getTrngSource+0x9e>
   2668a:	9d04      	ldr	r5, [sp, #16]
   2668c:	2d08      	cmp	r5, #8
   2668e:	d034      	beq.n	266fa <getTrngSource+0x25e>
   26690:	2200      	movs	r2, #0
   26692:	ab04      	add	r3, sp, #16
   26694:	006d      	lsls	r5, r5, #1
   26696:	9200      	str	r2, [sp, #0]
   26698:	4621      	mov	r1, r4
   2669a:	4640      	mov	r0, r8
   2669c:	9504      	str	r5, [sp, #16]
   2669e:	f7ff fdbd 	bl	2621c <startTrngHW>
   266a2:	4b30      	ldr	r3, [pc, #192]	; (26764 <getTrngSource+0x2c8>)
   266a4:	4298      	cmp	r0, r3
   266a6:	d024      	beq.n	266f2 <getTrngSource+0x256>
   266a8:	2800      	cmp	r0, #0
   266aa:	f47f af46 	bne.w	2653a <getTrngSource+0x9e>
   266ae:	f8d8 2000 	ldr.w	r2, [r8]
   266b2:	0a13      	lsrs	r3, r2, #8
   266b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   266b8:	4313      	orrs	r3, r2
   266ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   266be:	f8c8 3000 	str.w	r3, [r8]
   266c2:	9b02      	ldr	r3, [sp, #8]
   266c4:	3b01      	subs	r3, #1
   266c6:	9302      	str	r3, [sp, #8]
   266c8:	f47f af14 	bne.w	264f4 <getTrngSource+0x58>
   266cc:	2000      	movs	r0, #0
   266ce:	e734      	b.n	2653a <getTrngSource+0x9e>
   266d0:	4630      	mov	r0, r6
   266d2:	465a      	mov	r2, fp
   266d4:	a906      	add	r1, sp, #24
   266d6:	f000 fdfb 	bl	272d0 <CC_PalMemCopyPlat>
   266da:	eba5 050b 	sub.w	r5, r5, fp
   266de:	445e      	add	r6, fp
   266e0:	e7bc      	b.n	2665c <getTrngSource+0x1c0>
   266e2:	4820      	ldr	r0, [pc, #128]	; (26764 <getTrngSource+0x2c8>)
   266e4:	e725      	b.n	26532 <getTrngSource+0x96>
   266e6:	4820      	ldr	r0, [pc, #128]	; (26768 <getTrngSource+0x2cc>)
   266e8:	e723      	b.n	26532 <getTrngSource+0x96>
   266ea:	2703      	movs	r7, #3
   266ec:	e74b      	b.n	26586 <getTrngSource+0xea>
   266ee:	2702      	movs	r7, #2
   266f0:	e749      	b.n	26586 <getTrngSource+0xea>
   266f2:	6a23      	ldr	r3, [r4, #32]
   266f4:	2b00      	cmp	r3, #0
   266f6:	f43f af20 	beq.w	2653a <getTrngSource+0x9e>
   266fa:	481c      	ldr	r0, [pc, #112]	; (2676c <getTrngSource+0x2d0>)
   266fc:	e71d      	b.n	2653a <getTrngSource+0x9e>
   266fe:	9500      	str	r5, [sp, #0]
   26700:	ab04      	add	r3, sp, #16
   26702:	2201      	movs	r2, #1
   26704:	4621      	mov	r1, r4
   26706:	4638      	mov	r0, r7
   26708:	f7ff fd88 	bl	2621c <startTrngHW>
   2670c:	2800      	cmp	r0, #0
   2670e:	f43f aee2 	beq.w	264d6 <getTrngSource+0x3a>
   26712:	e712      	b.n	2653a <getTrngSource+0x9e>
   26714:	69a2      	ldr	r2, [r4, #24]
   26716:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2671a:	4651      	mov	r1, sl
   2671c:	4628      	mov	r0, r5
   2671e:	f7ff fe55 	bl	263cc <LLF_RND_AdaptiveProportionTest>
   26722:	2800      	cmp	r0, #0
   26724:	d1aa      	bne.n	2667c <getTrngSource+0x1e0>
   26726:	e7d1      	b.n	266cc <getTrngSource+0x230>
   26728:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2672a:	601d      	str	r5, [r3, #0]
   2672c:	e7ad      	b.n	2668a <getTrngSource+0x1ee>
   2672e:	bf00      	nop
   26730:	5002b138 	.word	0x5002b138
   26734:	5002b130 	.word	0x5002b130
   26738:	aaaaaaab 	.word	0xaaaaaaab
   2673c:	00f10c02 	.word	0x00f10c02
   26740:	00f10c30 	.word	0x00f10c30
   26744:	5002b1c4 	.word	0x5002b1c4
   26748:	5002b12c 	.word	0x5002b12c
   2674c:	5002b100 	.word	0x5002b100
   26750:	5002b10c 	.word	0x5002b10c
   26754:	5002ba04 	.word	0x5002ba04
   26758:	5002b1d8 	.word	0x5002b1d8
   2675c:	5002b114 	.word	0x5002b114
   26760:	5002b118 	.word	0x5002b118
   26764:	00f10c31 	.word	0x00f10c31
   26768:	00f10c35 	.word	0x00f10c35
   2676c:	00f10c32 	.word	0x00f10c32

00026770 <LLF_RND_GetTrngSource>:
   26770:	b430      	push	{r4, r5}
   26772:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   26776:	9d04      	ldr	r5, [sp, #16]
   26778:	9402      	str	r4, [sp, #8]
   2677a:	2400      	movs	r4, #0
   2677c:	e9cd 5403 	strd	r5, r4, [sp, #12]
   26780:	bc30      	pop	{r4, r5}
   26782:	f7ff be8b 	b.w	2649c <getTrngSource>
   26786:	bf00      	nop

00026788 <LLF_RND_RunTrngStartupTest>:
   26788:	b510      	push	{r4, lr}
   2678a:	b086      	sub	sp, #24
   2678c:	ab05      	add	r3, sp, #20
   2678e:	2401      	movs	r4, #1
   26790:	e9cd 2401 	strd	r2, r4, [sp, #4]
   26794:	9300      	str	r3, [sp, #0]
   26796:	2200      	movs	r2, #0
   26798:	ab04      	add	r3, sp, #16
   2679a:	f7ff fe7f 	bl	2649c <getTrngSource>
   2679e:	b006      	add	sp, #24
   267a0:	bd10      	pop	{r4, pc}
   267a2:	bf00      	nop

000267a4 <mbedtls_platform_zeroize>:
   267a4:	b138      	cbz	r0, 267b6 <mbedtls_platform_zeroize+0x12>
   267a6:	b131      	cbz	r1, 267b6 <mbedtls_platform_zeroize+0x12>
   267a8:	4401      	add	r1, r0
   267aa:	2200      	movs	r2, #0
   267ac:	4603      	mov	r3, r0
   267ae:	3001      	adds	r0, #1
   267b0:	4281      	cmp	r1, r0
   267b2:	701a      	strb	r2, [r3, #0]
   267b4:	d1fa      	bne.n	267ac <mbedtls_platform_zeroize+0x8>
   267b6:	4770      	bx	lr

000267b8 <mbedtls_hardware_poll>:
   267b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   267ba:	b089      	sub	sp, #36	; 0x24
   267bc:	9205      	str	r2, [sp, #20]
   267be:	2900      	cmp	r1, #0
   267c0:	d064      	beq.n	2688c <mbedtls_hardware_poll+0xd4>
   267c2:	461c      	mov	r4, r3
   267c4:	2b00      	cmp	r3, #0
   267c6:	d061      	beq.n	2688c <mbedtls_hardware_poll+0xd4>
   267c8:	4615      	mov	r5, r2
   267ca:	2a00      	cmp	r2, #0
   267cc:	d05e      	beq.n	2688c <mbedtls_hardware_poll+0xd4>
   267ce:	4f31      	ldr	r7, [pc, #196]	; (26894 <mbedtls_hardware_poll+0xdc>)
   267d0:	460e      	mov	r6, r1
   267d2:	6838      	ldr	r0, [r7, #0]
   267d4:	f04f 31ff 	mov.w	r1, #4294967295
   267d8:	f7ff fc9c 	bl	26114 <CC_PalMutexLock>
   267dc:	2800      	cmp	r0, #0
   267de:	d14b      	bne.n	26878 <mbedtls_hardware_poll+0xc0>
   267e0:	2000      	movs	r0, #0
   267e2:	f7ff fcc7 	bl	26174 <CC_PalPowerSaveModeSelect>
   267e6:	2800      	cmp	r0, #0
   267e8:	d142      	bne.n	26870 <mbedtls_hardware_poll+0xb8>
   267ea:	482b      	ldr	r0, [pc, #172]	; (26898 <mbedtls_hardware_poll+0xe0>)
   267ec:	f000 fd34 	bl	27258 <RNG_PLAT_SetUserRngParameters>
   267f0:	b1d8      	cbz	r0, 2682a <mbedtls_hardware_poll+0x72>
   267f2:	2001      	movs	r0, #1
   267f4:	f04f 36ff 	mov.w	r6, #4294967295
   267f8:	f7ff fcbc 	bl	26174 <CC_PalPowerSaveModeSelect>
   267fc:	2800      	cmp	r0, #0
   267fe:	d133      	bne.n	26868 <mbedtls_hardware_poll+0xb0>
   26800:	4826      	ldr	r0, [pc, #152]	; (2689c <mbedtls_hardware_poll+0xe4>)
   26802:	f44f 7108 	mov.w	r1, #544	; 0x220
   26806:	f7ff ffcd 	bl	267a4 <mbedtls_platform_zeroize>
   2680a:	4825      	ldr	r0, [pc, #148]	; (268a0 <mbedtls_hardware_poll+0xe8>)
   2680c:	2104      	movs	r1, #4
   2680e:	f7ff ffc9 	bl	267a4 <mbedtls_platform_zeroize>
   26812:	4821      	ldr	r0, [pc, #132]	; (26898 <mbedtls_hardware_poll+0xe0>)
   26814:	2128      	movs	r1, #40	; 0x28
   26816:	f7ff ffc5 	bl	267a4 <mbedtls_platform_zeroize>
   2681a:	6838      	ldr	r0, [r7, #0]
   2681c:	f7ff fc82 	bl	26124 <CC_PalMutexUnlock>
   26820:	2800      	cmp	r0, #0
   26822:	d12d      	bne.n	26880 <mbedtls_hardware_poll+0xc8>
   26824:	4630      	mov	r0, r6
   26826:	b009      	add	sp, #36	; 0x24
   26828:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2682a:	491c      	ldr	r1, [pc, #112]	; (2689c <mbedtls_hardware_poll+0xe4>)
   2682c:	9003      	str	r0, [sp, #12]
   2682e:	ab07      	add	r3, sp, #28
   26830:	4602      	mov	r2, r0
   26832:	9102      	str	r1, [sp, #8]
   26834:	9300      	str	r3, [sp, #0]
   26836:	4918      	ldr	r1, [pc, #96]	; (26898 <mbedtls_hardware_poll+0xe0>)
   26838:	4819      	ldr	r0, [pc, #100]	; (268a0 <mbedtls_hardware_poll+0xe8>)
   2683a:	9401      	str	r4, [sp, #4]
   2683c:	ab05      	add	r3, sp, #20
   2683e:	f7ff ff97 	bl	26770 <LLF_RND_GetTrngSource>
   26842:	4603      	mov	r3, r0
   26844:	2800      	cmp	r0, #0
   26846:	d1d4      	bne.n	267f2 <mbedtls_hardware_poll+0x3a>
   26848:	6822      	ldr	r2, [r4, #0]
   2684a:	42aa      	cmp	r2, r5
   2684c:	d3d1      	bcc.n	267f2 <mbedtls_hardware_poll+0x3a>
   2684e:	9907      	ldr	r1, [sp, #28]
   26850:	4630      	mov	r0, r6
   26852:	3108      	adds	r1, #8
   26854:	462a      	mov	r2, r5
   26856:	461e      	mov	r6, r3
   26858:	f000 fd3a 	bl	272d0 <CC_PalMemCopyPlat>
   2685c:	6025      	str	r5, [r4, #0]
   2685e:	2001      	movs	r0, #1
   26860:	f7ff fc88 	bl	26174 <CC_PalPowerSaveModeSelect>
   26864:	2800      	cmp	r0, #0
   26866:	d0cb      	beq.n	26800 <mbedtls_hardware_poll+0x48>
   26868:	480e      	ldr	r0, [pc, #56]	; (268a4 <mbedtls_hardware_poll+0xec>)
   2686a:	f7ff f8bd 	bl	259e8 <CC_PalAbort>
   2686e:	e7c7      	b.n	26800 <mbedtls_hardware_poll+0x48>
   26870:	480d      	ldr	r0, [pc, #52]	; (268a8 <mbedtls_hardware_poll+0xf0>)
   26872:	f7ff f8b9 	bl	259e8 <CC_PalAbort>
   26876:	e7b8      	b.n	267ea <mbedtls_hardware_poll+0x32>
   26878:	480c      	ldr	r0, [pc, #48]	; (268ac <mbedtls_hardware_poll+0xf4>)
   2687a:	f7ff f8b5 	bl	259e8 <CC_PalAbort>
   2687e:	e7af      	b.n	267e0 <mbedtls_hardware_poll+0x28>
   26880:	480b      	ldr	r0, [pc, #44]	; (268b0 <mbedtls_hardware_poll+0xf8>)
   26882:	f7ff f8b1 	bl	259e8 <CC_PalAbort>
   26886:	4630      	mov	r0, r6
   26888:	b009      	add	sp, #36	; 0x24
   2688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2688c:	f04f 36ff 	mov.w	r6, #4294967295
   26890:	e7c8      	b.n	26824 <mbedtls_hardware_poll+0x6c>
   26892:	bf00      	nop
   26894:	20000724 	.word	0x20000724
   26898:	20003b34 	.word	0x20003b34
   2689c:	20003914 	.word	0x20003914
   268a0:	20003910 	.word	0x20003910
   268a4:	00033478 	.word	0x00033478
   268a8:	00033458 	.word	0x00033458
   268ac:	00033440 	.word	0x00033440
   268b0:	000334d0 	.word	0x000334d0

000268b4 <cc_mbedtls_sha256_init>:
   268b4:	b510      	push	{r4, lr}
   268b6:	4604      	mov	r4, r0
   268b8:	b128      	cbz	r0, 268c6 <cc_mbedtls_sha256_init+0x12>
   268ba:	4620      	mov	r0, r4
   268bc:	21f0      	movs	r1, #240	; 0xf0
   268be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   268c2:	f000 bd09 	b.w	272d8 <CC_PalMemSetZeroPlat>
   268c6:	4804      	ldr	r0, [pc, #16]	; (268d8 <cc_mbedtls_sha256_init+0x24>)
   268c8:	f7ff f88e 	bl	259e8 <CC_PalAbort>
   268cc:	4620      	mov	r0, r4
   268ce:	21f0      	movs	r1, #240	; 0xf0
   268d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   268d4:	f000 bd00 	b.w	272d8 <CC_PalMemSetZeroPlat>
   268d8:	000334e8 	.word	0x000334e8

000268dc <cc_mbedtls_sha256_free>:
   268dc:	b110      	cbz	r0, 268e4 <cc_mbedtls_sha256_free+0x8>
   268de:	21f0      	movs	r1, #240	; 0xf0
   268e0:	f7ff bf60 	b.w	267a4 <mbedtls_platform_zeroize>
   268e4:	4770      	bx	lr
   268e6:	bf00      	nop

000268e8 <cc_mbedtls_sha256_starts_ret>:
   268e8:	b508      	push	{r3, lr}
   268ea:	b161      	cbz	r1, 26906 <cc_mbedtls_sha256_starts_ret+0x1e>
   268ec:	2901      	cmp	r1, #1
   268ee:	d107      	bne.n	26900 <cc_mbedtls_sha256_starts_ret+0x18>
   268f0:	2102      	movs	r1, #2
   268f2:	f000 f839 	bl	26968 <mbedtls_sha_starts_internal>
   268f6:	2800      	cmp	r0, #0
   268f8:	bf18      	it	ne
   268fa:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   268fe:	bd08      	pop	{r3, pc}
   26900:	f06f 0036 	mvn.w	r0, #54	; 0x36
   26904:	bd08      	pop	{r3, pc}
   26906:	2101      	movs	r1, #1
   26908:	f000 f82e 	bl	26968 <mbedtls_sha_starts_internal>
   2690c:	e7f3      	b.n	268f6 <cc_mbedtls_sha256_starts_ret+0xe>
   2690e:	bf00      	nop

00026910 <cc_mbedtls_sha256_update_ret>:
   26910:	b508      	push	{r3, lr}
   26912:	f000 f86b 	bl	269ec <mbedtls_sha_update_internal>
   26916:	2800      	cmp	r0, #0
   26918:	bf18      	it	ne
   2691a:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   2691e:	bd08      	pop	{r3, pc}

00026920 <cc_mbedtls_sha256_finish_ret>:
   26920:	b570      	push	{r4, r5, r6, lr}
   26922:	b1e8      	cbz	r0, 26960 <cc_mbedtls_sha256_finish_ret+0x40>
   26924:	460e      	mov	r6, r1
   26926:	b1d9      	cbz	r1, 26960 <cc_mbedtls_sha256_finish_ret+0x40>
   26928:	4604      	mov	r4, r0
   2692a:	f000 f831 	bl	26990 <mbedtls_sha_finish_internal>
   2692e:	4605      	mov	r5, r0
   26930:	b9b0      	cbnz	r0, 26960 <cc_mbedtls_sha256_finish_ret+0x40>
   26932:	6823      	ldr	r3, [r4, #0]
   26934:	2b01      	cmp	r3, #1
   26936:	d00b      	beq.n	26950 <cc_mbedtls_sha256_finish_ret+0x30>
   26938:	2b02      	cmp	r3, #2
   2693a:	d001      	beq.n	26940 <cc_mbedtls_sha256_finish_ret+0x20>
   2693c:	4628      	mov	r0, r5
   2693e:	bd70      	pop	{r4, r5, r6, pc}
   26940:	f104 0108 	add.w	r1, r4, #8
   26944:	4630      	mov	r0, r6
   26946:	221c      	movs	r2, #28
   26948:	f000 fcc2 	bl	272d0 <CC_PalMemCopyPlat>
   2694c:	4628      	mov	r0, r5
   2694e:	bd70      	pop	{r4, r5, r6, pc}
   26950:	f104 0108 	add.w	r1, r4, #8
   26954:	4630      	mov	r0, r6
   26956:	2220      	movs	r2, #32
   26958:	f000 fcba 	bl	272d0 <CC_PalMemCopyPlat>
   2695c:	4628      	mov	r0, r5
   2695e:	bd70      	pop	{r4, r5, r6, pc}
   26960:	f06f 0536 	mvn.w	r5, #54	; 0x36
   26964:	e7ea      	b.n	2693c <cc_mbedtls_sha256_finish_ret+0x1c>
   26966:	bf00      	nop

00026968 <mbedtls_sha_starts_internal>:
   26968:	b178      	cbz	r0, 2698a <mbedtls_sha_starts_internal+0x22>
   2696a:	b538      	push	{r3, r4, r5, lr}
   2696c:	4604      	mov	r4, r0
   2696e:	460d      	mov	r5, r1
   26970:	21f0      	movs	r1, #240	; 0xf0
   26972:	f000 fcb1 	bl	272d8 <CC_PalMemSetZeroPlat>
   26976:	2340      	movs	r3, #64	; 0x40
   26978:	6025      	str	r5, [r4, #0]
   2697a:	65e3      	str	r3, [r4, #92]	; 0x5c
   2697c:	4620      	mov	r0, r4
   2697e:	f000 fd83 	bl	27488 <InitHashDrv>
   26982:	3800      	subs	r0, #0
   26984:	bf18      	it	ne
   26986:	2001      	movne	r0, #1
   26988:	bd38      	pop	{r3, r4, r5, pc}
   2698a:	2001      	movs	r0, #1
   2698c:	4770      	bx	lr
   2698e:	bf00      	nop

00026990 <mbedtls_sha_finish_internal>:
   26990:	b570      	push	{r4, r5, r6, lr}
   26992:	6e05      	ldr	r5, [r0, #96]	; 0x60
   26994:	b0a4      	sub	sp, #144	; 0x90
   26996:	4604      	mov	r4, r0
   26998:	ae04      	add	r6, sp, #16
   2699a:	b9e5      	cbnz	r5, 269d6 <mbedtls_sha_finish_internal+0x46>
   2699c:	2201      	movs	r2, #1
   2699e:	2300      	movs	r3, #0
   269a0:	6062      	str	r2, [r4, #4]
   269a2:	4630      	mov	r0, r6
   269a4:	e9cd 3300 	strd	r3, r3, [sp]
   269a8:	aa02      	add	r2, sp, #8
   269aa:	4629      	mov	r1, r5
   269ac:	f000 fd38 	bl	27420 <SetDataBuffersInfo>
   269b0:	b110      	cbz	r0, 269b8 <mbedtls_sha_finish_internal+0x28>
   269b2:	2001      	movs	r0, #1
   269b4:	b024      	add	sp, #144	; 0x90
   269b6:	bd70      	pop	{r4, r5, r6, pc}
   269b8:	462a      	mov	r2, r5
   269ba:	a902      	add	r1, sp, #8
   269bc:	4620      	mov	r0, r4
   269be:	f000 fd8d 	bl	274dc <ProcessHashDrv>
   269c2:	2800      	cmp	r0, #0
   269c4:	d1f5      	bne.n	269b2 <mbedtls_sha_finish_internal+0x22>
   269c6:	4620      	mov	r0, r4
   269c8:	f000 feb6 	bl	27738 <FinishHashDrv>
   269cc:	2800      	cmp	r0, #0
   269ce:	d1f0      	bne.n	269b2 <mbedtls_sha_finish_internal+0x22>
   269d0:	6620      	str	r0, [r4, #96]	; 0x60
   269d2:	b024      	add	sp, #144	; 0x90
   269d4:	bd70      	pop	{r4, r5, r6, pc}
   269d6:	2d80      	cmp	r5, #128	; 0x80
   269d8:	462a      	mov	r2, r5
   269da:	4630      	mov	r0, r6
   269dc:	bf28      	it	cs
   269de:	2280      	movcs	r2, #128	; 0x80
   269e0:	f104 0164 	add.w	r1, r4, #100	; 0x64
   269e4:	f000 fc74 	bl	272d0 <CC_PalMemCopyPlat>
   269e8:	6e25      	ldr	r5, [r4, #96]	; 0x60
   269ea:	e7d7      	b.n	2699c <mbedtls_sha_finish_internal+0xc>

000269ec <mbedtls_sha_update_internal>:
   269ec:	2800      	cmp	r0, #0
   269ee:	d054      	beq.n	26a9a <mbedtls_sha_update_internal+0xae>
   269f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   269f2:	4614      	mov	r4, r2
   269f4:	b0a5      	sub	sp, #148	; 0x94
   269f6:	b1b2      	cbz	r2, 26a26 <mbedtls_sha_update_internal+0x3a>
   269f8:	460e      	mov	r6, r1
   269fa:	b351      	cbz	r1, 26a52 <mbedtls_sha_update_internal+0x66>
   269fc:	4605      	mov	r5, r0
   269fe:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   26a02:	1a1a      	subs	r2, r3, r0
   26a04:	fbb2 f7f3 	udiv	r7, r2, r3
   26a08:	fb03 2717 	mls	r7, r3, r7, r2
   26a0c:	42a7      	cmp	r7, r4
   26a0e:	bf28      	it	cs
   26a10:	4627      	movcs	r7, r4
   26a12:	2f00      	cmp	r7, #0
   26a14:	d143      	bne.n	26a9e <mbedtls_sha_update_internal+0xb2>
   26a16:	4283      	cmp	r3, r0
   26a18:	d008      	beq.n	26a2c <mbedtls_sha_update_internal+0x40>
   26a1a:	fbb4 f7f3 	udiv	r7, r4, r3
   26a1e:	fb03 f707 	mul.w	r7, r3, r7
   26a22:	b9cf      	cbnz	r7, 26a58 <mbedtls_sha_update_internal+0x6c>
   26a24:	bb6c      	cbnz	r4, 26a82 <mbedtls_sha_update_internal+0x96>
   26a26:	2000      	movs	r0, #0
   26a28:	b025      	add	sp, #148	; 0x94
   26a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26a2c:	2b80      	cmp	r3, #128	; 0x80
   26a2e:	bf28      	it	cs
   26a30:	2380      	movcs	r3, #128	; 0x80
   26a32:	461a      	mov	r2, r3
   26a34:	f105 0164 	add.w	r1, r5, #100	; 0x64
   26a38:	a804      	add	r0, sp, #16
   26a3a:	f000 fc49 	bl	272d0 <CC_PalMemCopyPlat>
   26a3e:	2300      	movs	r3, #0
   26a40:	e9cd 3300 	strd	r3, r3, [sp]
   26a44:	a804      	add	r0, sp, #16
   26a46:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   26a48:	aa02      	add	r2, sp, #8
   26a4a:	f000 fce9 	bl	27420 <SetDataBuffersInfo>
   26a4e:	2800      	cmp	r0, #0
   26a50:	d032      	beq.n	26ab8 <mbedtls_sha_update_internal+0xcc>
   26a52:	2001      	movs	r0, #1
   26a54:	b025      	add	sp, #148	; 0x94
   26a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26a58:	2300      	movs	r3, #0
   26a5a:	e9cd 3300 	strd	r3, r3, [sp]
   26a5e:	aa02      	add	r2, sp, #8
   26a60:	4639      	mov	r1, r7
   26a62:	4630      	mov	r0, r6
   26a64:	f000 fcdc 	bl	27420 <SetDataBuffersInfo>
   26a68:	2800      	cmp	r0, #0
   26a6a:	d1f2      	bne.n	26a52 <mbedtls_sha_update_internal+0x66>
   26a6c:	a902      	add	r1, sp, #8
   26a6e:	463a      	mov	r2, r7
   26a70:	4628      	mov	r0, r5
   26a72:	f000 fd33 	bl	274dc <ProcessHashDrv>
   26a76:	2800      	cmp	r0, #0
   26a78:	d1eb      	bne.n	26a52 <mbedtls_sha_update_internal+0x66>
   26a7a:	1be4      	subs	r4, r4, r7
   26a7c:	443e      	add	r6, r7
   26a7e:	2c00      	cmp	r4, #0
   26a80:	d0d1      	beq.n	26a26 <mbedtls_sha_update_internal+0x3a>
   26a82:	6e28      	ldr	r0, [r5, #96]	; 0x60
   26a84:	3019      	adds	r0, #25
   26a86:	4622      	mov	r2, r4
   26a88:	4631      	mov	r1, r6
   26a8a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   26a8e:	f000 fc1f 	bl	272d0 <CC_PalMemCopyPlat>
   26a92:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   26a94:	4422      	add	r2, r4
   26a96:	662a      	str	r2, [r5, #96]	; 0x60
   26a98:	e7c5      	b.n	26a26 <mbedtls_sha_update_internal+0x3a>
   26a9a:	2001      	movs	r0, #1
   26a9c:	4770      	bx	lr
   26a9e:	f105 0364 	add.w	r3, r5, #100	; 0x64
   26aa2:	4418      	add	r0, r3
   26aa4:	463a      	mov	r2, r7
   26aa6:	f000 fc13 	bl	272d0 <CC_PalMemCopyPlat>
   26aaa:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   26aae:	4438      	add	r0, r7
   26ab0:	443e      	add	r6, r7
   26ab2:	1be4      	subs	r4, r4, r7
   26ab4:	6628      	str	r0, [r5, #96]	; 0x60
   26ab6:	e7ae      	b.n	26a16 <mbedtls_sha_update_internal+0x2a>
   26ab8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   26aba:	a902      	add	r1, sp, #8
   26abc:	4628      	mov	r0, r5
   26abe:	f000 fd0d 	bl	274dc <ProcessHashDrv>
   26ac2:	2800      	cmp	r0, #0
   26ac4:	d1c5      	bne.n	26a52 <mbedtls_sha_update_internal+0x66>
   26ac6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   26ac8:	6628      	str	r0, [r5, #96]	; 0x60
   26aca:	e7a6      	b.n	26a1a <mbedtls_sha_update_internal+0x2e>

00026acc <block_cipher_df>:
   26acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ad0:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   26ad4:	b0b1      	sub	sp, #196	; 0xc4
   26ad6:	f200 812e 	bhi.w	26d36 <block_cipher_df+0x26a>
   26ada:	f8df 926c 	ldr.w	r9, [pc, #620]	; 26d48 <block_cipher_df+0x27c>
   26ade:	4614      	mov	r4, r2
   26ae0:	460d      	mov	r5, r1
   26ae2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   26ae6:	2100      	movs	r1, #0
   26ae8:	4682      	mov	sl, r0
   26aea:	4648      	mov	r0, r9
   26aec:	f003 fefb 	bl	2a8e6 <memset>
   26af0:	a813      	add	r0, sp, #76	; 0x4c
   26af2:	f000 fe63 	bl	277bc <cc_mbedtls_aes_init>
   26af6:	2600      	movs	r6, #0
   26af8:	4629      	mov	r1, r5
   26afa:	2320      	movs	r3, #32
   26afc:	ba65      	rev16	r5, r4
   26afe:	4622      	mov	r2, r4
   26b00:	f109 0018 	add.w	r0, r9, #24
   26b04:	f8a9 5012 	strh.w	r5, [r9, #18]
   26b08:	f889 3017 	strb.w	r3, [r9, #23]
   26b0c:	f8a9 6010 	strh.w	r6, [r9, #16]
   26b10:	f003 fec5 	bl	2a89e <memcpy>
   26b14:	eb09 0304 	add.w	r3, r9, r4
   26b18:	2280      	movs	r2, #128	; 0x80
   26b1a:	4d88      	ldr	r5, [pc, #544]	; (26d3c <block_cipher_df+0x270>)
   26b1c:	761a      	strb	r2, [r3, #24]
   26b1e:	4b88      	ldr	r3, [pc, #544]	; (26d40 <block_cipher_df+0x274>)
   26b20:	9503      	str	r5, [sp, #12]
   26b22:	9304      	str	r3, [sp, #16]
   26b24:	a813      	add	r0, sp, #76	; 0x4c
   26b26:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   26b2a:	a903      	add	r1, sp, #12
   26b2c:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   26b30:	e9cd 5305 	strd	r5, r3, [sp, #20]
   26b34:	f000 fe58 	bl	277e8 <cc_mbedtls_aes_setkey_enc>
   26b38:	4680      	mov	r8, r0
   26b3a:	2800      	cmp	r0, #0
   26b3c:	f040 80da 	bne.w	26cf4 <block_cipher_df+0x228>
   26b40:	f104 0319 	add.w	r3, r4, #25
   26b44:	9301      	str	r3, [sp, #4]
   26b46:	af07      	add	r7, sp, #28
   26b48:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   26b4c:	2210      	movs	r2, #16
   26b4e:	2100      	movs	r1, #0
   26b50:	4638      	mov	r0, r7
   26b52:	f003 fec8 	bl	2a8e6 <memset>
   26b56:	4c7b      	ldr	r4, [pc, #492]	; (26d44 <block_cipher_df+0x278>)
   26b58:	9d01      	ldr	r5, [sp, #4]
   26b5a:	f89d 601d 	ldrb.w	r6, [sp, #29]
   26b5e:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   26b62:	f89d e01c 	ldrb.w	lr, [sp, #28]
   26b66:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   26b6a:	f89d c01f 	ldrb.w	ip, [sp, #31]
   26b6e:	f89d 001e 	ldrb.w	r0, [sp, #30]
   26b72:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   26b76:	404e      	eors	r6, r1
   26b78:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   26b7c:	f88d 601d 	strb.w	r6, [sp, #29]
   26b80:	ea8e 0303 	eor.w	r3, lr, r3
   26b84:	4050      	eors	r0, r2
   26b86:	ea8c 0101 	eor.w	r1, ip, r1
   26b8a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   26b8e:	f88d 301c 	strb.w	r3, [sp, #28]
   26b92:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   26b96:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   26b9a:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   26b9e:	f88d 001e 	strb.w	r0, [sp, #30]
   26ba2:	f88d 101f 	strb.w	r1, [sp, #31]
   26ba6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   26baa:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   26bae:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   26bb2:	405a      	eors	r2, r3
   26bb4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26bb8:	f88d 2020 	strb.w	r2, [sp, #32]
   26bbc:	ea8c 0606 	eor.w	r6, ip, r6
   26bc0:	4048      	eors	r0, r1
   26bc2:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   26bc6:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   26bca:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   26bce:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   26bd2:	ea8e 0303 	eor.w	r3, lr, r3
   26bd6:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   26bda:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   26bde:	ea8c 0101 	eor.w	r1, ip, r1
   26be2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   26be6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   26bea:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   26bee:	ea82 020c 	eor.w	r2, r2, ip
   26bf2:	4073      	eors	r3, r6
   26bf4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   26bf8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   26bfc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   26c00:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   26c04:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   26c08:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   26c0c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   26c10:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   26c14:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   26c18:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   26c1c:	ea8e 0202 	eor.w	r2, lr, r2
   26c20:	4041      	eors	r1, r0
   26c22:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   26c26:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   26c2a:	4073      	eors	r3, r6
   26c2c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   26c30:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   26c34:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   26c38:	ea8c 0000 	eor.w	r0, ip, r0
   26c3c:	4056      	eors	r6, r2
   26c3e:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   26c42:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   26c46:	463b      	mov	r3, r7
   26c48:	463a      	mov	r2, r7
   26c4a:	2101      	movs	r1, #1
   26c4c:	a813      	add	r0, sp, #76	; 0x4c
   26c4e:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   26c52:	f000 fde3 	bl	2781c <cc_mbedtls_aes_crypt_ecb>
   26c56:	2d10      	cmp	r5, #16
   26c58:	bf94      	ite	ls
   26c5a:	1b6d      	subls	r5, r5, r5
   26c5c:	3d10      	subhi	r5, #16
   26c5e:	2800      	cmp	r0, #0
   26c60:	d167      	bne.n	26d32 <block_cipher_df+0x266>
   26c62:	3410      	adds	r4, #16
   26c64:	2d00      	cmp	r5, #0
   26c66:	f47f af78 	bne.w	26b5a <block_cipher_df+0x8e>
   26c6a:	eb0b 0008 	add.w	r0, fp, r8
   26c6e:	2210      	movs	r2, #16
   26c70:	4639      	mov	r1, r7
   26c72:	f003 fe14 	bl	2a89e <memcpy>
   26c76:	f899 3003 	ldrb.w	r3, [r9, #3]
   26c7a:	f108 0810 	add.w	r8, r8, #16
   26c7e:	3301      	adds	r3, #1
   26c80:	f1b8 0f20 	cmp.w	r8, #32
   26c84:	f889 3003 	strb.w	r3, [r9, #3]
   26c88:	f47f af60 	bne.w	26b4c <block_cipher_df+0x80>
   26c8c:	2280      	movs	r2, #128	; 0x80
   26c8e:	4659      	mov	r1, fp
   26c90:	a813      	add	r0, sp, #76	; 0x4c
   26c92:	f000 fda9 	bl	277e8 <cc_mbedtls_aes_setkey_enc>
   26c96:	4680      	mov	r8, r0
   26c98:	bb78      	cbnz	r0, 26cfa <block_cipher_df+0x22e>
   26c9a:	f10a 0520 	add.w	r5, sl, #32
   26c9e:	4654      	mov	r4, sl
   26ca0:	ab0f      	add	r3, sp, #60	; 0x3c
   26ca2:	461a      	mov	r2, r3
   26ca4:	2101      	movs	r1, #1
   26ca6:	a813      	add	r0, sp, #76	; 0x4c
   26ca8:	f000 fdb8 	bl	2781c <cc_mbedtls_aes_crypt_ecb>
   26cac:	2210      	movs	r2, #16
   26cae:	4680      	mov	r8, r0
   26cb0:	a90f      	add	r1, sp, #60	; 0x3c
   26cb2:	4620      	mov	r0, r4
   26cb4:	4414      	add	r4, r2
   26cb6:	f1b8 0f00 	cmp.w	r8, #0
   26cba:	d11e      	bne.n	26cfa <block_cipher_df+0x22e>
   26cbc:	f003 fdef 	bl	2a89e <memcpy>
   26cc0:	42ac      	cmp	r4, r5
   26cc2:	d1ed      	bne.n	26ca0 <block_cipher_df+0x1d4>
   26cc4:	a813      	add	r0, sp, #76	; 0x4c
   26cc6:	f000 fd89 	bl	277dc <cc_mbedtls_aes_free>
   26cca:	481f      	ldr	r0, [pc, #124]	; (26d48 <block_cipher_df+0x27c>)
   26ccc:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   26cd0:	f7ff fd68 	bl	267a4 <mbedtls_platform_zeroize>
   26cd4:	4658      	mov	r0, fp
   26cd6:	2120      	movs	r1, #32
   26cd8:	f7ff fd64 	bl	267a4 <mbedtls_platform_zeroize>
   26cdc:	a803      	add	r0, sp, #12
   26cde:	2110      	movs	r1, #16
   26ce0:	f7ff fd60 	bl	267a4 <mbedtls_platform_zeroize>
   26ce4:	4638      	mov	r0, r7
   26ce6:	2110      	movs	r1, #16
   26ce8:	f7ff fd5c 	bl	267a4 <mbedtls_platform_zeroize>
   26cec:	4640      	mov	r0, r8
   26cee:	b031      	add	sp, #196	; 0xc4
   26cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cf4:	af07      	add	r7, sp, #28
   26cf6:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   26cfa:	a813      	add	r0, sp, #76	; 0x4c
   26cfc:	f000 fd6e 	bl	277dc <cc_mbedtls_aes_free>
   26d00:	4811      	ldr	r0, [pc, #68]	; (26d48 <block_cipher_df+0x27c>)
   26d02:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   26d06:	f7ff fd4d 	bl	267a4 <mbedtls_platform_zeroize>
   26d0a:	4658      	mov	r0, fp
   26d0c:	2120      	movs	r1, #32
   26d0e:	f7ff fd49 	bl	267a4 <mbedtls_platform_zeroize>
   26d12:	a803      	add	r0, sp, #12
   26d14:	2110      	movs	r1, #16
   26d16:	f7ff fd45 	bl	267a4 <mbedtls_platform_zeroize>
   26d1a:	4638      	mov	r0, r7
   26d1c:	2110      	movs	r1, #16
   26d1e:	f7ff fd41 	bl	267a4 <mbedtls_platform_zeroize>
   26d22:	4650      	mov	r0, sl
   26d24:	2120      	movs	r1, #32
   26d26:	f7ff fd3d 	bl	267a4 <mbedtls_platform_zeroize>
   26d2a:	4640      	mov	r0, r8
   26d2c:	b031      	add	sp, #196	; 0xc4
   26d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d32:	4680      	mov	r8, r0
   26d34:	e7e1      	b.n	26cfa <block_cipher_df+0x22e>
   26d36:	f06f 0837 	mvn.w	r8, #55	; 0x37
   26d3a:	e7f6      	b.n	26d2a <block_cipher_df+0x25e>
   26d3c:	03020100 	.word	0x03020100
   26d40:	07060504 	.word	0x07060504
   26d44:	20003b6c 	.word	0x20003b6c
   26d48:	20003b5c 	.word	0x20003b5c

00026d4c <ctr_drbg_update_internal>:
   26d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d50:	b088      	sub	sp, #32
   26d52:	4604      	mov	r4, r0
   26d54:	2220      	movs	r2, #32
   26d56:	460d      	mov	r5, r1
   26d58:	4668      	mov	r0, sp
   26d5a:	2100      	movs	r1, #0
   26d5c:	eb04 0802 	add.w	r8, r4, r2
   26d60:	f003 fdc1 	bl	2a8e6 <memset>
   26d64:	466e      	mov	r6, sp
   26d66:	7be2      	ldrb	r2, [r4, #15]
   26d68:	3201      	adds	r2, #1
   26d6a:	b2d2      	uxtb	r2, r2
   26d6c:	73e2      	strb	r2, [r4, #15]
   26d6e:	2a00      	cmp	r2, #0
   26d70:	d14d      	bne.n	26e0e <ctr_drbg_update_internal+0xc2>
   26d72:	7ba2      	ldrb	r2, [r4, #14]
   26d74:	3201      	adds	r2, #1
   26d76:	b2d2      	uxtb	r2, r2
   26d78:	73a2      	strb	r2, [r4, #14]
   26d7a:	2a00      	cmp	r2, #0
   26d7c:	d147      	bne.n	26e0e <ctr_drbg_update_internal+0xc2>
   26d7e:	7b63      	ldrb	r3, [r4, #13]
   26d80:	3301      	adds	r3, #1
   26d82:	b2db      	uxtb	r3, r3
   26d84:	7363      	strb	r3, [r4, #13]
   26d86:	2b00      	cmp	r3, #0
   26d88:	d141      	bne.n	26e0e <ctr_drbg_update_internal+0xc2>
   26d8a:	7b23      	ldrb	r3, [r4, #12]
   26d8c:	3301      	adds	r3, #1
   26d8e:	b2db      	uxtb	r3, r3
   26d90:	7323      	strb	r3, [r4, #12]
   26d92:	2b00      	cmp	r3, #0
   26d94:	d13b      	bne.n	26e0e <ctr_drbg_update_internal+0xc2>
   26d96:	7ae3      	ldrb	r3, [r4, #11]
   26d98:	3301      	adds	r3, #1
   26d9a:	b2db      	uxtb	r3, r3
   26d9c:	72e3      	strb	r3, [r4, #11]
   26d9e:	2b00      	cmp	r3, #0
   26da0:	d135      	bne.n	26e0e <ctr_drbg_update_internal+0xc2>
   26da2:	7aa3      	ldrb	r3, [r4, #10]
   26da4:	3301      	adds	r3, #1
   26da6:	b2db      	uxtb	r3, r3
   26da8:	72a3      	strb	r3, [r4, #10]
   26daa:	2b00      	cmp	r3, #0
   26dac:	d12f      	bne.n	26e0e <ctr_drbg_update_internal+0xc2>
   26dae:	7a63      	ldrb	r3, [r4, #9]
   26db0:	3301      	adds	r3, #1
   26db2:	b2db      	uxtb	r3, r3
   26db4:	7263      	strb	r3, [r4, #9]
   26db6:	bb53      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26db8:	7a23      	ldrb	r3, [r4, #8]
   26dba:	3301      	adds	r3, #1
   26dbc:	b2db      	uxtb	r3, r3
   26dbe:	7223      	strb	r3, [r4, #8]
   26dc0:	bb2b      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26dc2:	79e3      	ldrb	r3, [r4, #7]
   26dc4:	3301      	adds	r3, #1
   26dc6:	b2db      	uxtb	r3, r3
   26dc8:	71e3      	strb	r3, [r4, #7]
   26dca:	bb03      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26dcc:	79a3      	ldrb	r3, [r4, #6]
   26dce:	3301      	adds	r3, #1
   26dd0:	b2db      	uxtb	r3, r3
   26dd2:	71a3      	strb	r3, [r4, #6]
   26dd4:	b9db      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26dd6:	7963      	ldrb	r3, [r4, #5]
   26dd8:	3301      	adds	r3, #1
   26dda:	b2db      	uxtb	r3, r3
   26ddc:	7163      	strb	r3, [r4, #5]
   26dde:	b9b3      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26de0:	7923      	ldrb	r3, [r4, #4]
   26de2:	3301      	adds	r3, #1
   26de4:	b2db      	uxtb	r3, r3
   26de6:	7123      	strb	r3, [r4, #4]
   26de8:	b98b      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26dea:	78e3      	ldrb	r3, [r4, #3]
   26dec:	3301      	adds	r3, #1
   26dee:	b2db      	uxtb	r3, r3
   26df0:	70e3      	strb	r3, [r4, #3]
   26df2:	b963      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26df4:	78a3      	ldrb	r3, [r4, #2]
   26df6:	3301      	adds	r3, #1
   26df8:	b2db      	uxtb	r3, r3
   26dfa:	70a3      	strb	r3, [r4, #2]
   26dfc:	b93b      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26dfe:	7863      	ldrb	r3, [r4, #1]
   26e00:	3301      	adds	r3, #1
   26e02:	b2db      	uxtb	r3, r3
   26e04:	7063      	strb	r3, [r4, #1]
   26e06:	b913      	cbnz	r3, 26e0e <ctr_drbg_update_internal+0xc2>
   26e08:	7823      	ldrb	r3, [r4, #0]
   26e0a:	3301      	adds	r3, #1
   26e0c:	7023      	strb	r3, [r4, #0]
   26e0e:	4633      	mov	r3, r6
   26e10:	4622      	mov	r2, r4
   26e12:	2101      	movs	r1, #1
   26e14:	4640      	mov	r0, r8
   26e16:	f000 fd01 	bl	2781c <cc_mbedtls_aes_crypt_ecb>
   26e1a:	4607      	mov	r7, r0
   26e1c:	2800      	cmp	r0, #0
   26e1e:	d12b      	bne.n	26e78 <ctr_drbg_update_internal+0x12c>
   26e20:	3610      	adds	r6, #16
   26e22:	ab08      	add	r3, sp, #32
   26e24:	429e      	cmp	r6, r3
   26e26:	d19e      	bne.n	26d66 <ctr_drbg_update_internal+0x1a>
   26e28:	9e01      	ldr	r6, [sp, #4]
   26e2a:	686a      	ldr	r2, [r5, #4]
   26e2c:	9f00      	ldr	r7, [sp, #0]
   26e2e:	6829      	ldr	r1, [r5, #0]
   26e30:	68ab      	ldr	r3, [r5, #8]
   26e32:	4072      	eors	r2, r6
   26e34:	9e02      	ldr	r6, [sp, #8]
   26e36:	9201      	str	r2, [sp, #4]
   26e38:	4079      	eors	r1, r7
   26e3a:	4073      	eors	r3, r6
   26e3c:	9100      	str	r1, [sp, #0]
   26e3e:	9e03      	ldr	r6, [sp, #12]
   26e40:	68e9      	ldr	r1, [r5, #12]
   26e42:	692a      	ldr	r2, [r5, #16]
   26e44:	9302      	str	r3, [sp, #8]
   26e46:	4071      	eors	r1, r6
   26e48:	9e04      	ldr	r6, [sp, #16]
   26e4a:	696b      	ldr	r3, [r5, #20]
   26e4c:	9103      	str	r1, [sp, #12]
   26e4e:	4056      	eors	r6, r2
   26e50:	9a05      	ldr	r2, [sp, #20]
   26e52:	9604      	str	r6, [sp, #16]
   26e54:	ea83 0102 	eor.w	r1, r3, r2
   26e58:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   26e5c:	9d06      	ldr	r5, [sp, #24]
   26e5e:	9105      	str	r1, [sp, #20]
   26e60:	4055      	eors	r5, r2
   26e62:	9a07      	ldr	r2, [sp, #28]
   26e64:	4640      	mov	r0, r8
   26e66:	4053      	eors	r3, r2
   26e68:	4669      	mov	r1, sp
   26e6a:	2280      	movs	r2, #128	; 0x80
   26e6c:	e9cd 5306 	strd	r5, r3, [sp, #24]
   26e70:	f000 fcba 	bl	277e8 <cc_mbedtls_aes_setkey_enc>
   26e74:	4607      	mov	r7, r0
   26e76:	b138      	cbz	r0, 26e88 <ctr_drbg_update_internal+0x13c>
   26e78:	4668      	mov	r0, sp
   26e7a:	2120      	movs	r1, #32
   26e7c:	f7ff fc92 	bl	267a4 <mbedtls_platform_zeroize>
   26e80:	4638      	mov	r0, r7
   26e82:	b008      	add	sp, #32
   26e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26e88:	2210      	movs	r2, #16
   26e8a:	4620      	mov	r0, r4
   26e8c:	eb0d 0102 	add.w	r1, sp, r2
   26e90:	f003 fd05 	bl	2a89e <memcpy>
   26e94:	e7f0      	b.n	26e78 <ctr_drbg_update_internal+0x12c>
   26e96:	bf00      	nop

00026e98 <mbedtls_ctr_drbg_reseed_internal>:
   26e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26e9c:	4604      	mov	r4, r0
   26e9e:	6980      	ldr	r0, [r0, #24]
   26ea0:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   26ea4:	d851      	bhi.n	26f4a <mbedtls_ctr_drbg_reseed_internal+0xb2>
   26ea6:	461d      	mov	r5, r3
   26ea8:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   26eac:	42ab      	cmp	r3, r5
   26eae:	d34c      	bcc.n	26f4a <mbedtls_ctr_drbg_reseed_internal+0xb2>
   26eb0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   26eb4:	1a18      	subs	r0, r3, r0
   26eb6:	4290      	cmp	r0, r2
   26eb8:	4616      	mov	r6, r2
   26eba:	d346      	bcc.n	26f4a <mbedtls_ctr_drbg_reseed_internal+0xb2>
   26ebc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 26f58 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   26ec0:	f44f 72c0 	mov.w	r2, #384	; 0x180
   26ec4:	460f      	mov	r7, r1
   26ec6:	4640      	mov	r0, r8
   26ec8:	2100      	movs	r1, #0
   26eca:	f003 fd0c 	bl	2a8e6 <memset>
   26ece:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   26ed2:	69a2      	ldr	r2, [r4, #24]
   26ed4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   26ed8:	4641      	mov	r1, r8
   26eda:	4798      	blx	r3
   26edc:	2800      	cmp	r0, #0
   26ede:	d137      	bne.n	26f50 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   26ee0:	f8d4 9018 	ldr.w	r9, [r4, #24]
   26ee4:	b135      	cbz	r5, 26ef4 <mbedtls_ctr_drbg_reseed_internal+0x5c>
   26ee6:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   26eea:	462a      	mov	r2, r5
   26eec:	4641      	mov	r1, r8
   26eee:	4798      	blx	r3
   26ef0:	bb70      	cbnz	r0, 26f50 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   26ef2:	44a9      	add	r9, r5
   26ef4:	b107      	cbz	r7, 26ef8 <mbedtls_ctr_drbg_reseed_internal+0x60>
   26ef6:	b9c6      	cbnz	r6, 26f2a <mbedtls_ctr_drbg_reseed_internal+0x92>
   26ef8:	4917      	ldr	r1, [pc, #92]	; (26f58 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26efa:	464a      	mov	r2, r9
   26efc:	4608      	mov	r0, r1
   26efe:	f7ff fde5 	bl	26acc <block_cipher_df>
   26f02:	4605      	mov	r5, r0
   26f04:	b138      	cbz	r0, 26f16 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   26f06:	4814      	ldr	r0, [pc, #80]	; (26f58 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26f08:	f44f 71c0 	mov.w	r1, #384	; 0x180
   26f0c:	f7ff fc4a 	bl	267a4 <mbedtls_platform_zeroize>
   26f10:	4628      	mov	r0, r5
   26f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26f16:	4910      	ldr	r1, [pc, #64]	; (26f58 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26f18:	4620      	mov	r0, r4
   26f1a:	f7ff ff17 	bl	26d4c <ctr_drbg_update_internal>
   26f1e:	4605      	mov	r5, r0
   26f20:	2800      	cmp	r0, #0
   26f22:	d1f0      	bne.n	26f06 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   26f24:	2301      	movs	r3, #1
   26f26:	6123      	str	r3, [r4, #16]
   26f28:	e7ed      	b.n	26f06 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   26f2a:	4639      	mov	r1, r7
   26f2c:	eb08 0009 	add.w	r0, r8, r9
   26f30:	4632      	mov	r2, r6
   26f32:	f003 fcb4 	bl	2a89e <memcpy>
   26f36:	4908      	ldr	r1, [pc, #32]	; (26f58 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26f38:	44b1      	add	r9, r6
   26f3a:	464a      	mov	r2, r9
   26f3c:	4608      	mov	r0, r1
   26f3e:	f7ff fdc5 	bl	26acc <block_cipher_df>
   26f42:	4605      	mov	r5, r0
   26f44:	2800      	cmp	r0, #0
   26f46:	d1de      	bne.n	26f06 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   26f48:	e7e5      	b.n	26f16 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   26f4a:	f06f 0537 	mvn.w	r5, #55	; 0x37
   26f4e:	e7df      	b.n	26f10 <mbedtls_ctr_drbg_reseed_internal+0x78>
   26f50:	f06f 0533 	mvn.w	r5, #51	; 0x33
   26f54:	e7dc      	b.n	26f10 <mbedtls_ctr_drbg_reseed_internal+0x78>
   26f56:	bf00      	nop
   26f58:	20003cfc 	.word	0x20003cfc

00026f5c <cc_mbedtls_ctr_drbg_init>:
   26f5c:	b510      	push	{r4, lr}
   26f5e:	22a4      	movs	r2, #164	; 0xa4
   26f60:	4604      	mov	r4, r0
   26f62:	2100      	movs	r1, #0
   26f64:	f003 fcbf 	bl	2a8e6 <memset>
   26f68:	4b04      	ldr	r3, [pc, #16]	; (26f7c <cc_mbedtls_ctr_drbg_init+0x20>)
   26f6a:	f04f 32ff 	mov.w	r2, #4294967295
   26f6e:	6122      	str	r2, [r4, #16]
   26f70:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   26f74:	681b      	ldr	r3, [r3, #0]
   26f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26f7a:	4718      	bx	r3
   26f7c:	20000728 	.word	0x20000728

00026f80 <cc_mbedtls_ctr_drbg_seed>:
   26f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26f84:	b085      	sub	sp, #20
   26f86:	4605      	mov	r5, r0
   26f88:	460f      	mov	r7, r1
   26f8a:	4616      	mov	r6, r2
   26f8c:	4668      	mov	r0, sp
   26f8e:	2210      	movs	r2, #16
   26f90:	2100      	movs	r1, #0
   26f92:	4699      	mov	r9, r3
   26f94:	f003 fca7 	bl	2a8e6 <memset>
   26f98:	4b1f      	ldr	r3, [pc, #124]	; (27018 <cc_mbedtls_ctr_drbg_seed+0x98>)
   26f9a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   26f9e:	681b      	ldr	r3, [r3, #0]
   26fa0:	4640      	mov	r0, r8
   26fa2:	4798      	blx	r3
   26fa4:	b120      	cbz	r0, 26fb0 <cc_mbedtls_ctr_drbg_seed+0x30>
   26fa6:	4604      	mov	r4, r0
   26fa8:	4620      	mov	r0, r4
   26faa:	b005      	add	sp, #20
   26fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26fb0:	f105 0420 	add.w	r4, r5, #32
   26fb4:	4620      	mov	r0, r4
   26fb6:	f000 fc01 	bl	277bc <cc_mbedtls_aes_init>
   26fba:	69aa      	ldr	r2, [r5, #24]
   26fbc:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   26fc0:	692e      	ldr	r6, [r5, #16]
   26fc2:	b9fa      	cbnz	r2, 27004 <cc_mbedtls_ctr_drbg_seed+0x84>
   26fc4:	2220      	movs	r2, #32
   26fc6:	2e00      	cmp	r6, #0
   26fc8:	61aa      	str	r2, [r5, #24]
   26fca:	db22      	blt.n	27012 <cc_mbedtls_ctr_drbg_seed+0x92>
   26fcc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   26fd0:	4620      	mov	r0, r4
   26fd2:	4669      	mov	r1, sp
   26fd4:	61eb      	str	r3, [r5, #28]
   26fd6:	2280      	movs	r2, #128	; 0x80
   26fd8:	f000 fc06 	bl	277e8 <cc_mbedtls_aes_setkey_enc>
   26fdc:	4604      	mov	r4, r0
   26fde:	b930      	cbnz	r0, 26fee <cc_mbedtls_ctr_drbg_seed+0x6e>
   26fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26fe2:	4633      	mov	r3, r6
   26fe4:	4649      	mov	r1, r9
   26fe6:	4628      	mov	r0, r5
   26fe8:	f7ff ff56 	bl	26e98 <mbedtls_ctr_drbg_reseed_internal>
   26fec:	4604      	mov	r4, r0
   26fee:	4b0b      	ldr	r3, [pc, #44]	; (2701c <cc_mbedtls_ctr_drbg_seed+0x9c>)
   26ff0:	4640      	mov	r0, r8
   26ff2:	681b      	ldr	r3, [r3, #0]
   26ff4:	4798      	blx	r3
   26ff6:	2800      	cmp	r0, #0
   26ff8:	bf18      	it	ne
   26ffa:	4604      	movne	r4, r0
   26ffc:	4620      	mov	r0, r4
   26ffe:	b005      	add	sp, #20
   27000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27004:	2e00      	cmp	r6, #0
   27006:	dae1      	bge.n	26fcc <cc_mbedtls_ctr_drbg_seed+0x4c>
   27008:	2a17      	cmp	r2, #23
   2700a:	d802      	bhi.n	27012 <cc_mbedtls_ctr_drbg_seed+0x92>
   2700c:	1c53      	adds	r3, r2, #1
   2700e:	085e      	lsrs	r6, r3, #1
   27010:	e7dc      	b.n	26fcc <cc_mbedtls_ctr_drbg_seed+0x4c>
   27012:	2600      	movs	r6, #0
   27014:	e7da      	b.n	26fcc <cc_mbedtls_ctr_drbg_seed+0x4c>
   27016:	bf00      	nop
   27018:	2000072c 	.word	0x2000072c
   2701c:	20000730 	.word	0x20000730

00027020 <cc_mbedtls_ctr_drbg_random_with_add>:
   27020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27024:	b08d      	sub	sp, #52	; 0x34
   27026:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2702a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   2702e:	f200 80e4 	bhi.w	271fa <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   27032:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   27036:	f200 80dd 	bhi.w	271f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   2703a:	4604      	mov	r4, r0
   2703c:	4615      	mov	r5, r2
   2703e:	460e      	mov	r6, r1
   27040:	2220      	movs	r2, #32
   27042:	2100      	movs	r1, #0
   27044:	a804      	add	r0, sp, #16
   27046:	461f      	mov	r7, r3
   27048:	f003 fc4d 	bl	2a8e6 <memset>
   2704c:	4b6c      	ldr	r3, [pc, #432]	; (27200 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   2704e:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   27052:	681b      	ldr	r3, [r3, #0]
   27054:	4648      	mov	r0, r9
   27056:	4798      	blx	r3
   27058:	4683      	mov	fp, r0
   2705a:	2800      	cmp	r0, #0
   2705c:	f040 8093 	bne.w	27186 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   27060:	6922      	ldr	r2, [r4, #16]
   27062:	69e3      	ldr	r3, [r4, #28]
   27064:	429a      	cmp	r2, r3
   27066:	f300 8092 	bgt.w	2718e <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   2706a:	6963      	ldr	r3, [r4, #20]
   2706c:	2b00      	cmp	r3, #0
   2706e:	f040 808e 	bne.w	2718e <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   27072:	f1b8 0f00 	cmp.w	r8, #0
   27076:	f040 80a9 	bne.w	271cc <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   2707a:	f8df a188 	ldr.w	sl, [pc, #392]	; 27204 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   2707e:	466f      	mov	r7, sp
   27080:	2d00      	cmp	r5, #0
   27082:	f000 8098 	beq.w	271b6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   27086:	f104 0820 	add.w	r8, r4, #32
   2708a:	466f      	mov	r7, sp
   2708c:	e00e      	b.n	270ac <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   2708e:	2d10      	cmp	r5, #16
   27090:	46ab      	mov	fp, r5
   27092:	bf28      	it	cs
   27094:	f04f 0b10 	movcs.w	fp, #16
   27098:	4630      	mov	r0, r6
   2709a:	465a      	mov	r2, fp
   2709c:	4639      	mov	r1, r7
   2709e:	f003 fbfe 	bl	2a89e <memcpy>
   270a2:	ebb5 050b 	subs.w	r5, r5, fp
   270a6:	445e      	add	r6, fp
   270a8:	f000 8085 	beq.w	271b6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   270ac:	7be3      	ldrb	r3, [r4, #15]
   270ae:	3301      	adds	r3, #1
   270b0:	b2db      	uxtb	r3, r3
   270b2:	73e3      	strb	r3, [r4, #15]
   270b4:	2b00      	cmp	r3, #0
   270b6:	d14d      	bne.n	27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   270b8:	7ba3      	ldrb	r3, [r4, #14]
   270ba:	3301      	adds	r3, #1
   270bc:	b2db      	uxtb	r3, r3
   270be:	73a3      	strb	r3, [r4, #14]
   270c0:	2b00      	cmp	r3, #0
   270c2:	d147      	bne.n	27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   270c4:	7b63      	ldrb	r3, [r4, #13]
   270c6:	3301      	adds	r3, #1
   270c8:	b2db      	uxtb	r3, r3
   270ca:	7363      	strb	r3, [r4, #13]
   270cc:	2b00      	cmp	r3, #0
   270ce:	d141      	bne.n	27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   270d0:	7b23      	ldrb	r3, [r4, #12]
   270d2:	3301      	adds	r3, #1
   270d4:	b2db      	uxtb	r3, r3
   270d6:	7323      	strb	r3, [r4, #12]
   270d8:	2b00      	cmp	r3, #0
   270da:	d13b      	bne.n	27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   270dc:	7ae3      	ldrb	r3, [r4, #11]
   270de:	3301      	adds	r3, #1
   270e0:	b2db      	uxtb	r3, r3
   270e2:	72e3      	strb	r3, [r4, #11]
   270e4:	2b00      	cmp	r3, #0
   270e6:	d135      	bne.n	27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   270e8:	7aa3      	ldrb	r3, [r4, #10]
   270ea:	3301      	adds	r3, #1
   270ec:	b2db      	uxtb	r3, r3
   270ee:	72a3      	strb	r3, [r4, #10]
   270f0:	2b00      	cmp	r3, #0
   270f2:	d12f      	bne.n	27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   270f4:	7a63      	ldrb	r3, [r4, #9]
   270f6:	3301      	adds	r3, #1
   270f8:	b2db      	uxtb	r3, r3
   270fa:	7263      	strb	r3, [r4, #9]
   270fc:	bb53      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   270fe:	7a23      	ldrb	r3, [r4, #8]
   27100:	3301      	adds	r3, #1
   27102:	b2db      	uxtb	r3, r3
   27104:	7223      	strb	r3, [r4, #8]
   27106:	bb2b      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   27108:	79e3      	ldrb	r3, [r4, #7]
   2710a:	3301      	adds	r3, #1
   2710c:	b2db      	uxtb	r3, r3
   2710e:	71e3      	strb	r3, [r4, #7]
   27110:	bb03      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   27112:	79a3      	ldrb	r3, [r4, #6]
   27114:	3301      	adds	r3, #1
   27116:	b2db      	uxtb	r3, r3
   27118:	71a3      	strb	r3, [r4, #6]
   2711a:	b9db      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2711c:	7963      	ldrb	r3, [r4, #5]
   2711e:	3301      	adds	r3, #1
   27120:	b2db      	uxtb	r3, r3
   27122:	7163      	strb	r3, [r4, #5]
   27124:	b9b3      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   27126:	7923      	ldrb	r3, [r4, #4]
   27128:	3301      	adds	r3, #1
   2712a:	b2db      	uxtb	r3, r3
   2712c:	7123      	strb	r3, [r4, #4]
   2712e:	b98b      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   27130:	78e3      	ldrb	r3, [r4, #3]
   27132:	3301      	adds	r3, #1
   27134:	b2db      	uxtb	r3, r3
   27136:	70e3      	strb	r3, [r4, #3]
   27138:	b963      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2713a:	78a3      	ldrb	r3, [r4, #2]
   2713c:	3301      	adds	r3, #1
   2713e:	b2db      	uxtb	r3, r3
   27140:	70a3      	strb	r3, [r4, #2]
   27142:	b93b      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   27144:	7863      	ldrb	r3, [r4, #1]
   27146:	3301      	adds	r3, #1
   27148:	b2db      	uxtb	r3, r3
   2714a:	7063      	strb	r3, [r4, #1]
   2714c:	b913      	cbnz	r3, 27154 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2714e:	7823      	ldrb	r3, [r4, #0]
   27150:	3301      	adds	r3, #1
   27152:	7023      	strb	r3, [r4, #0]
   27154:	463b      	mov	r3, r7
   27156:	4622      	mov	r2, r4
   27158:	2101      	movs	r1, #1
   2715a:	4640      	mov	r0, r8
   2715c:	f000 fb5e 	bl	2781c <cc_mbedtls_aes_crypt_ecb>
   27160:	4683      	mov	fp, r0
   27162:	2800      	cmp	r0, #0
   27164:	d093      	beq.n	2708e <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   27166:	f8da 3000 	ldr.w	r3, [sl]
   2716a:	4648      	mov	r0, r9
   2716c:	4798      	blx	r3
   2716e:	2120      	movs	r1, #32
   27170:	4603      	mov	r3, r0
   27172:	a804      	add	r0, sp, #16
   27174:	2b00      	cmp	r3, #0
   27176:	bf18      	it	ne
   27178:	469b      	movne	fp, r3
   2717a:	f7ff fb13 	bl	267a4 <mbedtls_platform_zeroize>
   2717e:	4638      	mov	r0, r7
   27180:	2110      	movs	r1, #16
   27182:	f7ff fb0f 	bl	267a4 <mbedtls_platform_zeroize>
   27186:	4658      	mov	r0, fp
   27188:	b00d      	add	sp, #52	; 0x34
   2718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2718e:	4642      	mov	r2, r8
   27190:	4639      	mov	r1, r7
   27192:	2300      	movs	r3, #0
   27194:	4620      	mov	r0, r4
   27196:	f7ff fe7f 	bl	26e98 <mbedtls_ctr_drbg_reseed_internal>
   2719a:	f8df a068 	ldr.w	sl, [pc, #104]	; 27204 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   2719e:	2800      	cmp	r0, #0
   271a0:	f43f af6d 	beq.w	2707e <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   271a4:	f8da 3000 	ldr.w	r3, [sl]
   271a8:	4648      	mov	r0, r9
   271aa:	4798      	blx	r3
   271ac:	4683      	mov	fp, r0
   271ae:	2800      	cmp	r0, #0
   271b0:	f43f af65 	beq.w	2707e <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   271b4:	e7e7      	b.n	27186 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   271b6:	a904      	add	r1, sp, #16
   271b8:	4620      	mov	r0, r4
   271ba:	f7ff fdc7 	bl	26d4c <ctr_drbg_update_internal>
   271be:	4683      	mov	fp, r0
   271c0:	2800      	cmp	r0, #0
   271c2:	d1d0      	bne.n	27166 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   271c4:	6923      	ldr	r3, [r4, #16]
   271c6:	3301      	adds	r3, #1
   271c8:	6123      	str	r3, [r4, #16]
   271ca:	e7cc      	b.n	27166 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   271cc:	4642      	mov	r2, r8
   271ce:	4639      	mov	r1, r7
   271d0:	a804      	add	r0, sp, #16
   271d2:	f7ff fc7b 	bl	26acc <block_cipher_df>
   271d6:	4683      	mov	fp, r0
   271d8:	b118      	cbz	r0, 271e2 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   271da:	f8df a028 	ldr.w	sl, [pc, #40]	; 27204 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   271de:	466f      	mov	r7, sp
   271e0:	e7c1      	b.n	27166 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   271e2:	a904      	add	r1, sp, #16
   271e4:	4620      	mov	r0, r4
   271e6:	f7ff fdb1 	bl	26d4c <ctr_drbg_update_internal>
   271ea:	4683      	mov	fp, r0
   271ec:	2800      	cmp	r0, #0
   271ee:	f43f af44 	beq.w	2707a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   271f2:	e7f2      	b.n	271da <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   271f4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   271f8:	e7c5      	b.n	27186 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   271fa:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   271fe:	e7c2      	b.n	27186 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   27200:	2000072c 	.word	0x2000072c
   27204:	20000730 	.word	0x20000730

00027208 <cc_mbedtls_sha256_ret>:
   27208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2720a:	461c      	mov	r4, r3
   2720c:	4605      	mov	r5, r0
   2720e:	4811      	ldr	r0, [pc, #68]	; (27254 <cc_mbedtls_sha256_ret+0x4c>)
   27210:	460e      	mov	r6, r1
   27212:	4617      	mov	r7, r2
   27214:	f7ff fb4e 	bl	268b4 <cc_mbedtls_sha256_init>
   27218:	4621      	mov	r1, r4
   2721a:	480e      	ldr	r0, [pc, #56]	; (27254 <cc_mbedtls_sha256_ret+0x4c>)
   2721c:	f7ff fb64 	bl	268e8 <cc_mbedtls_sha256_starts_ret>
   27220:	4604      	mov	r4, r0
   27222:	b120      	cbz	r0, 2722e <cc_mbedtls_sha256_ret+0x26>
   27224:	480b      	ldr	r0, [pc, #44]	; (27254 <cc_mbedtls_sha256_ret+0x4c>)
   27226:	f7ff fb59 	bl	268dc <cc_mbedtls_sha256_free>
   2722a:	4620      	mov	r0, r4
   2722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2722e:	4809      	ldr	r0, [pc, #36]	; (27254 <cc_mbedtls_sha256_ret+0x4c>)
   27230:	4632      	mov	r2, r6
   27232:	4629      	mov	r1, r5
   27234:	f7ff fb6c 	bl	26910 <cc_mbedtls_sha256_update_ret>
   27238:	4604      	mov	r4, r0
   2723a:	2800      	cmp	r0, #0
   2723c:	d1f2      	bne.n	27224 <cc_mbedtls_sha256_ret+0x1c>
   2723e:	4639      	mov	r1, r7
   27240:	4804      	ldr	r0, [pc, #16]	; (27254 <cc_mbedtls_sha256_ret+0x4c>)
   27242:	f7ff fb6d 	bl	26920 <cc_mbedtls_sha256_finish_ret>
   27246:	4604      	mov	r4, r0
   27248:	4802      	ldr	r0, [pc, #8]	; (27254 <cc_mbedtls_sha256_ret+0x4c>)
   2724a:	f7ff fb47 	bl	268dc <cc_mbedtls_sha256_free>
   2724e:	4620      	mov	r0, r4
   27250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27252:	bf00      	nop
   27254:	20003e7c 	.word	0x20003e7c

00027258 <RNG_PLAT_SetUserRngParameters>:
   27258:	b530      	push	{r4, r5, lr}
   2725a:	b083      	sub	sp, #12
   2725c:	231c      	movs	r3, #28
   2725e:	a901      	add	r1, sp, #4
   27260:	4604      	mov	r4, r0
   27262:	9301      	str	r3, [sp, #4]
   27264:	f000 f83c 	bl	272e0 <CC_PalTrngParamGet>
   27268:	4605      	mov	r5, r0
   2726a:	b938      	cbnz	r0, 2727c <RNG_PLAT_SetUserRngParameters+0x24>
   2726c:	9b01      	ldr	r3, [sp, #4]
   2726e:	2b1c      	cmp	r3, #28
   27270:	d007      	beq.n	27282 <RNG_PLAT_SetUserRngParameters+0x2a>
   27272:	4d15      	ldr	r5, [pc, #84]	; (272c8 <RNG_PLAT_SetUserRngParameters+0x70>)
   27274:	4620      	mov	r0, r4
   27276:	211c      	movs	r1, #28
   27278:	f000 f82e 	bl	272d8 <CC_PalMemSetZeroPlat>
   2727c:	4628      	mov	r0, r5
   2727e:	b003      	add	sp, #12
   27280:	bd30      	pop	{r4, r5, pc}
   27282:	e9d4 3200 	ldrd	r3, r2, [r4]
   27286:	2101      	movs	r1, #1
   27288:	3b00      	subs	r3, #0
   2728a:	bf18      	it	ne
   2728c:	2301      	movne	r3, #1
   2728e:	61e1      	str	r1, [r4, #28]
   27290:	b10a      	cbz	r2, 27296 <RNG_PLAT_SetUserRngParameters+0x3e>
   27292:	f043 0302 	orr.w	r3, r3, #2
   27296:	68a2      	ldr	r2, [r4, #8]
   27298:	b932      	cbnz	r2, 272a8 <RNG_PLAT_SetUserRngParameters+0x50>
   2729a:	68e2      	ldr	r2, [r4, #12]
   2729c:	b942      	cbnz	r2, 272b0 <RNG_PLAT_SetUserRngParameters+0x58>
   2729e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   272a2:	b97b      	cbnz	r3, 272c4 <RNG_PLAT_SetUserRngParameters+0x6c>
   272a4:	4d09      	ldr	r5, [pc, #36]	; (272cc <RNG_PLAT_SetUserRngParameters+0x74>)
   272a6:	e7e5      	b.n	27274 <RNG_PLAT_SetUserRngParameters+0x1c>
   272a8:	68e2      	ldr	r2, [r4, #12]
   272aa:	f043 0304 	orr.w	r3, r3, #4
   272ae:	b13a      	cbz	r2, 272c0 <RNG_PLAT_SetUserRngParameters+0x68>
   272b0:	f043 0308 	orr.w	r3, r3, #8
   272b4:	2200      	movs	r2, #0
   272b6:	4628      	mov	r0, r5
   272b8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   272bc:	b003      	add	sp, #12
   272be:	bd30      	pop	{r4, r5, pc}
   272c0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   272c4:	4615      	mov	r5, r2
   272c6:	e7d9      	b.n	2727c <RNG_PLAT_SetUserRngParameters+0x24>
   272c8:	00f00c37 	.word	0x00f00c37
   272cc:	00f00c0e 	.word	0x00f00c0e

000272d0 <CC_PalMemCopyPlat>:
   272d0:	f003 bacf 	b.w	2a872 <memmove>

000272d4 <CC_PalMemSetPlat>:
   272d4:	f003 bb07 	b.w	2a8e6 <memset>

000272d8 <CC_PalMemSetZeroPlat>:
   272d8:	460a      	mov	r2, r1
   272da:	2100      	movs	r1, #0
   272dc:	f003 bb03 	b.w	2a8e6 <memset>

000272e0 <CC_PalTrngParamGet>:
   272e0:	b118      	cbz	r0, 272ea <CC_PalTrngParamGet+0xa>
   272e2:	b111      	cbz	r1, 272ea <CC_PalTrngParamGet+0xa>
   272e4:	680b      	ldr	r3, [r1, #0]
   272e6:	2b1c      	cmp	r3, #28
   272e8:	d001      	beq.n	272ee <CC_PalTrngParamGet+0xe>
   272ea:	2001      	movs	r0, #1
   272ec:	4770      	bx	lr
   272ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   272f2:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   272f6:	3201      	adds	r2, #1
   272f8:	bf14      	ite	ne
   272fa:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   272fe:	f241 225c 	movweq	r2, #4700	; 0x125c
   27302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27306:	6002      	str	r2, [r0, #0]
   27308:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   2730c:	3201      	adds	r2, #1
   2730e:	bf14      	ite	ne
   27310:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   27314:	f641 1264 	movweq	r2, #6500	; 0x1964
   27318:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2731c:	6042      	str	r2, [r0, #4]
   2731e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   27322:	3201      	adds	r2, #1
   27324:	bf14      	ite	ne
   27326:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2732a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   2732e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27332:	6082      	str	r2, [r0, #8]
   27334:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   27338:	3201      	adds	r2, #1
   2733a:	bf14      	ite	ne
   2733c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   27340:	f241 3288 	movweq	r2, #5000	; 0x1388
   27344:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27348:	60c2      	str	r2, [r0, #12]
   2734a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   2734e:	3201      	adds	r2, #1
   27350:	bf14      	ite	ne
   27352:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   27356:	2290      	moveq	r2, #144	; 0x90
   27358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2735c:	6102      	str	r2, [r0, #16]
   2735e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   27362:	3201      	adds	r2, #1
   27364:	bf14      	ite	ne
   27366:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   2736a:	2251      	moveq	r2, #81	; 0x51
   2736c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27370:	6142      	str	r2, [r0, #20]
   27372:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   27376:	3201      	adds	r2, #1
   27378:	bf14      	ite	ne
   2737a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   2737e:	f240 3337 	movweq	r3, #823	; 0x337
   27382:	6183      	str	r3, [r0, #24]
   27384:	2000      	movs	r0, #0
   27386:	4770      	bx	lr

00027388 <LLF_RND_WaitRngInterrupt>:
   27388:	b508      	push	{r3, lr}
   2738a:	4601      	mov	r1, r0
   2738c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   27390:	f7fe fe32 	bl	25ff8 <CC_HalWaitInterruptRND>
   27394:	4902      	ldr	r1, [pc, #8]	; (273a0 <LLF_RND_WaitRngInterrupt+0x18>)
   27396:	4a03      	ldr	r2, [pc, #12]	; (273a4 <LLF_RND_WaitRngInterrupt+0x1c>)
   27398:	2300      	movs	r3, #0
   2739a:	600b      	str	r3, [r1, #0]
   2739c:	6013      	str	r3, [r2, #0]
   2739e:	bd08      	pop	{r3, pc}
   273a0:	5002b1c8 	.word	0x5002b1c8
   273a4:	5002b12c 	.word	0x5002b12c

000273a8 <LLF_RND_GetRoscSampleCnt>:
   273a8:	3801      	subs	r0, #1
   273aa:	2807      	cmp	r0, #7
   273ac:	d805      	bhi.n	273ba <LLF_RND_GetRoscSampleCnt+0x12>
   273ae:	e8df f000 	tbb	[pc, r0]
   273b2:	0e0a      	.short	0x0e0a
   273b4:	04041204 	.word	0x04041204
   273b8:	0604      	.short	0x0604
   273ba:	4809      	ldr	r0, [pc, #36]	; (273e0 <LLF_RND_GetRoscSampleCnt+0x38>)
   273bc:	4770      	bx	lr
   273be:	68cb      	ldr	r3, [r1, #12]
   273c0:	624b      	str	r3, [r1, #36]	; 0x24
   273c2:	2000      	movs	r0, #0
   273c4:	4770      	bx	lr
   273c6:	680b      	ldr	r3, [r1, #0]
   273c8:	624b      	str	r3, [r1, #36]	; 0x24
   273ca:	2000      	movs	r0, #0
   273cc:	4770      	bx	lr
   273ce:	684b      	ldr	r3, [r1, #4]
   273d0:	624b      	str	r3, [r1, #36]	; 0x24
   273d2:	2000      	movs	r0, #0
   273d4:	4770      	bx	lr
   273d6:	688b      	ldr	r3, [r1, #8]
   273d8:	624b      	str	r3, [r1, #36]	; 0x24
   273da:	2000      	movs	r0, #0
   273dc:	4770      	bx	lr
   273de:	bf00      	nop
   273e0:	00f10c31 	.word	0x00f10c31

000273e4 <LLF_RND_GetFastestRosc>:
   273e4:	680b      	ldr	r3, [r1, #0]
   273e6:	e002      	b.n	273ee <LLF_RND_GetFastestRosc+0xa>
   273e8:	2b08      	cmp	r3, #8
   273ea:	600b      	str	r3, [r1, #0]
   273ec:	d806      	bhi.n	273fc <LLF_RND_GetFastestRosc+0x18>
   273ee:	6a02      	ldr	r2, [r0, #32]
   273f0:	4213      	tst	r3, r2
   273f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   273f6:	d0f7      	beq.n	273e8 <LLF_RND_GetFastestRosc+0x4>
   273f8:	2000      	movs	r0, #0
   273fa:	4770      	bx	lr
   273fc:	4800      	ldr	r0, [pc, #0]	; (27400 <LLF_RND_GetFastestRosc+0x1c>)
   273fe:	4770      	bx	lr
   27400:	00f10c31 	.word	0x00f10c31

00027404 <LLF_RND_TurnOffTrng>:
   27404:	4904      	ldr	r1, [pc, #16]	; (27418 <LLF_RND_TurnOffTrng+0x14>)
   27406:	4a05      	ldr	r2, [pc, #20]	; (2741c <LLF_RND_TurnOffTrng+0x18>)
   27408:	2300      	movs	r3, #0
   2740a:	600b      	str	r3, [r1, #0]
   2740c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   27410:	6013      	str	r3, [r2, #0]
   27412:	f7fe bdd7 	b.w	25fc4 <CC_HalClearInterruptBit>
   27416:	bf00      	nop
   27418:	5002b12c 	.word	0x5002b12c
   2741c:	5002b1c4 	.word	0x5002b1c4

00027420 <SetDataBuffersInfo>:
   27420:	b5f0      	push	{r4, r5, r6, r7, lr}
   27422:	b083      	sub	sp, #12
   27424:	2400      	movs	r4, #0
   27426:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   2742a:	f88d 4007 	strb.w	r4, [sp, #7]
   2742e:	d325      	bcc.n	2747c <SetDataBuffersInfo+0x5c>
   27430:	460c      	mov	r4, r1
   27432:	4404      	add	r4, r0
   27434:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   27438:	4605      	mov	r5, r0
   2743a:	d81f      	bhi.n	2747c <SetDataBuffersInfo+0x5c>
   2743c:	4617      	mov	r7, r2
   2743e:	461e      	mov	r6, r3
   27440:	2201      	movs	r2, #1
   27442:	f10d 0307 	add.w	r3, sp, #7
   27446:	f000 fa13 	bl	27870 <CC_PalDataBufferAttrGet>
   2744a:	4604      	mov	r4, r0
   2744c:	b9b0      	cbnz	r0, 2747c <SetDataBuffersInfo+0x5c>
   2744e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27450:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27454:	603d      	str	r5, [r7, #0]
   27456:	713b      	strb	r3, [r7, #4]
   27458:	b192      	cbz	r2, 27480 <SetDataBuffersInfo+0x60>
   2745a:	b14e      	cbz	r6, 27470 <SetDataBuffersInfo+0x50>
   2745c:	4602      	mov	r2, r0
   2745e:	9908      	ldr	r1, [sp, #32]
   27460:	f10d 0307 	add.w	r3, sp, #7
   27464:	4630      	mov	r0, r6
   27466:	f000 fa03 	bl	27870 <CC_PalDataBufferAttrGet>
   2746a:	b938      	cbnz	r0, 2747c <SetDataBuffersInfo+0x5c>
   2746c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27470:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27472:	4620      	mov	r0, r4
   27474:	6016      	str	r6, [r2, #0]
   27476:	7113      	strb	r3, [r2, #4]
   27478:	b003      	add	sp, #12
   2747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2747c:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   27480:	4620      	mov	r0, r4
   27482:	b003      	add	sp, #12
   27484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27486:	bf00      	nop

00027488 <InitHashDrv>:
   27488:	b1e8      	cbz	r0, 274c6 <InitHashDrv+0x3e>
   2748a:	b510      	push	{r4, lr}
   2748c:	6804      	ldr	r4, [r0, #0]
   2748e:	2c01      	cmp	r4, #1
   27490:	d004      	beq.n	2749c <InitHashDrv+0x14>
   27492:	2c02      	cmp	r4, #2
   27494:	d010      	beq.n	274b8 <InitHashDrv+0x30>
   27496:	b144      	cbz	r4, 274aa <InitHashDrv+0x22>
   27498:	480c      	ldr	r0, [pc, #48]	; (274cc <InitHashDrv+0x44>)
   2749a:	bd10      	pop	{r4, pc}
   2749c:	490c      	ldr	r1, [pc, #48]	; (274d0 <InitHashDrv+0x48>)
   2749e:	2220      	movs	r2, #32
   274a0:	3008      	adds	r0, #8
   274a2:	f7ff ff15 	bl	272d0 <CC_PalMemCopyPlat>
   274a6:	2000      	movs	r0, #0
   274a8:	bd10      	pop	{r4, pc}
   274aa:	490a      	ldr	r1, [pc, #40]	; (274d4 <InitHashDrv+0x4c>)
   274ac:	2214      	movs	r2, #20
   274ae:	3008      	adds	r0, #8
   274b0:	f7ff ff0e 	bl	272d0 <CC_PalMemCopyPlat>
   274b4:	4620      	mov	r0, r4
   274b6:	bd10      	pop	{r4, pc}
   274b8:	4907      	ldr	r1, [pc, #28]	; (274d8 <InitHashDrv+0x50>)
   274ba:	2220      	movs	r2, #32
   274bc:	3008      	adds	r0, #8
   274be:	f7ff ff07 	bl	272d0 <CC_PalMemCopyPlat>
   274c2:	2000      	movs	r0, #0
   274c4:	bd10      	pop	{r4, pc}
   274c6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   274ca:	4770      	bx	lr
   274cc:	00f30001 	.word	0x00f30001
   274d0:	0003352c 	.word	0x0003352c
   274d4:	000334f8 	.word	0x000334f8
   274d8:	0003350c 	.word	0x0003350c

000274dc <ProcessHashDrv>:
   274dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274e0:	2900      	cmp	r1, #0
   274e2:	f000 80ef 	beq.w	276c4 <ProcessHashDrv+0x1e8>
   274e6:	4604      	mov	r4, r0
   274e8:	2800      	cmp	r0, #0
   274ea:	f000 80ef 	beq.w	276cc <ProcessHashDrv+0x1f0>
   274ee:	6803      	ldr	r3, [r0, #0]
   274f0:	4617      	mov	r7, r2
   274f2:	460e      	mov	r6, r1
   274f4:	2b00      	cmp	r3, #0
   274f6:	f000 80b9 	beq.w	2766c <ProcessHashDrv+0x190>
   274fa:	3b01      	subs	r3, #1
   274fc:	2b01      	cmp	r3, #1
   274fe:	f200 80cd 	bhi.w	2769c <ProcessHashDrv+0x1c0>
   27502:	4874      	ldr	r0, [pc, #464]	; (276d4 <ProcessHashDrv+0x1f8>)
   27504:	f04f 31ff 	mov.w	r1, #4294967295
   27508:	f04f 0802 	mov.w	r8, #2
   2750c:	f7fe fe02 	bl	26114 <CC_PalMutexLock>
   27510:	2800      	cmp	r0, #0
   27512:	f040 80b5 	bne.w	27680 <ProcessHashDrv+0x1a4>
   27516:	2000      	movs	r0, #0
   27518:	f7fe fe2c 	bl	26174 <CC_PalPowerSaveModeSelect>
   2751c:	4605      	mov	r5, r0
   2751e:	2800      	cmp	r0, #0
   27520:	f040 80b8 	bne.w	27694 <ProcessHashDrv+0x1b8>
   27524:	4a6c      	ldr	r2, [pc, #432]	; (276d8 <ProcessHashDrv+0x1fc>)
   27526:	6813      	ldr	r3, [r2, #0]
   27528:	2b00      	cmp	r3, #0
   2752a:	d1fc      	bne.n	27526 <ProcessHashDrv+0x4a>
   2752c:	486b      	ldr	r0, [pc, #428]	; (276dc <ProcessHashDrv+0x200>)
   2752e:	6803      	ldr	r3, [r0, #0]
   27530:	2b00      	cmp	r3, #0
   27532:	d1fc      	bne.n	2752e <ProcessHashDrv+0x52>
   27534:	f04f 30ff 	mov.w	r0, #4294967295
   27538:	f7fe fd44 	bl	25fc4 <CC_HalClearInterruptBit>
   2753c:	4b68      	ldr	r3, [pc, #416]	; (276e0 <ProcessHashDrv+0x204>)
   2753e:	6818      	ldr	r0, [r3, #0]
   27540:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   27544:	f7fe fd4c 	bl	25fe0 <CC_HalMaskInterrupt>
   27548:	4866      	ldr	r0, [pc, #408]	; (276e4 <ProcessHashDrv+0x208>)
   2754a:	4a67      	ldr	r2, [pc, #412]	; (276e8 <ProcessHashDrv+0x20c>)
   2754c:	4967      	ldr	r1, [pc, #412]	; (276ec <ProcessHashDrv+0x210>)
   2754e:	2301      	movs	r3, #1
   27550:	6003      	str	r3, [r0, #0]
   27552:	2007      	movs	r0, #7
   27554:	6010      	str	r0, [r2, #0]
   27556:	600b      	str	r3, [r1, #0]
   27558:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   2755c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2755e:	6013      	str	r3, [r2, #0]
   27560:	4b63      	ldr	r3, [pc, #396]	; (276f0 <ProcessHashDrv+0x214>)
   27562:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   27564:	6051      	str	r1, [r2, #4]
   27566:	f8c3 8000 	str.w	r8, [r3]
   2756a:	6823      	ldr	r3, [r4, #0]
   2756c:	b15b      	cbz	r3, 27586 <ProcessHashDrv+0xaa>
   2756e:	3b01      	subs	r3, #1
   27570:	2b01      	cmp	r3, #1
   27572:	d817      	bhi.n	275a4 <ProcessHashDrv+0xc8>
   27574:	4b5f      	ldr	r3, [pc, #380]	; (276f4 <ProcessHashDrv+0x218>)
   27576:	6a62      	ldr	r2, [r4, #36]	; 0x24
   27578:	601a      	str	r2, [r3, #0]
   2757a:	6a22      	ldr	r2, [r4, #32]
   2757c:	f843 2c04 	str.w	r2, [r3, #-4]
   27580:	69e2      	ldr	r2, [r4, #28]
   27582:	f843 2c08 	str.w	r2, [r3, #-8]
   27586:	4b5c      	ldr	r3, [pc, #368]	; (276f8 <ProcessHashDrv+0x21c>)
   27588:	69a2      	ldr	r2, [r4, #24]
   2758a:	601a      	str	r2, [r3, #0]
   2758c:	6962      	ldr	r2, [r4, #20]
   2758e:	f843 2c04 	str.w	r2, [r3, #-4]
   27592:	6922      	ldr	r2, [r4, #16]
   27594:	f843 2c08 	str.w	r2, [r3, #-8]
   27598:	68e2      	ldr	r2, [r4, #12]
   2759a:	f843 2c0c 	str.w	r2, [r3, #-12]
   2759e:	68a2      	ldr	r2, [r4, #8]
   275a0:	f843 2c10 	str.w	r2, [r3, #-16]
   275a4:	4a55      	ldr	r2, [pc, #340]	; (276fc <ProcessHashDrv+0x220>)
   275a6:	6813      	ldr	r3, [r2, #0]
   275a8:	2b00      	cmp	r3, #0
   275aa:	d1fc      	bne.n	275a6 <ProcessHashDrv+0xca>
   275ac:	2f00      	cmp	r7, #0
   275ae:	d059      	beq.n	27664 <ProcessHashDrv+0x188>
   275b0:	6863      	ldr	r3, [r4, #4]
   275b2:	2b01      	cmp	r3, #1
   275b4:	bf04      	itt	eq
   275b6:	4a52      	ldreq	r2, [pc, #328]	; (27700 <ProcessHashDrv+0x224>)
   275b8:	6013      	streq	r3, [r2, #0]
   275ba:	4a52      	ldr	r2, [pc, #328]	; (27704 <ProcessHashDrv+0x228>)
   275bc:	4b52      	ldr	r3, [pc, #328]	; (27708 <ProcessHashDrv+0x22c>)
   275be:	6831      	ldr	r1, [r6, #0]
   275c0:	6011      	str	r1, [r2, #0]
   275c2:	2040      	movs	r0, #64	; 0x40
   275c4:	601f      	str	r7, [r3, #0]
   275c6:	f7fe fd11 	bl	25fec <CC_HalWaitInterrupt>
   275ca:	4605      	mov	r5, r0
   275cc:	4a4b      	ldr	r2, [pc, #300]	; (276fc <ProcessHashDrv+0x220>)
   275ce:	6813      	ldr	r3, [r2, #0]
   275d0:	2b00      	cmp	r3, #0
   275d2:	d1fc      	bne.n	275ce <ProcessHashDrv+0xf2>
   275d4:	4a41      	ldr	r2, [pc, #260]	; (276dc <ProcessHashDrv+0x200>)
   275d6:	6813      	ldr	r3, [r2, #0]
   275d8:	2b00      	cmp	r3, #0
   275da:	d1fc      	bne.n	275d6 <ProcessHashDrv+0xfa>
   275dc:	6823      	ldr	r3, [r4, #0]
   275de:	b15b      	cbz	r3, 275f8 <ProcessHashDrv+0x11c>
   275e0:	3b01      	subs	r3, #1
   275e2:	2b01      	cmp	r3, #1
   275e4:	d817      	bhi.n	27616 <ProcessHashDrv+0x13a>
   275e6:	4a43      	ldr	r2, [pc, #268]	; (276f4 <ProcessHashDrv+0x218>)
   275e8:	4b48      	ldr	r3, [pc, #288]	; (2770c <ProcessHashDrv+0x230>)
   275ea:	6812      	ldr	r2, [r2, #0]
   275ec:	6262      	str	r2, [r4, #36]	; 0x24
   275ee:	681a      	ldr	r2, [r3, #0]
   275f0:	6222      	str	r2, [r4, #32]
   275f2:	3b04      	subs	r3, #4
   275f4:	681b      	ldr	r3, [r3, #0]
   275f6:	61e3      	str	r3, [r4, #28]
   275f8:	4a3f      	ldr	r2, [pc, #252]	; (276f8 <ProcessHashDrv+0x21c>)
   275fa:	4b45      	ldr	r3, [pc, #276]	; (27710 <ProcessHashDrv+0x234>)
   275fc:	6812      	ldr	r2, [r2, #0]
   275fe:	61a2      	str	r2, [r4, #24]
   27600:	681a      	ldr	r2, [r3, #0]
   27602:	6162      	str	r2, [r4, #20]
   27604:	f853 2c04 	ldr.w	r2, [r3, #-4]
   27608:	6122      	str	r2, [r4, #16]
   2760a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   2760e:	60e2      	str	r2, [r4, #12]
   27610:	3b0c      	subs	r3, #12
   27612:	681b      	ldr	r3, [r3, #0]
   27614:	60a3      	str	r3, [r4, #8]
   27616:	4b3f      	ldr	r3, [pc, #252]	; (27714 <ProcessHashDrv+0x238>)
   27618:	4a3f      	ldr	r2, [pc, #252]	; (27718 <ProcessHashDrv+0x23c>)
   2761a:	681b      	ldr	r3, [r3, #0]
   2761c:	64a3      	str	r3, [r4, #72]	; 0x48
   2761e:	6812      	ldr	r2, [r2, #0]
   27620:	4b32      	ldr	r3, [pc, #200]	; (276ec <ProcessHashDrv+0x210>)
   27622:	64e2      	str	r2, [r4, #76]	; 0x4c
   27624:	4836      	ldr	r0, [pc, #216]	; (27700 <ProcessHashDrv+0x224>)
   27626:	493d      	ldr	r1, [pc, #244]	; (2771c <ProcessHashDrv+0x240>)
   27628:	2201      	movs	r2, #1
   2762a:	601a      	str	r2, [r3, #0]
   2762c:	2300      	movs	r3, #0
   2762e:	4a33      	ldr	r2, [pc, #204]	; (276fc <ProcessHashDrv+0x220>)
   27630:	6003      	str	r3, [r0, #0]
   27632:	600b      	str	r3, [r1, #0]
   27634:	6813      	ldr	r3, [r2, #0]
   27636:	2b00      	cmp	r3, #0
   27638:	d1fc      	bne.n	27634 <ProcessHashDrv+0x158>
   2763a:	4a2a      	ldr	r2, [pc, #168]	; (276e4 <ProcessHashDrv+0x208>)
   2763c:	6013      	str	r3, [r2, #0]
   2763e:	2d00      	cmp	r5, #0
   27640:	d13a      	bne.n	276b8 <ProcessHashDrv+0x1dc>
   27642:	4b27      	ldr	r3, [pc, #156]	; (276e0 <ProcessHashDrv+0x204>)
   27644:	6818      	ldr	r0, [r3, #0]
   27646:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2764a:	f7fe fcc9 	bl	25fe0 <CC_HalMaskInterrupt>
   2764e:	2001      	movs	r0, #1
   27650:	f7fe fd90 	bl	26174 <CC_PalPowerSaveModeSelect>
   27654:	bb60      	cbnz	r0, 276b0 <ProcessHashDrv+0x1d4>
   27656:	481f      	ldr	r0, [pc, #124]	; (276d4 <ProcessHashDrv+0x1f8>)
   27658:	f7fe fd64 	bl	26124 <CC_PalMutexUnlock>
   2765c:	bb10      	cbnz	r0, 276a4 <ProcessHashDrv+0x1c8>
   2765e:	4628      	mov	r0, r5
   27660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27664:	4b2d      	ldr	r3, [pc, #180]	; (2771c <ProcessHashDrv+0x240>)
   27666:	2204      	movs	r2, #4
   27668:	601a      	str	r2, [r3, #0]
   2766a:	e7af      	b.n	275cc <ProcessHashDrv+0xf0>
   2766c:	4819      	ldr	r0, [pc, #100]	; (276d4 <ProcessHashDrv+0x1f8>)
   2766e:	f04f 31ff 	mov.w	r1, #4294967295
   27672:	f04f 0801 	mov.w	r8, #1
   27676:	f7fe fd4d 	bl	26114 <CC_PalMutexLock>
   2767a:	2800      	cmp	r0, #0
   2767c:	f43f af4b 	beq.w	27516 <ProcessHashDrv+0x3a>
   27680:	4827      	ldr	r0, [pc, #156]	; (27720 <ProcessHashDrv+0x244>)
   27682:	f7fe f9b1 	bl	259e8 <CC_PalAbort>
   27686:	2000      	movs	r0, #0
   27688:	f7fe fd74 	bl	26174 <CC_PalPowerSaveModeSelect>
   2768c:	4605      	mov	r5, r0
   2768e:	2800      	cmp	r0, #0
   27690:	f43f af48 	beq.w	27524 <ProcessHashDrv+0x48>
   27694:	4823      	ldr	r0, [pc, #140]	; (27724 <ProcessHashDrv+0x248>)
   27696:	f7fe f9a7 	bl	259e8 <CC_PalAbort>
   2769a:	e743      	b.n	27524 <ProcessHashDrv+0x48>
   2769c:	4d22      	ldr	r5, [pc, #136]	; (27728 <ProcessHashDrv+0x24c>)
   2769e:	4628      	mov	r0, r5
   276a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   276a4:	4821      	ldr	r0, [pc, #132]	; (2772c <ProcessHashDrv+0x250>)
   276a6:	f7fe f99f 	bl	259e8 <CC_PalAbort>
   276aa:	4628      	mov	r0, r5
   276ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   276b0:	481f      	ldr	r0, [pc, #124]	; (27730 <ProcessHashDrv+0x254>)
   276b2:	f7fe f999 	bl	259e8 <CC_PalAbort>
   276b6:	e7ce      	b.n	27656 <ProcessHashDrv+0x17a>
   276b8:	f104 0008 	add.w	r0, r4, #8
   276bc:	2110      	movs	r1, #16
   276be:	f7ff fe0b 	bl	272d8 <CC_PalMemSetZeroPlat>
   276c2:	e7be      	b.n	27642 <ProcessHashDrv+0x166>
   276c4:	4d1b      	ldr	r5, [pc, #108]	; (27734 <ProcessHashDrv+0x258>)
   276c6:	4628      	mov	r0, r5
   276c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   276cc:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   276d0:	e7c5      	b.n	2765e <ProcessHashDrv+0x182>
   276d2:	bf00      	nop
   276d4:	20000720 	.word	0x20000720
   276d8:	5002b91c 	.word	0x5002b91c
   276dc:	5002bc20 	.word	0x5002bc20
   276e0:	5002ba04 	.word	0x5002ba04
   276e4:	5002b818 	.word	0x5002b818
   276e8:	5002b900 	.word	0x5002b900
   276ec:	5002b7c4 	.word	0x5002b7c4
   276f0:	5002b7c0 	.word	0x5002b7c0
   276f4:	5002b65c 	.word	0x5002b65c
   276f8:	5002b650 	.word	0x5002b650
   276fc:	5002b910 	.word	0x5002b910
   27700:	5002b684 	.word	0x5002b684
   27704:	5002bc28 	.word	0x5002bc28
   27708:	5002bc2c 	.word	0x5002bc2c
   2770c:	5002b658 	.word	0x5002b658
   27710:	5002b64c 	.word	0x5002b64c
   27714:	5002b7cc 	.word	0x5002b7cc
   27718:	5002b7d0 	.word	0x5002b7d0
   2771c:	5002b7c8 	.word	0x5002b7c8
   27720:	00033440 	.word	0x00033440
   27724:	00033458 	.word	0x00033458
   27728:	00f30001 	.word	0x00f30001
   2772c:	00033498 	.word	0x00033498
   27730:	00033478 	.word	0x00033478
   27734:	00f30003 	.word	0x00f30003

00027738 <FinishHashDrv>:
   27738:	2800      	cmp	r0, #0
   2773a:	d03b      	beq.n	277b4 <FinishHashDrv+0x7c>
   2773c:	b4f0      	push	{r4, r5, r6, r7}
   2773e:	b082      	sub	sp, #8
   27740:	6a43      	ldr	r3, [r0, #36]	; 0x24
   27742:	9301      	str	r3, [sp, #4]
   27744:	6883      	ldr	r3, [r0, #8]
   27746:	fa93 fc83 	rev.w	ip, r3
   2774a:	9b01      	ldr	r3, [sp, #4]
   2774c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   27750:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   27754:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   27758:	ba1b      	rev	r3, r3
   2775a:	6243      	str	r3, [r0, #36]	; 0x24
   2775c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2775e:	9301      	str	r3, [sp, #4]
   27760:	ba09      	rev	r1, r1
   27762:	6a83      	ldr	r3, [r0, #40]	; 0x28
   27764:	61c1      	str	r1, [r0, #28]
   27766:	ba12      	rev	r2, r2
   27768:	6202      	str	r2, [r0, #32]
   2776a:	ba3f      	rev	r7, r7
   2776c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   27770:	ba36      	rev	r6, r6
   27772:	ba2d      	rev	r5, r5
   27774:	ba24      	rev	r4, r4
   27776:	e9c0 c702 	strd	ip, r7, [r0, #8]
   2777a:	e9c0 6504 	strd	r6, r5, [r0, #16]
   2777e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   27780:	6b06      	ldr	r6, [r0, #48]	; 0x30
   27782:	6b45      	ldr	r5, [r0, #52]	; 0x34
   27784:	6184      	str	r4, [r0, #24]
   27786:	fa93 fc83 	rev.w	ip, r3
   2778a:	6b84      	ldr	r4, [r0, #56]	; 0x38
   2778c:	9b01      	ldr	r3, [sp, #4]
   2778e:	ba3f      	rev	r7, r7
   27790:	ba36      	rev	r6, r6
   27792:	ba2d      	rev	r5, r5
   27794:	ba24      	rev	r4, r4
   27796:	ba09      	rev	r1, r1
   27798:	ba12      	rev	r2, r2
   2779a:	ba1b      	rev	r3, r3
   2779c:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   277a0:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   277a4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   277a8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   277ac:	2000      	movs	r0, #0
   277ae:	b002      	add	sp, #8
   277b0:	bcf0      	pop	{r4, r5, r6, r7}
   277b2:	4770      	bx	lr
   277b4:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   277b8:	4770      	bx	lr
   277ba:	bf00      	nop

000277bc <cc_mbedtls_aes_init>:
   277bc:	b510      	push	{r4, lr}
   277be:	4604      	mov	r4, r0
   277c0:	b130      	cbz	r0, 277d0 <cc_mbedtls_aes_init+0x14>
   277c2:	2200      	movs	r2, #0
   277c4:	2301      	movs	r3, #1
   277c6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   277ca:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   277ce:	bd10      	pop	{r4, pc}
   277d0:	4801      	ldr	r0, [pc, #4]	; (277d8 <cc_mbedtls_aes_init+0x1c>)
   277d2:	f7fe f909 	bl	259e8 <CC_PalAbort>
   277d6:	e7f4      	b.n	277c2 <cc_mbedtls_aes_init+0x6>
   277d8:	0003354c 	.word	0x0003354c

000277dc <cc_mbedtls_aes_free>:
   277dc:	b118      	cbz	r0, 277e6 <cc_mbedtls_aes_free+0xa>
   277de:	2274      	movs	r2, #116	; 0x74
   277e0:	2100      	movs	r1, #0
   277e2:	f7ff bd77 	b.w	272d4 <CC_PalMemSetPlat>
   277e6:	4770      	bx	lr

000277e8 <cc_mbedtls_aes_setkey_enc>:
   277e8:	b190      	cbz	r0, 27810 <cc_mbedtls_aes_setkey_enc+0x28>
   277ea:	b1a1      	cbz	r1, 27816 <cc_mbedtls_aes_setkey_enc+0x2e>
   277ec:	b510      	push	{r4, lr}
   277ee:	2a80      	cmp	r2, #128	; 0x80
   277f0:	f04f 0400 	mov.w	r4, #0
   277f4:	6384      	str	r4, [r0, #56]	; 0x38
   277f6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   277fa:	d106      	bne.n	2780a <cc_mbedtls_aes_setkey_enc+0x22>
   277fc:	6304      	str	r4, [r0, #48]	; 0x30
   277fe:	2210      	movs	r2, #16
   27800:	3010      	adds	r0, #16
   27802:	f7ff fd65 	bl	272d0 <CC_PalMemCopyPlat>
   27806:	4620      	mov	r0, r4
   27808:	bd10      	pop	{r4, pc}
   2780a:	f06f 001f 	mvn.w	r0, #31
   2780e:	bd10      	pop	{r4, pc}
   27810:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27814:	4770      	bx	lr
   27816:	f06f 001f 	mvn.w	r0, #31
   2781a:	4770      	bx	lr

0002781c <cc_mbedtls_aes_crypt_ecb>:
   2781c:	b320      	cbz	r0, 27868 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2781e:	b31a      	cbz	r2, 27868 <cc_mbedtls_aes_crypt_ecb+0x4c>
   27820:	b313      	cbz	r3, 27868 <cc_mbedtls_aes_crypt_ecb+0x4c>
   27822:	2901      	cmp	r1, #1
   27824:	d820      	bhi.n	27868 <cc_mbedtls_aes_crypt_ecb+0x4c>
   27826:	b570      	push	{r4, r5, r6, lr}
   27828:	4604      	mov	r4, r0
   2782a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   2782c:	b086      	sub	sp, #24
   2782e:	d016      	beq.n	2785e <cc_mbedtls_aes_crypt_ecb+0x42>
   27830:	2901      	cmp	r1, #1
   27832:	d116      	bne.n	27862 <cc_mbedtls_aes_crypt_ecb+0x46>
   27834:	2100      	movs	r1, #0
   27836:	2510      	movs	r5, #16
   27838:	ae04      	add	r6, sp, #16
   2783a:	6361      	str	r1, [r4, #52]	; 0x34
   2783c:	4610      	mov	r0, r2
   2783e:	e9cd 5600 	strd	r5, r6, [sp]
   27842:	aa02      	add	r2, sp, #8
   27844:	4629      	mov	r1, r5
   27846:	f7ff fdeb 	bl	27420 <SetDataBuffersInfo>
   2784a:	b950      	cbnz	r0, 27862 <cc_mbedtls_aes_crypt_ecb+0x46>
   2784c:	462b      	mov	r3, r5
   2784e:	4632      	mov	r2, r6
   27850:	a902      	add	r1, sp, #8
   27852:	4620      	mov	r0, r4
   27854:	f000 f8d6 	bl	27a04 <ProcessAesDrv>
   27858:	b918      	cbnz	r0, 27862 <cc_mbedtls_aes_crypt_ecb+0x46>
   2785a:	b006      	add	sp, #24
   2785c:	bd70      	pop	{r4, r5, r6, pc}
   2785e:	2900      	cmp	r1, #0
   27860:	d0e8      	beq.n	27834 <cc_mbedtls_aes_crypt_ecb+0x18>
   27862:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27866:	e7f8      	b.n	2785a <cc_mbedtls_aes_crypt_ecb+0x3e>
   27868:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2786c:	4770      	bx	lr
   2786e:	bf00      	nop

00027870 <CC_PalDataBufferAttrGet>:
   27870:	2000      	movs	r0, #0
   27872:	7018      	strb	r0, [r3, #0]
   27874:	4770      	bx	lr
   27876:	bf00      	nop

00027878 <LoadAesKey>:
   27878:	2800      	cmp	r0, #0
   2787a:	d03b      	beq.n	278f4 <LoadAesKey+0x7c>
   2787c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   27880:	2b00      	cmp	r3, #0
   27882:	d02c      	beq.n	278de <LoadAesKey+0x66>
   27884:	2b03      	cmp	r3, #3
   27886:	b510      	push	{r4, lr}
   27888:	d00f      	beq.n	278aa <LoadAesKey+0x32>
   2788a:	481c      	ldr	r0, [pc, #112]	; (278fc <LoadAesKey+0x84>)
   2788c:	4c1c      	ldr	r4, [pc, #112]	; (27900 <LoadAesKey+0x88>)
   2788e:	6822      	ldr	r2, [r4, #0]
   27890:	4b1c      	ldr	r3, [pc, #112]	; (27904 <LoadAesKey+0x8c>)
   27892:	6812      	ldr	r2, [r2, #0]
   27894:	601a      	str	r2, [r3, #0]
   27896:	6822      	ldr	r2, [r4, #0]
   27898:	6852      	ldr	r2, [r2, #4]
   2789a:	605a      	str	r2, [r3, #4]
   2789c:	6822      	ldr	r2, [r4, #0]
   2789e:	6892      	ldr	r2, [r2, #8]
   278a0:	609a      	str	r2, [r3, #8]
   278a2:	6822      	ldr	r2, [r4, #0]
   278a4:	68d2      	ldr	r2, [r2, #12]
   278a6:	60da      	str	r2, [r3, #12]
   278a8:	bd10      	pop	{r4, pc}
   278aa:	6b01      	ldr	r1, [r0, #48]	; 0x30
   278ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
   278ae:	4c14      	ldr	r4, [pc, #80]	; (27900 <LoadAesKey+0x88>)
   278b0:	f000 fba4 	bl	27ffc <kmu_validate_kdr_slot_and_size>
   278b4:	2800      	cmp	r0, #0
   278b6:	d1ea      	bne.n	2788e <LoadAesKey+0x16>
   278b8:	6821      	ldr	r1, [r4, #0]
   278ba:	4a12      	ldr	r2, [pc, #72]	; (27904 <LoadAesKey+0x8c>)
   278bc:	6809      	ldr	r1, [r1, #0]
   278be:	6011      	str	r1, [r2, #0]
   278c0:	6821      	ldr	r1, [r4, #0]
   278c2:	4b11      	ldr	r3, [pc, #68]	; (27908 <LoadAesKey+0x90>)
   278c4:	6849      	ldr	r1, [r1, #4]
   278c6:	6019      	str	r1, [r3, #0]
   278c8:	6821      	ldr	r1, [r4, #0]
   278ca:	6889      	ldr	r1, [r1, #8]
   278cc:	6091      	str	r1, [r2, #8]
   278ce:	6822      	ldr	r2, [r4, #0]
   278d0:	68d2      	ldr	r2, [r2, #12]
   278d2:	609a      	str	r2, [r3, #8]
   278d4:	f000 fb9e 	bl	28014 <kmu_use_kdr_key>
   278d8:	2800      	cmp	r0, #0
   278da:	d1d8      	bne.n	2788e <LoadAesKey+0x16>
   278dc:	bd10      	pop	{r4, pc}
   278de:	4a09      	ldr	r2, [pc, #36]	; (27904 <LoadAesKey+0x8c>)
   278e0:	6901      	ldr	r1, [r0, #16]
   278e2:	6011      	str	r1, [r2, #0]
   278e4:	6941      	ldr	r1, [r0, #20]
   278e6:	6051      	str	r1, [r2, #4]
   278e8:	6981      	ldr	r1, [r0, #24]
   278ea:	6091      	str	r1, [r2, #8]
   278ec:	69c1      	ldr	r1, [r0, #28]
   278ee:	60d1      	str	r1, [r2, #12]
   278f0:	4618      	mov	r0, r3
   278f2:	4770      	bx	lr
   278f4:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   278f8:	4770      	bx	lr
   278fa:	bf00      	nop
   278fc:	00f10009 	.word	0x00f10009
   27900:	20000710 	.word	0x20000710
   27904:	5002b400 	.word	0x5002b400
   27908:	5002b404 	.word	0x5002b404

0002790c <InitAes.part.0>:
   2790c:	4a32      	ldr	r2, [pc, #200]	; (279d8 <InitAes.part.0+0xcc>)
   2790e:	b510      	push	{r4, lr}
   27910:	4604      	mov	r4, r0
   27912:	6813      	ldr	r3, [r2, #0]
   27914:	2b00      	cmp	r3, #0
   27916:	d1fc      	bne.n	27912 <InitAes.part.0+0x6>
   27918:	4a30      	ldr	r2, [pc, #192]	; (279dc <InitAes.part.0+0xd0>)
   2791a:	6813      	ldr	r3, [r2, #0]
   2791c:	2b00      	cmp	r3, #0
   2791e:	d1fc      	bne.n	2791a <InitAes.part.0+0xe>
   27920:	4a2f      	ldr	r2, [pc, #188]	; (279e0 <InitAes.part.0+0xd4>)
   27922:	6813      	ldr	r3, [r2, #0]
   27924:	2b00      	cmp	r3, #0
   27926:	d1fc      	bne.n	27922 <InitAes.part.0+0x16>
   27928:	4a2e      	ldr	r2, [pc, #184]	; (279e4 <InitAes.part.0+0xd8>)
   2792a:	6813      	ldr	r3, [r2, #0]
   2792c:	2b00      	cmp	r3, #0
   2792e:	d1fc      	bne.n	2792a <InitAes.part.0+0x1e>
   27930:	4a2d      	ldr	r2, [pc, #180]	; (279e8 <InitAes.part.0+0xdc>)
   27932:	6813      	ldr	r3, [r2, #0]
   27934:	2b00      	cmp	r3, #0
   27936:	d1fc      	bne.n	27932 <InitAes.part.0+0x26>
   27938:	4a2c      	ldr	r2, [pc, #176]	; (279ec <InitAes.part.0+0xe0>)
   2793a:	6813      	ldr	r3, [r2, #0]
   2793c:	2b00      	cmp	r3, #0
   2793e:	d1fc      	bne.n	2793a <InitAes.part.0+0x2e>
   27940:	f04f 30ff 	mov.w	r0, #4294967295
   27944:	f7fe fb3e 	bl	25fc4 <CC_HalClearInterruptBit>
   27948:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2794a:	f023 0304 	bic.w	r3, r3, #4
   2794e:	2b03      	cmp	r3, #3
   27950:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27952:	d036      	beq.n	279c2 <InitAes.part.0+0xb6>
   27954:	2b01      	cmp	r3, #1
   27956:	4b26      	ldr	r3, [pc, #152]	; (279f0 <InitAes.part.0+0xe4>)
   27958:	6818      	ldr	r0, [r3, #0]
   2795a:	bf0c      	ite	eq
   2795c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   27960:	f020 0020 	bicne.w	r0, r0, #32
   27964:	f7fe fb3c 	bl	25fe0 <CC_HalMaskInterrupt>
   27968:	4b22      	ldr	r3, [pc, #136]	; (279f4 <InitAes.part.0+0xe8>)
   2796a:	4a1b      	ldr	r2, [pc, #108]	; (279d8 <InitAes.part.0+0xcc>)
   2796c:	2101      	movs	r1, #1
   2796e:	6019      	str	r1, [r3, #0]
   27970:	6813      	ldr	r3, [r2, #0]
   27972:	2b00      	cmp	r3, #0
   27974:	d1fc      	bne.n	27970 <InitAes.part.0+0x64>
   27976:	4a19      	ldr	r2, [pc, #100]	; (279dc <InitAes.part.0+0xd0>)
   27978:	6813      	ldr	r3, [r2, #0]
   2797a:	2b00      	cmp	r3, #0
   2797c:	d1fc      	bne.n	27978 <InitAes.part.0+0x6c>
   2797e:	491e      	ldr	r1, [pc, #120]	; (279f8 <InitAes.part.0+0xec>)
   27980:	4a15      	ldr	r2, [pc, #84]	; (279d8 <InitAes.part.0+0xcc>)
   27982:	600b      	str	r3, [r1, #0]
   27984:	6813      	ldr	r3, [r2, #0]
   27986:	2b00      	cmp	r3, #0
   27988:	d1fc      	bne.n	27984 <InitAes.part.0+0x78>
   2798a:	4a14      	ldr	r2, [pc, #80]	; (279dc <InitAes.part.0+0xd0>)
   2798c:	6813      	ldr	r3, [r2, #0]
   2798e:	2b00      	cmp	r3, #0
   27990:	d1fc      	bne.n	2798c <InitAes.part.0+0x80>
   27992:	6b62      	ldr	r2, [r4, #52]	; 0x34
   27994:	f022 0104 	bic.w	r1, r2, #4
   27998:	2903      	cmp	r1, #3
   2799a:	bf18      	it	ne
   2799c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   2799e:	4917      	ldr	r1, [pc, #92]	; (279fc <InitAes.part.0+0xf0>)
   279a0:	ea4f 0282 	mov.w	r2, r2, lsl #2
   279a4:	bf18      	it	ne
   279a6:	f003 0301 	andne.w	r3, r3, #1
   279aa:	f002 021c 	and.w	r2, r2, #28
   279ae:	4313      	orrs	r3, r2
   279b0:	600b      	str	r3, [r1, #0]
   279b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   279b4:	2b07      	cmp	r3, #7
   279b6:	d102      	bne.n	279be <InitAes.part.0+0xb2>
   279b8:	4b11      	ldr	r3, [pc, #68]	; (27a00 <InitAes.part.0+0xf4>)
   279ba:	2201      	movs	r2, #1
   279bc:	601a      	str	r2, [r3, #0]
   279be:	2000      	movs	r0, #0
   279c0:	bd10      	pop	{r4, pc}
   279c2:	2b01      	cmp	r3, #1
   279c4:	4b0a      	ldr	r3, [pc, #40]	; (279f0 <InitAes.part.0+0xe4>)
   279c6:	6818      	ldr	r0, [r3, #0]
   279c8:	bf0c      	ite	eq
   279ca:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   279ce:	f020 0010 	bicne.w	r0, r0, #16
   279d2:	f7fe fb05 	bl	25fe0 <CC_HalMaskInterrupt>
   279d6:	e7c7      	b.n	27968 <InitAes.part.0+0x5c>
   279d8:	5002b910 	.word	0x5002b910
   279dc:	5002b470 	.word	0x5002b470
   279e0:	5002bd20 	.word	0x5002bd20
   279e4:	5002bc20 	.word	0x5002bc20
   279e8:	5002bd38 	.word	0x5002bd38
   279ec:	5002bc38 	.word	0x5002bc38
   279f0:	5002ba04 	.word	0x5002ba04
   279f4:	5002b900 	.word	0x5002b900
   279f8:	5002b4bc 	.word	0x5002b4bc
   279fc:	5002b4c0 	.word	0x5002b4c0
   27a00:	5002b47c 	.word	0x5002b47c

00027a04 <ProcessAesDrv>:
   27a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a08:	b087      	sub	sp, #28
   27a0a:	2900      	cmp	r1, #0
   27a0c:	f000 80a5 	beq.w	27b5a <ProcessAesDrv+0x156>
   27a10:	4616      	mov	r6, r2
   27a12:	2a00      	cmp	r2, #0
   27a14:	f000 80a1 	beq.w	27b5a <ProcessAesDrv+0x156>
   27a18:	4604      	mov	r4, r0
   27a1a:	2800      	cmp	r0, #0
   27a1c:	f000 813f 	beq.w	27c9e <ProcessAesDrv+0x29a>
   27a20:	461f      	mov	r7, r3
   27a22:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27a24:	460d      	mov	r5, r1
   27a26:	2b00      	cmp	r3, #0
   27a28:	d150      	bne.n	27acc <ProcessAesDrv+0xc8>
   27a2a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   27a2e:	d252      	bcs.n	27ad6 <ProcessAesDrv+0xd2>
   27a30:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   27a34:	2b04      	cmp	r3, #4
   27a36:	f000 8109 	beq.w	27c4c <ProcessAesDrv+0x248>
   27a3a:	f04f 0800 	mov.w	r8, #0
   27a3e:	48aa      	ldr	r0, [pc, #680]	; (27ce8 <ProcessAesDrv+0x2e4>)
   27a40:	f04f 31ff 	mov.w	r1, #4294967295
   27a44:	f7fe fb66 	bl	26114 <CC_PalMutexLock>
   27a48:	2800      	cmp	r0, #0
   27a4a:	f040 80de 	bne.w	27c0a <ProcessAesDrv+0x206>
   27a4e:	2000      	movs	r0, #0
   27a50:	f7fe fb90 	bl	26174 <CC_PalPowerSaveModeSelect>
   27a54:	2800      	cmp	r0, #0
   27a56:	f040 80e1 	bne.w	27c1c <ProcessAesDrv+0x218>
   27a5a:	4ba4      	ldr	r3, [pc, #656]	; (27cec <ProcessAesDrv+0x2e8>)
   27a5c:	4aa4      	ldr	r2, [pc, #656]	; (27cf0 <ProcessAesDrv+0x2ec>)
   27a5e:	2101      	movs	r1, #1
   27a60:	6019      	str	r1, [r3, #0]
   27a62:	6813      	ldr	r3, [r2, #0]
   27a64:	2b00      	cmp	r3, #0
   27a66:	d1fc      	bne.n	27a62 <ProcessAesDrv+0x5e>
   27a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27a6a:	2b03      	cmp	r3, #3
   27a6c:	dc39      	bgt.n	27ae2 <ProcessAesDrv+0xde>
   27a6e:	2b00      	cmp	r3, #0
   27a70:	da3a      	bge.n	27ae8 <ProcessAesDrv+0xe4>
   27a72:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 27d3c <ProcessAesDrv+0x338>
   27a76:	4a9e      	ldr	r2, [pc, #632]	; (27cf0 <ProcessAesDrv+0x2ec>)
   27a78:	6813      	ldr	r3, [r2, #0]
   27a7a:	2b00      	cmp	r3, #0
   27a7c:	d1fc      	bne.n	27a78 <ProcessAesDrv+0x74>
   27a7e:	f1b8 0f00 	cmp.w	r8, #0
   27a82:	f040 80da 	bne.w	27c3a <ProcessAesDrv+0x236>
   27a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27a88:	f023 0304 	bic.w	r3, r3, #4
   27a8c:	2b03      	cmp	r3, #3
   27a8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27a90:	d058      	beq.n	27b44 <ProcessAesDrv+0x140>
   27a92:	2b01      	cmp	r3, #1
   27a94:	4b97      	ldr	r3, [pc, #604]	; (27cf4 <ProcessAesDrv+0x2f0>)
   27a96:	6818      	ldr	r0, [r3, #0]
   27a98:	bf0c      	ite	eq
   27a9a:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   27a9e:	f040 0020 	orrne.w	r0, r0, #32
   27aa2:	f7fe fa9d 	bl	25fe0 <CC_HalMaskInterrupt>
   27aa6:	4b91      	ldr	r3, [pc, #580]	; (27cec <ProcessAesDrv+0x2e8>)
   27aa8:	2200      	movs	r2, #0
   27aaa:	601a      	str	r2, [r3, #0]
   27aac:	2001      	movs	r0, #1
   27aae:	f7fe fb61 	bl	26174 <CC_PalPowerSaveModeSelect>
   27ab2:	2800      	cmp	r0, #0
   27ab4:	f040 80bd 	bne.w	27c32 <ProcessAesDrv+0x22e>
   27ab8:	488b      	ldr	r0, [pc, #556]	; (27ce8 <ProcessAesDrv+0x2e4>)
   27aba:	f7fe fb33 	bl	26124 <CC_PalMutexUnlock>
   27abe:	2800      	cmp	r0, #0
   27ac0:	f040 80b0 	bne.w	27c24 <ProcessAesDrv+0x220>
   27ac4:	4648      	mov	r0, r9
   27ac6:	b007      	add	sp, #28
   27ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27acc:	2b01      	cmp	r3, #1
   27ace:	d1af      	bne.n	27a30 <ProcessAesDrv+0x2c>
   27ad0:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   27ad4:	d3ac      	bcc.n	27a30 <ProcessAesDrv+0x2c>
   27ad6:	f8df 9268 	ldr.w	r9, [pc, #616]	; 27d40 <ProcessAesDrv+0x33c>
   27ada:	4648      	mov	r0, r9
   27adc:	b007      	add	sp, #28
   27ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ae2:	3b06      	subs	r3, #6
   27ae4:	2b01      	cmp	r3, #1
   27ae6:	d8c4      	bhi.n	27a72 <ProcessAesDrv+0x6e>
   27ae8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27aea:	2b01      	cmp	r3, #1
   27aec:	f200 80d4 	bhi.w	27c98 <ProcessAesDrv+0x294>
   27af0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27af2:	2b01      	cmp	r3, #1
   27af4:	d837      	bhi.n	27b66 <ProcessAesDrv+0x162>
   27af6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27af8:	2b01      	cmp	r3, #1
   27afa:	f200 8131 	bhi.w	27d60 <ProcessAesDrv+0x35c>
   27afe:	4620      	mov	r0, r4
   27b00:	f7ff ff04 	bl	2790c <InitAes.part.0>
   27b04:	4681      	mov	r9, r0
   27b06:	2800      	cmp	r0, #0
   27b08:	d1b5      	bne.n	27a76 <ProcessAesDrv+0x72>
   27b0a:	4620      	mov	r0, r4
   27b0c:	f7ff feb4 	bl	27878 <LoadAesKey>
   27b10:	4681      	mov	r9, r0
   27b12:	2800      	cmp	r0, #0
   27b14:	d1af      	bne.n	27a76 <ProcessAesDrv+0x72>
   27b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27b18:	2b07      	cmp	r3, #7
   27b1a:	d8aa      	bhi.n	27a72 <ProcessAesDrv+0x6e>
   27b1c:	a201      	add	r2, pc, #4	; (adr r2, 27b24 <ProcessAesDrv+0x120>)
   27b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27b22:	bf00      	nop
   27b24:	00027b81 	.word	0x00027b81
   27b28:	00027b6d 	.word	0x00027b6d
   27b2c:	00027cdd 	.word	0x00027cdd
   27b30:	00027b6d 	.word	0x00027b6d
   27b34:	00027a73 	.word	0x00027a73
   27b38:	00027a73 	.word	0x00027a73
   27b3c:	00027cdd 	.word	0x00027cdd
   27b40:	00027b6d 	.word	0x00027b6d
   27b44:	2b01      	cmp	r3, #1
   27b46:	4b6b      	ldr	r3, [pc, #428]	; (27cf4 <ProcessAesDrv+0x2f0>)
   27b48:	6818      	ldr	r0, [r3, #0]
   27b4a:	bf0c      	ite	eq
   27b4c:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   27b50:	f040 0010 	orrne.w	r0, r0, #16
   27b54:	f7fe fa44 	bl	25fe0 <CC_HalMaskInterrupt>
   27b58:	e7a5      	b.n	27aa6 <ProcessAesDrv+0xa2>
   27b5a:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 27d44 <ProcessAesDrv+0x340>
   27b5e:	4648      	mov	r0, r9
   27b60:	b007      	add	sp, #28
   27b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b66:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 27d48 <ProcessAesDrv+0x344>
   27b6a:	e784      	b.n	27a76 <ProcessAesDrv+0x72>
   27b6c:	4b62      	ldr	r3, [pc, #392]	; (27cf8 <ProcessAesDrv+0x2f4>)
   27b6e:	6822      	ldr	r2, [r4, #0]
   27b70:	601a      	str	r2, [r3, #0]
   27b72:	6862      	ldr	r2, [r4, #4]
   27b74:	605a      	str	r2, [r3, #4]
   27b76:	68a2      	ldr	r2, [r4, #8]
   27b78:	609a      	str	r2, [r3, #8]
   27b7a:	68e2      	ldr	r2, [r4, #12]
   27b7c:	60da      	str	r2, [r3, #12]
   27b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27b80:	682a      	ldr	r2, [r5, #0]
   27b82:	f023 0304 	bic.w	r3, r3, #4
   27b86:	2b03      	cmp	r3, #3
   27b88:	d009      	beq.n	27b9e <ProcessAesDrv+0x19a>
   27b8a:	6e21      	ldr	r1, [r4, #96]	; 0x60
   27b8c:	6833      	ldr	r3, [r6, #0]
   27b8e:	2901      	cmp	r1, #1
   27b90:	bf07      	ittee	eq
   27b92:	485a      	ldreq	r0, [pc, #360]	; (27cfc <ProcessAesDrv+0x2f8>)
   27b94:	495a      	ldreq	r1, [pc, #360]	; (27d00 <ProcessAesDrv+0x2fc>)
   27b96:	485b      	ldrne	r0, [pc, #364]	; (27d04 <ProcessAesDrv+0x300>)
   27b98:	495b      	ldrne	r1, [pc, #364]	; (27d08 <ProcessAesDrv+0x304>)
   27b9a:	6003      	str	r3, [r0, #0]
   27b9c:	600f      	str	r7, [r1, #0]
   27b9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27ba0:	2b01      	cmp	r3, #1
   27ba2:	bf0b      	itete	eq
   27ba4:	4b59      	ldreq	r3, [pc, #356]	; (27d0c <ProcessAesDrv+0x308>)
   27ba6:	4b5a      	ldrne	r3, [pc, #360]	; (27d10 <ProcessAesDrv+0x30c>)
   27ba8:	495a      	ldreq	r1, [pc, #360]	; (27d14 <ProcessAesDrv+0x310>)
   27baa:	495b      	ldrne	r1, [pc, #364]	; (27d18 <ProcessAesDrv+0x314>)
   27bac:	600a      	str	r2, [r1, #0]
   27bae:	601f      	str	r7, [r3, #0]
   27bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27bb2:	f023 0304 	bic.w	r3, r3, #4
   27bb6:	2b03      	cmp	r3, #3
   27bb8:	d074      	beq.n	27ca4 <ProcessAesDrv+0x2a0>
   27bba:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27bbc:	2b01      	cmp	r3, #1
   27bbe:	bf0c      	ite	eq
   27bc0:	2080      	moveq	r0, #128	; 0x80
   27bc2:	2020      	movne	r0, #32
   27bc4:	f7fe fa12 	bl	25fec <CC_HalWaitInterrupt>
   27bc8:	4681      	mov	r9, r0
   27bca:	2800      	cmp	r0, #0
   27bcc:	f47f af53 	bne.w	27a76 <ProcessAesDrv+0x72>
   27bd0:	4b47      	ldr	r3, [pc, #284]	; (27cf0 <ProcessAesDrv+0x2ec>)
   27bd2:	681a      	ldr	r2, [r3, #0]
   27bd4:	2a00      	cmp	r2, #0
   27bd6:	d1fc      	bne.n	27bd2 <ProcessAesDrv+0x1ce>
   27bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27bda:	3b01      	subs	r3, #1
   27bdc:	4691      	mov	r9, r2
   27bde:	2b06      	cmp	r3, #6
   27be0:	d810      	bhi.n	27c04 <ProcessAesDrv+0x200>
   27be2:	e8df f003 	tbb	[pc, r3]
   27be6:	7d04      	.short	0x7d04
   27be8:	7d0f0f04 	.word	0x7d0f0f04
   27bec:	04          	.byte	0x04
   27bed:	00          	.byte	0x00
   27bee:	4a42      	ldr	r2, [pc, #264]	; (27cf8 <ProcessAesDrv+0x2f4>)
   27bf0:	4b4a      	ldr	r3, [pc, #296]	; (27d1c <ProcessAesDrv+0x318>)
   27bf2:	6812      	ldr	r2, [r2, #0]
   27bf4:	6022      	str	r2, [r4, #0]
   27bf6:	681a      	ldr	r2, [r3, #0]
   27bf8:	6062      	str	r2, [r4, #4]
   27bfa:	685a      	ldr	r2, [r3, #4]
   27bfc:	60a2      	str	r2, [r4, #8]
   27bfe:	3308      	adds	r3, #8
   27c00:	681b      	ldr	r3, [r3, #0]
   27c02:	60e3      	str	r3, [r4, #12]
   27c04:	2301      	movs	r3, #1
   27c06:	65a3      	str	r3, [r4, #88]	; 0x58
   27c08:	e735      	b.n	27a76 <ProcessAesDrv+0x72>
   27c0a:	4845      	ldr	r0, [pc, #276]	; (27d20 <ProcessAesDrv+0x31c>)
   27c0c:	f7fd feec 	bl	259e8 <CC_PalAbort>
   27c10:	2000      	movs	r0, #0
   27c12:	f7fe faaf 	bl	26174 <CC_PalPowerSaveModeSelect>
   27c16:	2800      	cmp	r0, #0
   27c18:	f43f af1f 	beq.w	27a5a <ProcessAesDrv+0x56>
   27c1c:	4841      	ldr	r0, [pc, #260]	; (27d24 <ProcessAesDrv+0x320>)
   27c1e:	f7fd fee3 	bl	259e8 <CC_PalAbort>
   27c22:	e71a      	b.n	27a5a <ProcessAesDrv+0x56>
   27c24:	4840      	ldr	r0, [pc, #256]	; (27d28 <ProcessAesDrv+0x324>)
   27c26:	f7fd fedf 	bl	259e8 <CC_PalAbort>
   27c2a:	4648      	mov	r0, r9
   27c2c:	b007      	add	sp, #28
   27c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c32:	483e      	ldr	r0, [pc, #248]	; (27d2c <ProcessAesDrv+0x328>)
   27c34:	f7fd fed8 	bl	259e8 <CC_PalAbort>
   27c38:	e73e      	b.n	27ab8 <ProcessAesDrv+0xb4>
   27c3a:	2304      	movs	r3, #4
   27c3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   27c40:	2120      	movs	r1, #32
   27c42:	f104 0010 	add.w	r0, r4, #16
   27c46:	f7ff fb47 	bl	272d8 <CC_PalMemSetZeroPlat>
   27c4a:	e71c      	b.n	27a86 <ProcessAesDrv+0x82>
   27c4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   27c4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   27c50:	f000 f9c8 	bl	27fe4 <kmu_validate_slot_and_size>
   27c54:	b9e8      	cbnz	r0, 27c92 <ProcessAesDrv+0x28e>
   27c56:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 27d4c <ProcessAesDrv+0x348>
   27c5a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 27d50 <ProcessAesDrv+0x34c>
   27c5e:	f8d8 3000 	ldr.w	r3, [r8]
   27c62:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 27d54 <ProcessAesDrv+0x350>
   27c66:	681b      	ldr	r3, [r3, #0]
   27c68:	f8cb 3000 	str.w	r3, [fp]
   27c6c:	f8d8 3000 	ldr.w	r3, [r8]
   27c70:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 27d58 <ProcessAesDrv+0x354>
   27c74:	685b      	ldr	r3, [r3, #4]
   27c76:	f8ca 3000 	str.w	r3, [sl]
   27c7a:	f8d8 3000 	ldr.w	r3, [r8]
   27c7e:	4a2c      	ldr	r2, [pc, #176]	; (27d30 <ProcessAesDrv+0x32c>)
   27c80:	689b      	ldr	r3, [r3, #8]
   27c82:	f8c9 3000 	str.w	r3, [r9]
   27c86:	f8d8 3000 	ldr.w	r3, [r8]
   27c8a:	68db      	ldr	r3, [r3, #12]
   27c8c:	6013      	str	r3, [r2, #0]
   27c8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   27c90:	b171      	cbz	r1, 27cb0 <ProcessAesDrv+0x2ac>
   27c92:	f04f 0801 	mov.w	r8, #1
   27c96:	e6d2      	b.n	27a3e <ProcessAesDrv+0x3a>
   27c98:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 27d5c <ProcessAesDrv+0x358>
   27c9c:	e6eb      	b.n	27a76 <ProcessAesDrv+0x72>
   27c9e:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   27ca2:	e70f      	b.n	27ac4 <ProcessAesDrv+0xc0>
   27ca4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27ca6:	2b01      	cmp	r3, #1
   27ca8:	bf0c      	ite	eq
   27caa:	2040      	moveq	r0, #64	; 0x40
   27cac:	2010      	movne	r0, #16
   27cae:	e789      	b.n	27bc4 <ProcessAesDrv+0x1c0>
   27cb0:	f104 0310 	add.w	r3, r4, #16
   27cb4:	4618      	mov	r0, r3
   27cb6:	9305      	str	r3, [sp, #20]
   27cb8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   27cbc:	e9cd 3200 	strd	r3, r2, [sp]
   27cc0:	9002      	str	r0, [sp, #8]
   27cc2:	2010      	movs	r0, #16
   27cc4:	9003      	str	r0, [sp, #12]
   27cc6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   27cca:	6c20      	ldr	r0, [r4, #64]	; 0x40
   27ccc:	f000 f9ae 	bl	2802c <kmu_derive_cmac>
   27cd0:	2800      	cmp	r0, #0
   27cd2:	d148      	bne.n	27d66 <ProcessAesDrv+0x362>
   27cd4:	2300      	movs	r3, #0
   27cd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   27cda:	e7da      	b.n	27c92 <ProcessAesDrv+0x28e>
   27cdc:	4b15      	ldr	r3, [pc, #84]	; (27d34 <ProcessAesDrv+0x330>)
   27cde:	e746      	b.n	27b6e <ProcessAesDrv+0x16a>
   27ce0:	4a14      	ldr	r2, [pc, #80]	; (27d34 <ProcessAesDrv+0x330>)
   27ce2:	4b15      	ldr	r3, [pc, #84]	; (27d38 <ProcessAesDrv+0x334>)
   27ce4:	e785      	b.n	27bf2 <ProcessAesDrv+0x1ee>
   27ce6:	bf00      	nop
   27ce8:	20000720 	.word	0x20000720
   27cec:	5002b810 	.word	0x5002b810
   27cf0:	5002b910 	.word	0x5002b910
   27cf4:	5002ba04 	.word	0x5002ba04
   27cf8:	5002b440 	.word	0x5002b440
   27cfc:	5002bd28 	.word	0x5002bd28
   27d00:	5002bd2c 	.word	0x5002bd2c
   27d04:	5002bd30 	.word	0x5002bd30
   27d08:	5002bd34 	.word	0x5002bd34
   27d0c:	5002bc2c 	.word	0x5002bc2c
   27d10:	5002bc34 	.word	0x5002bc34
   27d14:	5002bc28 	.word	0x5002bc28
   27d18:	5002bc30 	.word	0x5002bc30
   27d1c:	5002b444 	.word	0x5002b444
   27d20:	00033440 	.word	0x00033440
   27d24:	00033458 	.word	0x00033458
   27d28:	00033498 	.word	0x00033498
   27d2c:	00033478 	.word	0x00033478
   27d30:	5002b40c 	.word	0x5002b40c
   27d34:	5002b460 	.word	0x5002b460
   27d38:	5002b464 	.word	0x5002b464
   27d3c:	00f10001 	.word	0x00f10001
   27d40:	00f10005 	.word	0x00f10005
   27d44:	00f1000b 	.word	0x00f1000b
   27d48:	00f10003 	.word	0x00f10003
   27d4c:	20000710 	.word	0x20000710
   27d50:	5002b400 	.word	0x5002b400
   27d54:	5002b404 	.word	0x5002b404
   27d58:	5002b408 	.word	0x5002b408
   27d5c:	00f10002 	.word	0x00f10002
   27d60:	f8df 9038 	ldr.w	r9, [pc, #56]	; 27d9c <ProcessAesDrv+0x398>
   27d64:	e687      	b.n	27a76 <ProcessAesDrv+0x72>
   27d66:	f8d8 3000 	ldr.w	r3, [r8]
   27d6a:	4a0b      	ldr	r2, [pc, #44]	; (27d98 <ProcessAesDrv+0x394>)
   27d6c:	681b      	ldr	r3, [r3, #0]
   27d6e:	f8cb 3000 	str.w	r3, [fp]
   27d72:	f8d8 3000 	ldr.w	r3, [r8]
   27d76:	685b      	ldr	r3, [r3, #4]
   27d78:	f8ca 3000 	str.w	r3, [sl]
   27d7c:	f8d8 3000 	ldr.w	r3, [r8]
   27d80:	689b      	ldr	r3, [r3, #8]
   27d82:	f8c9 3000 	str.w	r3, [r9]
   27d86:	f8d8 3000 	ldr.w	r3, [r8]
   27d8a:	68db      	ldr	r3, [r3, #12]
   27d8c:	6013      	str	r3, [r2, #0]
   27d8e:	9805      	ldr	r0, [sp, #20]
   27d90:	2110      	movs	r1, #16
   27d92:	f7ff faa1 	bl	272d8 <CC_PalMemSetZeroPlat>
   27d96:	e79d      	b.n	27cd4 <ProcessAesDrv+0x2d0>
   27d98:	5002b40c 	.word	0x5002b40c
   27d9c:	00f10004 	.word	0x00f10004

00027da0 <FinishAesDrv>:
   27da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27da4:	b301      	cbz	r1, 27de8 <FinishAesDrv+0x48>
   27da6:	b1fa      	cbz	r2, 27de8 <FinishAesDrv+0x48>
   27da8:	4604      	mov	r4, r0
   27daa:	2800      	cmp	r0, #0
   27dac:	d07a      	beq.n	27ea4 <FinishAesDrv+0x104>
   27dae:	461d      	mov	r5, r3
   27db0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   27db2:	2b07      	cmp	r3, #7
   27db4:	460e      	mov	r6, r1
   27db6:	d01b      	beq.n	27df0 <FinishAesDrv+0x50>
   27db8:	b95d      	cbnz	r5, 27dd2 <FinishAesDrv+0x32>
   27dba:	2b03      	cmp	r3, #3
   27dbc:	d110      	bne.n	27de0 <FinishAesDrv+0x40>
   27dbe:	6d83      	ldr	r3, [r0, #88]	; 0x58
   27dc0:	b973      	cbnz	r3, 27de0 <FinishAesDrv+0x40>
   27dc2:	f100 0364 	add.w	r3, r0, #100	; 0x64
   27dc6:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   27dca:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   27dce:	600b      	str	r3, [r1, #0]
   27dd0:	2510      	movs	r5, #16
   27dd2:	462b      	mov	r3, r5
   27dd4:	4631      	mov	r1, r6
   27dd6:	4620      	mov	r0, r4
   27dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27ddc:	f7ff be12 	b.w	27a04 <ProcessAesDrv>
   27de0:	462f      	mov	r7, r5
   27de2:	4638      	mov	r0, r7
   27de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27de8:	4f66      	ldr	r7, [pc, #408]	; (27f84 <FinishAesDrv+0x1e4>)
   27dea:	4638      	mov	r0, r7
   27dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27df0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27df2:	2b00      	cmp	r3, #0
   27df4:	d159      	bne.n	27eaa <FinishAesDrv+0x10a>
   27df6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   27dfa:	d25b      	bcs.n	27eb4 <FinishAesDrv+0x114>
   27dfc:	b915      	cbnz	r5, 27e04 <FinishAesDrv+0x64>
   27dfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27e00:	2b00      	cmp	r3, #0
   27e02:	d157      	bne.n	27eb4 <FinishAesDrv+0x114>
   27e04:	4860      	ldr	r0, [pc, #384]	; (27f88 <FinishAesDrv+0x1e8>)
   27e06:	f04f 31ff 	mov.w	r1, #4294967295
   27e0a:	f7fe f983 	bl	26114 <CC_PalMutexLock>
   27e0e:	2800      	cmp	r0, #0
   27e10:	f040 8097 	bne.w	27f42 <FinishAesDrv+0x1a2>
   27e14:	2000      	movs	r0, #0
   27e16:	f7fe f9ad 	bl	26174 <CC_PalPowerSaveModeSelect>
   27e1a:	2800      	cmp	r0, #0
   27e1c:	f040 808d 	bne.w	27f3a <FinishAesDrv+0x19a>
   27e20:	4b5a      	ldr	r3, [pc, #360]	; (27f8c <FinishAesDrv+0x1ec>)
   27e22:	4a5b      	ldr	r2, [pc, #364]	; (27f90 <FinishAesDrv+0x1f0>)
   27e24:	2101      	movs	r1, #1
   27e26:	6019      	str	r1, [r3, #0]
   27e28:	6813      	ldr	r3, [r2, #0]
   27e2a:	2b00      	cmp	r3, #0
   27e2c:	d1fc      	bne.n	27e28 <FinishAesDrv+0x88>
   27e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27e30:	2b03      	cmp	r3, #3
   27e32:	dd20      	ble.n	27e76 <FinishAesDrv+0xd6>
   27e34:	3b06      	subs	r3, #6
   27e36:	2b01      	cmp	r3, #1
   27e38:	d81f      	bhi.n	27e7a <FinishAesDrv+0xda>
   27e3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27e3c:	2b01      	cmp	r3, #1
   27e3e:	d83b      	bhi.n	27eb8 <FinishAesDrv+0x118>
   27e40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27e42:	2b01      	cmp	r3, #1
   27e44:	f200 8085 	bhi.w	27f52 <FinishAesDrv+0x1b2>
   27e48:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27e4a:	2b01      	cmp	r3, #1
   27e4c:	f200 8083 	bhi.w	27f56 <FinishAesDrv+0x1b6>
   27e50:	4620      	mov	r0, r4
   27e52:	f7ff fd5b 	bl	2790c <InitAes.part.0>
   27e56:	4607      	mov	r7, r0
   27e58:	b980      	cbnz	r0, 27e7c <FinishAesDrv+0xdc>
   27e5a:	4620      	mov	r0, r4
   27e5c:	f7ff fd0c 	bl	27878 <LoadAesKey>
   27e60:	4607      	mov	r7, r0
   27e62:	b958      	cbnz	r0, 27e7c <FinishAesDrv+0xdc>
   27e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27e66:	2b07      	cmp	r3, #7
   27e68:	d807      	bhi.n	27e7a <FinishAesDrv+0xda>
   27e6a:	e8df f003 	tbb	[pc, r3]
   27e6e:	2730      	.short	0x2730
   27e70:	06062755 	.word	0x06062755
   27e74:	2755      	.short	0x2755
   27e76:	2b00      	cmp	r3, #0
   27e78:	dadf      	bge.n	27e3a <FinishAesDrv+0x9a>
   27e7a:	4f46      	ldr	r7, [pc, #280]	; (27f94 <FinishAesDrv+0x1f4>)
   27e7c:	4a44      	ldr	r2, [pc, #272]	; (27f90 <FinishAesDrv+0x1f0>)
   27e7e:	6813      	ldr	r3, [r2, #0]
   27e80:	2b00      	cmp	r3, #0
   27e82:	d1fc      	bne.n	27e7e <FinishAesDrv+0xde>
   27e84:	4a41      	ldr	r2, [pc, #260]	; (27f8c <FinishAesDrv+0x1ec>)
   27e86:	2001      	movs	r0, #1
   27e88:	6013      	str	r3, [r2, #0]
   27e8a:	f7fe f973 	bl	26174 <CC_PalPowerSaveModeSelect>
   27e8e:	2800      	cmp	r0, #0
   27e90:	d15b      	bne.n	27f4a <FinishAesDrv+0x1aa>
   27e92:	483d      	ldr	r0, [pc, #244]	; (27f88 <FinishAesDrv+0x1e8>)
   27e94:	f7fe f946 	bl	26124 <CC_PalMutexUnlock>
   27e98:	2800      	cmp	r0, #0
   27e9a:	d0a2      	beq.n	27de2 <FinishAesDrv+0x42>
   27e9c:	483e      	ldr	r0, [pc, #248]	; (27f98 <FinishAesDrv+0x1f8>)
   27e9e:	f7fd fda3 	bl	259e8 <CC_PalAbort>
   27ea2:	e79e      	b.n	27de2 <FinishAesDrv+0x42>
   27ea4:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   27ea8:	e79b      	b.n	27de2 <FinishAesDrv+0x42>
   27eaa:	2b01      	cmp	r3, #1
   27eac:	d1a6      	bne.n	27dfc <FinishAesDrv+0x5c>
   27eae:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   27eb2:	d3a3      	bcc.n	27dfc <FinishAesDrv+0x5c>
   27eb4:	4f39      	ldr	r7, [pc, #228]	; (27f9c <FinishAesDrv+0x1fc>)
   27eb6:	e794      	b.n	27de2 <FinishAesDrv+0x42>
   27eb8:	4f39      	ldr	r7, [pc, #228]	; (27fa0 <FinishAesDrv+0x200>)
   27eba:	e7df      	b.n	27e7c <FinishAesDrv+0xdc>
   27ebc:	4b39      	ldr	r3, [pc, #228]	; (27fa4 <FinishAesDrv+0x204>)
   27ebe:	6822      	ldr	r2, [r4, #0]
   27ec0:	601a      	str	r2, [r3, #0]
   27ec2:	6862      	ldr	r2, [r4, #4]
   27ec4:	605a      	str	r2, [r3, #4]
   27ec6:	68a2      	ldr	r2, [r4, #8]
   27ec8:	609a      	str	r2, [r3, #8]
   27eca:	68e2      	ldr	r2, [r4, #12]
   27ecc:	60da      	str	r2, [r3, #12]
   27ece:	4936      	ldr	r1, [pc, #216]	; (27fa8 <FinishAesDrv+0x208>)
   27ed0:	4a36      	ldr	r2, [pc, #216]	; (27fac <FinishAesDrv+0x20c>)
   27ed2:	2301      	movs	r3, #1
   27ed4:	600b      	str	r3, [r1, #0]
   27ed6:	6015      	str	r5, [r2, #0]
   27ed8:	2d00      	cmp	r5, #0
   27eda:	d13e      	bne.n	27f5a <FinishAesDrv+0x1ba>
   27edc:	6da2      	ldr	r2, [r4, #88]	; 0x58
   27ede:	b90a      	cbnz	r2, 27ee4 <FinishAesDrv+0x144>
   27ee0:	4a33      	ldr	r2, [pc, #204]	; (27fb0 <FinishAesDrv+0x210>)
   27ee2:	6013      	str	r3, [r2, #0]
   27ee4:	4b2a      	ldr	r3, [pc, #168]	; (27f90 <FinishAesDrv+0x1f0>)
   27ee6:	681f      	ldr	r7, [r3, #0]
   27ee8:	2f00      	cmp	r7, #0
   27eea:	d1fc      	bne.n	27ee6 <FinishAesDrv+0x146>
   27eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27eee:	3b01      	subs	r3, #1
   27ef0:	2b06      	cmp	r3, #6
   27ef2:	d8c3      	bhi.n	27e7c <FinishAesDrv+0xdc>
   27ef4:	a201      	add	r2, pc, #4	; (adr r2, 27efc <FinishAesDrv+0x15c>)
   27ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27efa:	bf00      	nop
   27efc:	00027f1d 	.word	0x00027f1d
   27f00:	00027f35 	.word	0x00027f35
   27f04:	00027f1d 	.word	0x00027f1d
   27f08:	00027e7d 	.word	0x00027e7d
   27f0c:	00027e7d 	.word	0x00027e7d
   27f10:	00027f35 	.word	0x00027f35
   27f14:	00027f1d 	.word	0x00027f1d
   27f18:	4b26      	ldr	r3, [pc, #152]	; (27fb4 <FinishAesDrv+0x214>)
   27f1a:	e7d0      	b.n	27ebe <FinishAesDrv+0x11e>
   27f1c:	4a21      	ldr	r2, [pc, #132]	; (27fa4 <FinishAesDrv+0x204>)
   27f1e:	4b26      	ldr	r3, [pc, #152]	; (27fb8 <FinishAesDrv+0x218>)
   27f20:	6812      	ldr	r2, [r2, #0]
   27f22:	6022      	str	r2, [r4, #0]
   27f24:	681a      	ldr	r2, [r3, #0]
   27f26:	6062      	str	r2, [r4, #4]
   27f28:	685a      	ldr	r2, [r3, #4]
   27f2a:	60a2      	str	r2, [r4, #8]
   27f2c:	3308      	adds	r3, #8
   27f2e:	681b      	ldr	r3, [r3, #0]
   27f30:	60e3      	str	r3, [r4, #12]
   27f32:	e7a3      	b.n	27e7c <FinishAesDrv+0xdc>
   27f34:	4a1f      	ldr	r2, [pc, #124]	; (27fb4 <FinishAesDrv+0x214>)
   27f36:	4b21      	ldr	r3, [pc, #132]	; (27fbc <FinishAesDrv+0x21c>)
   27f38:	e7f2      	b.n	27f20 <FinishAesDrv+0x180>
   27f3a:	4821      	ldr	r0, [pc, #132]	; (27fc0 <FinishAesDrv+0x220>)
   27f3c:	f7fd fd54 	bl	259e8 <CC_PalAbort>
   27f40:	e76e      	b.n	27e20 <FinishAesDrv+0x80>
   27f42:	4820      	ldr	r0, [pc, #128]	; (27fc4 <FinishAesDrv+0x224>)
   27f44:	f7fd fd50 	bl	259e8 <CC_PalAbort>
   27f48:	e764      	b.n	27e14 <FinishAesDrv+0x74>
   27f4a:	481f      	ldr	r0, [pc, #124]	; (27fc8 <FinishAesDrv+0x228>)
   27f4c:	f7fd fd4c 	bl	259e8 <CC_PalAbort>
   27f50:	e79f      	b.n	27e92 <FinishAesDrv+0xf2>
   27f52:	4f1e      	ldr	r7, [pc, #120]	; (27fcc <FinishAesDrv+0x22c>)
   27f54:	e792      	b.n	27e7c <FinishAesDrv+0xdc>
   27f56:	4f1e      	ldr	r7, [pc, #120]	; (27fd0 <FinishAesDrv+0x230>)
   27f58:	e790      	b.n	27e7c <FinishAesDrv+0xdc>
   27f5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   27f5c:	6833      	ldr	r3, [r6, #0]
   27f5e:	2a01      	cmp	r2, #1
   27f60:	d00a      	beq.n	27f78 <FinishAesDrv+0x1d8>
   27f62:	491c      	ldr	r1, [pc, #112]	; (27fd4 <FinishAesDrv+0x234>)
   27f64:	4a1c      	ldr	r2, [pc, #112]	; (27fd8 <FinishAesDrv+0x238>)
   27f66:	600b      	str	r3, [r1, #0]
   27f68:	2010      	movs	r0, #16
   27f6a:	6015      	str	r5, [r2, #0]
   27f6c:	f7fe f83e 	bl	25fec <CC_HalWaitInterrupt>
   27f70:	4607      	mov	r7, r0
   27f72:	2800      	cmp	r0, #0
   27f74:	d0b6      	beq.n	27ee4 <FinishAesDrv+0x144>
   27f76:	e781      	b.n	27e7c <FinishAesDrv+0xdc>
   27f78:	4918      	ldr	r1, [pc, #96]	; (27fdc <FinishAesDrv+0x23c>)
   27f7a:	4a19      	ldr	r2, [pc, #100]	; (27fe0 <FinishAesDrv+0x240>)
   27f7c:	600b      	str	r3, [r1, #0]
   27f7e:	2040      	movs	r0, #64	; 0x40
   27f80:	6015      	str	r5, [r2, #0]
   27f82:	e7f3      	b.n	27f6c <FinishAesDrv+0x1cc>
   27f84:	00f1000b 	.word	0x00f1000b
   27f88:	20000720 	.word	0x20000720
   27f8c:	5002b810 	.word	0x5002b810
   27f90:	5002b910 	.word	0x5002b910
   27f94:	00f10001 	.word	0x00f10001
   27f98:	00033498 	.word	0x00033498
   27f9c:	00f10005 	.word	0x00f10005
   27fa0:	00f10002 	.word	0x00f10002
   27fa4:	5002b440 	.word	0x5002b440
   27fa8:	5002b47c 	.word	0x5002b47c
   27fac:	5002b4bc 	.word	0x5002b4bc
   27fb0:	5002b524 	.word	0x5002b524
   27fb4:	5002b460 	.word	0x5002b460
   27fb8:	5002b444 	.word	0x5002b444
   27fbc:	5002b464 	.word	0x5002b464
   27fc0:	00033458 	.word	0x00033458
   27fc4:	00033440 	.word	0x00033440
   27fc8:	00033478 	.word	0x00033478
   27fcc:	00f10003 	.word	0x00f10003
   27fd0:	00f10004 	.word	0x00f10004
   27fd4:	5002bc30 	.word	0x5002bc30
   27fd8:	5002bc34 	.word	0x5002bc34
   27fdc:	5002bc28 	.word	0x5002bc28
   27fe0:	5002bc2c 	.word	0x5002bc2c

00027fe4 <kmu_validate_slot_and_size>:
   27fe4:	b921      	cbnz	r1, 27ff0 <kmu_validate_slot_and_size+0xc>
   27fe6:	4b03      	ldr	r3, [pc, #12]	; (27ff4 <kmu_validate_slot_and_size+0x10>)
   27fe8:	2800      	cmp	r0, #0
   27fea:	bf18      	it	ne
   27fec:	4618      	movne	r0, r3
   27fee:	4770      	bx	lr
   27ff0:	4801      	ldr	r0, [pc, #4]	; (27ff8 <kmu_validate_slot_and_size+0x14>)
   27ff2:	4770      	bx	lr
   27ff4:	00f70001 	.word	0x00f70001
   27ff8:	00f70003 	.word	0x00f70003

00027ffc <kmu_validate_kdr_slot_and_size>:
   27ffc:	b921      	cbnz	r1, 28008 <kmu_validate_kdr_slot_and_size+0xc>
   27ffe:	4b03      	ldr	r3, [pc, #12]	; (2800c <kmu_validate_kdr_slot_and_size+0x10>)
   28000:	2800      	cmp	r0, #0
   28002:	bf18      	it	ne
   28004:	4618      	movne	r0, r3
   28006:	4770      	bx	lr
   28008:	4801      	ldr	r0, [pc, #4]	; (28010 <kmu_validate_kdr_slot_and_size+0x14>)
   2800a:	4770      	bx	lr
   2800c:	00f70001 	.word	0x00f70001
   28010:	00f70003 	.word	0x00f70003

00028014 <kmu_use_kdr_key>:
   28014:	4903      	ldr	r1, [pc, #12]	; (28024 <kmu_use_kdr_key+0x10>)
   28016:	4b04      	ldr	r3, [pc, #16]	; (28028 <kmu_use_kdr_key+0x14>)
   28018:	2000      	movs	r0, #0
   2801a:	2201      	movs	r2, #1
   2801c:	6008      	str	r0, [r1, #0]
   2801e:	601a      	str	r2, [r3, #0]
   28020:	4770      	bx	lr
   28022:	bf00      	nop
   28024:	5002ba38 	.word	0x5002ba38
   28028:	5002b478 	.word	0x5002b478

0002802c <kmu_derive_cmac>:
   2802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28030:	b0cd      	sub	sp, #308	; 0x134
   28032:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   28036:	460f      	mov	r7, r1
   28038:	2100      	movs	r1, #0
   2803a:	460c      	mov	r4, r1
   2803c:	4681      	mov	r9, r0
   2803e:	4616      	mov	r6, r2
   28040:	a80e      	add	r0, sp, #56	; 0x38
   28042:	2274      	movs	r2, #116	; 0x74
   28044:	469b      	mov	fp, r3
   28046:	f002 fc4e 	bl	2a8e6 <memset>
   2804a:	4621      	mov	r1, r4
   2804c:	2280      	movs	r2, #128	; 0x80
   2804e:	a82c      	add	r0, sp, #176	; 0xb0
   28050:	942b      	str	r4, [sp, #172]	; 0xac
   28052:	f002 fc48 	bl	2a8e6 <memset>
   28056:	2384      	movs	r3, #132	; 0x84
   28058:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2805c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   28060:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   28064:	9305      	str	r3, [sp, #20]
   28066:	d860      	bhi.n	2812a <kmu_derive_cmac+0xfe>
   28068:	ab05      	add	r3, sp, #20
   2806a:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   2806e:	9301      	str	r3, [sp, #4]
   28070:	9502      	str	r5, [sp, #8]
   28072:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   28076:	4659      	mov	r1, fp
   28078:	4630      	mov	r0, r6
   2807a:	f8cd a000 	str.w	sl, [sp]
   2807e:	f000 f865 	bl	2814c <UtilCmacBuildDataForDerivation>
   28082:	2800      	cmp	r0, #0
   28084:	d14c      	bne.n	28120 <kmu_derive_cmac+0xf4>
   28086:	2303      	movs	r3, #3
   28088:	f88d 3013 	strb.w	r3, [sp, #19]
   2808c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   28090:	901c      	str	r0, [sp, #112]	; 0x70
   28092:	2200      	movs	r2, #0
   28094:	2110      	movs	r1, #16
   28096:	a80e      	add	r0, sp, #56	; 0x38
   28098:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2809c:	2607      	movs	r6, #7
   2809e:	2301      	movs	r3, #1
   280a0:	2401      	movs	r4, #1
   280a2:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   280a6:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   280aa:	971a      	str	r7, [sp, #104]	; 0x68
   280ac:	961b      	str	r6, [sp, #108]	; 0x6c
   280ae:	9426      	str	r4, [sp, #152]	; 0x98
   280b0:	f10d 0920 	add.w	r9, sp, #32
   280b4:	f7ff f910 	bl	272d8 <CC_PalMemSetZeroPlat>
   280b8:	2110      	movs	r1, #16
   280ba:	e9cd 1900 	strd	r1, r9, [sp]
   280be:	ab0a      	add	r3, sp, #40	; 0x28
   280c0:	9905      	ldr	r1, [sp, #20]
   280c2:	4650      	mov	r0, sl
   280c4:	aa06      	add	r2, sp, #24
   280c6:	f7ff f9ab 	bl	27420 <SetDataBuffersInfo>
   280ca:	4607      	mov	r7, r0
   280cc:	b150      	cbz	r0, 280e4 <kmu_derive_cmac+0xb8>
   280ce:	e01e      	b.n	2810e <kmu_derive_cmac+0xe2>
   280d0:	f7ff f8fe 	bl	272d0 <CC_PalMemCopyPlat>
   280d4:	2110      	movs	r1, #16
   280d6:	a80e      	add	r0, sp, #56	; 0x38
   280d8:	f7ff f8fe 	bl	272d8 <CC_PalMemSetZeroPlat>
   280dc:	3401      	adds	r4, #1
   280de:	1bad      	subs	r5, r5, r6
   280e0:	b2e4      	uxtb	r4, r4
   280e2:	d027      	beq.n	28134 <kmu_derive_cmac+0x108>
   280e4:	9b05      	ldr	r3, [sp, #20]
   280e6:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   280ea:	2d10      	cmp	r5, #16
   280ec:	464a      	mov	r2, r9
   280ee:	a906      	add	r1, sp, #24
   280f0:	a80e      	add	r0, sp, #56	; 0x38
   280f2:	462e      	mov	r6, r5
   280f4:	bf28      	it	cs
   280f6:	2610      	movcs	r6, #16
   280f8:	f7ff fe52 	bl	27da0 <FinishAesDrv>
   280fc:	4603      	mov	r3, r0
   280fe:	4632      	mov	r2, r6
   28100:	eb08 0007 	add.w	r0, r8, r7
   28104:	a90e      	add	r1, sp, #56	; 0x38
   28106:	4437      	add	r7, r6
   28108:	2b00      	cmp	r3, #0
   2810a:	d0e1      	beq.n	280d0 <kmu_derive_cmac+0xa4>
   2810c:	461f      	mov	r7, r3
   2810e:	a80e      	add	r0, sp, #56	; 0x38
   28110:	2274      	movs	r2, #116	; 0x74
   28112:	2100      	movs	r1, #0
   28114:	f7ff f8de 	bl	272d4 <CC_PalMemSetPlat>
   28118:	4638      	mov	r0, r7
   2811a:	b04d      	add	sp, #308	; 0x134
   2811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28120:	4f08      	ldr	r7, [pc, #32]	; (28144 <kmu_derive_cmac+0x118>)
   28122:	4638      	mov	r0, r7
   28124:	b04d      	add	sp, #308	; 0x134
   28126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2812a:	4f07      	ldr	r7, [pc, #28]	; (28148 <kmu_derive_cmac+0x11c>)
   2812c:	4638      	mov	r0, r7
   2812e:	b04d      	add	sp, #308	; 0x134
   28130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28134:	a80e      	add	r0, sp, #56	; 0x38
   28136:	2274      	movs	r2, #116	; 0x74
   28138:	2100      	movs	r1, #0
   2813a:	462f      	mov	r7, r5
   2813c:	f7ff f8ca 	bl	272d4 <CC_PalMemSetPlat>
   28140:	e7ea      	b.n	28118 <kmu_derive_cmac+0xec>
   28142:	bf00      	nop
   28144:	00f1000e 	.word	0x00f1000e
   28148:	00f1000f 	.word	0x00f1000f

0002814c <UtilCmacBuildDataForDerivation>:
   2814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28150:	b082      	sub	sp, #8
   28152:	2600      	movs	r6, #0
   28154:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   28156:	9601      	str	r6, [sp, #4]
   28158:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2815c:	d83c      	bhi.n	281d8 <UtilCmacBuildDataForDerivation+0x8c>
   2815e:	00ee      	lsls	r6, r5, #3
   28160:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   28164:	f101 35ff 	add.w	r5, r1, #4294967295
   28168:	461f      	mov	r7, r3
   2816a:	bf34      	ite	cc
   2816c:	2303      	movcc	r3, #3
   2816e:	2304      	movcs	r3, #4
   28170:	2d3f      	cmp	r5, #63	; 0x3f
   28172:	460c      	mov	r4, r1
   28174:	9300      	str	r3, [sp, #0]
   28176:	d82f      	bhi.n	281d8 <UtilCmacBuildDataForDerivation+0x8c>
   28178:	b370      	cbz	r0, 281d8 <UtilCmacBuildDataForDerivation+0x8c>
   2817a:	4690      	mov	r8, r2
   2817c:	b117      	cbz	r7, 28184 <UtilCmacBuildDataForDerivation+0x38>
   2817e:	b35a      	cbz	r2, 281d8 <UtilCmacBuildDataForDerivation+0x8c>
   28180:	2f40      	cmp	r7, #64	; 0x40
   28182:	d829      	bhi.n	281d8 <UtilCmacBuildDataForDerivation+0x8c>
   28184:	9a08      	ldr	r2, [sp, #32]
   28186:	b33a      	cbz	r2, 281d8 <UtilCmacBuildDataForDerivation+0x8c>
   28188:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2818a:	6811      	ldr	r1, [r2, #0]
   2818c:	b321      	cbz	r1, 281d8 <UtilCmacBuildDataForDerivation+0x8c>
   2818e:	19e2      	adds	r2, r4, r7
   28190:	4413      	add	r3, r2
   28192:	4299      	cmp	r1, r3
   28194:	d320      	bcc.n	281d8 <UtilCmacBuildDataForDerivation+0x8c>
   28196:	9b08      	ldr	r3, [sp, #32]
   28198:	4622      	mov	r2, r4
   2819a:	4601      	mov	r1, r0
   2819c:	1c58      	adds	r0, r3, #1
   2819e:	f7ff f897 	bl	272d0 <CC_PalMemCopyPlat>
   281a2:	9b08      	ldr	r3, [sp, #32]
   281a4:	4423      	add	r3, r4
   281a6:	2200      	movs	r2, #0
   281a8:	3402      	adds	r4, #2
   281aa:	705a      	strb	r2, [r3, #1]
   281ac:	bb07      	cbnz	r7, 281f0 <UtilCmacBuildDataForDerivation+0xa4>
   281ae:	2eff      	cmp	r6, #255	; 0xff
   281b0:	9600      	str	r6, [sp, #0]
   281b2:	d915      	bls.n	281e0 <UtilCmacBuildDataForDerivation+0x94>
   281b4:	9b08      	ldr	r3, [sp, #32]
   281b6:	0235      	lsls	r5, r6, #8
   281b8:	b2ad      	uxth	r5, r5
   281ba:	1918      	adds	r0, r3, r4
   281bc:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   281c0:	2202      	movs	r2, #2
   281c2:	a901      	add	r1, sp, #4
   281c4:	9501      	str	r5, [sp, #4]
   281c6:	f7ff f883 	bl	272d0 <CC_PalMemCopyPlat>
   281ca:	3402      	adds	r4, #2
   281cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   281ce:	2000      	movs	r0, #0
   281d0:	601c      	str	r4, [r3, #0]
   281d2:	b002      	add	sp, #8
   281d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281d8:	4809      	ldr	r0, [pc, #36]	; (28200 <UtilCmacBuildDataForDerivation+0xb4>)
   281da:	b002      	add	sp, #8
   281dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281e0:	9b08      	ldr	r3, [sp, #32]
   281e2:	2201      	movs	r2, #1
   281e4:	1918      	adds	r0, r3, r4
   281e6:	4669      	mov	r1, sp
   281e8:	f7ff f872 	bl	272d0 <CC_PalMemCopyPlat>
   281ec:	3401      	adds	r4, #1
   281ee:	e7ed      	b.n	281cc <UtilCmacBuildDataForDerivation+0x80>
   281f0:	9b08      	ldr	r3, [sp, #32]
   281f2:	4641      	mov	r1, r8
   281f4:	1918      	adds	r0, r3, r4
   281f6:	463a      	mov	r2, r7
   281f8:	f7ff f86a 	bl	272d0 <CC_PalMemCopyPlat>
   281fc:	443c      	add	r4, r7
   281fe:	e7d6      	b.n	281ae <UtilCmacBuildDataForDerivation+0x62>
   28200:	80000006 	.word	0x80000006

00028204 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   28204:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   28208:	b2db      	uxtb	r3, r3
   2820a:	2b09      	cmp	r3, #9
   2820c:	d802      	bhi.n	28214 <char2hex+0x10>
		*x = c - '0';
   2820e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   28210:	2000      	movs	r0, #0
   28212:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   28214:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   28218:	b2db      	uxtb	r3, r3
   2821a:	2b05      	cmp	r3, #5
   2821c:	d803      	bhi.n	28226 <char2hex+0x22>
		*x = c - 'a' + 10;
   2821e:	3857      	subs	r0, #87	; 0x57
   28220:	7008      	strb	r0, [r1, #0]
	return 0;
   28222:	2000      	movs	r0, #0
   28224:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   28226:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2822a:	b2db      	uxtb	r3, r3
   2822c:	2b05      	cmp	r3, #5
   2822e:	d803      	bhi.n	28238 <char2hex+0x34>
		*x = c - 'A' + 10;
   28230:	3837      	subs	r0, #55	; 0x37
   28232:	7008      	strb	r0, [r1, #0]
	return 0;
   28234:	2000      	movs	r0, #0
   28236:	4770      	bx	lr
		return -EINVAL;
   28238:	f06f 0015 	mvn.w	r0, #21
}
   2823c:	4770      	bx	lr

0002823e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2823e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28242:	b083      	sub	sp, #12
   28244:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   28246:	f001 0201 	and.w	r2, r1, #1
   2824a:	eb02 0851 	add.w	r8, r2, r1, lsr #1
   2824e:	4598      	cmp	r8, r3
   28250:	d832      	bhi.n	282b8 <hex2bin+0x7a>
   28252:	4607      	mov	r7, r0
   28254:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
   28258:	b90a      	cbnz	r2, 2825e <hex2bin+0x20>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
   2825a:	2400      	movs	r4, #0
   2825c:	e012      	b.n	28284 <hex2bin+0x46>
		if (char2hex(hex[0], &dec) < 0) {
   2825e:	f10d 0107 	add.w	r1, sp, #7
   28262:	7800      	ldrb	r0, [r0, #0]
   28264:	f7ff ffce 	bl	28204 <char2hex>
   28268:	2800      	cmp	r0, #0
   2826a:	db2b      	blt.n	282c4 <hex2bin+0x86>
		buf[0] = dec;
   2826c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28270:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
   28274:	3701      	adds	r7, #1
		buf++;
   28276:	e7f0      	b.n	2825a <hex2bin+0x1c>
		buf[i] = dec << 4;

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
			return 0;
		}
		buf[i] += dec;
   28278:	5d33      	ldrb	r3, [r6, r4]
   2827a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2827e:	4413      	add	r3, r2
   28280:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
   28282:	3401      	adds	r4, #1
   28284:	45a1      	cmp	r9, r4
   28286:	d919      	bls.n	282bc <hex2bin+0x7e>
		if (char2hex(hex[2 * i], &dec) < 0) {
   28288:	0065      	lsls	r5, r4, #1
   2828a:	f10d 0107 	add.w	r1, sp, #7
   2828e:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   28292:	f7ff ffb7 	bl	28204 <char2hex>
   28296:	2800      	cmp	r0, #0
   28298:	db17      	blt.n	282ca <hex2bin+0x8c>
		buf[i] = dec << 4;
   2829a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2829e:	011b      	lsls	r3, r3, #4
   282a0:	5533      	strb	r3, [r6, r4]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   282a2:	3501      	adds	r5, #1
   282a4:	f10d 0107 	add.w	r1, sp, #7
   282a8:	5d78      	ldrb	r0, [r7, r5]
   282aa:	f7ff ffab 	bl	28204 <char2hex>
   282ae:	2800      	cmp	r0, #0
   282b0:	dae2      	bge.n	28278 <hex2bin+0x3a>
			return 0;
   282b2:	f04f 0800 	mov.w	r8, #0
   282b6:	e001      	b.n	282bc <hex2bin+0x7e>
		return 0;
   282b8:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
   282bc:	4640      	mov	r0, r8
   282be:	b003      	add	sp, #12
   282c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
   282c4:	f04f 0800 	mov.w	r8, #0
   282c8:	e7f8      	b.n	282bc <hex2bin+0x7e>
			return 0;
   282ca:	f04f 0800 	mov.w	r8, #0
   282ce:	e7f5      	b.n	282bc <hex2bin+0x7e>

000282d0 <sys_notify_validate>:
	if (notify == NULL) {
   282d0:	4602      	mov	r2, r0
   282d2:	b1b0      	cbz	r0, 28302 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   282d4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   282d6:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   282da:	2b02      	cmp	r3, #2
   282dc:	d00b      	beq.n	282f6 <sys_notify_validate+0x26>
   282de:	2b03      	cmp	r3, #3
   282e0:	d004      	beq.n	282ec <sys_notify_validate+0x1c>
   282e2:	2b01      	cmp	r3, #1
   282e4:	d004      	beq.n	282f0 <sys_notify_validate+0x20>
   282e6:	f06f 0015 	mvn.w	r0, #21
   282ea:	4770      	bx	lr
		if (notify->method.callback == NULL) {
   282ec:	6803      	ldr	r3, [r0, #0]
   282ee:	b15b      	cbz	r3, 28308 <sys_notify_validate+0x38>
		notify->result = 0;
   282f0:	2000      	movs	r0, #0
   282f2:	6090      	str	r0, [r2, #8]
   282f4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   282f6:	6803      	ldr	r3, [r0, #0]
   282f8:	2b00      	cmp	r3, #0
   282fa:	d1f9      	bne.n	282f0 <sys_notify_validate+0x20>
			rv = -EINVAL;
   282fc:	f06f 0015 	mvn.w	r0, #21
}
   28300:	4770      	bx	lr
		return -EINVAL;
   28302:	f06f 0015 	mvn.w	r0, #21
   28306:	4770      	bx	lr
			rv = -EINVAL;
   28308:	f06f 0015 	mvn.w	r0, #21
   2830c:	4770      	bx	lr

0002830e <arch_printk_char_out>:
}
   2830e:	2000      	movs	r0, #0
   28310:	4770      	bx	lr

00028312 <str_out>:
{
   28312:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   28314:	680c      	ldr	r4, [r1, #0]
   28316:	b154      	cbz	r4, 2832e <str_out+0x1c>
   28318:	688a      	ldr	r2, [r1, #8]
   2831a:	684b      	ldr	r3, [r1, #4]
   2831c:	429a      	cmp	r2, r3
   2831e:	da06      	bge.n	2832e <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   28320:	3b01      	subs	r3, #1
   28322:	429a      	cmp	r2, r3
   28324:	d008      	beq.n	28338 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   28326:	1c53      	adds	r3, r2, #1
   28328:	608b      	str	r3, [r1, #8]
   2832a:	54a0      	strb	r0, [r4, r2]
   2832c:	e002      	b.n	28334 <str_out+0x22>
		ctx->count++;
   2832e:	688b      	ldr	r3, [r1, #8]
   28330:	3301      	adds	r3, #1
   28332:	608b      	str	r3, [r1, #8]
}
   28334:	bc10      	pop	{r4}
   28336:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   28338:	1c53      	adds	r3, r2, #1
   2833a:	608b      	str	r3, [r1, #8]
   2833c:	2300      	movs	r3, #0
   2833e:	54a3      	strb	r3, [r4, r2]
   28340:	e7f8      	b.n	28334 <str_out+0x22>

00028342 <printk>:
{
   28342:	b40f      	push	{r0, r1, r2, r3}
   28344:	b500      	push	{lr}
   28346:	b083      	sub	sp, #12
   28348:	a904      	add	r1, sp, #16
   2834a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2834e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   28350:	f7e8 f81c 	bl	1038c <vprintk>
}
   28354:	b003      	add	sp, #12
   28356:	f85d eb04 	ldr.w	lr, [sp], #4
   2835a:	b004      	add	sp, #16
   2835c:	4770      	bx	lr

0002835e <snprintk>:
{
   2835e:	b40c      	push	{r2, r3}
   28360:	b500      	push	{lr}
   28362:	b083      	sub	sp, #12
   28364:	ab04      	add	r3, sp, #16
   28366:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2836a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2836c:	f7e8 f81e 	bl	103ac <vsnprintk>
}
   28370:	b003      	add	sp, #12
   28372:	f85d eb04 	ldr.w	lr, [sp], #4
   28376:	b002      	add	sp, #8
   28378:	4770      	bx	lr

0002837a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   2837a:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2837e:	8b81      	ldrh	r1, [r0, #28]
   28380:	f021 0107 	bic.w	r1, r1, #7
   28384:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   28386:	8381      	strh	r1, [r0, #28]
}
   28388:	4770      	bx	lr

0002838a <notify_monitors>:
{
   2838a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2838e:	4606      	mov	r6, r0
   28390:	460f      	mov	r7, r1
   28392:	4690      	mov	r8, r2
	return list->head;
   28394:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   28396:	b119      	cbz	r1, 283a0 <notify_monitors+0x16>
   28398:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   2839a:	b131      	cbz	r1, 283aa <notify_monitors+0x20>
	return node->next;
   2839c:	680c      	ldr	r4, [r1, #0]
   2839e:	e004      	b.n	283aa <notify_monitors+0x20>
   283a0:	460c      	mov	r4, r1
   283a2:	e002      	b.n	283aa <notify_monitors+0x20>
   283a4:	4623      	mov	r3, r4
   283a6:	4621      	mov	r1, r4
   283a8:	461c      	mov	r4, r3
   283aa:	b159      	cbz	r1, 283c4 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   283ac:	684d      	ldr	r5, [r1, #4]
   283ae:	4643      	mov	r3, r8
   283b0:	463a      	mov	r2, r7
   283b2:	4630      	mov	r0, r6
   283b4:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   283b6:	2c00      	cmp	r4, #0
   283b8:	d0f4      	beq.n	283a4 <notify_monitors+0x1a>
   283ba:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   283bc:	2c00      	cmp	r4, #0
   283be:	d0f2      	beq.n	283a6 <notify_monitors+0x1c>
	return node->next;
   283c0:	6823      	ldr	r3, [r4, #0]
   283c2:	e7f0      	b.n	283a6 <notify_monitors+0x1c>
}
   283c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000283c8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   283c8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   283ca:	f013 0307 	ands.w	r3, r3, #7
   283ce:	d103      	bne.n	283d8 <process_recheck+0x10>
	return list->head;
   283d0:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   283d2:	b10a      	cbz	r2, 283d8 <process_recheck+0x10>
		evt = EVT_START;
   283d4:	2003      	movs	r0, #3
   283d6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   283d8:	2b02      	cmp	r3, #2
   283da:	d003      	beq.n	283e4 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   283dc:	2b01      	cmp	r3, #1
   283de:	d006      	beq.n	283ee <process_recheck+0x26>
	int evt = EVT_NOP;
   283e0:	2000      	movs	r0, #0
   283e2:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   283e4:	8bc2      	ldrh	r2, [r0, #30]
   283e6:	2a00      	cmp	r2, #0
   283e8:	d1f8      	bne.n	283dc <process_recheck+0x14>
		evt = EVT_STOP;
   283ea:	2004      	movs	r0, #4
   283ec:	4770      	bx	lr
   283ee:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   283f0:	b10b      	cbz	r3, 283f6 <process_recheck+0x2e>
		evt = EVT_RESET;
   283f2:	2005      	movs	r0, #5
}
   283f4:	4770      	bx	lr
	int evt = EVT_NOP;
   283f6:	2000      	movs	r0, #0
   283f8:	4770      	bx	lr

000283fa <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   283fa:	b158      	cbz	r0, 28414 <validate_args+0x1a>
{
   283fc:	b510      	push	{r4, lr}
   283fe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   28400:	b159      	cbz	r1, 2841a <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   28402:	1d08      	adds	r0, r1, #4
   28404:	f7ff ff64 	bl	282d0 <sys_notify_validate>
	if ((rv == 0)
   28408:	b918      	cbnz	r0, 28412 <validate_args+0x18>
	    && ((cli->notify.flags
   2840a:	68a3      	ldr	r3, [r4, #8]
   2840c:	f033 0303 	bics.w	r3, r3, #3
   28410:	d106      	bne.n	28420 <validate_args+0x26>
}
   28412:	bd10      	pop	{r4, pc}
		return -EINVAL;
   28414:	f06f 0015 	mvn.w	r0, #21
}
   28418:	4770      	bx	lr
		return -EINVAL;
   2841a:	f06f 0015 	mvn.w	r0, #21
   2841e:	e7f8      	b.n	28412 <validate_args+0x18>
		rv = -EINVAL;
   28420:	f06f 0015 	mvn.w	r0, #21
   28424:	e7f5      	b.n	28412 <validate_args+0x18>

00028426 <notify_one>:
{
   28426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2842a:	4607      	mov	r7, r0
   2842c:	460c      	mov	r4, r1
   2842e:	4616      	mov	r6, r2
   28430:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   28432:	4619      	mov	r1, r3
   28434:	1d20      	adds	r0, r4, #4
   28436:	f7e7 ff6b 	bl	10310 <sys_notify_finalize>
	if (cb) {
   2843a:	b128      	cbz	r0, 28448 <notify_one+0x22>
   2843c:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   2843e:	462b      	mov	r3, r5
   28440:	4632      	mov	r2, r6
   28442:	4621      	mov	r1, r4
   28444:	4638      	mov	r0, r7
   28446:	47c0      	blx	r8
}
   28448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002844c <notify_all>:
{
   2844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28450:	4681      	mov	r9, r0
   28452:	460c      	mov	r4, r1
   28454:	4690      	mov	r8, r2
   28456:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   28458:	e005      	b.n	28466 <notify_all+0x1a>
	list->tail = node;
   2845a:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   2845c:	463b      	mov	r3, r7
   2845e:	4642      	mov	r2, r8
   28460:	4648      	mov	r0, r9
   28462:	f7ff ffe0 	bl	28426 <notify_one>
	return list->head;
   28466:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   28468:	b129      	cbz	r1, 28476 <notify_all+0x2a>
	return node->next;
   2846a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   2846c:	6025      	str	r5, [r4, #0]
	return list->tail;
   2846e:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28470:	428e      	cmp	r6, r1
   28472:	d1f3      	bne.n	2845c <notify_all+0x10>
   28474:	e7f1      	b.n	2845a <notify_all+0xe>
}
   28476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002847a <onoff_manager_init>:
	if ((mgr == NULL)
   2847a:	b170      	cbz	r0, 2849a <onoff_manager_init+0x20>
{
   2847c:	b538      	push	{r3, r4, r5, lr}
   2847e:	460c      	mov	r4, r1
   28480:	4605      	mov	r5, r0
	    || (transitions == NULL)
   28482:	b169      	cbz	r1, 284a0 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   28484:	680b      	ldr	r3, [r1, #0]
   28486:	b173      	cbz	r3, 284a6 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   28488:	684b      	ldr	r3, [r1, #4]
   2848a:	b17b      	cbz	r3, 284ac <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2848c:	2220      	movs	r2, #32
   2848e:	2100      	movs	r1, #0
   28490:	f002 fa29 	bl	2a8e6 <memset>
   28494:	612c      	str	r4, [r5, #16]
	return 0;
   28496:	2000      	movs	r0, #0
}
   28498:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2849a:	f06f 0015 	mvn.w	r0, #21
}
   2849e:	4770      	bx	lr
		return -EINVAL;
   284a0:	f06f 0015 	mvn.w	r0, #21
   284a4:	e7f8      	b.n	28498 <onoff_manager_init+0x1e>
   284a6:	f06f 0015 	mvn.w	r0, #21
   284aa:	e7f5      	b.n	28498 <onoff_manager_init+0x1e>
   284ac:	f06f 0015 	mvn.w	r0, #21
   284b0:	e7f2      	b.n	28498 <onoff_manager_init+0x1e>

000284b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   284b2:	b508      	push	{r3, lr}
   284b4:	4604      	mov	r4, r0
   284b6:	4608      	mov	r0, r1
   284b8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   284ba:	461a      	mov	r2, r3
   284bc:	47a0      	blx	r4
	return z_impl_z_current_get();
   284be:	f7fc f851 	bl	24564 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   284c2:	f7eb fb2b 	bl	13b1c <z_impl_k_thread_abort>

000284c6 <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   284c6:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(h->end_chunk);
   284c8:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   284ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   284ce:	d303      	bcc.n	284d8 <chunk_mem+0x12>
   284d0:	2308      	movs	r3, #8
   284d2:	4419      	add	r1, r3
}
   284d4:	4408      	add	r0, r1
   284d6:	4770      	bx	lr
   284d8:	2304      	movs	r3, #4
   284da:	e7fa      	b.n	284d2 <chunk_mem+0xc>

000284dc <free_list_remove_bidx>:
{
   284dc:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   284de:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   284e2:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   284e4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   284e8:	d317      	bcc.n	2851a <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   284ea:	68eb      	ldr	r3, [r5, #12]
	if (next_free_chunk(h, c) == c) {
   284ec:	4299      	cmp	r1, r3
   284ee:	d016      	beq.n	2851e <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   284f0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   284f4:	d320      	bcc.n	28538 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   284f6:	68a9      	ldr	r1, [r5, #8]
		b->next = second;
   284f8:	3204      	adds	r2, #4
   284fa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   284fe:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   28502:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   28506:	d319      	bcc.n	2853c <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   28508:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   2850a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   2850e:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   28510:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   28514:	d314      	bcc.n	28540 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   28516:	6099      	str	r1, [r3, #8]
   28518:	e00c      	b.n	28534 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   2851a:	88eb      	ldrh	r3, [r5, #6]
   2851c:	e7e6      	b.n	284ec <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   2851e:	2301      	movs	r3, #1
   28520:	fa03 f102 	lsl.w	r1, r3, r2
   28524:	68c3      	ldr	r3, [r0, #12]
   28526:	ea23 0301 	bic.w	r3, r3, r1
   2852a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2852c:	3204      	adds	r2, #4
   2852e:	2300      	movs	r3, #0
   28530:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   28534:	bc30      	pop	{r4, r5}
   28536:	4770      	bx	lr
   28538:	88a9      	ldrh	r1, [r5, #4]
   2853a:	e7dd      	b.n	284f8 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   2853c:	80d3      	strh	r3, [r2, #6]
   2853e:	e7e4      	b.n	2850a <free_list_remove_bidx+0x2e>
   28540:	8099      	strh	r1, [r3, #4]
   28542:	e7f7      	b.n	28534 <free_list_remove_bidx+0x58>

00028544 <free_list_add_bidx>:
{
   28544:	b470      	push	{r4, r5, r6}
	if (b->next == 0U) {
   28546:	1d13      	adds	r3, r2, #4
   28548:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2854c:	b9d3      	cbnz	r3, 28584 <free_list_add_bidx+0x40>
		h->avail_buckets |= (1 << bidx);
   2854e:	2301      	movs	r3, #1
   28550:	fa03 f402 	lsl.w	r4, r3, r2
   28554:	68c3      	ldr	r3, [r0, #12]
   28556:	4323      	orrs	r3, r4
   28558:	60c3      	str	r3, [r0, #12]
		b->next = c;
   2855a:	3204      	adds	r2, #4
   2855c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   28560:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   28564:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   28566:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   2856a:	d307      	bcc.n	2857c <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   2856c:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   2856e:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   28570:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   28574:	d304      	bcc.n	28580 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   28576:	60d9      	str	r1, [r3, #12]
}
   28578:	bc70      	pop	{r4, r5, r6}
   2857a:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   2857c:	8099      	strh	r1, [r3, #4]
   2857e:	e7f6      	b.n	2856e <free_list_add_bidx+0x2a>
   28580:	80d9      	strh	r1, [r3, #6]
   28582:	e7f9      	b.n	28578 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   28584:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   28588:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   2858a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2858e:	d318      	bcc.n	285c2 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   28590:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   28592:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   28596:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2859a:	d314      	bcc.n	285c6 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   2859c:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   2859e:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   285a0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   285a4:	d311      	bcc.n	285ca <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   285a6:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   285a8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   285ac:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   285ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   285b2:	d30c      	bcc.n	285ce <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   285b4:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   285b6:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   285b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   285bc:	d309      	bcc.n	285d2 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   285be:	60a1      	str	r1, [r4, #8]
   285c0:	e7da      	b.n	28578 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   285c2:	88a2      	ldrh	r2, [r4, #4]
   285c4:	e7e5      	b.n	28592 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   285c6:	80aa      	strh	r2, [r5, #4]
   285c8:	e7e9      	b.n	2859e <free_list_add_bidx+0x5a>
   285ca:	80eb      	strh	r3, [r5, #6]
   285cc:	e7ec      	b.n	285a8 <free_list_add_bidx+0x64>
   285ce:	80d1      	strh	r1, [r2, #6]
   285d0:	e7f1      	b.n	285b6 <free_list_add_bidx+0x72>
   285d2:	80a1      	strh	r1, [r4, #4]
   285d4:	e7d0      	b.n	28578 <free_list_add_bidx+0x34>

000285d6 <split_chunks>:
{
   285d6:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   285d8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   285dc:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   285de:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   285e2:	d325      	bcc.n	28630 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   285e4:	6866      	ldr	r6, [r4, #4]
	chunksz_t lsz = rc - lc;
   285e6:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   285e8:	1a89      	subs	r1, r1, r2
   285ea:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   285ee:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   285f0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   285f4:	d31e      	bcc.n	28634 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   285f6:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   285f8:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   285fa:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   285fe:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   28600:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   28604:	d318      	bcc.n	28638 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   28606:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   28608:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   2860a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2860e:	d315      	bcc.n	2863c <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   28610:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   28614:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   28616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2861a:	d312      	bcc.n	28642 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   2861c:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   2861e:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   28622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28626:	d30e      	bcc.n	28646 <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   28628:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
}
   2862c:	bc70      	pop	{r4, r5, r6}
   2862e:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   28630:	8866      	ldrh	r6, [r4, #2]
   28632:	e7d8      	b.n	285e6 <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   28634:	8066      	strh	r6, [r4, #2]
   28636:	e7df      	b.n	285f8 <split_chunks+0x22>
   28638:	8065      	strh	r5, [r4, #2]
   2863a:	e7e5      	b.n	28608 <split_chunks+0x32>
   2863c:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   28640:	e7e8      	b.n	28614 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   28642:	8864      	ldrh	r4, [r4, #2]
   28644:	e7eb      	b.n	2861e <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   28646:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   2864a:	e7ef      	b.n	2862c <split_chunks+0x56>

0002864c <merge_chunks>:
{
   2864c:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   2864e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   28652:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   28654:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   28658:	d31c      	bcc.n	28694 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   2865a:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2865c:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   2865e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   28662:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   28666:	d317      	bcc.n	28698 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   28668:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2866a:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2866e:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   28670:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   28674:	d312      	bcc.n	2869c <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   28676:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   28678:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   2867a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   2867e:	d30f      	bcc.n	286a0 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   28680:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   28682:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   28686:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   2868a:	d30b      	bcc.n	286a4 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   2868c:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
}
   28690:	bc70      	pop	{r4, r5, r6}
   28692:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   28694:	884b      	ldrh	r3, [r1, #2]
   28696:	e7e1      	b.n	2865c <merge_chunks+0x10>
   28698:	886e      	ldrh	r6, [r5, #2]
   2869a:	e7e6      	b.n	2866a <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   2869c:	804e      	strh	r6, [r1, #2]
   2869e:	e7eb      	b.n	28678 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   286a0:	886c      	ldrh	r4, [r5, #2]
   286a2:	e7ee      	b.n	28682 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   286a4:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   286a8:	e7f2      	b.n	28690 <merge_chunks+0x44>

000286aa <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   286aa:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   286ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   286b0:	d304      	bcc.n	286bc <mem_to_chunkid+0x12>
   286b2:	2308      	movs	r3, #8
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   286b4:	1ac9      	subs	r1, r1, r3
   286b6:	1a08      	subs	r0, r1, r0
}
   286b8:	08c0      	lsrs	r0, r0, #3
   286ba:	4770      	bx	lr
   286bc:	2304      	movs	r3, #4
   286be:	e7f9      	b.n	286b4 <mem_to_chunkid+0xa>

000286c0 <free_list_remove>:
{
   286c0:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   286c2:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   286c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   286c8:	d307      	bcc.n	286da <free_list_remove+0x1a>
	void *cmem = &buf[c];
   286ca:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   286ce:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   286d0:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   286d2:	2a01      	cmp	r2, #1
   286d4:	d002      	beq.n	286dc <free_list_remove+0x1c>
   286d6:	2200      	movs	r2, #0
   286d8:	e000      	b.n	286dc <free_list_remove+0x1c>
   286da:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   286dc:	b9a2      	cbnz	r2, 28708 <free_list_remove+0x48>
	void *cmem = &buf[c];
   286de:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   286e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   286e6:	d310      	bcc.n	2870a <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   286e8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   286ea:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   286ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   286f0:	d30d      	bcc.n	2870e <free_list_remove+0x4e>
   286f2:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   286f4:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   286f6:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   286fa:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   286fc:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   28700:	f1c2 021f 	rsb	r2, r2, #31
   28704:	f7ff feea 	bl	284dc <free_list_remove_bidx>
}
   28708:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   2870a:	8852      	ldrh	r2, [r2, #2]
   2870c:	e7ed      	b.n	286ea <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   2870e:	2304      	movs	r3, #4
   28710:	e7f0      	b.n	286f4 <free_list_remove+0x34>

00028712 <free_list_add>:
{
   28712:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   28714:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   28716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2871a:	d307      	bcc.n	2872c <free_list_add+0x1a>
	void *cmem = &buf[c];
   2871c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   28720:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   28722:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   28724:	2a01      	cmp	r2, #1
   28726:	d002      	beq.n	2872e <free_list_add+0x1c>
   28728:	2200      	movs	r2, #0
   2872a:	e000      	b.n	2872e <free_list_add+0x1c>
   2872c:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   2872e:	b9a2      	cbnz	r2, 2875a <free_list_add+0x48>
	void *cmem = &buf[c];
   28730:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   28734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28738:	d310      	bcc.n	2875c <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   2873a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2873c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   2873e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28742:	d30d      	bcc.n	28760 <free_list_add+0x4e>
   28744:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   28746:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   28748:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   2874c:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   2874e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   28752:	f1c2 021f 	rsb	r2, r2, #31
   28756:	f7ff fef5 	bl	28544 <free_list_add_bidx>
}
   2875a:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   2875c:	8852      	ldrh	r2, [r2, #2]
   2875e:	e7ed      	b.n	2873c <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   28760:	2304      	movs	r3, #4
   28762:	e7f0      	b.n	28746 <free_list_add+0x34>

00028764 <free_chunk>:
{
   28764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28766:	4604      	mov	r4, r0
   28768:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   2876a:	00ce      	lsls	r6, r1, #3
   2876c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   28770:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   28772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28776:	d31f      	bcc.n	287b8 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   28778:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   2877a:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   2877e:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   28782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28786:	d319      	bcc.n	287bc <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   28788:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   2878a:	f013 0f01 	tst.w	r3, #1
   2878e:	d017      	beq.n	287c0 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   28790:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   28792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28796:	d324      	bcc.n	287e2 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   28798:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2879a:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   2879c:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   287a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   287a4:	d31f      	bcc.n	287e6 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   287a6:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   287a8:	f013 0f01 	tst.w	r3, #1
   287ac:	d01d      	beq.n	287ea <free_chunk+0x86>
	free_list_add(h, c);
   287ae:	4629      	mov	r1, r5
   287b0:	4620      	mov	r0, r4
   287b2:	f7ff ffae 	bl	28712 <free_list_add>
}
   287b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   287b8:	8879      	ldrh	r1, [r7, #2]
   287ba:	e7de      	b.n	2877a <free_chunk+0x16>
   287bc:	8853      	ldrh	r3, [r2, #2]
   287be:	e7e4      	b.n	2878a <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   287c0:	4620      	mov	r0, r4
   287c2:	f7ff ff7d 	bl	286c0 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   287c6:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   287c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   287cc:	d307      	bcc.n	287de <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   287ce:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   287d0:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   287d4:	4629      	mov	r1, r5
   287d6:	4620      	mov	r0, r4
   287d8:	f7ff ff38 	bl	2864c <merge_chunks>
   287dc:	e7d8      	b.n	28790 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   287de:	887a      	ldrh	r2, [r7, #2]
   287e0:	e7f6      	b.n	287d0 <free_chunk+0x6c>
   287e2:	5ba1      	ldrh	r1, [r4, r6]
   287e4:	e7d9      	b.n	2879a <free_chunk+0x36>
   287e6:	8853      	ldrh	r3, [r2, #2]
   287e8:	e7de      	b.n	287a8 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   287ea:	4620      	mov	r0, r4
   287ec:	f7ff ff68 	bl	286c0 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   287f0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   287f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   287f6:	d30c      	bcc.n	28812 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   287f8:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   287fa:	462a      	mov	r2, r5
   287fc:	1a69      	subs	r1, r5, r1
   287fe:	4620      	mov	r0, r4
   28800:	f7ff ff24 	bl	2864c <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   28804:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   28806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2880a:	d304      	bcc.n	28816 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   2880c:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2880e:	1aed      	subs	r5, r5, r3
   28810:	e7cd      	b.n	287ae <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   28812:	5ba1      	ldrh	r1, [r4, r6]
   28814:	e7f1      	b.n	287fa <free_chunk+0x96>
   28816:	5ba3      	ldrh	r3, [r4, r6]
   28818:	e7f9      	b.n	2880e <free_chunk+0xaa>

0002881a <alloc_chunk>:
{
   2881a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   2881c:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   2881e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   28822:	d311      	bcc.n	28848 <alloc_chunk+0x2e>
   28824:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   28826:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   28828:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   2882c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   2882e:	fab3 f383 	clz	r3, r3
   28832:	f1c3 021f 	rsb	r2, r3, #31
	if (b->next) {
   28836:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2883a:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   2883e:	f1bc 0f00 	cmp.w	ip, #0
   28842:	d024      	beq.n	2888e <alloc_chunk+0x74>
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   28844:	2603      	movs	r6, #3
   28846:	e010      	b.n	2886a <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   28848:	2304      	movs	r3, #4
   2884a:	e7ec      	b.n	28826 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   2884c:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   28850:	e015      	b.n	2887e <alloc_chunk+0x64>
				free_list_remove_bidx(h, c, bi);
   28852:	4621      	mov	r1, r4
   28854:	f7ff fe42 	bl	284dc <free_list_remove_bidx>
				return c;
   28858:	e021      	b.n	2889e <alloc_chunk+0x84>
   2885a:	88fc      	ldrh	r4, [r7, #6]
			b->next = next_free_chunk(h, c);
   2885c:	1d17      	adds	r7, r2, #4
   2885e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
		} while (--i && b->next != first);
   28862:	3e01      	subs	r6, #1
   28864:	d013      	beq.n	2888e <alloc_chunk+0x74>
   28866:	45a4      	cmp	ip, r4
   28868:	d011      	beq.n	2888e <alloc_chunk+0x74>
			chunkid_t c = b->next;
   2886a:	1d14      	adds	r4, r2, #4
   2886c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   28870:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   28874:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   28878:	d3e8      	bcc.n	2884c <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   2887a:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   2887e:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   28882:	d9e6      	bls.n	28852 <alloc_chunk+0x38>
	if (big_heap(h)) {
   28884:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   28888:	d3e7      	bcc.n	2885a <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   2888a:	68fc      	ldr	r4, [r7, #12]
   2888c:	e7e6      	b.n	2885c <alloc_chunk+0x42>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2888e:	68c4      	ldr	r4, [r0, #12]
   28890:	f1c3 0220 	rsb	r2, r3, #32
   28894:	2301      	movs	r3, #1
   28896:	4093      	lsls	r3, r2
   28898:	425b      	negs	r3, r3
	if (bmask != 0U) {
   2889a:	401c      	ands	r4, r3
   2889c:	d101      	bne.n	288a2 <alloc_chunk+0x88>
}
   2889e:	4620      	mov	r0, r4
   288a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   288a2:	fa94 f2a4 	rbit	r2, r4
   288a6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   288aa:	1d13      	adds	r3, r2, #4
   288ac:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   288b0:	4621      	mov	r1, r4
   288b2:	f7ff fe13 	bl	284dc <free_list_remove_bidx>
		return c;
   288b6:	e7f2      	b.n	2889e <alloc_chunk+0x84>

000288b8 <sys_heap_alloc>:
{
   288b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   288ba:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   288bc:	2900      	cmp	r1, #0
   288be:	d03c      	beq.n	2893a <sys_heap_alloc+0x82>
   288c0:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   288c2:	68aa      	ldr	r2, [r5, #8]
   288c4:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   288c8:	d939      	bls.n	2893e <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   288ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   288ce:	d320      	bcc.n	28912 <sys_heap_alloc+0x5a>
   288d0:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   288d2:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   288d4:	3407      	adds	r4, #7
   288d6:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   288d8:	4621      	mov	r1, r4
   288da:	4628      	mov	r0, r5
   288dc:	f7ff ff9d 	bl	2881a <alloc_chunk>
	if (c == 0U) {
   288e0:	4607      	mov	r7, r0
   288e2:	b370      	cbz	r0, 28942 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   288e4:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   288e8:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   288ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   288ee:	d312      	bcc.n	28916 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   288f0:	6873      	ldr	r3, [r6, #4]
	if (chunk_size(h, c) > chunk_sz) {
   288f2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   288f6:	d310      	bcc.n	2891a <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   288f8:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   288fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   288fe:	d317      	bcc.n	28930 <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   28900:	6873      	ldr	r3, [r6, #4]
   28902:	f043 0301 	orr.w	r3, r3, #1
   28906:	6073      	str	r3, [r6, #4]
	return chunk_mem(h, c);
   28908:	4639      	mov	r1, r7
   2890a:	4628      	mov	r0, r5
   2890c:	f7ff fddb 	bl	284c6 <chunk_mem>
}
   28910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   28912:	2404      	movs	r4, #4
   28914:	e7dd      	b.n	288d2 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   28916:	8873      	ldrh	r3, [r6, #2]
   28918:	e7eb      	b.n	288f2 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   2891a:	443c      	add	r4, r7
   2891c:	4622      	mov	r2, r4
   2891e:	4639      	mov	r1, r7
   28920:	4628      	mov	r0, r5
   28922:	f7ff fe58 	bl	285d6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   28926:	4621      	mov	r1, r4
   28928:	4628      	mov	r0, r5
   2892a:	f7ff fef2 	bl	28712 <free_list_add>
   2892e:	e7e3      	b.n	288f8 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   28930:	8873      	ldrh	r3, [r6, #2]
   28932:	f043 0301 	orr.w	r3, r3, #1
   28936:	8073      	strh	r3, [r6, #2]
   28938:	e7e6      	b.n	28908 <sys_heap_alloc+0x50>
		return NULL;
   2893a:	2000      	movs	r0, #0
   2893c:	e7e8      	b.n	28910 <sys_heap_alloc+0x58>
   2893e:	2000      	movs	r0, #0
   28940:	e7e6      	b.n	28910 <sys_heap_alloc+0x58>
		return NULL;
   28942:	2000      	movs	r0, #0
   28944:	e7e4      	b.n	28910 <sys_heap_alloc+0x58>

00028946 <extract_decimal>:
{
   28946:	b410      	push	{r4}
   28948:	4604      	mov	r4, r0
	const char *sp = *str;
   2894a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   2894c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   2894e:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   28950:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   28954:	2909      	cmp	r1, #9
   28956:	d806      	bhi.n	28966 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   28958:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2895c:	3201      	adds	r2, #1
   2895e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   28962:	3830      	subs	r0, #48	; 0x30
   28964:	e7f3      	b.n	2894e <extract_decimal+0x8>
	*str = sp;
   28966:	6022      	str	r2, [r4, #0]
}
   28968:	bc10      	pop	{r4}
   2896a:	4770      	bx	lr

0002896c <encode_uint>:
{
   2896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28970:	b083      	sub	sp, #12
   28972:	4604      	mov	r4, r0
   28974:	460d      	mov	r5, r1
   28976:	9201      	str	r2, [sp, #4]
   28978:	469a      	mov	sl, r3
   2897a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   2897e:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28980:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   28984:	2b6f      	cmp	r3, #111	; 0x6f
   28986:	d00f      	beq.n	289a8 <encode_uint+0x3c>
   28988:	d906      	bls.n	28998 <encode_uint+0x2c>
   2898a:	2b70      	cmp	r3, #112	; 0x70
   2898c:	d00f      	beq.n	289ae <encode_uint+0x42>
   2898e:	2b78      	cmp	r3, #120	; 0x78
   28990:	d110      	bne.n	289b4 <encode_uint+0x48>
		return 16;
   28992:	f04f 0910 	mov.w	r9, #16
   28996:	e026      	b.n	289e6 <encode_uint+0x7a>
	switch (specifier) {
   28998:	2b58      	cmp	r3, #88	; 0x58
   2899a:	d002      	beq.n	289a2 <encode_uint+0x36>
   2899c:	f04f 090a 	mov.w	r9, #10
   289a0:	e021      	b.n	289e6 <encode_uint+0x7a>
		return 16;
   289a2:	f04f 0910 	mov.w	r9, #16
   289a6:	e01e      	b.n	289e6 <encode_uint+0x7a>
		return 8;
   289a8:	f04f 0908 	mov.w	r9, #8
   289ac:	e01b      	b.n	289e6 <encode_uint+0x7a>
		return 16;
   289ae:	f04f 0910 	mov.w	r9, #16
   289b2:	e018      	b.n	289e6 <encode_uint+0x7a>
	switch (specifier) {
   289b4:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   289b8:	e015      	b.n	289e6 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   289ba:	f1bb 0f19 	cmp.w	fp, #25
   289be:	d820      	bhi.n	28a02 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   289c0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   289c2:	3237      	adds	r2, #55	; 0x37
   289c4:	b2d2      	uxtb	r2, r2
   289c6:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   289ca:	4632      	mov	r2, r6
   289cc:	463b      	mov	r3, r7
   289ce:	4620      	mov	r0, r4
   289d0:	4629      	mov	r1, r5
   289d2:	f7d7 fb95 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   289d6:	42bd      	cmp	r5, r7
   289d8:	bf08      	it	eq
   289da:	42b4      	cmpeq	r4, r6
   289dc:	d315      	bcc.n	28a0a <encode_uint+0x9e>
   289de:	45d0      	cmp	r8, sl
   289e0:	d913      	bls.n	28a0a <encode_uint+0x9e>
		value /= radix;
   289e2:	4604      	mov	r4, r0
   289e4:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   289e6:	464e      	mov	r6, r9
   289e8:	2700      	movs	r7, #0
   289ea:	464a      	mov	r2, r9
   289ec:	463b      	mov	r3, r7
   289ee:	4620      	mov	r0, r4
   289f0:	4629      	mov	r1, r5
   289f2:	f7d7 fb85 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   289f6:	2a09      	cmp	r2, #9
   289f8:	d8df      	bhi.n	289ba <encode_uint+0x4e>
   289fa:	b2d2      	uxtb	r2, r2
   289fc:	3230      	adds	r2, #48	; 0x30
   289fe:	b2d2      	uxtb	r2, r2
   28a00:	e7e1      	b.n	289c6 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   28a02:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28a04:	3257      	adds	r2, #87	; 0x57
   28a06:	b2d2      	uxtb	r2, r2
   28a08:	e7dd      	b.n	289c6 <encode_uint+0x5a>
	if (conv->flag_hash) {
   28a0a:	9b01      	ldr	r3, [sp, #4]
   28a0c:	781b      	ldrb	r3, [r3, #0]
   28a0e:	f013 0f20 	tst.w	r3, #32
   28a12:	d005      	beq.n	28a20 <encode_uint+0xb4>
		if (radix == 8) {
   28a14:	f1b9 0f08 	cmp.w	r9, #8
   28a18:	d006      	beq.n	28a28 <encode_uint+0xbc>
		} else if (radix == 16) {
   28a1a:	f1b9 0f10 	cmp.w	r9, #16
   28a1e:	d009      	beq.n	28a34 <encode_uint+0xc8>
}
   28a20:	4640      	mov	r0, r8
   28a22:	b003      	add	sp, #12
   28a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   28a28:	9a01      	ldr	r2, [sp, #4]
   28a2a:	7893      	ldrb	r3, [r2, #2]
   28a2c:	f043 0308 	orr.w	r3, r3, #8
   28a30:	7093      	strb	r3, [r2, #2]
   28a32:	e7f5      	b.n	28a20 <encode_uint+0xb4>
			conv->altform_0c = true;
   28a34:	9a01      	ldr	r2, [sp, #4]
   28a36:	7893      	ldrb	r3, [r2, #2]
   28a38:	f043 0310 	orr.w	r3, r3, #16
   28a3c:	7093      	strb	r3, [r2, #2]
   28a3e:	e7ef      	b.n	28a20 <encode_uint+0xb4>

00028a40 <outs>:
{
   28a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a44:	4607      	mov	r7, r0
   28a46:	460e      	mov	r6, r1
   28a48:	4614      	mov	r4, r2
   28a4a:	4698      	mov	r8, r3
	size_t count = 0;
   28a4c:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28a4e:	e006      	b.n	28a5e <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   28a50:	4631      	mov	r1, r6
   28a52:	f814 0b01 	ldrb.w	r0, [r4], #1
   28a56:	47b8      	blx	r7
		if (rc < 0) {
   28a58:	2800      	cmp	r0, #0
   28a5a:	db09      	blt.n	28a70 <outs+0x30>
		++count;
   28a5c:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28a5e:	4544      	cmp	r4, r8
   28a60:	d3f6      	bcc.n	28a50 <outs+0x10>
   28a62:	f1b8 0f00 	cmp.w	r8, #0
   28a66:	d102      	bne.n	28a6e <outs+0x2e>
   28a68:	7823      	ldrb	r3, [r4, #0]
   28a6a:	2b00      	cmp	r3, #0
   28a6c:	d1f0      	bne.n	28a50 <outs+0x10>
	return (int)count;
   28a6e:	4628      	mov	r0, r5
}
   28a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028a74 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   28a74:	4040      	eors	r0, r0
   28a76:	f380 8811 	msr	BASEPRI, r0
   28a7a:	f04f 0004 	mov.w	r0, #4
   28a7e:	df02      	svc	2
}
   28a80:	4770      	bx	lr

00028a82 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   28a82:	4770      	bx	lr

00028a84 <z_log_minimal_printk>:
{
   28a84:	b40f      	push	{r0, r1, r2, r3}
   28a86:	b500      	push	{lr}
   28a88:	b083      	sub	sp, #12
   28a8a:	a904      	add	r1, sp, #16
   28a8c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   28a90:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   28a92:	f7e7 fc7b 	bl	1038c <vprintk>
}
   28a96:	b003      	add	sp, #12
   28a98:	f85d eb04 	ldr.w	lr, [sp], #4
   28a9c:	b004      	add	sp, #16
   28a9e:	4770      	bx	lr

00028aa0 <nvs_flash_rd>:
{
   28aa0:	b570      	push	{r4, r5, r6, lr}
	offset = fs->offset;
   28aa2:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28aa4:	8984      	ldrh	r4, [r0, #12]
   28aa6:	0c0e      	lsrs	r6, r1, #16
   28aa8:	fb06 5404 	mla	r4, r6, r4, r5
	offset += addr & ADDR_OFFS_MASK;
   28aac:	fa14 f181 	uxtah	r1, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   28ab0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   28ab2:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
   28ab4:	6824      	ldr	r4, [r4, #0]
   28ab6:	47a0      	blx	r4
}
   28ab8:	bd70      	pop	{r4, r5, r6, pc}

00028aba <nvs_flash_ate_rd>:
{
   28aba:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28abc:	2308      	movs	r3, #8
   28abe:	f7ff ffef 	bl	28aa0 <nvs_flash_rd>
}
   28ac2:	bd08      	pop	{r3, pc}

00028ac4 <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   28ac4:	2300      	movs	r3, #0
   28ac6:	e000      	b.n	28aca <nvs_ate_cmp_const+0x6>
   28ac8:	3301      	adds	r3, #1
   28aca:	2b07      	cmp	r3, #7
   28acc:	d804      	bhi.n	28ad8 <nvs_ate_cmp_const+0x14>
		if (data8[i] != value) {
   28ace:	5cc2      	ldrb	r2, [r0, r3]
   28ad0:	428a      	cmp	r2, r1
   28ad2:	d0f9      	beq.n	28ac8 <nvs_ate_cmp_const+0x4>
			return 1;
   28ad4:	2001      	movs	r0, #1
}
   28ad6:	4770      	bx	lr
	return 0;
   28ad8:	2000      	movs	r0, #0
   28ada:	4770      	bx	lr

00028adc <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   28adc:	680b      	ldr	r3, [r1, #0]
   28ade:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   28ae2:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   28ae4:	89c2      	ldrh	r2, [r0, #14]
   28ae6:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   28aea:	d000      	beq.n	28aee <nvs_sector_advance+0x12>
}
   28aec:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   28aee:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
   28af2:	600b      	str	r3, [r1, #0]
}
   28af4:	e7fa      	b.n	28aec <nvs_sector_advance+0x10>

00028af6 <nvs_flash_block_cmp>:
{
   28af6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28afa:	b089      	sub	sp, #36	; 0x24
   28afc:	4681      	mov	r9, r0
   28afe:	460e      	mov	r6, r1
   28b00:	4617      	mov	r7, r2
   28b02:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28b04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28b06:	681b      	ldr	r3, [r3, #0]
   28b08:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   28b0c:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   28b10:	e002      	b.n	28b18 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
   28b12:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
   28b14:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
   28b16:	4427      	add	r7, r4
	while (len) {
   28b18:	b1a5      	cbz	r5, 28b44 <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
   28b1a:	462c      	mov	r4, r5
   28b1c:	4545      	cmp	r5, r8
   28b1e:	bf28      	it	cs
   28b20:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   28b22:	4623      	mov	r3, r4
   28b24:	466a      	mov	r2, sp
   28b26:	4631      	mov	r1, r6
   28b28:	4648      	mov	r0, r9
   28b2a:	f7ff ffb9 	bl	28aa0 <nvs_flash_rd>
		if (rc) {
   28b2e:	4603      	mov	r3, r0
   28b30:	b948      	cbnz	r0, 28b46 <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
   28b32:	4622      	mov	r2, r4
   28b34:	4669      	mov	r1, sp
   28b36:	4638      	mov	r0, r7
   28b38:	f001 fe84 	bl	2a844 <memcmp>
		if (rc) {
   28b3c:	2800      	cmp	r0, #0
   28b3e:	d0e8      	beq.n	28b12 <nvs_flash_block_cmp+0x1c>
			return 1;
   28b40:	2301      	movs	r3, #1
   28b42:	e000      	b.n	28b46 <nvs_flash_block_cmp+0x50>
	return 0;
   28b44:	2300      	movs	r3, #0
}
   28b46:	4618      	mov	r0, r3
   28b48:	b009      	add	sp, #36	; 0x24
   28b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028b4e <nvs_flash_cmp_const>:
{
   28b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b52:	b088      	sub	sp, #32
   28b54:	4680      	mov	r8, r0
   28b56:	460e      	mov	r6, r1
   28b58:	4611      	mov	r1, r2
   28b5a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28b5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28b5e:	681f      	ldr	r7, [r3, #0]
   28b60:	427f      	negs	r7, r7
	block_size =
   28b62:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   28b66:	463a      	mov	r2, r7
   28b68:	4668      	mov	r0, sp
   28b6a:	f001 febc 	bl	2a8e6 <memset>
	while (len) {
   28b6e:	b174      	cbz	r4, 28b8e <nvs_flash_cmp_const+0x40>
		bytes_to_cmp = MIN(block_size, len);
   28b70:	4625      	mov	r5, r4
   28b72:	42bc      	cmp	r4, r7
   28b74:	bf28      	it	cs
   28b76:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   28b78:	462b      	mov	r3, r5
   28b7a:	466a      	mov	r2, sp
   28b7c:	4631      	mov	r1, r6
   28b7e:	4640      	mov	r0, r8
   28b80:	f7ff ffb9 	bl	28af6 <nvs_flash_block_cmp>
		if (rc) {
   28b84:	4603      	mov	r3, r0
   28b86:	b918      	cbnz	r0, 28b90 <nvs_flash_cmp_const+0x42>
		len -= bytes_to_cmp;
   28b88:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   28b8a:	442e      	add	r6, r5
   28b8c:	e7ef      	b.n	28b6e <nvs_flash_cmp_const+0x20>
	return 0;
   28b8e:	2300      	movs	r3, #0
}
   28b90:	4618      	mov	r0, r3
   28b92:	b008      	add	sp, #32
   28b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028b98 <nvs_flash_erase_sector>:
{
   28b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28b9c:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   28b9e:	ea4f 4811 	mov.w	r8, r1, lsr #16
   28ba2:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset = fs->offset;
   28ba6:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28ba8:	f8b0 900c 	ldrh.w	r9, [r0, #12]
   28bac:	0c09      	lsrs	r1, r1, #16
   28bae:	fb01 5509 	mla	r5, r1, r9, r5
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   28bb2:	6a87      	ldr	r7, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   28bb4:	f8d7 a008 	ldr.w	sl, [r7, #8]
	if (api->write_protection != NULL) {
   28bb8:	f8da 300c 	ldr.w	r3, [sl, #12]
   28bbc:	b123      	cbz	r3, 28bc8 <nvs_flash_erase_sector+0x30>
		rc = api->write_protection(dev, false);
   28bbe:	2100      	movs	r1, #0
   28bc0:	4638      	mov	r0, r7
   28bc2:	4798      	blx	r3
		if (rc) {
   28bc4:	4606      	mov	r6, r0
   28bc6:	b960      	cbnz	r0, 28be2 <nvs_flash_erase_sector+0x4a>
	rc = api->erase(dev, offset, size);
   28bc8:	f8da 3008 	ldr.w	r3, [sl, #8]
   28bcc:	464a      	mov	r2, r9
   28bce:	4629      	mov	r1, r5
   28bd0:	4638      	mov	r0, r7
   28bd2:	4798      	blx	r3
   28bd4:	4606      	mov	r6, r0
	if (api->write_protection != NULL) {
   28bd6:	f8da 300c 	ldr.w	r3, [sl, #12]
   28bda:	b113      	cbz	r3, 28be2 <nvs_flash_erase_sector+0x4a>
		(void) api->write_protection(dev, true);
   28bdc:	2101      	movs	r1, #1
   28bde:	4638      	mov	r0, r7
   28be0:	4798      	blx	r3
	if (rc) {
   28be2:	b116      	cbz	r6, 28bea <nvs_flash_erase_sector+0x52>
}
   28be4:	4630      	mov	r0, r6
   28be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   28bea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   28bec:	89a3      	ldrh	r3, [r4, #12]
   28bee:	7912      	ldrb	r2, [r2, #4]
   28bf0:	4641      	mov	r1, r8
   28bf2:	4620      	mov	r0, r4
   28bf4:	f7ff ffab 	bl	28b4e <nvs_flash_cmp_const>
   28bf8:	2800      	cmp	r0, #0
   28bfa:	d0f3      	beq.n	28be4 <nvs_flash_erase_sector+0x4c>
		rc = -ENXIO;
   28bfc:	f06f 0605 	mvn.w	r6, #5
   28c00:	e7f0      	b.n	28be4 <nvs_flash_erase_sector+0x4c>

00028c02 <nvs_ate_crc8_check>:
{
   28c02:	b510      	push	{r4, lr}
   28c04:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   28c06:	2207      	movs	r2, #7
   28c08:	4601      	mov	r1, r0
   28c0a:	20ff      	movs	r0, #255	; 0xff
   28c0c:	f7e7 fb40 	bl	10290 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   28c10:	79e3      	ldrb	r3, [r4, #7]
   28c12:	4283      	cmp	r3, r0
   28c14:	d001      	beq.n	28c1a <nvs_ate_crc8_check+0x18>
	return 1;
   28c16:	2001      	movs	r0, #1
}
   28c18:	bd10      	pop	{r4, pc}
		return 0;
   28c1a:	2000      	movs	r0, #0
   28c1c:	e7fc      	b.n	28c18 <nvs_ate_crc8_check+0x16>

00028c1e <nvs_ate_valid>:
{
   28c1e:	b570      	push	{r4, r5, r6, lr}
   28c20:	4604      	mov	r4, r0
   28c22:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28c24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28c26:	681b      	ldr	r3, [r3, #0]
   28c28:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   28c2a:	2a01      	cmp	r2, #1
   28c2c:	d90d      	bls.n	28c4a <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28c2e:	1dd6      	adds	r6, r2, #7
   28c30:	4253      	negs	r3, r2
   28c32:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   28c34:	4628      	mov	r0, r5
   28c36:	f7ff ffe4 	bl	28c02 <nvs_ate_crc8_check>
   28c3a:	b940      	cbnz	r0, 28c4e <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   28c3c:	886a      	ldrh	r2, [r5, #2]
   28c3e:	89a3      	ldrh	r3, [r4, #12]
   28c40:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   28c42:	429a      	cmp	r2, r3
   28c44:	d205      	bcs.n	28c52 <nvs_ate_valid+0x34>
	return 1;
   28c46:	2001      	movs	r0, #1
}
   28c48:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   28c4a:	2608      	movs	r6, #8
   28c4c:	e7f2      	b.n	28c34 <nvs_ate_valid+0x16>
		return 0;
   28c4e:	2000      	movs	r0, #0
   28c50:	e7fa      	b.n	28c48 <nvs_ate_valid+0x2a>
   28c52:	2000      	movs	r0, #0
   28c54:	e7f8      	b.n	28c48 <nvs_ate_valid+0x2a>

00028c56 <nvs_recover_last_ate>:
{
   28c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c5a:	b082      	sub	sp, #8
   28c5c:	4606      	mov	r6, r0
   28c5e:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28c60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28c62:	681f      	ldr	r7, [r3, #0]
   28c64:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   28c66:	2b01      	cmp	r3, #1
   28c68:	d90b      	bls.n	28c82 <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28c6a:	461f      	mov	r7, r3
   28c6c:	3307      	adds	r3, #7
   28c6e:	427f      	negs	r7, r7
   28c70:	401f      	ands	r7, r3
	*addr -= ate_size;
   28c72:	f8d8 4000 	ldr.w	r4, [r8]
   28c76:	1be4      	subs	r4, r4, r7
   28c78:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   28c7c:	0c25      	lsrs	r5, r4, #16
   28c7e:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   28c80:	e002      	b.n	28c88 <nvs_recover_last_ate+0x32>
		return len;
   28c82:	2708      	movs	r7, #8
   28c84:	e7f5      	b.n	28c72 <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   28c86:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   28c88:	42ac      	cmp	r4, r5
   28c8a:	d917      	bls.n	28cbc <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   28c8c:	466a      	mov	r2, sp
   28c8e:	4621      	mov	r1, r4
   28c90:	4630      	mov	r0, r6
   28c92:	f7ff ff12 	bl	28aba <nvs_flash_ate_rd>
		if (rc) {
   28c96:	4603      	mov	r3, r0
   28c98:	b988      	cbnz	r0, 28cbe <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   28c9a:	4669      	mov	r1, sp
   28c9c:	4630      	mov	r0, r6
   28c9e:	f7ff ffbe 	bl	28c1e <nvs_ate_valid>
   28ca2:	2800      	cmp	r0, #0
   28ca4:	d0ef      	beq.n	28c86 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   28ca6:	0c2d      	lsrs	r5, r5, #16
   28ca8:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   28caa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   28cae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   28cb2:	4413      	add	r3, r2
   28cb4:	441d      	add	r5, r3
			*addr = ate_end_addr;
   28cb6:	f8c8 4000 	str.w	r4, [r8]
   28cba:	e7e4      	b.n	28c86 <nvs_recover_last_ate+0x30>
	return 0;
   28cbc:	2300      	movs	r3, #0
}
   28cbe:	4618      	mov	r0, r3
   28cc0:	b002      	add	sp, #8
   28cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028cc6 <nvs_close_ate_valid>:
{
   28cc6:	b538      	push	{r3, r4, r5, lr}
   28cc8:	4605      	mov	r5, r0
   28cca:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   28ccc:	f7ff ffa7 	bl	28c1e <nvs_ate_valid>
   28cd0:	b1e0      	cbz	r0, 28d0c <nvs_close_ate_valid+0x46>
   28cd2:	88a3      	ldrh	r3, [r4, #4]
   28cd4:	b9cb      	cbnz	r3, 28d0a <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   28cd6:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   28cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28cdc:	429a      	cmp	r2, r3
   28cde:	d116      	bne.n	28d0e <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28ce0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   28ce2:	681b      	ldr	r3, [r3, #0]
   28ce4:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   28ce6:	2a01      	cmp	r2, #1
   28ce8:	d90d      	bls.n	28d06 <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28cea:	4613      	mov	r3, r2
   28cec:	3207      	adds	r2, #7
   28cee:	425b      	negs	r3, r3
   28cf0:	4013      	ands	r3, r2
	if ((fs->sector_size - entry->offset) % ate_size) {
   28cf2:	89aa      	ldrh	r2, [r5, #12]
   28cf4:	8861      	ldrh	r1, [r4, #2]
   28cf6:	1a52      	subs	r2, r2, r1
   28cf8:	fbb2 f1f3 	udiv	r1, r2, r3
   28cfc:	fb03 2311 	mls	r3, r3, r1, r2
   28d00:	b93b      	cbnz	r3, 28d12 <nvs_close_ate_valid+0x4c>
	return 1;
   28d02:	2001      	movs	r0, #1
   28d04:	e002      	b.n	28d0c <nvs_close_ate_valid+0x46>
		return len;
   28d06:	2308      	movs	r3, #8
   28d08:	e7f3      	b.n	28cf2 <nvs_close_ate_valid+0x2c>
		return 0;
   28d0a:	2000      	movs	r0, #0
}
   28d0c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   28d0e:	2000      	movs	r0, #0
   28d10:	e7fc      	b.n	28d0c <nvs_close_ate_valid+0x46>
		return 0;
   28d12:	2000      	movs	r0, #0
   28d14:	e7fa      	b.n	28d0c <nvs_close_ate_valid+0x46>

00028d16 <nvs_prev_ate>:
{
   28d16:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d18:	b083      	sub	sp, #12
   28d1a:	4604      	mov	r4, r0
   28d1c:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28d1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28d20:	681b      	ldr	r3, [r3, #0]
   28d22:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   28d24:	2901      	cmp	r1, #1
   28d26:	d92a      	bls.n	28d7e <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28d28:	1dce      	adds	r6, r1, #7
   28d2a:	424b      	negs	r3, r1
   28d2c:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   28d2e:	6829      	ldr	r1, [r5, #0]
   28d30:	4620      	mov	r0, r4
   28d32:	f7ff fec2 	bl	28aba <nvs_flash_ate_rd>
	if (rc) {
   28d36:	4607      	mov	r7, r0
   28d38:	b9f0      	cbnz	r0, 28d78 <nvs_prev_ate+0x62>
	*addr += ate_size;
   28d3a:	682a      	ldr	r2, [r5, #0]
   28d3c:	4432      	add	r2, r6
   28d3e:	602a      	str	r2, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   28d40:	b291      	uxth	r1, r2
   28d42:	89a3      	ldrh	r3, [r4, #12]
   28d44:	1b9b      	subs	r3, r3, r6
   28d46:	4299      	cmp	r1, r3
   28d48:	d116      	bne.n	28d78 <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   28d4a:	0c13      	lsrs	r3, r2, #16
   28d4c:	d119      	bne.n	28d82 <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   28d4e:	89e3      	ldrh	r3, [r4, #14]
   28d50:	3b01      	subs	r3, #1
   28d52:	eb02 4203 	add.w	r2, r2, r3, lsl #16
   28d56:	602a      	str	r2, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   28d58:	466a      	mov	r2, sp
   28d5a:	6829      	ldr	r1, [r5, #0]
   28d5c:	4620      	mov	r0, r4
   28d5e:	f7ff feac 	bl	28aba <nvs_flash_ate_rd>
	if (rc) {
   28d62:	4607      	mov	r7, r0
   28d64:	b940      	cbnz	r0, 28d78 <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   28d66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28d68:	7919      	ldrb	r1, [r3, #4]
   28d6a:	4668      	mov	r0, sp
   28d6c:	f7ff feaa 	bl	28ac4 <nvs_ate_cmp_const>
	if (!rc) {
   28d70:	b958      	cbnz	r0, 28d8a <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   28d72:	6862      	ldr	r2, [r4, #4]
   28d74:	602a      	str	r2, [r5, #0]
		return 0;
   28d76:	4607      	mov	r7, r0
}
   28d78:	4638      	mov	r0, r7
   28d7a:	b003      	add	sp, #12
   28d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   28d7e:	2608      	movs	r6, #8
   28d80:	e7d5      	b.n	28d2e <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   28d82:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   28d86:	602a      	str	r2, [r5, #0]
   28d88:	e7e6      	b.n	28d58 <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   28d8a:	4669      	mov	r1, sp
   28d8c:	4620      	mov	r0, r4
   28d8e:	f7ff ff9a 	bl	28cc6 <nvs_close_ate_valid>
   28d92:	b130      	cbz	r0, 28da2 <nvs_prev_ate+0x8c>
		(*addr) &= ADDR_SECT_MASK;
   28d94:	886a      	ldrh	r2, [r5, #2]
		(*addr) += close_ate.offset;
   28d96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   28d9a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   28d9e:	602b      	str	r3, [r5, #0]
		return 0;
   28da0:	e7ea      	b.n	28d78 <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   28da2:	4629      	mov	r1, r5
   28da4:	4620      	mov	r0, r4
   28da6:	f7ff ff56 	bl	28c56 <nvs_recover_last_ate>
   28daa:	4607      	mov	r7, r0
   28dac:	e7e4      	b.n	28d78 <nvs_prev_ate+0x62>

00028dae <nvs_ate_crc8_update>:
{
   28dae:	b510      	push	{r4, lr}
   28db0:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   28db2:	2207      	movs	r2, #7
   28db4:	4601      	mov	r1, r0
   28db6:	20ff      	movs	r0, #255	; 0xff
   28db8:	f7e7 fa6a 	bl	10290 <crc8_ccitt>
	entry->crc8 = crc8;
   28dbc:	71e0      	strb	r0, [r4, #7]
}
   28dbe:	bd10      	pop	{r4, pc}

00028dc0 <nvs_flash_al_wrt>:
{
   28dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28dc4:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   28dc6:	2b00      	cmp	r3, #0
   28dc8:	d062      	beq.n	28e90 <nvs_flash_al_wrt+0xd0>
   28dca:	4605      	mov	r5, r0
   28dcc:	4691      	mov	r9, r2
   28dce:	4698      	mov	r8, r3
	offset = fs->offset;
   28dd0:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28dd2:	8984      	ldrh	r4, [r0, #12]
   28dd4:	0c0a      	lsrs	r2, r1, #16
   28dd6:	fb02 3404 	mla	r4, r2, r4, r3
	offset += addr & ADDR_OFFS_MASK;
   28dda:	fa14 f481 	uxtah	r4, r4, r1
   28dde:	46a2      	mov	sl, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   28de0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28de2:	681b      	ldr	r3, [r3, #0]
   28de4:	425b      	negs	r3, r3
	if (blen > 0) {
   28de6:	ea13 0608 	ands.w	r6, r3, r8
   28dea:	d107      	bne.n	28dfc <nvs_flash_al_wrt+0x3c>
	int rc = 0;
   28dec:	2700      	movs	r7, #0
	if (len) {
   28dee:	f1b8 0f00 	cmp.w	r8, #0
   28df2:	d125      	bne.n	28e40 <nvs_flash_al_wrt+0x80>
}
   28df4:	4638      	mov	r0, r7
   28df6:	b009      	add	sp, #36	; 0x24
   28df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = flash_write(fs->flash_device, offset, data8, blen);
   28dfc:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   28e00:	f8da b008 	ldr.w	fp, [sl, #8]
	if (api->write_protection != NULL) {
   28e04:	f8db 300c 	ldr.w	r3, [fp, #12]
   28e08:	b123      	cbz	r3, 28e14 <nvs_flash_al_wrt+0x54>
		rc = api->write_protection(dev, false);
   28e0a:	2100      	movs	r1, #0
   28e0c:	4650      	mov	r0, sl
   28e0e:	4798      	blx	r3
		if (rc) {
   28e10:	4607      	mov	r7, r0
   28e12:	b968      	cbnz	r0, 28e30 <nvs_flash_al_wrt+0x70>
	rc = api->write(dev, offset, data, len);
   28e14:	f8db 7004 	ldr.w	r7, [fp, #4]
   28e18:	4633      	mov	r3, r6
   28e1a:	464a      	mov	r2, r9
   28e1c:	4621      	mov	r1, r4
   28e1e:	4650      	mov	r0, sl
   28e20:	47b8      	blx	r7
   28e22:	4607      	mov	r7, r0
	if (api->write_protection != NULL) {
   28e24:	f8db 300c 	ldr.w	r3, [fp, #12]
   28e28:	b113      	cbz	r3, 28e30 <nvs_flash_al_wrt+0x70>
		(void) api->write_protection(dev, true);
   28e2a:	2101      	movs	r1, #1
   28e2c:	4650      	mov	r0, sl
   28e2e:	4798      	blx	r3
		if (rc) {
   28e30:	2f00      	cmp	r7, #0
   28e32:	d1df      	bne.n	28df4 <nvs_flash_al_wrt+0x34>
		len -= blen;
   28e34:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   28e38:	eb04 0a06 	add.w	sl, r4, r6
		data8 += blen;
   28e3c:	44b1      	add	r9, r6
   28e3e:	e7d6      	b.n	28dee <nvs_flash_al_wrt+0x2e>
		memcpy(buf, data8, len);
   28e40:	4642      	mov	r2, r8
   28e42:	4649      	mov	r1, r9
   28e44:	4668      	mov	r0, sp
   28e46:	f001 fd2a 	bl	2a89e <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   28e4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->flash_parameters->write_block_size - len);
   28e4c:	681a      	ldr	r2, [r3, #0]
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   28e4e:	eba2 0208 	sub.w	r2, r2, r8
   28e52:	7919      	ldrb	r1, [r3, #4]
   28e54:	eb0d 0008 	add.w	r0, sp, r8
   28e58:	f001 fd45 	bl	2a8e6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   28e5c:	6aac      	ldr	r4, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   28e5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		rc = flash_write(fs->flash_device, offset, buf,
   28e60:	681e      	ldr	r6, [r3, #0]
	const struct flash_driver_api *api =
   28e62:	68a5      	ldr	r5, [r4, #8]
	if (api->write_protection != NULL) {
   28e64:	68eb      	ldr	r3, [r5, #12]
   28e66:	b12b      	cbz	r3, 28e74 <nvs_flash_al_wrt+0xb4>
		rc = api->write_protection(dev, false);
   28e68:	2100      	movs	r1, #0
   28e6a:	4620      	mov	r0, r4
   28e6c:	4798      	blx	r3
		if (rc) {
   28e6e:	4607      	mov	r7, r0
   28e70:	2800      	cmp	r0, #0
   28e72:	d1bf      	bne.n	28df4 <nvs_flash_al_wrt+0x34>
	rc = api->write(dev, offset, data, len);
   28e74:	686f      	ldr	r7, [r5, #4]
   28e76:	4633      	mov	r3, r6
   28e78:	466a      	mov	r2, sp
   28e7a:	4651      	mov	r1, sl
   28e7c:	4620      	mov	r0, r4
   28e7e:	47b8      	blx	r7
   28e80:	4607      	mov	r7, r0
	if (api->write_protection != NULL) {
   28e82:	68eb      	ldr	r3, [r5, #12]
   28e84:	2b00      	cmp	r3, #0
   28e86:	d0b5      	beq.n	28df4 <nvs_flash_al_wrt+0x34>
		(void) api->write_protection(dev, true);
   28e88:	2101      	movs	r1, #1
   28e8a:	4620      	mov	r0, r4
   28e8c:	4798      	blx	r3
   28e8e:	e7b1      	b.n	28df4 <nvs_flash_al_wrt+0x34>
		return 0;
   28e90:	2700      	movs	r7, #0
   28e92:	e7af      	b.n	28df4 <nvs_flash_al_wrt+0x34>

00028e94 <nvs_flash_data_wrt>:
{
   28e94:	b538      	push	{r3, r4, r5, lr}
   28e96:	4605      	mov	r5, r0
   28e98:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   28e9a:	4613      	mov	r3, r2
   28e9c:	460a      	mov	r2, r1
   28e9e:	6881      	ldr	r1, [r0, #8]
   28ea0:	f7ff ff8e 	bl	28dc0 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28ea4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   28ea6:	681a      	ldr	r2, [r3, #0]
   28ea8:	b2d3      	uxtb	r3, r2
	if (write_block_size <= 1U) {
   28eaa:	2b01      	cmp	r3, #1
   28eac:	d903      	bls.n	28eb6 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28eae:	441c      	add	r4, r3
   28eb0:	3c01      	subs	r4, #1
   28eb2:	425a      	negs	r2, r3
   28eb4:	4014      	ands	r4, r2
	fs->data_wra += nvs_al_size(fs, len);
   28eb6:	68aa      	ldr	r2, [r5, #8]
   28eb8:	4422      	add	r2, r4
   28eba:	60aa      	str	r2, [r5, #8]
}
   28ebc:	bd38      	pop	{r3, r4, r5, pc}

00028ebe <nvs_flash_block_move>:
{
   28ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ec2:	b088      	sub	sp, #32
   28ec4:	4607      	mov	r7, r0
   28ec6:	460e      	mov	r6, r1
   28ec8:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28eca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28ecc:	681b      	ldr	r3, [r3, #0]
   28ece:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   28ed2:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   28ed6:	e001      	b.n	28edc <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   28ed8:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   28eda:	4426      	add	r6, r4
	while (len) {
   28edc:	b1a5      	cbz	r5, 28f08 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   28ede:	462c      	mov	r4, r5
   28ee0:	4545      	cmp	r5, r8
   28ee2:	bf28      	it	cs
   28ee4:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   28ee6:	4623      	mov	r3, r4
   28ee8:	466a      	mov	r2, sp
   28eea:	4631      	mov	r1, r6
   28eec:	4638      	mov	r0, r7
   28eee:	f7ff fdd7 	bl	28aa0 <nvs_flash_rd>
		if (rc) {
   28ef2:	4603      	mov	r3, r0
   28ef4:	b948      	cbnz	r0, 28f0a <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   28ef6:	4622      	mov	r2, r4
   28ef8:	4669      	mov	r1, sp
   28efa:	4638      	mov	r0, r7
   28efc:	f7ff ffca 	bl	28e94 <nvs_flash_data_wrt>
		if (rc) {
   28f00:	4603      	mov	r3, r0
   28f02:	2800      	cmp	r0, #0
   28f04:	d0e8      	beq.n	28ed8 <nvs_flash_block_move+0x1a>
   28f06:	e000      	b.n	28f0a <nvs_flash_block_move+0x4c>
	return 0;
   28f08:	2300      	movs	r3, #0
}
   28f0a:	4618      	mov	r0, r3
   28f0c:	b008      	add	sp, #32
   28f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028f12 <nvs_flash_ate_wrt>:
{
   28f12:	b510      	push	{r4, lr}
   28f14:	4604      	mov	r4, r0
   28f16:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   28f18:	2308      	movs	r3, #8
   28f1a:	6841      	ldr	r1, [r0, #4]
   28f1c:	f7ff ff50 	bl	28dc0 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28f20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28f22:	681b      	ldr	r3, [r3, #0]
   28f24:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   28f26:	2a01      	cmp	r2, #1
   28f28:	d907      	bls.n	28f3a <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28f2a:	4613      	mov	r3, r2
   28f2c:	3207      	adds	r2, #7
   28f2e:	425b      	negs	r3, r3
   28f30:	4013      	ands	r3, r2
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   28f32:	6862      	ldr	r2, [r4, #4]
   28f34:	1ad2      	subs	r2, r2, r3
   28f36:	6062      	str	r2, [r4, #4]
}
   28f38:	bd10      	pop	{r4, pc}
		return len;
   28f3a:	2308      	movs	r3, #8
   28f3c:	e7f9      	b.n	28f32 <nvs_flash_ate_wrt+0x20>

00028f3e <nvs_add_gc_done_ate>:
{
   28f3e:	b510      	push	{r4, lr}
   28f40:	b082      	sub	sp, #8
   28f42:	4604      	mov	r4, r0
	gc_done_ate.id = 0xffff;
   28f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28f48:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   28f4c:	2300      	movs	r3, #0
   28f4e:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   28f52:	8903      	ldrh	r3, [r0, #8]
   28f54:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   28f58:	4668      	mov	r0, sp
   28f5a:	f7ff ff28 	bl	28dae <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   28f5e:	4669      	mov	r1, sp
   28f60:	4620      	mov	r0, r4
   28f62:	f7ff ffd6 	bl	28f12 <nvs_flash_ate_wrt>
}
   28f66:	b002      	add	sp, #8
   28f68:	bd10      	pop	{r4, pc}

00028f6a <nvs_gc>:
{
   28f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28f6e:	b08a      	sub	sp, #40	; 0x28
   28f70:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   28f72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28f74:	681e      	ldr	r6, [r3, #0]
   28f76:	b2f3      	uxtb	r3, r6
	if (write_block_size <= 1U) {
   28f78:	2b01      	cmp	r3, #1
   28f7a:	d92e      	bls.n	28fda <nvs_gc+0x70>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   28f7c:	461e      	mov	r6, r3
   28f7e:	3307      	adds	r3, #7
   28f80:	4276      	negs	r6, r6
   28f82:	401e      	ands	r6, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   28f84:	88e3      	ldrh	r3, [r4, #6]
   28f86:	041b      	lsls	r3, r3, #16
   28f88:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   28f8a:	a903      	add	r1, sp, #12
   28f8c:	4620      	mov	r0, r4
   28f8e:	f7ff fda5 	bl	28adc <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   28f92:	89a1      	ldrh	r1, [r4, #12]
   28f94:	9b03      	ldr	r3, [sp, #12]
   28f96:	4419      	add	r1, r3
   28f98:	1b89      	subs	r1, r1, r6
   28f9a:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   28f9c:	aa08      	add	r2, sp, #32
   28f9e:	4620      	mov	r0, r4
   28fa0:	f7ff fd8b 	bl	28aba <nvs_flash_ate_rd>
	if (rc < 0) {
   28fa4:	1e03      	subs	r3, r0, #0
   28fa6:	db14      	blt.n	28fd2 <nvs_gc+0x68>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   28fa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28faa:	7919      	ldrb	r1, [r3, #4]
   28fac:	a808      	add	r0, sp, #32
   28fae:	f7ff fd89 	bl	28ac4 <nvs_ate_cmp_const>
	if (!rc) {
   28fb2:	b9a0      	cbnz	r0, 28fde <nvs_gc+0x74>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   28fb4:	6863      	ldr	r3, [r4, #4]
   28fb6:	68a2      	ldr	r2, [r4, #8]
   28fb8:	4416      	add	r6, r2
   28fba:	42b3      	cmp	r3, r6
   28fbc:	d304      	bcc.n	28fc8 <nvs_gc+0x5e>
		rc = nvs_add_gc_done_ate(fs);
   28fbe:	4620      	mov	r0, r4
   28fc0:	f7ff ffbd 	bl	28f3e <nvs_add_gc_done_ate>
		if (rc) {
   28fc4:	4603      	mov	r3, r0
   28fc6:	b920      	cbnz	r0, 28fd2 <nvs_gc+0x68>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   28fc8:	9903      	ldr	r1, [sp, #12]
   28fca:	4620      	mov	r0, r4
   28fcc:	f7ff fde4 	bl	28b98 <nvs_flash_erase_sector>
   28fd0:	4603      	mov	r3, r0
}
   28fd2:	4618      	mov	r0, r3
   28fd4:	b00a      	add	sp, #40	; 0x28
   28fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return len;
   28fda:	2608      	movs	r6, #8
   28fdc:	e7d2      	b.n	28f84 <nvs_gc+0x1a>
	stop_addr = gc_addr - ate_size;
   28fde:	9b02      	ldr	r3, [sp, #8]
   28fe0:	eba3 0806 	sub.w	r8, r3, r6
	if (nvs_close_ate_valid(fs, &close_ate)) {
   28fe4:	a908      	add	r1, sp, #32
   28fe6:	4620      	mov	r0, r4
   28fe8:	f7ff fe6d 	bl	28cc6 <nvs_close_ate_valid>
   28fec:	b138      	cbz	r0, 28ffe <nvs_gc+0x94>
		gc_addr &= ADDR_SECT_MASK;
   28fee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
		gc_addr += close_ate.offset;
   28ff2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   28ff6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   28ffa:	9302      	str	r3, [sp, #8]
   28ffc:	e023      	b.n	29046 <nvs_gc+0xdc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   28ffe:	a902      	add	r1, sp, #8
   29000:	4620      	mov	r0, r4
   29002:	f7ff fe28 	bl	28c56 <nvs_recover_last_ate>
		if (rc) {
   29006:	4603      	mov	r3, r0
   29008:	b1e8      	cbz	r0, 29046 <nvs_gc+0xdc>
   2900a:	e7e2      	b.n	28fd2 <nvs_gc+0x68>
		} while (wlk_addr != fs->ate_wra);
   2900c:	6862      	ldr	r2, [r4, #4]
   2900e:	9b01      	ldr	r3, [sp, #4]
   29010:	429a      	cmp	r2, r3
   29012:	d014      	beq.n	2903e <nvs_gc+0xd4>
			wlk_prev_addr = wlk_addr;
   29014:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   29016:	aa04      	add	r2, sp, #16
   29018:	a901      	add	r1, sp, #4
   2901a:	4620      	mov	r0, r4
   2901c:	f7ff fe7b 	bl	28d16 <nvs_prev_ate>
			if (rc) {
   29020:	4603      	mov	r3, r0
   29022:	2800      	cmp	r0, #0
   29024:	d1d5      	bne.n	28fd2 <nvs_gc+0x68>
			if ((wlk_ate.id == gc_ate.id) &&
   29026:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2902a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2902e:	429a      	cmp	r2, r3
   29030:	d1ec      	bne.n	2900c <nvs_gc+0xa2>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   29032:	a904      	add	r1, sp, #16
   29034:	4620      	mov	r0, r4
   29036:	f7ff fdf2 	bl	28c1e <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2903a:	2800      	cmp	r0, #0
   2903c:	d0e6      	beq.n	2900c <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2903e:	42bd      	cmp	r5, r7
   29040:	d013      	beq.n	2906a <nvs_gc+0x100>
	} while (gc_prev_addr != stop_addr);
   29042:	4547      	cmp	r7, r8
   29044:	d0b6      	beq.n	28fb4 <nvs_gc+0x4a>
		gc_prev_addr = gc_addr;
   29046:	9f02      	ldr	r7, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   29048:	aa06      	add	r2, sp, #24
   2904a:	a902      	add	r1, sp, #8
   2904c:	4620      	mov	r0, r4
   2904e:	f7ff fe62 	bl	28d16 <nvs_prev_ate>
		if (rc) {
   29052:	4603      	mov	r3, r0
   29054:	2800      	cmp	r0, #0
   29056:	d1bc      	bne.n	28fd2 <nvs_gc+0x68>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   29058:	a906      	add	r1, sp, #24
   2905a:	4620      	mov	r0, r4
   2905c:	f7ff fddf 	bl	28c1e <nvs_ate_valid>
   29060:	2800      	cmp	r0, #0
   29062:	d0ee      	beq.n	29042 <nvs_gc+0xd8>
		wlk_addr = fs->ate_wra;
   29064:	6863      	ldr	r3, [r4, #4]
   29066:	9301      	str	r3, [sp, #4]
   29068:	e7d4      	b.n	29014 <nvs_gc+0xaa>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2906a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2906e:	2b00      	cmp	r3, #0
   29070:	d0e7      	beq.n	29042 <nvs_gc+0xd8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   29072:	0c3b      	lsrs	r3, r7, #16
   29074:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   29076:	f8bd 501a 	ldrh.w	r5, [sp, #26]
   2907a:	441d      	add	r5, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2907c:	8923      	ldrh	r3, [r4, #8]
   2907e:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   29082:	a806      	add	r0, sp, #24
   29084:	f7ff fe93 	bl	28dae <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   29088:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2908c:	4629      	mov	r1, r5
   2908e:	4620      	mov	r0, r4
   29090:	f7ff ff15 	bl	28ebe <nvs_flash_block_move>
			if (rc) {
   29094:	4603      	mov	r3, r0
   29096:	2800      	cmp	r0, #0
   29098:	d19b      	bne.n	28fd2 <nvs_gc+0x68>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2909a:	a906      	add	r1, sp, #24
   2909c:	4620      	mov	r0, r4
   2909e:	f7ff ff38 	bl	28f12 <nvs_flash_ate_wrt>
			if (rc) {
   290a2:	4603      	mov	r3, r0
   290a4:	2800      	cmp	r0, #0
   290a6:	d0cc      	beq.n	29042 <nvs_gc+0xd8>
   290a8:	e793      	b.n	28fd2 <nvs_gc+0x68>

000290aa <nvs_flash_wrt_entry>:
{
   290aa:	b570      	push	{r4, r5, r6, lr}
   290ac:	b082      	sub	sp, #8
   290ae:	4604      	mov	r4, r0
   290b0:	4616      	mov	r6, r2
   290b2:	461d      	mov	r5, r3
	entry.id = id;
   290b4:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   290b8:	8903      	ldrh	r3, [r0, #8]
   290ba:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   290be:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   290c2:	23ff      	movs	r3, #255	; 0xff
   290c4:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   290c8:	4668      	mov	r0, sp
   290ca:	f7ff fe70 	bl	28dae <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   290ce:	462a      	mov	r2, r5
   290d0:	4631      	mov	r1, r6
   290d2:	4620      	mov	r0, r4
   290d4:	f7ff fede 	bl	28e94 <nvs_flash_data_wrt>
	if (rc) {
   290d8:	b108      	cbz	r0, 290de <nvs_flash_wrt_entry+0x34>
}
   290da:	b002      	add	sp, #8
   290dc:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   290de:	4669      	mov	r1, sp
   290e0:	4620      	mov	r0, r4
   290e2:	f7ff ff16 	bl	28f12 <nvs_flash_ate_wrt>
	if (rc) {
   290e6:	e7f8      	b.n	290da <nvs_flash_wrt_entry+0x30>

000290e8 <nvs_sector_close>:
{
   290e8:	b530      	push	{r4, r5, lr}
   290ea:	b083      	sub	sp, #12
   290ec:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   290ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   290f0:	681b      	ldr	r3, [r3, #0]
   290f2:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   290f4:	2a01      	cmp	r2, #1
   290f6:	d925      	bls.n	29144 <nvs_sector_close+0x5c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   290f8:	4613      	mov	r3, r2
   290fa:	3207      	adds	r2, #7
   290fc:	425b      	negs	r3, r3
   290fe:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   29100:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29104:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   29108:	2500      	movs	r5, #0
   2910a:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   2910e:	6863      	ldr	r3, [r4, #4]
   29110:	1899      	adds	r1, r3, r2
   29112:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   29116:	0c1b      	lsrs	r3, r3, #16
   29118:	041b      	lsls	r3, r3, #16
	fs->ate_wra += (fs->sector_size - ate_size);
   2911a:	89a1      	ldrh	r1, [r4, #12]
   2911c:	1a8a      	subs	r2, r1, r2
   2911e:	4413      	add	r3, r2
   29120:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   29122:	4668      	mov	r0, sp
   29124:	f7ff fe43 	bl	28dae <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   29128:	4669      	mov	r1, sp
   2912a:	4620      	mov	r0, r4
   2912c:	f7ff fef1 	bl	28f12 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   29130:	1d21      	adds	r1, r4, #4
   29132:	4620      	mov	r0, r4
   29134:	f7ff fcd2 	bl	28adc <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   29138:	88e3      	ldrh	r3, [r4, #6]
   2913a:	041b      	lsls	r3, r3, #16
   2913c:	60a3      	str	r3, [r4, #8]
}
   2913e:	4628      	mov	r0, r5
   29140:	b003      	add	sp, #12
   29142:	bd30      	pop	{r4, r5, pc}
		return len;
   29144:	2208      	movs	r2, #8
   29146:	e7db      	b.n	29100 <nvs_sector_close+0x18>

00029148 <nvs_delete>:
{
   29148:	b508      	push	{r3, lr}
	return nvs_write(fs, id, NULL, 0);
   2914a:	2300      	movs	r3, #0
   2914c:	461a      	mov	r2, r3
   2914e:	f7e8 fd27 	bl	11ba0 <nvs_write>
}
   29152:	bd08      	pop	{r3, pc}

00029154 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   29154:	b510      	push	{r4, lr}
   29156:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   29158:	2400      	movs	r4, #0
   2915a:	9400      	str	r4, [sp, #0]
   2915c:	f7e8 fdd8 	bl	11d10 <nvs_read_hist>
	return rc;
}
   29160:	b002      	add	sp, #8
   29162:	bd10      	pop	{r4, pc}

00029164 <should_bail>:
	if (info->start_offset < data->area_off) {
   29164:	6800      	ldr	r0, [r0, #0]
   29166:	684b      	ldr	r3, [r1, #4]
   29168:	4298      	cmp	r0, r3
   2916a:	d30b      	bcc.n	29184 <should_bail+0x20>
{
   2916c:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2916e:	688c      	ldr	r4, [r1, #8]
   29170:	4423      	add	r3, r4
   29172:	4298      	cmp	r0, r3
   29174:	d209      	bcs.n	2918a <should_bail+0x26>
	} else if (data->ret_idx >= data->ret_len) {
   29176:	6908      	ldr	r0, [r1, #16]
   29178:	694b      	ldr	r3, [r1, #20]
   2917a:	4298      	cmp	r0, r3
   2917c:	d209      	bcs.n	29192 <should_bail+0x2e>
	return false;
   2917e:	2000      	movs	r0, #0
}
   29180:	bc10      	pop	{r4}
   29182:	4770      	bx	lr
		*bail_value = true;
   29184:	2001      	movs	r0, #1
   29186:	7010      	strb	r0, [r2, #0]
}
   29188:	4770      	bx	lr
		*bail_value = false;
   2918a:	2300      	movs	r3, #0
   2918c:	7013      	strb	r3, [r2, #0]
		return true;
   2918e:	2001      	movs	r0, #1
   29190:	e7f6      	b.n	29180 <should_bail+0x1c>
		data->status = -ENOMEM;
   29192:	f06f 030b 	mvn.w	r3, #11
   29196:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   29198:	2300      	movs	r3, #0
   2919a:	7013      	strb	r3, [r2, #0]
		return true;
   2919c:	2001      	movs	r0, #1
   2919e:	e7ef      	b.n	29180 <should_bail+0x1c>

000291a0 <get_sectors_cb>:
{
   291a0:	b570      	push	{r4, r5, r6, lr}
   291a2:	b082      	sub	sp, #8
   291a4:	4605      	mov	r5, r0
   291a6:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
   291a8:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
   291aa:	f10d 0207 	add.w	r2, sp, #7
   291ae:	f7ff ffd9 	bl	29164 <should_bail>
   291b2:	b980      	cbnz	r0, 291d6 <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   291b4:	682b      	ldr	r3, [r5, #0]
   291b6:	6861      	ldr	r1, [r4, #4]
   291b8:	6922      	ldr	r2, [r4, #16]
   291ba:	1a5b      	subs	r3, r3, r1
   291bc:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   291c0:	6923      	ldr	r3, [r4, #16]
   291c2:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   291c6:	686b      	ldr	r3, [r5, #4]
   291c8:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
   291ca:	6923      	ldr	r3, [r4, #16]
   291cc:	3301      	adds	r3, #1
   291ce:	6123      	str	r3, [r4, #16]
	return true;
   291d0:	2001      	movs	r0, #1
}
   291d2:	b002      	add	sp, #8
   291d4:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
   291d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   291da:	e7fa      	b.n	291d2 <get_sectors_cb+0x32>

000291dc <flash_area_layout>:
{
   291dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   291de:	460d      	mov	r5, r1
   291e0:	4617      	mov	r7, r2
   291e2:	461e      	mov	r6, r3
   291e4:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
   291e6:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
   291e8:	f7e8 fe02 	bl	11df0 <get_flash_area_from_id>
	if (fa == NULL) {
   291ec:	b1b8      	cbz	r0, 2921e <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
   291ee:	6843      	ldr	r3, [r0, #4]
   291f0:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
   291f2:	6883      	ldr	r3, [r0, #8]
   291f4:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
   291f6:	60e7      	str	r7, [r4, #12]
	cb_data->ret_idx = 0U;
   291f8:	2200      	movs	r2, #0
   291fa:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
   291fc:	682b      	ldr	r3, [r5, #0]
   291fe:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
   29200:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
   29202:	68c0      	ldr	r0, [r0, #12]
   29204:	f7f8 fa94 	bl	21730 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   29208:	b160      	cbz	r0, 29224 <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
   2920a:	4622      	mov	r2, r4
   2920c:	4631      	mov	r1, r6
   2920e:	f004 fe4a 	bl	2dea6 <flash_page_foreach>
	if (cb_data->status == 0) {
   29212:	69a3      	ldr	r3, [r4, #24]
   29214:	b90b      	cbnz	r3, 2921a <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
   29216:	6923      	ldr	r3, [r4, #16]
   29218:	602b      	str	r3, [r5, #0]
	return cb_data->status;
   2921a:	69a0      	ldr	r0, [r4, #24]
}
   2921c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2921e:	f06f 0015 	mvn.w	r0, #21
   29222:	e7fb      	b.n	2921c <flash_area_layout+0x40>
		return -ENODEV;
   29224:	f06f 0012 	mvn.w	r0, #18
   29228:	e7f8      	b.n	2921c <flash_area_layout+0x40>

0002922a <settings_load>:
{
   2922a:	b508      	push	{r3, lr}
	return settings_load_subtree(NULL);
   2922c:	2000      	movs	r0, #0
   2922e:	f7e8 fe53 	bl	11ed8 <settings_load_subtree>
}
   29232:	bd08      	pop	{r3, pc}

00029234 <settings_delete>:
{
   29234:	b508      	push	{r3, lr}
	return settings_save_one(name, NULL, 0);
   29236:	2200      	movs	r2, #0
   29238:	4611      	mov	r1, r2
   2923a:	f7e8 fe11 	bl	11e60 <settings_save_one>
}
   2923e:	bd08      	pop	{r3, pc}

00029240 <settings_name_steq>:
{
   29240:	b410      	push	{r4}
	if (next) {
   29242:	4614      	mov	r4, r2
   29244:	b10a      	cbz	r2, 2924a <settings_name_steq+0xa>
		*next = NULL;
   29246:	2300      	movs	r3, #0
   29248:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   2924a:	b1d0      	cbz	r0, 29282 <settings_name_steq+0x42>
   2924c:	b919      	cbnz	r1, 29256 <settings_name_steq+0x16>
		return 0;
   2924e:	2000      	movs	r0, #0
   29250:	e01a      	b.n	29288 <settings_name_steq+0x48>
		key++;
   29252:	3101      	adds	r1, #1
		name++;
   29254:	3001      	adds	r0, #1
	while ((*key != '\0') && (*key == *name) &&
   29256:	780a      	ldrb	r2, [r1, #0]
   29258:	b12a      	cbz	r2, 29266 <settings_name_steq+0x26>
   2925a:	7803      	ldrb	r3, [r0, #0]
   2925c:	429a      	cmp	r2, r3
   2925e:	d102      	bne.n	29266 <settings_name_steq+0x26>
   29260:	b10b      	cbz	r3, 29266 <settings_name_steq+0x26>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   29262:	2b3d      	cmp	r3, #61	; 0x3d
   29264:	d1f5      	bne.n	29252 <settings_name_steq+0x12>
	if (*key != '\0') {
   29266:	b972      	cbnz	r2, 29286 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   29268:	7803      	ldrb	r3, [r0, #0]
   2926a:	2b2f      	cmp	r3, #47	; 0x2f
   2926c:	d004      	beq.n	29278 <settings_name_steq+0x38>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2926e:	2b3d      	cmp	r3, #61	; 0x3d
   29270:	d00c      	beq.n	2928c <settings_name_steq+0x4c>
   29272:	b16b      	cbz	r3, 29290 <settings_name_steq+0x50>
	return 0;
   29274:	2000      	movs	r0, #0
   29276:	e007      	b.n	29288 <settings_name_steq+0x48>
		if (next) {
   29278:	b10c      	cbz	r4, 2927e <settings_name_steq+0x3e>
			*next = name + 1;
   2927a:	3001      	adds	r0, #1
   2927c:	6020      	str	r0, [r4, #0]
		return 1;
   2927e:	2001      	movs	r0, #1
   29280:	e002      	b.n	29288 <settings_name_steq+0x48>
		return 0;
   29282:	2000      	movs	r0, #0
   29284:	e000      	b.n	29288 <settings_name_steq+0x48>
		return 0;
   29286:	2000      	movs	r0, #0
}
   29288:	bc10      	pop	{r4}
   2928a:	4770      	bx	lr
		return 1;
   2928c:	2001      	movs	r0, #1
   2928e:	e7fb      	b.n	29288 <settings_name_steq+0x48>
   29290:	2001      	movs	r0, #1
   29292:	e7f9      	b.n	29288 <settings_name_steq+0x48>

00029294 <settings_name_next>:
{
   29294:	b410      	push	{r4}
   29296:	4602      	mov	r2, r0
	if (next) {
   29298:	460c      	mov	r4, r1
   2929a:	b109      	cbz	r1, 292a0 <settings_name_next+0xc>
		*next = NULL;
   2929c:	2300      	movs	r3, #0
   2929e:	600b      	str	r3, [r1, #0]
	if (!name) {
   292a0:	b192      	cbz	r2, 292c8 <settings_name_next+0x34>
	int rc = 0;
   292a2:	2000      	movs	r0, #0
   292a4:	e001      	b.n	292aa <settings_name_next+0x16>
		rc++;
   292a6:	3001      	adds	r0, #1
		name++;
   292a8:	3201      	adds	r2, #1
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   292aa:	7813      	ldrb	r3, [r2, #0]
   292ac:	b11b      	cbz	r3, 292b6 <settings_name_next+0x22>
   292ae:	2b3d      	cmp	r3, #61	; 0x3d
   292b0:	d001      	beq.n	292b6 <settings_name_next+0x22>
   292b2:	2b2f      	cmp	r3, #47	; 0x2f
   292b4:	d1f7      	bne.n	292a6 <settings_name_next+0x12>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   292b6:	2b2f      	cmp	r3, #47	; 0x2f
   292b8:	d001      	beq.n	292be <settings_name_next+0x2a>
}
   292ba:	bc10      	pop	{r4}
   292bc:	4770      	bx	lr
		if (next) {
   292be:	2c00      	cmp	r4, #0
   292c0:	d0fb      	beq.n	292ba <settings_name_next+0x26>
			*next = name + 1;
   292c2:	3201      	adds	r2, #1
   292c4:	6022      	str	r2, [r4, #0]
		return rc;
   292c6:	e7f8      	b.n	292ba <settings_name_next+0x26>
		return 0;
   292c8:	2000      	movs	r0, #0
   292ca:	e7f6      	b.n	292ba <settings_name_next+0x26>

000292cc <settings_nvs_read_fn>:
{
   292cc:	b510      	push	{r4, lr}
   292ce:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   292d0:	4613      	mov	r3, r2
   292d2:	460a      	mov	r2, r1
   292d4:	8881      	ldrh	r1, [r0, #4]
   292d6:	6800      	ldr	r0, [r0, #0]
   292d8:	f7ff ff3c 	bl	29154 <nvs_read>
   292dc:	4603      	mov	r3, r0
	if (rc > (ssize_t)len) {
   292de:	4620      	mov	r0, r4
   292e0:	429c      	cmp	r4, r3
   292e2:	db00      	blt.n	292e6 <settings_nvs_read_fn+0x1a>
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   292e4:	4618      	mov	r0, r3
}
   292e6:	bd10      	pop	{r4, pc}

000292e8 <settings_nvs_save>:
{
   292e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292ec:	b097      	sub	sp, #92	; 0x5c
   292ee:	9300      	str	r3, [sp, #0]
	if (!name) {
   292f0:	2900      	cmp	r1, #0
   292f2:	f000 808e 	beq.w	29412 <settings_nvs_save+0x12a>
   292f6:	4606      	mov	r6, r0
   292f8:	4692      	mov	sl, r2
   292fa:	468b      	mov	fp, r1
	delete = ((value == NULL) || (val_len == 0));
   292fc:	b13a      	cbz	r2, 2930e <settings_nvs_save+0x26>
   292fe:	b943      	cbnz	r3, 29312 <settings_nvs_save+0x2a>
   29300:	2701      	movs	r7, #1
	name_id = cf->last_name_id + 1;
   29302:	f9b6 5038 	ldrsh.w	r5, [r6, #56]	; 0x38
   29306:	3501      	adds	r5, #1
   29308:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2930a:	9501      	str	r5, [sp, #4]
   2930c:	e007      	b.n	2931e <settings_nvs_save+0x36>
	delete = ((value == NULL) || (val_len == 0));
   2930e:	2701      	movs	r7, #1
   29310:	e7f7      	b.n	29302 <settings_nvs_save+0x1a>
   29312:	2700      	movs	r7, #0
   29314:	e7f5      	b.n	29302 <settings_nvs_save+0x1a>
			if (rc == -ENOENT) {
   29316:	f110 0f02 	cmn.w	r0, #2
   2931a:	d03d      	beq.n	29398 <settings_nvs_save+0xb0>
	delete = ((value == NULL) || (val_len == 0));
   2931c:	4625      	mov	r5, r4
		name_id--;
   2931e:	1e6c      	subs	r4, r5, #1
   29320:	b2a4      	uxth	r4, r4
		if (name_id == NVS_NAMECNT_ID) {
   29322:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   29326:	d059      	beq.n	293dc <settings_nvs_save+0xf4>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   29328:	f106 0908 	add.w	r9, r6, #8
   2932c:	234a      	movs	r3, #74	; 0x4a
   2932e:	aa03      	add	r2, sp, #12
   29330:	4621      	mov	r1, r4
   29332:	4648      	mov	r0, r9
   29334:	f7ff ff0e 	bl	29154 <nvs_read>
		if (rc < 0) {
   29338:	2800      	cmp	r0, #0
   2933a:	dbec      	blt.n	29316 <settings_nvs_save+0x2e>
		rdname[rc] = '\0';
   2933c:	ab16      	add	r3, sp, #88	; 0x58
   2933e:	4418      	add	r0, r3
   29340:	2300      	movs	r3, #0
   29342:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   29346:	a903      	add	r1, sp, #12
   29348:	4658      	mov	r0, fp
   2934a:	f001 fa56 	bl	2a7fa <strcmp>
   2934e:	4680      	mov	r8, r0
   29350:	2800      	cmp	r0, #0
   29352:	d1e3      	bne.n	2931c <settings_nvs_save+0x34>
		if ((delete) && (name_id == cf->last_name_id)) {
   29354:	b117      	cbz	r7, 2935c <settings_nvs_save+0x74>
   29356:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   29358:	42a3      	cmp	r3, r4
   2935a:	d01f      	beq.n	2939c <settings_nvs_save+0xb4>
		if (delete) {
   2935c:	bb67      	cbnz	r7, 293b8 <settings_nvs_save+0xd0>
		write_name = false;
   2935e:	463d      	mov	r5, r7
	if (delete) {
   29360:	2f00      	cmp	r7, #0
   29362:	d159      	bne.n	29418 <settings_nvs_save+0x130>
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   29364:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
   29368:	d05c      	beq.n	29424 <settings_nvs_save+0x13c>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2936a:	f106 0708 	add.w	r7, r6, #8
   2936e:	f504 4180 	add.w	r1, r4, #16384	; 0x4000
   29372:	9b00      	ldr	r3, [sp, #0]
   29374:	4652      	mov	r2, sl
   29376:	b289      	uxth	r1, r1
   29378:	4638      	mov	r0, r7
   2937a:	f7e8 fc11 	bl	11ba0 <nvs_write>
	if (rc < 0) {
   2937e:	f1b0 0800 	subs.w	r8, r0, #0
   29382:	db4b      	blt.n	2941c <settings_nvs_save+0x134>
	if (write_name) {
   29384:	bb6d      	cbnz	r5, 293e2 <settings_nvs_save+0xfa>
	if (write_name_id > cf->last_name_id) {
   29386:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   29388:	42a3      	cmp	r3, r4
   2938a:	d337      	bcc.n	293fc <settings_nvs_save+0x114>
	if (rc < 0) {
   2938c:	f1b8 0f00 	cmp.w	r8, #0
   29390:	db44      	blt.n	2941c <settings_nvs_save+0x134>
	return 0;
   29392:	f04f 0800 	mov.w	r8, #0
   29396:	e041      	b.n	2941c <settings_nvs_save+0x134>
				write_name_id = name_id;
   29398:	9401      	str	r4, [sp, #4]
			continue;
   2939a:	e7bf      	b.n	2931c <settings_nvs_save+0x34>
			cf->last_name_id--;
   2939c:	3b01      	subs	r3, #1
   2939e:	4632      	mov	r2, r6
   293a0:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   293a4:	2302      	movs	r3, #2
   293a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   293aa:	4648      	mov	r0, r9
   293ac:	f7e8 fbf8 	bl	11ba0 <nvs_write>
			if (rc < 0) {
   293b0:	2800      	cmp	r0, #0
   293b2:	dad3      	bge.n	2935c <settings_nvs_save+0x74>
				return rc;
   293b4:	4680      	mov	r8, r0
   293b6:	e031      	b.n	2941c <settings_nvs_save+0x134>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   293b8:	4621      	mov	r1, r4
   293ba:	4648      	mov	r0, r9
   293bc:	f7ff fec4 	bl	29148 <nvs_delete>
			if (rc >= 0) {
   293c0:	2800      	cmp	r0, #0
   293c2:	da03      	bge.n	293cc <settings_nvs_save+0xe4>
			if (rc < 0) {
   293c4:	2800      	cmp	r0, #0
   293c6:	da29      	bge.n	2941c <settings_nvs_save+0x134>
				return rc;
   293c8:	4680      	mov	r8, r0
   293ca:	e027      	b.n	2941c <settings_nvs_save+0x134>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   293cc:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   293d0:	313f      	adds	r1, #63	; 0x3f
   293d2:	b289      	uxth	r1, r1
   293d4:	4648      	mov	r0, r9
   293d6:	f7ff feb7 	bl	29148 <nvs_delete>
   293da:	e7f3      	b.n	293c4 <settings_nvs_save+0xdc>
   293dc:	9c01      	ldr	r4, [sp, #4]
	write_name = true;
   293de:	2501      	movs	r5, #1
   293e0:	e7be      	b.n	29360 <settings_nvs_save+0x78>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   293e2:	4658      	mov	r0, fp
   293e4:	f001 f9f7 	bl	2a7d6 <strlen>
   293e8:	4603      	mov	r3, r0
   293ea:	465a      	mov	r2, fp
   293ec:	4621      	mov	r1, r4
   293ee:	4638      	mov	r0, r7
   293f0:	f7e8 fbd6 	bl	11ba0 <nvs_write>
		if (rc < 0) {
   293f4:	f1b0 0800 	subs.w	r8, r0, #0
   293f8:	dac5      	bge.n	29386 <settings_nvs_save+0x9e>
   293fa:	e00f      	b.n	2941c <settings_nvs_save+0x134>
		cf->last_name_id = write_name_id;
   293fc:	4632      	mov	r2, r6
   293fe:	f822 4f38 	strh.w	r4, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   29402:	2302      	movs	r3, #2
   29404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29408:	4638      	mov	r0, r7
   2940a:	f7e8 fbc9 	bl	11ba0 <nvs_write>
   2940e:	4680      	mov	r8, r0
   29410:	e7bc      	b.n	2938c <settings_nvs_save+0xa4>
		return -EINVAL;
   29412:	f06f 0815 	mvn.w	r8, #21
   29416:	e001      	b.n	2941c <settings_nvs_save+0x134>
		return 0;
   29418:	f04f 0800 	mov.w	r8, #0
}
   2941c:	4640      	mov	r0, r8
   2941e:	b017      	add	sp, #92	; 0x5c
   29420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   29424:	f06f 080b 	mvn.w	r8, #11
   29428:	e7f8      	b.n	2941c <settings_nvs_save+0x134>

0002942a <settings_nvs_backend_init>:
{
   2942a:	b570      	push	{r4, r5, r6, lr}
   2942c:	b082      	sub	sp, #8
   2942e:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   29430:	f100 0508 	add.w	r5, r0, #8
   29434:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   29436:	4628      	mov	r0, r5
   29438:	f7e8 fb2c 	bl	11a94 <nvs_init>
	if (rc) {
   2943c:	4606      	mov	r6, r0
   2943e:	b110      	cbz	r0, 29446 <settings_nvs_backend_init+0x1c>
}
   29440:	4630      	mov	r0, r6
   29442:	b002      	add	sp, #8
   29444:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   29446:	2302      	movs	r3, #2
   29448:	f10d 0206 	add.w	r2, sp, #6
   2944c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29450:	4628      	mov	r0, r5
   29452:	f7ff fe7f 	bl	29154 <nvs_read>
	if (rc < 0) {
   29456:	2800      	cmp	r0, #0
   29458:	db03      	blt.n	29462 <settings_nvs_backend_init+0x38>
		cf->last_name_id = last_name_id;
   2945a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2945e:	8723      	strh	r3, [r4, #56]	; 0x38
   29460:	e7ee      	b.n	29440 <settings_nvs_backend_init+0x16>
		cf->last_name_id = NVS_NAMECNT_ID;
   29462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   29466:	8723      	strh	r3, [r4, #56]	; 0x38
   29468:	e7ea      	b.n	29440 <settings_nvs_backend_init+0x16>

0002946a <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2946a:	2200      	movs	r2, #0
   2946c:	6002      	str	r2, [r0, #0]
   2946e:	6042      	str	r2, [r0, #4]
   29470:	6082      	str	r2, [r0, #8]
}
   29472:	4770      	bx	lr

00029474 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   29474:	428b      	cmp	r3, r1
   29476:	d901      	bls.n	2947c <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   29478:	2000      	movs	r0, #0
	}
}
   2947a:	4770      	bx	lr
{
   2947c:	b538      	push	{r3, r4, r5, lr}
   2947e:	4615      	mov	r5, r2
   29480:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   29482:	461a      	mov	r2, r3
   29484:	4629      	mov	r1, r5
   29486:	f001 fa0a 	bl	2a89e <memcpy>
		return from_len;
   2948a:	4620      	mov	r0, r4
}
   2948c:	bd38      	pop	{r3, r4, r5, pc}

0002948e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2948e:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   29490:	f001 fa29 	bl	2a8e6 <memset>
}
   29494:	bd08      	pop	{r3, pc}

00029496 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   29496:	09c3      	lsrs	r3, r0, #7
   29498:	005a      	lsls	r2, r3, #1
   2949a:	4413      	add	r3, r2
   2949c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   294a0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   294a4:	b2c0      	uxtb	r0, r0
   294a6:	4770      	bx	lr

000294a8 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   294a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   294aa:	b0a9      	sub	sp, #164	; 0xa4
   294ac:	4606      	mov	r6, r0
   294ae:	460f      	mov	r7, r1
   294b0:	4614      	mov	r4, r2
	uECC_word_t _random[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];
	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t tries;

	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   294b2:	2500      	movs	r5, #0
   294b4:	e00f      	b.n	294d6 <uECC_make_key+0x2e>
		/* Generating _private uniformly at random: */
		uECC_RNG_Function rng_function = uECC_get_rng();
		if (!rng_function ||
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
   294b6:	2000      	movs	r0, #0

      			return 1;
    		}
  	}
	return 0;
}
   294b8:	b029      	add	sp, #164	; 0xa4
   294ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   294bc:	f343 1347 	sbfx	r3, r3, #5, #8
   294c0:	a918      	add	r1, sp, #96	; 0x60
   294c2:	a810      	add	r0, sp, #64	; 0x40
   294c4:	f000 fa44 	bl	29950 <uECC_vli_mmod>
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   294c8:	4622      	mov	r2, r4
   294ca:	a910      	add	r1, sp, #64	; 0x40
   294cc:	4668      	mov	r0, sp
   294ce:	f000 fe9f 	bl	2a210 <EccPoint_compute_public_key>
   294d2:	b9a0      	cbnz	r0, 294fe <uECC_make_key+0x56>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   294d4:	3501      	adds	r5, #1
   294d6:	2d3f      	cmp	r5, #63	; 0x3f
   294d8:	d835      	bhi.n	29546 <uECC_make_key+0x9e>
		uECC_RNG_Function rng_function = uECC_get_rng();
   294da:	f7e9 f8ab 	bl	12634 <uECC_get_rng>
		if (!rng_function ||
   294de:	4603      	mov	r3, r0
   294e0:	2800      	cmp	r0, #0
   294e2:	d0e8      	beq.n	294b6 <uECC_make_key+0xe>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   294e4:	2140      	movs	r1, #64	; 0x40
   294e6:	a818      	add	r0, sp, #96	; 0x60
   294e8:	4798      	blx	r3
		if (!rng_function ||
   294ea:	2800      	cmp	r0, #0
   294ec:	d0e3      	beq.n	294b6 <uECC_make_key+0xe>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   294ee:	f104 0224 	add.w	r2, r4, #36	; 0x24
   294f2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   294f6:	331f      	adds	r3, #31
   294f8:	d5e0      	bpl.n	294bc <uECC_make_key+0x14>
   294fa:	331f      	adds	r3, #31
   294fc:	e7de      	b.n	294bc <uECC_make_key+0x14>
					       BITS_TO_BYTES(curve->num_n_bits),
   294fe:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   29502:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
   29504:	4619      	mov	r1, r3
   29506:	2b00      	cmp	r3, #0
   29508:	db1b      	blt.n	29542 <uECC_make_key+0x9a>
   2950a:	aa10      	add	r2, sp, #64	; 0x40
   2950c:	10c9      	asrs	r1, r1, #3
   2950e:	4638      	mov	r0, r7
   29510:	f000 fea8 	bl	2a264 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key,
   29514:	466a      	mov	r2, sp
   29516:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2951a:	4630      	mov	r0, r6
   2951c:	f000 fea2 	bl	2a264 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   29520:	f994 1001 	ldrsb.w	r1, [r4, #1]
					       _public + curve->num_words);
   29524:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   29528:	eb0d 0282 	add.w	r2, sp, r2, lsl #2
   2952c:	1870      	adds	r0, r6, r1
   2952e:	f000 fe99 	bl	2a264 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   29532:	ac10      	add	r4, sp, #64	; 0x40
   29534:	2220      	movs	r2, #32
   29536:	2100      	movs	r1, #0
   29538:	4620      	mov	r0, r4
   2953a:	f001 f9d4 	bl	2a8e6 <memset>
      			return 1;
   2953e:	2001      	movs	r0, #1
   29540:	e7ba      	b.n	294b8 <uECC_make_key+0x10>
			uECC_vli_nativeToBytes(private_key,
   29542:	1dd9      	adds	r1, r3, #7
   29544:	e7e1      	b.n	2950a <uECC_make_key+0x62>
	return 0;
   29546:	2000      	movs	r0, #0
   29548:	e7b6      	b.n	294b8 <uECC_make_key+0x10>

0002954a <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2954a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2954e:	b0a5      	sub	sp, #148	; 0x94
   29550:	4606      	mov	r6, r0
   29552:	4690      	mov	r8, r2
   29554:	461c      	mov	r4, r3

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];

	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
   29556:	ab0c      	add	r3, sp, #48	; 0x30
   29558:	9302      	str	r3, [sp, #8]
   2955a:	ab04      	add	r3, sp, #16
   2955c:	9303      	str	r3, [sp, #12]
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   2955e:	f994 9000 	ldrsb.w	r9, [r4]
	wordcount_t num_bytes = curve->num_bytes;
   29562:	f994 7001 	ldrsb.w	r7, [r4, #1]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   29566:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
	uECC_vli_bytesToNative(_private,
   2956a:	3207      	adds	r2, #7
   2956c:	d44a      	bmi.n	29604 <uECC_shared_secret+0xba>
   2956e:	ad0c      	add	r5, sp, #48	; 0x30
   29570:	10d2      	asrs	r2, r2, #3
   29572:	4628      	mov	r0, r5
   29574:	f000 fe8a 	bl	2a28c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   29578:	463a      	mov	r2, r7
   2957a:	4631      	mov	r1, r6
   2957c:	a814      	add	r0, sp, #80	; 0x50
   2957e:	f000 fe85 	bl	2a28c <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   29582:	463a      	mov	r2, r7
   29584:	19f1      	adds	r1, r6, r7
   29586:	ab14      	add	r3, sp, #80	; 0x50
   29588:	eb03 0089 	add.w	r0, r3, r9, lsl #2
   2958c:	f000 fe7e 	bl	2a28c <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   29590:	ae04      	add	r6, sp, #16
   29592:	4623      	mov	r3, r4
   29594:	4632      	mov	r2, r6
   29596:	4629      	mov	r1, r5
   29598:	4628      	mov	r0, r5
   2959a:	f000 fe07 	bl	2a1ac <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2959e:	fab0 f080 	clz	r0, r0
   295a2:	0940      	lsrs	r0, r0, #5
   295a4:	ab24      	add	r3, sp, #144	; 0x90
   295a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   295aa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   295ae:	9401      	str	r4, [sp, #4]
   295b0:	3301      	adds	r3, #1
   295b2:	b21b      	sxth	r3, r3
   295b4:	9300      	str	r3, [sp, #0]
   295b6:	2300      	movs	r3, #0
   295b8:	f850 2c88 	ldr.w	r2, [r0, #-136]
   295bc:	a914      	add	r1, sp, #80	; 0x50
   295be:	4608      	mov	r0, r1
   295c0:	f000 fd3e 	bl	2a040 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   295c4:	aa14      	add	r2, sp, #80	; 0x50
   295c6:	4639      	mov	r1, r7
   295c8:	4640      	mov	r0, r8
   295ca:	f000 fe4b 	bl	2a264 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   295ce:	4621      	mov	r1, r4
   295d0:	a814      	add	r0, sp, #80	; 0x50
   295d2:	f000 fc70 	bl	29eb6 <EccPoint_isZero>
   295d6:	fab0 f480 	clz	r4, r0
   295da:	0964      	lsrs	r4, r4, #5
   295dc:	af02      	add	r7, sp, #8
   295de:	2208      	movs	r2, #8
   295e0:	2100      	movs	r1, #0
   295e2:	4638      	mov	r0, r7
   295e4:	f001 f97f 	bl	2a8e6 <memset>
   295e8:	2220      	movs	r2, #32
   295ea:	2100      	movs	r1, #0
   295ec:	4630      	mov	r0, r6
   295ee:	f001 f97a 	bl	2a8e6 <memset>
   295f2:	2220      	movs	r2, #32
   295f4:	2100      	movs	r1, #0
   295f6:	4628      	mov	r0, r5
   295f8:	f001 f975 	bl	2a8e6 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   295fc:	4620      	mov	r0, r4
   295fe:	b025      	add	sp, #148	; 0x94
   29600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uECC_vli_bytesToNative(_private,
   29604:	3207      	adds	r2, #7
   29606:	e7b2      	b.n	2956e <uECC_shared_secret+0x24>

00029608 <vli_numDigits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   29608:	3901      	subs	r1, #1
   2960a:	b249      	sxtb	r1, r1
   2960c:	2900      	cmp	r1, #0
   2960e:	db05      	blt.n	2961c <vli_numDigits+0x14>
   29610:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   29614:	b913      	cbnz	r3, 2961c <vli_numDigits+0x14>
   29616:	3901      	subs	r1, #1
   29618:	b249      	sxtb	r1, r1
   2961a:	e7f7      	b.n	2960c <vli_numDigits+0x4>
	return (i + 1);
   2961c:	1c48      	adds	r0, r1, #1
}
   2961e:	b240      	sxtb	r0, r0
   29620:	4770      	bx	lr

00029622 <uECC_vli_rshift1>:
{
   29622:	b410      	push	{r4}
	vli += num_words;
   29624:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   29628:	2300      	movs	r3, #0
	while (vli-- > end) {
   2962a:	1f0c      	subs	r4, r1, #4
   2962c:	4281      	cmp	r1, r0
   2962e:	d908      	bls.n	29642 <uECC_vli_rshift1+0x20>
		uECC_word_t temp = *vli;
   29630:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
   29634:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   29638:	f841 3c04 	str.w	r3, [r1, #-4]
		carry = temp << (uECC_WORD_BITS - 1);
   2963c:	07d3      	lsls	r3, r2, #31
	while (vli-- > end) {
   2963e:	4621      	mov	r1, r4
   29640:	e7f3      	b.n	2962a <uECC_vli_rshift1+0x8>
}
   29642:	bc10      	pop	{r4}
   29644:	4770      	bx	lr

00029646 <muladd>:
{
   29646:	b4f0      	push	{r4, r5, r6, r7}
   29648:	9f04      	ldr	r7, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2964a:	fba0 0101 	umull	r0, r1, r0, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2964e:	6816      	ldr	r6, [r2, #0]
   29650:	f8d3 c000 	ldr.w	ip, [r3]
	r01 += p;
   29654:	1984      	adds	r4, r0, r6
   29656:	eb41 050c 	adc.w	r5, r1, ip
	*r2 += (r01 < p);
   2965a:	428d      	cmp	r5, r1
   2965c:	bf08      	it	eq
   2965e:	4284      	cmpeq	r4, r0
   29660:	bf34      	ite	cc
   29662:	2001      	movcc	r0, #1
   29664:	2000      	movcs	r0, #0
   29666:	6839      	ldr	r1, [r7, #0]
   29668:	4401      	add	r1, r0
   2966a:	6039      	str	r1, [r7, #0]
	*r1 = r01 >> uECC_WORD_BITS;
   2966c:	601d      	str	r5, [r3, #0]
	*r0 = (uECC_word_t)r01;
   2966e:	6014      	str	r4, [r2, #0]
}
   29670:	bcf0      	pop	{r4, r5, r6, r7}
   29672:	4770      	bx	lr

00029674 <uECC_vli_mult>:
{
   29674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29678:	b086      	sub	sp, #24
   2967a:	4681      	mov	r9, r0
   2967c:	460e      	mov	r6, r1
   2967e:	4617      	mov	r7, r2
   29680:	4698      	mov	r8, r3
	uECC_word_t r0 = 0;
   29682:	2500      	movs	r5, #0
   29684:	9505      	str	r5, [sp, #20]
	uECC_word_t r1 = 0;
   29686:	9504      	str	r5, [sp, #16]
	uECC_word_t r2 = 0;
   29688:	9503      	str	r5, [sp, #12]
	for (k = 0; k < num_words; ++k) {
   2968a:	e00a      	b.n	296a2 <uECC_vli_mult+0x2e>
		result[k] = r0;
   2968c:	9b05      	ldr	r3, [sp, #20]
   2968e:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
		r0 = r1;
   29692:	9b04      	ldr	r3, [sp, #16]
   29694:	9305      	str	r3, [sp, #20]
		r1 = r2;
   29696:	9b03      	ldr	r3, [sp, #12]
   29698:	9304      	str	r3, [sp, #16]
		r2 = 0;
   2969a:	2300      	movs	r3, #0
   2969c:	9303      	str	r3, [sp, #12]
	for (k = 0; k < num_words; ++k) {
   2969e:	3501      	adds	r5, #1
   296a0:	b26d      	sxtb	r5, r5
   296a2:	4545      	cmp	r5, r8
   296a4:	da10      	bge.n	296c8 <uECC_vli_mult+0x54>
		for (i = 0; i <= k; ++i) {
   296a6:	2400      	movs	r4, #0
   296a8:	42ac      	cmp	r4, r5
   296aa:	dcef      	bgt.n	2968c <uECC_vli_mult+0x18>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   296ac:	1b29      	subs	r1, r5, r4
   296ae:	ab03      	add	r3, sp, #12
   296b0:	9300      	str	r3, [sp, #0]
   296b2:	ab04      	add	r3, sp, #16
   296b4:	aa05      	add	r2, sp, #20
   296b6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   296ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   296be:	f7ff ffc2 	bl	29646 <muladd>
		for (i = 0; i <= k; ++i) {
   296c2:	3401      	adds	r4, #1
   296c4:	b264      	sxtb	r4, r4
   296c6:	e7ef      	b.n	296a8 <uECC_vli_mult+0x34>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   296c8:	46c2      	mov	sl, r8
   296ca:	e01b      	b.n	29704 <uECC_vli_mult+0x90>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   296cc:	1b29      	subs	r1, r5, r4
   296ce:	ab03      	add	r3, sp, #12
   296d0:	9300      	str	r3, [sp, #0]
   296d2:	ab04      	add	r3, sp, #16
   296d4:	aa05      	add	r2, sp, #20
   296d6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   296da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   296de:	f7ff ffb2 	bl	29646 <muladd>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   296e2:	3401      	adds	r4, #1
   296e4:	b264      	sxtb	r4, r4
   296e6:	4544      	cmp	r4, r8
   296e8:	dbf0      	blt.n	296cc <uECC_vli_mult+0x58>
		result[k] = r0;
   296ea:	9b05      	ldr	r3, [sp, #20]
   296ec:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
		r0 = r1;
   296f0:	9b04      	ldr	r3, [sp, #16]
   296f2:	9305      	str	r3, [sp, #20]
		r1 = r2;
   296f4:	9b03      	ldr	r3, [sp, #12]
   296f6:	9304      	str	r3, [sp, #16]
		r2 = 0;
   296f8:	2300      	movs	r3, #0
   296fa:	9303      	str	r3, [sp, #12]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   296fc:	f10a 0a01 	add.w	sl, sl, #1
   29700:	fa4f fa8a 	sxtb.w	sl, sl
   29704:	4655      	mov	r5, sl
   29706:	4642      	mov	r2, r8
   29708:	ea4f 0348 	mov.w	r3, r8, lsl #1
   2970c:	3b01      	subs	r3, #1
   2970e:	459a      	cmp	sl, r3
   29710:	da05      	bge.n	2971e <uECC_vli_mult+0xaa>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   29712:	ebaa 0408 	sub.w	r4, sl, r8
   29716:	b264      	sxtb	r4, r4
   29718:	3401      	adds	r4, #1
   2971a:	b264      	sxtb	r4, r4
   2971c:	e7e3      	b.n	296e6 <uECC_vli_mult+0x72>
	result[num_words * 2 - 1] = r0;
   2971e:	00d3      	lsls	r3, r2, #3
   29720:	3b04      	subs	r3, #4
   29722:	9a05      	ldr	r2, [sp, #20]
   29724:	f849 2003 	str.w	r2, [r9, r3]
}
   29728:	b006      	add	sp, #24
   2972a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002972e <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2972e:	2300      	movs	r3, #0
   29730:	428b      	cmp	r3, r1
   29732:	da05      	bge.n	29740 <uECC_vli_clear+0x12>
		 vli[i] = 0;
   29734:	2200      	movs	r2, #0
   29736:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2973a:	3301      	adds	r3, #1
   2973c:	b25b      	sxtb	r3, r3
   2973e:	e7f7      	b.n	29730 <uECC_vli_clear+0x2>
}
   29740:	4770      	bx	lr

00029742 <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   29742:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   29744:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   29746:	428b      	cmp	r3, r1
   29748:	da0c      	bge.n	29764 <uECC_vli_isZero+0x22>
{
   2974a:	b410      	push	{r4}
		bits |= vli[i];
   2974c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   29750:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   29752:	3301      	adds	r3, #1
   29754:	b25b      	sxtb	r3, r3
   29756:	428b      	cmp	r3, r1
   29758:	dbf8      	blt.n	2974c <uECC_vli_isZero+0xa>
}
   2975a:	fab2 f082 	clz	r0, r2
   2975e:	0940      	lsrs	r0, r0, #5
   29760:	bc10      	pop	{r4}
   29762:	4770      	bx	lr
   29764:	fab3 f083 	clz	r0, r3
   29768:	0940      	lsrs	r0, r0, #5
   2976a:	4770      	bx	lr

0002976c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2976c:	114b      	asrs	r3, r1, #5
   2976e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   29772:	f001 011f 	and.w	r1, r1, #31
   29776:	2301      	movs	r3, #1
   29778:	fa03 f101 	lsl.w	r1, r3, r1
}
   2977c:	4008      	ands	r0, r1
   2977e:	4770      	bx	lr

00029780 <uECC_vli_numBits>:
{
   29780:	b510      	push	{r4, lr}
   29782:	4604      	mov	r4, r0
	wordcount_t num_digits = vli_numDigits(vli, max_words);
   29784:	f7ff ff40 	bl	29608 <vli_numDigits>
	if (num_digits == 0) {
   29788:	b188      	cbz	r0, 297ae <uECC_vli_numBits+0x2e>
   2978a:	4602      	mov	r2, r0
	digit = vli[num_digits - 1];
   2978c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   29790:	3b01      	subs	r3, #1
   29792:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	for (i = 0; digit; ++i) {
   29796:	2000      	movs	r0, #0
   29798:	b113      	cbz	r3, 297a0 <uECC_vli_numBits+0x20>
		digit >>= 1;
   2979a:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   2979c:	3001      	adds	r0, #1
   2979e:	e7fb      	b.n	29798 <uECC_vli_numBits+0x18>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   297a0:	1e53      	subs	r3, r2, #1
   297a2:	b29b      	uxth	r3, r3
   297a4:	015b      	lsls	r3, r3, #5
   297a6:	b29b      	uxth	r3, r3
   297a8:	4418      	add	r0, r3
   297aa:	b200      	sxth	r0, r0
}
   297ac:	bd10      	pop	{r4, pc}
		return 0;
   297ae:	2000      	movs	r0, #0
   297b0:	e7fc      	b.n	297ac <uECC_vli_numBits+0x2c>

000297b2 <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   297b2:	2300      	movs	r3, #0
   297b4:	4293      	cmp	r3, r2
   297b6:	da0a      	bge.n	297ce <uECC_vli_set+0x1c>
{
   297b8:	b410      	push	{r4}
		dest[i] = src[i];
   297ba:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   297be:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   297c2:	3301      	adds	r3, #1
   297c4:	b25b      	sxtb	r3, r3
   297c6:	4293      	cmp	r3, r2
   297c8:	dbf7      	blt.n	297ba <uECC_vli_set+0x8>
}
   297ca:	bc10      	pop	{r4}
   297cc:	4770      	bx	lr
   297ce:	4770      	bx	lr

000297d0 <uECC_vli_cmp_unsafe>:
	for (i = num_words - 1; i >= 0; --i) {
   297d0:	3a01      	subs	r2, #1
   297d2:	b252      	sxtb	r2, r2
   297d4:	2a00      	cmp	r2, #0
   297d6:	db13      	blt.n	29800 <uECC_vli_cmp_unsafe+0x30>
{
   297d8:	b410      	push	{r4}
		if (left[i] > right[i]) {
   297da:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   297de:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   297e2:	429c      	cmp	r4, r3
   297e4:	d807      	bhi.n	297f6 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   297e6:	d308      	bcc.n	297fa <uECC_vli_cmp_unsafe+0x2a>
	for (i = num_words - 1; i >= 0; --i) {
   297e8:	3a01      	subs	r2, #1
   297ea:	b252      	sxtb	r2, r2
   297ec:	2a00      	cmp	r2, #0
   297ee:	daf4      	bge.n	297da <uECC_vli_cmp_unsafe+0xa>
	return 0;
   297f0:	2000      	movs	r0, #0
}
   297f2:	bc10      	pop	{r4}
   297f4:	4770      	bx	lr
			return 1;
   297f6:	2001      	movs	r0, #1
   297f8:	e7fb      	b.n	297f2 <uECC_vli_cmp_unsafe+0x22>
			return -1;
   297fa:	f04f 30ff 	mov.w	r0, #4294967295
   297fe:	e7f8      	b.n	297f2 <uECC_vli_cmp_unsafe+0x22>
	return 0;
   29800:	2000      	movs	r0, #0
}
   29802:	4770      	bx	lr

00029804 <uECC_vli_equal>:
{
   29804:	b430      	push	{r4, r5}
	for (i = num_words - 1; i >= 0; --i) {
   29806:	3a01      	subs	r2, #1
   29808:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   2980a:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   2980c:	2a00      	cmp	r2, #0
   2980e:	db08      	blt.n	29822 <uECC_vli_equal+0x1e>
		diff |= (left[i] ^ right[i]);
   29810:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   29814:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   29818:	406b      	eors	r3, r5
   2981a:	431c      	orrs	r4, r3
	for (i = num_words - 1; i >= 0; --i) {
   2981c:	3a01      	subs	r2, #1
   2981e:	b252      	sxtb	r2, r2
   29820:	e7f4      	b.n	2980c <uECC_vli_equal+0x8>
}
   29822:	1e20      	subs	r0, r4, #0
   29824:	bf18      	it	ne
   29826:	2001      	movne	r0, #1
   29828:	bc30      	pop	{r4, r5}
   2982a:	4770      	bx	lr

0002982c <cond_set>:
	return (p_true*(cond)) | (p_false*(!cond));
   2982c:	fb02 f000 	mul.w	r0, r2, r0
   29830:	2a00      	cmp	r2, #0
   29832:	bf0c      	ite	eq
   29834:	460a      	moveq	r2, r1
   29836:	2200      	movne	r2, #0
}
   29838:	4310      	orrs	r0, r2
   2983a:	4770      	bx	lr

0002983c <uECC_vli_add>:
{
   2983c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29840:	4681      	mov	r9, r0
   29842:	4688      	mov	r8, r1
   29844:	4617      	mov	r7, r2
   29846:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   29848:	2400      	movs	r4, #0
	uECC_word_t carry = 0;
   2984a:	4621      	mov	r1, r4
	for (i = 0; i < num_words; ++i) {
   2984c:	42b4      	cmp	r4, r6
   2984e:	da14      	bge.n	2987a <uECC_vli_add+0x3e>
		uECC_word_t sum = left[i] + right[i] + carry;
   29850:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   29854:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   29858:	441d      	add	r5, r3
   2985a:	440d      	add	r5, r1
		uECC_word_t val = (sum < left[i]);
   2985c:	42ab      	cmp	r3, r5
		carry = cond_set(val, carry, (sum != left[i]));
   2985e:	bf14      	ite	ne
   29860:	2201      	movne	r2, #1
   29862:	2200      	moveq	r2, #0
   29864:	bf8c      	ite	hi
   29866:	2001      	movhi	r0, #1
   29868:	2000      	movls	r0, #0
   2986a:	f7ff ffdf 	bl	2982c <cond_set>
   2986e:	4601      	mov	r1, r0
		result[i] = sum;
   29870:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   29874:	3401      	adds	r4, #1
   29876:	b264      	sxtb	r4, r4
   29878:	e7e8      	b.n	2984c <uECC_vli_add+0x10>
}
   2987a:	4608      	mov	r0, r1
   2987c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029880 <vli_modInv_update>:
{
   29880:	b570      	push	{r4, r5, r6, lr}
   29882:	4605      	mov	r5, r0
   29884:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   29886:	6800      	ldr	r0, [r0, #0]
   29888:	f010 0601 	ands.w	r6, r0, #1
   2988c:	d10e      	bne.n	298ac <vli_modInv_update+0x2c>
	uECC_vli_rshift1(uv, num_words);
   2988e:	4621      	mov	r1, r4
   29890:	4628      	mov	r0, r5
   29892:	f7ff fec6 	bl	29622 <uECC_vli_rshift1>
	if (carry) {
   29896:	b146      	cbz	r6, 298aa <vli_modInv_update+0x2a>
		uv[num_words - 1] |= HIGH_BIT_SET;
   29898:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   2989c:	3c01      	subs	r4, #1
   2989e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   298a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   298a6:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   298aa:	bd70      	pop	{r4, r5, r6, pc}
		carry = uECC_vli_add(uv, uv, mod, num_words);
   298ac:	4613      	mov	r3, r2
   298ae:	460a      	mov	r2, r1
   298b0:	4629      	mov	r1, r5
   298b2:	4628      	mov	r0, r5
   298b4:	f7ff ffc2 	bl	2983c <uECC_vli_add>
   298b8:	4606      	mov	r6, r0
   298ba:	e7e8      	b.n	2988e <vli_modInv_update+0xe>

000298bc <uECC_vli_sub>:
{
   298bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   298c0:	4681      	mov	r9, r0
   298c2:	4688      	mov	r8, r1
   298c4:	4617      	mov	r7, r2
   298c6:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   298c8:	2400      	movs	r4, #0
	uECC_word_t borrow = 0;
   298ca:	4621      	mov	r1, r4
	for (i = 0; i < num_words; ++i) {
   298cc:	42b4      	cmp	r4, r6
   298ce:	da14      	bge.n	298fa <uECC_vli_sub+0x3e>
		uECC_word_t diff = left[i] - right[i] - borrow;
   298d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   298d4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   298d8:	1b5d      	subs	r5, r3, r5
   298da:	1a6d      	subs	r5, r5, r1
		uECC_word_t val = (diff > left[i]);
   298dc:	42ab      	cmp	r3, r5
		borrow = cond_set(val, borrow, (diff != left[i]));
   298de:	bf14      	ite	ne
   298e0:	2201      	movne	r2, #1
   298e2:	2200      	moveq	r2, #0
   298e4:	bf34      	ite	cc
   298e6:	2001      	movcc	r0, #1
   298e8:	2000      	movcs	r0, #0
   298ea:	f7ff ff9f 	bl	2982c <cond_set>
   298ee:	4601      	mov	r1, r0
		result[i] = diff;
   298f0:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   298f4:	3401      	adds	r4, #1
   298f6:	b264      	sxtb	r4, r4
   298f8:	e7e8      	b.n	298cc <uECC_vli_sub+0x10>
}
   298fa:	4608      	mov	r0, r1
   298fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029900 <uECC_vli_modAdd>:
{
   29900:	b570      	push	{r4, r5, r6, lr}
   29902:	4604      	mov	r4, r0
   29904:	461d      	mov	r5, r3
   29906:	f99d 6010 	ldrsb.w	r6, [sp, #16]
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2990a:	4633      	mov	r3, r6
   2990c:	f7ff ff96 	bl	2983c <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   29910:	b930      	cbnz	r0, 29920 <uECC_vli_modAdd+0x20>
   29912:	4632      	mov	r2, r6
   29914:	4621      	mov	r1, r4
   29916:	4628      	mov	r0, r5
   29918:	f7ff ff5a 	bl	297d0 <uECC_vli_cmp_unsafe>
   2991c:	2801      	cmp	r0, #1
   2991e:	d005      	beq.n	2992c <uECC_vli_modAdd+0x2c>
		uECC_vli_sub(result, result, mod, num_words);
   29920:	4633      	mov	r3, r6
   29922:	462a      	mov	r2, r5
   29924:	4621      	mov	r1, r4
   29926:	4620      	mov	r0, r4
   29928:	f7ff ffc8 	bl	298bc <uECC_vli_sub>
}
   2992c:	bd70      	pop	{r4, r5, r6, pc}

0002992e <uECC_vli_modSub>:
{
   2992e:	b570      	push	{r4, r5, r6, lr}
   29930:	4604      	mov	r4, r0
   29932:	461d      	mov	r5, r3
   29934:	f99d 6010 	ldrsb.w	r6, [sp, #16]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   29938:	4633      	mov	r3, r6
   2993a:	f7ff ffbf 	bl	298bc <uECC_vli_sub>
	if (l_borrow) {
   2993e:	b900      	cbnz	r0, 29942 <uECC_vli_modSub+0x14>
}
   29940:	bd70      	pop	{r4, r5, r6, pc}
		uECC_vli_add(result, result, mod, num_words);
   29942:	4633      	mov	r3, r6
   29944:	462a      	mov	r2, r5
   29946:	4621      	mov	r1, r4
   29948:	4620      	mov	r0, r4
   2994a:	f7ff ff77 	bl	2983c <uECC_vli_add>
}
   2994e:	e7f7      	b.n	29940 <uECC_vli_modSub+0x12>

00029950 <uECC_vli_mmod>:
{
   29950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29954:	b0a2      	sub	sp, #136	; 0x88
   29956:	4682      	mov	sl, r0
   29958:	4691      	mov	r9, r2
   2995a:	461c      	mov	r4, r3
	uECC_word_t *v[2] = {tmp, product};
   2995c:	ab02      	add	r3, sp, #8
   2995e:	9300      	str	r3, [sp, #0]
   29960:	9101      	str	r1, [sp, #4]
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   29962:	01a5      	lsls	r5, r4, #6
			   uECC_vli_numBits(mod, num_words);
   29964:	4621      	mov	r1, r4
   29966:	4610      	mov	r0, r2
   29968:	f7ff ff0a 	bl	29780 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2996c:	1a2d      	subs	r5, r5, r0
   2996e:	b22e      	sxth	r6, r5
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   29970:	46b0      	mov	r8, r6
   29972:	2e00      	cmp	r6, #0
   29974:	db11      	blt.n	2999a <uECC_vli_mmod+0x4a>
   29976:	f348 1847 	sbfx	r8, r8, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2997a:	4273      	negs	r3, r6
   2997c:	f006 051f 	and.w	r5, r6, #31
   29980:	f003 031f 	and.w	r3, r3, #31
   29984:	bf58      	it	pl
   29986:	425d      	negpl	r5, r3
	uECC_vli_clear(mod_multiple, word_shift);
   29988:	4641      	mov	r1, r8
   2998a:	a812      	add	r0, sp, #72	; 0x48
   2998c:	f7ff fecf 	bl	2972e <uECC_vli_clear>
	if (bit_shift > 0) {
   29990:	2d00      	cmp	r5, #0
   29992:	dd1a      	ble.n	299ca <uECC_vli_mmod+0x7a>
	uECC_word_t carry = 0;
   29994:	2100      	movs	r1, #0
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   29996:	460b      	mov	r3, r1
   29998:	e013      	b.n	299c2 <uECC_vli_mmod+0x72>
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2999a:	f106 081f 	add.w	r8, r6, #31
   2999e:	e7ea      	b.n	29976 <uECC_vli_mmod+0x26>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   299a0:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
   299a4:	fa07 f005 	lsl.w	r0, r7, r5
   299a8:	eb08 0203 	add.w	r2, r8, r3
   299ac:	4301      	orrs	r1, r0
   299ae:	a822      	add	r0, sp, #136	; 0x88
   299b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   299b4:	f842 1c40 	str.w	r1, [r2, #-64]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   299b8:	f1c5 0120 	rsb	r1, r5, #32
   299bc:	fa27 f101 	lsr.w	r1, r7, r1
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   299c0:	3301      	adds	r3, #1
   299c2:	429c      	cmp	r4, r3
   299c4:	d8ec      	bhi.n	299a0 <uECC_vli_mmod+0x50>
		uECC_word_t borrow = 0;
   299c6:	2501      	movs	r5, #1
   299c8:	e04b      	b.n	29a62 <uECC_vli_mmod+0x112>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   299ca:	4622      	mov	r2, r4
   299cc:	4649      	mov	r1, r9
   299ce:	ab12      	add	r3, sp, #72	; 0x48
   299d0:	eb03 0088 	add.w	r0, r3, r8, lsl #2
   299d4:	f7ff feed 	bl	297b2 <uECC_vli_set>
   299d8:	e7f5      	b.n	299c6 <uECC_vli_mmod+0x76>
				borrow = (diff > v[index][i]);
   299da:	428b      	cmp	r3, r1
   299dc:	bf2c      	ite	cs
   299de:	f04f 0c00 	movcs.w	ip, #0
   299e2:	f04f 0c01 	movcc.w	ip, #1
			v[1 - index][i] = diff;
   299e6:	f1c5 0301 	rsb	r3, r5, #1
   299ea:	af22      	add	r7, sp, #136	; 0x88
   299ec:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   299f0:	f853 3c88 	ldr.w	r3, [r3, #-136]
   299f4:	5019      	str	r1, [r3, r0]
		for (i = 0; i < num_words * 2; ++i) {
   299f6:	3201      	adds	r2, #1
   299f8:	b252      	sxtb	r2, r2
   299fa:	ebb2 0f44 	cmp.w	r2, r4, lsl #1
   299fe:	da12      	bge.n	29a26 <uECC_vli_mmod+0xd6>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   29a00:	ab22      	add	r3, sp, #136	; 0x88
   29a02:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   29a06:	f853 3c88 	ldr.w	r3, [r3, #-136]
   29a0a:	0090      	lsls	r0, r2, #2
   29a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   29a10:	a922      	add	r1, sp, #136	; 0x88
   29a12:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   29a16:	f851 1c40 	ldr.w	r1, [r1, #-64]
   29a1a:	1a59      	subs	r1, r3, r1
   29a1c:	eba1 010c 	sub.w	r1, r1, ip
			if (diff != v[index][i]) {
   29a20:	428b      	cmp	r3, r1
   29a22:	d1da      	bne.n	299da <uECC_vli_mmod+0x8a>
   29a24:	e7df      	b.n	299e6 <uECC_vli_mmod+0x96>
		index = !(index ^ borrow);
   29a26:	4565      	cmp	r5, ip
   29a28:	bf14      	ite	ne
   29a2a:	2500      	movne	r5, #0
   29a2c:	2501      	moveq	r5, #1
		uECC_vli_rshift1(mod_multiple, num_words);
   29a2e:	4621      	mov	r1, r4
   29a30:	a812      	add	r0, sp, #72	; 0x48
   29a32:	f7ff fdf6 	bl	29622 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29a36:	1e63      	subs	r3, r4, #1
   29a38:	aa22      	add	r2, sp, #136	; 0x88
   29a3a:	eb02 0884 	add.w	r8, r2, r4, lsl #2
   29a3e:	f858 1c40 	ldr.w	r1, [r8, #-64]
   29a42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   29a46:	f853 2c40 	ldr.w	r2, [r3, #-64]
   29a4a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   29a4e:	f843 2c40 	str.w	r2, [r3, #-64]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29a52:	4621      	mov	r1, r4
   29a54:	ab12      	add	r3, sp, #72	; 0x48
   29a56:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   29a5a:	f7ff fde2 	bl	29622 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   29a5e:	3e01      	subs	r6, #1
   29a60:	b236      	sxth	r6, r6
   29a62:	2e00      	cmp	r6, #0
   29a64:	db02      	blt.n	29a6c <uECC_vli_mmod+0x11c>
		for (i = 0; i < num_words * 2; ++i) {
   29a66:	2200      	movs	r2, #0
		uECC_word_t borrow = 0;
   29a68:	4694      	mov	ip, r2
   29a6a:	e7c6      	b.n	299fa <uECC_vli_mmod+0xaa>
	uECC_vli_set(result, v[index], num_words);
   29a6c:	ab22      	add	r3, sp, #136	; 0x88
   29a6e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   29a72:	4622      	mov	r2, r4
   29a74:	f855 1c88 	ldr.w	r1, [r5, #-136]
   29a78:	4650      	mov	r0, sl
   29a7a:	f7ff fe9a 	bl	297b2 <uECC_vli_set>
}
   29a7e:	b022      	add	sp, #136	; 0x88
   29a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029a84 <uECC_vli_modMult_fast>:
{
   29a84:	b530      	push	{r4, r5, lr}
   29a86:	b091      	sub	sp, #68	; 0x44
   29a88:	4605      	mov	r5, r0
   29a8a:	461c      	mov	r4, r3
	uECC_vli_mult(product, left, right, curve->num_words);
   29a8c:	f993 3000 	ldrsb.w	r3, [r3]
   29a90:	4668      	mov	r0, sp
   29a92:	f7ff fdef 	bl	29674 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   29a96:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   29a9a:	4669      	mov	r1, sp
   29a9c:	4628      	mov	r0, r5
   29a9e:	4798      	blx	r3
}
   29aa0:	b011      	add	sp, #68	; 0x44
   29aa2:	bd30      	pop	{r4, r5, pc}

00029aa4 <uECC_vli_modSquare_fast>:
{
   29aa4:	b508      	push	{r3, lr}
   29aa6:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   29aa8:	460a      	mov	r2, r1
   29aaa:	f7ff ffeb 	bl	29a84 <uECC_vli_modMult_fast>
}
   29aae:	bd08      	pop	{r3, pc}

00029ab0 <double_jacobian_default>:
{
   29ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29ab4:	b092      	sub	sp, #72	; 0x48
   29ab6:	4605      	mov	r5, r0
   29ab8:	4689      	mov	r9, r1
   29aba:	4614      	mov	r4, r2
   29abc:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   29abe:	f993 6000 	ldrsb.w	r6, [r3]
	if (uECC_vli_isZero(Z1, num_words)) {
   29ac2:	4631      	mov	r1, r6
   29ac4:	4610      	mov	r0, r2
   29ac6:	f7ff fe3c 	bl	29742 <uECC_vli_isZero>
   29aca:	b110      	cbz	r0, 29ad2 <double_jacobian_default+0x22>
}
   29acc:	b012      	add	sp, #72	; 0x48
   29ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   29ad2:	463a      	mov	r2, r7
   29ad4:	4649      	mov	r1, r9
   29ad6:	a80a      	add	r0, sp, #40	; 0x28
   29ad8:	f7ff ffe4 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   29adc:	463b      	mov	r3, r7
   29ade:	aa0a      	add	r2, sp, #40	; 0x28
   29ae0:	4629      	mov	r1, r5
   29ae2:	a802      	add	r0, sp, #8
   29ae4:	f7ff ffce 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   29ae8:	463a      	mov	r2, r7
   29aea:	a90a      	add	r1, sp, #40	; 0x28
   29aec:	4608      	mov	r0, r1
   29aee:	f7ff ffd9 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   29af2:	463b      	mov	r3, r7
   29af4:	4622      	mov	r2, r4
   29af6:	4649      	mov	r1, r9
   29af8:	4648      	mov	r0, r9
   29afa:	f7ff ffc3 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   29afe:	463a      	mov	r2, r7
   29b00:	4621      	mov	r1, r4
   29b02:	4620      	mov	r0, r4
   29b04:	f7ff ffce 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   29b08:	f107 0804 	add.w	r8, r7, #4
   29b0c:	9600      	str	r6, [sp, #0]
   29b0e:	4643      	mov	r3, r8
   29b10:	4622      	mov	r2, r4
   29b12:	4629      	mov	r1, r5
   29b14:	4628      	mov	r0, r5
   29b16:	f7ff fef3 	bl	29900 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   29b1a:	9600      	str	r6, [sp, #0]
   29b1c:	4643      	mov	r3, r8
   29b1e:	4622      	mov	r2, r4
   29b20:	4621      	mov	r1, r4
   29b22:	4620      	mov	r0, r4
   29b24:	f7ff feec 	bl	29900 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   29b28:	9600      	str	r6, [sp, #0]
   29b2a:	4643      	mov	r3, r8
   29b2c:	4622      	mov	r2, r4
   29b2e:	4629      	mov	r1, r5
   29b30:	4620      	mov	r0, r4
   29b32:	f7ff fefc 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   29b36:	463b      	mov	r3, r7
   29b38:	4622      	mov	r2, r4
   29b3a:	4629      	mov	r1, r5
   29b3c:	4628      	mov	r0, r5
   29b3e:	f7ff ffa1 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   29b42:	9600      	str	r6, [sp, #0]
   29b44:	4643      	mov	r3, r8
   29b46:	462a      	mov	r2, r5
   29b48:	4629      	mov	r1, r5
   29b4a:	4620      	mov	r0, r4
   29b4c:	f7ff fed8 	bl	29900 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   29b50:	9600      	str	r6, [sp, #0]
   29b52:	4643      	mov	r3, r8
   29b54:	4622      	mov	r2, r4
   29b56:	4629      	mov	r1, r5
   29b58:	4628      	mov	r0, r5
   29b5a:	f7ff fed1 	bl	29900 <uECC_vli_modAdd>
	if (uECC_vli_testBit(X1, 0)) {
   29b5e:	2100      	movs	r1, #0
   29b60:	4628      	mov	r0, r5
   29b62:	f7ff fe03 	bl	2976c <uECC_vli_testBit>
   29b66:	2800      	cmp	r0, #0
   29b68:	d04a      	beq.n	29c00 <double_jacobian_default+0x150>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   29b6a:	4633      	mov	r3, r6
   29b6c:	4642      	mov	r2, r8
   29b6e:	4629      	mov	r1, r5
   29b70:	4628      	mov	r0, r5
   29b72:	f7ff fe63 	bl	2983c <uECC_vli_add>
   29b76:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   29b78:	4631      	mov	r1, r6
   29b7a:	4628      	mov	r0, r5
   29b7c:	f7ff fd51 	bl	29622 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   29b80:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   29b84:	3b01      	subs	r3, #1
   29b86:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   29b8a:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   29b8e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   29b92:	463a      	mov	r2, r7
   29b94:	4629      	mov	r1, r5
   29b96:	4620      	mov	r0, r4
   29b98:	f7ff ff84 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   29b9c:	9600      	str	r6, [sp, #0]
   29b9e:	4643      	mov	r3, r8
   29ba0:	aa02      	add	r2, sp, #8
   29ba2:	4621      	mov	r1, r4
   29ba4:	4620      	mov	r0, r4
   29ba6:	f7ff fec2 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   29baa:	9600      	str	r6, [sp, #0]
   29bac:	4643      	mov	r3, r8
   29bae:	aa02      	add	r2, sp, #8
   29bb0:	4621      	mov	r1, r4
   29bb2:	4620      	mov	r0, r4
   29bb4:	f7ff febb 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   29bb8:	9600      	str	r6, [sp, #0]
   29bba:	4643      	mov	r3, r8
   29bbc:	4622      	mov	r2, r4
   29bbe:	a902      	add	r1, sp, #8
   29bc0:	4608      	mov	r0, r1
   29bc2:	f7ff feb4 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   29bc6:	463b      	mov	r3, r7
   29bc8:	aa02      	add	r2, sp, #8
   29bca:	4629      	mov	r1, r5
   29bcc:	4628      	mov	r0, r5
   29bce:	f7ff ff59 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   29bd2:	9600      	str	r6, [sp, #0]
   29bd4:	4643      	mov	r3, r8
   29bd6:	aa0a      	add	r2, sp, #40	; 0x28
   29bd8:	4629      	mov	r1, r5
   29bda:	4610      	mov	r0, r2
   29bdc:	f7ff fea7 	bl	2992e <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   29be0:	4632      	mov	r2, r6
   29be2:	4621      	mov	r1, r4
   29be4:	4628      	mov	r0, r5
   29be6:	f7ff fde4 	bl	297b2 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   29bea:	4632      	mov	r2, r6
   29bec:	4649      	mov	r1, r9
   29bee:	4620      	mov	r0, r4
   29bf0:	f7ff fddf 	bl	297b2 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   29bf4:	4632      	mov	r2, r6
   29bf6:	a90a      	add	r1, sp, #40	; 0x28
   29bf8:	4648      	mov	r0, r9
   29bfa:	f7ff fdda 	bl	297b2 <uECC_vli_set>
   29bfe:	e765      	b.n	29acc <double_jacobian_default+0x1c>
		uECC_vli_rshift1(X1, num_words);
   29c00:	4631      	mov	r1, r6
   29c02:	4628      	mov	r0, r5
   29c04:	f7ff fd0d 	bl	29622 <uECC_vli_rshift1>
   29c08:	e7c3      	b.n	29b92 <double_jacobian_default+0xe2>

00029c0a <x_side_default>:
{
   29c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c0e:	b08a      	sub	sp, #40	; 0x28
   29c10:	4604      	mov	r4, r0
   29c12:	460f      	mov	r7, r1
   29c14:	4615      	mov	r5, r2
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   29c16:	2300      	movs	r3, #0
   29c18:	9303      	str	r3, [sp, #12]
   29c1a:	9304      	str	r3, [sp, #16]
   29c1c:	9305      	str	r3, [sp, #20]
   29c1e:	9306      	str	r3, [sp, #24]
   29c20:	9307      	str	r3, [sp, #28]
   29c22:	9308      	str	r3, [sp, #32]
   29c24:	9309      	str	r3, [sp, #36]	; 0x24
   29c26:	2303      	movs	r3, #3
   29c28:	9302      	str	r3, [sp, #8]
	wordcount_t num_words = curve->num_words;
   29c2a:	4616      	mov	r6, r2
   29c2c:	f916 8b04 	ldrsb.w	r8, [r6], #4
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   29c30:	f7ff ff38 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   29c34:	f8cd 8000 	str.w	r8, [sp]
   29c38:	4633      	mov	r3, r6
   29c3a:	aa02      	add	r2, sp, #8
   29c3c:	4621      	mov	r1, r4
   29c3e:	4620      	mov	r0, r4
   29c40:	f7ff fe75 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   29c44:	462b      	mov	r3, r5
   29c46:	463a      	mov	r2, r7
   29c48:	4621      	mov	r1, r4
   29c4a:	4620      	mov	r0, r4
   29c4c:	f7ff ff1a 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   29c50:	f8cd 8000 	str.w	r8, [sp]
   29c54:	4633      	mov	r3, r6
   29c56:	f105 0284 	add.w	r2, r5, #132	; 0x84
   29c5a:	4621      	mov	r1, r4
   29c5c:	4620      	mov	r0, r4
   29c5e:	f7ff fe4f 	bl	29900 <uECC_vli_modAdd>
}
   29c62:	b00a      	add	sp, #40	; 0x28
   29c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029c68 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   29c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29c6c:	b09a      	sub	sp, #104	; 0x68
   29c6e:	4607      	mov	r7, r0
   29c70:	4689      	mov	r9, r1
   29c72:	4616      	mov	r6, r2
   29c74:	4698      	mov	r8, r3
   29c76:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   29c7a:	4654      	mov	r4, sl
   29c7c:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   29c80:	9500      	str	r5, [sp, #0]
   29c82:	4623      	mov	r3, r4
   29c84:	4602      	mov	r2, r0
   29c86:	4631      	mov	r1, r6
   29c88:	a812      	add	r0, sp, #72	; 0x48
   29c8a:	f7ff fe50 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   29c8e:	4652      	mov	r2, sl
   29c90:	a912      	add	r1, sp, #72	; 0x48
   29c92:	4608      	mov	r0, r1
   29c94:	f7ff ff06 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   29c98:	4653      	mov	r3, sl
   29c9a:	aa12      	add	r2, sp, #72	; 0x48
   29c9c:	4639      	mov	r1, r7
   29c9e:	4638      	mov	r0, r7
   29ca0:	f7ff fef0 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   29ca4:	4653      	mov	r3, sl
   29ca6:	aa12      	add	r2, sp, #72	; 0x48
   29ca8:	4631      	mov	r1, r6
   29caa:	4630      	mov	r0, r6
   29cac:	f7ff feea 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   29cb0:	9500      	str	r5, [sp, #0]
   29cb2:	4623      	mov	r3, r4
   29cb4:	464a      	mov	r2, r9
   29cb6:	4641      	mov	r1, r8
   29cb8:	a812      	add	r0, sp, #72	; 0x48
   29cba:	f7ff fe21 	bl	29900 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   29cbe:	9500      	str	r5, [sp, #0]
   29cc0:	4623      	mov	r3, r4
   29cc2:	464a      	mov	r2, r9
   29cc4:	4641      	mov	r1, r8
   29cc6:	4640      	mov	r0, r8
   29cc8:	f7ff fe31 	bl	2992e <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   29ccc:	9500      	str	r5, [sp, #0]
   29cce:	4623      	mov	r3, r4
   29cd0:	463a      	mov	r2, r7
   29cd2:	4631      	mov	r1, r6
   29cd4:	a80a      	add	r0, sp, #40	; 0x28
   29cd6:	f7ff fe2a 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   29cda:	4653      	mov	r3, sl
   29cdc:	aa0a      	add	r2, sp, #40	; 0x28
   29cde:	4649      	mov	r1, r9
   29ce0:	4648      	mov	r0, r9
   29ce2:	f7ff fecf 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   29ce6:	9500      	str	r5, [sp, #0]
   29ce8:	4623      	mov	r3, r4
   29cea:	4632      	mov	r2, r6
   29cec:	4639      	mov	r1, r7
   29cee:	a80a      	add	r0, sp, #40	; 0x28
   29cf0:	f7ff fe06 	bl	29900 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   29cf4:	4652      	mov	r2, sl
   29cf6:	4641      	mov	r1, r8
   29cf8:	4630      	mov	r0, r6
   29cfa:	f7ff fed3 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   29cfe:	9500      	str	r5, [sp, #0]
   29d00:	4623      	mov	r3, r4
   29d02:	aa0a      	add	r2, sp, #40	; 0x28
   29d04:	4631      	mov	r1, r6
   29d06:	4630      	mov	r0, r6
   29d08:	f7ff fe11 	bl	2992e <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   29d0c:	9500      	str	r5, [sp, #0]
   29d0e:	4623      	mov	r3, r4
   29d10:	4632      	mov	r2, r6
   29d12:	4639      	mov	r1, r7
   29d14:	a802      	add	r0, sp, #8
   29d16:	f7ff fe0a 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   29d1a:	4653      	mov	r3, sl
   29d1c:	aa02      	add	r2, sp, #8
   29d1e:	4641      	mov	r1, r8
   29d20:	4640      	mov	r0, r8
   29d22:	f7ff feaf 	bl	29a84 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   29d26:	9500      	str	r5, [sp, #0]
   29d28:	4623      	mov	r3, r4
   29d2a:	464a      	mov	r2, r9
   29d2c:	4641      	mov	r1, r8
   29d2e:	4640      	mov	r0, r8
   29d30:	f7ff fdfd 	bl	2992e <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   29d34:	4652      	mov	r2, sl
   29d36:	a912      	add	r1, sp, #72	; 0x48
   29d38:	a802      	add	r0, sp, #8
   29d3a:	f7ff feb3 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   29d3e:	9500      	str	r5, [sp, #0]
   29d40:	4623      	mov	r3, r4
   29d42:	aa0a      	add	r2, sp, #40	; 0x28
   29d44:	a902      	add	r1, sp, #8
   29d46:	4608      	mov	r0, r1
   29d48:	f7ff fdf1 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   29d4c:	9500      	str	r5, [sp, #0]
   29d4e:	4623      	mov	r3, r4
   29d50:	463a      	mov	r2, r7
   29d52:	a902      	add	r1, sp, #8
   29d54:	a80a      	add	r0, sp, #40	; 0x28
   29d56:	f7ff fdea 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   29d5a:	4653      	mov	r3, sl
   29d5c:	aa12      	add	r2, sp, #72	; 0x48
   29d5e:	a90a      	add	r1, sp, #40	; 0x28
   29d60:	4608      	mov	r0, r1
   29d62:	f7ff fe8f 	bl	29a84 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   29d66:	9500      	str	r5, [sp, #0]
   29d68:	4623      	mov	r3, r4
   29d6a:	464a      	mov	r2, r9
   29d6c:	a90a      	add	r1, sp, #40	; 0x28
   29d6e:	4648      	mov	r0, r9
   29d70:	f7ff fddd 	bl	2992e <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   29d74:	462a      	mov	r2, r5
   29d76:	a902      	add	r1, sp, #8
   29d78:	4638      	mov	r0, r7
   29d7a:	f7ff fd1a 	bl	297b2 <uECC_vli_set>
}
   29d7e:	b01a      	add	sp, #104	; 0x68
   29d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029d84 <uECC_vli_modInv>:
{
   29d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d86:	b0a1      	sub	sp, #132	; 0x84
   29d88:	4607      	mov	r7, r0
   29d8a:	460e      	mov	r6, r1
   29d8c:	4615      	mov	r5, r2
   29d8e:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   29d90:	4619      	mov	r1, r3
   29d92:	4630      	mov	r0, r6
   29d94:	f7ff fcd5 	bl	29742 <uECC_vli_isZero>
   29d98:	b9a0      	cbnz	r0, 29dc4 <uECC_vli_modInv+0x40>
	uECC_vli_set(a, input, num_words);
   29d9a:	4622      	mov	r2, r4
   29d9c:	4631      	mov	r1, r6
   29d9e:	a818      	add	r0, sp, #96	; 0x60
   29da0:	f7ff fd07 	bl	297b2 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   29da4:	4622      	mov	r2, r4
   29da6:	4629      	mov	r1, r5
   29da8:	a810      	add	r0, sp, #64	; 0x40
   29daa:	f7ff fd02 	bl	297b2 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   29dae:	4621      	mov	r1, r4
   29db0:	a808      	add	r0, sp, #32
   29db2:	f7ff fcbc 	bl	2972e <uECC_vli_clear>
	u[0] = 1;
   29db6:	2301      	movs	r3, #1
   29db8:	9308      	str	r3, [sp, #32]
	uECC_vli_clear(v, num_words);
   29dba:	4621      	mov	r1, r4
   29dbc:	4668      	mov	r0, sp
   29dbe:	f7ff fcb6 	bl	2972e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   29dc2:	e00d      	b.n	29de0 <uECC_vli_modInv+0x5c>
		uECC_vli_clear(result, num_words);
   29dc4:	4621      	mov	r1, r4
   29dc6:	4638      	mov	r0, r7
   29dc8:	f7ff fcb1 	bl	2972e <uECC_vli_clear>
		return;
   29dcc:	e071      	b.n	29eb2 <uECC_vli_modInv+0x12e>
			uECC_vli_rshift1(a, num_words);
   29dce:	4621      	mov	r1, r4
   29dd0:	a818      	add	r0, sp, #96	; 0x60
   29dd2:	f7ff fc26 	bl	29622 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   29dd6:	4622      	mov	r2, r4
   29dd8:	4629      	mov	r1, r5
   29dda:	a808      	add	r0, sp, #32
   29ddc:	f7ff fd50 	bl	29880 <vli_modInv_update>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   29de0:	4622      	mov	r2, r4
   29de2:	a910      	add	r1, sp, #64	; 0x40
   29de4:	a818      	add	r0, sp, #96	; 0x60
   29de6:	f7ff fcf3 	bl	297d0 <uECC_vli_cmp_unsafe>
   29dea:	4602      	mov	r2, r0
   29dec:	2800      	cmp	r0, #0
   29dee:	d05b      	beq.n	29ea8 <uECC_vli_modInv+0x124>
		if (EVEN(a)) {
   29df0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   29df2:	f013 0f01 	tst.w	r3, #1
   29df6:	d0ea      	beq.n	29dce <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
   29df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29dfa:	f013 0f01 	tst.w	r3, #1
   29dfe:	d01e      	beq.n	29e3e <uECC_vli_modInv+0xba>
		} else if (cmpResult > 0) {
   29e00:	2a00      	cmp	r2, #0
   29e02:	dd2d      	ble.n	29e60 <uECC_vli_modInv+0xdc>
			uECC_vli_sub(a, a, b, num_words);
   29e04:	4623      	mov	r3, r4
   29e06:	aa10      	add	r2, sp, #64	; 0x40
   29e08:	a918      	add	r1, sp, #96	; 0x60
   29e0a:	4608      	mov	r0, r1
   29e0c:	f7ff fd56 	bl	298bc <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   29e10:	4621      	mov	r1, r4
   29e12:	a818      	add	r0, sp, #96	; 0x60
   29e14:	f7ff fc05 	bl	29622 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   29e18:	4622      	mov	r2, r4
   29e1a:	4669      	mov	r1, sp
   29e1c:	a808      	add	r0, sp, #32
   29e1e:	f7ff fcd7 	bl	297d0 <uECC_vli_cmp_unsafe>
   29e22:	2800      	cmp	r0, #0
   29e24:	db15      	blt.n	29e52 <uECC_vli_modInv+0xce>
      			uECC_vli_sub(u, u, v, num_words);
   29e26:	4623      	mov	r3, r4
   29e28:	466a      	mov	r2, sp
   29e2a:	a908      	add	r1, sp, #32
   29e2c:	4608      	mov	r0, r1
   29e2e:	f7ff fd45 	bl	298bc <uECC_vli_sub>
      			vli_modInv_update(u, mod, num_words);
   29e32:	4622      	mov	r2, r4
   29e34:	4629      	mov	r1, r5
   29e36:	a808      	add	r0, sp, #32
   29e38:	f7ff fd22 	bl	29880 <vli_modInv_update>
   29e3c:	e7d0      	b.n	29de0 <uECC_vli_modInv+0x5c>
			uECC_vli_rshift1(b, num_words);
   29e3e:	4621      	mov	r1, r4
   29e40:	a810      	add	r0, sp, #64	; 0x40
   29e42:	f7ff fbee 	bl	29622 <uECC_vli_rshift1>
			vli_modInv_update(v, mod, num_words);
   29e46:	4622      	mov	r2, r4
   29e48:	4629      	mov	r1, r5
   29e4a:	4668      	mov	r0, sp
   29e4c:	f7ff fd18 	bl	29880 <vli_modInv_update>
   29e50:	e7c6      	b.n	29de0 <uECC_vli_modInv+0x5c>
        			uECC_vli_add(u, u, mod, num_words);
   29e52:	4623      	mov	r3, r4
   29e54:	462a      	mov	r2, r5
   29e56:	a908      	add	r1, sp, #32
   29e58:	4608      	mov	r0, r1
   29e5a:	f7ff fcef 	bl	2983c <uECC_vli_add>
   29e5e:	e7e2      	b.n	29e26 <uECC_vli_modInv+0xa2>
      			uECC_vli_sub(b, b, a, num_words);
   29e60:	4623      	mov	r3, r4
   29e62:	aa18      	add	r2, sp, #96	; 0x60
   29e64:	a910      	add	r1, sp, #64	; 0x40
   29e66:	4608      	mov	r0, r1
   29e68:	f7ff fd28 	bl	298bc <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   29e6c:	4621      	mov	r1, r4
   29e6e:	a810      	add	r0, sp, #64	; 0x40
   29e70:	f7ff fbd7 	bl	29622 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   29e74:	4622      	mov	r2, r4
   29e76:	a908      	add	r1, sp, #32
   29e78:	4668      	mov	r0, sp
   29e7a:	f7ff fca9 	bl	297d0 <uECC_vli_cmp_unsafe>
   29e7e:	2800      	cmp	r0, #0
   29e80:	db0b      	blt.n	29e9a <uECC_vli_modInv+0x116>
      			uECC_vli_sub(v, v, u, num_words);
   29e82:	4623      	mov	r3, r4
   29e84:	aa08      	add	r2, sp, #32
   29e86:	4669      	mov	r1, sp
   29e88:	4668      	mov	r0, sp
   29e8a:	f7ff fd17 	bl	298bc <uECC_vli_sub>
      			vli_modInv_update(v, mod, num_words);
   29e8e:	4622      	mov	r2, r4
   29e90:	4629      	mov	r1, r5
   29e92:	4668      	mov	r0, sp
   29e94:	f7ff fcf4 	bl	29880 <vli_modInv_update>
   29e98:	e7a2      	b.n	29de0 <uECC_vli_modInv+0x5c>
        			uECC_vli_add(v, v, mod, num_words);
   29e9a:	4623      	mov	r3, r4
   29e9c:	462a      	mov	r2, r5
   29e9e:	4669      	mov	r1, sp
   29ea0:	4668      	mov	r0, sp
   29ea2:	f7ff fccb 	bl	2983c <uECC_vli_add>
   29ea6:	e7ec      	b.n	29e82 <uECC_vli_modInv+0xfe>
  	uECC_vli_set(result, u, num_words);
   29ea8:	4622      	mov	r2, r4
   29eaa:	a908      	add	r1, sp, #32
   29eac:	4638      	mov	r0, r7
   29eae:	f7ff fc80 	bl	297b2 <uECC_vli_set>
}
   29eb2:	b021      	add	sp, #132	; 0x84
   29eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029eb6 <EccPoint_isZero>:
{
   29eb6:	b508      	push	{r3, lr}
	return uECC_vli_isZero(point, curve->num_words * 2);
   29eb8:	f991 1000 	ldrsb.w	r1, [r1]
   29ebc:	0049      	lsls	r1, r1, #1
   29ebe:	b249      	sxtb	r1, r1
   29ec0:	f7ff fc3f 	bl	29742 <uECC_vli_isZero>
}
   29ec4:	bd08      	pop	{r3, pc}

00029ec6 <apply_z>:
{
   29ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
   29ec8:	b089      	sub	sp, #36	; 0x24
   29eca:	4607      	mov	r7, r0
   29ecc:	460d      	mov	r5, r1
   29ece:	4616      	mov	r6, r2
   29ed0:	461c      	mov	r4, r3
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   29ed2:	461a      	mov	r2, r3
   29ed4:	4631      	mov	r1, r6
   29ed6:	4668      	mov	r0, sp
   29ed8:	f7ff fde4 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   29edc:	4623      	mov	r3, r4
   29ede:	466a      	mov	r2, sp
   29ee0:	4639      	mov	r1, r7
   29ee2:	4638      	mov	r0, r7
   29ee4:	f7ff fdce 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   29ee8:	4623      	mov	r3, r4
   29eea:	4632      	mov	r2, r6
   29eec:	4669      	mov	r1, sp
   29eee:	4668      	mov	r0, sp
   29ef0:	f7ff fdc8 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   29ef4:	4623      	mov	r3, r4
   29ef6:	466a      	mov	r2, sp
   29ef8:	4629      	mov	r1, r5
   29efa:	4628      	mov	r0, r5
   29efc:	f7ff fdc2 	bl	29a84 <uECC_vli_modMult_fast>
}
   29f00:	b009      	add	sp, #36	; 0x24
   29f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029f04 <XYcZ_initial_double>:
{
   29f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29f08:	b089      	sub	sp, #36	; 0x24
   29f0a:	4605      	mov	r5, r0
   29f0c:	460e      	mov	r6, r1
   29f0e:	4690      	mov	r8, r2
   29f10:	4699      	mov	r9, r3
   29f12:	9910      	ldr	r1, [sp, #64]	; 0x40
   29f14:	9c11      	ldr	r4, [sp, #68]	; 0x44
	wordcount_t num_words = curve->num_words;
   29f16:	f994 7000 	ldrsb.w	r7, [r4]
	if (initial_Z) {
   29f1a:	b319      	cbz	r1, 29f64 <XYcZ_initial_double+0x60>
		uECC_vli_set(z, initial_Z, num_words);
   29f1c:	463a      	mov	r2, r7
   29f1e:	4668      	mov	r0, sp
   29f20:	f7ff fc47 	bl	297b2 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   29f24:	463a      	mov	r2, r7
   29f26:	4629      	mov	r1, r5
   29f28:	4640      	mov	r0, r8
   29f2a:	f7ff fc42 	bl	297b2 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   29f2e:	463a      	mov	r2, r7
   29f30:	4631      	mov	r1, r6
   29f32:	4648      	mov	r0, r9
   29f34:	f7ff fc3d 	bl	297b2 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   29f38:	4623      	mov	r3, r4
   29f3a:	466a      	mov	r2, sp
   29f3c:	4631      	mov	r1, r6
   29f3e:	4628      	mov	r0, r5
   29f40:	f7ff ffc1 	bl	29ec6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   29f44:	f8d4 70a4 	ldr.w	r7, [r4, #164]	; 0xa4
   29f48:	4623      	mov	r3, r4
   29f4a:	466a      	mov	r2, sp
   29f4c:	4631      	mov	r1, r6
   29f4e:	4628      	mov	r0, r5
   29f50:	47b8      	blx	r7
	apply_z(X2, Y2, z, curve);
   29f52:	4623      	mov	r3, r4
   29f54:	466a      	mov	r2, sp
   29f56:	4649      	mov	r1, r9
   29f58:	4640      	mov	r0, r8
   29f5a:	f7ff ffb4 	bl	29ec6 <apply_z>
}
   29f5e:	b009      	add	sp, #36	; 0x24
   29f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uECC_vli_clear(z, num_words);
   29f64:	4639      	mov	r1, r7
   29f66:	4668      	mov	r0, sp
   29f68:	f7ff fbe1 	bl	2972e <uECC_vli_clear>
		z[0] = 1;
   29f6c:	2301      	movs	r3, #1
   29f6e:	9300      	str	r3, [sp, #0]
   29f70:	e7d8      	b.n	29f24 <XYcZ_initial_double+0x20>

00029f72 <XYcZ_add>:
{
   29f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29f76:	b08a      	sub	sp, #40	; 0x28
   29f78:	4680      	mov	r8, r0
   29f7a:	4689      	mov	r9, r1
   29f7c:	4614      	mov	r4, r2
   29f7e:	461d      	mov	r5, r3
   29f80:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   29f84:	4656      	mov	r6, sl
   29f86:	f916 7b04 	ldrsb.w	r7, [r6], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   29f8a:	9700      	str	r7, [sp, #0]
   29f8c:	4633      	mov	r3, r6
   29f8e:	4602      	mov	r2, r0
   29f90:	4621      	mov	r1, r4
   29f92:	a802      	add	r0, sp, #8
   29f94:	f7ff fccb 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   29f98:	4652      	mov	r2, sl
   29f9a:	a902      	add	r1, sp, #8
   29f9c:	4608      	mov	r0, r1
   29f9e:	f7ff fd81 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   29fa2:	4653      	mov	r3, sl
   29fa4:	aa02      	add	r2, sp, #8
   29fa6:	4641      	mov	r1, r8
   29fa8:	4640      	mov	r0, r8
   29faa:	f7ff fd6b 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   29fae:	4653      	mov	r3, sl
   29fb0:	aa02      	add	r2, sp, #8
   29fb2:	4621      	mov	r1, r4
   29fb4:	4620      	mov	r0, r4
   29fb6:	f7ff fd65 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   29fba:	9700      	str	r7, [sp, #0]
   29fbc:	4633      	mov	r3, r6
   29fbe:	464a      	mov	r2, r9
   29fc0:	4629      	mov	r1, r5
   29fc2:	4628      	mov	r0, r5
   29fc4:	f7ff fcb3 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   29fc8:	4652      	mov	r2, sl
   29fca:	4629      	mov	r1, r5
   29fcc:	a802      	add	r0, sp, #8
   29fce:	f7ff fd69 	bl	29aa4 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   29fd2:	9700      	str	r7, [sp, #0]
   29fd4:	4633      	mov	r3, r6
   29fd6:	4642      	mov	r2, r8
   29fd8:	a902      	add	r1, sp, #8
   29fda:	4608      	mov	r0, r1
   29fdc:	f7ff fca7 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   29fe0:	9700      	str	r7, [sp, #0]
   29fe2:	4633      	mov	r3, r6
   29fe4:	4622      	mov	r2, r4
   29fe6:	a902      	add	r1, sp, #8
   29fe8:	4608      	mov	r0, r1
   29fea:	f7ff fca0 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   29fee:	9700      	str	r7, [sp, #0]
   29ff0:	4633      	mov	r3, r6
   29ff2:	4642      	mov	r2, r8
   29ff4:	4621      	mov	r1, r4
   29ff6:	4620      	mov	r0, r4
   29ff8:	f7ff fc99 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   29ffc:	4653      	mov	r3, sl
   29ffe:	4622      	mov	r2, r4
   2a000:	4649      	mov	r1, r9
   2a002:	4648      	mov	r0, r9
   2a004:	f7ff fd3e 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2a008:	9700      	str	r7, [sp, #0]
   2a00a:	4633      	mov	r3, r6
   2a00c:	aa02      	add	r2, sp, #8
   2a00e:	4641      	mov	r1, r8
   2a010:	4620      	mov	r0, r4
   2a012:	f7ff fc8c 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2a016:	4653      	mov	r3, sl
   2a018:	4622      	mov	r2, r4
   2a01a:	4629      	mov	r1, r5
   2a01c:	4628      	mov	r0, r5
   2a01e:	f7ff fd31 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2a022:	9700      	str	r7, [sp, #0]
   2a024:	4633      	mov	r3, r6
   2a026:	464a      	mov	r2, r9
   2a028:	4629      	mov	r1, r5
   2a02a:	4628      	mov	r0, r5
   2a02c:	f7ff fc7f 	bl	2992e <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2a030:	463a      	mov	r2, r7
   2a032:	a902      	add	r1, sp, #8
   2a034:	4620      	mov	r0, r4
   2a036:	f7ff fbbc 	bl	297b2 <uECC_vli_set>
}
   2a03a:	b00a      	add	sp, #40	; 0x28
   2a03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a040 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a044:	b0af      	sub	sp, #188	; 0xbc
   2a046:	9004      	str	r0, [sp, #16]
   2a048:	460d      	mov	r5, r1
   2a04a:	9105      	str	r1, [sp, #20]
   2a04c:	4692      	mov	sl, r2
   2a04e:	461c      	mov	r4, r3
   2a050:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2a054:	f998 b000 	ldrsb.w	fp, [r8]

	uECC_vli_set(Rx[1], point, num_words);
   2a058:	465a      	mov	r2, fp
   2a05a:	a826      	add	r0, sp, #152	; 0x98
   2a05c:	f7ff fba9 	bl	297b2 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2a060:	ea4f 038b 	mov.w	r3, fp, lsl #2
   2a064:	9302      	str	r3, [sp, #8]
   2a066:	eb05 038b 	add.w	r3, r5, fp, lsl #2
   2a06a:	9303      	str	r3, [sp, #12]
   2a06c:	465a      	mov	r2, fp
   2a06e:	4619      	mov	r1, r3
   2a070:	a816      	add	r0, sp, #88	; 0x58
   2a072:	f7ff fb9e 	bl	297b2 <uECC_vli_set>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
   2a076:	f8cd 8004 	str.w	r8, [sp, #4]
   2a07a:	9400      	str	r4, [sp, #0]
   2a07c:	ab0e      	add	r3, sp, #56	; 0x38
   2a07e:	aa1e      	add	r2, sp, #120	; 0x78
   2a080:	a916      	add	r1, sp, #88	; 0x58
   2a082:	a826      	add	r0, sp, #152	; 0x98
   2a084:	f7ff ff3e 	bl	29f04 <XYcZ_initial_double>

	for (i = num_bits - 2; i > 0; --i) {
   2a088:	f9bd 40e0 	ldrsh.w	r4, [sp, #224]	; 0xe0
   2a08c:	3c02      	subs	r4, #2
   2a08e:	b224      	sxth	r4, r4
   2a090:	4647      	mov	r7, r8
   2a092:	2c00      	cmp	r4, #0
   2a094:	dd25      	ble.n	2a0e2 <EccPoint_mult+0xa2>
		nb = !uECC_vli_testBit(scalar, i);
   2a096:	4621      	mov	r1, r4
   2a098:	4650      	mov	r0, sl
   2a09a:	f7ff fb67 	bl	2976c <uECC_vli_testBit>
   2a09e:	fab0 f080 	clz	r0, r0
   2a0a2:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2a0a4:	f1c0 0601 	rsb	r6, r0, #1
   2a0a8:	ab1e      	add	r3, sp, #120	; 0x78
   2a0aa:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2a0ae:	ab0e      	add	r3, sp, #56	; 0x38
   2a0b0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2a0b4:	ab1e      	add	r3, sp, #120	; 0x78
   2a0b6:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   2a0ba:	ab0e      	add	r3, sp, #56	; 0x38
   2a0bc:	eb03 1940 	add.w	r9, r3, r0, lsl #5
   2a0c0:	9700      	str	r7, [sp, #0]
   2a0c2:	464b      	mov	r3, r9
   2a0c4:	462a      	mov	r2, r5
   2a0c6:	4631      	mov	r1, r6
   2a0c8:	4640      	mov	r0, r8
   2a0ca:	f7ff fdcd 	bl	29c68 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2a0ce:	9700      	str	r7, [sp, #0]
   2a0d0:	4633      	mov	r3, r6
   2a0d2:	4642      	mov	r2, r8
   2a0d4:	4649      	mov	r1, r9
   2a0d6:	4628      	mov	r0, r5
   2a0d8:	f7ff ff4b 	bl	29f72 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2a0dc:	3c01      	subs	r4, #1
   2a0de:	b224      	sxth	r4, r4
   2a0e0:	e7d7      	b.n	2a092 <EccPoint_mult+0x52>
   2a0e2:	46b8      	mov	r8, r7
	}

	nb = !uECC_vli_testBit(scalar, 0);
   2a0e4:	2100      	movs	r1, #0
   2a0e6:	4650      	mov	r0, sl
   2a0e8:	f7ff fb40 	bl	2976c <uECC_vli_testBit>
   2a0ec:	fab0 f480 	clz	r4, r0
   2a0f0:	0964      	lsrs	r4, r4, #5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2a0f2:	f1c4 0501 	rsb	r5, r4, #1
   2a0f6:	ab1e      	add	r3, sp, #120	; 0x78
   2a0f8:	eb03 1645 	add.w	r6, r3, r5, lsl #5
   2a0fc:	ab0e      	add	r3, sp, #56	; 0x38
   2a0fe:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   2a102:	ab1e      	add	r3, sp, #120	; 0x78
   2a104:	eb03 1744 	add.w	r7, r3, r4, lsl #5
   2a108:	ab0e      	add	r3, sp, #56	; 0x38
   2a10a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   2a10e:	f8cd 8000 	str.w	r8, [sp]
   2a112:	4623      	mov	r3, r4
   2a114:	463a      	mov	r2, r7
   2a116:	4629      	mov	r1, r5
   2a118:	4630      	mov	r0, r6
   2a11a:	f7ff fda5 	bl	29c68 <XYcZ_addC>

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2a11e:	f108 0904 	add.w	r9, r8, #4
   2a122:	f8cd b000 	str.w	fp, [sp]
   2a126:	464b      	mov	r3, r9
   2a128:	aa1e      	add	r2, sp, #120	; 0x78
   2a12a:	a926      	add	r1, sp, #152	; 0x98
   2a12c:	a806      	add	r0, sp, #24
   2a12e:	f7ff fbfe 	bl	2992e <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2a132:	4643      	mov	r3, r8
   2a134:	462a      	mov	r2, r5
   2a136:	a906      	add	r1, sp, #24
   2a138:	4608      	mov	r0, r1
   2a13a:	f7ff fca3 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2a13e:	4643      	mov	r3, r8
   2a140:	9a05      	ldr	r2, [sp, #20]
   2a142:	a906      	add	r1, sp, #24
   2a144:	4608      	mov	r0, r1
   2a146:	f7ff fc9d 	bl	29a84 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2a14a:	465b      	mov	r3, fp
   2a14c:	464a      	mov	r2, r9
   2a14e:	a906      	add	r1, sp, #24
   2a150:	4608      	mov	r0, r1
   2a152:	f7ff fe17 	bl	29d84 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2a156:	4643      	mov	r3, r8
   2a158:	9a03      	ldr	r2, [sp, #12]
   2a15a:	a906      	add	r1, sp, #24
   2a15c:	4608      	mov	r0, r1
   2a15e:	f7ff fc91 	bl	29a84 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2a162:	4643      	mov	r3, r8
   2a164:	4632      	mov	r2, r6
   2a166:	a906      	add	r1, sp, #24
   2a168:	4608      	mov	r0, r1
   2a16a:	f7ff fc8b 	bl	29a84 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2a16e:	f8cd 8000 	str.w	r8, [sp]
   2a172:	462b      	mov	r3, r5
   2a174:	4632      	mov	r2, r6
   2a176:	4621      	mov	r1, r4
   2a178:	4638      	mov	r0, r7
   2a17a:	f7ff fefa 	bl	29f72 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2a17e:	4643      	mov	r3, r8
   2a180:	aa06      	add	r2, sp, #24
   2a182:	a90e      	add	r1, sp, #56	; 0x38
   2a184:	a81e      	add	r0, sp, #120	; 0x78
   2a186:	f7ff fe9e 	bl	29ec6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2a18a:	465a      	mov	r2, fp
   2a18c:	a91e      	add	r1, sp, #120	; 0x78
   2a18e:	9c04      	ldr	r4, [sp, #16]
   2a190:	4620      	mov	r0, r4
   2a192:	f7ff fb0e 	bl	297b2 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2a196:	465a      	mov	r2, fp
   2a198:	a90e      	add	r1, sp, #56	; 0x38
   2a19a:	4623      	mov	r3, r4
   2a19c:	9c02      	ldr	r4, [sp, #8]
   2a19e:	4423      	add	r3, r4
   2a1a0:	4618      	mov	r0, r3
   2a1a2:	f7ff fb06 	bl	297b2 <uECC_vli_set>
}
   2a1a6:	b02f      	add	sp, #188	; 0xbc
   2a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a1ac <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a1b0:	460e      	mov	r6, r1
   2a1b2:	4617      	mov	r7, r2

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2a1b4:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
   2a1b8:	f118 051f 	adds.w	r5, r8, #31
   2a1bc:	d415      	bmi.n	2a1ea <regularize_k+0x3e>
   2a1be:	f345 1547 	sbfx	r5, r5, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2a1c2:	f103 0424 	add.w	r4, r3, #36	; 0x24
   2a1c6:	462b      	mov	r3, r5
   2a1c8:	4622      	mov	r2, r4
   2a1ca:	4601      	mov	r1, r0
   2a1cc:	4630      	mov	r0, r6
   2a1ce:	f7ff fb35 	bl	2983c <uECC_vli_add>
   2a1d2:	b960      	cbnz	r0, 2a1ee <regularize_k+0x42>
   2a1d4:	ebb8 1f45 	cmp.w	r8, r5, lsl #5
   2a1d8:	da14      	bge.n	2a204 <regularize_k+0x58>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2a1da:	4641      	mov	r1, r8
   2a1dc:	4630      	mov	r0, r6
   2a1de:	f7ff fac5 	bl	2976c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2a1e2:	b990      	cbnz	r0, 2a20a <regularize_k+0x5e>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2a1e4:	f04f 0800 	mov.w	r8, #0
   2a1e8:	e003      	b.n	2a1f2 <regularize_k+0x46>
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2a1ea:	351f      	adds	r5, #31
   2a1ec:	e7e7      	b.n	2a1be <regularize_k+0x12>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2a1ee:	f04f 0801 	mov.w	r8, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2a1f2:	462b      	mov	r3, r5
   2a1f4:	4622      	mov	r2, r4
   2a1f6:	4631      	mov	r1, r6
   2a1f8:	4638      	mov	r0, r7
   2a1fa:	f7ff fb1f 	bl	2983c <uECC_vli_add>

	return carry;
}
   2a1fe:	4640      	mov	r0, r8
   2a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2a204:	f04f 0800 	mov.w	r8, #0
   2a208:	e7f3      	b.n	2a1f2 <regularize_k+0x46>
   2a20a:	f04f 0801 	mov.w	r8, #1
   2a20e:	e7f0      	b.n	2a1f2 <regularize_k+0x46>

0002a210 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   2a210:	b530      	push	{r4, r5, lr}
   2a212:	b095      	sub	sp, #84	; 0x54
   2a214:	4605      	mov	r5, r0
   2a216:	4608      	mov	r0, r1
   2a218:	4614      	mov	r4, r2

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2a21a:	a90c      	add	r1, sp, #48	; 0x30
   2a21c:	9102      	str	r1, [sp, #8]
   2a21e:	aa04      	add	r2, sp, #16
   2a220:	9203      	str	r2, [sp, #12]
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2a222:	4623      	mov	r3, r4
   2a224:	f7ff ffc2 	bl	2a1ac <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2a228:	fab0 f380 	clz	r3, r0
   2a22c:	095b      	lsrs	r3, r3, #5
   2a22e:	aa14      	add	r2, sp, #80	; 0x50
   2a230:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2a234:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2a238:	9401      	str	r4, [sp, #4]
   2a23a:	3301      	adds	r3, #1
   2a23c:	b21b      	sxth	r3, r3
   2a23e:	9300      	str	r3, [sp, #0]
   2a240:	2300      	movs	r3, #0
   2a242:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2a246:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2a24a:	4628      	mov	r0, r5
   2a24c:	f7ff fef8 	bl	2a040 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2a250:	4621      	mov	r1, r4
   2a252:	4628      	mov	r0, r5
   2a254:	f7ff fe2f 	bl	29eb6 <EccPoint_isZero>
   2a258:	b910      	cbnz	r0, 2a260 <EccPoint_compute_public_key+0x50>
		return 0;
	}
	return 1;
   2a25a:	2001      	movs	r0, #1
}
   2a25c:	b015      	add	sp, #84	; 0x54
   2a25e:	bd30      	pop	{r4, r5, pc}
		return 0;
   2a260:	2000      	movs	r0, #0
   2a262:	e7fb      	b.n	2a25c <EccPoint_compute_public_key+0x4c>

0002a264 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2a264:	b430      	push	{r4, r5}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2a266:	2400      	movs	r4, #0
   2a268:	428c      	cmp	r4, r1
   2a26a:	da0d      	bge.n	2a288 <uECC_vli_nativeToBytes+0x24>
		unsigned b = num_bytes - 1 - i;
   2a26c:	1b0b      	subs	r3, r1, r4
   2a26e:	3b01      	subs	r3, #1
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2a270:	f023 0503 	bic.w	r5, r3, #3
   2a274:	5955      	ldr	r5, [r2, r5]
   2a276:	f003 0303 	and.w	r3, r3, #3
   2a27a:	00db      	lsls	r3, r3, #3
   2a27c:	fa25 f303 	lsr.w	r3, r5, r3
   2a280:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2a282:	3401      	adds	r4, #1
   2a284:	b264      	sxtb	r4, r4
   2a286:	e7ef      	b.n	2a268 <uECC_vli_nativeToBytes+0x4>
	}
}
   2a288:	bc30      	pop	{r4, r5}
   2a28a:	4770      	bx	lr

0002a28c <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a28e:	4606      	mov	r6, r0
   2a290:	460f      	mov	r7, r1
   2a292:	4615      	mov	r5, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2a294:	1cd1      	adds	r1, r2, #3
   2a296:	d417      	bmi.n	2a2c8 <uECC_vli_bytesToNative+0x3c>
   2a298:	f341 0187 	sbfx	r1, r1, #2, #8
   2a29c:	4630      	mov	r0, r6
   2a29e:	f7ff fa46 	bl	2972e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2a2a2:	2400      	movs	r4, #0
   2a2a4:	42ac      	cmp	r4, r5
   2a2a6:	da11      	bge.n	2a2cc <uECC_vli_bytesToNative+0x40>
		unsigned b = num_bytes - 1 - i;
   2a2a8:	1b2b      	subs	r3, r5, r4
   2a2aa:	3b01      	subs	r3, #1
		native[b / uECC_WORD_SIZE] |=
   2a2ac:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2a2b0:	5d3a      	ldrb	r2, [r7, r4]
   2a2b2:	f003 0303 	and.w	r3, r3, #3
   2a2b6:	00db      	lsls	r3, r3, #3
   2a2b8:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2a2bc:	5872      	ldr	r2, [r6, r1]
   2a2be:	431a      	orrs	r2, r3
   2a2c0:	5072      	str	r2, [r6, r1]
	for (i = 0; i < num_bytes; ++i) {
   2a2c2:	3401      	adds	r4, #1
   2a2c4:	b264      	sxtb	r4, r4
   2a2c6:	e7ed      	b.n	2a2a4 <uECC_vli_bytesToNative+0x18>
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2a2c8:	3103      	adds	r1, #3
   2a2ca:	e7e5      	b.n	2a298 <uECC_vli_bytesToNative+0xc>
  	}
}
   2a2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a2ce <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   2a2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a2d2:	b090      	sub	sp, #64	; 0x40
   2a2d4:	4680      	mov	r8, r0
   2a2d6:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2a2d8:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2a2dc:	f7ff fdeb 	bl	29eb6 <EccPoint_isZero>
   2a2e0:	bb20      	cbnz	r0, 2a32c <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2a2e2:	1d26      	adds	r6, r4, #4
   2a2e4:	462a      	mov	r2, r5
   2a2e6:	4641      	mov	r1, r8
   2a2e8:	4630      	mov	r0, r6
   2a2ea:	f7ff fa71 	bl	297d0 <uECC_vli_cmp_unsafe>
   2a2ee:	2801      	cmp	r0, #1
   2a2f0:	d11f      	bne.n	2a332 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2a2f2:	eb08 0785 	add.w	r7, r8, r5, lsl #2
   2a2f6:	462a      	mov	r2, r5
   2a2f8:	4639      	mov	r1, r7
   2a2fa:	4630      	mov	r0, r6
   2a2fc:	f7ff fa68 	bl	297d0 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2a300:	2801      	cmp	r0, #1
   2a302:	d119      	bne.n	2a338 <uECC_valid_point+0x6a>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2a304:	4622      	mov	r2, r4
   2a306:	4639      	mov	r1, r7
   2a308:	a808      	add	r0, sp, #32
   2a30a:	f7ff fbcb 	bl	29aa4 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   2a30e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2a312:	4622      	mov	r2, r4
   2a314:	4641      	mov	r1, r8
   2a316:	4668      	mov	r0, sp
   2a318:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2a31a:	462a      	mov	r2, r5
   2a31c:	4669      	mov	r1, sp
   2a31e:	a808      	add	r0, sp, #32
   2a320:	f7ff fa70 	bl	29804 <uECC_vli_equal>
   2a324:	b958      	cbnz	r0, 2a33e <uECC_valid_point+0x70>
		return -3;

	return 0;
}
   2a326:	b010      	add	sp, #64	; 0x40
   2a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   2a32c:	f04f 30ff 	mov.w	r0, #4294967295
   2a330:	e7f9      	b.n	2a326 <uECC_valid_point+0x58>
		return -2;
   2a332:	f06f 0001 	mvn.w	r0, #1
   2a336:	e7f6      	b.n	2a326 <uECC_valid_point+0x58>
   2a338:	f06f 0001 	mvn.w	r0, #1
   2a33c:	e7f3      	b.n	2a326 <uECC_valid_point+0x58>
		return -3;
   2a33e:	f06f 0002 	mvn.w	r0, #2
   2a342:	e7f0      	b.n	2a326 <uECC_valid_point+0x58>

0002a344 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2a344:	b530      	push	{r4, r5, lr}
   2a346:	b091      	sub	sp, #68	; 0x44
   2a348:	4605      	mov	r5, r0
   2a34a:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2a34c:	f991 2001 	ldrsb.w	r2, [r1, #1]
   2a350:	4601      	mov	r1, r0
   2a352:	4668      	mov	r0, sp
   2a354:	f7ff ff9a 	bl	2a28c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2a358:	f994 0000 	ldrsb.w	r0, [r4]
	public_key + curve->num_bytes,
   2a35c:	f994 2001 	ldrsb.w	r2, [r4, #1]
	uECC_vli_bytesToNative(
   2a360:	18a9      	adds	r1, r5, r2
   2a362:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2a366:	f7ff ff91 	bl	2a28c <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2a36a:	2210      	movs	r2, #16
   2a36c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2a370:	4668      	mov	r0, sp
   2a372:	f7ff fa2d 	bl	297d0 <uECC_vli_cmp_unsafe>
   2a376:	b128      	cbz	r0, 2a384 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2a378:	4621      	mov	r1, r4
   2a37a:	4668      	mov	r0, sp
   2a37c:	f7ff ffa7 	bl	2a2ce <uECC_valid_point>
}
   2a380:	b011      	add	sp, #68	; 0x44
   2a382:	bd30      	pop	{r4, r5, pc}
		return -4;
   2a384:	f06f 0003 	mvn.w	r0, #3
   2a388:	e7fa      	b.n	2a380 <uECC_valid_public_key+0x3c>

0002a38a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2a38a:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2a38c:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a38e:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2a392:	2a00      	cmp	r2, #0
   2a394:	db03      	blt.n	2a39e <gf_double+0x14>
   2a396:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   2a398:	f100 020f 	add.w	r2, r0, #15
   2a39c:	e004      	b.n	2a3a8 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a39e:	2487      	movs	r4, #135	; 0x87
   2a3a0:	e7fa      	b.n	2a398 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2a3a2:	f813 0901 	ldrb.w	r0, [r3], #-1
   2a3a6:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   2a3a8:	7818      	ldrb	r0, [r3, #0]
   2a3aa:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   2a3ae:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   2a3b2:	428b      	cmp	r3, r1
   2a3b4:	d1f5      	bne.n	2a3a2 <gf_double+0x18>
	}
}
   2a3b6:	bc10      	pop	{r4}
   2a3b8:	4770      	bx	lr

0002a3ba <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2a3ba:	b130      	cbz	r0, 2a3ca <tc_cmac_erase+0x10>
{
   2a3bc:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2a3be:	2258      	movs	r2, #88	; 0x58
   2a3c0:	2100      	movs	r1, #0
   2a3c2:	f7ff f864 	bl	2948e <_set>

	return TC_CRYPTO_SUCCESS;
   2a3c6:	2001      	movs	r0, #1
}
   2a3c8:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2a3ca:	2000      	movs	r0, #0
}
   2a3cc:	4770      	bx	lr

0002a3ce <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a3ce:	b1a0      	cbz	r0, 2a3fa <tc_cmac_init+0x2c>
{
   2a3d0:	b510      	push	{r4, lr}
   2a3d2:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a3d4:	2210      	movs	r2, #16
   2a3d6:	2100      	movs	r1, #0
   2a3d8:	f7ff f859 	bl	2948e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2a3dc:	2210      	movs	r2, #16
   2a3de:	2100      	movs	r1, #0
   2a3e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a3e4:	f7ff f853 	bl	2948e <_set>
	s->leftover_offset = 0;
   2a3e8:	2300      	movs	r3, #0
   2a3ea:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2a3ec:	2200      	movs	r2, #0
   2a3ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a3f2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   2a3f6:	2001      	movs	r0, #1
}
   2a3f8:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2a3fa:	2000      	movs	r0, #0
}
   2a3fc:	4770      	bx	lr

0002a3fe <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   2a3fe:	b338      	cbz	r0, 2a450 <tc_cmac_setup+0x52>
{
   2a400:	b570      	push	{r4, r5, r6, lr}
   2a402:	460d      	mov	r5, r1
   2a404:	4616      	mov	r6, r2
   2a406:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   2a408:	b321      	cbz	r1, 2a454 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   2a40a:	2258      	movs	r2, #88	; 0x58
   2a40c:	2100      	movs	r1, #0
   2a40e:	f7ff f83e 	bl	2948e <_set>
	s->sched = sched;
   2a412:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2a414:	4629      	mov	r1, r5
   2a416:	4630      	mov	r0, r6
   2a418:	f7e8 f9e8 	bl	127ec <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a41c:	2210      	movs	r2, #16
   2a41e:	2100      	movs	r1, #0
   2a420:	4620      	mov	r0, r4
   2a422:	f7ff f834 	bl	2948e <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a426:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a428:	4621      	mov	r1, r4
   2a42a:	4620      	mov	r0, r4
   2a42c:	f7e8 fa3c 	bl	128a8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2a430:	f104 0510 	add.w	r5, r4, #16
   2a434:	4621      	mov	r1, r4
   2a436:	4628      	mov	r0, r5
   2a438:	f7ff ffa7 	bl	2a38a <gf_double>
	gf_double (s->K2, s->K1);
   2a43c:	4629      	mov	r1, r5
   2a43e:	f104 0020 	add.w	r0, r4, #32
   2a442:	f7ff ffa2 	bl	2a38a <gf_double>
	tc_cmac_init(s);
   2a446:	4620      	mov	r0, r4
   2a448:	f7ff ffc1 	bl	2a3ce <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2a44c:	2001      	movs	r0, #1
}
   2a44e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2a450:	2000      	movs	r0, #0
}
   2a452:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2a454:	2000      	movs	r0, #0
   2a456:	e7fa      	b.n	2a44e <tc_cmac_setup+0x50>

0002a458 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a458:	2800      	cmp	r0, #0
   2a45a:	d062      	beq.n	2a522 <tc_cmac_update+0xca>
{
   2a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a460:	460e      	mov	r6, r1
   2a462:	4617      	mov	r7, r2
   2a464:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2a466:	2a00      	cmp	r2, #0
   2a468:	d05d      	beq.n	2a526 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2a46a:	2900      	cmp	r1, #0
   2a46c:	d05e      	beq.n	2a52c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2a46e:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2a472:	ea50 0301 	orrs.w	r3, r0, r1
   2a476:	d05b      	beq.n	2a530 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2a478:	f110 32ff 	adds.w	r2, r0, #4294967295
   2a47c:	f141 33ff 	adc.w	r3, r1, #4294967295
   2a480:	6522      	str	r2, [r4, #80]	; 0x50
   2a482:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2a484:	6c65      	ldr	r5, [r4, #68]	; 0x44
   2a486:	b3a5      	cbz	r5, 2a4f2 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2a488:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   2a48c:	4547      	cmp	r7, r8
   2a48e:	d30d      	bcc.n	2a4ac <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2a490:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2a494:	4643      	mov	r3, r8
   2a496:	4632      	mov	r2, r6
   2a498:	4641      	mov	r1, r8
   2a49a:	4420      	add	r0, r4
   2a49c:	f7fe ffea 	bl	29474 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2a4a0:	3d10      	subs	r5, #16
   2a4a2:	442f      	add	r7, r5
		data += remaining_space;
   2a4a4:	4446      	add	r6, r8
		s->leftover_offset = 0;
   2a4a6:	2300      	movs	r3, #0
   2a4a8:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a4aa:	e013      	b.n	2a4d4 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2a4ac:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2a4b0:	463b      	mov	r3, r7
   2a4b2:	4632      	mov	r2, r6
   2a4b4:	4639      	mov	r1, r7
   2a4b6:	4420      	add	r0, r4
   2a4b8:	f7fe ffdc 	bl	29474 <_copy>
			s->leftover_offset += data_length;
   2a4bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2a4be:	443b      	add	r3, r7
   2a4c0:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2a4c2:	2001      	movs	r0, #1
   2a4c4:	e030      	b.n	2a528 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   2a4c6:	18e2      	adds	r2, r4, r3
   2a4c8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2a4cc:	5ce1      	ldrb	r1, [r4, r3]
   2a4ce:	404a      	eors	r2, r1
   2a4d0:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a4d2:	3301      	adds	r3, #1
   2a4d4:	2b0f      	cmp	r3, #15
   2a4d6:	d9f6      	bls.n	2a4c6 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a4d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a4da:	4621      	mov	r1, r4
   2a4dc:	4620      	mov	r0, r4
   2a4de:	f7e8 f9e3 	bl	128a8 <tc_aes_encrypt>
   2a4e2:	e006      	b.n	2a4f2 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a4e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a4e6:	4621      	mov	r1, r4
   2a4e8:	4620      	mov	r0, r4
   2a4ea:	f7e8 f9dd 	bl	128a8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2a4ee:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2a4f0:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   2a4f2:	2f10      	cmp	r7, #16
   2a4f4:	d908      	bls.n	2a508 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a4f6:	2300      	movs	r3, #0
   2a4f8:	2b0f      	cmp	r3, #15
   2a4fa:	d8f3      	bhi.n	2a4e4 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   2a4fc:	5cf0      	ldrb	r0, [r6, r3]
   2a4fe:	5ce5      	ldrb	r5, [r4, r3]
   2a500:	4068      	eors	r0, r5
   2a502:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a504:	3301      	adds	r3, #1
   2a506:	e7f7      	b.n	2a4f8 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   2a508:	b90f      	cbnz	r7, 2a50e <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2a50a:	2001      	movs	r0, #1
   2a50c:	e00c      	b.n	2a528 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   2a50e:	463b      	mov	r3, r7
   2a510:	4632      	mov	r2, r6
   2a512:	4639      	mov	r1, r7
   2a514:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a518:	f7fe ffac 	bl	29474 <_copy>
		s->leftover_offset = data_length;
   2a51c:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2a51e:	2001      	movs	r0, #1
   2a520:	e002      	b.n	2a528 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   2a522:	2000      	movs	r0, #0
}
   2a524:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   2a526:	2001      	movs	r0, #1
}
   2a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2a52c:	2000      	movs	r0, #0
   2a52e:	e7fb      	b.n	2a528 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   2a530:	2000      	movs	r0, #0
   2a532:	e7f9      	b.n	2a528 <tc_cmac_update+0xd0>

0002a534 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2a534:	b370      	cbz	r0, 2a594 <tc_cmac_final+0x60>
{
   2a536:	b538      	push	{r3, r4, r5, lr}
   2a538:	460c      	mov	r4, r1
   2a53a:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2a53c:	b361      	cbz	r1, 2a598 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2a53e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2a540:	2a10      	cmp	r2, #16
   2a542:	d10d      	bne.n	2a560 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2a544:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a546:	2300      	movs	r3, #0
   2a548:	2b0f      	cmp	r3, #15
   2a54a:	d819      	bhi.n	2a580 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2a54c:	18e2      	adds	r2, r4, r3
   2a54e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2a552:	5cc8      	ldrb	r0, [r1, r3]
   2a554:	4050      	eors	r0, r2
   2a556:	5ce2      	ldrb	r2, [r4, r3]
   2a558:	4042      	eors	r2, r0
   2a55a:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a55c:	3301      	adds	r3, #1
   2a55e:	e7f3      	b.n	2a548 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2a560:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2a564:	f1c2 0210 	rsb	r2, r2, #16
   2a568:	2100      	movs	r1, #0
   2a56a:	4420      	add	r0, r4
   2a56c:	f7fe ff8f 	bl	2948e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2a570:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2a572:	4423      	add	r3, r4
   2a574:	2280      	movs	r2, #128	; 0x80
   2a576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2a57a:	f104 0120 	add.w	r1, r4, #32
   2a57e:	e7e2      	b.n	2a546 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2a580:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a582:	4621      	mov	r1, r4
   2a584:	4628      	mov	r0, r5
   2a586:	f7e8 f98f 	bl	128a8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2a58a:	4620      	mov	r0, r4
   2a58c:	f7ff ff15 	bl	2a3ba <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2a590:	2001      	movs	r0, #1
}
   2a592:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2a594:	2000      	movs	r0, #0
}
   2a596:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2a598:	2000      	movs	r0, #0
   2a59a:	e7fa      	b.n	2a592 <tc_cmac_final+0x5e>

0002a59c <abort_function>:
{
   2a59c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2a59e:	2000      	movs	r0, #0
   2a5a0:	f7e7 f8bc 	bl	1171c <sys_reboot>

0002a5a4 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2a5a4:	b538      	push	{r3, r4, r5, lr}
   2a5a6:	4604      	mov	r4, r0

	if (esf != NULL) {
   2a5a8:	460d      	mov	r5, r1
   2a5aa:	b111      	cbz	r1, 2a5b2 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   2a5ac:	4608      	mov	r0, r1
   2a5ae:	f7e8 fe11 	bl	131d4 <esf_dump>
	}
	z_fatal_error(reason, esf);
   2a5b2:	4629      	mov	r1, r5
   2a5b4:	4620      	mov	r0, r4
   2a5b6:	f7f7 f923 	bl	21800 <z_fatal_error>
}
   2a5ba:	bd38      	pop	{r3, r4, r5, pc}

0002a5bc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2a5bc:	b508      	push	{r3, lr}
   2a5be:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2a5c0:	6800      	ldr	r0, [r0, #0]
   2a5c2:	f7ff ffef 	bl	2a5a4 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   2a5c6:	bd08      	pop	{r3, pc}

0002a5c8 <z_irq_spurious>:
{
   2a5c8:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2a5ca:	2100      	movs	r1, #0
   2a5cc:	2001      	movs	r0, #1
   2a5ce:	f7ff ffe9 	bl	2a5a4 <z_arm_fatal_error>
}
   2a5d2:	bd08      	pop	{r3, pc}

0002a5d4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2a5d4:	b508      	push	{r3, lr}
	handler();
   2a5d6:	f7e8 fe93 	bl	13300 <z_SysNmiOnReset>
	z_arm_int_exit();
   2a5da:	f7e8 ff8f 	bl	134fc <z_arm_exc_exit>
}
   2a5de:	bd08      	pop	{r3, pc}

0002a5e0 <memory_fault_recoverable>:
}
   2a5e0:	2000      	movs	r0, #0
   2a5e2:	4770      	bx	lr

0002a5e4 <fault_handle>:
{
   2a5e4:	b508      	push	{r3, lr}
	*recoverable = false;
   2a5e6:	2300      	movs	r3, #0
   2a5e8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   2a5ea:	1ecb      	subs	r3, r1, #3
   2a5ec:	2b09      	cmp	r3, #9
   2a5ee:	d81a      	bhi.n	2a626 <fault_handle+0x42>
   2a5f0:	e8df f003 	tbb	[pc, r3]
   2a5f4:	110d0905 	.word	0x110d0905
   2a5f8:	19191919 	.word	0x19191919
   2a5fc:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   2a5fe:	4611      	mov	r1, r2
   2a600:	f7e9 f914 	bl	1382c <hard_fault>
}
   2a604:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2a606:	2100      	movs	r1, #0
   2a608:	f7e9 f872 	bl	136f0 <mem_manage_fault>
		break;
   2a60c:	e7fa      	b.n	2a604 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   2a60e:	2100      	movs	r1, #0
   2a610:	f7e8 ff82 	bl	13518 <bus_fault>
		break;
   2a614:	e7f6      	b.n	2a604 <fault_handle+0x20>
		reason = usage_fault(esf);
   2a616:	f7e8 fff3 	bl	13600 <usage_fault>
		break;
   2a61a:	e7f3      	b.n	2a604 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   2a61c:	4611      	mov	r1, r2
   2a61e:	f7e9 f849 	bl	136b4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2a622:	2000      	movs	r0, #0
		break;
   2a624:	e7ee      	b.n	2a604 <fault_handle+0x20>
		reserved_exception(esf, fault);
   2a626:	f7e9 f84f 	bl	136c8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2a62a:	2000      	movs	r0, #0
	return reason;
   2a62c:	e7ea      	b.n	2a604 <fault_handle+0x20>

0002a62e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   2a62e:	6843      	ldr	r3, [r0, #4]
   2a630:	1e5a      	subs	r2, r3, #1
		&&
   2a632:	4213      	tst	r3, r2
   2a634:	d106      	bne.n	2a644 <mpu_partition_is_valid+0x16>
		&&
   2a636:	2b1f      	cmp	r3, #31
   2a638:	d906      	bls.n	2a648 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   2a63a:	6803      	ldr	r3, [r0, #0]
		&&
   2a63c:	421a      	tst	r2, r3
   2a63e:	d005      	beq.n	2a64c <mpu_partition_is_valid+0x1e>
   2a640:	2000      	movs	r0, #0
   2a642:	4770      	bx	lr
   2a644:	2000      	movs	r0, #0
   2a646:	4770      	bx	lr
   2a648:	2000      	movs	r0, #0
   2a64a:	4770      	bx	lr
   2a64c:	2001      	movs	r0, #1
}
   2a64e:	4770      	bx	lr

0002a650 <mpu_configure_region>:
{
   2a650:	b500      	push	{lr}
   2a652:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   2a654:	680b      	ldr	r3, [r1, #0]
   2a656:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   2a658:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a65a:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   2a65c:	2b20      	cmp	r3, #32
   2a65e:	d912      	bls.n	2a686 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   2a660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2a664:	d811      	bhi.n	2a68a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2a666:	3b01      	subs	r3, #1
   2a668:	fab3 f383 	clz	r3, r3
   2a66c:	f1c3 031f 	rsb	r3, r3, #31
   2a670:	005b      	lsls	r3, r3, #1
   2a672:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a676:	4313      	orrs	r3, r2
   2a678:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2a67a:	a901      	add	r1, sp, #4
   2a67c:	f7e9 fa94 	bl	13ba8 <region_allocate_and_init>
}
   2a680:	b005      	add	sp, #20
   2a682:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   2a686:	2308      	movs	r3, #8
   2a688:	e7f5      	b.n	2a676 <mpu_configure_region+0x26>
		return REGION_4G;
   2a68a:	233e      	movs	r3, #62	; 0x3e
   2a68c:	e7f3      	b.n	2a676 <mpu_configure_region+0x26>

0002a68e <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2a68e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a692:	4607      	mov	r7, r0
   2a694:	4688      	mov	r8, r1
	register const char *s = nptr;
   2a696:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2a698:	4620      	mov	r0, r4
   2a69a:	3401      	adds	r4, #1
   2a69c:	7801      	ldrb	r1, [r0, #0]
   2a69e:	460b      	mov	r3, r1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2a6a0:	2920      	cmp	r1, #32
   2a6a2:	d0f9      	beq.n	2a698 <strtoul+0xa>
   2a6a4:	3909      	subs	r1, #9
   2a6a6:	2904      	cmp	r1, #4
   2a6a8:	d9f6      	bls.n	2a698 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   2a6aa:	2b2d      	cmp	r3, #45	; 0x2d
   2a6ac:	d018      	beq.n	2a6e0 <strtoul+0x52>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
   2a6ae:	2b2b      	cmp	r3, #43	; 0x2b
   2a6b0:	d01b      	beq.n	2a6ea <strtoul+0x5c>
	register int neg = 0, any, cutlim;
   2a6b2:	f04f 0900 	mov.w	r9, #0
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2a6b6:	b10a      	cbz	r2, 2a6bc <strtoul+0x2e>
   2a6b8:	2a10      	cmp	r2, #16
   2a6ba:	d101      	bne.n	2a6c0 <strtoul+0x32>
   2a6bc:	2b30      	cmp	r3, #48	; 0x30
   2a6be:	d019      	beq.n	2a6f4 <strtoul+0x66>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
   2a6c0:	b912      	cbnz	r2, 2a6c8 <strtoul+0x3a>
		base = c == '0' ? 8 : 10;
   2a6c2:	2b30      	cmp	r3, #48	; 0x30
   2a6c4:	d01f      	beq.n	2a706 <strtoul+0x78>
   2a6c6:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2a6c8:	4696      	mov	lr, r2
   2a6ca:	f04f 31ff 	mov.w	r1, #4294967295
   2a6ce:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2a6d2:	fb02 fc01 	mul.w	ip, r2, r1
   2a6d6:	ea6f 0c0c 	mvn.w	ip, ip
	for (acc = 0, any = 0;; c = *s++) {
   2a6da:	2600      	movs	r6, #0
   2a6dc:	4630      	mov	r0, r6
   2a6de:	e02d      	b.n	2a73c <strtoul+0xae>
		c = *s++;
   2a6e0:	7823      	ldrb	r3, [r4, #0]
   2a6e2:	1c84      	adds	r4, r0, #2
		neg = 1;
   2a6e4:	f04f 0901 	mov.w	r9, #1
   2a6e8:	e7e5      	b.n	2a6b6 <strtoul+0x28>
		c = *s++;
   2a6ea:	7823      	ldrb	r3, [r4, #0]
   2a6ec:	1c84      	adds	r4, r0, #2
	register int neg = 0, any, cutlim;
   2a6ee:	f04f 0900 	mov.w	r9, #0
   2a6f2:	e7e0      	b.n	2a6b6 <strtoul+0x28>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2a6f4:	7821      	ldrb	r1, [r4, #0]
   2a6f6:	2978      	cmp	r1, #120	; 0x78
   2a6f8:	d001      	beq.n	2a6fe <strtoul+0x70>
   2a6fa:	2958      	cmp	r1, #88	; 0x58
   2a6fc:	d1e0      	bne.n	2a6c0 <strtoul+0x32>
		c = s[1];
   2a6fe:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   2a700:	3402      	adds	r4, #2
		base = 16;
   2a702:	2210      	movs	r2, #16
   2a704:	e7dc      	b.n	2a6c0 <strtoul+0x32>
		base = c == '0' ? 8 : 10;
   2a706:	2208      	movs	r2, #8
   2a708:	e7de      	b.n	2a6c8 <strtoul+0x3a>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2a70a:	f043 0a20 	orr.w	sl, r3, #32
   2a70e:	f1aa 0a61 	sub.w	sl, sl, #97	; 0x61
		if (isdigit(c)) {
			c -= '0';
		} else if (isalpha(c)) {
   2a712:	f1ba 0f19 	cmp.w	sl, #25
   2a716:	d825      	bhi.n	2a764 <strtoul+0xd6>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2a718:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2a71c:	2d19      	cmp	r5, #25
   2a71e:	d802      	bhi.n	2a726 <strtoul+0x98>
   2a720:	2537      	movs	r5, #55	; 0x37
   2a722:	1b5b      	subs	r3, r3, r5
   2a724:	e010      	b.n	2a748 <strtoul+0xba>
   2a726:	2557      	movs	r5, #87	; 0x57
   2a728:	e7fb      	b.n	2a722 <strtoul+0x94>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2a72a:	4563      	cmp	r3, ip
   2a72c:	dd13      	ble.n	2a756 <strtoul+0xc8>
			any = -1;
   2a72e:	f04f 36ff 	mov.w	r6, #4294967295
   2a732:	e001      	b.n	2a738 <strtoul+0xaa>
   2a734:	f04f 36ff 	mov.w	r6, #4294967295
	for (acc = 0, any = 0;; c = *s++) {
   2a738:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2a73c:	f1a3 0a30 	sub.w	sl, r3, #48	; 0x30
		if (isdigit(c)) {
   2a740:	f1ba 0f09 	cmp.w	sl, #9
   2a744:	d8e1      	bhi.n	2a70a <strtoul+0x7c>
			c -= '0';
   2a746:	4653      	mov	r3, sl
		if (c >= base) {
   2a748:	429a      	cmp	r2, r3
   2a74a:	dd0b      	ble.n	2a764 <strtoul+0xd6>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2a74c:	2e00      	cmp	r6, #0
   2a74e:	dbf1      	blt.n	2a734 <strtoul+0xa6>
   2a750:	4288      	cmp	r0, r1
   2a752:	d804      	bhi.n	2a75e <strtoul+0xd0>
   2a754:	d0e9      	beq.n	2a72a <strtoul+0x9c>
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2a756:	fb00 300e 	mla	r0, r0, lr, r3
			any = 1;
   2a75a:	2601      	movs	r6, #1
   2a75c:	e7ec      	b.n	2a738 <strtoul+0xaa>
			any = -1;
   2a75e:	f04f 36ff 	mov.w	r6, #4294967295
   2a762:	e7e9      	b.n	2a738 <strtoul+0xaa>
		}
	}
	if (any < 0) {
   2a764:	2e00      	cmp	r6, #0
   2a766:	db0c      	blt.n	2a782 <strtoul+0xf4>
		acc = ULONG_MAX;
		errno = ERANGE;
	} else if (neg) {
   2a768:	f1b9 0f00 	cmp.w	r9, #0
   2a76c:	d000      	beq.n	2a770 <strtoul+0xe2>
		acc = -acc;
   2a76e:	4240      	negs	r0, r0
	}
	if (endptr != NULL) {
   2a770:	f1b8 0f00 	cmp.w	r8, #0
   2a774:	d003      	beq.n	2a77e <strtoul+0xf0>
		*endptr = (char *)(any ? s - 1 : nptr);
   2a776:	b106      	cbz	r6, 2a77a <strtoul+0xec>
   2a778:	1e67      	subs	r7, r4, #1
   2a77a:	f8c8 7000 	str.w	r7, [r8]
	}
	return acc;
}
   2a77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2a782:	f7f7 f807 	bl	21794 <z_impl_z_errno>
		errno = ERANGE;
   2a786:	2322      	movs	r3, #34	; 0x22
   2a788:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2a78a:	f04f 30ff 	mov.w	r0, #4294967295
   2a78e:	e7ef      	b.n	2a770 <strtoul+0xe2>

0002a790 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2a790:	4602      	mov	r2, r0
   2a792:	780b      	ldrb	r3, [r1, #0]
   2a794:	b11b      	cbz	r3, 2a79e <strcpy+0xe>
		*d = *s;
   2a796:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   2a79a:	3101      	adds	r1, #1
   2a79c:	e7f9      	b.n	2a792 <strcpy+0x2>
	}

	*d = '\0';
   2a79e:	7013      	strb	r3, [r2, #0]

	return dest;
}
   2a7a0:	4770      	bx	lr

0002a7a2 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2a7a2:	4603      	mov	r3, r0
   2a7a4:	b1a2      	cbz	r2, 2a7d0 <strncpy+0x2e>
{
   2a7a6:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   2a7a8:	780c      	ldrb	r4, [r1, #0]
   2a7aa:	b12c      	cbz	r4, 2a7b8 <strncpy+0x16>
		*d = *s;
   2a7ac:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   2a7b0:	3101      	adds	r1, #1
		d++;
		n--;
   2a7b2:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   2a7b4:	2a00      	cmp	r2, #0
   2a7b6:	d1f7      	bne.n	2a7a8 <strncpy+0x6>
	}

	while (n > 0) {
   2a7b8:	b122      	cbz	r2, 2a7c4 <strncpy+0x22>
		*d = '\0';
   2a7ba:	2100      	movs	r1, #0
   2a7bc:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   2a7c0:	3a01      	subs	r2, #1
   2a7c2:	e7f9      	b.n	2a7b8 <strncpy+0x16>
	}

	return dest;
}
   2a7c4:	bc10      	pop	{r4}
   2a7c6:	4770      	bx	lr
		*d = '\0';
   2a7c8:	2100      	movs	r1, #0
   2a7ca:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2a7ce:	3a01      	subs	r2, #1
	while (n > 0) {
   2a7d0:	2a00      	cmp	r2, #0
   2a7d2:	d1f9      	bne.n	2a7c8 <strncpy+0x26>
   2a7d4:	4770      	bx	lr

0002a7d6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2a7d6:	4603      	mov	r3, r0
	size_t n = 0;
   2a7d8:	2000      	movs	r0, #0

	while (*s != '\0') {
   2a7da:	781a      	ldrb	r2, [r3, #0]
   2a7dc:	b112      	cbz	r2, 2a7e4 <strlen+0xe>
		s++;
   2a7de:	3301      	adds	r3, #1
		n++;
   2a7e0:	3001      	adds	r0, #1
   2a7e2:	e7fa      	b.n	2a7da <strlen+0x4>
	}

	return n;
}
   2a7e4:	4770      	bx	lr

0002a7e6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2a7e6:	4603      	mov	r3, r0
	size_t n = 0;
   2a7e8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2a7ea:	781a      	ldrb	r2, [r3, #0]
   2a7ec:	b122      	cbz	r2, 2a7f8 <strnlen+0x12>
   2a7ee:	4288      	cmp	r0, r1
   2a7f0:	d202      	bcs.n	2a7f8 <strnlen+0x12>
		s++;
   2a7f2:	3301      	adds	r3, #1
		n++;
   2a7f4:	3001      	adds	r0, #1
   2a7f6:	e7f8      	b.n	2a7ea <strnlen+0x4>
	}

	return n;
}
   2a7f8:	4770      	bx	lr

0002a7fa <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2a7fa:	7803      	ldrb	r3, [r0, #0]
   2a7fc:	780a      	ldrb	r2, [r1, #0]
   2a7fe:	4293      	cmp	r3, r2
   2a800:	d103      	bne.n	2a80a <strcmp+0x10>
   2a802:	b113      	cbz	r3, 2a80a <strcmp+0x10>
		s1++;
   2a804:	3001      	adds	r0, #1
		s2++;
   2a806:	3101      	adds	r1, #1
   2a808:	e7f7      	b.n	2a7fa <strcmp>
	}

	return *s1 - *s2;
}
   2a80a:	1a98      	subs	r0, r3, r2
   2a80c:	4770      	bx	lr

0002a80e <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2a80e:	b192      	cbz	r2, 2a836 <strncmp+0x28>
{
   2a810:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2a812:	7803      	ldrb	r3, [r0, #0]
   2a814:	780c      	ldrb	r4, [r1, #0]
   2a816:	42a3      	cmp	r3, r4
   2a818:	d105      	bne.n	2a826 <strncmp+0x18>
   2a81a:	b123      	cbz	r3, 2a826 <strncmp+0x18>
		s1++;
   2a81c:	3001      	adds	r0, #1
		s2++;
   2a81e:	3101      	adds	r1, #1
		n--;
   2a820:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2a822:	2a00      	cmp	r2, #0
   2a824:	d1f5      	bne.n	2a812 <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2a826:	b122      	cbz	r2, 2a832 <strncmp+0x24>
   2a828:	7800      	ldrb	r0, [r0, #0]
   2a82a:	780b      	ldrb	r3, [r1, #0]
   2a82c:	1ac0      	subs	r0, r0, r3
}
   2a82e:	bc10      	pop	{r4}
   2a830:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
   2a832:	2000      	movs	r0, #0
   2a834:	e7fb      	b.n	2a82e <strncmp+0x20>
   2a836:	b11a      	cbz	r2, 2a840 <strncmp+0x32>
   2a838:	7800      	ldrb	r0, [r0, #0]
   2a83a:	780b      	ldrb	r3, [r1, #0]
   2a83c:	1ac0      	subs	r0, r0, r3
   2a83e:	4770      	bx	lr
   2a840:	2000      	movs	r0, #0
}
   2a842:	4770      	bx	lr

0002a844 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2a844:	b17a      	cbz	r2, 2a866 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2a846:	1e53      	subs	r3, r2, #1
   2a848:	d00f      	beq.n	2a86a <memcmp+0x26>
{
   2a84a:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   2a84c:	7804      	ldrb	r4, [r0, #0]
   2a84e:	780a      	ldrb	r2, [r1, #0]
   2a850:	4294      	cmp	r4, r2
   2a852:	d103      	bne.n	2a85c <memcmp+0x18>
		c1++;
   2a854:	3001      	adds	r0, #1
		c2++;
   2a856:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   2a858:	3b01      	subs	r3, #1
   2a85a:	d1f7      	bne.n	2a84c <memcmp+0x8>
	}

	return *c1 - *c2;
   2a85c:	7800      	ldrb	r0, [r0, #0]
   2a85e:	780b      	ldrb	r3, [r1, #0]
   2a860:	1ac0      	subs	r0, r0, r3
}
   2a862:	bc10      	pop	{r4}
   2a864:	4770      	bx	lr
		return 0;
   2a866:	2000      	movs	r0, #0
   2a868:	4770      	bx	lr
	return *c1 - *c2;
   2a86a:	7800      	ldrb	r0, [r0, #0]
   2a86c:	780b      	ldrb	r3, [r1, #0]
   2a86e:	1ac0      	subs	r0, r0, r3
}
   2a870:	4770      	bx	lr

0002a872 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2a872:	1a43      	subs	r3, r0, r1
   2a874:	4293      	cmp	r3, r2
   2a876:	d30b      	bcc.n	2a890 <memmove+0x1e>
	char *dest = d;
   2a878:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2a87a:	b17a      	cbz	r2, 2a89c <memmove+0x2a>
{
   2a87c:	b410      	push	{r4}
			*dest = *src;
   2a87e:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a882:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
   2a886:	3a01      	subs	r2, #1
		while (n > 0) {
   2a888:	2a00      	cmp	r2, #0
   2a88a:	d1f8      	bne.n	2a87e <memmove+0xc>
		}
	}

	return d;
}
   2a88c:	bc10      	pop	{r4}
   2a88e:	4770      	bx	lr
		while (n > 0) {
   2a890:	b11a      	cbz	r2, 2a89a <memmove+0x28>
			n--;
   2a892:	3a01      	subs	r2, #1
			dest[n] = src[n];
   2a894:	5c8b      	ldrb	r3, [r1, r2]
   2a896:	5483      	strb	r3, [r0, r2]
   2a898:	e7fa      	b.n	2a890 <memmove+0x1e>
   2a89a:	4770      	bx	lr
   2a89c:	4770      	bx	lr

0002a89e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   2a89e:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   2a8a0:	ea80 0301 	eor.w	r3, r0, r1
   2a8a4:	f013 0f03 	tst.w	r3, #3
   2a8a8:	d001      	beq.n	2a8ae <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   2a8aa:	4603      	mov	r3, r0
   2a8ac:	e017      	b.n	2a8de <memcpy+0x40>
   2a8ae:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   2a8b0:	f013 0f03 	tst.w	r3, #3
   2a8b4:	d00b      	beq.n	2a8ce <memcpy+0x30>
			if (n == 0) {
   2a8b6:	b1a2      	cbz	r2, 2a8e2 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   2a8b8:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a8bc:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   2a8c0:	3a01      	subs	r2, #1
   2a8c2:	e7f5      	b.n	2a8b0 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   2a8c4:	f851 4b04 	ldr.w	r4, [r1], #4
   2a8c8:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   2a8cc:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   2a8ce:	2a03      	cmp	r2, #3
   2a8d0:	d8f8      	bhi.n	2a8c4 <memcpy+0x26>
   2a8d2:	e004      	b.n	2a8de <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   2a8d4:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a8d8:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   2a8dc:	3a01      	subs	r2, #1
	while (n > 0) {
   2a8de:	2a00      	cmp	r2, #0
   2a8e0:	d1f8      	bne.n	2a8d4 <memcpy+0x36>
	}

	return d;
}
   2a8e2:	bc10      	pop	{r4}
   2a8e4:	4770      	bx	lr

0002a8e6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   2a8e6:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2a8e8:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   2a8ea:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2a8ec:	f013 0f03 	tst.w	r3, #3
   2a8f0:	d004      	beq.n	2a8fc <memset+0x16>
		if (n == 0) {
   2a8f2:	b19a      	cbz	r2, 2a91c <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   2a8f4:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   2a8f8:	3a01      	subs	r2, #1
   2a8fa:	e7f7      	b.n	2a8ec <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   2a8fc:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   2a8fe:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   2a902:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2a906:	2a03      	cmp	r2, #3
   2a908:	d906      	bls.n	2a918 <memset+0x32>
		*(d_word++) = c_word;
   2a90a:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   2a90e:	3a04      	subs	r2, #4
   2a910:	e7f9      	b.n	2a906 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   2a912:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   2a916:	3a01      	subs	r2, #1
	while (n > 0) {
   2a918:	2a00      	cmp	r2, #0
   2a91a:	d1fa      	bne.n	2a912 <memset+0x2c>
	}

	return buf;
}
   2a91c:	bc10      	pop	{r4}
   2a91e:	4770      	bx	lr

0002a920 <_stdout_hook_default>:
}
   2a920:	f04f 30ff 	mov.w	r0, #4294967295
   2a924:	4770      	bx	lr

0002a926 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2a926:	b084      	sub	sp, #16
   2a928:	ab04      	add	r3, sp, #16
   2a92a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2a92e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2a932:	2b06      	cmp	r3, #6
   2a934:	d001      	beq.n	2a93a <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2a936:	b004      	add	sp, #16
   2a938:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2a93a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a93e:	2201      	movs	r2, #1
   2a940:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a944:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a948:	bf20      	wfe
    while (true)
   2a94a:	e7fd      	b.n	2a948 <pm_power_state_set+0x22>

0002a94c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2a94c:	b084      	sub	sp, #16
   2a94e:	ab04      	add	r3, sp, #16
   2a950:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2a954:	2300      	movs	r3, #0
   2a956:	f383 8811 	msr	BASEPRI, r3
   2a95a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a95e:	b004      	add	sp, #16
   2a960:	4770      	bx	lr

0002a962 <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
   2a962:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
   2a964:	f7f5 fd7c 	bl	20460 <bt_encrypt_le>
#endif
}
   2a968:	bd08      	pop	{r3, pc}

0002a96a <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2a96a:	b530      	push	{r4, r5, lr}
   2a96c:	b085      	sub	sp, #20
   2a96e:	4604      	mov	r4, r0
   2a970:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2a972:	2203      	movs	r2, #3
   2a974:	4668      	mov	r0, sp
   2a976:	f7ff ff92 	bl	2a89e <memcpy>
	(void)memset(res + 3, 0, 13);
   2a97a:	220d      	movs	r2, #13
   2a97c:	2100      	movs	r1, #0
   2a97e:	f10d 0003 	add.w	r0, sp, #3
   2a982:	f7ff ffb0 	bl	2a8e6 <memset>

	err = internal_encrypt_le(irk, res, res);
   2a986:	466a      	mov	r2, sp
   2a988:	4669      	mov	r1, sp
   2a98a:	4620      	mov	r0, r4
   2a98c:	f7ff ffe9 	bl	2a962 <internal_encrypt_le>
	if (err) {
   2a990:	4604      	mov	r4, r0
   2a992:	b110      	cbz	r0, 2a99a <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   2a994:	4620      	mov	r0, r4
   2a996:	b005      	add	sp, #20
   2a998:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   2a99a:	2203      	movs	r2, #3
   2a99c:	4669      	mov	r1, sp
   2a99e:	4628      	mov	r0, r5
   2a9a0:	f7ff ff7d 	bl	2a89e <memcpy>
	return 0;
   2a9a4:	e7f6      	b.n	2a994 <ah+0x2a>

0002a9a6 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2a9a6:	b510      	push	{r4, lr}
   2a9a8:	b082      	sub	sp, #8
   2a9aa:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2a9ac:	aa01      	add	r2, sp, #4
   2a9ae:	3103      	adds	r1, #3
   2a9b0:	f7ff ffdb 	bl	2a96a <ah>
	if (err) {
   2a9b4:	b110      	cbz	r0, 2a9bc <bt_rpa_irk_matches+0x16>
		return false;
   2a9b6:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2a9b8:	b002      	add	sp, #8
   2a9ba:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
   2a9bc:	2203      	movs	r2, #3
   2a9be:	a901      	add	r1, sp, #4
   2a9c0:	4620      	mov	r0, r4
   2a9c2:	f7ff ff3f 	bl	2a844 <memcmp>
   2a9c6:	fab0 f080 	clz	r0, r0
   2a9ca:	0940      	lsrs	r0, r0, #5
   2a9cc:	e7f4      	b.n	2a9b8 <bt_rpa_irk_matches+0x12>

0002a9ce <clear_ecc_events>:
	cmd = (void *)(buf->data + sizeof(struct bt_hci_cmd_hdr));
   2a9ce:	6883      	ldr	r3, [r0, #8]
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2a9d0:	78da      	ldrb	r2, [r3, #3]
   2a9d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2a9d6:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2a9d8:	791a      	ldrb	r2, [r3, #4]
   2a9da:	f022 0201 	bic.w	r2, r2, #1
   2a9de:	711a      	strb	r2, [r3, #4]
}
   2a9e0:	4770      	bx	lr

0002a9e2 <send_cmd_status>:
{
   2a9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a9e6:	4606      	mov	r6, r0
   2a9e8:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2a9ea:	f04f 32ff 	mov.w	r2, #4294967295
   2a9ee:	f04f 33ff 	mov.w	r3, #4294967295
   2a9f2:	2100      	movs	r1, #0
   2a9f4:	200f      	movs	r0, #15
   2a9f6:	f7e9 feab 	bl	14750 <bt_buf_get_evt>
   2a9fa:	4604      	mov	r4, r0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2a9fc:	2701      	movs	r7, #1
   2a9fe:	7507      	strb	r7, [r0, #20]
	return net_buf_simple_add(&buf->b, len);
   2aa00:	f100 0808 	add.w	r8, r0, #8
   2aa04:	2102      	movs	r1, #2
   2aa06:	4640      	mov	r0, r8
   2aa08:	f7f2 fc7e 	bl	1d308 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2aa0c:	230f      	movs	r3, #15
   2aa0e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   2aa10:	2104      	movs	r1, #4
   2aa12:	7041      	strb	r1, [r0, #1]
   2aa14:	4640      	mov	r0, r8
   2aa16:	f7f2 fc77 	bl	1d308 <net_buf_simple_add>
	evt->ncmd = 1U;
   2aa1a:	7047      	strb	r7, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
   2aa1c:	8046      	strh	r6, [r0, #2]
	evt->status = status;
   2aa1e:	7005      	strb	r5, [r0, #0]
		bt_recv(buf);
   2aa20:	4620      	mov	r0, r4
   2aa22:	f7eb fa39 	bl	15e98 <bt_recv>
}
   2aa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aa2a <le_gen_dhkey_v1>:
{
   2aa2a:	b538      	push	{r3, r4, r5, lr}
   2aa2c:	4604      	mov	r4, r0
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2aa2e:	2100      	movs	r1, #0
   2aa30:	6880      	ldr	r0, [r0, #8]
   2aa32:	f7e9 fbfb 	bl	1422c <le_gen_dhkey>
   2aa36:	4605      	mov	r5, r0
	net_buf_unref(buf);
   2aa38:	4620      	mov	r0, r4
   2aa3a:	f7f2 fb4d 	bl	1d0d8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2aa3e:	4629      	mov	r1, r5
   2aa40:	f242 0026 	movw	r0, #8230	; 0x2026
   2aa44:	f7ff ffcd 	bl	2a9e2 <send_cmd_status>
}
   2aa48:	bd38      	pop	{r3, r4, r5, pc}

0002aa4a <le_gen_dhkey_v2>:
{
   2aa4a:	b538      	push	{r3, r4, r5, lr}
   2aa4c:	4604      	mov	r4, r0
	cmd = (void *)buf->data;
   2aa4e:	6880      	ldr	r0, [r0, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2aa50:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2aa54:	f7e9 fbea 	bl	1422c <le_gen_dhkey>
   2aa58:	4605      	mov	r5, r0
	net_buf_unref(buf);
   2aa5a:	4620      	mov	r0, r4
   2aa5c:	f7f2 fb3c 	bl	1d0d8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2aa60:	4629      	mov	r1, r5
   2aa62:	f242 005e 	movw	r0, #8286	; 0x205e
   2aa66:	f7ff ffbc 	bl	2a9e2 <send_cmd_status>
}
   2aa6a:	bd38      	pop	{r3, r4, r5, pc}

0002aa6c <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(1);
   2aa6c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	supported_commands[34] |= BIT(2);
   2aa70:	f043 0306 	orr.w	r3, r3, #6
   2aa74:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   2aa78:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   2aa7c:	f043 0304 	orr.w	r3, r3, #4
   2aa80:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   2aa84:	4770      	bx	lr

0002aa86 <default_CSPRNG>:
{
   2aa86:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   2aa88:	f7f5 fcb8 	bl	203fc <bt_rand>
}
   2aa8c:	fab0 f080 	clz	r0, r0
   2aa90:	0940      	lsrs	r0, r0, #5
   2aa92:	bd08      	pop	{r3, pc}

0002aa94 <bt_settings_decode_key>:
{
   2aa94:	b570      	push	{r4, r5, r6, lr}
   2aa96:	4605      	mov	r5, r0
   2aa98:	460e      	mov	r6, r1
	if (settings_name_next(key, NULL) != 13) {
   2aa9a:	2100      	movs	r1, #0
   2aa9c:	f7fe fbfa 	bl	29294 <settings_name_next>
   2aaa0:	280d      	cmp	r0, #13
   2aaa2:	d11b      	bne.n	2aadc <bt_settings_decode_key+0x48>
	if (key[12] == '0') {
   2aaa4:	7b2b      	ldrb	r3, [r5, #12]
   2aaa6:	2b30      	cmp	r3, #48	; 0x30
   2aaa8:	d013      	beq.n	2aad2 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2aaaa:	2b31      	cmp	r3, #49	; 0x31
   2aaac:	d119      	bne.n	2aae2 <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_RANDOM;
   2aaae:	2301      	movs	r3, #1
   2aab0:	7033      	strb	r3, [r6, #0]
{
   2aab2:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 6; i++) {
   2aab4:	2c05      	cmp	r4, #5
   2aab6:	d80f      	bhi.n	2aad8 <bt_settings_decode_key+0x44>
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2aab8:	f1c4 0205 	rsb	r2, r4, #5
   2aabc:	4432      	add	r2, r6
   2aabe:	2301      	movs	r3, #1
   2aac0:	441a      	add	r2, r3
   2aac2:	2102      	movs	r1, #2
   2aac4:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   2aac8:	f7fd fbb9 	bl	2823e <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2aacc:	3401      	adds	r4, #1
   2aace:	b2e4      	uxtb	r4, r4
   2aad0:	e7f0      	b.n	2aab4 <bt_settings_decode_key+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   2aad2:	2300      	movs	r3, #0
   2aad4:	7033      	strb	r3, [r6, #0]
   2aad6:	e7ec      	b.n	2aab2 <bt_settings_decode_key+0x1e>
	return 0;
   2aad8:	2000      	movs	r0, #0
}
   2aada:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2aadc:	f06f 0015 	mvn.w	r0, #21
   2aae0:	e7fb      	b.n	2aada <bt_settings_decode_key+0x46>
		return -EINVAL;
   2aae2:	f06f 0015 	mvn.w	r0, #21
   2aae6:	e7f8      	b.n	2aada <bt_settings_decode_key+0x46>

0002aae8 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2aae8:	b510      	push	{r4, lr}
   2aaea:	b08a      	sub	sp, #40	; 0x28
   2aaec:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   2aaee:	a905      	add	r1, sp, #20
   2aaf0:	f7e9 fdb8 	bl	14664 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2aaf4:	4669      	mov	r1, sp
   2aaf6:	4620      	mov	r0, r4
   2aaf8:	f7e9 fdb4 	bl	14664 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   2aafc:	2210      	movs	r2, #16
   2aafe:	f10d 0101 	add.w	r1, sp, #1
   2ab02:	f10d 0015 	add.w	r0, sp, #21
   2ab06:	f7ff fe9d 	bl	2a844 <memcmp>
}
   2ab0a:	b00a      	add	sp, #40	; 0x28
   2ab0c:	bd10      	pop	{r4, pc}

0002ab0e <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2ab0e:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2ab10:	7803      	ldrb	r3, [r0, #0]
   2ab12:	780a      	ldrb	r2, [r1, #0]
   2ab14:	4293      	cmp	r3, r2
   2ab16:	d107      	bne.n	2ab28 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   2ab18:	2b01      	cmp	r3, #1
   2ab1a:	d00c      	beq.n	2ab36 <bt_uuid_cmp+0x28>
   2ab1c:	2b02      	cmp	r3, #2
   2ab1e:	d00e      	beq.n	2ab3e <bt_uuid_cmp+0x30>
   2ab20:	b12b      	cbz	r3, 2ab2e <bt_uuid_cmp+0x20>
   2ab22:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2ab26:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   2ab28:	f7ff ffde 	bl	2aae8 <uuid128_cmp>
   2ab2c:	e7fb      	b.n	2ab26 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2ab2e:	8840      	ldrh	r0, [r0, #2]
   2ab30:	884b      	ldrh	r3, [r1, #2]
   2ab32:	1ac0      	subs	r0, r0, r3
   2ab34:	e7f7      	b.n	2ab26 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2ab36:	6840      	ldr	r0, [r0, #4]
   2ab38:	684b      	ldr	r3, [r1, #4]
   2ab3a:	1ac0      	subs	r0, r0, r3
   2ab3c:	e7f3      	b.n	2ab26 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2ab3e:	2210      	movs	r2, #16
   2ab40:	3101      	adds	r1, #1
   2ab42:	3001      	adds	r0, #1
   2ab44:	f7ff fe7e 	bl	2a844 <memcmp>
   2ab48:	e7ed      	b.n	2ab26 <bt_uuid_cmp+0x18>

0002ab4a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   2ab4a:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2ab4c:	2a04      	cmp	r2, #4
   2ab4e:	d00e      	beq.n	2ab6e <bt_uuid_create+0x24>
   2ab50:	2a10      	cmp	r2, #16
   2ab52:	d01b      	beq.n	2ab8c <bt_uuid_create+0x42>
   2ab54:	2a02      	cmp	r2, #2
   2ab56:	d001      	beq.n	2ab5c <bt_uuid_create+0x12>
   2ab58:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2ab5a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
   2ab5c:	2300      	movs	r3, #0
   2ab5e:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2ab60:	784a      	ldrb	r2, [r1, #1]
   2ab62:	780b      	ldrb	r3, [r1, #0]
   2ab64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2ab68:	8043      	strh	r3, [r0, #2]
	return true;
   2ab6a:	2001      	movs	r0, #1
		break;
   2ab6c:	e7f5      	b.n	2ab5a <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   2ab6e:	2301      	movs	r3, #1
   2ab70:	7003      	strb	r3, [r0, #0]
   2ab72:	78cc      	ldrb	r4, [r1, #3]
   2ab74:	788a      	ldrb	r2, [r1, #2]
   2ab76:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   2ab7a:	784d      	ldrb	r5, [r1, #1]
   2ab7c:	780a      	ldrb	r2, [r1, #0]
   2ab7e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2ab82:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2ab86:	6042      	str	r2, [r0, #4]
	return true;
   2ab88:	4618      	mov	r0, r3
		break;
   2ab8a:	e7e6      	b.n	2ab5a <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   2ab8c:	2302      	movs	r3, #2
   2ab8e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2ab92:	2210      	movs	r2, #16
   2ab94:	f7ff fe83 	bl	2a89e <memcpy>
	return true;
   2ab98:	2001      	movs	r0, #1
		break;
   2ab9a:	e7de      	b.n	2ab5a <bt_uuid_create+0x10>

0002ab9c <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2ab9c:	b510      	push	{r4, lr}
   2ab9e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2aba0:	2301      	movs	r3, #1
   2aba2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2aba6:	2106      	movs	r1, #6
   2aba8:	f7f5 fc28 	bl	203fc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2abac:	b918      	cbnz	r0, 2abb6 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2abae:	79a3      	ldrb	r3, [r4, #6]
   2abb0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2abb4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2abb6:	bd10      	pop	{r4, pc}

0002abb8 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2abb8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2abbc:	b17b      	cbz	r3, 2abde <update_sec_level+0x26>
   2abbe:	7b5a      	ldrb	r2, [r3, #13]
   2abc0:	f012 0f01 	tst.w	r2, #1
   2abc4:	d00b      	beq.n	2abde <update_sec_level+0x26>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2abc6:	f012 0f10 	tst.w	r2, #16
   2abca:	d002      	beq.n	2abd2 <update_sec_level+0x1a>
		    conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE) {
   2abcc:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2abce:	2b10      	cmp	r3, #16
   2abd0:	d002      	beq.n	2abd8 <update_sec_level+0x20>
			conn->sec_level = BT_SECURITY_L3;
   2abd2:	2303      	movs	r3, #3
   2abd4:	7243      	strb	r3, [r0, #9]
   2abd6:	e004      	b.n	2abe2 <update_sec_level+0x2a>
			conn->sec_level = BT_SECURITY_L4;
   2abd8:	2304      	movs	r3, #4
   2abda:	7243      	strb	r3, [r0, #9]
   2abdc:	e001      	b.n	2abe2 <update_sec_level+0x2a>
		conn->sec_level = BT_SECURITY_L2;
   2abde:	2302      	movs	r3, #2
   2abe0:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2abe2:	7a82      	ldrb	r2, [r0, #10]
   2abe4:	7a40      	ldrb	r0, [r0, #9]
}
   2abe6:	4282      	cmp	r2, r0
   2abe8:	bf8c      	ite	hi
   2abea:	2000      	movhi	r0, #0
   2abec:	2001      	movls	r0, #1
   2abee:	4770      	bx	lr

0002abf0 <hci_disconn_complete_prio>:
{
   2abf0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2abf2:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2abf4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2abf8:	781b      	ldrb	r3, [r3, #0]
   2abfa:	b103      	cbz	r3, 2abfe <hci_disconn_complete_prio+0xe>
}
   2abfc:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   2abfe:	4620      	mov	r0, r4
   2ac00:	f7ec fd5e 	bl	176c0 <bt_conn_lookup_handle>
	if (!conn) {
   2ac04:	4605      	mov	r5, r0
   2ac06:	b130      	cbz	r0, 2ac16 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2ac08:	2101      	movs	r1, #1
   2ac0a:	f7ec fd63 	bl	176d4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2ac0e:	4628      	mov	r0, r5
   2ac10:	f7ec fd24 	bl	1765c <bt_conn_unref>
   2ac14:	e7f2      	b.n	2abfc <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   2ac16:	4620      	mov	r0, r4
   2ac18:	f7e9 fdcc 	bl	147b4 <conn_handle_disconnected>
		return;
   2ac1c:	e7ee      	b.n	2abfc <hci_disconn_complete_prio+0xc>

0002ac1e <bt_hci_disconnect>:
{
   2ac1e:	b570      	push	{r4, r5, r6, lr}
   2ac20:	4605      	mov	r5, r0
   2ac22:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2ac24:	2103      	movs	r1, #3
   2ac26:	f240 4006 	movw	r0, #1030	; 0x406
   2ac2a:	f7ea f9f7 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2ac2e:	b168      	cbz	r0, 2ac4c <bt_hci_disconnect+0x2e>
   2ac30:	4606      	mov	r6, r0
   2ac32:	2103      	movs	r1, #3
   2ac34:	3008      	adds	r0, #8
   2ac36:	f7f2 fb67 	bl	1d308 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2ac3a:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   2ac3c:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2ac3e:	2200      	movs	r2, #0
   2ac40:	4631      	mov	r1, r6
   2ac42:	f240 4006 	movw	r0, #1030	; 0x406
   2ac46:	f7ea fa35 	bl	150b4 <bt_hci_cmd_send_sync>
}
   2ac4a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2ac4c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ac50:	e7fb      	b.n	2ac4a <bt_hci_disconnect+0x2c>

0002ac52 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2ac52:	8802      	ldrh	r2, [r0, #0]
   2ac54:	8843      	ldrh	r3, [r0, #2]
   2ac56:	429a      	cmp	r2, r3
   2ac58:	d819      	bhi.n	2ac8e <bt_le_conn_params_valid+0x3c>
   2ac5a:	2a05      	cmp	r2, #5
   2ac5c:	d919      	bls.n	2ac92 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2ac5e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2ac62:	d818      	bhi.n	2ac96 <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   2ac64:	8881      	ldrh	r1, [r0, #4]
   2ac66:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2ac6a:	d216      	bcs.n	2ac9a <bt_le_conn_params_valid+0x48>
{
   2ac6c:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   2ac6e:	88c0      	ldrh	r0, [r0, #6]
   2ac70:	f1a0 020a 	sub.w	r2, r0, #10
   2ac74:	b292      	uxth	r2, r2
   2ac76:	f640 4476 	movw	r4, #3190	; 0xc76
   2ac7a:	42a2      	cmp	r2, r4
   2ac7c:	d80f      	bhi.n	2ac9e <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   2ac7e:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2ac82:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2ac86:	d20c      	bcs.n	2aca2 <bt_le_conn_params_valid+0x50>
	return true;
   2ac88:	2001      	movs	r0, #1
}
   2ac8a:	bc10      	pop	{r4}
   2ac8c:	4770      	bx	lr
		return false;
   2ac8e:	2000      	movs	r0, #0
   2ac90:	4770      	bx	lr
   2ac92:	2000      	movs	r0, #0
   2ac94:	4770      	bx	lr
   2ac96:	2000      	movs	r0, #0
   2ac98:	4770      	bx	lr
		return false;
   2ac9a:	2000      	movs	r0, #0
}
   2ac9c:	4770      	bx	lr
		return false;
   2ac9e:	2000      	movs	r0, #0
   2aca0:	e7f3      	b.n	2ac8a <bt_le_conn_params_valid+0x38>
   2aca2:	2000      	movs	r0, #0
   2aca4:	e7f1      	b.n	2ac8a <bt_le_conn_params_valid+0x38>

0002aca6 <bt_security_err_get>:
	switch (hci_err) {
   2aca6:	2829      	cmp	r0, #41	; 0x29
   2aca8:	d81e      	bhi.n	2ace8 <bt_security_err_get+0x42>
   2acaa:	e8df f000 	tbb	[pc, r0]
   2acae:	1d20      	.short	0x1d20
   2acb0:	1f1d1d1d 	.word	0x1f1d1d1d
   2acb4:	1d1d1d15 	.word	0x1d1d1d15
   2acb8:	1d1d1d1d 	.word	0x1d1d1d1d
   2acbc:	1d1d1d1d 	.word	0x1d1d1d1d
   2acc0:	1d1d1d1b 	.word	0x1d1d1d1b
   2acc4:	1d191d1d 	.word	0x1d191d1d
   2acc8:	1d1d1d1d 	.word	0x1d1d1d1d
   2accc:	1d1d1d1d 	.word	0x1d1d1d1d
   2acd0:	1d1d1d1d 	.word	0x1d1d1d1d
   2acd4:	171d1d1d 	.word	0x171d1d1d
		return BT_SECURITY_ERR_PIN_OR_KEY_MISSING;
   2acd8:	2002      	movs	r0, #2
   2acda:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   2acdc:	2005      	movs	r0, #5
   2acde:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   2ace0:	2006      	movs	r0, #6
   2ace2:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   2ace4:	2007      	movs	r0, #7
   2ace6:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   2ace8:	2009      	movs	r0, #9
   2acea:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_FAIL;
   2acec:	2001      	movs	r0, #1
}
   2acee:	4770      	bx	lr

0002acf0 <bt_send>:
{
   2acf0:	b508      	push	{r3, lr}
		return bt_hci_ecc_send(buf);
   2acf2:	f7e9 fb3b 	bl	1436c <bt_hci_ecc_send>
}
   2acf6:	bd08      	pop	{r3, pc}

0002acf8 <bt_le_set_data_len>:
{
   2acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2acfa:	4606      	mov	r6, r0
   2acfc:	460f      	mov	r7, r1
   2acfe:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2ad00:	2106      	movs	r1, #6
   2ad02:	f242 0022 	movw	r0, #8226	; 0x2022
   2ad06:	f7ea f989 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2ad0a:	b170      	cbz	r0, 2ad2a <bt_le_set_data_len+0x32>
   2ad0c:	4605      	mov	r5, r0
   2ad0e:	2106      	movs	r1, #6
   2ad10:	3008      	adds	r0, #8
   2ad12:	f7f2 faf9 	bl	1d308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2ad16:	8833      	ldrh	r3, [r6, #0]
   2ad18:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2ad1a:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2ad1c:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2ad1e:	4629      	mov	r1, r5
   2ad20:	f242 0022 	movw	r0, #8226	; 0x2022
   2ad24:	f7ea fcf6 	bl	15714 <bt_hci_cmd_send>
}
   2ad28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2ad2a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ad2e:	e7fb      	b.n	2ad28 <bt_le_set_data_len+0x30>

0002ad30 <bt_le_set_phy>:
{
   2ad30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad34:	4607      	mov	r7, r0
   2ad36:	460e      	mov	r6, r1
   2ad38:	4615      	mov	r5, r2
   2ad3a:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2ad3c:	2107      	movs	r1, #7
   2ad3e:	f242 0032 	movw	r0, #8242	; 0x2032
   2ad42:	f7ea f96b 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2ad46:	b1a0      	cbz	r0, 2ad72 <bt_le_set_phy+0x42>
   2ad48:	4680      	mov	r8, r0
   2ad4a:	2107      	movs	r1, #7
   2ad4c:	3008      	adds	r0, #8
   2ad4e:	f7f2 fadb 	bl	1d308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2ad52:	883b      	ldrh	r3, [r7, #0]
   2ad54:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2ad56:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2ad58:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2ad5a:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   2ad5c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2ad60:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2ad64:	4641      	mov	r1, r8
   2ad66:	f242 0032 	movw	r0, #8242	; 0x2032
   2ad6a:	f7ea fcd3 	bl	15714 <bt_hci_cmd_send>
}
   2ad6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2ad72:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ad76:	e7fa      	b.n	2ad6e <bt_le_set_phy+0x3e>

0002ad78 <hci_le_read_remote_features>:
{
   2ad78:	b538      	push	{r3, r4, r5, lr}
   2ad7a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2ad7c:	2102      	movs	r1, #2
   2ad7e:	f242 0016 	movw	r0, #8214	; 0x2016
   2ad82:	f7ea f94b 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2ad86:	b168      	cbz	r0, 2ada4 <hci_le_read_remote_features+0x2c>
   2ad88:	4605      	mov	r5, r0
   2ad8a:	2102      	movs	r1, #2
   2ad8c:	3008      	adds	r0, #8
   2ad8e:	f7f2 fabb 	bl	1d308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2ad92:	8823      	ldrh	r3, [r4, #0]
   2ad94:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2ad96:	4629      	mov	r1, r5
   2ad98:	f242 0016 	movw	r0, #8214	; 0x2016
   2ad9c:	f7ea fcba 	bl	15714 <bt_hci_cmd_send>
	return 0;
   2ada0:	2000      	movs	r0, #0
}
   2ada2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2ada4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ada8:	e7fb      	b.n	2ada2 <hci_le_read_remote_features+0x2a>

0002adaa <enh_conn_complete>:
{
   2adaa:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   2adac:	f7ea fd4c 	bl	15848 <bt_hci_le_enh_conn_complete>
}
   2adb0:	bd08      	pop	{r3, pc}

0002adb2 <le_enh_conn_complete>:
{
   2adb2:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   2adb4:	6880      	ldr	r0, [r0, #8]
   2adb6:	f7ff fff8 	bl	2adaa <enh_conn_complete>
}
   2adba:	bd08      	pop	{r3, pc}

0002adbc <le_legacy_conn_complete>:
{
   2adbc:	b510      	push	{r4, lr}
   2adbe:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2adc0:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   2adc2:	780b      	ldrb	r3, [r1, #0]
   2adc4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   2adc8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2adcc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   2add0:	78cb      	ldrb	r3, [r1, #3]
   2add2:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   2add6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2adda:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   2adde:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2ade2:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   2ade6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2adea:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   2adee:	7c4b      	ldrb	r3, [r1, #17]
   2adf0:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   2adf4:	2207      	movs	r2, #7
   2adf6:	3104      	adds	r1, #4
   2adf8:	a801      	add	r0, sp, #4
   2adfa:	f7ff fd50 	bl	2a89e <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2adfe:	2400      	movs	r4, #0
   2ae00:	940a      	str	r4, [sp, #40]	; 0x28
   2ae02:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   2ae06:	2206      	movs	r2, #6
   2ae08:	a90a      	add	r1, sp, #40	; 0x28
   2ae0a:	f10d 000b 	add.w	r0, sp, #11
   2ae0e:	f7ff fd46 	bl	2a89e <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2ae12:	9408      	str	r4, [sp, #32]
   2ae14:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   2ae18:	2206      	movs	r2, #6
   2ae1a:	a908      	add	r1, sp, #32
   2ae1c:	f10d 0011 	add.w	r0, sp, #17
   2ae20:	f7ff fd3d 	bl	2a89e <memcpy>
	enh_conn_complete(&enh);
   2ae24:	4668      	mov	r0, sp
   2ae26:	f7ff ffc0 	bl	2adaa <enh_conn_complete>
}
   2ae2a:	b00c      	add	sp, #48	; 0x30
   2ae2c:	bd10      	pop	{r4, pc}

0002ae2e <le_conn_param_req_reply>:
{
   2ae2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ae30:	4606      	mov	r6, r0
   2ae32:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2ae34:	210e      	movs	r1, #14
   2ae36:	f242 0020 	movw	r0, #8224	; 0x2020
   2ae3a:	f7ea f8ef 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2ae3e:	b1c0      	cbz	r0, 2ae72 <le_conn_param_req_reply+0x44>
   2ae40:	4607      	mov	r7, r0
   2ae42:	210e      	movs	r1, #14
   2ae44:	3008      	adds	r0, #8
   2ae46:	f7f2 fa5f 	bl	1d308 <net_buf_simple_add>
   2ae4a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   2ae4c:	220e      	movs	r2, #14
   2ae4e:	2100      	movs	r1, #0
   2ae50:	f7ff fd49 	bl	2a8e6 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   2ae54:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2ae56:	882b      	ldrh	r3, [r5, #0]
   2ae58:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2ae5a:	886b      	ldrh	r3, [r5, #2]
   2ae5c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2ae5e:	88ab      	ldrh	r3, [r5, #4]
   2ae60:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2ae62:	88eb      	ldrh	r3, [r5, #6]
   2ae64:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2ae66:	4639      	mov	r1, r7
   2ae68:	f242 0020 	movw	r0, #8224	; 0x2020
   2ae6c:	f7ea fc52 	bl	15714 <bt_hci_cmd_send>
}
   2ae70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2ae72:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ae76:	e7fb      	b.n	2ae70 <le_conn_param_req_reply+0x42>

0002ae78 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2ae78:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2ae7a:	f7f1 fead 	bl	1cbd8 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2ae7e:	b118      	cbz	r0, 2ae88 <bt_addr_le_is_bonded+0x10>
   2ae80:	89c3      	ldrh	r3, [r0, #14]
   2ae82:	b91b      	cbnz	r3, 2ae8c <bt_addr_le_is_bonded+0x14>
   2ae84:	2000      	movs	r0, #0
	} else {
		return false;
	}
}
   2ae86:	bd08      	pop	{r3, pc}
		return keys && keys->keys;
   2ae88:	2000      	movs	r0, #0
   2ae8a:	e7fc      	b.n	2ae86 <bt_addr_le_is_bonded+0xe>
   2ae8c:	2001      	movs	r0, #1
   2ae8e:	e7fa      	b.n	2ae86 <bt_addr_le_is_bonded+0xe>

0002ae90 <adv_unpause_enabled>:
{
   2ae90:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2ae92:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ae96:	f3bf 8f5b 	dmb	ish
   2ae9a:	e853 2f00 	ldrex	r2, [r3]
   2ae9e:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   2aea2:	e843 1c00 	strex	ip, r1, [r3]
   2aea6:	f1bc 0f00 	cmp.w	ip, #0
   2aeaa:	d1f6      	bne.n	2ae9a <adv_unpause_enabled+0xa>
   2aeac:	f3bf 8f5b 	dmb	ish
   2aeb0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   2aeb4:	d100      	bne.n	2aeb8 <adv_unpause_enabled+0x28>
}
   2aeb6:	bd08      	pop	{r3, pc}
		bt_le_adv_set_enable(adv, true);
   2aeb8:	2101      	movs	r1, #1
   2aeba:	f000 fa04 	bl	2b2c6 <bt_le_adv_set_enable>
}
   2aebe:	e7fa      	b.n	2aeb6 <adv_unpause_enabled+0x26>

0002aec0 <adv_pause_enabled>:
{
   2aec0:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aec2:	f3bf 8f5b 	dmb	ish
   2aec6:	6903      	ldr	r3, [r0, #16]
   2aec8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2aecc:	f013 0f40 	tst.w	r3, #64	; 0x40
   2aed0:	d010      	beq.n	2aef4 <adv_pause_enabled+0x34>
   2aed2:	f100 0210 	add.w	r2, r0, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2aed6:	f3bf 8f5b 	dmb	ish
   2aeda:	e852 3f00 	ldrex	r3, [r2]
   2aede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2aee2:	e842 3100 	strex	r1, r3, [r2]
   2aee6:	2900      	cmp	r1, #0
   2aee8:	d1f7      	bne.n	2aeda <adv_pause_enabled+0x1a>
   2aeea:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   2aeee:	2100      	movs	r1, #0
   2aef0:	f000 f9e9 	bl	2b2c6 <bt_le_adv_set_enable>
}
   2aef4:	bd08      	pop	{r3, pc}

0002aef6 <hci_id_add>:
{
   2aef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aef8:	460e      	mov	r6, r1
   2aefa:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2aefc:	2127      	movs	r1, #39	; 0x27
   2aefe:	f242 0027 	movw	r0, #8231	; 0x2027
   2af02:	f7ea f88b 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2af06:	b1d8      	cbz	r0, 2af40 <hci_id_add+0x4a>
   2af08:	4607      	mov	r7, r0
   2af0a:	2127      	movs	r1, #39	; 0x27
   2af0c:	3008      	adds	r0, #8
   2af0e:	f7f2 f9fb 	bl	1d308 <net_buf_simple_add>
   2af12:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   2af14:	2207      	movs	r2, #7
   2af16:	4631      	mov	r1, r6
   2af18:	f7ff fcc1 	bl	2a89e <memcpy>
	memcpy(cp->peer_irk, peer_irk, 16);
   2af1c:	2210      	movs	r2, #16
   2af1e:	4629      	mov	r1, r5
   2af20:	1de0      	adds	r0, r4, #7
   2af22:	f7ff fcbc 	bl	2a89e <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   2af26:	2210      	movs	r2, #16
   2af28:	2100      	movs	r1, #0
   2af2a:	f104 0017 	add.w	r0, r4, #23
   2af2e:	f7ff fcda 	bl	2a8e6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2af32:	2200      	movs	r2, #0
   2af34:	4639      	mov	r1, r7
   2af36:	f242 0027 	movw	r0, #8231	; 0x2027
   2af3a:	f7ea f8bb 	bl	150b4 <bt_hci_cmd_send_sync>
}
   2af3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2af40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2af44:	e7fb      	b.n	2af3e <hci_id_add+0x48>

0002af46 <keys_add_id>:
{
   2af46:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   2af48:	7a03      	ldrb	r3, [r0, #8]
   2af4a:	f013 0f04 	tst.w	r3, #4
   2af4e:	d100      	bne.n	2af52 <keys_add_id+0xc>
}
   2af50:	bd08      	pop	{r3, pc}
   2af52:	4601      	mov	r1, r0
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2af54:	4602      	mov	r2, r0
   2af56:	f812 0b2a 	ldrb.w	r0, [r2], #42
   2af5a:	3101      	adds	r1, #1
   2af5c:	f7ff ffcb 	bl	2aef6 <hci_id_add>
}
   2af60:	e7f6      	b.n	2af50 <keys_add_id+0xa>

0002af62 <hci_id_del>:
{
   2af62:	b538      	push	{r3, r4, r5, lr}
   2af64:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2af66:	2107      	movs	r1, #7
   2af68:	f242 0028 	movw	r0, #8232	; 0x2028
   2af6c:	f7ea f856 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2af70:	b178      	cbz	r0, 2af92 <hci_id_del+0x30>
   2af72:	4605      	mov	r5, r0
   2af74:	2107      	movs	r1, #7
   2af76:	3008      	adds	r0, #8
   2af78:	f7f2 f9c6 	bl	1d308 <net_buf_simple_add>
   2af7c:	2207      	movs	r2, #7
   2af7e:	4621      	mov	r1, r4
   2af80:	f7ff fc8d 	bl	2a89e <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2af84:	2200      	movs	r2, #0
   2af86:	4629      	mov	r1, r5
   2af88:	f242 0028 	movw	r0, #8232	; 0x2028
   2af8c:	f7ea f892 	bl	150b4 <bt_hci_cmd_send_sync>
}
   2af90:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2af92:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2af96:	e7fb      	b.n	2af90 <hci_id_del+0x2e>

0002af98 <addr_res_enable>:
{
   2af98:	b538      	push	{r3, r4, r5, lr}
   2af9a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2af9c:	2101      	movs	r1, #1
   2af9e:	f242 002d 	movw	r0, #8237	; 0x202d
   2afa2:	f7ea f83b 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2afa6:	b158      	cbz	r0, 2afc0 <addr_res_enable+0x28>
   2afa8:	4605      	mov	r5, r0
	return net_buf_simple_add_u8(&buf->b, val);
   2afaa:	4621      	mov	r1, r4
   2afac:	3008      	adds	r0, #8
   2afae:	f002 fd99 	bl	2dae4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2afb2:	2200      	movs	r2, #0
   2afb4:	4629      	mov	r1, r5
   2afb6:	f242 002d 	movw	r0, #8237	; 0x202d
   2afba:	f7ea f87b 	bl	150b4 <bt_hci_cmd_send_sync>
}
   2afbe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2afc0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2afc4:	e7fb      	b.n	2afbe <addr_res_enable+0x26>

0002afc6 <bt_lookup_id_addr>:
{
   2afc6:	b510      	push	{r4, lr}
   2afc8:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2afca:	f7f1 fd9d 	bl	1cb08 <bt_keys_find_irk>
		if (keys) {
   2afce:	b108      	cbz	r0, 2afd4 <bt_lookup_id_addr+0xe>
			return &keys->addr;
   2afd0:	3001      	adds	r0, #1
}
   2afd2:	bd10      	pop	{r4, pc}
	return addr;
   2afd4:	4620      	mov	r0, r4
   2afd6:	e7fc      	b.n	2afd2 <bt_lookup_id_addr+0xc>

0002afd8 <bt_id_set_adv_random_addr>:
{
   2afd8:	b508      	push	{r3, lr}
		return set_random_address(addr);
   2afda:	4608      	mov	r0, r1
   2afdc:	f7eb f8a8 	bl	16130 <set_random_address>
}
   2afe0:	bd08      	pop	{r3, pc}

0002afe2 <bt_id_set_adv_private_addr>:
{
   2afe2:	b510      	push	{r4, lr}
   2afe4:	b082      	sub	sp, #8
   2afe6:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2afe8:	2106      	movs	r1, #6
   2afea:	4668      	mov	r0, sp
   2afec:	f7f5 fa06 	bl	203fc <bt_rand>
	if (err) {
   2aff0:	b108      	cbz	r0, 2aff6 <bt_id_set_adv_private_addr+0x14>
}
   2aff2:	b002      	add	sp, #8
   2aff4:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   2aff6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2affa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2affe:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2b002:	4669      	mov	r1, sp
   2b004:	4620      	mov	r0, r4
   2b006:	f7ff ffe7 	bl	2afd8 <bt_id_set_adv_random_addr>
	if (err) {
   2b00a:	e7f2      	b.n	2aff2 <bt_id_set_adv_private_addr+0x10>

0002b00c <bt_id_adv_random_addr_check>:
}
   2b00c:	2001      	movs	r0, #1
   2b00e:	4770      	bx	lr

0002b010 <pending_id_update>:
{
   2b010:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2b012:	7a03      	ldrb	r3, [r0, #8]
   2b014:	f013 0f01 	tst.w	r3, #1
   2b018:	d103      	bne.n	2b022 <pending_id_update+0x12>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2b01a:	f013 0f02 	tst.w	r3, #2
   2b01e:	d106      	bne.n	2b02e <pending_id_update+0x1e>
}
   2b020:	bd08      	pop	{r3, pc}
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2b022:	f023 0301 	bic.w	r3, r3, #1
   2b026:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2b028:	f7eb f95a 	bl	162e0 <bt_id_add>
		return;
   2b02c:	e7f8      	b.n	2b020 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2b02e:	f023 0302 	bic.w	r3, r3, #2
   2b032:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2b034:	f7eb f9e8 	bl	16408 <bt_id_del>
		return;
   2b038:	e7f2      	b.n	2b020 <pending_id_update+0x10>

0002b03a <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2b03a:	2000      	movs	r0, #0
   2b03c:	4770      	bx	lr

0002b03e <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   2b03e:	2300      	movs	r3, #0
   2b040:	428b      	cmp	r3, r1
   2b042:	d218      	bcs.n	2b076 <ad_is_limited+0x38>
{
   2b044:	b430      	push	{r4, r5}
   2b046:	e002      	b.n	2b04e <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   2b048:	3301      	adds	r3, #1
   2b04a:	428b      	cmp	r3, r1
   2b04c:	d210      	bcs.n	2b070 <ad_is_limited+0x32>
		if (ad[i].type == BT_DATA_FLAGS &&
   2b04e:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   2b052:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
   2b056:	f240 1201 	movw	r2, #257	; 0x101
   2b05a:	4294      	cmp	r4, r2
   2b05c:	d1f4      	bne.n	2b048 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   2b05e:	686a      	ldr	r2, [r5, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2b060:	2a00      	cmp	r2, #0
   2b062:	d0f1      	beq.n	2b048 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2b064:	7812      	ldrb	r2, [r2, #0]
   2b066:	f012 0f01 	tst.w	r2, #1
   2b06a:	d0ed      	beq.n	2b048 <ad_is_limited+0xa>
				return true;
   2b06c:	2001      	movs	r0, #1
   2b06e:	e000      	b.n	2b072 <ad_is_limited+0x34>
	return false;
   2b070:	2000      	movs	r0, #0
}
   2b072:	bc30      	pop	{r4, r5}
   2b074:	4770      	bx	lr
	return false;
   2b076:	2000      	movs	r0, #0
}
   2b078:	4770      	bx	lr

0002b07a <get_filter_policy>:
}
   2b07a:	2000      	movs	r0, #0
   2b07c:	4770      	bx	lr

0002b07e <get_adv_channel_map>:
{
   2b07e:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   2b080:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2b084:	d10b      	bne.n	2b09e <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   2b086:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2b088:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2b08c:	d001      	beq.n	2b092 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   2b08e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2b092:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2b096:	d001      	beq.n	2b09c <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   2b098:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   2b09c:	4770      	bx	lr
		channel_map &= ~0x01;
   2b09e:	2006      	movs	r0, #6
   2b0a0:	e7f2      	b.n	2b088 <get_adv_channel_map+0xa>

0002b0a2 <hci_set_ad>:
{
   2b0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b0a6:	b082      	sub	sp, #8
   2b0a8:	4607      	mov	r7, r0
   2b0aa:	460d      	mov	r5, r1
   2b0ac:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2b0ae:	2120      	movs	r1, #32
   2b0b0:	f7e9 ffb4 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2b0b4:	b300      	cbz	r0, 2b0f8 <hci_set_ad+0x56>
   2b0b6:	4680      	mov	r8, r0
	return net_buf_simple_add(&buf->b, len);
   2b0b8:	2120      	movs	r1, #32
   2b0ba:	3008      	adds	r0, #8
   2b0bc:	f7f2 f924 	bl	1d308 <net_buf_simple_add>
   2b0c0:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   2b0c2:	2220      	movs	r2, #32
   2b0c4:	2100      	movs	r1, #0
   2b0c6:	f7ff fc0e 	bl	2a8e6 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   2b0ca:	9400      	str	r4, [sp, #0]
   2b0cc:	4633      	mov	r3, r6
   2b0ce:	462a      	mov	r2, r5
   2b0d0:	211f      	movs	r1, #31
   2b0d2:	1c60      	adds	r0, r4, #1
   2b0d4:	f7eb fb8c 	bl	167f0 <set_data_add_complete>
	if (err) {
   2b0d8:	4604      	mov	r4, r0
   2b0da:	b948      	cbnz	r0, 2b0f0 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2b0dc:	2200      	movs	r2, #0
   2b0de:	4641      	mov	r1, r8
   2b0e0:	4638      	mov	r0, r7
   2b0e2:	f7e9 ffe7 	bl	150b4 <bt_hci_cmd_send_sync>
   2b0e6:	4604      	mov	r4, r0
}
   2b0e8:	4620      	mov	r0, r4
   2b0ea:	b002      	add	sp, #8
   2b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2b0f0:	4640      	mov	r0, r8
   2b0f2:	f7f1 fff1 	bl	1d0d8 <net_buf_unref>
		return err;
   2b0f6:	e7f7      	b.n	2b0e8 <hci_set_ad+0x46>
		return -ENOBUFS;
   2b0f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2b0fc:	e7f4      	b.n	2b0e8 <hci_set_ad+0x46>

0002b0fe <set_ad>:
{
   2b0fe:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2b100:	f242 0008 	movw	r0, #8200	; 0x2008
   2b104:	f7ff ffcd 	bl	2b0a2 <hci_set_ad>
}
   2b108:	bd08      	pop	{r3, pc}

0002b10a <set_sd>:
{
   2b10a:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2b10c:	f242 0009 	movw	r0, #8201	; 0x2009
   2b110:	f7ff ffc7 	bl	2b0a2 <hci_set_ad>
}
   2b114:	bd08      	pop	{r3, pc}

0002b116 <le_adv_update>:
{
   2b116:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b11a:	b089      	sub	sp, #36	; 0x24
   2b11c:	4604      	mov	r4, r0
   2b11e:	460e      	mov	r6, r1
   2b120:	4617      	mov	r7, r2
   2b122:	461d      	mov	r5, r3
   2b124:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   2b128:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   2b12c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   2b130:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   2b134:	2300      	movs	r3, #0
   2b136:	9304      	str	r3, [sp, #16]
   2b138:	9305      	str	r3, [sp, #20]
   2b13a:	9306      	str	r3, [sp, #24]
   2b13c:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   2b13e:	f1b9 0f00 	cmp.w	r9, #0
   2b142:	d133      	bne.n	2b1ac <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   2b144:	f1bb 0f00 	cmp.w	fp, #0
   2b148:	d002      	beq.n	2b150 <le_adv_update+0x3a>
   2b14a:	f1ba 0f00 	cmp.w	sl, #0
   2b14e:	d10b      	bne.n	2b168 <le_adv_update+0x52>
		d[0].data = ad;
   2b150:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   2b152:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   2b154:	f1b9 0f01 	cmp.w	r9, #1
   2b158:	d056      	beq.n	2b208 <le_adv_update+0xf2>
		d_len = 1;
   2b15a:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   2b15c:	a904      	add	r1, sp, #16
   2b15e:	4620      	mov	r0, r4
   2b160:	f7ff ffcd 	bl	2b0fe <set_ad>
		if (err) {
   2b164:	4603      	mov	r3, r0
   2b166:	b9e8      	cbnz	r0, 2b1a4 <le_adv_update+0x8e>
	if (scannable) {
   2b168:	f1ba 0f00 	cmp.w	sl, #0
   2b16c:	d00c      	beq.n	2b188 <le_adv_update+0x72>
		d[0].data = sd;
   2b16e:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   2b170:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   2b174:	f1b9 0f02 	cmp.w	r9, #2
   2b178:	d04c      	beq.n	2b214 <le_adv_update+0xfe>
		d_len = 1;
   2b17a:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   2b17c:	a904      	add	r1, sp, #16
   2b17e:	4620      	mov	r0, r4
   2b180:	f7ff ffc3 	bl	2b10a <set_sd>
		if (err) {
   2b184:	4603      	mov	r3, r0
   2b186:	b968      	cbnz	r0, 2b1a4 <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   2b188:	3410      	adds	r4, #16
   2b18a:	f3bf 8f5b 	dmb	ish
   2b18e:	e854 3f00 	ldrex	r3, [r4]
   2b192:	f043 0304 	orr.w	r3, r3, #4
   2b196:	e844 3200 	strex	r2, r3, [r4]
   2b19a:	2a00      	cmp	r2, #0
   2b19c:	d1f7      	bne.n	2b18e <le_adv_update+0x78>
   2b19e:	f3bf 8f5b 	dmb	ish
	return 0;
   2b1a2:	2300      	movs	r3, #0
}
   2b1a4:	4618      	mov	r0, r3
   2b1a6:	b009      	add	sp, #36	; 0x24
   2b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2b1ac:	f7ea ffa2 	bl	160f4 <bt_get_name>
   2b1b0:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   2b1b2:	b166      	cbz	r6, 2b1ce <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   2b1b4:	2200      	movs	r2, #0
   2b1b6:	4297      	cmp	r7, r2
   2b1b8:	d907      	bls.n	2b1ca <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2b1ba:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   2b1be:	3b08      	subs	r3, #8
   2b1c0:	b2db      	uxtb	r3, r3
   2b1c2:	2b01      	cmp	r3, #1
   2b1c4:	d90f      	bls.n	2b1e6 <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   2b1c6:	3201      	adds	r2, #1
   2b1c8:	e7f5      	b.n	2b1b6 <le_adv_update+0xa0>
	return false;
   2b1ca:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2b1cc:	bb43      	cbnz	r3, 2b220 <le_adv_update+0x10a>
   2b1ce:	b175      	cbz	r5, 2b1ee <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   2b1d0:	2200      	movs	r2, #0
   2b1d2:	4590      	cmp	r8, r2
   2b1d4:	d909      	bls.n	2b1ea <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2b1d6:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   2b1da:	3b08      	subs	r3, #8
   2b1dc:	b2db      	uxtb	r3, r3
   2b1de:	2b01      	cmp	r3, #1
   2b1e0:	d910      	bls.n	2b204 <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   2b1e2:	3201      	adds	r2, #1
   2b1e4:	e7f5      	b.n	2b1d2 <le_adv_update+0xbc>
			return true;
   2b1e6:	2301      	movs	r3, #1
   2b1e8:	e7f0      	b.n	2b1cc <le_adv_update+0xb6>
	return false;
   2b1ea:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   2b1ec:	b9db      	cbnz	r3, 2b226 <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   2b1ee:	9801      	ldr	r0, [sp, #4]
   2b1f0:	f7ff faf1 	bl	2a7d6 <strlen>
   2b1f4:	2309      	movs	r3, #9
   2b1f6:	f88d 3008 	strb.w	r3, [sp, #8]
   2b1fa:	f88d 0009 	strb.w	r0, [sp, #9]
   2b1fe:	9b01      	ldr	r3, [sp, #4]
   2b200:	9303      	str	r3, [sp, #12]
   2b202:	e79f      	b.n	2b144 <le_adv_update+0x2e>
			return true;
   2b204:	2301      	movs	r3, #1
   2b206:	e7f1      	b.n	2b1ec <le_adv_update+0xd6>
			d[1].data = &data;
   2b208:	ab02      	add	r3, sp, #8
   2b20a:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2b20c:	2301      	movs	r3, #1
   2b20e:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2b210:	2202      	movs	r2, #2
   2b212:	e7a3      	b.n	2b15c <le_adv_update+0x46>
			d[1].data = &data;
   2b214:	ab02      	add	r3, sp, #8
   2b216:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2b218:	2301      	movs	r3, #1
   2b21a:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2b21c:	2202      	movs	r2, #2
   2b21e:	e7ad      	b.n	2b17c <le_adv_update+0x66>
			return -EINVAL;
   2b220:	f06f 0315 	mvn.w	r3, #21
   2b224:	e7be      	b.n	2b1a4 <le_adv_update+0x8e>
   2b226:	f06f 0315 	mvn.w	r3, #21
   2b22a:	e7bb      	b.n	2b1a4 <le_adv_update+0x8e>

0002b22c <valid_adv_param>:
{
   2b22c:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2b22e:	6843      	ldr	r3, [r0, #4]
   2b230:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2b234:	d107      	bne.n	2b246 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2b236:	6902      	ldr	r2, [r0, #16]
   2b238:	b112      	cbz	r2, 2b240 <valid_adv_param+0x14>
   2b23a:	f013 0f01 	tst.w	r3, #1
   2b23e:	d004      	beq.n	2b24a <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   2b240:	f7eb fb2a 	bl	16898 <valid_adv_ext_param>
}
   2b244:	bd08      	pop	{r3, pc}
		return false;
   2b246:	2000      	movs	r0, #0
   2b248:	e7fc      	b.n	2b244 <valid_adv_param+0x18>
		return false;
   2b24a:	2000      	movs	r0, #0
   2b24c:	e7fa      	b.n	2b244 <valid_adv_param+0x18>

0002b24e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2b24e:	6843      	ldr	r3, [r0, #4]
   2b250:	f013 0f08 	tst.w	r3, #8
   2b254:	d00b      	beq.n	2b26e <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2b256:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2b25a:	d10a      	bne.n	2b272 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2b25c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2b260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2b264:	d001      	beq.n	2b26a <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   2b266:	2002      	movs	r0, #2
}
   2b268:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2b26a:	2001      	movs	r0, #1
   2b26c:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   2b26e:	2000      	movs	r0, #0
   2b270:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2b272:	2001      	movs	r0, #1
   2b274:	4770      	bx	lr

0002b276 <bt_le_adv_set_enable_legacy>:
{
   2b276:	b570      	push	{r4, r5, r6, lr}
   2b278:	b086      	sub	sp, #24
   2b27a:	4605      	mov	r5, r0
   2b27c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2b27e:	2101      	movs	r1, #1
   2b280:	f242 000a 	movw	r0, #8202	; 0x200a
   2b284:	f7e9 feca 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2b288:	b1d0      	cbz	r0, 2b2c0 <bt_le_adv_set_enable_legacy+0x4a>
   2b28a:	4606      	mov	r6, r0
	if (enable) {
   2b28c:	b19c      	cbz	r4, 2b2b6 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2b28e:	2101      	movs	r1, #1
   2b290:	3008      	adds	r0, #8
   2b292:	f002 fc27 	bl	2dae4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2b296:	9400      	str	r4, [sp, #0]
   2b298:	2306      	movs	r3, #6
   2b29a:	f105 0210 	add.w	r2, r5, #16
   2b29e:	a903      	add	r1, sp, #12
   2b2a0:	4630      	mov	r0, r6
   2b2a2:	f7e9 fea9 	bl	14ff8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2b2a6:	2200      	movs	r2, #0
   2b2a8:	4631      	mov	r1, r6
   2b2aa:	f242 000a 	movw	r0, #8202	; 0x200a
   2b2ae:	f7e9 ff01 	bl	150b4 <bt_hci_cmd_send_sync>
}
   2b2b2:	b006      	add	sp, #24
   2b2b4:	bd70      	pop	{r4, r5, r6, pc}
   2b2b6:	2100      	movs	r1, #0
   2b2b8:	3008      	adds	r0, #8
   2b2ba:	f002 fc13 	bl	2dae4 <net_buf_simple_add_u8>
   2b2be:	e7ea      	b.n	2b296 <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   2b2c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b2c4:	e7f5      	b.n	2b2b2 <bt_le_adv_set_enable_legacy+0x3c>

0002b2c6 <bt_le_adv_set_enable>:
{
   2b2c6:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   2b2c8:	f7ff ffd5 	bl	2b276 <bt_le_adv_set_enable_legacy>
}
   2b2cc:	bd08      	pop	{r3, pc}

0002b2ce <bt_le_lim_adv_cancel_timeout>:
{
   2b2ce:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2b2d0:	3018      	adds	r0, #24
   2b2d2:	f7f8 f809 	bl	232e8 <k_work_cancel_delayable>
}
   2b2d6:	bd08      	pop	{r3, pc}

0002b2d8 <bt_le_adv_resume>:
{
   2b2d8:	b530      	push	{r4, r5, lr}
   2b2da:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b2dc:	f7eb fbb0 	bl	16a40 <bt_le_adv_lookup_legacy>
	if (!adv) {
   2b2e0:	b150      	cbz	r0, 2b2f8 <bt_le_adv_resume+0x20>
   2b2e2:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2b2e4:	f100 0510 	add.w	r5, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b2e8:	f3bf 8f5b 	dmb	ish
   2b2ec:	6903      	ldr	r3, [r0, #16]
   2b2ee:	f3bf 8f5b 	dmb	ish
   2b2f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2b2f6:	d101      	bne.n	2b2fc <bt_le_adv_resume+0x24>
}
   2b2f8:	b003      	add	sp, #12
   2b2fa:	bd30      	pop	{r4, r5, pc}
   2b2fc:	f3bf 8f5b 	dmb	ish
   2b300:	6903      	ldr	r3, [r0, #16]
   2b302:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2b306:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b30a:	d1f5      	bne.n	2b2f8 <bt_le_adv_resume+0x20>
   2b30c:	f3bf 8f5b 	dmb	ish
   2b310:	6903      	ldr	r3, [r0, #16]
   2b312:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2b316:	f413 7f00 	tst.w	r3, #512	; 0x200
   2b31a:	d0ed      	beq.n	2b2f8 <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   2b31c:	a901      	add	r1, sp, #4
   2b31e:	f7eb fb09 	bl	16934 <le_adv_start_add_conn>
	if (err) {
   2b322:	2800      	cmp	r0, #0
   2b324:	d1e8      	bne.n	2b2f8 <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   2b326:	2101      	movs	r1, #1
   2b328:	4620      	mov	r0, r4
   2b32a:	f7ff ffcc 	bl	2b2c6 <bt_le_adv_set_enable>
	if (err) {
   2b32e:	b908      	cbnz	r0, 2b334 <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
   2b330:	2400      	movs	r4, #0
   2b332:	e011      	b.n	2b358 <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b334:	2100      	movs	r1, #0
   2b336:	9801      	ldr	r0, [sp, #4]
   2b338:	f7ec f9cc 	bl	176d4 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b33c:	f3bf 8f5b 	dmb	ish
   2b340:	e855 4f00 	ldrex	r4, [r5]
   2b344:	f424 5300 	bic.w	r3, r4, #8192	; 0x2000
   2b348:	e845 3200 	strex	r2, r3, [r5]
   2b34c:	2a00      	cmp	r2, #0
   2b34e:	d1f7      	bne.n	2b340 <bt_le_adv_resume+0x68>
   2b350:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2b354:	f3c4 3440 	ubfx	r4, r4, #13, #1
	bt_conn_unref(conn);
   2b358:	9801      	ldr	r0, [sp, #4]
   2b35a:	f7ec f97f 	bl	1765c <bt_conn_unref>
	if (persist_paused) {
   2b35e:	2c00      	cmp	r4, #0
   2b360:	d0ca      	beq.n	2b2f8 <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b362:	f3bf 8f5b 	dmb	ish
   2b366:	e855 3f00 	ldrex	r3, [r5]
   2b36a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2b36e:	e845 3200 	strex	r2, r3, [r5]
   2b372:	2a00      	cmp	r2, #0
   2b374:	d1f7      	bne.n	2b366 <bt_le_adv_resume+0x8e>
   2b376:	f3bf 8f5b 	dmb	ish
}
   2b37a:	e7bd      	b.n	2b2f8 <bt_le_adv_resume+0x20>

0002b37c <hci_generate_dhkey_v1>:
{
   2b37c:	b538      	push	{r3, r4, r5, lr}
   2b37e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2b380:	2140      	movs	r1, #64	; 0x40
   2b382:	f242 0026 	movw	r0, #8230	; 0x2026
   2b386:	f7e9 fe49 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2b38a:	b178      	cbz	r0, 2b3ac <hci_generate_dhkey_v1+0x30>
   2b38c:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2b38e:	2140      	movs	r1, #64	; 0x40
   2b390:	3008      	adds	r0, #8
   2b392:	f7f1 ffb9 	bl	1d308 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2b396:	2240      	movs	r2, #64	; 0x40
   2b398:	4621      	mov	r1, r4
   2b39a:	f7ff fa80 	bl	2a89e <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2b39e:	2200      	movs	r2, #0
   2b3a0:	4629      	mov	r1, r5
   2b3a2:	f242 0026 	movw	r0, #8230	; 0x2026
   2b3a6:	f7e9 fe85 	bl	150b4 <bt_hci_cmd_send_sync>
}
   2b3aa:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2b3ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b3b0:	e7fb      	b.n	2b3aa <hci_generate_dhkey_v1+0x2e>

0002b3b2 <reset_pairing>:
	conn->required_sec_level = conn->sec_level;
   2b3b2:	7a43      	ldrb	r3, [r0, #9]
   2b3b4:	7283      	strb	r3, [r0, #10]
}
   2b3b6:	4770      	bx	lr

0002b3b8 <tx_notify>:
{
   2b3b8:	b570      	push	{r4, r5, r6, lr}
   2b3ba:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   2b3bc:	e010      	b.n	2b3e0 <tx_notify+0x28>
   2b3be:	f383 8811 	msr	BASEPRI, r3
   2b3c2:	f3bf 8f6f 	isb	sy
}
   2b3c6:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   2b3c8:	6262      	str	r2, [r4, #36]	; 0x24
   2b3ca:	f383 8811 	msr	BASEPRI, r3
   2b3ce:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   2b3d2:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   2b3d4:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2b3d6:	f7eb fec3 	bl	17160 <tx_free>
		cb(conn, user_data);
   2b3da:	4631      	mov	r1, r6
   2b3dc:	4620      	mov	r0, r4
   2b3de:	47a8      	blx	r5
	__asm__ volatile(
   2b3e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   2b3e4:	f3ef 8311 	mrs	r3, BASEPRI
   2b3e8:	f382 8812 	msr	BASEPRI_MAX, r2
   2b3ec:	f3bf 8f6f 	isb	sy
	return list->head;
   2b3f0:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2b3f2:	2800      	cmp	r0, #0
   2b3f4:	d0e3      	beq.n	2b3be <tx_notify+0x6>
	return node->next;
   2b3f6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2b3f8:	6222      	str	r2, [r4, #32]
	return list->tail;
   2b3fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b3fc:	4281      	cmp	r1, r0
   2b3fe:	d1e4      	bne.n	2b3ca <tx_notify+0x12>
   2b400:	e7e2      	b.n	2b3c8 <tx_notify+0x10>

0002b402 <tx_complete_work>:
{
   2b402:	b508      	push	{r3, lr}
	tx_notify(conn);
   2b404:	3828      	subs	r0, #40	; 0x28
   2b406:	f7ff ffd7 	bl	2b3b8 <tx_notify>
}
   2b40a:	bd08      	pop	{r3, pc}

0002b40c <send_acl>:
{
   2b40c:	b570      	push	{r4, r5, r6, lr}
   2b40e:	4605      	mov	r5, r0
   2b410:	460c      	mov	r4, r1
	switch (flags) {
   2b412:	2a03      	cmp	r2, #3
   2b414:	d819      	bhi.n	2b44a <send_acl+0x3e>
   2b416:	e8df f002 	tbb	[pc, r2]
   2b41a:	1602      	.short	0x1602
   2b41c:	1602      	.short	0x1602
		flags = BT_ACL_CONT;
   2b41e:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   2b420:	2104      	movs	r1, #4
   2b422:	f104 0008 	add.w	r0, r4, #8
   2b426:	f7f1 ff4f 	bl	1d2c8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2b42a:	f9b5 3000 	ldrsh.w	r3, [r5]
   2b42e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2b432:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2b434:	89a3      	ldrh	r3, [r4, #12]
   2b436:	3b04      	subs	r3, #4
   2b438:	8043      	strh	r3, [r0, #2]
   2b43a:	2302      	movs	r3, #2
   2b43c:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   2b43e:	4620      	mov	r0, r4
   2b440:	f7ff fc56 	bl	2acf0 <bt_send>
}
   2b444:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   2b446:	2601      	movs	r6, #1
   2b448:	e7ea      	b.n	2b420 <send_acl+0x14>
   2b44a:	f06f 0015 	mvn.w	r0, #21
   2b44e:	e7f9      	b.n	2b444 <send_acl+0x38>

0002b450 <start_security>:
{
   2b450:	b508      	push	{r3, lr}
		return bt_smp_start_security(conn);
   2b452:	f002 f945 	bl	2d6e0 <bt_smp_start_security>
}
   2b456:	bd08      	pop	{r3, pc}

0002b458 <process_unack_tx>:
{
   2b458:	b510      	push	{r4, lr}
   2b45a:	4604      	mov	r4, r0
   2b45c:	e028      	b.n	2b4b0 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2b45e:	3b01      	subs	r3, #1
   2b460:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2b462:	f382 8811 	msr	BASEPRI, r2
   2b466:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2b46a:	4620      	mov	r0, r4
   2b46c:	f7eb ff0e 	bl	1728c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2b470:	f7f7 fa12 	bl	22898 <z_impl_k_sem_give>
			continue;
   2b474:	e01c      	b.n	2b4b0 <process_unack_tx+0x58>
	list->tail = node;
   2b476:	61a3      	str	r3, [r4, #24]
   2b478:	f382 8811 	msr	BASEPRI, r2
   2b47c:	f3bf 8f6f 	isb	sy
		if (!node) {
   2b480:	b350      	cbz	r0, 2b4d8 <process_unack_tx+0x80>
	__asm__ volatile(
   2b482:	f04f 0240 	mov.w	r2, #64	; 0x40
   2b486:	f3ef 8311 	mrs	r3, BASEPRI
   2b48a:	f382 8812 	msr	BASEPRI_MAX, r2
   2b48e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2b492:	68c2      	ldr	r2, [r0, #12]
   2b494:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2b496:	2200      	movs	r2, #0
   2b498:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   2b49a:	f383 8811 	msr	BASEPRI, r3
   2b49e:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2b4a2:	f7eb fe5d 	bl	17160 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   2b4a6:	4620      	mov	r0, r4
   2b4a8:	f7eb fef0 	bl	1728c <bt_conn_get_pkts>
   2b4ac:	f7f7 f9f4 	bl	22898 <z_impl_k_sem_give>
	__asm__ volatile(
   2b4b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b4b4:	f3ef 8211 	mrs	r2, BASEPRI
   2b4b8:	f383 8812 	msr	BASEPRI_MAX, r3
   2b4bc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2b4c0:	69e3      	ldr	r3, [r4, #28]
   2b4c2:	2b00      	cmp	r3, #0
   2b4c4:	d1cb      	bne.n	2b45e <process_unack_tx+0x6>
	return list->head;
   2b4c6:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2b4c8:	2800      	cmp	r0, #0
   2b4ca:	d0d5      	beq.n	2b478 <process_unack_tx+0x20>
	return node->next;
   2b4cc:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2b4ce:	6163      	str	r3, [r4, #20]
	return list->tail;
   2b4d0:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b4d2:	4288      	cmp	r0, r1
   2b4d4:	d1d0      	bne.n	2b478 <process_unack_tx+0x20>
   2b4d6:	e7ce      	b.n	2b476 <process_unack_tx+0x1e>
}
   2b4d8:	bd10      	pop	{r4, pc}

0002b4da <bt_conn_reset_rx_state>:
{
   2b4da:	b510      	push	{r4, lr}
   2b4dc:	4604      	mov	r4, r0
	if (!conn->rx) {
   2b4de:	6900      	ldr	r0, [r0, #16]
   2b4e0:	b118      	cbz	r0, 2b4ea <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2b4e2:	f7f1 fdf9 	bl	1d0d8 <net_buf_unref>
	conn->rx = NULL;
   2b4e6:	2300      	movs	r3, #0
   2b4e8:	6123      	str	r3, [r4, #16]
}
   2b4ea:	bd10      	pop	{r4, pc}

0002b4ec <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b4ec:	f3bf 8f5b 	dmb	ish
   2b4f0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2b4f4:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   2b4f8:	b33b      	cbz	r3, 2b54a <conn_prepare_events+0x5e>
{
   2b4fa:	b510      	push	{r4, lr}
   2b4fc:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   2b4fe:	7b43      	ldrb	r3, [r0, #13]
   2b500:	b983      	cbnz	r3, 2b524 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   2b502:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b504:	f3bf 8f5b 	dmb	ish
   2b508:	e853 2f00 	ldrex	r2, [r3]
   2b50c:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   2b510:	e843 1c00 	strex	ip, r1, [r3]
   2b514:	f1bc 0f00 	cmp.w	ip, #0
   2b518:	d1f6      	bne.n	2b508 <conn_prepare_events+0x1c>
   2b51a:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   2b51e:	f012 0f40 	tst.w	r2, #64	; 0x40
   2b522:	d10d      	bne.n	2b540 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   2b524:	7b43      	ldrb	r3, [r0, #13]
   2b526:	2b07      	cmp	r3, #7
   2b528:	d112      	bne.n	2b550 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   2b52a:	f100 0338 	add.w	r3, r0, #56	; 0x38
   2b52e:	2200      	movs	r2, #0
   2b530:	2104      	movs	r1, #4
   2b532:	4620      	mov	r0, r4
   2b534:	f7f9 fc7c 	bl	24e30 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2b538:	2301      	movs	r3, #1
   2b53a:	7323      	strb	r3, [r4, #12]
	return 0;
   2b53c:	2000      	movs	r0, #0
}
   2b53e:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   2b540:	f7eb ffec 	bl	1751c <conn_cleanup>
		return -ENOTCONN;
   2b544:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b548:	e7f9      	b.n	2b53e <conn_prepare_events+0x52>
		return -ENOTCONN;
   2b54a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2b54e:	4770      	bx	lr
		return -ENOTCONN;
   2b550:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b554:	e7f3      	b.n	2b53e <conn_prepare_events+0x52>

0002b556 <bt_conn_recv>:
{
   2b556:	b570      	push	{r4, r5, r6, lr}
   2b558:	4604      	mov	r4, r0
   2b55a:	460d      	mov	r5, r1
   2b55c:	4616      	mov	r6, r2
	tx_notify(conn);
   2b55e:	f7ff ff2b 	bl	2b3b8 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   2b562:	4632      	mov	r2, r6
   2b564:	4629      	mov	r1, r5
   2b566:	4620      	mov	r0, r4
   2b568:	f7eb ff64 	bl	17434 <bt_acl_recv>
}
   2b56c:	bd70      	pop	{r4, r5, r6, pc}

0002b56e <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b56e:	f3bf 8f5b 	dmb	ish
   2b572:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2b576:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2b57a:	b1eb      	cbz	r3, 2b5b8 <bt_conn_ref+0x4a>
{
   2b57c:	b410      	push	{r4}
   2b57e:	e006      	b.n	2b58e <bt_conn_ref+0x20>
   2b580:	f3bf 8f5b 	dmb	ish
   2b584:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2b588:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2b58c:	b193      	cbz	r3, 2b5b4 <bt_conn_ref+0x46>
   2b58e:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2b592:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2b594:	f3bf 8f5b 	dmb	ish
   2b598:	e852 4f00 	ldrex	r4, [r2]
   2b59c:	429c      	cmp	r4, r3
   2b59e:	d104      	bne.n	2b5aa <bt_conn_ref+0x3c>
   2b5a0:	e842 1c00 	strex	ip, r1, [r2]
   2b5a4:	f1bc 0f00 	cmp.w	ip, #0
   2b5a8:	d1f6      	bne.n	2b598 <bt_conn_ref+0x2a>
   2b5aa:	f3bf 8f5b 	dmb	ish
   2b5ae:	d1e7      	bne.n	2b580 <bt_conn_ref+0x12>
}
   2b5b0:	bc10      	pop	{r4}
   2b5b2:	4770      	bx	lr
			return NULL;
   2b5b4:	2000      	movs	r0, #0
   2b5b6:	e7fb      	b.n	2b5b0 <bt_conn_ref+0x42>
   2b5b8:	2000      	movs	r0, #0
}
   2b5ba:	4770      	bx	lr

0002b5bc <conn_lookup_handle>:
{
   2b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5c0:	4607      	mov	r7, r0
   2b5c2:	460e      	mov	r6, r1
   2b5c4:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2b5c6:	2400      	movs	r4, #0
   2b5c8:	e003      	b.n	2b5d2 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2b5ca:	4628      	mov	r0, r5
   2b5cc:	f7ec f846 	bl	1765c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2b5d0:	3401      	adds	r4, #1
   2b5d2:	42b4      	cmp	r4, r6
   2b5d4:	d21b      	bcs.n	2b60e <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2b5d6:	20c8      	movs	r0, #200	; 0xc8
   2b5d8:	fb00 7004 	mla	r0, r0, r4, r7
   2b5dc:	f7ff ffc7 	bl	2b56e <bt_conn_ref>
		if (!conn) {
   2b5e0:	4605      	mov	r5, r0
   2b5e2:	2800      	cmp	r0, #0
   2b5e4:	d0f4      	beq.n	2b5d0 <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2b5e6:	7b43      	ldrb	r3, [r0, #13]
   2b5e8:	2b01      	cmp	r3, #1
   2b5ea:	d006      	beq.n	2b5fa <conn_lookup_handle+0x3e>
   2b5ec:	b25a      	sxtb	r2, r3
   2b5ee:	2a00      	cmp	r2, #0
   2b5f0:	d0eb      	beq.n	2b5ca <conn_lookup_handle+0xe>
   2b5f2:	3b07      	subs	r3, #7
   2b5f4:	b2db      	uxtb	r3, r3
   2b5f6:	2b01      	cmp	r3, #1
   2b5f8:	d8e7      	bhi.n	2b5ca <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   2b5fa:	882b      	ldrh	r3, [r5, #0]
   2b5fc:	4543      	cmp	r3, r8
   2b5fe:	d102      	bne.n	2b606 <conn_lookup_handle+0x4a>
}
   2b600:	4628      	mov	r0, r5
   2b602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   2b606:	4628      	mov	r0, r5
   2b608:	f7ec f828 	bl	1765c <bt_conn_unref>
			continue;
   2b60c:	e7e0      	b.n	2b5d0 <conn_lookup_handle+0x14>
	return NULL;
   2b60e:	2500      	movs	r5, #0
   2b610:	e7f6      	b.n	2b600 <conn_lookup_handle+0x44>

0002b612 <conn_disconnect>:
{
   2b612:	b538      	push	{r3, r4, r5, lr}
   2b614:	4604      	mov	r4, r0
	err = bt_hci_disconnect(conn->handle, reason);
   2b616:	8800      	ldrh	r0, [r0, #0]
   2b618:	f7ff fb01 	bl	2ac1e <bt_hci_disconnect>
	if (err) {
   2b61c:	4605      	mov	r5, r0
   2b61e:	b910      	cbnz	r0, 2b626 <conn_disconnect+0x14>
	if (conn->state == BT_CONN_CONNECTED) {
   2b620:	7b63      	ldrb	r3, [r4, #13]
   2b622:	2b07      	cmp	r3, #7
   2b624:	d001      	beq.n	2b62a <conn_disconnect+0x18>
}
   2b626:	4628      	mov	r0, r5
   2b628:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2b62a:	2108      	movs	r1, #8
   2b62c:	4620      	mov	r0, r4
   2b62e:	f7ec f851 	bl	176d4 <bt_conn_set_state>
   2b632:	e7f8      	b.n	2b626 <conn_disconnect+0x14>

0002b634 <bt_conn_connected>:
{
   2b634:	b510      	push	{r4, lr}
   2b636:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2b638:	f7ec fd52 	bl	180e0 <bt_l2cap_connected>
	notify_connected(conn);
   2b63c:	4620      	mov	r0, r4
   2b63e:	f7eb fde9 	bl	17214 <notify_connected>
}
   2b642:	bd10      	pop	{r4, pc}

0002b644 <bt_conn_disconnect>:
{
   2b644:	b508      	push	{r3, lr}
	switch (conn->state) {
   2b646:	7b43      	ldrb	r3, [r0, #13]
   2b648:	3b02      	subs	r3, #2
   2b64a:	2b06      	cmp	r3, #6
   2b64c:	d810      	bhi.n	2b670 <bt_conn_disconnect+0x2c>
   2b64e:	e8df f003 	tbb	[pc, r3]
   2b652:	0f06      	.short	0x0f06
   2b654:	0c040f0f 	.word	0x0c040f0f
   2b658:	04          	.byte	0x04
   2b659:	00          	.byte	0x00
   2b65a:	2000      	movs	r0, #0
}
   2b65c:	bd08      	pop	{r3, pc}
		conn->err = reason;
   2b65e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b660:	2100      	movs	r1, #0
   2b662:	f7ec f837 	bl	176d4 <bt_conn_set_state>
		return 0;
   2b666:	2000      	movs	r0, #0
   2b668:	e7f8      	b.n	2b65c <bt_conn_disconnect+0x18>
		return conn_disconnect(conn, reason);
   2b66a:	f7ff ffd2 	bl	2b612 <conn_disconnect>
   2b66e:	e7f5      	b.n	2b65c <bt_conn_disconnect+0x18>
		return -ENOTCONN;
   2b670:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b674:	e7f2      	b.n	2b65c <bt_conn_disconnect+0x18>

0002b676 <bt_conn_set_security>:
	if (conn->state != BT_CONN_CONNECTED) {
   2b676:	7b43      	ldrb	r3, [r0, #13]
   2b678:	2b07      	cmp	r3, #7
   2b67a:	d12f      	bne.n	2b6dc <bt_conn_set_security+0x66>
{
   2b67c:	b510      	push	{r4, lr}
   2b67e:	4604      	mov	r4, r0
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2b680:	7a43      	ldrb	r3, [r0, #9]
   2b682:	428b      	cmp	r3, r1
   2b684:	d22d      	bcs.n	2b6e2 <bt_conn_set_security+0x6c>
   2b686:	7a83      	ldrb	r3, [r0, #10]
   2b688:	428b      	cmp	r3, r1
   2b68a:	d301      	bcc.n	2b690 <bt_conn_set_security+0x1a>
		return 0;
   2b68c:	2000      	movs	r0, #0
   2b68e:	e029      	b.n	2b6e4 <bt_conn_set_security+0x6e>
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2b690:	1d03      	adds	r3, r0, #4
	if (val) {
   2b692:	09ca      	lsrs	r2, r1, #7
   2b694:	d015      	beq.n	2b6c2 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b696:	f3bf 8f5b 	dmb	ish
   2b69a:	e853 2f00 	ldrex	r2, [r3]
   2b69e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2b6a2:	e843 2000 	strex	r0, r2, [r3]
   2b6a6:	2800      	cmp	r0, #0
   2b6a8:	d1f7      	bne.n	2b69a <bt_conn_set_security+0x24>
   2b6aa:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2b6ae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2b6b2:	72a1      	strb	r1, [r4, #10]
	err = start_security(conn);
   2b6b4:	4620      	mov	r0, r4
   2b6b6:	f7ff fecb 	bl	2b450 <start_security>
	if (err) {
   2b6ba:	b198      	cbz	r0, 2b6e4 <bt_conn_set_security+0x6e>
		conn->required_sec_level = conn->sec_level;
   2b6bc:	7a63      	ldrb	r3, [r4, #9]
   2b6be:	72a3      	strb	r3, [r4, #10]
   2b6c0:	e010      	b.n	2b6e4 <bt_conn_set_security+0x6e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b6c2:	f3bf 8f5b 	dmb	ish
   2b6c6:	e853 2f00 	ldrex	r2, [r3]
   2b6ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   2b6ce:	e843 2000 	strex	r0, r2, [r3]
   2b6d2:	2800      	cmp	r0, #0
   2b6d4:	d1f7      	bne.n	2b6c6 <bt_conn_set_security+0x50>
   2b6d6:	f3bf 8f5b 	dmb	ish
   2b6da:	e7e8      	b.n	2b6ae <bt_conn_set_security+0x38>
		return -ENOTCONN;
   2b6dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2b6e0:	4770      	bx	lr
		return 0;
   2b6e2:	2000      	movs	r0, #0
}
   2b6e4:	bd10      	pop	{r4, pc}

0002b6e6 <bt_conn_get_security>:
}
   2b6e6:	7a40      	ldrb	r0, [r0, #9]
   2b6e8:	4770      	bx	lr

0002b6ea <bt_conn_add_le>:
{
   2b6ea:	b570      	push	{r4, r5, r6, lr}
   2b6ec:	4606      	mov	r6, r0
   2b6ee:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   2b6f0:	f7eb fe98 	bl	17424 <acl_conn_new>
	if (!conn) {
   2b6f4:	4604      	mov	r4, r0
   2b6f6:	b178      	cbz	r0, 2b718 <bt_conn_add_le+0x2e>
	conn->id = id;
   2b6f8:	7206      	strb	r6, [r0, #8]
   2b6fa:	2207      	movs	r2, #7
   2b6fc:	4629      	mov	r1, r5
   2b6fe:	3090      	adds	r0, #144	; 0x90
   2b700:	f7ff f8cd 	bl	2a89e <memcpy>
	conn->sec_level = BT_SECURITY_L1;
   2b704:	2301      	movs	r3, #1
   2b706:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2b708:	72a3      	strb	r3, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
   2b70a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2b70c:	2318      	movs	r3, #24
   2b70e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2b712:	2328      	movs	r3, #40	; 0x28
   2b714:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   2b718:	4620      	mov	r0, r4
   2b71a:	bd70      	pop	{r4, r5, r6, pc}

0002b71c <bt_conn_is_peer_addr_le>:
{
   2b71c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2b71e:	7a03      	ldrb	r3, [r0, #8]
   2b720:	428b      	cmp	r3, r1
   2b722:	d001      	beq.n	2b728 <bt_conn_is_peer_addr_le+0xc>
		return false;
   2b724:	2000      	movs	r0, #0
}
   2b726:	bd38      	pop	{r3, r4, r5, pc}
   2b728:	4604      	mov	r4, r0
   2b72a:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2b72c:	2207      	movs	r2, #7
   2b72e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2b732:	4628      	mov	r0, r5
   2b734:	f7ff f886 	bl	2a844 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2b738:	b1a8      	cbz	r0, 2b766 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2b73a:	78e3      	ldrb	r3, [r4, #3]
   2b73c:	b14b      	cbz	r3, 2b752 <bt_conn_is_peer_addr_le+0x36>
   2b73e:	2207      	movs	r2, #7
   2b740:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2b744:	4628      	mov	r0, r5
   2b746:	f7ff f87d 	bl	2a844 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2b74a:	fab0 f080 	clz	r0, r0
   2b74e:	0940      	lsrs	r0, r0, #5
   2b750:	e7e9      	b.n	2b726 <bt_conn_is_peer_addr_le+0xa>
   2b752:	2207      	movs	r2, #7
   2b754:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2b758:	4628      	mov	r0, r5
   2b75a:	f7ff f873 	bl	2a844 <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   2b75e:	fab0 f080 	clz	r0, r0
   2b762:	0940      	lsrs	r0, r0, #5
   2b764:	e7df      	b.n	2b726 <bt_conn_is_peer_addr_le+0xa>
		return true;
   2b766:	2001      	movs	r0, #1
   2b768:	e7dd      	b.n	2b726 <bt_conn_is_peer_addr_le+0xa>

0002b76a <bt_conn_get_dst>:
}
   2b76a:	3090      	adds	r0, #144	; 0x90
   2b76c:	4770      	bx	lr

0002b76e <bt_conn_le_conn_update>:
{
   2b76e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b770:	4606      	mov	r6, r0
   2b772:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2b774:	210e      	movs	r1, #14
   2b776:	f242 0013 	movw	r0, #8211	; 0x2013
   2b77a:	f7e9 fc4f 	bl	1501c <bt_hci_cmd_create>
	if (!buf) {
   2b77e:	b1d0      	cbz	r0, 2b7b6 <bt_conn_le_conn_update+0x48>
   2b780:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   2b782:	210e      	movs	r1, #14
   2b784:	3008      	adds	r0, #8
   2b786:	f7f1 fdbf 	bl	1d308 <net_buf_simple_add>
   2b78a:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2b78c:	220e      	movs	r2, #14
   2b78e:	2100      	movs	r1, #0
   2b790:	f7ff f8a9 	bl	2a8e6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2b794:	8833      	ldrh	r3, [r6, #0]
   2b796:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2b798:	882b      	ldrh	r3, [r5, #0]
   2b79a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2b79c:	886b      	ldrh	r3, [r5, #2]
   2b79e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2b7a0:	88ab      	ldrh	r3, [r5, #4]
   2b7a2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2b7a4:	88eb      	ldrh	r3, [r5, #6]
   2b7a6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b7a8:	2200      	movs	r2, #0
   2b7aa:	4639      	mov	r1, r7
   2b7ac:	f242 0013 	movw	r0, #8211	; 0x2013
   2b7b0:	f7e9 fc80 	bl	150b4 <bt_hci_cmd_send_sync>
}
   2b7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2b7b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b7ba:	e7fb      	b.n	2b7b4 <bt_conn_le_conn_update+0x46>

0002b7bc <l2cap_connected>:
}
   2b7bc:	4770      	bx	lr

0002b7be <l2cap_chan_recv>:
{
   2b7be:	b510      	push	{r4, lr}
   2b7c0:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2b7c2:	6843      	ldr	r3, [r0, #4]
   2b7c4:	691b      	ldr	r3, [r3, #16]
   2b7c6:	4798      	blx	r3
	net_buf_unref(buf);
   2b7c8:	4620      	mov	r0, r4
   2b7ca:	f7f1 fc85 	bl	1d0d8 <net_buf_unref>
}
   2b7ce:	bd10      	pop	{r4, pc}

0002b7d0 <l2cap_disconnected>:
{
   2b7d0:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2b7d2:	3010      	adds	r0, #16
   2b7d4:	f7f7 fd88 	bl	232e8 <k_work_cancel_delayable>
}
   2b7d8:	bd08      	pop	{r3, pc}

0002b7da <bt_l2cap_chan_remove>:
	return list->head;
   2b7da:	6d43      	ldr	r3, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b7dc:	b103      	cbz	r3, 2b7e0 <bt_l2cap_chan_remove+0x6>
   2b7de:	3b08      	subs	r3, #8
   2b7e0:	2200      	movs	r2, #0
   2b7e2:	e016      	b.n	2b812 <bt_l2cap_chan_remove+0x38>
{
   2b7e4:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2b7e6:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   2b7ea:	b142      	cbz	r2, 2b7fe <bt_l2cap_chan_remove+0x24>
	return node->next;
   2b7ec:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   2b7ee:	6014      	str	r4, [r2, #0]
	return list->tail;
   2b7f0:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_REMOVE(slist, snode)
   2b7f2:	42a1      	cmp	r1, r4
   2b7f4:	d00a      	beq.n	2b80c <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   2b7f6:	2200      	movs	r2, #0
   2b7f8:	609a      	str	r2, [r3, #8]
}
   2b7fa:	bc10      	pop	{r4}
   2b7fc:	4770      	bx	lr
	return node->next;
   2b7fe:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2b800:	6542      	str	r2, [r0, #84]	; 0x54
	return list->tail;
   2b802:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_REMOVE(slist, snode)
   2b804:	42a1      	cmp	r1, r4
   2b806:	d1f6      	bne.n	2b7f6 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   2b808:	6582      	str	r2, [r0, #88]	; 0x58
}
   2b80a:	e7f4      	b.n	2b7f6 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   2b80c:	6582      	str	r2, [r0, #88]	; 0x58
}
   2b80e:	e7f2      	b.n	2b7f6 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b810:	4613      	mov	r3, r2
   2b812:	b14b      	cbz	r3, 2b828 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   2b814:	428b      	cmp	r3, r1
   2b816:	d0e5      	beq.n	2b7e4 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b818:	f113 0208 	adds.w	r2, r3, #8
   2b81c:	d0f8      	beq.n	2b810 <bt_l2cap_chan_remove+0x36>
	return node->next;
   2b81e:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b820:	2b00      	cmp	r3, #0
   2b822:	d0f6      	beq.n	2b812 <bt_l2cap_chan_remove+0x38>
   2b824:	3b08      	subs	r3, #8
   2b826:	e7f4      	b.n	2b812 <bt_l2cap_chan_remove+0x38>
   2b828:	4770      	bx	lr

0002b82a <bt_l2cap_chan_del>:
{
   2b82a:	b538      	push	{r3, r4, r5, lr}
   2b82c:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2b82e:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2b830:	6803      	ldr	r3, [r0, #0]
   2b832:	b123      	cbz	r3, 2b83e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2b834:	686b      	ldr	r3, [r5, #4]
   2b836:	b103      	cbz	r3, 2b83a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2b838:	4798      	blx	r3
	chan->conn = NULL;
   2b83a:	2300      	movs	r3, #0
   2b83c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2b83e:	68e3      	ldr	r3, [r4, #12]
   2b840:	b10b      	cbz	r3, 2b846 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2b842:	4620      	mov	r0, r4
   2b844:	4798      	blx	r3
	if (ops->released) {
   2b846:	69eb      	ldr	r3, [r5, #28]
   2b848:	b10b      	cbz	r3, 2b84e <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2b84a:	4620      	mov	r0, r4
   2b84c:	4798      	blx	r3
}
   2b84e:	bd38      	pop	{r3, r4, r5, pc}

0002b850 <bt_l2cap_chan_add>:
{
   2b850:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2b852:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2b856:	2400      	movs	r4, #0
   2b858:	608c      	str	r4, [r1, #8]
	return list->tail;
   2b85a:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_APPEND(slist, snode)
   2b85c:	b12c      	cbz	r4, 2b86a <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2b85e:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2b860:	6583      	str	r3, [r0, #88]	; 0x58
	chan->conn = conn;
   2b862:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2b864:	60ca      	str	r2, [r1, #12]
}
   2b866:	bc10      	pop	{r4}
   2b868:	4770      	bx	lr
   2b86a:	6583      	str	r3, [r0, #88]	; 0x58
	list->head = node;
   2b86c:	6543      	str	r3, [r0, #84]	; 0x54
}
   2b86e:	e7f8      	b.n	2b862 <bt_l2cap_chan_add+0x12>

0002b870 <bt_l2cap_disconnected>:
{
   2b870:	b510      	push	{r4, lr}
	return list->head;
   2b872:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b874:	b140      	cbz	r0, 2b888 <bt_l2cap_disconnected+0x18>
   2b876:	3808      	subs	r0, #8
   2b878:	d008      	beq.n	2b88c <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b87a:	f110 0408 	adds.w	r4, r0, #8
   2b87e:	d00a      	beq.n	2b896 <bt_l2cap_disconnected+0x26>
	return node->next;
   2b880:	6884      	ldr	r4, [r0, #8]
   2b882:	b144      	cbz	r4, 2b896 <bt_l2cap_disconnected+0x26>
   2b884:	3c08      	subs	r4, #8
   2b886:	e006      	b.n	2b896 <bt_l2cap_disconnected+0x26>
   2b888:	4604      	mov	r4, r0
   2b88a:	e004      	b.n	2b896 <bt_l2cap_disconnected+0x26>
   2b88c:	4604      	mov	r4, r0
   2b88e:	e002      	b.n	2b896 <bt_l2cap_disconnected+0x26>
   2b890:	4623      	mov	r3, r4
   2b892:	4620      	mov	r0, r4
   2b894:	461c      	mov	r4, r3
   2b896:	b158      	cbz	r0, 2b8b0 <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   2b898:	f7ff ffc7 	bl	2b82a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b89c:	2c00      	cmp	r4, #0
   2b89e:	d0f7      	beq.n	2b890 <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b8a0:	f114 0308 	adds.w	r3, r4, #8
   2b8a4:	d0f5      	beq.n	2b892 <bt_l2cap_disconnected+0x22>
	return node->next;
   2b8a6:	68a3      	ldr	r3, [r4, #8]
   2b8a8:	2b00      	cmp	r3, #0
   2b8aa:	d0f2      	beq.n	2b892 <bt_l2cap_disconnected+0x22>
   2b8ac:	3b08      	subs	r3, #8
   2b8ae:	e7f0      	b.n	2b892 <bt_l2cap_disconnected+0x22>
}
   2b8b0:	bd10      	pop	{r4, pc}

0002b8b2 <bt_l2cap_security_changed>:
{
   2b8b2:	b538      	push	{r3, r4, r5, lr}
   2b8b4:	460d      	mov	r5, r1
	return list->head;
   2b8b6:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b8b8:	b140      	cbz	r0, 2b8cc <bt_l2cap_security_changed+0x1a>
   2b8ba:	3808      	subs	r0, #8
   2b8bc:	d008      	beq.n	2b8d0 <bt_l2cap_security_changed+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b8be:	f110 0408 	adds.w	r4, r0, #8
   2b8c2:	d00a      	beq.n	2b8da <bt_l2cap_security_changed+0x28>
	return node->next;
   2b8c4:	6884      	ldr	r4, [r0, #8]
   2b8c6:	b144      	cbz	r4, 2b8da <bt_l2cap_security_changed+0x28>
   2b8c8:	3c08      	subs	r4, #8
   2b8ca:	e006      	b.n	2b8da <bt_l2cap_security_changed+0x28>
   2b8cc:	4604      	mov	r4, r0
   2b8ce:	e004      	b.n	2b8da <bt_l2cap_security_changed+0x28>
   2b8d0:	4604      	mov	r4, r0
   2b8d2:	e002      	b.n	2b8da <bt_l2cap_security_changed+0x28>
   2b8d4:	4623      	mov	r3, r4
   2b8d6:	4620      	mov	r0, r4
   2b8d8:	461c      	mov	r4, r3
   2b8da:	b170      	cbz	r0, 2b8fa <bt_l2cap_security_changed+0x48>
		if (chan->ops->encrypt_change) {
   2b8dc:	6843      	ldr	r3, [r0, #4]
   2b8de:	689b      	ldr	r3, [r3, #8]
   2b8e0:	b10b      	cbz	r3, 2b8e6 <bt_l2cap_security_changed+0x34>
			chan->ops->encrypt_change(chan, hci_status);
   2b8e2:	4629      	mov	r1, r5
   2b8e4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b8e6:	2c00      	cmp	r4, #0
   2b8e8:	d0f4      	beq.n	2b8d4 <bt_l2cap_security_changed+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b8ea:	f114 0308 	adds.w	r3, r4, #8
   2b8ee:	d0f2      	beq.n	2b8d6 <bt_l2cap_security_changed+0x24>
	return node->next;
   2b8f0:	68a3      	ldr	r3, [r4, #8]
   2b8f2:	2b00      	cmp	r3, #0
   2b8f4:	d0ef      	beq.n	2b8d6 <bt_l2cap_security_changed+0x24>
   2b8f6:	3b08      	subs	r3, #8
   2b8f8:	e7ed      	b.n	2b8d6 <bt_l2cap_security_changed+0x24>
}
   2b8fa:	bd38      	pop	{r3, r4, r5, pc}

0002b8fc <bt_l2cap_create_pdu_timeout>:
{
   2b8fc:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2b8fe:	3104      	adds	r1, #4
   2b900:	f7eb ffda 	bl	178b8 <bt_conn_create_pdu_timeout>
}
   2b904:	bd08      	pop	{r3, pc}

0002b906 <bt_l2cap_send_cb>:
{
   2b906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b908:	4605      	mov	r5, r0
   2b90a:	460f      	mov	r7, r1
   2b90c:	4614      	mov	r4, r2
   2b90e:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   2b910:	2104      	movs	r1, #4
   2b912:	f102 0008 	add.w	r0, r2, #8
   2b916:	f7f1 fcd7 	bl	1d2c8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2b91a:	89a3      	ldrh	r3, [r4, #12]
   2b91c:	3b04      	subs	r3, #4
   2b91e:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   2b920:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2b922:	9b06      	ldr	r3, [sp, #24]
   2b924:	4632      	mov	r2, r6
   2b926:	4621      	mov	r1, r4
   2b928:	4628      	mov	r0, r5
   2b92a:	f7eb fe37 	bl	1759c <bt_conn_send_cb>
}
   2b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b930 <l2cap_send_reject>:
{
   2b930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b934:	b083      	sub	sp, #12
   2b936:	4605      	mov	r5, r0
   2b938:	4690      	mov	r8, r2
   2b93a:	461c      	mov	r4, r3
   2b93c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2b940:	1cbb      	adds	r3, r7, #2
   2b942:	460a      	mov	r2, r1
   2b944:	2101      	movs	r1, #1
   2b946:	2000      	movs	r0, #0
   2b948:	f7ec fc1a 	bl	18180 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2b94c:	b1b0      	cbz	r0, 2b97c <l2cap_send_reject+0x4c>
   2b94e:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2b950:	f100 0908 	add.w	r9, r0, #8
   2b954:	2102      	movs	r1, #2
   2b956:	4648      	mov	r0, r9
   2b958:	f7f1 fcd6 	bl	1d308 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2b95c:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2b960:	b124      	cbz	r4, 2b96c <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2b962:	463a      	mov	r2, r7
   2b964:	4621      	mov	r1, r4
   2b966:	4648      	mov	r0, r9
   2b968:	f002 f8b1 	bl	2dace <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2b96c:	2300      	movs	r3, #0
   2b96e:	9300      	str	r3, [sp, #0]
   2b970:	4632      	mov	r2, r6
   2b972:	2105      	movs	r1, #5
   2b974:	4628      	mov	r0, r5
   2b976:	f7ff ffc6 	bl	2b906 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2b97a:	b910      	cbnz	r0, 2b982 <l2cap_send_reject+0x52>
}
   2b97c:	b003      	add	sp, #12
   2b97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   2b982:	4630      	mov	r0, r6
   2b984:	f7f1 fba8 	bl	1d0d8 <net_buf_unref>
}
   2b988:	e7f8      	b.n	2b97c <l2cap_send_reject+0x4c>

0002b98a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2b98a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b98c:	b110      	cbz	r0, 2b994 <bt_l2cap_le_lookup_tx_cid+0xa>
   2b98e:	3808      	subs	r0, #8
   2b990:	e000      	b.n	2b994 <bt_l2cap_le_lookup_tx_cid+0xa>
   2b992:	3808      	subs	r0, #8
   2b994:	b148      	cbz	r0, 2b9aa <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2b996:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2b99a:	428b      	cmp	r3, r1
   2b99c:	d005      	beq.n	2b9aa <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b99e:	f110 0308 	adds.w	r3, r0, #8
   2b9a2:	d003      	beq.n	2b9ac <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   2b9a4:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b9a6:	2800      	cmp	r0, #0
   2b9a8:	d1f3      	bne.n	2b992 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   2b9aa:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b9ac:	4618      	mov	r0, r3
   2b9ae:	e7f1      	b.n	2b994 <bt_l2cap_le_lookup_tx_cid+0xa>

0002b9b0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2b9b0:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b9b2:	b110      	cbz	r0, 2b9ba <bt_l2cap_le_lookup_rx_cid+0xa>
   2b9b4:	3808      	subs	r0, #8
   2b9b6:	e000      	b.n	2b9ba <bt_l2cap_le_lookup_rx_cid+0xa>
   2b9b8:	3808      	subs	r0, #8
   2b9ba:	b148      	cbz	r0, 2b9d0 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2b9bc:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2b9c0:	428b      	cmp	r3, r1
   2b9c2:	d005      	beq.n	2b9d0 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b9c4:	f110 0308 	adds.w	r3, r0, #8
   2b9c8:	d003      	beq.n	2b9d2 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   2b9ca:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b9cc:	2800      	cmp	r0, #0
   2b9ce:	d1f3      	bne.n	2b9b8 <bt_l2cap_le_lookup_rx_cid+0x8>
}
   2b9d0:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b9d2:	4618      	mov	r0, r3
   2b9d4:	e7f1      	b.n	2b9ba <bt_l2cap_le_lookup_rx_cid+0xa>

0002b9d6 <bt_l2cap_update_conn_param>:
{
   2b9d6:	b570      	push	{r4, r5, r6, lr}
   2b9d8:	b082      	sub	sp, #8
   2b9da:	4605      	mov	r5, r0
   2b9dc:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2b9de:	f7ec fb05 	bl	17fec <get_ident>
   2b9e2:	4602      	mov	r2, r0
   2b9e4:	2308      	movs	r3, #8
   2b9e6:	2112      	movs	r1, #18
   2b9e8:	2000      	movs	r0, #0
   2b9ea:	f7ec fbc9 	bl	18180 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2b9ee:	b1e0      	cbz	r0, 2ba2a <bt_l2cap_update_conn_param+0x54>
   2b9f0:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2b9f2:	2108      	movs	r1, #8
   2b9f4:	4408      	add	r0, r1
   2b9f6:	f7f1 fc87 	bl	1d308 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2b9fa:	8823      	ldrh	r3, [r4, #0]
   2b9fc:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2b9fe:	8863      	ldrh	r3, [r4, #2]
   2ba00:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2ba02:	88a3      	ldrh	r3, [r4, #4]
   2ba04:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2ba06:	88e3      	ldrh	r3, [r4, #6]
   2ba08:	80c3      	strh	r3, [r0, #6]
   2ba0a:	2300      	movs	r3, #0
   2ba0c:	9300      	str	r3, [sp, #0]
   2ba0e:	4632      	mov	r2, r6
   2ba10:	2105      	movs	r1, #5
   2ba12:	4628      	mov	r0, r5
   2ba14:	f7ff ff77 	bl	2b906 <bt_l2cap_send_cb>
	if (err) {
   2ba18:	4604      	mov	r4, r0
   2ba1a:	b910      	cbnz	r0, 2ba22 <bt_l2cap_update_conn_param+0x4c>
}
   2ba1c:	4620      	mov	r0, r4
   2ba1e:	b002      	add	sp, #8
   2ba20:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2ba22:	4630      	mov	r0, r6
   2ba24:	f7f1 fb58 	bl	1d0d8 <net_buf_unref>
		return err;
   2ba28:	e7f8      	b.n	2ba1c <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2ba2a:	f06f 040b 	mvn.w	r4, #11
   2ba2e:	e7f5      	b.n	2ba1c <bt_l2cap_update_conn_param+0x46>

0002ba30 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2ba30:	4770      	bx	lr

0002ba32 <att_sent>:
{
   2ba32:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   2ba34:	684b      	ldr	r3, [r1, #4]
   2ba36:	695b      	ldr	r3, [r3, #20]
   2ba38:	b10b      	cbz	r3, 2ba3e <att_sent+0xc>
   2ba3a:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   2ba3c:	4798      	blx	r3
}
   2ba3e:	bd08      	pop	{r3, pc}

0002ba40 <range_is_valid>:
	if (!start || !end) {
   2ba40:	b120      	cbz	r0, 2ba4c <range_is_valid+0xc>
   2ba42:	b119      	cbz	r1, 2ba4c <range_is_valid+0xc>
	if (start > end) {
   2ba44:	4288      	cmp	r0, r1
   2ba46:	d806      	bhi.n	2ba56 <range_is_valid+0x16>
	return true;
   2ba48:	2001      	movs	r0, #1
}
   2ba4a:	4770      	bx	lr
		if (err) {
   2ba4c:	b10a      	cbz	r2, 2ba52 <range_is_valid+0x12>
			*err = 0U;
   2ba4e:	2300      	movs	r3, #0
   2ba50:	8013      	strh	r3, [r2, #0]
		return false;
   2ba52:	2000      	movs	r0, #0
   2ba54:	4770      	bx	lr
		if (err) {
   2ba56:	b102      	cbz	r2, 2ba5a <range_is_valid+0x1a>
			*err = start;
   2ba58:	8010      	strh	r0, [r2, #0]
		return false;
   2ba5a:	2000      	movs	r0, #0
   2ba5c:	4770      	bx	lr

0002ba5e <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2ba5e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2ba62:	d201      	bcs.n	2ba68 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   2ba64:	200e      	movs	r0, #14
}
   2ba66:	4770      	bx	lr
		return -err;
   2ba68:	4240      	negs	r0, r0
   2ba6a:	b2c0      	uxtb	r0, r0
   2ba6c:	4770      	bx	lr

0002ba6e <attr_read_type_cb>:
{
   2ba6e:	b410      	push	{r4}
	if (!data->rsp->len) {
   2ba70:	68d4      	ldr	r4, [r2, #12]
   2ba72:	7823      	ldrb	r3, [r4, #0]
   2ba74:	b923      	cbnz	r3, 2ba80 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   2ba76:	3102      	adds	r1, #2
   2ba78:	7021      	strb	r1, [r4, #0]
	return true;
   2ba7a:	2001      	movs	r0, #1
}
   2ba7c:	bc10      	pop	{r4}
   2ba7e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2ba80:	3102      	adds	r1, #2
   2ba82:	428b      	cmp	r3, r1
   2ba84:	d005      	beq.n	2ba92 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   2ba86:	8983      	ldrh	r3, [r0, #12]
   2ba88:	3b02      	subs	r3, #2
   2ba8a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2ba8c:	2000      	movs	r0, #0
   2ba8e:	6110      	str	r0, [r2, #16]
		return false;
   2ba90:	e7f4      	b.n	2ba7c <attr_read_type_cb+0xe>
	return true;
   2ba92:	2001      	movs	r0, #1
   2ba94:	e7f2      	b.n	2ba7c <attr_read_type_cb+0xe>

0002ba96 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2ba96:	68d0      	ldr	r0, [r2, #12]
   2ba98:	7803      	ldrb	r3, [r0, #0]
   2ba9a:	b91b      	cbnz	r3, 2baa4 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2ba9c:	3104      	adds	r1, #4
   2ba9e:	7001      	strb	r1, [r0, #0]
	return true;
   2baa0:	2001      	movs	r0, #1
   2baa2:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2baa4:	3104      	adds	r1, #4
   2baa6:	428b      	cmp	r3, r1
   2baa8:	d006      	beq.n	2bab8 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2baaa:	6891      	ldr	r1, [r2, #8]
   2baac:	898b      	ldrh	r3, [r1, #12]
   2baae:	3b04      	subs	r3, #4
   2bab0:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2bab2:	2000      	movs	r0, #0
   2bab4:	6110      	str	r0, [r2, #16]
		return false;
   2bab6:	4770      	bx	lr
	return true;
   2bab8:	2001      	movs	r0, #1
}
   2baba:	4770      	bx	lr

0002babc <att_prepare_write_req>:
}
   2babc:	2006      	movs	r0, #6
   2babe:	4770      	bx	lr

0002bac0 <att_exec_write_req>:
}
   2bac0:	2006      	movs	r0, #6
   2bac2:	4770      	bx	lr

0002bac4 <att_op_get_type>:
	switch (op) {
   2bac4:	1e43      	subs	r3, r0, #1
   2bac6:	2bd1      	cmp	r3, #209	; 0xd1
   2bac8:	d874      	bhi.n	2bbb4 <att_op_get_type+0xf0>
   2baca:	e8df f003 	tbb	[pc, r3]
   2bace:	696d      	.short	0x696d
   2bad0:	696d696d 	.word	0x696d696d
   2bad4:	696d696d 	.word	0x696d696d
   2bad8:	696d696d 	.word	0x696d696d
   2badc:	696d696d 	.word	0x696d696d
   2bae0:	6973736d 	.word	0x6973736d
   2bae4:	736d696d 	.word	0x736d696d
   2bae8:	7871736f 	.word	0x7871736f
   2baec:	73737373 	.word	0x73737373
   2baf0:	73737373 	.word	0x73737373
   2baf4:	73737373 	.word	0x73737373
   2baf8:	73737373 	.word	0x73737373
   2bafc:	73737373 	.word	0x73737373
   2bb00:	73737373 	.word	0x73737373
   2bb04:	73737373 	.word	0x73737373
   2bb08:	73737373 	.word	0x73737373
   2bb0c:	73737373 	.word	0x73737373
   2bb10:	73737373 	.word	0x73737373
   2bb14:	73737373 	.word	0x73737373
   2bb18:	73737373 	.word	0x73737373
   2bb1c:	6b737373 	.word	0x6b737373
   2bb20:	73737373 	.word	0x73737373
   2bb24:	73737373 	.word	0x73737373
   2bb28:	73737373 	.word	0x73737373
   2bb2c:	73737373 	.word	0x73737373
   2bb30:	73737373 	.word	0x73737373
   2bb34:	73737373 	.word	0x73737373
   2bb38:	73737373 	.word	0x73737373
   2bb3c:	73737373 	.word	0x73737373
   2bb40:	73737373 	.word	0x73737373
   2bb44:	73737373 	.word	0x73737373
   2bb48:	73737373 	.word	0x73737373
   2bb4c:	73737373 	.word	0x73737373
   2bb50:	73737373 	.word	0x73737373
   2bb54:	73737373 	.word	0x73737373
   2bb58:	73737373 	.word	0x73737373
   2bb5c:	73737373 	.word	0x73737373
   2bb60:	73737373 	.word	0x73737373
   2bb64:	73737373 	.word	0x73737373
   2bb68:	73737373 	.word	0x73737373
   2bb6c:	73737373 	.word	0x73737373
   2bb70:	73737373 	.word	0x73737373
   2bb74:	73737373 	.word	0x73737373
   2bb78:	73737373 	.word	0x73737373
   2bb7c:	73737373 	.word	0x73737373
   2bb80:	73737373 	.word	0x73737373
   2bb84:	73737373 	.word	0x73737373
   2bb88:	73737373 	.word	0x73737373
   2bb8c:	73737373 	.word	0x73737373
   2bb90:	73737373 	.word	0x73737373
   2bb94:	73737373 	.word	0x73737373
   2bb98:	73737373 	.word	0x73737373
   2bb9c:	6b737373 	.word	0x6b737373
{
   2bba0:	2001      	movs	r0, #1
   2bba2:	4770      	bx	lr
		return ATT_COMMAND;
   2bba4:	2000      	movs	r0, #0
   2bba6:	4770      	bx	lr
		return ATT_RESPONSE;
   2bba8:	2002      	movs	r0, #2
   2bbaa:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2bbac:	2003      	movs	r0, #3
   2bbae:	4770      	bx	lr
		return ATT_INDICATION;
   2bbb0:	2005      	movs	r0, #5
   2bbb2:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   2bbb4:	f010 0f40 	tst.w	r0, #64	; 0x40
   2bbb8:	d103      	bne.n	2bbc2 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   2bbba:	2006      	movs	r0, #6
   2bbbc:	4770      	bx	lr
		return ATT_CONFIRMATION;
   2bbbe:	2004      	movs	r0, #4
   2bbc0:	4770      	bx	lr
		return ATT_COMMAND;
   2bbc2:	2000      	movs	r0, #0
}
   2bbc4:	4770      	bx	lr

0002bbc6 <att_chan_attach>:
{
   2bbc6:	b538      	push	{r3, r4, r5, lr}
   2bbc8:	4604      	mov	r4, r0
   2bbca:	460d      	mov	r5, r1
	return list->head;
   2bbcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sys_slist_is_empty(&att->chans)) {
   2bbce:	b143      	cbz	r3, 2bbe2 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2bbd0:	f505 73aa 	add.w	r3, r5, #340	; 0x154
   2bbd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   2bbd6:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	list->head = node;
   2bbda:	62a3      	str	r3, [r4, #40]	; 0x28
	return list->tail;
   2bbdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   2bbde:	b122      	cbz	r2, 2bbea <att_chan_attach+0x24>
}
   2bbe0:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2bbe2:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2bbe4:	f003 f851 	bl	2ec8a <z_impl_k_queue_init>
}
   2bbe8:	e7f2      	b.n	2bbd0 <att_chan_attach+0xa>
	list->tail = node;
   2bbea:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   2bbec:	e7f8      	b.n	2bbe0 <att_chan_attach+0x1a>

0002bbee <chan_req_send>:
{
   2bbee:	b538      	push	{r3, r4, r5, lr}
   2bbf0:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2bbf2:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   2bbf6:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2bbf8:	2200      	movs	r2, #0
	while (buf) {
   2bbfa:	b11b      	cbz	r3, 2bc04 <chan_req_send+0x16>
		bytes += buf->len;
   2bbfc:	899c      	ldrh	r4, [r3, #12]
   2bbfe:	4422      	add	r2, r4
		buf = buf->frags;
   2bc00:	681b      	ldr	r3, [r3, #0]
   2bc02:	e7fa      	b.n	2bbfa <chan_req_send+0xc>
   2bc04:	4291      	cmp	r1, r2
   2bc06:	d30a      	bcc.n	2bc1e <chan_req_send+0x30>
	chan->req = req;
   2bc08:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
	buf = req->buf;
   2bc0c:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   2bc0e:	2200      	movs	r2, #0
   2bc10:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   2bc12:	4621      	mov	r1, r4
   2bc14:	f7ec fc62 	bl	184dc <chan_send>
	if (err) {
   2bc18:	b100      	cbz	r0, 2bc1c <chan_req_send+0x2e>
		req->buf = buf;
   2bc1a:	60ac      	str	r4, [r5, #8]
}
   2bc1c:	bd38      	pop	{r3, r4, r5, pc}
		return -EMSGSIZE;
   2bc1e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2bc22:	e7fb      	b.n	2bc1c <chan_req_send+0x2e>

0002bc24 <bt_att_status>:
{
   2bc24:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bc26:	f3bf 8f5b 	dmb	ish
   2bc2a:	680b      	ldr	r3, [r1, #0]
   2bc2c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2bc30:	f013 0f01 	tst.w	r3, #1
   2bc34:	d007      	beq.n	2bc46 <bt_att_status+0x22>
   2bc36:	4604      	mov	r4, r0
   2bc38:	3808      	subs	r0, #8
	if (!chan->att) {
   2bc3a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2bc3e:	b113      	cbz	r3, 2bc46 <bt_att_status+0x22>
	if (chan->req) {
   2bc40:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   2bc44:	b102      	cbz	r2, 2bc48 <bt_att_status+0x24>
}
   2bc46:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   2bc48:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2bc4a:	2d00      	cmp	r5, #0
   2bc4c:	d0fb      	beq.n	2bc46 <bt_att_status+0x22>
	return node->next;
   2bc4e:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2bc50:	605a      	str	r2, [r3, #4]
	return list->tail;
   2bc52:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bc54:	42a9      	cmp	r1, r5
   2bc56:	d00e      	beq.n	2bc76 <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2bc58:	4629      	mov	r1, r5
   2bc5a:	f7ec fc81 	bl	18560 <bt_att_chan_req_send>
   2bc5e:	2800      	cmp	r0, #0
   2bc60:	daf1      	bge.n	2bc46 <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   2bc62:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   2bc66:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2bc68:	602a      	str	r2, [r5, #0]
	list->head = node;
   2bc6a:	605d      	str	r5, [r3, #4]
	return list->tail;
   2bc6c:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   2bc6e:	2a00      	cmp	r2, #0
   2bc70:	d1e9      	bne.n	2bc46 <bt_att_status+0x22>
	list->tail = node;
   2bc72:	609d      	str	r5, [r3, #8]
}
   2bc74:	e7e7      	b.n	2bc46 <bt_att_status+0x22>
	list->tail = node;
   2bc76:	609a      	str	r2, [r3, #8]
}
   2bc78:	e7ee      	b.n	2bc58 <bt_att_status+0x34>

0002bc7a <att_req_send_process>:
{
   2bc7a:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   2bc7c:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   2bc7e:	2e00      	cmp	r6, #0
   2bc80:	d038      	beq.n	2bcf4 <att_req_send_process+0x7a>
   2bc82:	4605      	mov	r5, r0
	return node->next;
   2bc84:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2bc86:	6043      	str	r3, [r0, #4]
	return list->tail;
   2bc88:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bc8a:	4296      	cmp	r6, r2
   2bc8c:	d00d      	beq.n	2bcaa <att_req_send_process+0x30>
	return list->head;
   2bc8e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2bc90:	b198      	cbz	r0, 2bcba <att_req_send_process+0x40>
   2bc92:	f5b0 70aa 	subs.w	r0, r0, #340	; 0x154
   2bc96:	d012      	beq.n	2bcbe <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bc98:	f510 74aa 	adds.w	r4, r0, #340	; 0x154
   2bc9c:	d014      	beq.n	2bcc8 <att_req_send_process+0x4e>
	return node->next;
   2bc9e:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   2bca2:	b18c      	cbz	r4, 2bcc8 <att_req_send_process+0x4e>
   2bca4:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
   2bca8:	e00e      	b.n	2bcc8 <att_req_send_process+0x4e>
	list->tail = node;
   2bcaa:	6083      	str	r3, [r0, #8]
}
   2bcac:	e7ef      	b.n	2bc8e <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2bcae:	4631      	mov	r1, r6
   2bcb0:	f7ec fc56 	bl	18560 <bt_att_chan_req_send>
   2bcb4:	2800      	cmp	r0, #0
   2bcb6:	db0c      	blt.n	2bcd2 <att_req_send_process+0x58>
   2bcb8:	e01c      	b.n	2bcf4 <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2bcba:	4604      	mov	r4, r0
   2bcbc:	e004      	b.n	2bcc8 <att_req_send_process+0x4e>
   2bcbe:	4604      	mov	r4, r0
   2bcc0:	e002      	b.n	2bcc8 <att_req_send_process+0x4e>
   2bcc2:	4623      	mov	r3, r4
   2bcc4:	4620      	mov	r0, r4
   2bcc6:	461c      	mov	r4, r3
   2bcc8:	b178      	cbz	r0, 2bcea <att_req_send_process+0x70>
		if (!chan->req) {
   2bcca:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2bcce:	2b00      	cmp	r3, #0
   2bcd0:	d0ed      	beq.n	2bcae <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2bcd2:	2c00      	cmp	r4, #0
   2bcd4:	d0f5      	beq.n	2bcc2 <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bcd6:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   2bcda:	d0f3      	beq.n	2bcc4 <att_req_send_process+0x4a>
	return node->next;
   2bcdc:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   2bce0:	2b00      	cmp	r3, #0
   2bce2:	d0ef      	beq.n	2bcc4 <att_req_send_process+0x4a>
   2bce4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   2bce8:	e7ec      	b.n	2bcc4 <att_req_send_process+0x4a>
	return list->head;
   2bcea:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2bcec:	6033      	str	r3, [r6, #0]
	list->head = node;
   2bcee:	606e      	str	r6, [r5, #4]
	return list->tail;
   2bcf0:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2bcf2:	b103      	cbz	r3, 2bcf6 <att_req_send_process+0x7c>
}
   2bcf4:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   2bcf6:	60ae      	str	r6, [r5, #8]
}
   2bcf8:	e7fc      	b.n	2bcf4 <att_req_send_process+0x7a>

0002bcfa <bt_att_chan_send>:
{
   2bcfa:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   2bcfc:	f7ec fbee 	bl	184dc <chan_send>
}
   2bd00:	bd08      	pop	{r3, pc}

0002bd02 <chan_req_sent>:
{
   2bd02:	b508      	push	{r3, lr}
	if (chan->req) {
   2bd04:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2bd08:	b133      	cbz	r3, 2bd18 <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2bd0a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2bd0e:	2300      	movs	r3, #0
   2bd10:	f500 7090 	add.w	r0, r0, #288	; 0x120
   2bd14:	f7f7 fae0 	bl	232d8 <k_work_reschedule>
}
   2bd18:	bd08      	pop	{r3, pc}

0002bd1a <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2bd1a:	30f8      	adds	r0, #248	; 0xf8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bd1c:	f3bf 8f5b 	dmb	ish
   2bd20:	e850 3f00 	ldrex	r3, [r0]
   2bd24:	f023 0302 	bic.w	r3, r3, #2
   2bd28:	e840 3200 	strex	r2, r3, [r0]
   2bd2c:	2a00      	cmp	r2, #0
   2bd2e:	d1f7      	bne.n	2bd20 <chan_cfm_sent+0x6>
   2bd30:	f3bf 8f5b 	dmb	ish
}
   2bd34:	4770      	bx	lr

0002bd36 <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2bd36:	30f8      	adds	r0, #248	; 0xf8
   2bd38:	f3bf 8f5b 	dmb	ish
   2bd3c:	e850 3f00 	ldrex	r3, [r0]
   2bd40:	f023 0301 	bic.w	r3, r3, #1
   2bd44:	e840 3200 	strex	r2, r3, [r0]
   2bd48:	2a00      	cmp	r2, #0
   2bd4a:	d1f7      	bne.n	2bd3c <chan_rsp_sent+0x6>
   2bd4c:	f3bf 8f5b 	dmb	ish
}
   2bd50:	4770      	bx	lr

0002bd52 <process_queue>:
{
   2bd52:	b570      	push	{r4, r5, r6, lr}
   2bd54:	4605      	mov	r5, r0
   2bd56:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2bd58:	2200      	movs	r2, #0
   2bd5a:	2300      	movs	r3, #0
   2bd5c:	4608      	mov	r0, r1
   2bd5e:	f7f1 f933 	bl	1cfc8 <net_buf_get>
	if (buf) {
   2bd62:	b170      	cbz	r0, 2bd82 <process_queue+0x30>
   2bd64:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   2bd66:	2200      	movs	r2, #0
   2bd68:	4601      	mov	r1, r0
   2bd6a:	4628      	mov	r0, r5
   2bd6c:	f7ec fbb6 	bl	184dc <chan_send>
		if (err) {
   2bd70:	4605      	mov	r5, r0
   2bd72:	b908      	cbnz	r0, 2bd78 <process_queue+0x26>
}
   2bd74:	4628      	mov	r0, r5
   2bd76:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2bd78:	4631      	mov	r1, r6
   2bd7a:	4620      	mov	r0, r4
   2bd7c:	f002 ff9e 	bl	2ecbc <k_queue_prepend>
			return err;
   2bd80:	e7f8      	b.n	2bd74 <process_queue+0x22>
	return -ENOENT;
   2bd82:	f06f 0501 	mvn.w	r5, #1
   2bd86:	e7f5      	b.n	2bd74 <process_queue+0x22>

0002bd88 <bt_att_sent>:
{
   2bd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bd8a:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2bd8c:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   2bd90:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   2bd94:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   2bd98:	b10b      	cbz	r3, 2bd9e <bt_att_sent+0x16>
		chan->sent(chan);
   2bd9a:	4630      	mov	r0, r6
   2bd9c:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2bd9e:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2bda2:	f3bf 8f5b 	dmb	ish
   2bda6:	e853 2f00 	ldrex	r2, [r3]
   2bdaa:	f022 0210 	bic.w	r2, r2, #16
   2bdae:	e843 2100 	strex	r1, r2, [r3]
   2bdb2:	2900      	cmp	r1, #0
   2bdb4:	d1f7      	bne.n	2bda6 <bt_att_sent+0x1e>
   2bdb6:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2bdba:	b145      	cbz	r5, 2bdce <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2bdbc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   2bdc0:	b133      	cbz	r3, 2bdd0 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   2bdc2:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
   2bdc6:	4630      	mov	r0, r6
   2bdc8:	f7ff ffc3 	bl	2bd52 <process_queue>
	if (!err) {
   2bdcc:	b9c0      	cbnz	r0, 2be00 <bt_att_sent+0x78>
}
   2bdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2bdd0:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2bdd2:	2f00      	cmp	r7, #0
   2bdd4:	d0f5      	beq.n	2bdc2 <bt_att_sent+0x3a>
	return node->next;
   2bdd6:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2bdd8:	606b      	str	r3, [r5, #4]
	return list->tail;
   2bdda:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bddc:	4297      	cmp	r7, r2
   2bdde:	d00d      	beq.n	2bdfc <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2bde0:	4639      	mov	r1, r7
   2bde2:	4630      	mov	r0, r6
   2bde4:	f7ff ff03 	bl	2bbee <chan_req_send>
   2bde8:	2800      	cmp	r0, #0
   2bdea:	daf0      	bge.n	2bdce <bt_att_sent+0x46>
	return list->head;
   2bdec:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2bdee:	603b      	str	r3, [r7, #0]
	list->head = node;
   2bdf0:	606f      	str	r7, [r5, #4]
	return list->tail;
   2bdf2:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2bdf4:	2b00      	cmp	r3, #0
   2bdf6:	d1e4      	bne.n	2bdc2 <bt_att_sent+0x3a>
	list->tail = node;
   2bdf8:	60af      	str	r7, [r5, #8]
}
   2bdfa:	e7e2      	b.n	2bdc2 <bt_att_sent+0x3a>
	list->tail = node;
   2bdfc:	60ab      	str	r3, [r5, #8]
}
   2bdfe:	e7ef      	b.n	2bde0 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   2be00:	f105 010c 	add.w	r1, r5, #12
   2be04:	4630      	mov	r0, r6
   2be06:	f7ff ffa4 	bl	2bd52 <process_queue>
   2be0a:	e7e0      	b.n	2bdce <bt_att_sent+0x46>

0002be0c <att_send_process>:
{
   2be0c:	b570      	push	{r4, r5, r6, lr}
   2be0e:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   2be10:	2200      	movs	r2, #0
   2be12:	2300      	movs	r3, #0
   2be14:	300c      	adds	r0, #12
   2be16:	f7f1 f8d7 	bl	1cfc8 <net_buf_get>
	if (!buf) {
   2be1a:	b360      	cbz	r0, 2be76 <att_send_process+0x6a>
   2be1c:	4605      	mov	r5, r0
	return list->head;
   2be1e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2be20:	b158      	cbz	r0, 2be3a <att_send_process+0x2e>
   2be22:	f5b0 70aa 	subs.w	r0, r0, #340	; 0x154
   2be26:	d00c      	beq.n	2be42 <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2be28:	f510 74aa 	adds.w	r4, r0, #340	; 0x154
   2be2c:	d006      	beq.n	2be3c <att_send_process+0x30>
	return node->next;
   2be2e:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   2be32:	b11c      	cbz	r4, 2be3c <att_send_process+0x30>
   2be34:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
   2be38:	e000      	b.n	2be3c <att_send_process+0x30>
   2be3a:	4604      	mov	r4, r0
   2be3c:	f06f 0301 	mvn.w	r3, #1
   2be40:	e004      	b.n	2be4c <att_send_process+0x40>
   2be42:	4604      	mov	r4, r0
   2be44:	e7fa      	b.n	2be3c <att_send_process+0x30>
   2be46:	4622      	mov	r2, r4
   2be48:	4620      	mov	r0, r4
   2be4a:	4614      	mov	r4, r2
   2be4c:	b188      	cbz	r0, 2be72 <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   2be4e:	2200      	movs	r2, #0
   2be50:	4629      	mov	r1, r5
   2be52:	f7ff ff52 	bl	2bcfa <bt_att_chan_send>
		if (err >= 0) {
   2be56:	1e03      	subs	r3, r0, #0
   2be58:	da0b      	bge.n	2be72 <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2be5a:	2c00      	cmp	r4, #0
   2be5c:	d0f3      	beq.n	2be46 <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2be5e:	f514 72aa 	adds.w	r2, r4, #340	; 0x154
   2be62:	d0f1      	beq.n	2be48 <att_send_process+0x3c>
	return node->next;
   2be64:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   2be68:	2a00      	cmp	r2, #0
   2be6a:	d0ed      	beq.n	2be48 <att_send_process+0x3c>
   2be6c:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
   2be70:	e7ea      	b.n	2be48 <att_send_process+0x3c>
	if (err < 0) {
   2be72:	2b00      	cmp	r3, #0
   2be74:	db00      	blt.n	2be78 <att_send_process+0x6c>
}
   2be76:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   2be78:	4629      	mov	r1, r5
   2be7a:	f106 000c 	add.w	r0, r6, #12
   2be7e:	f002 ff1d 	bl	2ecbc <k_queue_prepend>
   2be82:	e7f8      	b.n	2be76 <att_send_process+0x6a>

0002be84 <write_cb>:
{
   2be84:	b5f0      	push	{r4, r5, r6, r7, lr}
   2be86:	b083      	sub	sp, #12
   2be88:	4606      	mov	r6, r0
   2be8a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2be8c:	222a      	movs	r2, #42	; 0x2a
   2be8e:	4601      	mov	r1, r0
   2be90:	6820      	ldr	r0, [r4, #0]
   2be92:	f000 fe89 	bl	2cba8 <bt_gatt_check_perm>
   2be96:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2be98:	b9e8      	cbnz	r0, 2bed6 <write_cb+0x52>
   2be9a:	4605      	mov	r5, r0
	if (!data->req) {
   2be9c:	7a23      	ldrb	r3, [r4, #8]
   2be9e:	b1a3      	cbz	r3, 2beca <write_cb+0x46>
	uint8_t flags = 0U;
   2bea0:	4603      	mov	r3, r0
	write = attr->write(data->conn, attr, data->value, data->len,
   2bea2:	68b7      	ldr	r7, [r6, #8]
   2bea4:	9301      	str	r3, [sp, #4]
   2bea6:	8a63      	ldrh	r3, [r4, #18]
   2bea8:	9300      	str	r3, [sp, #0]
   2beaa:	8a23      	ldrh	r3, [r4, #16]
   2beac:	68e2      	ldr	r2, [r4, #12]
   2beae:	4631      	mov	r1, r6
   2beb0:	6820      	ldr	r0, [r4, #0]
   2beb2:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2beb4:	2800      	cmp	r0, #0
   2beb6:	db02      	blt.n	2bebe <write_cb+0x3a>
   2beb8:	8a23      	ldrh	r3, [r4, #16]
   2beba:	4298      	cmp	r0, r3
   2bebc:	d007      	beq.n	2bece <write_cb+0x4a>
		data->err = err_to_att(write);
   2bebe:	f7ff fdce 	bl	2ba5e <err_to_att>
   2bec2:	7520      	strb	r0, [r4, #20]
}
   2bec4:	4628      	mov	r0, r5
   2bec6:	b003      	add	sp, #12
   2bec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2beca:	2302      	movs	r3, #2
   2becc:	e7e9      	b.n	2bea2 <write_cb+0x1e>
	data->err = 0U;
   2bece:	2300      	movs	r3, #0
   2bed0:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2bed2:	2501      	movs	r5, #1
   2bed4:	e7f6      	b.n	2bec4 <write_cb+0x40>
		return BT_GATT_ITER_STOP;
   2bed6:	2500      	movs	r5, #0
   2bed8:	e7f4      	b.n	2bec4 <write_cb+0x40>

0002beda <bt_att_chan_send_rsp>:
{
   2beda:	b538      	push	{r3, r4, r5, lr}
   2bedc:	4604      	mov	r4, r0
   2bede:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   2bee0:	f7ff ff0b 	bl	2bcfa <bt_att_chan_send>
	if (err) {
   2bee4:	b900      	cbnz	r0, 2bee8 <bt_att_chan_send_rsp+0xe>
}
   2bee6:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2bee8:	4629      	mov	r1, r5
   2beea:	f504 7080 	add.w	r0, r4, #256	; 0x100
   2beee:	f7f1 f8c1 	bl	1d074 <net_buf_put>
}
   2bef2:	e7f8      	b.n	2bee6 <bt_att_chan_send_rsp+0xc>

0002bef4 <att_chan_read>:
{
   2bef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bef8:	b085      	sub	sp, #20
   2befa:	4680      	mov	r8, r0
   2befc:	4689      	mov	r9, r1
   2befe:	9202      	str	r2, [sp, #8]
   2bf00:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2bf02:	6881      	ldr	r1, [r0, #8]
   2bf04:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2bf06:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   2bf0a:	4613      	mov	r3, r2
	size_t bytes = 0;
   2bf0c:	2200      	movs	r2, #0
	while (buf) {
   2bf0e:	b11b      	cbz	r3, 2bf18 <att_chan_read+0x24>
		bytes += buf->len;
   2bf10:	8999      	ldrh	r1, [r3, #12]
   2bf12:	440a      	add	r2, r1
		buf = buf->frags;
   2bf14:	681b      	ldr	r3, [r3, #0]
   2bf16:	e7fa      	b.n	2bf0e <att_chan_read+0x1a>
   2bf18:	4290      	cmp	r0, r2
   2bf1a:	d804      	bhi.n	2bf26 <att_chan_read+0x32>
		return 0;
   2bf1c:	2400      	movs	r4, #0
}
   2bf1e:	4620      	mov	r0, r4
   2bf20:	b005      	add	sp, #20
   2bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2bf26:	9802      	ldr	r0, [sp, #8]
   2bf28:	f7f1 f928 	bl	1d17c <net_buf_frag_last>
   2bf2c:	4607      	mov	r7, r0
	size_t len, total = 0;
   2bf2e:	f04f 0a00 	mov.w	sl, #0
   2bf32:	e083      	b.n	2c03c <att_chan_read+0x148>
		bytes += buf->len;
   2bf34:	8999      	ldrh	r1, [r3, #12]
   2bf36:	440a      	add	r2, r1
		buf = buf->frags;
   2bf38:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2bf3a:	2b00      	cmp	r3, #0
   2bf3c:	d1fa      	bne.n	2bf34 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2bf3e:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2bf40:	f107 0608 	add.w	r6, r7, #8
   2bf44:	4630      	mov	r0, r6
   2bf46:	f001 fdb9 	bl	2dabc <net_buf_simple_tailroom>
   2bf4a:	4284      	cmp	r4, r0
   2bf4c:	d32c      	bcc.n	2bfa8 <att_chan_read+0xb4>
   2bf4e:	4630      	mov	r0, r6
   2bf50:	f001 fdb4 	bl	2dabc <net_buf_simple_tailroom>
   2bf54:	4606      	mov	r6, r0
		if (!len) {
   2bf56:	2e00      	cmp	r6, #0
   2bf58:	d032      	beq.n	2bfc0 <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2bf5a:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2bf5e:	68b9      	ldr	r1, [r7, #8]
   2bf60:	89ba      	ldrh	r2, [r7, #12]
   2bf62:	9500      	str	r5, [sp, #0]
   2bf64:	b2b3      	uxth	r3, r6
   2bf66:	440a      	add	r2, r1
   2bf68:	4649      	mov	r1, r9
   2bf6a:	9803      	ldr	r0, [sp, #12]
   2bf6c:	47a0      	blx	r4
		if (read < 0) {
   2bf6e:	1e04      	subs	r4, r0, #0
   2bf70:	db5a      	blt.n	2c028 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   2bf72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bf74:	b12b      	cbz	r3, 2bf82 <att_chan_read+0x8e>
   2bf76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bf78:	4621      	mov	r1, r4
   2bf7a:	4638      	mov	r0, r7
   2bf7c:	4798      	blx	r3
   2bf7e:	2800      	cmp	r0, #0
   2bf80:	d061      	beq.n	2c046 <att_chan_read+0x152>
		net_buf_add(frag, read);
   2bf82:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2bf84:	4621      	mov	r1, r4
   2bf86:	f107 0008 	add.w	r0, r7, #8
   2bf8a:	f7f1 f9bd 	bl	1d308 <net_buf_simple_add>
		total += read;
   2bf8e:	44a2      	add	sl, r4
		offset += read;
   2bf90:	4425      	add	r5, r4
   2bf92:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2bf94:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   2bf98:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2bf9a:	2200      	movs	r2, #0
	while (buf) {
   2bf9c:	2b00      	cmp	r3, #0
   2bf9e:	d049      	beq.n	2c034 <att_chan_read+0x140>
		bytes += buf->len;
   2bfa0:	8999      	ldrh	r1, [r3, #12]
   2bfa2:	440a      	add	r2, r1
		buf = buf->frags;
   2bfa4:	681b      	ldr	r3, [r3, #0]
   2bfa6:	e7f9      	b.n	2bf9c <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2bfa8:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   2bfac:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2bfae:	2200      	movs	r2, #0
	while (buf) {
   2bfb0:	e002      	b.n	2bfb8 <att_chan_read+0xc4>
		bytes += buf->len;
   2bfb2:	8999      	ldrh	r1, [r3, #12]
   2bfb4:	440a      	add	r2, r1
		buf = buf->frags;
   2bfb6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2bfb8:	2b00      	cmp	r3, #0
   2bfba:	d1fa      	bne.n	2bfb2 <att_chan_read+0xbe>
   2bfbc:	1ab6      	subs	r6, r6, r2
   2bfbe:	e7ca      	b.n	2bf56 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2bfc0:	9b02      	ldr	r3, [sp, #8]
   2bfc2:	7998      	ldrb	r0, [r3, #6]
   2bfc4:	f7f0 ff1e 	bl	1ce04 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2bfc8:	2200      	movs	r2, #0
   2bfca:	2300      	movs	r3, #0
   2bfcc:	f001 fd63 	bl	2da96 <net_buf_alloc_fixed>
			if (!frag) {
   2bfd0:	4607      	mov	r7, r0
   2bfd2:	b150      	cbz	r0, 2bfea <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   2bfd4:	4601      	mov	r1, r0
   2bfd6:	f8dd b008 	ldr.w	fp, [sp, #8]
   2bfda:	4658      	mov	r0, fp
   2bfdc:	f7f1 f914 	bl	1d208 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2bfe0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   2bfe4:	4632      	mov	r2, r6
	while (buf) {
   2bfe6:	465b      	mov	r3, fp
   2bfe8:	e004      	b.n	2bff4 <att_chan_read+0x100>
				return total;
   2bfea:	4654      	mov	r4, sl
   2bfec:	e797      	b.n	2bf1e <att_chan_read+0x2a>
		bytes += buf->len;
   2bfee:	8999      	ldrh	r1, [r3, #12]
   2bff0:	440a      	add	r2, r1
		buf = buf->frags;
   2bff2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2bff4:	2b00      	cmp	r3, #0
   2bff6:	d1fa      	bne.n	2bfee <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2bff8:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2bffa:	f107 0b08 	add.w	fp, r7, #8
   2bffe:	4658      	mov	r0, fp
   2c000:	f001 fd5c 	bl	2dabc <net_buf_simple_tailroom>
   2c004:	4284      	cmp	r4, r0
   2c006:	d304      	bcc.n	2c012 <att_chan_read+0x11e>
   2c008:	4658      	mov	r0, fp
   2c00a:	f001 fd57 	bl	2dabc <net_buf_simple_tailroom>
   2c00e:	4606      	mov	r6, r0
   2c010:	e7a3      	b.n	2bf5a <att_chan_read+0x66>
   2c012:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   2c016:	9b02      	ldr	r3, [sp, #8]
   2c018:	e002      	b.n	2c020 <att_chan_read+0x12c>
		bytes += buf->len;
   2c01a:	899a      	ldrh	r2, [r3, #12]
   2c01c:	4416      	add	r6, r2
		buf = buf->frags;
   2c01e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2c020:	2b00      	cmp	r3, #0
   2c022:	d1fa      	bne.n	2c01a <att_chan_read+0x126>
   2c024:	1b8e      	subs	r6, r1, r6
   2c026:	e798      	b.n	2bf5a <att_chan_read+0x66>
			if (total) {
   2c028:	f1ba 0f00 	cmp.w	sl, #0
   2c02c:	f43f af77 	beq.w	2bf1e <att_chan_read+0x2a>
				return total;
   2c030:	4654      	mov	r4, sl
   2c032:	e774      	b.n	2bf1e <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c034:	4290      	cmp	r0, r2
   2c036:	d906      	bls.n	2c046 <att_chan_read+0x152>
   2c038:	45b3      	cmp	fp, r6
   2c03a:	d104      	bne.n	2c046 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c03c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2c040:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2c042:	2200      	movs	r2, #0
	while (buf) {
   2c044:	e779      	b.n	2bf3a <att_chan_read+0x46>
	return total;
   2c046:	4654      	mov	r4, sl
   2c048:	e769      	b.n	2bf1e <att_chan_read+0x2a>

0002c04a <read_cb>:
{
   2c04a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c04c:	b083      	sub	sp, #12
   2c04e:	4606      	mov	r6, r0
   2c050:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c052:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2c054:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   2c056:	2300      	movs	r3, #0
   2c058:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c05a:	2215      	movs	r2, #21
   2c05c:	4631      	mov	r1, r6
   2c05e:	f000 fda3 	bl	2cba8 <bt_gatt_check_perm>
   2c062:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2c064:	b118      	cbz	r0, 2c06e <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2c066:	2500      	movs	r5, #0
}
   2c068:	4628      	mov	r0, r5
   2c06a:	b003      	add	sp, #12
   2c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c06e:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2c070:	2300      	movs	r3, #0
   2c072:	9301      	str	r3, [sp, #4]
   2c074:	9300      	str	r3, [sp, #0]
   2c076:	88a3      	ldrh	r3, [r4, #4]
   2c078:	68a2      	ldr	r2, [r4, #8]
   2c07a:	4631      	mov	r1, r6
   2c07c:	4638      	mov	r0, r7
   2c07e:	f7ff ff39 	bl	2bef4 <att_chan_read>
	if (ret < 0) {
   2c082:	2800      	cmp	r0, #0
   2c084:	db01      	blt.n	2c08a <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2c086:	2501      	movs	r5, #1
   2c088:	e7ee      	b.n	2c068 <read_cb+0x1e>
		data->err = err_to_att(ret);
   2c08a:	f7ff fce8 	bl	2ba5e <err_to_att>
   2c08e:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2c090:	e7ea      	b.n	2c068 <read_cb+0x1e>

0002c092 <find_info_cb>:
{
   2c092:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c096:	4606      	mov	r6, r0
   2c098:	460f      	mov	r7, r1
   2c09a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c09c:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2c0a0:	6893      	ldr	r3, [r2, #8]
   2c0a2:	b14b      	cbz	r3, 2c0b8 <find_info_cb+0x26>
	switch (data->rsp->format) {
   2c0a4:	68a3      	ldr	r3, [r4, #8]
   2c0a6:	781d      	ldrb	r5, [r3, #0]
   2c0a8:	2d01      	cmp	r5, #1
   2c0aa:	d013      	beq.n	2c0d4 <find_info_cb+0x42>
   2c0ac:	2d02      	cmp	r5, #2
   2c0ae:	d02d      	beq.n	2c10c <find_info_cb+0x7a>
   2c0b0:	2500      	movs	r5, #0
}
   2c0b2:	4628      	mov	r0, r5
   2c0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2c0b8:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   2c0ba:	2101      	movs	r1, #1
   2c0bc:	3008      	adds	r0, #8
   2c0be:	f7f1 f923 	bl	1d308 <net_buf_simple_add>
   2c0c2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2c0c4:	6833      	ldr	r3, [r6, #0]
   2c0c6:	781b      	ldrb	r3, [r3, #0]
   2c0c8:	b913      	cbnz	r3, 2c0d0 <find_info_cb+0x3e>
   2c0ca:	2301      	movs	r3, #1
   2c0cc:	7003      	strb	r3, [r0, #0]
   2c0ce:	e7e9      	b.n	2c0a4 <find_info_cb+0x12>
   2c0d0:	2302      	movs	r3, #2
   2c0d2:	e7fb      	b.n	2c0cc <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2c0d4:	6833      	ldr	r3, [r6, #0]
   2c0d6:	f893 9000 	ldrb.w	r9, [r3]
   2c0da:	f1b9 0f00 	cmp.w	r9, #0
   2c0de:	d001      	beq.n	2c0e4 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2c0e0:	2500      	movs	r5, #0
   2c0e2:	e7e6      	b.n	2c0b2 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2c0e4:	6860      	ldr	r0, [r4, #4]
   2c0e6:	2104      	movs	r1, #4
   2c0e8:	3008      	adds	r0, #8
   2c0ea:	f7f1 f90d 	bl	1d308 <net_buf_simple_add>
   2c0ee:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2c0f0:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2c0f2:	6832      	ldr	r2, [r6, #0]
   2c0f4:	68e3      	ldr	r3, [r4, #12]
   2c0f6:	8852      	ldrh	r2, [r2, #2]
   2c0f8:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2c0fa:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2c0fe:	6862      	ldr	r2, [r4, #4]
   2c100:	8992      	ldrh	r2, [r2, #12]
   2c102:	1a9b      	subs	r3, r3, r2
   2c104:	2b04      	cmp	r3, #4
   2c106:	d8d4      	bhi.n	2c0b2 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2c108:	464d      	mov	r5, r9
   2c10a:	e7d2      	b.n	2c0b2 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2c10c:	6833      	ldr	r3, [r6, #0]
   2c10e:	781b      	ldrb	r3, [r3, #0]
   2c110:	2b02      	cmp	r3, #2
   2c112:	d001      	beq.n	2c118 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2c114:	2500      	movs	r5, #0
   2c116:	e7cc      	b.n	2c0b2 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2c118:	6860      	ldr	r0, [r4, #4]
   2c11a:	2112      	movs	r1, #18
   2c11c:	3008      	adds	r0, #8
   2c11e:	f7f1 f8f3 	bl	1d308 <net_buf_simple_add>
   2c122:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2c124:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2c126:	68e0      	ldr	r0, [r4, #12]
   2c128:	6831      	ldr	r1, [r6, #0]
   2c12a:	2210      	movs	r2, #16
   2c12c:	3101      	adds	r1, #1
   2c12e:	3002      	adds	r0, #2
   2c130:	f7fe fbb5 	bl	2a89e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2c134:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2c138:	6862      	ldr	r2, [r4, #4]
   2c13a:	8992      	ldrh	r2, [r2, #12]
   2c13c:	1a9b      	subs	r3, r3, r2
   2c13e:	2b12      	cmp	r3, #18
   2c140:	d801      	bhi.n	2c146 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   2c142:	2500      	movs	r5, #0
   2c144:	e7b5      	b.n	2c0b2 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2c146:	2501      	movs	r5, #1
   2c148:	e7b3      	b.n	2c0b2 <find_info_cb+0x20>

0002c14a <att_chan_mtu_updated>:
{
   2c14a:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   2c14c:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2c14e:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c150:	b15c      	cbz	r4, 2c16a <att_chan_mtu_updated+0x20>
   2c152:	f5b4 74aa 	subs.w	r4, r4, #340	; 0x154
   2c156:	d00c      	beq.n	2c172 <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c158:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   2c15c:	d006      	beq.n	2c16c <att_chan_mtu_updated+0x22>
	return node->next;
   2c15e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   2c162:	b11b      	cbz	r3, 2c16c <att_chan_mtu_updated+0x22>
   2c164:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   2c168:	e000      	b.n	2c16c <att_chan_mtu_updated+0x22>
   2c16a:	4623      	mov	r3, r4
   2c16c:	2200      	movs	r2, #0
   2c16e:	4611      	mov	r1, r2
   2c170:	e004      	b.n	2c17c <att_chan_mtu_updated+0x32>
   2c172:	4623      	mov	r3, r4
   2c174:	e7fa      	b.n	2c16c <att_chan_mtu_updated+0x22>
   2c176:	461d      	mov	r5, r3
   2c178:	461c      	mov	r4, r3
   2c17a:	462b      	mov	r3, r5
   2c17c:	b1bc      	cbz	r4, 2c1ae <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   2c17e:	4284      	cmp	r4, r0
   2c180:	d009      	beq.n	2c196 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c182:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   2c186:	42a9      	cmp	r1, r5
   2c188:	bf38      	it	cc
   2c18a:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c18c:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   2c190:	42a2      	cmp	r2, r4
   2c192:	bf38      	it	cc
   2c194:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c196:	2b00      	cmp	r3, #0
   2c198:	d0ed      	beq.n	2c176 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c19a:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   2c19e:	d0eb      	beq.n	2c178 <att_chan_mtu_updated+0x2e>
	return node->next;
   2c1a0:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   2c1a4:	2d00      	cmp	r5, #0
   2c1a6:	d0e7      	beq.n	2c178 <att_chan_mtu_updated+0x2e>
   2c1a8:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
   2c1ac:	e7e4      	b.n	2c178 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c1ae:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2c1b2:	428b      	cmp	r3, r1
   2c1b4:	d803      	bhi.n	2c1be <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2c1b6:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c1ba:	4294      	cmp	r4, r2
   2c1bc:	d90a      	bls.n	2c1d4 <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2c1be:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c1c2:	4282      	cmp	r2, r0
   2c1c4:	bf38      	it	cc
   2c1c6:	4602      	movcc	r2, r0
   2c1c8:	4299      	cmp	r1, r3
   2c1ca:	bf38      	it	cc
   2c1cc:	4619      	movcc	r1, r3
   2c1ce:	6830      	ldr	r0, [r6, #0]
   2c1d0:	f7ee fb20 	bl	1a814 <bt_gatt_att_max_mtu_changed>
}
   2c1d4:	bd70      	pop	{r4, r5, r6, pc}

0002c1d6 <att_write_cmd>:
{
   2c1d6:	b530      	push	{r4, r5, lr}
   2c1d8:	b085      	sub	sp, #20
   2c1da:	4605      	mov	r5, r0
   2c1dc:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2c1de:	f101 0008 	add.w	r0, r1, #8
   2c1e2:	f001 fc5f 	bl	2daa4 <net_buf_simple_pull_le16>
   2c1e6:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2c1e8:	68a2      	ldr	r2, [r4, #8]
   2c1ea:	89a1      	ldrh	r1, [r4, #12]
   2c1ec:	9102      	str	r1, [sp, #8]
   2c1ee:	9201      	str	r2, [sp, #4]
   2c1f0:	2100      	movs	r1, #0
   2c1f2:	9100      	str	r1, [sp, #0]
   2c1f4:	460a      	mov	r2, r1
   2c1f6:	4628      	mov	r0, r5
   2c1f8:	f7ec fc8e 	bl	18b18 <att_write_rsp>
}
   2c1fc:	b005      	add	sp, #20
   2c1fe:	bd30      	pop	{r4, r5, pc}

0002c200 <att_write_req>:
{
   2c200:	b530      	push	{r4, r5, lr}
   2c202:	b085      	sub	sp, #20
   2c204:	4605      	mov	r5, r0
   2c206:	460c      	mov	r4, r1
   2c208:	f101 0008 	add.w	r0, r1, #8
   2c20c:	f001 fc4a 	bl	2daa4 <net_buf_simple_pull_le16>
   2c210:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2c212:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2c214:	89a1      	ldrh	r1, [r4, #12]
   2c216:	9102      	str	r1, [sp, #8]
   2c218:	9201      	str	r2, [sp, #4]
   2c21a:	2200      	movs	r2, #0
   2c21c:	9200      	str	r2, [sp, #0]
   2c21e:	2213      	movs	r2, #19
   2c220:	2112      	movs	r1, #18
   2c222:	4628      	mov	r0, r5
   2c224:	f7ec fc78 	bl	18b18 <att_write_rsp>
}
   2c228:	b005      	add	sp, #20
   2c22a:	bd30      	pop	{r4, r5, pc}

0002c22c <att_req_retry>:
{
   2c22c:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_req *req = att_chan->req;
   2c22e:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
	if (!req->encode) {
   2c232:	68e3      	ldr	r3, [r4, #12]
   2c234:	b1eb      	cbz	r3, 2c272 <att_req_retry+0x46>
   2c236:	4605      	mov	r5, r0
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2c238:	6962      	ldr	r2, [r4, #20]
   2c23a:	7c61      	ldrb	r1, [r4, #17]
   2c23c:	f7ec fb7e 	bl	1893c <bt_att_chan_create_pdu>
	if (!buf) {
   2c240:	4606      	mov	r6, r0
   2c242:	b1c0      	cbz	r0, 2c276 <att_req_retry+0x4a>
	if (req->encode(buf, req->len, req->user_data)) {
   2c244:	68e3      	ldr	r3, [r4, #12]
   2c246:	69a2      	ldr	r2, [r4, #24]
   2c248:	6961      	ldr	r1, [r4, #20]
   2c24a:	4798      	blx	r3
   2c24c:	b938      	cbnz	r0, 2c25e <att_req_retry+0x32>
	if (chan_send(att_chan, buf, NULL)) {
   2c24e:	2200      	movs	r2, #0
   2c250:	4631      	mov	r1, r6
   2c252:	4628      	mov	r0, r5
   2c254:	f7ec f942 	bl	184dc <chan_send>
   2c258:	b930      	cbnz	r0, 2c268 <att_req_retry+0x3c>
	return BT_ATT_ERR_SUCCESS;
   2c25a:	2000      	movs	r0, #0
}
   2c25c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2c25e:	4630      	mov	r0, r6
   2c260:	f7f0 ff3a 	bl	1d0d8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2c264:	200e      	movs	r0, #14
   2c266:	e7f9      	b.n	2c25c <att_req_retry+0x30>
		net_buf_unref(buf);
   2c268:	4630      	mov	r0, r6
   2c26a:	f7f0 ff35 	bl	1d0d8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2c26e:	200e      	movs	r0, #14
   2c270:	e7f4      	b.n	2c25c <att_req_retry+0x30>
		return BT_ATT_ERR_AUTHENTICATION;
   2c272:	2005      	movs	r0, #5
   2c274:	e7f2      	b.n	2c25c <att_req_retry+0x30>
		return BT_ATT_ERR_UNLIKELY;
   2c276:	200e      	movs	r0, #14
   2c278:	e7f0      	b.n	2c25c <att_req_retry+0x30>

0002c27a <att_read_group_req>:
{
   2c27a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c27c:	b089      	sub	sp, #36	; 0x24
   2c27e:	4605      	mov	r5, r0
   2c280:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2c282:	7b0c      	ldrb	r4, [r1, #12]
   2c284:	3c04      	subs	r4, #4
   2c286:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2c288:	2c02      	cmp	r4, #2
   2c28a:	d001      	beq.n	2c290 <att_read_group_req+0x16>
   2c28c:	2c10      	cmp	r4, #16
   2c28e:	d142      	bne.n	2c316 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2c290:	2104      	movs	r1, #4
   2c292:	3008      	adds	r0, #8
   2c294:	f7f0 fff8 	bl	1d288 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c298:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c29a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2c29c:	4622      	mov	r2, r4
   2c29e:	1d01      	adds	r1, r0, #4
   2c2a0:	a801      	add	r0, sp, #4
   2c2a2:	f7fe fc52 	bl	2ab4a <bt_uuid_create>
   2c2a6:	b3c8      	cbz	r0, 2c31c <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2c2a8:	f10d 0216 	add.w	r2, sp, #22
   2c2ac:	4639      	mov	r1, r7
   2c2ae:	4630      	mov	r0, r6
   2c2b0:	f7ff fbc6 	bl	2ba40 <range_is_valid>
   2c2b4:	b1f0      	cbz	r0, 2c2f4 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2c2b6:	2300      	movs	r3, #0
   2c2b8:	f88d 3018 	strb.w	r3, [sp, #24]
   2c2bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2c2c0:	f8ad 301a 	strh.w	r3, [sp, #26]
   2c2c4:	a906      	add	r1, sp, #24
   2c2c6:	a801      	add	r0, sp, #4
   2c2c8:	f7fe fc21 	bl	2ab0e <bt_uuid_cmp>
   2c2cc:	b158      	cbz	r0, 2c2e6 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2c2ce:	2300      	movs	r3, #0
   2c2d0:	f88d 301c 	strb.w	r3, [sp, #28]
   2c2d4:	f642 0301 	movw	r3, #10241	; 0x2801
   2c2d8:	f8ad 301e 	strh.w	r3, [sp, #30]
   2c2dc:	a907      	add	r1, sp, #28
   2c2de:	a801      	add	r0, sp, #4
   2c2e0:	f7fe fc15 	bl	2ab0e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2c2e4:	b978      	cbnz	r0, 2c306 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   2c2e6:	463b      	mov	r3, r7
   2c2e8:	4632      	mov	r2, r6
   2c2ea:	a901      	add	r1, sp, #4
   2c2ec:	4628      	mov	r0, r5
   2c2ee:	f7ec fcb9 	bl	18c64 <att_read_group_rsp>
   2c2f2:	e011      	b.n	2c318 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2c2f4:	2301      	movs	r3, #1
   2c2f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2c2fa:	2110      	movs	r1, #16
   2c2fc:	4628      	mov	r0, r5
   2c2fe:	f7ec fb57 	bl	189b0 <send_err_rsp>
		return 0;
   2c302:	2000      	movs	r0, #0
   2c304:	e008      	b.n	2c318 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2c306:	2310      	movs	r3, #16
   2c308:	4632      	mov	r2, r6
   2c30a:	4619      	mov	r1, r3
   2c30c:	4628      	mov	r0, r5
   2c30e:	f7ec fb4f 	bl	189b0 <send_err_rsp>
		return 0;
   2c312:	2000      	movs	r0, #0
   2c314:	e000      	b.n	2c318 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2c316:	2004      	movs	r0, #4
}
   2c318:	b009      	add	sp, #36	; 0x24
   2c31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2c31c:	200e      	movs	r0, #14
   2c31e:	e7fb      	b.n	2c318 <att_read_group_req+0x9e>

0002c320 <att_read_blob_req>:
{
   2c320:	b500      	push	{lr}
   2c322:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2c324:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2c326:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2c328:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2c32a:	9200      	str	r2, [sp, #0]
   2c32c:	220d      	movs	r2, #13
   2c32e:	210c      	movs	r1, #12
   2c330:	f7ec fd2e 	bl	18d90 <att_read_rsp>
}
   2c334:	b003      	add	sp, #12
   2c336:	f85d fb04 	ldr.w	pc, [sp], #4

0002c33a <att_read_req>:
{
   2c33a:	b500      	push	{lr}
   2c33c:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2c33e:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2c340:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2c342:	2200      	movs	r2, #0
   2c344:	9200      	str	r2, [sp, #0]
   2c346:	220b      	movs	r2, #11
   2c348:	210a      	movs	r1, #10
   2c34a:	f7ec fd21 	bl	18d90 <att_read_rsp>
}
   2c34e:	b003      	add	sp, #12
   2c350:	f85d fb04 	ldr.w	pc, [sp], #4

0002c354 <att_read_type_req>:
{
   2c354:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c356:	b087      	sub	sp, #28
   2c358:	4605      	mov	r5, r0
   2c35a:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2c35c:	7b0c      	ldrb	r4, [r1, #12]
   2c35e:	3c04      	subs	r4, #4
   2c360:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2c362:	2c02      	cmp	r4, #2
   2c364:	d001      	beq.n	2c36a <att_read_type_req+0x16>
   2c366:	2c10      	cmp	r4, #16
   2c368:	d123      	bne.n	2c3b2 <att_read_type_req+0x5e>
   2c36a:	2104      	movs	r1, #4
   2c36c:	3008      	adds	r0, #8
   2c36e:	f7f0 ff8b 	bl	1d288 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c372:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c374:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2c376:	4622      	mov	r2, r4
   2c378:	1d01      	adds	r1, r0, #4
   2c37a:	a801      	add	r0, sp, #4
   2c37c:	f7fe fbe5 	bl	2ab4a <bt_uuid_create>
   2c380:	b1c8      	cbz	r0, 2c3b6 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2c382:	f10d 0216 	add.w	r2, sp, #22
   2c386:	4639      	mov	r1, r7
   2c388:	4630      	mov	r0, r6
   2c38a:	f7ff fb59 	bl	2ba40 <range_is_valid>
   2c38e:	b138      	cbz	r0, 2c3a0 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2c390:	463b      	mov	r3, r7
   2c392:	4632      	mov	r2, r6
   2c394:	a901      	add	r1, sp, #4
   2c396:	4628      	mov	r0, r5
   2c398:	f7ec fd4c 	bl	18e34 <att_read_type_rsp>
}
   2c39c:	b007      	add	sp, #28
   2c39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2c3a0:	2301      	movs	r3, #1
   2c3a2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2c3a6:	2108      	movs	r1, #8
   2c3a8:	4628      	mov	r0, r5
   2c3aa:	f7ec fb01 	bl	189b0 <send_err_rsp>
		return 0;
   2c3ae:	2000      	movs	r0, #0
   2c3b0:	e7f4      	b.n	2c39c <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   2c3b2:	2004      	movs	r0, #4
   2c3b4:	e7f2      	b.n	2c39c <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   2c3b6:	200e      	movs	r0, #14
   2c3b8:	e7f0      	b.n	2c39c <att_read_type_req+0x48>

0002c3ba <att_find_type_req>:
{
   2c3ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c3be:	b087      	sub	sp, #28
   2c3c0:	4607      	mov	r7, r0
   2c3c2:	460c      	mov	r4, r1
   2c3c4:	2106      	movs	r1, #6
   2c3c6:	f104 0008 	add.w	r0, r4, #8
   2c3ca:	f7f0 ff5d 	bl	1d288 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c3ce:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c3d0:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2c3d2:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   2c3d6:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2c3da:	f10d 020e 	add.w	r2, sp, #14
   2c3de:	4631      	mov	r1, r6
   2c3e0:	4628      	mov	r0, r5
   2c3e2:	f7ff fb2d 	bl	2ba40 <range_is_valid>
   2c3e6:	b1d0      	cbz	r0, 2c41e <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2c3e8:	2300      	movs	r3, #0
   2c3ea:	f88d 3010 	strb.w	r3, [sp, #16]
   2c3ee:	f8ad 8012 	strh.w	r8, [sp, #18]
   2c3f2:	f88d 3014 	strb.w	r3, [sp, #20]
   2c3f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2c3fa:	f8ad 3016 	strh.w	r3, [sp, #22]
   2c3fe:	a905      	add	r1, sp, #20
   2c400:	a804      	add	r0, sp, #16
   2c402:	f7fe fb84 	bl	2ab0e <bt_uuid_cmp>
   2c406:	b998      	cbnz	r0, 2c430 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2c408:	7b23      	ldrb	r3, [r4, #12]
   2c40a:	9300      	str	r3, [sp, #0]
   2c40c:	464b      	mov	r3, r9
   2c40e:	4632      	mov	r2, r6
   2c410:	4629      	mov	r1, r5
   2c412:	4638      	mov	r0, r7
   2c414:	f7ec fd58 	bl	18ec8 <att_find_type_rsp>
}
   2c418:	b007      	add	sp, #28
   2c41a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2c41e:	2301      	movs	r3, #1
   2c420:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2c424:	2106      	movs	r1, #6
   2c426:	4638      	mov	r0, r7
   2c428:	f7ec fac2 	bl	189b0 <send_err_rsp>
		return 0;
   2c42c:	2000      	movs	r0, #0
   2c42e:	e7f3      	b.n	2c418 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2c430:	230a      	movs	r3, #10
   2c432:	462a      	mov	r2, r5
   2c434:	2106      	movs	r1, #6
   2c436:	4638      	mov	r0, r7
   2c438:	f7ec faba 	bl	189b0 <send_err_rsp>
		return 0;
   2c43c:	2000      	movs	r0, #0
   2c43e:	e7eb      	b.n	2c418 <att_find_type_req+0x5e>

0002c440 <att_find_info_req>:
{
   2c440:	b570      	push	{r4, r5, r6, lr}
   2c442:	b082      	sub	sp, #8
   2c444:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2c446:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c448:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c44a:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2c44c:	f10d 0206 	add.w	r2, sp, #6
   2c450:	4631      	mov	r1, r6
   2c452:	4628      	mov	r0, r5
   2c454:	f7ff faf4 	bl	2ba40 <range_is_valid>
   2c458:	b130      	cbz	r0, 2c468 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2c45a:	4632      	mov	r2, r6
   2c45c:	4629      	mov	r1, r5
   2c45e:	4620      	mov	r0, r4
   2c460:	f7ec fd7c 	bl	18f5c <att_find_info_rsp>
}
   2c464:	b002      	add	sp, #8
   2c466:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2c468:	2301      	movs	r3, #1
   2c46a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2c46e:	2104      	movs	r1, #4
   2c470:	4620      	mov	r0, r4
   2c472:	f7ec fa9d 	bl	189b0 <send_err_rsp>
		return 0;
   2c476:	2000      	movs	r0, #0
   2c478:	e7f4      	b.n	2c464 <att_find_info_req+0x24>

0002c47a <bt_att_init>:
{
   2c47a:	b508      	push	{r3, lr}
	bt_gatt_init();
   2c47c:	f7ed fbf8 	bl	19c70 <bt_gatt_init>
}
   2c480:	bd08      	pop	{r3, pc}

0002c482 <att_confirm>:
{
   2c482:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2c484:	2300      	movs	r3, #0
   2c486:	898a      	ldrh	r2, [r1, #12]
   2c488:	6889      	ldr	r1, [r1, #8]
   2c48a:	f7ec fe05 	bl	19098 <att_handle_rsp>
}
   2c48e:	bd08      	pop	{r3, pc}

0002c490 <bt_att_encrypt_change>:
{
   2c490:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2c492:	4605      	mov	r5, r0
	struct bt_conn *conn = ch->chan.conn;
   2c494:	f855 6908 	ldr.w	r6, [r5], #-8
	if (!att_chan->att) {
   2c498:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2c49c:	b143      	cbz	r3, 2c4b0 <bt_att_encrypt_change+0x20>
   2c49e:	4604      	mov	r4, r0
	if (hci_status) {
   2c4a0:	b171      	cbz	r1, 2c4c0 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2c4a2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2c4a6:	b11b      	cbz	r3, 2c4b0 <bt_att_encrypt_change+0x20>
   2c4a8:	7c1b      	ldrb	r3, [r3, #16]
   2c4aa:	f013 0f01 	tst.w	r3, #1
   2c4ae:	d100      	bne.n	2c4b2 <bt_att_encrypt_change+0x22>
}
   2c4b0:	bd70      	pop	{r4, r5, r6, pc}
			att_handle_rsp(att_chan, NULL, 0,
   2c4b2:	2305      	movs	r3, #5
   2c4b4:	2200      	movs	r2, #0
   2c4b6:	4611      	mov	r1, r2
   2c4b8:	4628      	mov	r0, r5
   2c4ba:	f7ec fded 	bl	19098 <att_handle_rsp>
		return;
   2c4be:	e7f7      	b.n	2c4b0 <bt_att_encrypt_change+0x20>
	bt_gatt_encrypt_change(conn);
   2c4c0:	4630      	mov	r0, r6
   2c4c2:	f7ee f9c3 	bl	1a84c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2c4c6:	7a73      	ldrb	r3, [r6, #9]
   2c4c8:	2b01      	cmp	r3, #1
   2c4ca:	d0f1      	beq.n	2c4b0 <bt_att_encrypt_change+0x20>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2c4cc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   2c4d0:	2b00      	cmp	r3, #0
   2c4d2:	d0ed      	beq.n	2c4b0 <bt_att_encrypt_change+0x20>
   2c4d4:	7c1b      	ldrb	r3, [r3, #16]
   2c4d6:	f013 0f01 	tst.w	r3, #1
   2c4da:	d0e9      	beq.n	2c4b0 <bt_att_encrypt_change+0x20>
	err = att_req_retry(att_chan);
   2c4dc:	4628      	mov	r0, r5
   2c4de:	f7ff fea5 	bl	2c22c <att_req_retry>
	if (err) {
   2c4e2:	4603      	mov	r3, r0
   2c4e4:	2800      	cmp	r0, #0
   2c4e6:	d0e3      	beq.n	2c4b0 <bt_att_encrypt_change+0x20>
		att_handle_rsp(att_chan, NULL, 0, err);
   2c4e8:	2200      	movs	r2, #0
   2c4ea:	4611      	mov	r1, r2
   2c4ec:	4628      	mov	r0, r5
   2c4ee:	f7ec fdd3 	bl	19098 <att_handle_rsp>
   2c4f2:	e7dd      	b.n	2c4b0 <bt_att_encrypt_change+0x20>

0002c4f4 <att_chan_detach>:
{
   2c4f4:	b510      	push	{r4, lr}
   2c4f6:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2c4f8:	6800      	ldr	r0, [r0, #0]
   2c4fa:	f504 72aa 	add.w	r2, r4, #340	; 0x154
	return list->head;
   2c4fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c500:	2100      	movs	r1, #0
   2c502:	b1e3      	cbz	r3, 2c53e <att_chan_detach+0x4a>
   2c504:	4293      	cmp	r3, r2
   2c506:	d002      	beq.n	2c50e <att_chan_detach+0x1a>
   2c508:	4619      	mov	r1, r3
   2c50a:	681b      	ldr	r3, [r3, #0]
   2c50c:	e7f9      	b.n	2c502 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   2c50e:	b149      	cbz	r1, 2c524 <att_chan_detach+0x30>
	return node->next;
   2c510:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	parent->next = child;
   2c514:	600b      	str	r3, [r1, #0]
	return list->tail;
   2c516:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
Z_GENLIST_REMOVE(slist, snode)
   2c518:	4293      	cmp	r3, r2
   2c51a:	d00b      	beq.n	2c534 <att_chan_detach+0x40>
	parent->next = child;
   2c51c:	2300      	movs	r3, #0
   2c51e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c522:	e00c      	b.n	2c53e <att_chan_detach+0x4a>
	return node->next;
   2c524:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	list->head = node;
   2c528:	6283      	str	r3, [r0, #40]	; 0x28
	return list->tail;
   2c52a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
Z_GENLIST_REMOVE(slist, snode)
   2c52c:	4291      	cmp	r1, r2
   2c52e:	d1f5      	bne.n	2c51c <att_chan_detach+0x28>
	list->tail = node;
   2c530:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   2c532:	e7f3      	b.n	2c51c <att_chan_detach+0x28>
	list->tail = node;
   2c534:	62c1      	str	r1, [r0, #44]	; 0x2c
}
   2c536:	e7f1      	b.n	2c51c <att_chan_detach+0x28>
		net_buf_unref(buf);
   2c538:	4618      	mov	r0, r3
   2c53a:	f7f0 fdcd 	bl	1d0d8 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2c53e:	2200      	movs	r2, #0
   2c540:	2300      	movs	r3, #0
   2c542:	f504 7080 	add.w	r0, r4, #256	; 0x100
   2c546:	f7f0 fd3f 	bl	1cfc8 <net_buf_get>
   2c54a:	4603      	mov	r3, r0
   2c54c:	2800      	cmp	r0, #0
   2c54e:	d1f3      	bne.n	2c538 <att_chan_detach+0x44>
	if (chan->req) {
   2c550:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   2c554:	b12b      	cbz	r3, 2c562 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2c556:	230e      	movs	r3, #14
   2c558:	2200      	movs	r2, #0
   2c55a:	4611      	mov	r1, r2
   2c55c:	4620      	mov	r0, r4
   2c55e:	f7ec fd9b 	bl	19098 <att_handle_rsp>
	chan->att = NULL;
   2c562:	2300      	movs	r3, #0
   2c564:	6023      	str	r3, [r4, #0]
}
   2c566:	bd10      	pop	{r4, pc}

0002c568 <bt_att_disconnected>:
{
   2c568:	b538      	push	{r3, r4, r5, lr}
   2c56a:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2c56c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   2c570:	b125      	cbz	r5, 2c57c <bt_att_disconnected+0x14>
   2c572:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   2c574:	f7ff ffbe 	bl	2c4f4 <att_chan_detach>
	return list->head;
   2c578:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (!sys_slist_is_empty(&att->chans)) {
   2c57a:	b103      	cbz	r3, 2c57e <bt_att_disconnected+0x16>
}
   2c57c:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2c57e:	4628      	mov	r0, r5
   2c580:	f7ec fdc6 	bl	19110 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   2c584:	6820      	ldr	r0, [r4, #0]
   2c586:	f7ee f9f5 	bl	1a974 <bt_gatt_disconnected>
   2c58a:	e7f7      	b.n	2c57c <bt_att_disconnected+0x14>

0002c58c <update_range>:
{
   2c58c:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   2c58e:	8804      	ldrh	r4, [r0, #0]
   2c590:	42a2      	cmp	r2, r4
   2c592:	d302      	bcc.n	2c59a <update_range+0xe>
   2c594:	880d      	ldrh	r5, [r1, #0]
   2c596:	42ab      	cmp	r3, r5
   2c598:	d908      	bls.n	2c5ac <update_range+0x20>
	if (*start > new_start) {
   2c59a:	42a2      	cmp	r2, r4
   2c59c:	d200      	bcs.n	2c5a0 <update_range+0x14>
		*start = new_start;
   2c59e:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2c5a0:	880a      	ldrh	r2, [r1, #0]
   2c5a2:	4293      	cmp	r3, r2
   2c5a4:	d904      	bls.n	2c5b0 <update_range+0x24>
		*end = new_end;
   2c5a6:	800b      	strh	r3, [r1, #0]
	return true;
   2c5a8:	2001      	movs	r0, #1
   2c5aa:	e002      	b.n	2c5b2 <update_range+0x26>
		return false;
   2c5ac:	2000      	movs	r0, #0
   2c5ae:	e000      	b.n	2c5b2 <update_range+0x26>
	return true;
   2c5b0:	2001      	movs	r0, #1
}
   2c5b2:	bc30      	pop	{r4, r5}
   2c5b4:	4770      	bx	lr

0002c5b6 <cf_set_value>:
{
   2c5b6:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2c5b8:	2300      	movs	r3, #0
   2c5ba:	e001      	b.n	2c5c0 <cf_set_value+0xa>
   2c5bc:	3301      	adds	r3, #1
   2c5be:	b29b      	uxth	r3, r3
   2c5c0:	2b02      	cmp	r3, #2
   2c5c2:	d824      	bhi.n	2c60e <cf_set_value+0x58>
   2c5c4:	08dd      	lsrs	r5, r3, #3
   2c5c6:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2c5ca:	d90f      	bls.n	2c5ec <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2c5cc:	1944      	adds	r4, r0, r5
   2c5ce:	7a24      	ldrb	r4, [r4, #8]
   2c5d0:	f003 0607 	and.w	r6, r3, #7
   2c5d4:	40f4      	lsrs	r4, r6
   2c5d6:	f014 0f01 	tst.w	r4, #1
   2c5da:	d0ef      	beq.n	2c5bc <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2c5dc:	5d4c      	ldrb	r4, [r1, r5]
   2c5de:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2c5e2:	f016 0f01 	tst.w	r6, #1
   2c5e6:	d1e9      	bne.n	2c5bc <cf_set_value+0x6>
			return false;
   2c5e8:	2000      	movs	r0, #0
   2c5ea:	e013      	b.n	2c614 <cf_set_value+0x5e>
   2c5ec:	2300      	movs	r3, #0
   2c5ee:	e008      	b.n	2c602 <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2c5f0:	5ccc      	ldrb	r4, [r1, r3]
   2c5f2:	f004 0407 	and.w	r4, r4, #7
   2c5f6:	18c5      	adds	r5, r0, r3
   2c5f8:	7a2e      	ldrb	r6, [r5, #8]
   2c5fa:	4334      	orrs	r4, r6
   2c5fc:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2c5fe:	3301      	adds	r3, #1
   2c600:	b29b      	uxth	r3, r3
   2c602:	4293      	cmp	r3, r2
   2c604:	d205      	bcs.n	2c612 <cf_set_value+0x5c>
   2c606:	2b00      	cmp	r3, #0
   2c608:	d0f2      	beq.n	2c5f0 <cf_set_value+0x3a>
	return true;
   2c60a:	2001      	movs	r0, #1
   2c60c:	e002      	b.n	2c614 <cf_set_value+0x5e>
   2c60e:	2300      	movs	r3, #0
   2c610:	e7f7      	b.n	2c602 <cf_set_value+0x4c>
   2c612:	2001      	movs	r0, #1
}
   2c614:	bc70      	pop	{r4, r5, r6}
   2c616:	4770      	bx	lr

0002c618 <gatt_ccc_changed>:
{
   2c618:	b510      	push	{r4, lr}
   2c61a:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   2c61c:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2c61e:	460b      	mov	r3, r1
   2c620:	2b00      	cmp	r3, #0
   2c622:	dd07      	ble.n	2c634 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   2c624:	8953      	ldrh	r3, [r2, #10]
   2c626:	4299      	cmp	r1, r3
   2c628:	d003      	beq.n	2c632 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2c62a:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   2c62c:	68d3      	ldr	r3, [r2, #12]
   2c62e:	b103      	cbz	r3, 2c632 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2c630:	4798      	blx	r3
}
   2c632:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   2c634:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   2c638:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   2c63c:	8924      	ldrh	r4, [r4, #8]
   2c63e:	428c      	cmp	r4, r1
   2c640:	d900      	bls.n	2c644 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2c642:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2c644:	3301      	adds	r3, #1
   2c646:	e7eb      	b.n	2c620 <gatt_ccc_changed+0x8>

0002c648 <gatt_indicate_rsp>:
{
   2c648:	b510      	push	{r4, lr}
   2c64a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2c64c:	68a3      	ldr	r3, [r4, #8]
   2c64e:	b113      	cbz	r3, 2c656 <gatt_indicate_rsp+0xe>
   2c650:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2c652:	4621      	mov	r1, r4
   2c654:	4798      	blx	r3
	params->_ref--;
   2c656:	7da3      	ldrb	r3, [r4, #22]
   2c658:	3b01      	subs	r3, #1
   2c65a:	b2db      	uxtb	r3, r3
   2c65c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2c65e:	68e2      	ldr	r2, [r4, #12]
   2c660:	b112      	cbz	r2, 2c668 <gatt_indicate_rsp+0x20>
   2c662:	b90b      	cbnz	r3, 2c668 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2c664:	4620      	mov	r0, r4
   2c666:	4790      	blx	r2
}
   2c668:	bd10      	pop	{r4, pc}

0002c66a <match_uuid>:
	data->attr = attr;
   2c66a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2c66c:	8091      	strh	r1, [r2, #4]
}
   2c66e:	2000      	movs	r0, #0
   2c670:	4770      	bx	lr

0002c672 <ccc_set_cb>:
}
   2c672:	2000      	movs	r0, #0
   2c674:	4770      	bx	lr

0002c676 <gen_hash_m>:
{
   2c676:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c678:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2c67a:	6806      	ldr	r6, [r0, #0]
   2c67c:	7835      	ldrb	r5, [r6, #0]
   2c67e:	2d00      	cmp	r5, #0
   2c680:	d161      	bne.n	2c746 <gen_hash_m+0xd0>
   2c682:	4607      	mov	r7, r0
   2c684:	4614      	mov	r4, r2
	switch (u16->val) {
   2c686:	8873      	ldrh	r3, [r6, #2]
   2c688:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2c68c:	d019      	beq.n	2c6c2 <gen_hash_m+0x4c>
   2c68e:	d913      	bls.n	2c6b8 <gen_hash_m+0x42>
   2c690:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2c694:	33ff      	adds	r3, #255	; 0xff
   2c696:	b29b      	uxth	r3, r3
   2c698:	2b04      	cmp	r3, #4
   2c69a:	d85a      	bhi.n	2c752 <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   2c69c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c6a0:	2202      	movs	r2, #2
   2c6a2:	f10d 010e 	add.w	r1, sp, #14
   2c6a6:	4620      	mov	r0, r4
   2c6a8:	f7fd fed6 	bl	2a458 <tc_cmac_update>
   2c6ac:	2800      	cmp	r0, #0
   2c6ae:	d13a      	bne.n	2c726 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   2c6b0:	f06f 0315 	mvn.w	r3, #21
   2c6b4:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2c6b6:	e047      	b.n	2c748 <gen_hash_m+0xd2>
	switch (u16->val) {
   2c6b8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2c6bc:	b29b      	uxth	r3, r3
   2c6be:	2b03      	cmp	r3, #3
   2c6c0:	d845      	bhi.n	2c74e <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   2c6c2:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c6c6:	2202      	movs	r2, #2
   2c6c8:	f10d 010e 	add.w	r1, sp, #14
   2c6cc:	4620      	mov	r0, r4
   2c6ce:	f7fd fec3 	bl	2a458 <tc_cmac_update>
   2c6d2:	b918      	cbnz	r0, 2c6dc <gen_hash_m+0x66>
			state->err = -EINVAL;
   2c6d4:	f06f 0315 	mvn.w	r3, #21
   2c6d8:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2c6da:	e035      	b.n	2c748 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   2c6dc:	8873      	ldrh	r3, [r6, #2]
   2c6de:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c6e2:	2202      	movs	r2, #2
   2c6e4:	f10d 010e 	add.w	r1, sp, #14
   2c6e8:	4620      	mov	r0, r4
   2c6ea:	f7fd feb5 	bl	2a458 <tc_cmac_update>
   2c6ee:	b180      	cbz	r0, 2c712 <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2c6f0:	687e      	ldr	r6, [r7, #4]
   2c6f2:	2000      	movs	r0, #0
   2c6f4:	9000      	str	r0, [sp, #0]
   2c6f6:	2310      	movs	r3, #16
   2c6f8:	eb0d 0203 	add.w	r2, sp, r3
   2c6fc:	4639      	mov	r1, r7
   2c6fe:	47b0      	blx	r6
		if (len < 0) {
   2c700:	1e02      	subs	r2, r0, #0
   2c702:	db0a      	blt.n	2c71a <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   2c704:	a904      	add	r1, sp, #16
   2c706:	4620      	mov	r0, r4
   2c708:	f7fd fea6 	bl	2a458 <tc_cmac_update>
   2c70c:	b138      	cbz	r0, 2c71e <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   2c70e:	2501      	movs	r5, #1
   2c710:	e01a      	b.n	2c748 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2c712:	f06f 0315 	mvn.w	r3, #21
   2c716:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2c718:	e016      	b.n	2c748 <gen_hash_m+0xd2>
			state->err = len;
   2c71a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2c71c:	e014      	b.n	2c748 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2c71e:	f06f 0315 	mvn.w	r3, #21
   2c722:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2c724:	e010      	b.n	2c748 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   2c726:	8873      	ldrh	r3, [r6, #2]
   2c728:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c72c:	2202      	movs	r2, #2
   2c72e:	f10d 010e 	add.w	r1, sp, #14
   2c732:	4620      	mov	r0, r4
   2c734:	f7fd fe90 	bl	2a458 <tc_cmac_update>
   2c738:	b108      	cbz	r0, 2c73e <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   2c73a:	2501      	movs	r5, #1
   2c73c:	e004      	b.n	2c748 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2c73e:	f06f 0315 	mvn.w	r3, #21
   2c742:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2c744:	e000      	b.n	2c748 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   2c746:	2501      	movs	r5, #1
}
   2c748:	4628      	mov	r0, r5
   2c74a:	b009      	add	sp, #36	; 0x24
   2c74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2c74e:	2501      	movs	r5, #1
   2c750:	e7fa      	b.n	2c748 <gen_hash_m+0xd2>
   2c752:	2501      	movs	r5, #1
   2c754:	e7f8      	b.n	2c748 <gen_hash_m+0xd2>

0002c756 <sc_restore_rsp>:
{
   2c756:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2c758:	f7ec fdce 	bl	192f8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2c75c:	b188      	cbz	r0, 2c782 <sc_restore_rsp+0x2c>
   2c75e:	4603      	mov	r3, r0
   2c760:	7a02      	ldrb	r2, [r0, #8]
   2c762:	f012 0f01 	tst.w	r2, #1
   2c766:	d00c      	beq.n	2c782 <sc_restore_rsp+0x2c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2c768:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c76a:	f3bf 8f5b 	dmb	ish
   2c76e:	e853 2f00 	ldrex	r2, [r3]
   2c772:	f042 0201 	orr.w	r2, r2, #1
   2c776:	e843 2100 	strex	r1, r2, [r3]
   2c77a:	2900      	cmp	r1, #0
   2c77c:	d1f7      	bne.n	2c76e <sc_restore_rsp+0x18>
   2c77e:	f3bf 8f5b 	dmb	ish
}
   2c782:	bd08      	pop	{r3, pc}

0002c784 <find_ccc_cfg>:
{
   2c784:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c786:	b083      	sub	sp, #12
   2c788:	4607      	mov	r7, r0
   2c78a:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2c78c:	2400      	movs	r4, #0
   2c78e:	b11c      	cbz	r4, 2c798 <find_ccc_cfg+0x14>
	return NULL;
   2c790:	2600      	movs	r6, #0
}
   2c792:	4630      	mov	r0, r6
   2c794:	b003      	add	sp, #12
   2c796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2c798:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   2c79c:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   2c7a0:	b167      	cbz	r7, 2c7bc <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   2c7a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2c7a6:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2c7a8:	3201      	adds	r2, #1
   2c7aa:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   2c7ae:	4638      	mov	r0, r7
   2c7b0:	f7fe ffb4 	bl	2b71c <bt_conn_is_peer_addr_le>
   2c7b4:	2800      	cmp	r0, #0
   2c7b6:	d1ec      	bne.n	2c792 <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2c7b8:	3401      	adds	r4, #1
   2c7ba:	e7e8      	b.n	2c78e <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2c7bc:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2c7c0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   2c7c4:	2300      	movs	r3, #0
   2c7c6:	9300      	str	r3, [sp, #0]
   2c7c8:	f8cd 3003 	str.w	r3, [sp, #3]
   2c7cc:	2207      	movs	r2, #7
   2c7ce:	4669      	mov	r1, sp
   2c7d0:	3001      	adds	r0, #1
   2c7d2:	f7fe f837 	bl	2a844 <memcmp>
   2c7d6:	2800      	cmp	r0, #0
   2c7d8:	d1ee      	bne.n	2c7b8 <find_ccc_cfg+0x34>
   2c7da:	e7da      	b.n	2c792 <find_ccc_cfg+0xe>

0002c7dc <ccc_find_cfg>:
{
   2c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c7de:	4605      	mov	r5, r0
   2c7e0:	460f      	mov	r7, r1
   2c7e2:	4616      	mov	r6, r2
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2c7e4:	2400      	movs	r4, #0
   2c7e6:	b10c      	cbz	r4, 2c7ec <ccc_find_cfg+0x10>
	return NULL;
   2c7e8:	2000      	movs	r0, #0
}
   2c7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (id == ccc->cfg[i].id &&
   2c7ec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2c7f0:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
   2c7f4:	42b3      	cmp	r3, r6
   2c7f6:	d001      	beq.n	2c7fc <ccc_find_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2c7f8:	3401      	adds	r4, #1
   2c7fa:	e7f4      	b.n	2c7e6 <ccc_find_cfg+0xa>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   2c7fc:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2c800:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   2c804:	2207      	movs	r2, #7
   2c806:	4639      	mov	r1, r7
   2c808:	3001      	adds	r0, #1
   2c80a:	f7fe f81b 	bl	2a844 <memcmp>
		if (id == ccc->cfg[i].id &&
   2c80e:	2800      	cmp	r0, #0
   2c810:	d1f2      	bne.n	2c7f8 <ccc_find_cfg+0x1c>
			return &ccc->cfg[i];
   2c812:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2c816:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   2c81a:	e7e6      	b.n	2c7ea <ccc_find_cfg+0xe>

0002c81c <clear_ccc_cfg>:
{
   2c81c:	b530      	push	{r4, r5, lr}
   2c81e:	b083      	sub	sp, #12
   2c820:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2c822:	2500      	movs	r5, #0
   2c824:	9500      	str	r5, [sp, #0]
   2c826:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   2c82a:	2207      	movs	r2, #7
   2c82c:	4669      	mov	r1, sp
   2c82e:	3001      	adds	r0, #1
   2c830:	f7fe f835 	bl	2a89e <memcpy>
	cfg->id = 0U;
   2c834:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2c836:	8125      	strh	r5, [r4, #8]
}
   2c838:	b003      	add	sp, #12
   2c83a:	bd30      	pop	{r4, r5, pc}

0002c83c <ccc_clear>:
{
   2c83c:	b508      	push	{r3, lr}
	cfg = ccc_find_cfg(ccc, addr, id);
   2c83e:	f7ff ffcd 	bl	2c7dc <ccc_find_cfg>
	if (!cfg) {
   2c842:	b108      	cbz	r0, 2c848 <ccc_clear+0xc>
	clear_ccc_cfg(cfg);
   2c844:	f7ff ffea 	bl	2c81c <clear_ccc_cfg>
}
   2c848:	bd08      	pop	{r3, pc}

0002c84a <clear_sc_cfg>:
{
   2c84a:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   2c84c:	220c      	movs	r2, #12
   2c84e:	2100      	movs	r1, #0
   2c850:	f7fe f849 	bl	2a8e6 <memset>
}
   2c854:	bd08      	pop	{r3, pc}

0002c856 <sc_ccc_cfg_write>:
{
   2c856:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2c858:	2a02      	cmp	r2, #2
   2c85a:	d003      	beq.n	2c864 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2c85c:	f7ec ffa2 	bl	197a4 <sc_clear>
}
   2c860:	2002      	movs	r0, #2
   2c862:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2c864:	2300      	movs	r3, #0
   2c866:	461a      	mov	r2, r3
   2c868:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2c86c:	7a00      	ldrb	r0, [r0, #8]
   2c86e:	f7ec feeb 	bl	19648 <sc_save>
   2c872:	e7f5      	b.n	2c860 <sc_ccc_cfg_write+0xa>

0002c874 <sc_reset>:
{
   2c874:	b510      	push	{r4, lr}
   2c876:	4604      	mov	r4, r0
	memset(&cfg->data, 0, sizeof(cfg->data));
   2c878:	2204      	movs	r2, #4
   2c87a:	2100      	movs	r1, #0
   2c87c:	3008      	adds	r0, #8
   2c87e:	f7fe f832 	bl	2a8e6 <memset>
		sc_store(cfg);
   2c882:	4620      	mov	r0, r4
   2c884:	f7ec feb2 	bl	195ec <sc_store>
}
   2c888:	bd10      	pop	{r4, pc}

0002c88a <gatt_foreach_iter>:
	if (handle > end_handle) {
   2c88a:	4299      	cmp	r1, r3
   2c88c:	d822      	bhi.n	2c8d4 <gatt_foreach_iter+0x4a>
{
   2c88e:	b538      	push	{r3, r4, r5, lr}
   2c890:	4605      	mov	r5, r0
   2c892:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2c894:	4291      	cmp	r1, r2
   2c896:	d31f      	bcc.n	2c8d8 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2c898:	9b04      	ldr	r3, [sp, #16]
   2c89a:	b123      	cbz	r3, 2c8a6 <gatt_foreach_iter+0x1c>
   2c89c:	6801      	ldr	r1, [r0, #0]
   2c89e:	4618      	mov	r0, r3
   2c8a0:	f7fe f935 	bl	2ab0e <bt_uuid_cmp>
   2c8a4:	b9d0      	cbnz	r0, 2c8dc <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2c8a6:	9b05      	ldr	r3, [sp, #20]
   2c8a8:	b12b      	cbz	r3, 2c8b6 <gatt_foreach_iter+0x2c>
   2c8aa:	68eb      	ldr	r3, [r5, #12]
   2c8ac:	9a05      	ldr	r2, [sp, #20]
   2c8ae:	4293      	cmp	r3, r2
   2c8b0:	d001      	beq.n	2c8b6 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2c8b2:	2001      	movs	r0, #1
   2c8b4:	e011      	b.n	2c8da <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2c8b6:	9b06      	ldr	r3, [sp, #24]
   2c8b8:	881b      	ldrh	r3, [r3, #0]
   2c8ba:	3b01      	subs	r3, #1
   2c8bc:	9a06      	ldr	r2, [sp, #24]
   2c8be:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2c8c0:	9a08      	ldr	r2, [sp, #32]
   2c8c2:	4621      	mov	r1, r4
   2c8c4:	4628      	mov	r0, r5
   2c8c6:	9b07      	ldr	r3, [sp, #28]
   2c8c8:	4798      	blx	r3
	if (!*num_matches) {
   2c8ca:	9b06      	ldr	r3, [sp, #24]
   2c8cc:	881b      	ldrh	r3, [r3, #0]
   2c8ce:	b923      	cbnz	r3, 2c8da <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2c8d0:	2000      	movs	r0, #0
   2c8d2:	e002      	b.n	2c8da <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2c8d4:	2000      	movs	r0, #0
}
   2c8d6:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2c8d8:	2001      	movs	r0, #1
}
   2c8da:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2c8dc:	2001      	movs	r0, #1
   2c8de:	e7fc      	b.n	2c8da <gatt_foreach_iter+0x50>

0002c8e0 <gatt_req_alloc>:
{
   2c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c8e4:	4607      	mov	r7, r0
   2c8e6:	4688      	mov	r8, r1
   2c8e8:	4615      	mov	r5, r2
   2c8ea:	461e      	mov	r6, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2c8ec:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2c8f0:	2100      	movs	r1, #0
   2c8f2:	f7ec fba5 	bl	19040 <bt_att_req_alloc>
	if (!req) {
   2c8f6:	4604      	mov	r4, r0
   2c8f8:	b130      	cbz	r0, 2c908 <gatt_req_alloc+0x28>
	req->att_op = op;
   2c8fa:	7446      	strb	r6, [r0, #17]
	req->len = len;
   2c8fc:	9b06      	ldr	r3, [sp, #24]
   2c8fe:	6143      	str	r3, [r0, #20]
	req->encode = encode;
   2c900:	60c5      	str	r5, [r0, #12]
	req->func = func;
   2c902:	6047      	str	r7, [r0, #4]
	req->user_data = params;
   2c904:	f8c0 8018 	str.w	r8, [r0, #24]
}
   2c908:	4620      	mov	r0, r4
   2c90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c90e <clear_cf_cfg>:
{
   2c90e:	b530      	push	{r4, r5, lr}
   2c910:	b083      	sub	sp, #12
   2c912:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2c914:	2500      	movs	r5, #0
   2c916:	9500      	str	r5, [sp, #0]
   2c918:	f8cd 5003 	str.w	r5, [sp, #3]
   2c91c:	2207      	movs	r2, #7
   2c91e:	4669      	mov	r1, sp
   2c920:	3001      	adds	r0, #1
   2c922:	f7fd ffbc 	bl	2a89e <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2c926:	2201      	movs	r2, #1
   2c928:	4629      	mov	r1, r5
   2c92a:	f104 0008 	add.w	r0, r4, #8
   2c92e:	f7fd ffda 	bl	2a8e6 <memset>
	atomic_set(cfg->flags, 0);
   2c932:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c934:	f3bf 8f5b 	dmb	ish
   2c938:	e854 3f00 	ldrex	r3, [r4]
   2c93c:	e844 5200 	strex	r2, r5, [r4]
   2c940:	2a00      	cmp	r2, #0
   2c942:	d1f9      	bne.n	2c938 <clear_cf_cfg+0x2a>
   2c944:	f3bf 8f5b 	dmb	ish
}
   2c948:	b003      	add	sp, #12
   2c94a:	bd30      	pop	{r4, r5, pc}

0002c94c <remove_cf_cfg>:
{
   2c94c:	b570      	push	{r4, r5, r6, lr}
   2c94e:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2c950:	f7ec fcd2 	bl	192f8 <find_cf_cfg>
	if (!cfg) {
   2c954:	b1e8      	cbz	r0, 2c992 <remove_cf_cfg+0x46>
   2c956:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2c958:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2c95c:	4631      	mov	r1, r6
   2c95e:	7a20      	ldrb	r0, [r4, #8]
   2c960:	f7fe fa8a 	bl	2ae78 <bt_addr_le_is_bonded>
   2c964:	b918      	cbnz	r0, 2c96e <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2c966:	4628      	mov	r0, r5
   2c968:	f7ff ffd1 	bl	2c90e <clear_cf_cfg>
   2c96c:	e011      	b.n	2c992 <remove_cf_cfg+0x46>
   2c96e:	2207      	movs	r2, #7
   2c970:	4631      	mov	r1, r6
   2c972:	1c68      	adds	r0, r5, #1
   2c974:	f7fd ff93 	bl	2a89e <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   2c978:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c97a:	f3bf 8f5b 	dmb	ish
   2c97e:	e855 3f00 	ldrex	r3, [r5]
   2c982:	f023 0302 	bic.w	r3, r3, #2
   2c986:	e845 3200 	strex	r2, r3, [r5]
   2c98a:	2a00      	cmp	r2, #0
   2c98c:	d1f7      	bne.n	2c97e <remove_cf_cfg+0x32>
   2c98e:	f3bf 8f5b 	dmb	ish
}
   2c992:	bd70      	pop	{r4, r5, r6, pc}

0002c994 <bt_gatt_attr_read>:
{
   2c994:	b510      	push	{r4, lr}
   2c996:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2c99a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2c99e:	42a1      	cmp	r1, r4
   2c9a0:	d80c      	bhi.n	2c9bc <bt_gatt_attr_read+0x28>
   2c9a2:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2c9a4:	1a64      	subs	r4, r4, r1
   2c9a6:	42a3      	cmp	r3, r4
   2c9a8:	bfa8      	it	ge
   2c9aa:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2c9ac:	b29c      	uxth	r4, r3
   2c9ae:	4622      	mov	r2, r4
   2c9b0:	9b03      	ldr	r3, [sp, #12]
   2c9b2:	4419      	add	r1, r3
   2c9b4:	f7fd ff73 	bl	2a89e <memcpy>
}
   2c9b8:	4620      	mov	r0, r4
   2c9ba:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c9bc:	f06f 0406 	mvn.w	r4, #6
   2c9c0:	e7fa      	b.n	2c9b8 <bt_gatt_attr_read+0x24>

0002c9c2 <read_ppcp>:
{
   2c9c2:	b510      	push	{r4, lr}
   2c9c4:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2c9c6:	2418      	movs	r4, #24
   2c9c8:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2c9cc:	2428      	movs	r4, #40	; 0x28
   2c9ce:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2c9d2:	2400      	movs	r4, #0
   2c9d4:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2c9d8:	242a      	movs	r4, #42	; 0x2a
   2c9da:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2c9de:	2408      	movs	r4, #8
   2c9e0:	9402      	str	r4, [sp, #8]
   2c9e2:	ac04      	add	r4, sp, #16
   2c9e4:	9401      	str	r4, [sp, #4]
   2c9e6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2c9ea:	9400      	str	r4, [sp, #0]
   2c9ec:	f7ff ffd2 	bl	2c994 <bt_gatt_attr_read>
}
   2c9f0:	b006      	add	sp, #24
   2c9f2:	bd10      	pop	{r4, pc}

0002c9f4 <read_appearance>:
{
   2c9f4:	b510      	push	{r4, lr}
   2c9f6:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2c9f8:	2400      	movs	r4, #0
   2c9fa:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2c9fe:	2402      	movs	r4, #2
   2ca00:	9402      	str	r4, [sp, #8]
   2ca02:	f10d 0416 	add.w	r4, sp, #22
   2ca06:	9401      	str	r4, [sp, #4]
   2ca08:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2ca0c:	9400      	str	r4, [sp, #0]
   2ca0e:	f7ff ffc1 	bl	2c994 <bt_gatt_attr_read>
}
   2ca12:	b006      	add	sp, #24
   2ca14:	bd10      	pop	{r4, pc}

0002ca16 <read_name>:
{
   2ca16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca1a:	b084      	sub	sp, #16
   2ca1c:	4604      	mov	r4, r0
   2ca1e:	460d      	mov	r5, r1
   2ca20:	4616      	mov	r6, r2
   2ca22:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2ca24:	f7e9 fb66 	bl	160f4 <bt_get_name>
   2ca28:	4680      	mov	r8, r0
				 strlen(name));
   2ca2a:	f7fd fed4 	bl	2a7d6 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2ca2e:	b280      	uxth	r0, r0
   2ca30:	9002      	str	r0, [sp, #8]
   2ca32:	f8cd 8004 	str.w	r8, [sp, #4]
   2ca36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2ca3a:	9300      	str	r3, [sp, #0]
   2ca3c:	463b      	mov	r3, r7
   2ca3e:	4632      	mov	r2, r6
   2ca40:	4629      	mov	r1, r5
   2ca42:	4620      	mov	r0, r4
   2ca44:	f7ff ffa6 	bl	2c994 <bt_gatt_attr_read>
}
   2ca48:	b004      	add	sp, #16
   2ca4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ca4e <cf_read>:
{
   2ca4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ca50:	b087      	sub	sp, #28
   2ca52:	4604      	mov	r4, r0
   2ca54:	460d      	mov	r5, r1
   2ca56:	4616      	mov	r6, r2
   2ca58:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2ca5a:	2300      	movs	r3, #0
   2ca5c:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2ca60:	f7ec fc4a 	bl	192f8 <find_cf_cfg>
	if (cfg) {
   2ca64:	b128      	cbz	r0, 2ca72 <cf_read+0x24>
   2ca66:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   2ca68:	2201      	movs	r2, #1
   2ca6a:	3108      	adds	r1, #8
   2ca6c:	a805      	add	r0, sp, #20
   2ca6e:	f7fd ff16 	bl	2a89e <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2ca72:	2301      	movs	r3, #1
   2ca74:	9302      	str	r3, [sp, #8]
   2ca76:	ab05      	add	r3, sp, #20
   2ca78:	9301      	str	r3, [sp, #4]
   2ca7a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2ca7e:	9300      	str	r3, [sp, #0]
   2ca80:	463b      	mov	r3, r7
   2ca82:	4632      	mov	r2, r6
   2ca84:	4629      	mov	r1, r5
   2ca86:	4620      	mov	r0, r4
   2ca88:	f7ff ff84 	bl	2c994 <bt_gatt_attr_read>
}
   2ca8c:	b007      	add	sp, #28
   2ca8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ca90 <bt_gatt_attr_read_service>:
{
   2ca90:	b570      	push	{r4, r5, r6, lr}
   2ca92:	b086      	sub	sp, #24
   2ca94:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2ca98:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2ca9a:	7826      	ldrb	r6, [r4, #0]
   2ca9c:	b146      	cbz	r6, 2cab0 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2ca9e:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2caa0:	2610      	movs	r6, #16
   2caa2:	9602      	str	r6, [sp, #8]
   2caa4:	9401      	str	r4, [sp, #4]
   2caa6:	9500      	str	r5, [sp, #0]
   2caa8:	f7ff ff74 	bl	2c994 <bt_gatt_attr_read>
}
   2caac:	b006      	add	sp, #24
   2caae:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2cab0:	8864      	ldrh	r4, [r4, #2]
   2cab2:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2cab6:	2402      	movs	r4, #2
   2cab8:	9402      	str	r4, [sp, #8]
   2caba:	f10d 0416 	add.w	r4, sp, #22
   2cabe:	9401      	str	r4, [sp, #4]
   2cac0:	9500      	str	r5, [sp, #0]
   2cac2:	f7ff ff67 	bl	2c994 <bt_gatt_attr_read>
   2cac6:	e7f1      	b.n	2caac <bt_gatt_attr_read_service+0x1c>

0002cac8 <bt_gatt_attr_read_ccc>:
{
   2cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2caca:	b087      	sub	sp, #28
   2cacc:	4605      	mov	r5, r0
   2cace:	460c      	mov	r4, r1
   2cad0:	4616      	mov	r6, r2
   2cad2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2cad4:	68c9      	ldr	r1, [r1, #12]
   2cad6:	f7ff fe55 	bl	2c784 <find_ccc_cfg>
	if (cfg) {
   2cada:	b190      	cbz	r0, 2cb02 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2cadc:	8903      	ldrh	r3, [r0, #8]
   2cade:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2cae2:	2302      	movs	r3, #2
   2cae4:	9302      	str	r3, [sp, #8]
   2cae6:	f10d 0316 	add.w	r3, sp, #22
   2caea:	9301      	str	r3, [sp, #4]
   2caec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2caf0:	9300      	str	r3, [sp, #0]
   2caf2:	463b      	mov	r3, r7
   2caf4:	4632      	mov	r2, r6
   2caf6:	4621      	mov	r1, r4
   2caf8:	4628      	mov	r0, r5
   2cafa:	f7ff ff4b 	bl	2c994 <bt_gatt_attr_read>
}
   2cafe:	b007      	add	sp, #28
   2cb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2cb02:	2300      	movs	r3, #0
   2cb04:	f8ad 3016 	strh.w	r3, [sp, #22]
   2cb08:	e7eb      	b.n	2cae2 <bt_gatt_attr_read_ccc+0x1a>

0002cb0a <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2cb0a:	b1b8      	cbz	r0, 2cb3c <bt_gatt_attr_value_handle+0x32>
{
   2cb0c:	b510      	push	{r4, lr}
   2cb0e:	b082      	sub	sp, #8
   2cb10:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2cb12:	2300      	movs	r3, #0
   2cb14:	f88d 3004 	strb.w	r3, [sp, #4]
   2cb18:	f642 0303 	movw	r3, #10243	; 0x2803
   2cb1c:	f8ad 3006 	strh.w	r3, [sp, #6]
   2cb20:	a901      	add	r1, sp, #4
   2cb22:	6800      	ldr	r0, [r0, #0]
   2cb24:	f7fd fff3 	bl	2ab0e <bt_uuid_cmp>
   2cb28:	b950      	cbnz	r0, 2cb40 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2cb2a:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2cb2c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2cb2e:	b940      	cbnz	r0, 2cb42 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2cb30:	4620      	mov	r0, r4
   2cb32:	f7ed f8df 	bl	19cf4 <bt_gatt_attr_get_handle>
   2cb36:	3001      	adds	r0, #1
   2cb38:	b280      	uxth	r0, r0
   2cb3a:	e002      	b.n	2cb42 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2cb3c:	2000      	movs	r0, #0
}
   2cb3e:	4770      	bx	lr
	uint16_t handle = 0;
   2cb40:	2000      	movs	r0, #0
}
   2cb42:	b002      	add	sp, #8
   2cb44:	bd10      	pop	{r4, pc}

0002cb46 <bt_gatt_attr_read_chrc>:
{
   2cb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cb4a:	b08a      	sub	sp, #40	; 0x28
   2cb4c:	4605      	mov	r5, r0
   2cb4e:	460c      	mov	r4, r1
   2cb50:	4616      	mov	r6, r2
   2cb52:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2cb54:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2cb58:	f898 3006 	ldrb.w	r3, [r8, #6]
   2cb5c:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2cb60:	4608      	mov	r0, r1
   2cb62:	f7ff ffd2 	bl	2cb0a <bt_gatt_attr_value_handle>
   2cb66:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2cb6a:	f8d8 1000 	ldr.w	r1, [r8]
   2cb6e:	780b      	ldrb	r3, [r1, #0]
   2cb70:	b993      	cbnz	r3, 2cb98 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2cb72:	884b      	ldrh	r3, [r1, #2]
   2cb74:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2cb78:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2cb7a:	9302      	str	r3, [sp, #8]
   2cb7c:	ab05      	add	r3, sp, #20
   2cb7e:	9301      	str	r3, [sp, #4]
   2cb80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2cb84:	9300      	str	r3, [sp, #0]
   2cb86:	463b      	mov	r3, r7
   2cb88:	4632      	mov	r2, r6
   2cb8a:	4621      	mov	r1, r4
   2cb8c:	4628      	mov	r0, r5
   2cb8e:	f7ff ff01 	bl	2c994 <bt_gatt_attr_read>
}
   2cb92:	b00a      	add	sp, #40	; 0x28
   2cb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2cb98:	2210      	movs	r2, #16
   2cb9a:	3101      	adds	r1, #1
   2cb9c:	f10d 0017 	add.w	r0, sp, #23
   2cba0:	f7fd fe7d 	bl	2a89e <memcpy>
		value_len += 16U;
   2cba4:	2313      	movs	r3, #19
   2cba6:	e7e8      	b.n	2cb7a <bt_gatt_attr_read_chrc+0x34>

0002cba8 <bt_gatt_check_perm>:
{
   2cba8:	b538      	push	{r3, r4, r5, lr}
   2cbaa:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2cbac:	f012 0f01 	tst.w	r2, #1
   2cbb0:	d005      	beq.n	2cbbe <bt_gatt_check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2cbb2:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2cbb4:	f013 0f15 	tst.w	r3, #21
   2cbb8:	d01d      	beq.n	2cbf6 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2cbba:	684b      	ldr	r3, [r1, #4]
   2cbbc:	b1eb      	cbz	r3, 2cbfa <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2cbbe:	f012 0f02 	tst.w	r2, #2
   2cbc2:	d005      	beq.n	2cbd0 <bt_gatt_check_perm+0x28>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2cbc4:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2cbc6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   2cbca:	d018      	beq.n	2cbfe <bt_gatt_check_perm+0x56>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2cbcc:	688b      	ldr	r3, [r1, #8]
   2cbce:	b1c3      	cbz	r3, 2cc02 <bt_gatt_check_perm+0x5a>
	mask &= attr->perm;
   2cbd0:	7c8c      	ldrb	r4, [r1, #18]
   2cbd2:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2cbd4:	f014 0f30 	tst.w	r4, #48	; 0x30
   2cbd8:	d106      	bne.n	2cbe8 <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2cbda:	f014 000c 	ands.w	r0, r4, #12
   2cbde:	d002      	beq.n	2cbe6 <bt_gatt_check_perm+0x3e>
		if (!conn->encrypt) {
   2cbe0:	7aeb      	ldrb	r3, [r5, #11]
   2cbe2:	b183      	cbz	r3, 2cc06 <bt_gatt_check_perm+0x5e>
	return 0;
   2cbe4:	2000      	movs	r0, #0
}
   2cbe6:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2cbe8:	4628      	mov	r0, r5
   2cbea:	f7fe fd7c 	bl	2b6e6 <bt_conn_get_security>
   2cbee:	2802      	cmp	r0, #2
   2cbf0:	d8f3      	bhi.n	2cbda <bt_gatt_check_perm+0x32>
			return BT_ATT_ERR_AUTHENTICATION;
   2cbf2:	2005      	movs	r0, #5
   2cbf4:	e7f7      	b.n	2cbe6 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2cbf6:	2002      	movs	r0, #2
   2cbf8:	e7f5      	b.n	2cbe6 <bt_gatt_check_perm+0x3e>
   2cbfa:	2002      	movs	r0, #2
   2cbfc:	e7f3      	b.n	2cbe6 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2cbfe:	2003      	movs	r0, #3
   2cc00:	e7f1      	b.n	2cbe6 <bt_gatt_check_perm+0x3e>
   2cc02:	2003      	movs	r0, #3
   2cc04:	e7ef      	b.n	2cbe6 <bt_gatt_check_perm+0x3e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2cc06:	200f      	movs	r0, #15
   2cc08:	e7ed      	b.n	2cbe6 <bt_gatt_check_perm+0x3e>

0002cc0a <bt_gatt_change_aware>:
{
   2cc0a:	b510      	push	{r4, lr}
   2cc0c:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2cc0e:	f7ec fb73 	bl	192f8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2cc12:	2800      	cmp	r0, #0
   2cc14:	d042      	beq.n	2cc9c <bt_gatt_change_aware+0x92>
   2cc16:	7a02      	ldrb	r2, [r0, #8]
   2cc18:	f012 0f01 	tst.w	r2, #1
   2cc1c:	d101      	bne.n	2cc22 <bt_gatt_change_aware+0x18>
		return true;
   2cc1e:	2001      	movs	r0, #1
}
   2cc20:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2cc22:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cc26:	f3bf 8f5b 	dmb	ish
   2cc2a:	68c2      	ldr	r2, [r0, #12]
   2cc2c:	f3bf 8f5b 	dmb	ish
   2cc30:	f012 0f01 	tst.w	r2, #1
   2cc34:	d134      	bne.n	2cca0 <bt_gatt_change_aware+0x96>
	if (!req) {
   2cc36:	b90c      	cbnz	r4, 2cc3c <bt_gatt_change_aware+0x32>
		return false;
   2cc38:	4620      	mov	r0, r4
   2cc3a:	e7f1      	b.n	2cc20 <bt_gatt_change_aware+0x16>
   2cc3c:	f3bf 8f5b 	dmb	ish
   2cc40:	68c3      	ldr	r3, [r0, #12]
   2cc42:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2cc46:	f013 0f02 	tst.w	r3, #2
   2cc4a:	d10d      	bne.n	2cc68 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cc4c:	f3bf 8f5b 	dmb	ish
   2cc50:	e851 3f00 	ldrex	r3, [r1]
   2cc54:	f043 0302 	orr.w	r3, r3, #2
   2cc58:	e841 3200 	strex	r2, r3, [r1]
   2cc5c:	2a00      	cmp	r2, #0
   2cc5e:	d1f7      	bne.n	2cc50 <bt_gatt_change_aware+0x46>
   2cc60:	f3bf 8f5b 	dmb	ish
	return false;
   2cc64:	2000      	movs	r0, #0
   2cc66:	e7db      	b.n	2cc20 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cc68:	f3bf 8f5b 	dmb	ish
   2cc6c:	e851 3f00 	ldrex	r3, [r1]
   2cc70:	f023 0302 	bic.w	r3, r3, #2
   2cc74:	e841 3200 	strex	r2, r3, [r1]
   2cc78:	2a00      	cmp	r2, #0
   2cc7a:	d1f7      	bne.n	2cc6c <bt_gatt_change_aware+0x62>
   2cc7c:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cc80:	f3bf 8f5b 	dmb	ish
   2cc84:	e851 3f00 	ldrex	r3, [r1]
   2cc88:	f043 0301 	orr.w	r3, r3, #1
   2cc8c:	e841 3200 	strex	r2, r3, [r1]
   2cc90:	2a00      	cmp	r2, #0
   2cc92:	d1f7      	bne.n	2cc84 <bt_gatt_change_aware+0x7a>
   2cc94:	f3bf 8f5b 	dmb	ish
		return true;
   2cc98:	4620      	mov	r0, r4
   2cc9a:	e7c1      	b.n	2cc20 <bt_gatt_change_aware+0x16>
		return true;
   2cc9c:	2001      	movs	r0, #1
   2cc9e:	e7bf      	b.n	2cc20 <bt_gatt_change_aware+0x16>
		return true;
   2cca0:	2001      	movs	r0, #1
   2cca2:	e7bd      	b.n	2cc20 <bt_gatt_change_aware+0x16>

0002cca4 <security_err_get>:
	switch (smp_err) {
   2cca4:	3801      	subs	r0, #1
   2cca6:	280e      	cmp	r0, #14
   2cca8:	d815      	bhi.n	2ccd6 <security_err_get+0x32>
   2ccaa:	e8df f000 	tbb	[pc, r0]
   2ccae:	1608      	.short	0x1608
   2ccb0:	0a0c080a 	.word	0x0a0c080a
   2ccb4:	100e140c 	.word	0x100e140c
   2ccb8:	0e0e0808 	.word	0x0e0e0808
   2ccbc:	12          	.byte	0x12
   2ccbd:	00          	.byte	0x00
		return BT_SECURITY_ERR_KEY_REJECTED;
   2ccbe:	2001      	movs	r0, #1
   2ccc0:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_REQUIREMENT;
   2ccc2:	2004      	movs	r0, #4
   2ccc4:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   2ccc6:	2005      	movs	r0, #5
   2ccc8:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   2ccca:	2006      	movs	r0, #6
   2cccc:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   2ccce:	2007      	movs	r0, #7
   2ccd0:	4770      	bx	lr
		return BT_SECURITY_ERR_KEY_REJECTED;
   2ccd2:	2008      	movs	r0, #8
   2ccd4:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   2ccd6:	2009      	movs	r0, #9
   2ccd8:	4770      	bx	lr
		return BT_SECURITY_ERR_OOB_NOT_AVAILABLE;
   2ccda:	2003      	movs	r0, #3
}
   2ccdc:	4770      	bx	lr

0002ccde <smp_err_get>:
	switch (auth_err) {
   2ccde:	1e43      	subs	r3, r0, #1
   2cce0:	2b08      	cmp	r3, #8
   2cce2:	d80c      	bhi.n	2ccfe <smp_err_get+0x20>
   2cce4:	e8df f003 	tbb	[pc, r3]
   2cce8:	0d05090d 	.word	0x0d05090d
   2ccec:	0b07090e 	.word	0x0b07090e
   2ccf0:	09          	.byte	0x09
   2ccf1:	00          	.byte	0x00
		return BT_SMP_ERR_UNSPECIFIED;
   2ccf2:	2002      	movs	r0, #2
   2ccf4:	4770      	bx	lr
		return BT_SMP_ERR_INVALID_PARAMS;
   2ccf6:	200a      	movs	r0, #10
   2ccf8:	4770      	bx	lr
		return BT_SMP_ERR_UNSPECIFIED;
   2ccfa:	2008      	movs	r0, #8
   2ccfc:	4770      	bx	lr
		return 0;
   2ccfe:	2000      	movs	r0, #0
   2cd00:	4770      	bx	lr
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2cd02:	2003      	movs	r0, #3
}
   2cd04:	4770      	bx	lr

0002cd06 <get_encryption_key_size>:
{
   2cd06:	4603      	mov	r3, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   2cd08:	7d00      	ldrb	r0, [r0, #20]
   2cd0a:	7b5b      	ldrb	r3, [r3, #13]
}
   2cd0c:	4298      	cmp	r0, r3
   2cd0e:	bf28      	it	cs
   2cd10:	4618      	movcs	r0, r3
   2cd12:	4770      	bx	lr

0002cd14 <hci_err_get>:
	switch (err) {
   2cd14:	2807      	cmp	r0, #7
   2cd16:	d80d      	bhi.n	2cd34 <hci_err_get+0x20>
   2cd18:	e8df f000 	tbb	[pc, r0]
   2cd1c:	0c040e0f 	.word	0x0c040e0f
   2cd20:	0a08060c 	.word	0x0a08060c
		return BT_HCI_ERR_PIN_OR_KEY_MISSING;
   2cd24:	2006      	movs	r0, #6
   2cd26:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_SUPPORTED;
   2cd28:	2029      	movs	r0, #41	; 0x29
   2cd2a:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_ALLOWED;
   2cd2c:	2018      	movs	r0, #24
   2cd2e:	4770      	bx	lr
		return BT_HCI_ERR_INVALID_PARAM;
   2cd30:	2012      	movs	r0, #18
   2cd32:	4770      	bx	lr
		return BT_HCI_ERR_UNSPECIFIED;
   2cd34:	201f      	movs	r0, #31
   2cd36:	4770      	bx	lr
		return BT_HCI_ERR_AUTH_FAIL;
   2cd38:	2005      	movs	r0, #5
}
   2cd3a:	4770      	bx	lr

0002cd3c <xor_128>:
{
   2cd3c:	b430      	push	{r4, r5}
	size_t len = 16;
   2cd3e:	2310      	movs	r3, #16
	while (len--) {
   2cd40:	1e5c      	subs	r4, r3, #1
   2cd42:	b143      	cbz	r3, 2cd56 <xor_128+0x1a>
		*r++ = *p++ ^ *q++;
   2cd44:	f810 3b01 	ldrb.w	r3, [r0], #1
   2cd48:	f811 5b01 	ldrb.w	r5, [r1], #1
   2cd4c:	406b      	eors	r3, r5
   2cd4e:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2cd52:	4623      	mov	r3, r4
   2cd54:	e7f4      	b.n	2cd40 <xor_128+0x4>
}
   2cd56:	bc30      	pop	{r4, r5}
   2cd58:	4770      	bx	lr

0002cd5a <smp_pairing_rsp>:
}
   2cd5a:	2007      	movs	r0, #7
   2cd5c:	4770      	bx	lr

0002cd5e <le_sc_oob_data_req_check>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2cd5e:	7ac0      	ldrb	r0, [r0, #11]
}
   2cd60:	f000 0001 	and.w	r0, r0, #1
   2cd64:	4770      	bx	lr

0002cd66 <le_sc_oob_data_rsp_check>:
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2cd66:	7c80      	ldrb	r0, [r0, #18]
}
   2cd68:	f000 0001 	and.w	r0, r0, #1
   2cd6c:	4770      	bx	lr

0002cd6e <le_sc_oob_config_set>:
{
   2cd6e:	b570      	push	{r4, r5, r6, lr}
   2cd70:	4606      	mov	r6, r0
   2cd72:	460c      	mov	r4, r1
	bool req_oob_present = le_sc_oob_data_req_check(smp);
   2cd74:	f7ff fff3 	bl	2cd5e <le_sc_oob_data_req_check>
   2cd78:	4605      	mov	r5, r0
	bool rsp_oob_present = le_sc_oob_data_rsp_check(smp);
   2cd7a:	4630      	mov	r0, r6
   2cd7c:	f7ff fff3 	bl	2cd66 <le_sc_oob_data_rsp_check>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2cd80:	b12d      	cbz	r5, 2cd8e <le_sc_oob_config_set+0x20>
   2cd82:	2300      	movs	r3, #0
		if (rsp_oob_present) {
   2cd84:	b108      	cbz	r0, 2cd8a <le_sc_oob_config_set+0x1c>
				     BT_CONN_OOB_BOTH_PEERS :
   2cd86:	b923      	cbnz	r3, 2cd92 <le_sc_oob_config_set+0x24>
   2cd88:	2302      	movs	r3, #2
	info->lesc.oob_config = oob_config;
   2cd8a:	7063      	strb	r3, [r4, #1]
}
   2cd8c:	bd70      	pop	{r4, r5, r6, pc}
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2cd8e:	2303      	movs	r3, #3
   2cd90:	e7f8      	b.n	2cd84 <le_sc_oob_config_set+0x16>
				     BT_CONN_OOB_BOTH_PEERS :
   2cd92:	2301      	movs	r3, #1
   2cd94:	e7f9      	b.n	2cd8a <le_sc_oob_config_set+0x1c>

0002cd96 <smp_signing_info>:
}
   2cd96:	2007      	movs	r0, #7
   2cd98:	4770      	bx	lr

0002cd9a <smp_security_request>:
}
   2cd9a:	2007      	movs	r0, #7
   2cd9c:	4770      	bx	lr

0002cd9e <smp_keypress_notif>:
   2cd9e:	f3bf 8f5b 	dmb	ish
   2cda2:	e850 3f00 	ldrex	r3, [r0]
   2cda6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2cdaa:	e840 3200 	strex	r2, r3, [r0]
   2cdae:	2a00      	cmp	r2, #0
   2cdb0:	d1f7      	bne.n	2cda2 <smp_keypress_notif+0x4>
   2cdb2:	f3bf 8f5b 	dmb	ish
}
   2cdb6:	2000      	movs	r0, #0
   2cdb8:	4770      	bx	lr

0002cdba <smp_keys_check>:
{
   2cdba:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cdbc:	f3bf 8f5b 	dmb	ish
   2cdc0:	6843      	ldr	r3, [r0, #4]
   2cdc2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2cdc6:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2cdca:	d132      	bne.n	2ce32 <smp_keys_check+0x78>
   2cdcc:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   2cdce:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2cdd2:	b1db      	cbz	r3, 2ce0c <smp_keys_check+0x52>
	if (!conn->le.keys ||
   2cdd4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2cdd8:	b36b      	cbz	r3, 2ce36 <smp_keys_check+0x7c>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   2cdda:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   2cddc:	f012 0f24 	tst.w	r2, #36	; 0x24
   2cde0:	d02b      	beq.n	2ce3a <smp_keys_check+0x80>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2cde2:	7aa1      	ldrb	r1, [r4, #10]
   2cde4:	2902      	cmp	r1, #2
   2cde6:	d903      	bls.n	2cdf0 <smp_keys_check+0x36>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2cde8:	7b58      	ldrb	r0, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2cdea:	f010 0f01 	tst.w	r0, #1
   2cdee:	d026      	beq.n	2ce3e <smp_keys_check+0x84>
	if (conn->required_sec_level > BT_SECURITY_L3 &&
   2cdf0:	2903      	cmp	r1, #3
   2cdf2:	d926      	bls.n	2ce42 <smp_keys_check+0x88>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2cdf4:	7b59      	ldrb	r1, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L3 &&
   2cdf6:	f011 0f01 	tst.w	r1, #1
   2cdfa:	d124      	bne.n	2ce46 <smp_keys_check+0x8c>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2cdfc:	f012 0f20 	tst.w	r2, #32
   2ce00:	d123      	bne.n	2ce4a <smp_keys_check+0x90>
	    !(conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE)) {
   2ce02:	7b1b      	ldrb	r3, [r3, #12]
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   2ce04:	2b10      	cmp	r3, #16
   2ce06:	d122      	bne.n	2ce4e <smp_keys_check+0x94>
	return true;
   2ce08:	2001      	movs	r0, #1
   2ce0a:	e013      	b.n	2ce34 <smp_keys_check+0x7a>
						     conn->id, &conn->le.dst);
   2ce0c:	f100 0590 	add.w	r5, r0, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2ce10:	462a      	mov	r2, r5
   2ce12:	7a01      	ldrb	r1, [r0, #8]
   2ce14:	2020      	movs	r0, #32
   2ce16:	f7ef fe4d 	bl	1cab4 <bt_keys_find>
   2ce1a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2ce1e:	2800      	cmp	r0, #0
   2ce20:	d1d8      	bne.n	2cdd4 <smp_keys_check+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2ce22:	462a      	mov	r2, r5
   2ce24:	7a21      	ldrb	r1, [r4, #8]
   2ce26:	2004      	movs	r0, #4
   2ce28:	f7ef fe44 	bl	1cab4 <bt_keys_find>
   2ce2c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2ce30:	e7d0      	b.n	2cdd4 <smp_keys_check+0x1a>
		return false;
   2ce32:	2000      	movs	r0, #0
}
   2ce34:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2ce36:	2000      	movs	r0, #0
   2ce38:	e7fc      	b.n	2ce34 <smp_keys_check+0x7a>
   2ce3a:	2000      	movs	r0, #0
   2ce3c:	e7fa      	b.n	2ce34 <smp_keys_check+0x7a>
		return false;
   2ce3e:	2000      	movs	r0, #0
   2ce40:	e7f8      	b.n	2ce34 <smp_keys_check+0x7a>
	return true;
   2ce42:	2001      	movs	r0, #1
   2ce44:	e7f6      	b.n	2ce34 <smp_keys_check+0x7a>
   2ce46:	2001      	movs	r0, #1
   2ce48:	e7f4      	b.n	2ce34 <smp_keys_check+0x7a>
   2ce4a:	2001      	movs	r0, #1
   2ce4c:	e7f2      	b.n	2ce34 <smp_keys_check+0x7a>
		return false;
   2ce4e:	2000      	movs	r0, #0
   2ce50:	e7f0      	b.n	2ce34 <smp_keys_check+0x7a>

0002ce52 <update_keys_check>:
	if (!keys ||
   2ce52:	b319      	cbz	r1, 2ce9c <update_keys_check+0x4a>
{
   2ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ce56:	4605      	mov	r5, r0
   2ce58:	460c      	mov	r4, r1
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2ce5a:	89ce      	ldrh	r6, [r1, #14]
	if (!keys ||
   2ce5c:	f016 0f24 	tst.w	r6, #36	; 0x24
   2ce60:	d01e      	beq.n	2cea0 <update_keys_check+0x4e>
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2ce62:	7b0f      	ldrb	r7, [r1, #12]
   2ce64:	f7ff ff4f 	bl	2cd06 <get_encryption_key_size>
   2ce68:	4287      	cmp	r7, r0
   2ce6a:	d81b      	bhi.n	2cea4 <update_keys_check+0x52>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ce6c:	f016 0f20 	tst.w	r6, #32
   2ce70:	d10a      	bne.n	2ce88 <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ce72:	7b63      	ldrb	r3, [r4, #13]
   2ce74:	f013 0301 	ands.w	r3, r3, #1
   2ce78:	d001      	beq.n	2ce7e <update_keys_check+0x2c>
	     smp->method == JUST_WORKS) {
   2ce7a:	7a2a      	ldrb	r2, [r5, #8]
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ce7c:	b1a2      	cbz	r2, 2cea8 <update_keys_check+0x56>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   2ce7e:	b9ab      	cbnz	r3, 2ceac <update_keys_check+0x5a>
	     && smp->method == JUST_WORKS)) {
   2ce80:	7a2b      	ldrb	r3, [r5, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   2ce82:	b1ab      	cbz	r3, 2ceb0 <update_keys_check+0x5e>
	return true;
   2ce84:	2001      	movs	r0, #1
   2ce86:	e00c      	b.n	2cea2 <update_keys_check+0x50>
   2ce88:	f3bf 8f5b 	dmb	ish
   2ce8c:	686b      	ldr	r3, [r5, #4]
   2ce8e:	f3bf 8f5b 	dmb	ish
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ce92:	f013 0f20 	tst.w	r3, #32
   2ce96:	d1ec      	bne.n	2ce72 <update_keys_check+0x20>
		return false;
   2ce98:	2000      	movs	r0, #0
   2ce9a:	e002      	b.n	2cea2 <update_keys_check+0x50>
		return true;
   2ce9c:	2001      	movs	r0, #1
}
   2ce9e:	4770      	bx	lr
		return true;
   2cea0:	2001      	movs	r0, #1
}
   2cea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   2cea4:	2000      	movs	r0, #0
   2cea6:	e7fc      	b.n	2cea2 <update_keys_check+0x50>
		return false;
   2cea8:	2000      	movs	r0, #0
   2ceaa:	e7fa      	b.n	2cea2 <update_keys_check+0x50>
	return true;
   2ceac:	2001      	movs	r0, #1
   2ceae:	e7f8      	b.n	2cea2 <update_keys_check+0x50>
		return false;
   2ceb0:	2000      	movs	r0, #0
   2ceb2:	e7f6      	b.n	2cea2 <update_keys_check+0x50>

0002ceb4 <remote_sec_level_reachable>:
{
   2ceb4:	b510      	push	{r4, lr}
   2ceb6:	4604      	mov	r4, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2ceb8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   2cebc:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   2cebe:	2b03      	cmp	r3, #3
   2cec0:	d018      	beq.n	2cef4 <remote_sec_level_reachable+0x40>
   2cec2:	d807      	bhi.n	2ced4 <remote_sec_level_reachable+0x20>
   2cec4:	3b01      	subs	r3, #1
   2cec6:	b2db      	uxtb	r3, r3
   2cec8:	2b01      	cmp	r3, #1
   2ceca:	d801      	bhi.n	2ced0 <remote_sec_level_reachable+0x1c>
   2cecc:	2000      	movs	r0, #0
}
   2cece:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ced0:	2008      	movs	r0, #8
   2ced2:	e7fc      	b.n	2cece <remote_sec_level_reachable+0x1a>
	switch (sec) {
   2ced4:	2b04      	cmp	r3, #4
   2ced6:	d111      	bne.n	2cefc <remote_sec_level_reachable+0x48>
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2ced8:	f7ff ff15 	bl	2cd06 <get_encryption_key_size>
   2cedc:	2810      	cmp	r0, #16
   2cede:	d001      	beq.n	2cee4 <remote_sec_level_reachable+0x30>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   2cee0:	2006      	movs	r0, #6
   2cee2:	e7f4      	b.n	2cece <remote_sec_level_reachable+0x1a>
   2cee4:	f3bf 8f5b 	dmb	ish
   2cee8:	6863      	ldr	r3, [r4, #4]
   2ceea:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2ceee:	f013 0f20 	tst.w	r3, #32
   2cef2:	d005      	beq.n	2cf00 <remote_sec_level_reachable+0x4c>
		if (smp->method == JUST_WORKS) {
   2cef4:	7a23      	ldrb	r3, [r4, #8]
   2cef6:	b12b      	cbz	r3, 2cf04 <remote_sec_level_reachable+0x50>
		return 0;
   2cef8:	2000      	movs	r0, #0
   2cefa:	e7e8      	b.n	2cece <remote_sec_level_reachable+0x1a>
		return BT_SMP_ERR_UNSPECIFIED;
   2cefc:	2008      	movs	r0, #8
   2cefe:	e7e6      	b.n	2cece <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2cf00:	2003      	movs	r0, #3
   2cf02:	e7e4      	b.n	2cece <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2cf04:	2003      	movs	r0, #3
   2cf06:	e7e2      	b.n	2cece <remote_sec_level_reachable+0x1a>

0002cf08 <smp_reset>:
{
   2cf08:	b538      	push	{r3, r4, r5, lr}
   2cf0a:	4604      	mov	r4, r0
	atomic_set(smp->flags, 0);
   2cf0c:	1d03      	adds	r3, r0, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2cf0e:	2500      	movs	r5, #0
   2cf10:	f3bf 8f5b 	dmb	ish
   2cf14:	e853 2f00 	ldrex	r2, [r3]
   2cf18:	e843 5100 	strex	r1, r5, [r3]
   2cf1c:	2900      	cmp	r1, #0
   2cf1e:	d1f9      	bne.n	2cf14 <smp_reset+0xc>
   2cf20:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2cf24:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   2cf28:	f7f6 f9de 	bl	232e8 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2cf2c:	7225      	strb	r5, [r4, #8]
   2cf2e:	f3bf 8f5b 	dmb	ish
   2cf32:	e854 3f00 	ldrex	r3, [r4]
   2cf36:	e844 5200 	strex	r2, r5, [r4]
   2cf3a:	2a00      	cmp	r2, #0
   2cf3c:	d1f9      	bne.n	2cf32 <smp_reset+0x2a>
   2cf3e:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cf42:	f3bf 8f5b 	dmb	ish
   2cf46:	e854 3f00 	ldrex	r3, [r4]
   2cf4a:	f043 0302 	orr.w	r3, r3, #2
   2cf4e:	e844 3200 	strex	r2, r3, [r4]
   2cf52:	2a00      	cmp	r2, #0
   2cf54:	d1f7      	bne.n	2cf46 <smp_reset+0x3e>
   2cf56:	f3bf 8f5b 	dmb	ish
}
   2cf5a:	bd38      	pop	{r3, r4, r5, pc}

0002cf5c <smp_c1>:
{
   2cf5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cf60:	b089      	sub	sp, #36	; 0x24
   2cf62:	4605      	mov	r5, r0
   2cf64:	460e      	mov	r6, r1
   2cf66:	4611      	mov	r1, r2
   2cf68:	461f      	mov	r7, r3
   2cf6a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   2cf6e:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   2cf72:	9c12      	ldr	r4, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2cf74:	f898 3000 	ldrb.w	r3, [r8]
   2cf78:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
   2cf7c:	f899 3000 	ldrb.w	r3, [r9]
   2cf80:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
   2cf84:	2207      	movs	r2, #7
   2cf86:	f10d 0012 	add.w	r0, sp, #18
   2cf8a:	f7fd fc88 	bl	2a89e <memcpy>
	memcpy(p1 + 9, pres, 7);
   2cf8e:	2207      	movs	r2, #7
   2cf90:	4639      	mov	r1, r7
   2cf92:	f10d 0019 	add.w	r0, sp, #25
   2cf96:	f7fd fc82 	bl	2a89e <memcpy>
	xor_128(r, p1, enc_data);
   2cf9a:	4622      	mov	r2, r4
   2cf9c:	a904      	add	r1, sp, #16
   2cf9e:	4630      	mov	r0, r6
   2cfa0:	f7ff fecc 	bl	2cd3c <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2cfa4:	4622      	mov	r2, r4
   2cfa6:	4621      	mov	r1, r4
   2cfa8:	4628      	mov	r0, r5
   2cfaa:	f7f3 fa59 	bl	20460 <bt_encrypt_le>
	if (err) {
   2cfae:	b110      	cbz	r0, 2cfb6 <smp_c1+0x5a>
}
   2cfb0:	b009      	add	sp, #36	; 0x24
   2cfb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(p2, ra->a.val, 6);
   2cfb6:	2206      	movs	r2, #6
   2cfb8:	f109 0101 	add.w	r1, r9, #1
   2cfbc:	4668      	mov	r0, sp
   2cfbe:	f7fd fc6e 	bl	2a89e <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2cfc2:	2206      	movs	r2, #6
   2cfc4:	f108 0101 	add.w	r1, r8, #1
   2cfc8:	eb0d 0002 	add.w	r0, sp, r2
   2cfcc:	f7fd fc67 	bl	2a89e <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2cfd0:	2204      	movs	r2, #4
   2cfd2:	2100      	movs	r1, #0
   2cfd4:	a803      	add	r0, sp, #12
   2cfd6:	f7fd fc86 	bl	2a8e6 <memset>
	xor_128(enc_data, p2, enc_data);
   2cfda:	4622      	mov	r2, r4
   2cfdc:	4669      	mov	r1, sp
   2cfde:	4620      	mov	r0, r4
   2cfe0:	f7ff feac 	bl	2cd3c <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
   2cfe4:	4622      	mov	r2, r4
   2cfe6:	4621      	mov	r1, r4
   2cfe8:	4628      	mov	r0, r5
   2cfea:	f7f3 fa39 	bl	20460 <bt_encrypt_le>
   2cfee:	e7df      	b.n	2cfb0 <smp_c1+0x54>

0002cff0 <smp_s1>:
{
   2cff0:	b570      	push	{r4, r5, r6, lr}
   2cff2:	4605      	mov	r5, r0
   2cff4:	460e      	mov	r6, r1
   2cff6:	4611      	mov	r1, r2
   2cff8:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
   2cffa:	2208      	movs	r2, #8
   2cffc:	4618      	mov	r0, r3
   2cffe:	f7fd fc4e 	bl	2a89e <memcpy>
	memcpy(out + 8, r1, 8);
   2d002:	2208      	movs	r2, #8
   2d004:	4631      	mov	r1, r6
   2d006:	18a0      	adds	r0, r4, r2
   2d008:	f7fd fc49 	bl	2a89e <memcpy>
	return bt_encrypt_le(k, out, out);
   2d00c:	4622      	mov	r2, r4
   2d00e:	4621      	mov	r1, r4
   2d010:	4628      	mov	r0, r5
   2d012:	f7f3 fa25 	bl	20460 <bt_encrypt_le>
}
   2d016:	bd70      	pop	{r4, r5, r6, pc}

0002d018 <smp_create_pdu>:
{
   2d018:	b570      	push	{r4, r5, r6, lr}
   2d01a:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d01c:	1d06      	adds	r6, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d01e:	f3bf 8f5b 	dmb	ish
   2d022:	6843      	ldr	r3, [r0, #4]
   2d024:	f3bf 8f5b 	dmb	ish
   2d028:	f013 0f10 	tst.w	r3, #16
   2d02c:	d00e      	beq.n	2d04c <smp_create_pdu+0x34>
		timeout = K_NO_WAIT;
   2d02e:	2200      	movs	r2, #0
   2d030:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d032:	2100      	movs	r1, #0
   2d034:	4608      	mov	r0, r1
   2d036:	f7fe fc61 	bl	2b8fc <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2d03a:	4604      	mov	r4, r0
   2d03c:	b150      	cbz	r0, 2d054 <smp_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   2d03e:	2101      	movs	r1, #1
   2d040:	3008      	adds	r0, #8
   2d042:	f7f0 f961 	bl	1d308 <net_buf_simple_add>
	hdr->code = op;
   2d046:	7005      	strb	r5, [r0, #0]
}
   2d048:	4620      	mov	r0, r4
   2d04a:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2d04c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d050:	2300      	movs	r3, #0
   2d052:	e7ee      	b.n	2d032 <smp_create_pdu+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d054:	f3bf 8f5b 	dmb	ish
   2d058:	e856 3f00 	ldrex	r3, [r6]
   2d05c:	f043 0310 	orr.w	r3, r3, #16
   2d060:	e846 3200 	strex	r2, r3, [r6]
   2d064:	2a00      	cmp	r2, #0
   2d066:	d1f7      	bne.n	2d058 <smp_create_pdu+0x40>
   2d068:	f3bf 8f5b 	dmb	ish
		return NULL;
   2d06c:	e7ec      	b.n	2d048 <smp_create_pdu+0x30>

0002d06e <smp_send>:
{
   2d06e:	b530      	push	{r4, r5, lr}
   2d070:	b083      	sub	sp, #12
   2d072:	4604      	mov	r4, r0
   2d074:	460d      	mov	r5, r1
   2d076:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d078:	2200      	movs	r2, #0
   2d07a:	9200      	str	r2, [sp, #0]
   2d07c:	460a      	mov	r2, r1
   2d07e:	2106      	movs	r1, #6
   2d080:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2d084:	f7fe fc3f 	bl	2b906 <bt_l2cap_send_cb>
   2d088:	b940      	cbnz	r0, 2d09c <smp_send+0x2e>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d08a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d08e:	2300      	movs	r3, #0
   2d090:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   2d094:	f7f6 f920 	bl	232d8 <k_work_reschedule>
}
   2d098:	b003      	add	sp, #12
   2d09a:	bd30      	pop	{r4, r5, pc}
		net_buf_unref(buf);
   2d09c:	4628      	mov	r0, r5
   2d09e:	f7f0 f81b 	bl	1d0d8 <net_buf_unref>
		return;
   2d0a2:	e7f9      	b.n	2d098 <smp_send+0x2a>

0002d0a4 <legacy_send_pairing_confirm>:
{
   2d0a4:	b570      	push	{r4, r5, r6, lr}
   2d0a6:	b084      	sub	sp, #16
   2d0a8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2d0aa:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2d0ae:	2210      	movs	r2, #16
   2d0b0:	2103      	movs	r1, #3
   2d0b2:	f7ff ffb1 	bl	2d018 <smp_create_pdu>
	if (!buf) {
   2d0b6:	b380      	cbz	r0, 2d11a <legacy_send_pairing_confirm+0x76>
   2d0b8:	4606      	mov	r6, r0
   2d0ba:	2110      	movs	r1, #16
   2d0bc:	3008      	adds	r0, #8
   2d0be:	f7f0 f923 	bl	1d308 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2d0c2:	f105 0397 	add.w	r3, r5, #151	; 0x97
   2d0c6:	359e      	adds	r5, #158	; 0x9e
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2d0c8:	9002      	str	r0, [sp, #8]
   2d0ca:	9501      	str	r5, [sp, #4]
   2d0cc:	9300      	str	r3, [sp, #0]
   2d0ce:	f104 0310 	add.w	r3, r4, #16
   2d0d2:	f104 0209 	add.w	r2, r4, #9
   2d0d6:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2d0da:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2d0de:	f7ff ff3d 	bl	2cf5c <smp_c1>
   2d0e2:	b9a8      	cbnz	r0, 2d110 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL, NULL);
   2d0e4:	2300      	movs	r3, #0
   2d0e6:	461a      	mov	r2, r3
   2d0e8:	4631      	mov	r1, r6
   2d0ea:	4620      	mov	r0, r4
   2d0ec:	f7ff ffbf 	bl	2d06e <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2d0f0:	3404      	adds	r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d0f2:	f3bf 8f5b 	dmb	ish
   2d0f6:	e854 3f00 	ldrex	r3, [r4]
   2d0fa:	f023 0301 	bic.w	r3, r3, #1
   2d0fe:	e844 3200 	strex	r2, r3, [r4]
   2d102:	2a00      	cmp	r2, #0
   2d104:	d1f7      	bne.n	2d0f6 <legacy_send_pairing_confirm+0x52>
   2d106:	f3bf 8f5b 	dmb	ish
	return 0;
   2d10a:	2000      	movs	r0, #0
}
   2d10c:	b004      	add	sp, #16
   2d10e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2d110:	4630      	mov	r0, r6
   2d112:	f7ef ffe1 	bl	1d0d8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2d116:	2008      	movs	r0, #8
   2d118:	e7f8      	b.n	2d10c <legacy_send_pairing_confirm+0x68>
		return BT_SMP_ERR_UNSPECIFIED;
   2d11a:	2008      	movs	r0, #8
   2d11c:	e7f6      	b.n	2d10c <legacy_send_pairing_confirm+0x68>

0002d11e <legacy_pairing_confirm>:
{
   2d11e:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d120:	f3bf 8f5b 	dmb	ish
   2d124:	6842      	ldr	r2, [r0, #4]
   2d126:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d12a:	f412 6f80 	tst.w	r2, #1024	; 0x400
   2d12e:	d00e      	beq.n	2d14e <legacy_pairing_confirm+0x30>
   2d130:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d132:	f3bf 8f5b 	dmb	ish
   2d136:	e853 2f00 	ldrex	r2, [r3]
   2d13a:	f042 0201 	orr.w	r2, r2, #1
   2d13e:	e843 2100 	strex	r1, r2, [r3]
   2d142:	2900      	cmp	r1, #0
   2d144:	d1f7      	bne.n	2d136 <legacy_pairing_confirm+0x18>
   2d146:	f3bf 8f5b 	dmb	ish
	return 0;
   2d14a:	2000      	movs	r0, #0
}
   2d14c:	bd08      	pop	{r3, pc}
   2d14e:	f3bf 8f5b 	dmb	ish
   2d152:	e850 3f00 	ldrex	r3, [r0]
   2d156:	f043 0310 	orr.w	r3, r3, #16
   2d15a:	e840 3200 	strex	r2, r3, [r0]
   2d15e:	2a00      	cmp	r2, #0
   2d160:	d1f7      	bne.n	2d152 <legacy_pairing_confirm+0x34>
   2d162:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
   2d166:	f7ff ff9d 	bl	2d0a4 <legacy_send_pairing_confirm>
   2d16a:	e7ef      	b.n	2d14c <legacy_pairing_confirm+0x2e>

0002d16c <sc_smp_send_dhkey_check>:
{
   2d16c:	b570      	push	{r4, r5, r6, lr}
   2d16e:	4604      	mov	r4, r0
   2d170:	460d      	mov	r5, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2d172:	2210      	movs	r2, #16
   2d174:	210d      	movs	r1, #13
   2d176:	f7ff ff4f 	bl	2d018 <smp_create_pdu>
	if (!buf) {
   2d17a:	b180      	cbz	r0, 2d19e <sc_smp_send_dhkey_check+0x32>
   2d17c:	4606      	mov	r6, r0
   2d17e:	2110      	movs	r1, #16
   2d180:	3008      	adds	r0, #8
   2d182:	f7f0 f8c1 	bl	1d308 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   2d186:	2210      	movs	r2, #16
   2d188:	4629      	mov	r1, r5
   2d18a:	f7fd fb88 	bl	2a89e <memcpy>
	smp_send(smp, buf, NULL, NULL);
   2d18e:	2300      	movs	r3, #0
   2d190:	461a      	mov	r2, r3
   2d192:	4631      	mov	r1, r6
   2d194:	4620      	mov	r0, r4
   2d196:	f7ff ff6a 	bl	2d06e <smp_send>
	return 0;
   2d19a:	2000      	movs	r0, #0
}
   2d19c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d19e:	2008      	movs	r0, #8
   2d1a0:	e7fc      	b.n	2d19c <sc_smp_send_dhkey_check+0x30>

0002d1a2 <smp_send_pairing_random>:
{
   2d1a2:	b538      	push	{r3, r4, r5, lr}
   2d1a4:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d1a6:	2210      	movs	r2, #16
   2d1a8:	2104      	movs	r1, #4
   2d1aa:	f7ff ff35 	bl	2d018 <smp_create_pdu>
	if (!rsp_buf) {
   2d1ae:	b188      	cbz	r0, 2d1d4 <smp_send_pairing_random+0x32>
   2d1b0:	4605      	mov	r5, r0
   2d1b2:	2110      	movs	r1, #16
   2d1b4:	3008      	adds	r0, #8
   2d1b6:	f7f0 f8a7 	bl	1d308 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2d1ba:	2210      	movs	r2, #16
   2d1bc:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2d1c0:	f7fd fb6d 	bl	2a89e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2d1c4:	2300      	movs	r3, #0
   2d1c6:	461a      	mov	r2, r3
   2d1c8:	4629      	mov	r1, r5
   2d1ca:	4620      	mov	r0, r4
   2d1cc:	f7ff ff4f 	bl	2d06e <smp_send>
	return 0;
   2d1d0:	2000      	movs	r0, #0
}
   2d1d2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d1d4:	2008      	movs	r0, #8
   2d1d6:	e7fc      	b.n	2d1d2 <smp_send_pairing_random+0x30>

0002d1d8 <send_pairing_rsp>:
{
   2d1d8:	b538      	push	{r3, r4, r5, lr}
   2d1da:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2d1dc:	2206      	movs	r2, #6
   2d1de:	2102      	movs	r1, #2
   2d1e0:	f7ff ff1a 	bl	2d018 <smp_create_pdu>
	if (!rsp_buf) {
   2d1e4:	b188      	cbz	r0, 2d20a <send_pairing_rsp+0x32>
   2d1e6:	4605      	mov	r5, r0
   2d1e8:	2106      	movs	r1, #6
   2d1ea:	3008      	adds	r0, #8
   2d1ec:	f7f0 f88c 	bl	1d308 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2d1f0:	2206      	movs	r2, #6
   2d1f2:	f104 0111 	add.w	r1, r4, #17
   2d1f6:	f7fd fb52 	bl	2a89e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2d1fa:	2300      	movs	r3, #0
   2d1fc:	461a      	mov	r2, r3
   2d1fe:	4629      	mov	r1, r5
   2d200:	4620      	mov	r0, r4
   2d202:	f7ff ff34 	bl	2d06e <smp_send>
	return 0;
   2d206:	2000      	movs	r0, #0
}
   2d208:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d20a:	2008      	movs	r0, #8
   2d20c:	e7fc      	b.n	2d208 <send_pairing_rsp+0x30>

0002d20e <bt_smp_aes_cmac>:
{
   2d20e:	b570      	push	{r4, r5, r6, lr}
   2d210:	b0c2      	sub	sp, #264	; 0x108
   2d212:	460c      	mov	r4, r1
   2d214:	4615      	mov	r5, r2
   2d216:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2d218:	aa16      	add	r2, sp, #88	; 0x58
   2d21a:	4601      	mov	r1, r0
   2d21c:	4668      	mov	r0, sp
   2d21e:	f7fd f8ee 	bl	2a3fe <tc_cmac_setup>
   2d222:	b168      	cbz	r0, 2d240 <bt_smp_aes_cmac+0x32>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2d224:	462a      	mov	r2, r5
   2d226:	4621      	mov	r1, r4
   2d228:	4668      	mov	r0, sp
   2d22a:	f7fd f915 	bl	2a458 <tc_cmac_update>
   2d22e:	b150      	cbz	r0, 2d246 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2d230:	4669      	mov	r1, sp
   2d232:	4630      	mov	r0, r6
   2d234:	f7fd f97e 	bl	2a534 <tc_cmac_final>
   2d238:	b140      	cbz	r0, 2d24c <bt_smp_aes_cmac+0x3e>
	return 0;
   2d23a:	2000      	movs	r0, #0
}
   2d23c:	b042      	add	sp, #264	; 0x108
   2d23e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2d240:	f06f 0004 	mvn.w	r0, #4
   2d244:	e7fa      	b.n	2d23c <bt_smp_aes_cmac+0x2e>
		return -EIO;
   2d246:	f06f 0004 	mvn.w	r0, #4
   2d24a:	e7f7      	b.n	2d23c <bt_smp_aes_cmac+0x2e>
		return -EIO;
   2d24c:	f06f 0004 	mvn.w	r0, #4
   2d250:	e7f4      	b.n	2d23c <bt_smp_aes_cmac+0x2e>

0002d252 <update_debug_keys_check>:
{
   2d252:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2d254:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   2d258:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2d25c:	b163      	cbz	r3, 2d278 <update_debug_keys_check+0x26>
	if (!conn->le.keys ||
   2d25e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2d262:	b18b      	cbz	r3, 2d288 <update_debug_keys_check+0x36>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2d264:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   2d266:	f012 0f24 	tst.w	r2, #36	; 0x24
   2d26a:	d00f      	beq.n	2d28c <update_debug_keys_check+0x3a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   2d26c:	7b5b      	ldrb	r3, [r3, #13]
   2d26e:	f013 0f02 	tst.w	r3, #2
   2d272:	d10d      	bne.n	2d290 <update_debug_keys_check+0x3e>
	return false;
   2d274:	2000      	movs	r0, #0
}
   2d276:	bd10      	pop	{r4, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2d278:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2d27c:	7a20      	ldrb	r0, [r4, #8]
   2d27e:	f7ef fbad 	bl	1c9dc <bt_keys_get_addr>
   2d282:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2d286:	e7ea      	b.n	2d25e <update_debug_keys_check+0xc>
		return true;
   2d288:	2001      	movs	r0, #1
   2d28a:	e7f4      	b.n	2d276 <update_debug_keys_check+0x24>
   2d28c:	2001      	movs	r0, #1
   2d28e:	e7f2      	b.n	2d276 <update_debug_keys_check+0x24>
		return true;
   2d290:	2001      	movs	r0, #1
   2d292:	e7f0      	b.n	2d276 <update_debug_keys_check+0x24>

0002d294 <smp_send_security_req>:
{
   2d294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d298:	b082      	sub	sp, #8
   2d29a:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   2d29c:	f7ed fc60 	bl	1ab60 <smp_chan_get>
	if (!smp) {
   2d2a0:	2800      	cmp	r0, #0
   2d2a2:	d077      	beq.n	2d394 <smp_send_security_req+0x100>
   2d2a4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d2a6:	f100 0804 	add.w	r8, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d2aa:	f3bf 8f5b 	dmb	ish
   2d2ae:	6843      	ldr	r3, [r0, #4]
   2d2b0:	f3bf 8f5b 	dmb	ish
   2d2b4:	f013 0f10 	tst.w	r3, #16
   2d2b8:	d16f      	bne.n	2d39a <smp_send_security_req+0x106>
   2d2ba:	f3bf 8f5b 	dmb	ish
   2d2be:	6843      	ldr	r3, [r0, #4]
   2d2c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2d2c4:	f013 0f08 	tst.w	r3, #8
   2d2c8:	d16a      	bne.n	2d3a0 <smp_send_security_req+0x10c>
   2d2ca:	f3bf 8f5b 	dmb	ish
   2d2ce:	6843      	ldr	r3, [r0, #4]
   2d2d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2d2d4:	f013 0f02 	tst.w	r3, #2
   2d2d8:	d165      	bne.n	2d3a6 <smp_send_security_req+0x112>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2d2da:	4628      	mov	r0, r5
   2d2dc:	f7ed fc04 	bl	1aae8 <sec_level_reachable>
   2d2e0:	2800      	cmp	r0, #0
   2d2e2:	d03f      	beq.n	2d364 <smp_send_security_req+0xd0>
	if (!conn->le.keys) {
   2d2e4:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2d2e8:	2b00      	cmp	r3, #0
   2d2ea:	d043      	beq.n	2d374 <smp_send_security_req+0xe0>
	if (smp_init(smp) != 0) {
   2d2ec:	4620      	mov	r0, r4
   2d2ee:	f7ed fd73 	bl	1add8 <smp_init>
   2d2f2:	2800      	cmp	r0, #0
   2d2f4:	d15a      	bne.n	2d3ac <smp_send_security_req+0x118>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2d2f6:	2201      	movs	r2, #1
   2d2f8:	210b      	movs	r1, #11
   2d2fa:	4620      	mov	r0, r4
   2d2fc:	f7ff fe8c 	bl	2d018 <smp_create_pdu>
	if (!req_buf) {
   2d300:	4607      	mov	r7, r0
   2d302:	2800      	cmp	r0, #0
   2d304:	d055      	beq.n	2d3b2 <smp_send_security_req+0x11e>
   2d306:	2101      	movs	r1, #1
   2d308:	3008      	adds	r0, #8
   2d30a:	f7ef fffd 	bl	1d308 <net_buf_simple_add>
   2d30e:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   2d310:	2109      	movs	r1, #9
   2d312:	4628      	mov	r0, r5
   2d314:	f7ed fbc8 	bl	1aaa8 <get_auth>
   2d318:	7030      	strb	r0, [r6, #0]
   2d31a:	2300      	movs	r3, #0
   2d31c:	9300      	str	r3, [sp, #0]
   2d31e:	463a      	mov	r2, r7
   2d320:	2106      	movs	r1, #6
   2d322:	4628      	mov	r0, r5
   2d324:	f7fe faef 	bl	2b906 <bt_l2cap_send_cb>
	if (err) {
   2d328:	4605      	mov	r5, r0
   2d32a:	bb78      	cbnz	r0, 2d38c <smp_send_security_req+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d32c:	f3bf 8f5b 	dmb	ish
   2d330:	e858 3f00 	ldrex	r3, [r8]
   2d334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   2d338:	e848 3200 	strex	r2, r3, [r8]
   2d33c:	2a00      	cmp	r2, #0
   2d33e:	d1f7      	bne.n	2d330 <smp_send_security_req+0x9c>
   2d340:	f3bf 8f5b 	dmb	ish
   2d344:	f3bf 8f5b 	dmb	ish
   2d348:	e854 3f00 	ldrex	r3, [r4]
   2d34c:	f043 0302 	orr.w	r3, r3, #2
   2d350:	e844 3200 	strex	r2, r3, [r4]
   2d354:	2a00      	cmp	r2, #0
   2d356:	d1f7      	bne.n	2d348 <smp_send_security_req+0xb4>
   2d358:	f3bf 8f5b 	dmb	ish
}
   2d35c:	4628      	mov	r0, r5
   2d35e:	b002      	add	sp, #8
   2d360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2d364:	4628      	mov	r0, r5
   2d366:	f7ff fd28 	bl	2cdba <smp_keys_check>
   2d36a:	2800      	cmp	r0, #0
   2d36c:	d1ba      	bne.n	2d2e4 <smp_send_security_req+0x50>
		return -EINVAL;
   2d36e:	f06f 0515 	mvn.w	r5, #21
   2d372:	e7f3      	b.n	2d35c <smp_send_security_req+0xc8>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2d374:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2d378:	7a28      	ldrb	r0, [r5, #8]
   2d37a:	f7ef fb2f 	bl	1c9dc <bt_keys_get_addr>
   2d37e:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   2d382:	2800      	cmp	r0, #0
   2d384:	d1b2      	bne.n	2d2ec <smp_send_security_req+0x58>
			return -ENOMEM;
   2d386:	f06f 050b 	mvn.w	r5, #11
   2d38a:	e7e7      	b.n	2d35c <smp_send_security_req+0xc8>
		net_buf_unref(req_buf);
   2d38c:	4638      	mov	r0, r7
   2d38e:	f7ef fea3 	bl	1d0d8 <net_buf_unref>
		return err;
   2d392:	e7e3      	b.n	2d35c <smp_send_security_req+0xc8>
		return -ENOTCONN;
   2d394:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   2d398:	e7e0      	b.n	2d35c <smp_send_security_req+0xc8>
		return -EIO;
   2d39a:	f06f 0504 	mvn.w	r5, #4
   2d39e:	e7dd      	b.n	2d35c <smp_send_security_req+0xc8>
		return -EBUSY;
   2d3a0:	f06f 050f 	mvn.w	r5, #15
   2d3a4:	e7da      	b.n	2d35c <smp_send_security_req+0xc8>
		return -EBUSY;
   2d3a6:	f06f 050f 	mvn.w	r5, #15
   2d3aa:	e7d7      	b.n	2d35c <smp_send_security_req+0xc8>
		return -ENOBUFS;
   2d3ac:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2d3b0:	e7d4      	b.n	2d35c <smp_send_security_req+0xc8>
		return -ENOBUFS;
   2d3b2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2d3b6:	e7d1      	b.n	2d35c <smp_send_security_req+0xc8>

0002d3b8 <generate_dhkey>:
{
   2d3b8:	b510      	push	{r4, lr}
   2d3ba:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2d3bc:	1d03      	adds	r3, r0, #4
   2d3be:	f3bf 8f5b 	dmb	ish
   2d3c2:	e853 2f00 	ldrex	r2, [r3]
   2d3c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2d3ca:	e843 2100 	strex	r1, r2, [r3]
   2d3ce:	2900      	cmp	r1, #0
   2d3d0:	d1f7      	bne.n	2d3c2 <generate_dhkey+0xa>
   2d3d2:	f3bf 8f5b 	dmb	ish
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2d3d6:	2008      	movs	r0, #8
   2d3d8:	f7ed fc00 	bl	1abdc <smp_find>
   2d3dc:	b108      	cbz	r0, 2d3e2 <generate_dhkey+0x2a>
	return 0;
   2d3de:	2000      	movs	r0, #0
}
   2d3e0:	bd10      	pop	{r4, pc}
		return smp_dhkey_generate(smp);
   2d3e2:	4620      	mov	r0, r4
   2d3e4:	f7ed fdc6 	bl	1af74 <smp_dhkey_generate>
   2d3e8:	e7fa      	b.n	2d3e0 <generate_dhkey+0x28>

0002d3ea <smp_dhkey_check>:
{
   2d3ea:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2d3ec:	6889      	ldr	r1, [r1, #8]
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2d3ee:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   2d3f2:	78db      	ldrb	r3, [r3, #3]
   2d3f4:	2b01      	cmp	r3, #1
   2d3f6:	d001      	beq.n	2d3fc <smp_dhkey_check+0x12>
	return 0;
   2d3f8:	2000      	movs	r0, #0
}
   2d3fa:	bd38      	pop	{r3, r4, r5, pc}
   2d3fc:	4604      	mov	r4, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2d3fe:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d400:	f3bf 8f5b 	dmb	ish
   2d404:	e855 3f00 	ldrex	r3, [r5]
   2d408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2d40c:	e845 3200 	strex	r2, r3, [r5]
   2d410:	2a00      	cmp	r2, #0
   2d412:	d1f7      	bne.n	2d404 <smp_dhkey_check+0x1a>
   2d414:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
   2d418:	2210      	movs	r2, #16
   2d41a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2d41e:	f7fd fa3e 	bl	2a89e <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d422:	f3bf 8f5b 	dmb	ish
   2d426:	6863      	ldr	r3, [r4, #4]
   2d428:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2d42c:	f013 0f80 	tst.w	r3, #128	; 0x80
   2d430:	d115      	bne.n	2d45e <smp_dhkey_check+0x74>
   2d432:	f3bf 8f5b 	dmb	ish
   2d436:	6863      	ldr	r3, [r4, #4]
   2d438:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d43c:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2d440:	d01b      	beq.n	2d47a <smp_dhkey_check+0x90>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d442:	f3bf 8f5b 	dmb	ish
   2d446:	e855 3f00 	ldrex	r3, [r5]
   2d44a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2d44e:	e845 3200 	strex	r2, r3, [r5]
   2d452:	2a00      	cmp	r2, #0
   2d454:	d1f7      	bne.n	2d446 <smp_dhkey_check+0x5c>
   2d456:	f3bf 8f5b 	dmb	ish
			return 0;
   2d45a:	2000      	movs	r0, #0
   2d45c:	e7cd      	b.n	2d3fa <smp_dhkey_check+0x10>
   2d45e:	f3bf 8f5b 	dmb	ish
   2d462:	e855 3f00 	ldrex	r3, [r5]
   2d466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2d46a:	e845 3200 	strex	r2, r3, [r5]
   2d46e:	2a00      	cmp	r2, #0
   2d470:	d1f7      	bne.n	2d462 <smp_dhkey_check+0x78>
   2d472:	f3bf 8f5b 	dmb	ish
			return 0;
   2d476:	2000      	movs	r0, #0
   2d478:	e7bf      	b.n	2d3fa <smp_dhkey_check+0x10>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2d47a:	4620      	mov	r0, r4
   2d47c:	f7ee feaa 	bl	1c1d4 <compute_and_check_and_send_periph_dhcheck>
   2d480:	e7bb      	b.n	2d3fa <smp_dhkey_check+0x10>

0002d482 <smp_dhkey_ready>:
	if (!dhkey) {
   2d482:	2900      	cmp	r1, #0
   2d484:	d04f      	beq.n	2d526 <smp_dhkey_ready+0xa4>
{
   2d486:	b538      	push	{r3, r4, r5, lr}
   2d488:	4604      	mov	r4, r0
   2d48a:	460b      	mov	r3, r1
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2d48c:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d48e:	f3bf 8f5b 	dmb	ish
   2d492:	e855 2f00 	ldrex	r2, [r5]
   2d496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2d49a:	e845 2100 	strex	r1, r2, [r5]
   2d49e:	2900      	cmp	r1, #0
   2d4a0:	d1f7      	bne.n	2d492 <smp_dhkey_ready+0x10>
   2d4a2:	f3bf 8f5b 	dmb	ish
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2d4a6:	2220      	movs	r2, #32
   2d4a8:	4619      	mov	r1, r3
   2d4aa:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2d4ae:	f7fd f9f6 	bl	2a89e <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d4b2:	f3bf 8f5b 	dmb	ish
   2d4b6:	6863      	ldr	r3, [r4, #4]
   2d4b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d4bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2d4c0:	d111      	bne.n	2d4e6 <smp_dhkey_ready+0x64>
   2d4c2:	f3bf 8f5b 	dmb	ish
   2d4c6:	6863      	ldr	r3, [r4, #4]
   2d4c8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2d4cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2d4d0:	d117      	bne.n	2d502 <smp_dhkey_ready+0x80>
   2d4d2:	f3bf 8f5b 	dmb	ish
   2d4d6:	6863      	ldr	r3, [r4, #4]
   2d4d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2d4dc:	f413 7f00 	tst.w	r3, #512	; 0x200
   2d4e0:	d11d      	bne.n	2d51e <smp_dhkey_ready+0x9c>
	return 0;
   2d4e2:	2000      	movs	r0, #0
   2d4e4:	e00c      	b.n	2d500 <smp_dhkey_ready+0x7e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d4e6:	f3bf 8f5b 	dmb	ish
   2d4ea:	e855 3f00 	ldrex	r3, [r5]
   2d4ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2d4f2:	e845 3200 	strex	r2, r3, [r5]
   2d4f6:	2a00      	cmp	r2, #0
   2d4f8:	d1f7      	bne.n	2d4ea <smp_dhkey_ready+0x68>
   2d4fa:	f3bf 8f5b 	dmb	ish
		return 0;
   2d4fe:	2000      	movs	r0, #0
}
   2d500:	bd38      	pop	{r3, r4, r5, pc}
   2d502:	f3bf 8f5b 	dmb	ish
   2d506:	e855 3f00 	ldrex	r3, [r5]
   2d50a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2d50e:	e845 3200 	strex	r2, r3, [r5]
   2d512:	2a00      	cmp	r2, #0
   2d514:	d1f7      	bne.n	2d506 <smp_dhkey_ready+0x84>
   2d516:	f3bf 8f5b 	dmb	ish
		return 0;
   2d51a:	2000      	movs	r0, #0
   2d51c:	e7f0      	b.n	2d500 <smp_dhkey_ready+0x7e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2d51e:	4620      	mov	r0, r4
   2d520:	f7ee fe58 	bl	1c1d4 <compute_and_check_and_send_periph_dhcheck>
   2d524:	e7ec      	b.n	2d500 <smp_dhkey_ready+0x7e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2d526:	200b      	movs	r0, #11
}
   2d528:	4770      	bx	lr

0002d52a <bt_smp_request_ltk>:
{
   2d52a:	b570      	push	{r4, r5, r6, lr}
   2d52c:	b082      	sub	sp, #8
   2d52e:	4604      	mov	r4, r0
   2d530:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2d534:	f7ed fb14 	bl	1ab60 <smp_chan_get>
	if (!smp) {
   2d538:	2800      	cmp	r0, #0
   2d53a:	f000 80cc 	beq.w	2d6d6 <bt_smp_request_ltk+0x1ac>
   2d53e:	4605      	mov	r5, r0
	if (ediv == 0U && rand == 0U &&
   2d540:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2d544:	b91b      	cbnz	r3, 2d54e <bt_smp_request_ltk+0x24>
   2d546:	e9dd 2300 	ldrd	r2, r3, [sp]
   2d54a:	4313      	orrs	r3, r2
   2d54c:	d027      	beq.n	2d59e <bt_smp_request_ltk+0x74>
	if (!conn->le.keys) {
   2d54e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2d552:	2b00      	cmp	r3, #0
   2d554:	d055      	beq.n	2d602 <bt_smp_request_ltk+0xd8>
	if (ediv == 0U && rand == 0U &&
   2d556:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2d55a:	b953      	cbnz	r3, 2d572 <bt_smp_request_ltk+0x48>
   2d55c:	e9dd 2300 	ldrd	r2, r3, [sp]
   2d560:	4313      	orrs	r3, r2
   2d562:	d106      	bne.n	2d572 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d564:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2d568:	b119      	cbz	r1, 2d572 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d56a:	89cb      	ldrh	r3, [r1, #14]
   2d56c:	f013 0f20 	tst.w	r3, #32
   2d570:	d15a      	bne.n	2d628 <bt_smp_request_ltk+0xfe>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d572:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2d576:	b118      	cbz	r0, 2d580 <bt_smp_request_ltk+0x56>
   2d578:	89c3      	ldrh	r3, [r0, #14]
   2d57a:	f013 0f01 	tst.w	r3, #1
   2d57e:	d172      	bne.n	2d666 <bt_smp_request_ltk+0x13c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d580:	f3bf 8f5b 	dmb	ish
   2d584:	686b      	ldr	r3, [r5, #4]
   2d586:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2d58a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2d58e:	f040 809c 	bne.w	2d6ca <bt_smp_request_ltk+0x1a0>
	smp_reset(smp);
   2d592:	4628      	mov	r0, r5
   2d594:	f7ff fcb8 	bl	2cf08 <smp_reset>
	return false;
   2d598:	2000      	movs	r0, #0
}
   2d59a:	b002      	add	sp, #8
   2d59c:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d59e:	1d06      	adds	r6, r0, #4
   2d5a0:	f3bf 8f5b 	dmb	ish
   2d5a4:	6843      	ldr	r3, [r0, #4]
   2d5a6:	f3bf 8f5b 	dmb	ish
	if (ediv == 0U && rand == 0U &&
   2d5aa:	f013 0f08 	tst.w	r3, #8
   2d5ae:	d0ce      	beq.n	2d54e <bt_smp_request_ltk+0x24>
   2d5b0:	f3bf 8f5b 	dmb	ish
   2d5b4:	6843      	ldr	r3, [r0, #4]
   2d5b6:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d5ba:	f013 0f02 	tst.w	r3, #2
   2d5be:	d0c6      	beq.n	2d54e <bt_smp_request_ltk+0x24>
		enc_size = get_encryption_key_size(smp);
   2d5c0:	f7ff fba1 	bl	2cd06 <get_encryption_key_size>
   2d5c4:	4604      	mov	r4, r0
		memcpy(ltk, smp->tk, enc_size);
   2d5c6:	4602      	mov	r2, r0
   2d5c8:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2d5cc:	9807      	ldr	r0, [sp, #28]
   2d5ce:	f7fd f966 	bl	2a89e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2d5d2:	2c0f      	cmp	r4, #15
   2d5d4:	d90d      	bls.n	2d5f2 <bt_smp_request_ltk+0xc8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d5d6:	f3bf 8f5b 	dmb	ish
   2d5da:	e856 3f00 	ldrex	r3, [r6]
   2d5de:	f043 0302 	orr.w	r3, r3, #2
   2d5e2:	e846 3200 	strex	r2, r3, [r6]
   2d5e6:	2a00      	cmp	r2, #0
   2d5e8:	d1f7      	bne.n	2d5da <bt_smp_request_ltk+0xb0>
   2d5ea:	f3bf 8f5b 	dmb	ish
		return true;
   2d5ee:	2001      	movs	r0, #1
   2d5f0:	e7d3      	b.n	2d59a <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   2d5f2:	f1c4 0210 	rsb	r2, r4, #16
   2d5f6:	2100      	movs	r1, #0
   2d5f8:	9b07      	ldr	r3, [sp, #28]
   2d5fa:	1918      	adds	r0, r3, r4
   2d5fc:	f7fd f973 	bl	2a8e6 <memset>
   2d600:	e7e9      	b.n	2d5d6 <bt_smp_request_ltk+0xac>
					     &conn->le.dst);
   2d602:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2d606:	4632      	mov	r2, r6
   2d608:	7a21      	ldrb	r1, [r4, #8]
   2d60a:	2020      	movs	r0, #32
   2d60c:	f7ef fa52 	bl	1cab4 <bt_keys_find>
   2d610:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2d614:	2800      	cmp	r0, #0
   2d616:	d19e      	bne.n	2d556 <bt_smp_request_ltk+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2d618:	4632      	mov	r2, r6
   2d61a:	7a21      	ldrb	r1, [r4, #8]
   2d61c:	2001      	movs	r0, #1
   2d61e:	f7ef fa49 	bl	1cab4 <bt_keys_find>
   2d622:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   2d626:	e796      	b.n	2d556 <bt_smp_request_ltk+0x2c>
		enc_size = conn->le.keys->enc_size;
   2d628:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2d62a:	4622      	mov	r2, r4
   2d62c:	311a      	adds	r1, #26
   2d62e:	9807      	ldr	r0, [sp, #28]
   2d630:	f7fd f935 	bl	2a89e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2d634:	2c0f      	cmp	r4, #15
   2d636:	d90e      	bls.n	2d656 <bt_smp_request_ltk+0x12c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2d638:	3504      	adds	r5, #4
   2d63a:	f3bf 8f5b 	dmb	ish
   2d63e:	e855 3f00 	ldrex	r3, [r5]
   2d642:	f043 0302 	orr.w	r3, r3, #2
   2d646:	e845 3200 	strex	r2, r3, [r5]
   2d64a:	2a00      	cmp	r2, #0
   2d64c:	d1f7      	bne.n	2d63e <bt_smp_request_ltk+0x114>
   2d64e:	f3bf 8f5b 	dmb	ish
		return true;
   2d652:	2001      	movs	r0, #1
   2d654:	e7a1      	b.n	2d59a <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   2d656:	f1c4 0210 	rsb	r2, r4, #16
   2d65a:	2100      	movs	r1, #0
   2d65c:	9b07      	ldr	r3, [sp, #28]
   2d65e:	1918      	adds	r0, r3, r4
   2d660:	f7fd f941 	bl	2a8e6 <memset>
   2d664:	e7e8      	b.n	2d638 <bt_smp_request_ltk+0x10e>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d666:	2208      	movs	r2, #8
   2d668:	4669      	mov	r1, sp
   2d66a:	3040      	adds	r0, #64	; 0x40
   2d66c:	f7fd f8ea 	bl	2a844 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d670:	2800      	cmp	r0, #0
   2d672:	d185      	bne.n	2d580 <bt_smp_request_ltk+0x56>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2d674:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2d678:	2202      	movs	r2, #2
   2d67a:	a906      	add	r1, sp, #24
   2d67c:	3048      	adds	r0, #72	; 0x48
   2d67e:	f7fd f8e1 	bl	2a844 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d682:	2800      	cmp	r0, #0
   2d684:	f47f af7c 	bne.w	2d580 <bt_smp_request_ltk+0x56>
		enc_size = conn->le.keys->enc_size;
   2d688:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2d68c:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2d68e:	4622      	mov	r2, r4
   2d690:	314a      	adds	r1, #74	; 0x4a
   2d692:	9807      	ldr	r0, [sp, #28]
   2d694:	f7fd f903 	bl	2a89e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2d698:	2c0f      	cmp	r4, #15
   2d69a:	d90e      	bls.n	2d6ba <bt_smp_request_ltk+0x190>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2d69c:	3504      	adds	r5, #4
   2d69e:	f3bf 8f5b 	dmb	ish
   2d6a2:	e855 3f00 	ldrex	r3, [r5]
   2d6a6:	f043 0302 	orr.w	r3, r3, #2
   2d6aa:	e845 3200 	strex	r2, r3, [r5]
   2d6ae:	2a00      	cmp	r2, #0
   2d6b0:	d1f7      	bne.n	2d6a2 <bt_smp_request_ltk+0x178>
   2d6b2:	f3bf 8f5b 	dmb	ish
		return true;
   2d6b6:	2001      	movs	r0, #1
   2d6b8:	e76f      	b.n	2d59a <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   2d6ba:	f1c4 0210 	rsb	r2, r4, #16
   2d6be:	2100      	movs	r1, #0
   2d6c0:	9b07      	ldr	r3, [sp, #28]
   2d6c2:	1918      	adds	r0, r3, r4
   2d6c4:	f7fd f90f 	bl	2a8e6 <memset>
   2d6c8:	e7e8      	b.n	2d69c <bt_smp_request_ltk+0x172>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2d6ca:	2202      	movs	r2, #2
   2d6cc:	2106      	movs	r1, #6
   2d6ce:	4620      	mov	r0, r4
   2d6d0:	f7ea fa20 	bl	17b14 <bt_conn_security_changed>
   2d6d4:	e75d      	b.n	2d592 <bt_smp_request_ltk+0x68>
		return false;
   2d6d6:	2000      	movs	r0, #0
   2d6d8:	e75f      	b.n	2d59a <bt_smp_request_ltk+0x70>

0002d6da <bt_smp_sign>:
}
   2d6da:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d6de:	4770      	bx	lr

0002d6e0 <bt_smp_start_security>:
{
   2d6e0:	b508      	push	{r3, lr}
	switch (conn->role) {
   2d6e2:	78c3      	ldrb	r3, [r0, #3]
   2d6e4:	2b01      	cmp	r3, #1
   2d6e6:	d102      	bne.n	2d6ee <bt_smp_start_security+0xe>
		return smp_send_security_req(conn);
   2d6e8:	f7ff fdd4 	bl	2d294 <smp_send_security_req>
}
   2d6ec:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2d6ee:	f06f 0015 	mvn.w	r0, #21
   2d6f2:	e7fb      	b.n	2d6ec <bt_smp_start_security+0xc>

0002d6f4 <smp_error>:
{
   2d6f4:	b570      	push	{r4, r5, r6, lr}
   2d6f6:	b082      	sub	sp, #8
   2d6f8:	4604      	mov	r4, r0
   2d6fa:	460d      	mov	r5, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d6fc:	f3bf 8f5b 	dmb	ish
   2d700:	6843      	ldr	r3, [r0, #4]
   2d702:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2d706:	f013 0f08 	tst.w	r3, #8
   2d70a:	d107      	bne.n	2d71c <smp_error+0x28>
   2d70c:	f3bf 8f5b 	dmb	ish
   2d710:	6843      	ldr	r3, [r0, #4]
   2d712:	f3bf 8f5b 	dmb	ish
   2d716:	f013 0f02 	tst.w	r3, #2
   2d71a:	d01a      	beq.n	2d752 <smp_error+0x5e>
		smp_pairing_complete(smp, reason);
   2d71c:	4629      	mov	r1, r5
   2d71e:	4620      	mov	r0, r4
   2d720:	f7ee fe0a 	bl	1c338 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2d724:	2201      	movs	r2, #1
   2d726:	2105      	movs	r1, #5
   2d728:	4620      	mov	r0, r4
   2d72a:	f7ff fc75 	bl	2d018 <smp_create_pdu>
	if (!buf) {
   2d72e:	4606      	mov	r6, r0
   2d730:	b1e8      	cbz	r0, 2d76e <smp_error+0x7a>
   2d732:	2101      	movs	r1, #1
   2d734:	3008      	adds	r0, #8
   2d736:	f7ef fde7 	bl	1d308 <net_buf_simple_add>
	rsp->reason = reason;
   2d73a:	7005      	strb	r5, [r0, #0]
   2d73c:	2300      	movs	r3, #0
   2d73e:	9300      	str	r3, [sp, #0]
   2d740:	4632      	mov	r2, r6
   2d742:	2106      	movs	r1, #6
   2d744:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2d748:	f7fe f8dd 	bl	2b906 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2d74c:	b950      	cbnz	r0, 2d764 <smp_error+0x70>
}
   2d74e:	b002      	add	sp, #8
   2d750:	bd70      	pop	{r4, r5, r6, pc}
   2d752:	f3bf 8f5b 	dmb	ish
   2d756:	6843      	ldr	r3, [r0, #4]
   2d758:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2d75c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2d760:	d0e0      	beq.n	2d724 <smp_error+0x30>
   2d762:	e7db      	b.n	2d71c <smp_error+0x28>
		net_buf_unref(buf);
   2d764:	4630      	mov	r0, r6
   2d766:	f7ef fcb7 	bl	1d0d8 <net_buf_unref>
	return 0;
   2d76a:	2000      	movs	r0, #0
   2d76c:	e7ef      	b.n	2d74e <smp_error+0x5a>
		return -ENOBUFS;
   2d76e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d772:	e7ec      	b.n	2d74e <smp_error+0x5a>

0002d774 <bt_smp_dhkey_ready>:
{
   2d774:	b538      	push	{r3, r4, r5, lr}
   2d776:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2d778:	2008      	movs	r0, #8
   2d77a:	f7ed fa2f 	bl	1abdc <smp_find>
	if (smp) {
   2d77e:	b198      	cbz	r0, 2d7a8 <bt_smp_dhkey_ready+0x34>
   2d780:	4605      	mov	r5, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2d782:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d784:	f3bf 8f5b 	dmb	ish
   2d788:	e853 2f00 	ldrex	r2, [r3]
   2d78c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   2d790:	e843 2100 	strex	r1, r2, [r3]
   2d794:	2900      	cmp	r1, #0
   2d796:	d1f7      	bne.n	2d788 <bt_smp_dhkey_ready+0x14>
   2d798:	f3bf 8f5b 	dmb	ish
		err = smp_dhkey_ready(smp, dhkey);
   2d79c:	4621      	mov	r1, r4
   2d79e:	4628      	mov	r0, r5
   2d7a0:	f7ff fe6f 	bl	2d482 <smp_dhkey_ready>
		if (err) {
   2d7a4:	4601      	mov	r1, r0
   2d7a6:	b908      	cbnz	r0, 2d7ac <bt_smp_dhkey_ready+0x38>
{
   2d7a8:	2500      	movs	r5, #0
   2d7aa:	e009      	b.n	2d7c0 <bt_smp_dhkey_ready+0x4c>
			smp_error(smp, err);
   2d7ac:	4628      	mov	r0, r5
   2d7ae:	f7ff ffa1 	bl	2d6f4 <smp_error>
   2d7b2:	e7f9      	b.n	2d7a8 <bt_smp_dhkey_ready+0x34>
				smp_error(smp, err);
   2d7b4:	4601      	mov	r1, r0
   2d7b6:	4620      	mov	r0, r4
   2d7b8:	f7ff ff9c 	bl	2d6f4 <smp_error>
	} while (smp && err);
   2d7bc:	b164      	cbz	r4, 2d7d8 <bt_smp_dhkey_ready+0x64>
   2d7be:	b15d      	cbz	r5, 2d7d8 <bt_smp_dhkey_ready+0x64>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2d7c0:	2007      	movs	r0, #7
   2d7c2:	f7ed fa0b 	bl	1abdc <smp_find>
		if (smp) {
   2d7c6:	4604      	mov	r4, r0
   2d7c8:	2800      	cmp	r0, #0
   2d7ca:	d0f7      	beq.n	2d7bc <bt_smp_dhkey_ready+0x48>
			err = smp_dhkey_generate(smp);
   2d7cc:	f7ed fbd2 	bl	1af74 <smp_dhkey_generate>
   2d7d0:	4605      	mov	r5, r0
			if (err) {
   2d7d2:	2800      	cmp	r0, #0
   2d7d4:	d0f2      	beq.n	2d7bc <bt_smp_dhkey_ready+0x48>
   2d7d6:	e7ed      	b.n	2d7b4 <bt_smp_dhkey_ready+0x40>
}
   2d7d8:	bd38      	pop	{r3, r4, r5, pc}

0002d7da <bt_smp_encrypt_change>:
{
   2d7da:	b570      	push	{r4, r5, r6, lr}
   2d7dc:	4605      	mov	r5, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2d7de:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_conn *conn = chan->conn;
   2d7e2:	4604      	mov	r4, r0
   2d7e4:	f854 29ec 	ldr.w	r2, [r4], #-236
   2d7e8:	f3bf 8f5b 	dmb	ish
   2d7ec:	e854 3f00 	ldrex	r3, [r4]
   2d7f0:	f023 0002 	bic.w	r0, r3, #2
   2d7f4:	e844 0c00 	strex	ip, r0, [r4]
   2d7f8:	f1bc 0f00 	cmp.w	ip, #0
   2d7fc:	d1f6      	bne.n	2d7ec <bt_smp_encrypt_change+0x12>
   2d7fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2d802:	f013 0f02 	tst.w	r3, #2
   2d806:	d002      	beq.n	2d80e <bt_smp_encrypt_change+0x34>
	if (hci_status) {
   2d808:	b911      	cbnz	r1, 2d810 <bt_smp_encrypt_change+0x36>
	if (!conn->encrypt) {
   2d80a:	7ad3      	ldrb	r3, [r2, #11]
   2d80c:	b9fb      	cbnz	r3, 2d84e <bt_smp_encrypt_change+0x74>
}
   2d80e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d810:	f3bf 8f5b 	dmb	ish
   2d814:	f855 3cec 	ldr.w	r3, [r5, #-236]
   2d818:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2d81c:	f013 0f08 	tst.w	r3, #8
   2d820:	d0f5      	beq.n	2d80e <bt_smp_encrypt_change+0x34>
			uint8_t smp_err = smp_err_get(
   2d822:	4608      	mov	r0, r1
   2d824:	f7fd fa3f 	bl	2aca6 <bt_security_err_get>
   2d828:	f7ff fa59 	bl	2ccde <smp_err_get>
   2d82c:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d82e:	f3bf 8f5b 	dmb	ish
   2d832:	e854 3f00 	ldrex	r3, [r4]
   2d836:	f043 0304 	orr.w	r3, r3, #4
   2d83a:	e844 3200 	strex	r2, r3, [r4]
   2d83e:	2a00      	cmp	r2, #0
   2d840:	d1f7      	bne.n	2d832 <bt_smp_encrypt_change+0x58>
   2d842:	f3bf 8f5b 	dmb	ish
			smp_pairing_complete(smp, smp_err);
   2d846:	4630      	mov	r0, r6
   2d848:	f7ee fd76 	bl	1c338 <smp_pairing_complete>
		return;
   2d84c:	e7df      	b.n	2d80e <bt_smp_encrypt_change+0x34>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d84e:	f3bf 8f5b 	dmb	ish
   2d852:	f855 3cec 	ldr.w	r3, [r5, #-236]
   2d856:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2d85a:	f013 0f08 	tst.w	r3, #8
   2d85e:	d044      	beq.n	2d8ea <bt_smp_encrypt_change+0x110>
   2d860:	f3bf 8f5b 	dmb	ish
   2d864:	f855 3cec 	ldr.w	r3, [r5, #-236]
   2d868:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2d86c:	f013 0f20 	tst.w	r3, #32
   2d870:	d021      	beq.n	2d8b6 <bt_smp_encrypt_change+0xdc>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2d872:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   2d876:	f013 0f08 	tst.w	r3, #8
   2d87a:	d010      	beq.n	2d89e <bt_smp_encrypt_change+0xc4>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
   2d87c:	f815 3c07 	ldrb.w	r3, [r5, #-7]
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2d880:	f013 0f08 	tst.w	r3, #8
   2d884:	d00b      	beq.n	2d89e <bt_smp_encrypt_change+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d886:	f3bf 8f5b 	dmb	ish
   2d88a:	e854 3f00 	ldrex	r3, [r4]
   2d88e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d892:	e844 3200 	strex	r2, r3, [r4]
   2d896:	2a00      	cmp	r2, #0
   2d898:	d1f7      	bne.n	2d88a <bt_smp_encrypt_change+0xb0>
   2d89a:	f3bf 8f5b 	dmb	ish
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   2d89e:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   2d8a2:	f023 0308 	bic.w	r3, r3, #8
   2d8a6:	f805 3c08 	strb.w	r3, [r5, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   2d8aa:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   2d8ae:	f023 0308 	bic.w	r3, r3, #8
   2d8b2:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2d8b6:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   2d8ba:	f013 0f01 	tst.w	r3, #1
   2d8be:	d118      	bne.n	2d8f2 <bt_smp_encrypt_change+0x118>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2d8c0:	f013 0f02 	tst.w	r3, #2
   2d8c4:	d13f      	bne.n	2d946 <bt_smp_encrypt_change+0x16c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2d8c6:	f013 0f04 	tst.w	r3, #4
   2d8ca:	d020      	beq.n	2d90e <bt_smp_encrypt_change+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2d8cc:	f1a5 03f0 	sub.w	r3, r5, #240	; 0xf0
   2d8d0:	f3bf 8f5b 	dmb	ish
   2d8d4:	e853 2f00 	ldrex	r2, [r3]
   2d8d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2d8dc:	e843 2100 	strex	r1, r2, [r3]
   2d8e0:	2900      	cmp	r1, #0
   2d8e2:	d1f7      	bne.n	2d8d4 <bt_smp_encrypt_change+0xfa>
   2d8e4:	f3bf 8f5b 	dmb	ish
}
   2d8e8:	e011      	b.n	2d90e <bt_smp_encrypt_change+0x134>
		smp_reset(smp);
   2d8ea:	4630      	mov	r0, r6
   2d8ec:	f7ff fb0c 	bl	2cf08 <smp_reset>
		return;
   2d8f0:	e78d      	b.n	2d80e <bt_smp_encrypt_change+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   2d8f2:	f1a5 03f0 	sub.w	r3, r5, #240	; 0xf0
   2d8f6:	f3bf 8f5b 	dmb	ish
   2d8fa:	e853 2f00 	ldrex	r2, [r3]
   2d8fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2d902:	e843 2100 	strex	r1, r2, [r3]
   2d906:	2900      	cmp	r1, #0
   2d908:	d1f7      	bne.n	2d8fa <bt_smp_encrypt_change+0x120>
   2d90a:	f3bf 8f5b 	dmb	ish
   2d90e:	f3bf 8f5b 	dmb	ish
   2d912:	e854 3f00 	ldrex	r3, [r4]
   2d916:	f043 0304 	orr.w	r3, r3, #4
   2d91a:	e844 3200 	strex	r2, r3, [r4]
   2d91e:	2a00      	cmp	r2, #0
   2d920:	d1f7      	bne.n	2d912 <bt_smp_encrypt_change+0x138>
   2d922:	f3bf 8f5b 	dmb	ish
	if (bt_smp_distribute_keys(smp)) {
   2d926:	4630      	mov	r0, r6
   2d928:	f7ed fb02 	bl	1af30 <bt_smp_distribute_keys>
   2d92c:	2800      	cmp	r0, #0
   2d92e:	f47f af6e 	bne.w	2d80e <bt_smp_encrypt_change+0x34>
	if (!smp->local_dist && !smp->remote_dist) {
   2d932:	f835 3c08 	ldrh.w	r3, [r5, #-8]
   2d936:	2b00      	cmp	r3, #0
   2d938:	f47f af69 	bne.w	2d80e <bt_smp_encrypt_change+0x34>
		smp_pairing_complete(smp, 0);
   2d93c:	2100      	movs	r1, #0
   2d93e:	4630      	mov	r0, r6
   2d940:	f7ee fcfa 	bl	1c338 <smp_pairing_complete>
   2d944:	e763      	b.n	2d80e <bt_smp_encrypt_change+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2d946:	f1a5 03f0 	sub.w	r3, r5, #240	; 0xf0
   2d94a:	f3bf 8f5b 	dmb	ish
   2d94e:	e853 2f00 	ldrex	r2, [r3]
   2d952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2d956:	e843 2100 	strex	r1, r2, [r3]
   2d95a:	2900      	cmp	r1, #0
   2d95c:	d1f7      	bne.n	2d94e <bt_smp_encrypt_change+0x174>
   2d95e:	f3bf 8f5b 	dmb	ish
   2d962:	e7d4      	b.n	2d90e <bt_smp_encrypt_change+0x134>

0002d964 <smp_ident_sent>:
{
   2d964:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2d966:	2101      	movs	r1, #1
   2d968:	f7ee ff50 	bl	1c80c <smp_check_complete>
}
   2d96c:	bd08      	pop	{r3, pc}

0002d96e <bt_smp_disconnected>:
{
   2d96e:	b570      	push	{r4, r5, r6, lr}
   2d970:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2d972:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2d976:	f850 3bf0 	ldr.w	r3, [r0], #240
   2d97a:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2d97e:	f7f5 fcb3 	bl	232e8 <k_work_cancel_delayable>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d982:	f3bf 8f5b 	dmb	ish
   2d986:	f854 3cec 	ldr.w	r3, [r4, #-236]
   2d98a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2d98e:	f013 0f08 	tst.w	r3, #8
   2d992:	d108      	bne.n	2d9a6 <bt_smp_disconnected+0x38>
   2d994:	f3bf 8f5b 	dmb	ish
   2d998:	f854 3cec 	ldr.w	r3, [r4, #-236]
   2d99c:	f3bf 8f5b 	dmb	ish
   2d9a0:	f013 0f02 	tst.w	r3, #2
   2d9a4:	d014      	beq.n	2d9d0 <bt_smp_disconnected+0x62>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2d9a6:	2108      	movs	r1, #8
   2d9a8:	4630      	mov	r0, r6
   2d9aa:	f7ee fcc5 	bl	1c338 <smp_pairing_complete>
	if (keys) {
   2d9ae:	b145      	cbz	r5, 2d9c2 <bt_smp_disconnected+0x54>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2d9b0:	89eb      	ldrh	r3, [r5, #14]
   2d9b2:	b11b      	cbz	r3, 2d9bc <bt_smp_disconnected+0x4e>
		    (keys->flags & BT_KEYS_DEBUG))) {
   2d9b4:	7b6b      	ldrb	r3, [r5, #13]
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2d9b6:	f013 0f02 	tst.w	r3, #2
   2d9ba:	d002      	beq.n	2d9c2 <bt_smp_disconnected+0x54>
			bt_keys_clear(keys);
   2d9bc:	4628      	mov	r0, r5
   2d9be:	f7ef f92d 	bl	1cc1c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2d9c2:	f44f 7204 	mov.w	r2, #528	; 0x210
   2d9c6:	2100      	movs	r1, #0
   2d9c8:	4630      	mov	r0, r6
   2d9ca:	f7fc ff8c 	bl	2a8e6 <memset>
}
   2d9ce:	bd70      	pop	{r4, r5, r6, pc}
   2d9d0:	f3bf 8f5b 	dmb	ish
   2d9d4:	f854 3cec 	ldr.w	r3, [r4, #-236]
   2d9d8:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2d9dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2d9e0:	d0e5      	beq.n	2d9ae <bt_smp_disconnected+0x40>
   2d9e2:	e7e0      	b.n	2d9a6 <bt_smp_disconnected+0x38>

0002d9e4 <id_add>:
{
   2d9e4:	b508      	push	{r3, lr}
	bt_id_add(keys);
   2d9e6:	f7e8 fc7b 	bl	162e0 <bt_id_add>
}
   2d9ea:	bd08      	pop	{r3, pc}

0002d9ec <bt_keys_add_type>:
	keys->keys |= type;
   2d9ec:	89c3      	ldrh	r3, [r0, #14]
   2d9ee:	4319      	orrs	r1, r3
   2d9f0:	81c1      	strh	r1, [r0, #14]
}
   2d9f2:	4770      	bx	lr

0002d9f4 <bt_keys_get_type>:
{
   2d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d9f6:	4606      	mov	r6, r0
   2d9f8:	460c      	mov	r4, r1
   2d9fa:	4615      	mov	r5, r2
	keys = bt_keys_find(type, id, addr);
   2d9fc:	f7ef f85a 	bl	1cab4 <bt_keys_find>
	if (keys) {
   2da00:	4607      	mov	r7, r0
   2da02:	b108      	cbz	r0, 2da08 <bt_keys_get_type+0x14>
}
   2da04:	4638      	mov	r0, r7
   2da06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	keys = bt_keys_get_addr(id, addr);
   2da08:	4629      	mov	r1, r5
   2da0a:	4620      	mov	r0, r4
   2da0c:	f7ee ffe6 	bl	1c9dc <bt_keys_get_addr>
	if (!keys) {
   2da10:	4607      	mov	r7, r0
   2da12:	2800      	cmp	r0, #0
   2da14:	d0f6      	beq.n	2da04 <bt_keys_get_type+0x10>
	bt_keys_add_type(keys, type);
   2da16:	4631      	mov	r1, r6
   2da18:	f7ff ffe8 	bl	2d9ec <bt_keys_add_type>
	return keys;
   2da1c:	e7f2      	b.n	2da04 <bt_keys_get_type+0x10>

0002da1e <fixed_data_unref>:
}
   2da1e:	4770      	bx	lr

0002da20 <data_alloc>:
{
   2da20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2da24:	4604      	mov	r4, r0
   2da26:	460d      	mov	r5, r1
   2da28:	4617      	mov	r7, r2
   2da2a:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2da2c:	7980      	ldrb	r0, [r0, #6]
   2da2e:	f7ef f9e9 	bl	1ce04 <net_buf_pool_get>
	return pool->alloc->cb->alloc(buf, size, timeout);
   2da32:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2da34:	681b      	ldr	r3, [r3, #0]
   2da36:	f8d3 8000 	ldr.w	r8, [r3]
   2da3a:	463a      	mov	r2, r7
   2da3c:	4633      	mov	r3, r6
   2da3e:	4629      	mov	r1, r5
   2da40:	4620      	mov	r0, r4
   2da42:	47c0      	blx	r8
}
   2da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002da48 <data_unref>:
{
   2da48:	b538      	push	{r3, r4, r5, lr}
   2da4a:	4604      	mov	r4, r0
   2da4c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2da4e:	7980      	ldrb	r0, [r0, #6]
   2da50:	f7ef f9d8 	bl	1ce04 <net_buf_pool_get>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2da54:	7963      	ldrb	r3, [r4, #5]
   2da56:	f013 0f02 	tst.w	r3, #2
   2da5a:	d105      	bne.n	2da68 <data_unref+0x20>
	pool->alloc->cb->unref(buf, data);
   2da5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2da5e:	681b      	ldr	r3, [r3, #0]
   2da60:	689b      	ldr	r3, [r3, #8]
   2da62:	4629      	mov	r1, r5
   2da64:	4620      	mov	r0, r4
   2da66:	4798      	blx	r3
}
   2da68:	bd38      	pop	{r3, r4, r5, pc}

0002da6a <fixed_data_alloc>:
{
   2da6a:	b570      	push	{r4, r5, r6, lr}
   2da6c:	4604      	mov	r4, r0
   2da6e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2da70:	7980      	ldrb	r0, [r0, #6]
   2da72:	f7ef f9c7 	bl	1ce04 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2da76:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2da78:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2da7a:	682a      	ldr	r2, [r5, #0]
   2da7c:	6819      	ldr	r1, [r3, #0]
   2da7e:	428a      	cmp	r2, r1
   2da80:	bf28      	it	cs
   2da82:	460a      	movcs	r2, r1
   2da84:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2da86:	685d      	ldr	r5, [r3, #4]
   2da88:	681e      	ldr	r6, [r3, #0]
   2da8a:	4620      	mov	r0, r4
   2da8c:	f7ef f9c2 	bl	1ce14 <net_buf_id>
}
   2da90:	fb00 5006 	mla	r0, r0, r6, r5
   2da94:	bd70      	pop	{r4, r5, r6, pc}

0002da96 <net_buf_alloc_fixed>:
{
   2da96:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2da98:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2da9a:	6849      	ldr	r1, [r1, #4]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2da9c:	6809      	ldr	r1, [r1, #0]
   2da9e:	f7ef f9eb 	bl	1ce78 <net_buf_alloc_len>
}
   2daa2:	bd08      	pop	{r3, pc}

0002daa4 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2daa4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2daa6:	6803      	ldr	r3, [r0, #0]
   2daa8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2daaa:	2102      	movs	r1, #2
   2daac:	f7ef fbce 	bl	1d24c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2dab0:	4620      	mov	r0, r4
   2dab2:	bd10      	pop	{r4, pc}

0002dab4 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2dab4:	6802      	ldr	r2, [r0, #0]
   2dab6:	6880      	ldr	r0, [r0, #8]
}
   2dab8:	1a10      	subs	r0, r2, r0
   2daba:	4770      	bx	lr

0002dabc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2dabc:	b538      	push	{r3, r4, r5, lr}
   2dabe:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2dac0:	88c5      	ldrh	r5, [r0, #6]
   2dac2:	f7ff fff7 	bl	2dab4 <net_buf_simple_headroom>
   2dac6:	1a2d      	subs	r5, r5, r0
   2dac8:	88a0      	ldrh	r0, [r4, #4]
}
   2daca:	1a28      	subs	r0, r5, r0
   2dacc:	bd38      	pop	{r3, r4, r5, pc}

0002dace <net_buf_simple_add_mem>:
{
   2dace:	b538      	push	{r3, r4, r5, lr}
   2dad0:	460d      	mov	r5, r1
   2dad2:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2dad4:	4611      	mov	r1, r2
   2dad6:	f7ef fc17 	bl	1d308 <net_buf_simple_add>
   2dada:	4622      	mov	r2, r4
   2dadc:	4629      	mov	r1, r5
   2dade:	f7fc fede 	bl	2a89e <memcpy>
}
   2dae2:	bd38      	pop	{r3, r4, r5, pc}

0002dae4 <net_buf_simple_add_u8>:
{
   2dae4:	b510      	push	{r4, lr}
   2dae6:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2dae8:	2101      	movs	r1, #1
   2daea:	f7ef fc0d 	bl	1d308 <net_buf_simple_add>
	*u8 = val;
   2daee:	7004      	strb	r4, [r0, #0]
}
   2daf0:	bd10      	pop	{r4, pc}

0002daf2 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2daf2:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2daf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2daf8:	0089      	lsls	r1, r1, #2
   2dafa:	3140      	adds	r1, #64	; 0x40
}
   2dafc:	4408      	add	r0, r1
   2dafe:	4770      	bx	lr

0002db00 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2db00:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2db02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2db06:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2db0a:	4770      	bx	lr

0002db0c <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2db0c:	6900      	ldr	r0, [r0, #16]
}
   2db0e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   2db12:	4770      	bx	lr

0002db14 <set_off_state>:
   2db14:	f04f 0340 	mov.w	r3, #64	; 0x40
   2db18:	f3ef 8211 	mrs	r2, BASEPRI
   2db1c:	f383 8812 	msr	BASEPRI_MAX, r3
   2db20:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2db24:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2db26:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2db2a:	d001      	beq.n	2db30 <set_off_state+0x1c>
   2db2c:	428b      	cmp	r3, r1
   2db2e:	d107      	bne.n	2db40 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2db30:	2301      	movs	r3, #1
   2db32:	6003      	str	r3, [r0, #0]
	int err = 0;
   2db34:	2000      	movs	r0, #0
	__asm__ volatile(
   2db36:	f382 8811 	msr	BASEPRI, r2
   2db3a:	f3bf 8f6f 	isb	sy
}
   2db3e:	4770      	bx	lr
		err = -EPERM;
   2db40:	f04f 30ff 	mov.w	r0, #4294967295
   2db44:	e7f7      	b.n	2db36 <set_off_state+0x22>

0002db46 <set_starting_state>:
{
   2db46:	b410      	push	{r4}
	__asm__ volatile(
   2db48:	f04f 0340 	mov.w	r3, #64	; 0x40
   2db4c:	f3ef 8211 	mrs	r2, BASEPRI
   2db50:	f383 8812 	msr	BASEPRI_MAX, r3
   2db54:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2db58:	6803      	ldr	r3, [r0, #0]
   2db5a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2db5e:	f003 0307 	and.w	r3, r3, #7
   2db62:	2b01      	cmp	r3, #1
   2db64:	d009      	beq.n	2db7a <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   2db66:	428c      	cmp	r4, r1
   2db68:	d00a      	beq.n	2db80 <set_starting_state+0x3a>
		err = -EPERM;
   2db6a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2db6e:	f382 8811 	msr	BASEPRI, r2
   2db72:	f3bf 8f6f 	isb	sy
}
   2db76:	bc10      	pop	{r4}
   2db78:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2db7a:	6001      	str	r1, [r0, #0]
	int err = 0;
   2db7c:	2000      	movs	r0, #0
   2db7e:	e7f6      	b.n	2db6e <set_starting_state+0x28>
		err = -EALREADY;
   2db80:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2db84:	e7f3      	b.n	2db6e <set_starting_state+0x28>

0002db86 <set_on_state>:
	__asm__ volatile(
   2db86:	f04f 0340 	mov.w	r3, #64	; 0x40
   2db8a:	f3ef 8211 	mrs	r2, BASEPRI
   2db8e:	f383 8812 	msr	BASEPRI_MAX, r3
   2db92:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2db96:	6803      	ldr	r3, [r0, #0]
   2db98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2db9c:	f043 0302 	orr.w	r3, r3, #2
   2dba0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2dba2:	f382 8811 	msr	BASEPRI, r2
   2dba6:	f3bf 8f6f 	isb	sy
}
   2dbaa:	4770      	bx	lr

0002dbac <clkstarted_handle>:
{
   2dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dbae:	4606      	mov	r6, r0
   2dbb0:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2dbb2:	f7ff ff9e 	bl	2daf2 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2dbb6:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2dbb8:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2dbba:	2300      	movs	r3, #0
   2dbbc:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2dbc0:	f7ff ffe1 	bl	2db86 <set_on_state>
	if (callback) {
   2dbc4:	b11d      	cbz	r5, 2dbce <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2dbc6:	463a      	mov	r2, r7
   2dbc8:	4621      	mov	r1, r4
   2dbca:	4630      	mov	r0, r6
   2dbcc:	47a8      	blx	r5
}
   2dbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dbd0 <async_start>:
{
   2dbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dbd4:	4606      	mov	r6, r0
   2dbd6:	4690      	mov	r8, r2
   2dbd8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2dbda:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2dbdc:	4629      	mov	r1, r5
   2dbde:	f7ff ff88 	bl	2daf2 <get_sub_data>
   2dbe2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2dbe4:	9906      	ldr	r1, [sp, #24]
   2dbe6:	3008      	adds	r0, #8
   2dbe8:	f7ff ffad 	bl	2db46 <set_starting_state>
	if (err < 0) {
   2dbec:	2800      	cmp	r0, #0
   2dbee:	db09      	blt.n	2dc04 <async_start+0x34>
	subdata->cb = cb;
   2dbf0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2dbf4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2dbf6:	4629      	mov	r1, r5
   2dbf8:	4630      	mov	r0, r6
   2dbfa:	f7ff ff81 	bl	2db00 <get_sub_config>
   2dbfe:	6803      	ldr	r3, [r0, #0]
   2dc00:	4798      	blx	r3
	return 0;
   2dc02:	2000      	movs	r0, #0
}
   2dc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002dc08 <api_start>:
{
   2dc08:	b510      	push	{r4, lr}
   2dc0a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2dc0c:	2480      	movs	r4, #128	; 0x80
   2dc0e:	9400      	str	r4, [sp, #0]
   2dc10:	f7ff ffde 	bl	2dbd0 <async_start>
}
   2dc14:	b002      	add	sp, #8
   2dc16:	bd10      	pop	{r4, pc}

0002dc18 <onoff_started_callback>:
{
   2dc18:	b510      	push	{r4, lr}
   2dc1a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2dc1c:	b2c9      	uxtb	r1, r1
   2dc1e:	f7ff ff75 	bl	2db0c <get_onoff_manager>
	notify(mgr, 0);
   2dc22:	2100      	movs	r1, #0
   2dc24:	47a0      	blx	r4
}
   2dc26:	bd10      	pop	{r4, pc}

0002dc28 <hfclk_start>:
{
   2dc28:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2dc2a:	2001      	movs	r0, #1
   2dc2c:	f7f2 fd4a 	bl	206c4 <nrfx_clock_start>
}
   2dc30:	bd08      	pop	{r3, pc}

0002dc32 <lfclk_start>:
{
   2dc32:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2dc34:	2000      	movs	r0, #0
   2dc36:	f7f2 fd45 	bl	206c4 <nrfx_clock_start>
}
   2dc3a:	bd08      	pop	{r3, pc}

0002dc3c <hfclk_stop>:
{
   2dc3c:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2dc3e:	2001      	movs	r0, #1
   2dc40:	f7f2 fd60 	bl	20704 <nrfx_clock_stop>
}
   2dc44:	bd08      	pop	{r3, pc}

0002dc46 <lfclk_stop>:
{
   2dc46:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2dc48:	2000      	movs	r0, #0
   2dc4a:	f7f2 fd5b 	bl	20704 <nrfx_clock_stop>
}
   2dc4e:	bd08      	pop	{r3, pc}

0002dc50 <api_stop>:
{
   2dc50:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2dc52:	2280      	movs	r2, #128	; 0x80
   2dc54:	f7ef fc04 	bl	1d460 <stop>
}
   2dc58:	bd08      	pop	{r3, pc}

0002dc5a <blocking_start_callback>:
{
   2dc5a:	b508      	push	{r3, lr}
   2dc5c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2dc5e:	f7f4 fe1b 	bl	22898 <z_impl_k_sem_give>
}
   2dc62:	bd08      	pop	{r3, pc}

0002dc64 <gpio_nrfx_port_get_raw>:
	return port->config;
   2dc64:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dc66:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2dc68:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2dc6c:	600b      	str	r3, [r1, #0]
}
   2dc6e:	2000      	movs	r0, #0
   2dc70:	4770      	bx	lr

0002dc72 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2dc72:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dc74:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2dc76:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2dc7a:	4042      	eors	r2, r0
   2dc7c:	400a      	ands	r2, r1
   2dc7e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2dc80:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2dc84:	2000      	movs	r0, #0
   2dc86:	4770      	bx	lr

0002dc88 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2dc88:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dc8a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2dc8c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2dc90:	2000      	movs	r0, #0
   2dc92:	4770      	bx	lr

0002dc94 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2dc94:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dc96:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2dc98:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2dc9c:	2000      	movs	r0, #0
   2dc9e:	4770      	bx	lr

0002dca0 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2dca0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dca2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2dca4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2dca8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2dcaa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2dcae:	2000      	movs	r0, #0
   2dcb0:	4770      	bx	lr

0002dcb2 <led_pwm_on>:
{
   2dcb2:	b508      	push	{r3, lr}
	return led_pwm_set_brightness(dev, led, 100);
   2dcb4:	2264      	movs	r2, #100	; 0x64
   2dcb6:	f7f0 faf5 	bl	1e2a4 <led_pwm_set_brightness>
}
   2dcba:	bd08      	pop	{r3, pc}

0002dcbc <led_pwm_off>:
{
   2dcbc:	b508      	push	{r3, lr}
	return led_pwm_set_brightness(dev, led, 0);
   2dcbe:	2200      	movs	r2, #0
   2dcc0:	f7f0 faf0 	bl	1e2a4 <led_pwm_set_brightness>
}
   2dcc4:	bd08      	pop	{r3, pc}

0002dcc6 <pwm_channel_map>:
{
   2dcc6:	4602      	mov	r2, r0
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   2dcc8:	2000      	movs	r0, #0
   2dcca:	e001      	b.n	2dcd0 <pwm_channel_map+0xa>
   2dccc:	3001      	adds	r0, #1
   2dcce:	b2c0      	uxtb	r0, r0
   2dcd0:	2803      	cmp	r0, #3
   2dcd2:	d807      	bhi.n	2dce4 <pwm_channel_map+0x1e>
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   2dcd4:	5c13      	ldrb	r3, [r2, r0]
   2dcd6:	2bff      	cmp	r3, #255	; 0xff
   2dcd8:	d0f8      	beq.n	2dccc <pwm_channel_map+0x6>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   2dcda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2dcde:	428b      	cmp	r3, r1
   2dce0:	d1f4      	bne.n	2dccc <pwm_channel_map+0x6>
   2dce2:	e000      	b.n	2dce6 <pwm_channel_map+0x20>
	return NRF_PWM_CHANNEL_COUNT;
   2dce4:	2004      	movs	r0, #4
}
   2dce6:	4770      	bx	lr

0002dce8 <pwm_channel_is_active>:
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   2dce8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   2dcec:	8883      	ldrh	r3, [r0, #4]
	uint16_t pulse_cycle =
   2dcee:	f3c3 030e 	ubfx	r3, r3, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   2dcf2:	b123      	cbz	r3, 2dcfe <pwm_channel_is_active+0x16>
   2dcf4:	898a      	ldrh	r2, [r1, #12]
   2dcf6:	429a      	cmp	r2, r3
   2dcf8:	d803      	bhi.n	2dd02 <pwm_channel_is_active+0x1a>
   2dcfa:	2000      	movs	r0, #0
   2dcfc:	4770      	bx	lr
   2dcfe:	2000      	movs	r0, #0
   2dd00:	4770      	bx	lr
   2dd02:	2001      	movs	r0, #1
}
   2dd04:	4770      	bx	lr

0002dd06 <any_other_channel_is_active>:
{
   2dd06:	b570      	push	{r4, r5, r6, lr}
   2dd08:	4605      	mov	r5, r0
   2dd0a:	460e      	mov	r6, r1
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   2dd0c:	2400      	movs	r4, #0
   2dd0e:	e001      	b.n	2dd14 <any_other_channel_is_active+0xe>
   2dd10:	3401      	adds	r4, #1
   2dd12:	b2e4      	uxtb	r4, r4
   2dd14:	2c03      	cmp	r4, #3
   2dd16:	d809      	bhi.n	2dd2c <any_other_channel_is_active+0x26>
		if (i != channel && pwm_channel_is_active(i, data)) {
   2dd18:	42ac      	cmp	r4, r5
   2dd1a:	d0f9      	beq.n	2dd10 <any_other_channel_is_active+0xa>
   2dd1c:	4631      	mov	r1, r6
   2dd1e:	4620      	mov	r0, r4
   2dd20:	f7ff ffe2 	bl	2dce8 <pwm_channel_is_active>
   2dd24:	4603      	mov	r3, r0
   2dd26:	2800      	cmp	r0, #0
   2dd28:	d0f2      	beq.n	2dd10 <any_other_channel_is_active+0xa>
   2dd2a:	e000      	b.n	2dd2e <any_other_channel_is_active+0x28>
	return false;
   2dd2c:	2300      	movs	r3, #0
}
   2dd2e:	4618      	mov	r0, r3
   2dd30:	bd70      	pop	{r4, r5, r6, pc}

0002dd32 <shift_write_context>:
	w_ctx->flash_addr += shift;
   2dd32:	684b      	ldr	r3, [r1, #4]
   2dd34:	4403      	add	r3, r0
   2dd36:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   2dd38:	680b      	ldr	r3, [r1, #0]
   2dd3a:	4403      	add	r3, r0
   2dd3c:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   2dd3e:	688b      	ldr	r3, [r1, #8]
   2dd40:	1a18      	subs	r0, r3, r0
   2dd42:	6088      	str	r0, [r1, #8]
}
   2dd44:	4770      	bx	lr

0002dd46 <erase_op>:
{
   2dd46:	b570      	push	{r4, r5, r6, lr}
   2dd48:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2dd4a:	f000 fec4 	bl	2ead6 <nrfx_nvmc_flash_page_size_get>
   2dd4e:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   2dd50:	7b23      	ldrb	r3, [r4, #12]
   2dd52:	b90b      	cbnz	r3, 2dd58 <erase_op+0x12>
{
   2dd54:	2500      	movs	r5, #0
   2dd56:	e004      	b.n	2dd62 <erase_op+0x1c>
		nrf_flash_sync_get_timestamp_begin();
   2dd58:	f000 fe7e 	bl	2ea58 <nrf_flash_sync_get_timestamp_begin>
   2dd5c:	e7fa      	b.n	2dd54 <erase_op+0xe>
	} while (e_ctx->len > 0);
   2dd5e:	68a3      	ldr	r3, [r4, #8]
   2dd60:	b1b3      	cbz	r3, 2dd90 <erase_op+0x4a>
		if (SUSPEND_POFWARN()) {
   2dd62:	f7f0 fd33 	bl	1e7cc <suspend_pofwarn>
   2dd66:	b9c0      	cbnz	r0, 2dd9a <erase_op+0x54>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2dd68:	6860      	ldr	r0, [r4, #4]
   2dd6a:	f7f3 f863 	bl	20e34 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2dd6e:	68a3      	ldr	r3, [r4, #8]
   2dd70:	1b9b      	subs	r3, r3, r6
   2dd72:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2dd74:	6863      	ldr	r3, [r4, #4]
   2dd76:	4433      	add	r3, r6
   2dd78:	6063      	str	r3, [r4, #4]
		RESUME_POFWARN();
   2dd7a:	f7f0 fd0d 	bl	1e798 <restore_pofwarn>
		i++;
   2dd7e:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   2dd80:	7b23      	ldrb	r3, [r4, #12]
   2dd82:	2b00      	cmp	r3, #0
   2dd84:	d0eb      	beq.n	2dd5e <erase_op+0x18>
			if (nrf_flash_sync_check_time_limit(i)) {
   2dd86:	4628      	mov	r0, r5
   2dd88:	f7f2 fe3c 	bl	20a04 <nrf_flash_sync_check_time_limit>
   2dd8c:	2800      	cmp	r0, #0
   2dd8e:	d0e6      	beq.n	2dd5e <erase_op+0x18>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2dd90:	68a0      	ldr	r0, [r4, #8]
   2dd92:	3800      	subs	r0, #0
   2dd94:	bf18      	it	ne
   2dd96:	2001      	movne	r0, #1
}
   2dd98:	bd70      	pop	{r4, r5, r6, pc}
			return -ECANCELED;
   2dd9a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2dd9e:	e7fb      	b.n	2dd98 <erase_op+0x52>

0002dda0 <erase>:
{
   2dda0:	b500      	push	{lr}
   2dda2:	b085      	sub	sp, #20
	struct flash_context context = {
   2dda4:	2300      	movs	r3, #0
   2dda6:	9300      	str	r3, [sp, #0]
   2dda8:	9303      	str	r3, [sp, #12]
   2ddaa:	9001      	str	r0, [sp, #4]
   2ddac:	9102      	str	r1, [sp, #8]
	return	erase_op(&context);
   2ddae:	4668      	mov	r0, sp
   2ddb0:	f7ff ffc9 	bl	2dd46 <erase_op>
}
   2ddb4:	b005      	add	sp, #20
   2ddb6:	f85d fb04 	ldr.w	pc, [sp], #4

0002ddba <write_op>:
{
   2ddba:	b538      	push	{r3, r4, r5, lr}
   2ddbc:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2ddbe:	7b03      	ldrb	r3, [r0, #12]
   2ddc0:	b9f3      	cbnz	r3, 2de00 <write_op+0x46>
{
   2ddc2:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   2ddc4:	68a3      	ldr	r3, [r4, #8]
   2ddc6:	2b03      	cmp	r3, #3
   2ddc8:	d91d      	bls.n	2de06 <write_op+0x4c>
		if (SUSPEND_POFWARN()) {
   2ddca:	f7f0 fcff 	bl	1e7cc <suspend_pofwarn>
   2ddce:	b9f0      	cbnz	r0, 2de0e <write_op+0x54>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   2ddd0:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2ddd2:	6819      	ldr	r1, [r3, #0]
   2ddd4:	6860      	ldr	r0, [r4, #4]
   2ddd6:	f7f3 f85f 	bl	20e98 <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   2ddda:	f7f0 fcdd 	bl	1e798 <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   2ddde:	4621      	mov	r1, r4
   2dde0:	2004      	movs	r0, #4
   2dde2:	f7ff ffa6 	bl	2dd32 <shift_write_context>
		i++;
   2dde6:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2dde8:	7b23      	ldrb	r3, [r4, #12]
   2ddea:	2b00      	cmp	r3, #0
   2ddec:	d0ea      	beq.n	2ddc4 <write_op+0xa>
			if (nrf_flash_sync_check_time_limit(i)) {
   2ddee:	4628      	mov	r0, r5
   2ddf0:	f7f2 fe08 	bl	20a04 <nrf_flash_sync_check_time_limit>
   2ddf4:	2800      	cmp	r0, #0
   2ddf6:	d0e5      	beq.n	2ddc4 <write_op+0xa>
				nvmc_wait_ready();
   2ddf8:	f7f0 fc4a 	bl	1e690 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
   2ddfc:	2001      	movs	r0, #1
   2ddfe:	e005      	b.n	2de0c <write_op+0x52>
		nrf_flash_sync_get_timestamp_begin();
   2de00:	f000 fe2a 	bl	2ea58 <nrf_flash_sync_get_timestamp_begin>
   2de04:	e7dd      	b.n	2ddc2 <write_op+0x8>
	nvmc_wait_ready();
   2de06:	f7f0 fc43 	bl	1e690 <nvmc_wait_ready>
	return FLASH_OP_DONE;
   2de0a:	2000      	movs	r0, #0
}
   2de0c:	bd38      	pop	{r3, r4, r5, pc}
			return -ECANCELED;
   2de0e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2de12:	e7fb      	b.n	2de0c <write_op+0x52>

0002de14 <write>:
{
   2de14:	b500      	push	{lr}
   2de16:	b085      	sub	sp, #20
	struct flash_context context = {
   2de18:	9100      	str	r1, [sp, #0]
   2de1a:	9001      	str	r0, [sp, #4]
   2de1c:	9202      	str	r2, [sp, #8]
   2de1e:	2300      	movs	r3, #0
   2de20:	f88d 300c 	strb.w	r3, [sp, #12]
	return write_op(&context);
   2de24:	4668      	mov	r0, sp
   2de26:	f7ff ffc8 	bl	2ddba <write_op>
}
   2de2a:	b005      	add	sp, #20
   2de2c:	f85d fb04 	ldr.w	pc, [sp], #4

0002de30 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2de30:	b5f0      	push	{r4, r5, r6, r7, lr}
   2de32:	b083      	sub	sp, #12
   2de34:	460e      	mov	r6, r1
   2de36:	4617      	mov	r7, r2
   2de38:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2de3a:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2de3c:	2300      	movs	r3, #0
   2de3e:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2de40:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2de42:	6953      	ldr	r3, [r2, #20]
   2de44:	466a      	mov	r2, sp
   2de46:	a901      	add	r1, sp, #4
   2de48:	4798      	blx	r3

	while (layout_size--) {
   2de4a:	e014      	b.n	2de76 <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   2de4c:	6823      	ldr	r3, [r4, #0]
   2de4e:	1af3      	subs	r3, r6, r3
   2de50:	fbb3 f5f0 	udiv	r5, r3, r0
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   2de54:	6813      	ldr	r3, [r2, #0]
   2de56:	42ab      	cmp	r3, r5
   2de58:	bf28      	it	cs
   2de5a:	462b      	movcs	r3, r5
		info->start_offset += (index_jmp * info->size);
   2de5c:	6822      	ldr	r2, [r4, #0]
   2de5e:	fb03 2000 	mla	r0, r3, r0, r2
   2de62:	6020      	str	r0, [r4, #0]
		info->index += index_jmp;
   2de64:	68a2      	ldr	r2, [r4, #8]
   2de66:	441a      	add	r2, r3
   2de68:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2de6a:	9a01      	ldr	r2, [sp, #4]
   2de6c:	6811      	ldr	r1, [r2, #0]
   2de6e:	4299      	cmp	r1, r3
   2de70:	d811      	bhi.n	2de96 <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   2de72:	3208      	adds	r2, #8
   2de74:	9201      	str	r2, [sp, #4]
	while (layout_size--) {
   2de76:	9b00      	ldr	r3, [sp, #0]
   2de78:	1e5a      	subs	r2, r3, #1
   2de7a:	9200      	str	r2, [sp, #0]
   2de7c:	b13b      	cbz	r3, 2de8e <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   2de7e:	9a01      	ldr	r2, [sp, #4]
   2de80:	6850      	ldr	r0, [r2, #4]
   2de82:	6060      	str	r0, [r4, #4]
		if (offs == 0) {
   2de84:	2e00      	cmp	r6, #0
   2de86:	d1e1      	bne.n	2de4c <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   2de88:	68a3      	ldr	r3, [r4, #8]
   2de8a:	1afd      	subs	r5, r7, r3
   2de8c:	e7e2      	b.n	2de54 <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2de8e:	f06f 0015 	mvn.w	r0, #21
}
   2de92:	b003      	add	sp, #12
   2de94:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return 0;
   2de96:	2000      	movs	r0, #0
   2de98:	e7fb      	b.n	2de92 <flash_get_page_info+0x62>

0002de9a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2de9a:	b508      	push	{r3, lr}
   2de9c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2de9e:	2200      	movs	r2, #0
   2dea0:	f7ff ffc6 	bl	2de30 <flash_get_page_info>
}
   2dea4:	bd08      	pop	{r3, pc}

0002dea6 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2dea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2deaa:	b086      	sub	sp, #24
   2deac:	4689      	mov	r9, r1
   2deae:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   2deb0:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2deb2:	695b      	ldr	r3, [r3, #20]
   2deb4:	aa01      	add	r2, sp, #4
   2deb6:	a905      	add	r1, sp, #20
   2deb8:	4798      	blx	r3
	off_t off = 0;
   2deba:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2debc:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   2debe:	46a2      	mov	sl, r4
   2dec0:	9b01      	ldr	r3, [sp, #4]
   2dec2:	4553      	cmp	r3, sl
   2dec4:	d916      	bls.n	2def4 <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
   2dec6:	9f05      	ldr	r7, [sp, #20]
   2dec8:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   2decc:	687b      	ldr	r3, [r7, #4]
   2dece:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   2ded0:	2500      	movs	r5, #0
   2ded2:	683b      	ldr	r3, [r7, #0]
   2ded4:	42ab      	cmp	r3, r5
   2ded6:	d90a      	bls.n	2deee <flash_page_foreach+0x48>
			page_info.start_offset = off;
   2ded8:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   2deda:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
   2dedc:	4641      	mov	r1, r8
   2dede:	a802      	add	r0, sp, #8
   2dee0:	47c8      	blx	r9
   2dee2:	b138      	cbz	r0, 2def4 <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
   2dee4:	9b03      	ldr	r3, [sp, #12]
   2dee6:	441c      	add	r4, r3
			page++;
   2dee8:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   2deea:	3501      	adds	r5, #1
   2deec:	e7f1      	b.n	2ded2 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
   2deee:	f10a 0a01 	add.w	sl, sl, #1
   2def2:	e7e5      	b.n	2dec0 <flash_page_foreach+0x1a>
		}
	}
}
   2def4:	b006      	add	sp, #24
   2def6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002defa <endtx_isr>:
	return dev->config;
   2defa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2defc:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2defe:	f04f 0140 	mov.w	r1, #64	; 0x40
   2df02:	f3ef 8211 	mrs	r2, BASEPRI
   2df06:	f381 8812 	msr	BASEPRI_MAX, r1
   2df0a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2df0e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2df12:	b131      	cbz	r1, 2df22 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2df14:	2100      	movs	r1, #0
   2df16:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2df1a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2df1e:	2101      	movs	r1, #1
   2df20:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2df22:	f382 8811 	msr	BASEPRI, r2
   2df26:	f3bf 8f6f 	isb	sy
}
   2df2a:	4770      	bx	lr

0002df2c <uarte_nrfx_isr_int>:
{
   2df2c:	b538      	push	{r3, r4, r5, lr}
   2df2e:	4604      	mov	r4, r0
	return dev->config;
   2df30:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2df32:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2df34:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2df38:	f413 7f80 	tst.w	r3, #256	; 0x100
   2df3c:	d002      	beq.n	2df44 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2df3e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   2df42:	b9db      	cbnz	r3, 2df7c <uarte_nrfx_isr_int+0x50>
	return dev->config;
   2df44:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2df46:	685b      	ldr	r3, [r3, #4]
   2df48:	f013 0f10 	tst.w	r3, #16
   2df4c:	d015      	beq.n	2df7a <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   2df4e:	f04f 0240 	mov.w	r2, #64	; 0x40
   2df52:	f3ef 8311 	mrs	r3, BASEPRI
   2df56:	f382 8812 	msr	BASEPRI_MAX, r2
   2df5a:	f3bf 8f6f 	isb	sy
   2df5e:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2df62:	b112      	cbz	r2, 2df6a <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2df64:	2200      	movs	r2, #0
   2df66:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2df6a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2df6e:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   2df72:	f383 8811 	msr	BASEPRI, r3
   2df76:	f3bf 8f6f 	isb	sy
}
   2df7a:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2df7c:	f7ff ffbd 	bl	2defa <endtx_isr>
   2df80:	e7e0      	b.n	2df44 <uarte_nrfx_isr_int+0x18>

0002df82 <uarte_nrfx_configure>:
{
   2df82:	b570      	push	{r4, r5, r6, lr}
   2df84:	b082      	sub	sp, #8
   2df86:	4605      	mov	r5, r0
   2df88:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   2df8a:	794b      	ldrb	r3, [r1, #5]
   2df8c:	2b01      	cmp	r3, #1
   2df8e:	d006      	beq.n	2df9e <uarte_nrfx_configure+0x1c>
   2df90:	2b03      	cmp	r3, #3
   2df92:	d011      	beq.n	2dfb8 <uarte_nrfx_configure+0x36>
   2df94:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2df98:	4618      	mov	r0, r3
   2df9a:	b002      	add	sp, #8
   2df9c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2df9e:	2300      	movs	r3, #0
   2dfa0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2dfa4:	79a3      	ldrb	r3, [r4, #6]
   2dfa6:	2b03      	cmp	r3, #3
   2dfa8:	d140      	bne.n	2e02c <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   2dfaa:	79e3      	ldrb	r3, [r4, #7]
   2dfac:	b143      	cbz	r3, 2dfc0 <uarte_nrfx_configure+0x3e>
   2dfae:	2b01      	cmp	r3, #1
   2dfb0:	d010      	beq.n	2dfd4 <uarte_nrfx_configure+0x52>
   2dfb2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2dfb6:	e7ef      	b.n	2df98 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2dfb8:	2310      	movs	r3, #16
   2dfba:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   2dfbe:	e7f1      	b.n	2dfa4 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2dfc0:	2300      	movs	r3, #0
   2dfc2:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   2dfc6:	7923      	ldrb	r3, [r4, #4]
   2dfc8:	b183      	cbz	r3, 2dfec <uarte_nrfx_configure+0x6a>
   2dfca:	2b02      	cmp	r3, #2
   2dfcc:	d02a      	beq.n	2e024 <uarte_nrfx_configure+0xa2>
   2dfce:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2dfd2:	e7e1      	b.n	2df98 <uarte_nrfx_configure+0x16>
	return dev->config;
   2dfd4:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   2dfd6:	685b      	ldr	r3, [r3, #4]
   2dfd8:	f003 0201 	and.w	r2, r3, #1
   2dfdc:	f003 0302 	and.w	r3, r3, #2
   2dfe0:	4313      	orrs	r3, r2
   2dfe2:	d026      	beq.n	2e032 <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2dfe4:	2301      	movs	r3, #1
   2dfe6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2dfea:	e7ec      	b.n	2dfc6 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2dfec:	2300      	movs	r3, #0
   2dfee:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2dff2:	6821      	ldr	r1, [r4, #0]
   2dff4:	4628      	mov	r0, r5
   2dff6:	f7f0 fcbb 	bl	1e970 <baudrate_set>
   2dffa:	4603      	mov	r3, r0
   2dffc:	b9e0      	cbnz	r0, 2e038 <uarte_nrfx_configure+0xb6>
	return dev->config;
   2dffe:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   2e000:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2e002:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   2e006:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   2e00a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2e00e:	4331      	orrs	r1, r6
   2e010:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2e012:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   2e016:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   2e018:	3204      	adds	r2, #4
   2e01a:	e894 0003 	ldmia.w	r4, {r0, r1}
   2e01e:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   2e022:	e7b9      	b.n	2df98 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2e024:	230e      	movs	r3, #14
   2e026:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   2e02a:	e7e2      	b.n	2dff2 <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   2e02c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2e030:	e7b2      	b.n	2df98 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   2e032:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2e036:	e7af      	b.n	2df98 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   2e038:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2e03c:	e7ac      	b.n	2df98 <uarte_nrfx_configure+0x16>

0002e03e <uarte_nrfx_config_get>:
{
   2e03e:	460b      	mov	r3, r1
	return dev->data;
   2e040:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   2e042:	6891      	ldr	r1, [r2, #8]
   2e044:	6850      	ldr	r0, [r2, #4]
   2e046:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e04a:	2000      	movs	r0, #0
   2e04c:	4770      	bx	lr

0002e04e <uarte_nrfx_err_check>:
	return dev->config;
   2e04e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2e050:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e052:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e056:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e05a:	4770      	bx	lr

0002e05c <is_tx_ready>:
	return dev->config;
   2e05c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2e05e:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e060:	685b      	ldr	r3, [r3, #4]
   2e062:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e066:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e06a:	b929      	cbnz	r1, 2e078 <is_tx_ready+0x1c>
   2e06c:	b933      	cbnz	r3, 2e07c <is_tx_ready+0x20>
   2e06e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2e072:	b92b      	cbnz	r3, 2e080 <is_tx_ready+0x24>
   2e074:	2000      	movs	r0, #0
   2e076:	4770      	bx	lr
   2e078:	2001      	movs	r0, #1
   2e07a:	4770      	bx	lr
   2e07c:	2000      	movs	r0, #0
   2e07e:	4770      	bx	lr
   2e080:	2001      	movs	r0, #1
}
   2e082:	4770      	bx	lr

0002e084 <uarte_enable>:
	return dev->config;
   2e084:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2e086:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2e088:	2208      	movs	r2, #8
   2e08a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2e08e:	4770      	bx	lr

0002e090 <tx_start>:
{
   2e090:	b510      	push	{r4, lr}
	return dev->config;
   2e092:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2e094:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e096:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e09a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e09e:	2300      	movs	r3, #0
   2e0a0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2e0a4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   2e0a8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   2e0ac:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   2e0b0:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e0b2:	685b      	ldr	r3, [r3, #4]
   2e0b4:	f013 0f10 	tst.w	r3, #16
   2e0b8:	d102      	bne.n	2e0c0 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e0ba:	2301      	movs	r3, #1
   2e0bc:	60a3      	str	r3, [r4, #8]
}
   2e0be:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2e0c0:	2101      	movs	r1, #1
   2e0c2:	f7ff ffdf 	bl	2e084 <uarte_enable>
    p_reg->INTENSET = mask;
   2e0c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2e0ca:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2e0ce:	e7f4      	b.n	2e0ba <tx_start+0x2a>

0002e0d0 <uarte_nrfx_poll_in>:
{
   2e0d0:	b410      	push	{r4}
	return dev->data;
   2e0d2:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   2e0d4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2e0d6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e0d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e0dc:	b152      	cbz	r2, 2e0f4 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   2e0de:	7c62      	ldrb	r2, [r4, #17]
   2e0e0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e0e2:	2000      	movs	r0, #0
   2e0e4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e0e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e0ec:	2201      	movs	r2, #1
   2e0ee:	601a      	str	r2, [r3, #0]
}
   2e0f0:	bc10      	pop	{r4}
   2e0f2:	4770      	bx	lr
		return -1;
   2e0f4:	f04f 30ff 	mov.w	r0, #4294967295
   2e0f8:	e7fa      	b.n	2e0f0 <uarte_nrfx_poll_in+0x20>

0002e0fa <wait_tx_ready>:
{
   2e0fa:	b570      	push	{r4, r5, r6, lr}
   2e0fc:	4606      	mov	r6, r0
   2e0fe:	e014      	b.n	2e12a <wait_tx_ready+0x30>
		if (res) {
   2e100:	b17d      	cbz	r5, 2e122 <wait_tx_ready+0x28>
	__asm__ volatile(
   2e102:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e106:	f3ef 8411 	mrs	r4, BASEPRI
   2e10a:	f383 8812 	msr	BASEPRI_MAX, r3
   2e10e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2e112:	4630      	mov	r0, r6
   2e114:	f7ff ffa2 	bl	2e05c <is_tx_ready>
   2e118:	b9a0      	cbnz	r0, 2e144 <wait_tx_ready+0x4a>
	__asm__ volatile(
   2e11a:	f384 8811 	msr	BASEPRI, r4
   2e11e:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   2e122:	2021      	movs	r0, #33	; 0x21
   2e124:	2100      	movs	r1, #0
   2e126:	f7f6 f9d9 	bl	244dc <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2e12a:	2464      	movs	r4, #100	; 0x64
   2e12c:	4630      	mov	r0, r6
   2e12e:	f7ff ff95 	bl	2e05c <is_tx_ready>
   2e132:	4605      	mov	r5, r0
   2e134:	2800      	cmp	r0, #0
   2e136:	d1e3      	bne.n	2e100 <wait_tx_ready+0x6>
   2e138:	2001      	movs	r0, #1
   2e13a:	f000 fc9f 	bl	2ea7c <nrfx_busy_wait>
   2e13e:	3c01      	subs	r4, #1
   2e140:	d1f4      	bne.n	2e12c <wait_tx_ready+0x32>
   2e142:	e7dd      	b.n	2e100 <wait_tx_ready+0x6>
}
   2e144:	4620      	mov	r0, r4
   2e146:	bd70      	pop	{r4, r5, r6, pc}

0002e148 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2e148:	b510      	push	{r4, lr}
   2e14a:	4604      	mov	r4, r0
   2e14c:	2200      	movs	r2, #0
   2e14e:	2101      	movs	r1, #1
   2e150:	2002      	movs	r0, #2
   2e152:	f7e5 f899 	bl	13288 <z_arm_irq_priority_set>
   2e156:	2002      	movs	r0, #2
   2e158:	f7e5 f864 	bl	13224 <arch_irq_enable>
   2e15c:	2100      	movs	r1, #0
   2e15e:	4620      	mov	r0, r4
   2e160:	f7f0 fd10 	bl	1eb84 <uarte_instance_init>
   2e164:	bd10      	pop	{r4, pc}

0002e166 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2e166:	b510      	push	{r4, lr}
   2e168:	4604      	mov	r4, r0
   2e16a:	2200      	movs	r2, #0
   2e16c:	2101      	movs	r1, #1
   2e16e:	2028      	movs	r0, #40	; 0x28
   2e170:	f7e5 f88a 	bl	13288 <z_arm_irq_priority_set>
   2e174:	2028      	movs	r0, #40	; 0x28
   2e176:	f7e5 f855 	bl	13224 <arch_irq_enable>
   2e17a:	2100      	movs	r1, #0
   2e17c:	4620      	mov	r0, r4
   2e17e:	f7f0 fd01 	bl	1eb84 <uarte_instance_init>
   2e182:	bd10      	pop	{r4, pc}

0002e184 <rng_pool_put>:
{
   2e184:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   2e186:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2e188:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2e18a:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   2e18c:	1a9a      	subs	r2, r3, r2
   2e18e:	ea34 0202 	bics.w	r2, r4, r2
   2e192:	d008      	beq.n	2e1a6 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   2e194:	18c2      	adds	r2, r0, r3
   2e196:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2e198:	3301      	adds	r3, #1
   2e19a:	b25b      	sxtb	r3, r3
   2e19c:	4023      	ands	r3, r4
   2e19e:	7083      	strb	r3, [r0, #2]
	return 0;
   2e1a0:	2000      	movs	r0, #0
}
   2e1a2:	bc10      	pop	{r4}
   2e1a4:	4770      	bx	lr
		return -ENOBUFS;
   2e1a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e1aa:	e7fa      	b.n	2e1a2 <rng_pool_put+0x1e>

0002e1ac <rng_pool_init>:
	rngp->first_alloc = 0U;
   2e1ac:	2300      	movs	r3, #0
   2e1ae:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2e1b0:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2e1b2:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2e1b4:	3901      	subs	r1, #1
   2e1b6:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2e1b8:	7102      	strb	r2, [r0, #4]
}
   2e1ba:	4770      	bx	lr

0002e1bc <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2e1bc:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2e1be:	2200      	movs	r2, #0
   2e1c0:	4611      	mov	r1, r2
   2e1c2:	4610      	mov	r0, r2
   2e1c4:	f7f7 fc38 	bl	25a38 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   2e1c8:	b900      	cbnz	r0, 2e1cc <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   2e1ca:	bd08      	pop	{r3, pc}
			return -EINVAL;
   2e1cc:	f06f 0015 	mvn.w	r0, #21
   2e1d0:	e7fb      	b.n	2e1ca <entropy_cc3xx_rng_init+0xe>

0002e1d2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e1d2:	4770      	bx	lr

0002e1d4 <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   2e1d4:	4770      	bx	lr

0002e1d6 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2e1d6:	1a40      	subs	r0, r0, r1
}
   2e1d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2e1dc:	4770      	bx	lr

0002e1de <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2e1de:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2e1e2:	009b      	lsls	r3, r3, #2
   2e1e4:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e1e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e1ea:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2e1ee:	2200      	movs	r2, #0
   2e1f0:	601a      	str	r2, [r3, #0]
   2e1f2:	681b      	ldr	r3, [r3, #0]
}
   2e1f4:	4770      	bx	lr

0002e1f6 <absolute_time_to_cc>:
}
   2e1f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2e1fa:	4770      	bx	lr

0002e1fc <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2e1fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e200:	b672      	cpsid	i
}
   2e202:	4770      	bx	lr

0002e204 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2e204:	f380 8810 	msr	PRIMASK, r0
}
   2e208:	4770      	bx	lr

0002e20a <set_absolute_alarm>:
{
   2e20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e20c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2e20e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   2e212:	f7f1 f887 	bl	1f324 <get_comparator>
   2e216:	4607      	mov	r7, r0
   2e218:	e019      	b.n	2e24e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   2e21a:	2013      	movs	r0, #19
   2e21c:	f000 fe13 	bl	2ee46 <z_impl_k_busy_wait>
}
   2e220:	e022      	b.n	2e268 <set_absolute_alarm+0x5e>
		event_clear(chan);
   2e222:	4630      	mov	r0, r6
   2e224:	f7ff ffdb 	bl	2e1de <event_clear>
		event_enable(chan);
   2e228:	4630      	mov	r0, r6
   2e22a:	f7f1 f883 	bl	1f334 <event_enable>
		set_comparator(chan, cc_val);
   2e22e:	4629      	mov	r1, r5
   2e230:	4630      	mov	r0, r6
   2e232:	f7f1 f86d 	bl	1f310 <set_comparator>
		now2 = counter();
   2e236:	f7f1 f891 	bl	1f35c <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2e23a:	4284      	cmp	r4, r0
   2e23c:	d01e      	beq.n	2e27c <set_absolute_alarm+0x72>
   2e23e:	1c81      	adds	r1, r0, #2
   2e240:	4628      	mov	r0, r5
   2e242:	f7ff ffc8 	bl	2e1d6 <counter_sub>
	} while ((now2 != now) &&
   2e246:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2e24a:	d917      	bls.n	2e27c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   2e24c:	462f      	mov	r7, r5
		now = counter();
   2e24e:	f7f1 f885 	bl	1f35c <counter>
   2e252:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2e254:	4601      	mov	r1, r0
   2e256:	4630      	mov	r0, r6
   2e258:	f7f1 f85a 	bl	1f310 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2e25c:	4621      	mov	r1, r4
   2e25e:	4638      	mov	r0, r7
   2e260:	f7ff ffb9 	bl	2e1d6 <counter_sub>
   2e264:	2801      	cmp	r0, #1
   2e266:	d0d8      	beq.n	2e21a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2e268:	1ca7      	adds	r7, r4, #2
   2e26a:	4639      	mov	r1, r7
   2e26c:	4628      	mov	r0, r5
   2e26e:	f7ff ffb2 	bl	2e1d6 <counter_sub>
   2e272:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2e276:	d9d4      	bls.n	2e222 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   2e278:	463d      	mov	r5, r7
   2e27a:	e7d2      	b.n	2e222 <set_absolute_alarm+0x18>
}
   2e27c:	4628      	mov	r0, r5
   2e27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e280 <compare_set>:
{
   2e280:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e282:	b083      	sub	sp, #12
   2e284:	4604      	mov	r4, r0
   2e286:	4617      	mov	r7, r2
   2e288:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2e28a:	f7f1 f86d 	bl	1f368 <compare_int_lock>
   2e28e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2e290:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e292:	9301      	str	r3, [sp, #4]
   2e294:	9b08      	ldr	r3, [sp, #32]
   2e296:	9300      	str	r3, [sp, #0]
   2e298:	463a      	mov	r2, r7
   2e29a:	462b      	mov	r3, r5
   2e29c:	4620      	mov	r0, r4
   2e29e:	f7f1 f951 	bl	1f544 <compare_set_nolocks>
   2e2a2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2e2a4:	4631      	mov	r1, r6
   2e2a6:	4620      	mov	r0, r4
   2e2a8:	f7f1 f8c2 	bl	1f430 <compare_int_unlock>
}
   2e2ac:	4628      	mov	r0, r5
   2e2ae:	b003      	add	sp, #12
   2e2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e2b2 <dk_set_led_off>:
{
	return dk_set_led(led_idx, 1);
}

int dk_set_led_off(uint8_t led_idx)
{
   2e2b2:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 0);
   2e2b4:	2100      	movs	r1, #0
   2e2b6:	f7f1 fdf7 	bl	1fea8 <dk_set_led>
}
   2e2ba:	bd08      	pop	{r3, pc}

0002e2bc <event_packet_is_discardable>:
	switch (hdr->evt) {
   2e2bc:	7803      	ldrb	r3, [r0, #0]
   2e2be:	2b3e      	cmp	r3, #62	; 0x3e
   2e2c0:	d003      	beq.n	2e2ca <event_packet_is_discardable+0xe>
   2e2c2:	2bff      	cmp	r3, #255	; 0xff
   2e2c4:	d00a      	beq.n	2e2dc <event_packet_is_discardable+0x20>
   2e2c6:	2000      	movs	r0, #0
   2e2c8:	4770      	bx	lr
		switch (me->subevent) {
   2e2ca:	7883      	ldrb	r3, [r0, #2]
   2e2cc:	2b02      	cmp	r3, #2
   2e2ce:	d00c      	beq.n	2e2ea <event_packet_is_discardable+0x2e>
   2e2d0:	2b0d      	cmp	r3, #13
   2e2d2:	d001      	beq.n	2e2d8 <event_packet_is_discardable+0x1c>
			return false;
   2e2d4:	2000      	movs	r0, #0
   2e2d6:	4770      	bx	lr
		switch (me->subevent) {
   2e2d8:	2001      	movs	r0, #1
   2e2da:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2e2dc:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2e2de:	2b80      	cmp	r3, #128	; 0x80
   2e2e0:	d001      	beq.n	2e2e6 <event_packet_is_discardable+0x2a>
			return false;
   2e2e2:	2000      	movs	r0, #0
}
   2e2e4:	4770      	bx	lr
			return true;
   2e2e6:	2001      	movs	r0, #1
   2e2e8:	4770      	bx	lr
		switch (me->subevent) {
   2e2ea:	2001      	movs	r0, #1
   2e2ec:	4770      	bx	lr

0002e2ee <hci_driver_send>:
{
   2e2ee:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2e2f0:	8983      	ldrh	r3, [r0, #12]
   2e2f2:	b183      	cbz	r3, 2e316 <hci_driver_send+0x28>
   2e2f4:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2e2f6:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2e2f8:	b14b      	cbz	r3, 2e30e <hci_driver_send+0x20>
   2e2fa:	2b02      	cmp	r3, #2
   2e2fc:	d10e      	bne.n	2e31c <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2e2fe:	f7f1 fe5d 	bl	1ffbc <acl_handle>
   2e302:	4605      	mov	r5, r0
	if (!err) {
   2e304:	b965      	cbnz	r5, 2e320 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2e306:	4620      	mov	r0, r4
   2e308:	f7ee fee6 	bl	1d0d8 <net_buf_unref>
   2e30c:	e008      	b.n	2e320 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2e30e:	f7f1 fe6f 	bl	1fff0 <cmd_handle>
   2e312:	4605      	mov	r5, r0
		break;
   2e314:	e7f6      	b.n	2e304 <hci_driver_send+0x16>
		return -EINVAL;
   2e316:	f06f 0515 	mvn.w	r5, #21
   2e31a:	e001      	b.n	2e320 <hci_driver_send+0x32>
	switch (type) {
   2e31c:	f06f 0515 	mvn.w	r5, #21
}
   2e320:	4628      	mov	r0, r5
   2e322:	bd38      	pop	{r3, r4, r5, pc}

0002e324 <fetch_and_process_hci_evt>:
{
   2e324:	b538      	push	{r3, r4, r5, lr}
   2e326:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e328:	f04f 30ff 	mov.w	r0, #4294967295
   2e32c:	f04f 31ff 	mov.w	r1, #4294967295
   2e330:	f7f1 fe04 	bl	1ff3c <multithreading_lock_acquire>
	if (!errcode) {
   2e334:	4605      	mov	r5, r0
   2e336:	b110      	cbz	r0, 2e33e <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   2e338:	b145      	cbz	r5, 2e34c <fetch_and_process_hci_evt+0x28>
		return false;
   2e33a:	2000      	movs	r0, #0
}
   2e33c:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   2e33e:	4620      	mov	r0, r4
   2e340:	f7f2 f84a 	bl	203d8 <hci_internal_evt_get>
   2e344:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2e346:	f7f1 fe03 	bl	1ff50 <multithreading_lock_release>
   2e34a:	e7f5      	b.n	2e338 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   2e34c:	4620      	mov	r0, r4
   2e34e:	f7f1 fee7 	bl	20120 <event_packet_process>
	return true;
   2e352:	2001      	movs	r0, #1
   2e354:	e7f2      	b.n	2e33c <fetch_and_process_hci_evt+0x18>

0002e356 <fetch_and_process_acl_data>:
{
   2e356:	b538      	push	{r3, r4, r5, lr}
   2e358:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e35a:	f04f 30ff 	mov.w	r0, #4294967295
   2e35e:	f04f 31ff 	mov.w	r1, #4294967295
   2e362:	f7f1 fdeb 	bl	1ff3c <multithreading_lock_acquire>
	if (!errcode) {
   2e366:	4605      	mov	r5, r0
   2e368:	b110      	cbz	r0, 2e370 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   2e36a:	b145      	cbz	r5, 2e37e <fetch_and_process_acl_data+0x28>
		return false;
   2e36c:	2000      	movs	r0, #0
}
   2e36e:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   2e370:	4620      	mov	r0, r4
   2e372:	f7de f976 	bl	c662 <sdc_hci_data_get>
   2e376:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2e378:	f7f1 fdea 	bl	1ff50 <multithreading_lock_release>
   2e37c:	e7f5      	b.n	2e36a <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   2e37e:	4620      	mov	r0, r4
   2e380:	f7f1 fef6 	bl	20170 <data_packet_process>
	return true;
   2e384:	2001      	movs	r0, #1
   2e386:	e7f2      	b.n	2e36e <fetch_and_process_acl_data+0x18>

0002e388 <configure_supported_features>:
{
   2e388:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   2e38a:	f7d5 fd5f 	bl	3e4c <sdc_support_adv>
			if (err) {
   2e38e:	b948      	cbnz	r0, 2e3a4 <configure_supported_features+0x1c>
		err = sdc_support_slave();
   2e390:	f7d5 fd8c 	bl	3eac <sdc_support_slave>
		if (err) {
   2e394:	b948      	cbnz	r0, 2e3aa <configure_supported_features+0x22>
		err = sdc_support_dle();
   2e396:	f7d5 fd69 	bl	3e6c <sdc_support_dle>
		if (err) {
   2e39a:	b948      	cbnz	r0, 2e3b0 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   2e39c:	f7d5 fd76 	bl	3e8c <sdc_support_le_2m_phy>
		if (err) {
   2e3a0:	b948      	cbnz	r0, 2e3b6 <configure_supported_features+0x2e>
}
   2e3a2:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2e3a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e3a8:	e7fb      	b.n	2e3a2 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2e3aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e3ae:	e7f8      	b.n	2e3a2 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2e3b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e3b4:	e7f5      	b.n	2e3a2 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2e3b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e3ba:	e7f2      	b.n	2e3a2 <configure_supported_features+0x1a>

0002e3bc <command_generates_command_complete_event>:
	switch (hci_opcode) {
   2e3bc:	f242 0344 	movw	r3, #8260	; 0x2044
   2e3c0:	4298      	cmp	r0, r3
   2e3c2:	d834      	bhi.n	2e42e <command_generates_command_complete_event+0x72>
   2e3c4:	f242 030d 	movw	r3, #8205	; 0x200d
   2e3c8:	4298      	cmp	r0, r3
   2e3ca:	d20b      	bcs.n	2e3e4 <command_generates_command_complete_event+0x28>
   2e3cc:	f240 4306 	movw	r3, #1030	; 0x406
   2e3d0:	4298      	cmp	r0, r3
   2e3d2:	d02e      	beq.n	2e432 <command_generates_command_complete_event+0x76>
   2e3d4:	f240 431d 	movw	r3, #1053	; 0x41d
   2e3d8:	4298      	cmp	r0, r3
   2e3da:	d001      	beq.n	2e3e0 <command_generates_command_complete_event+0x24>
		return true;
   2e3dc:	2001      	movs	r0, #1
   2e3de:	4770      	bx	lr
	switch (hci_opcode) {
   2e3e0:	2000      	movs	r0, #0
   2e3e2:	4770      	bx	lr
   2e3e4:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   2e3e8:	380d      	subs	r0, #13
   2e3ea:	2837      	cmp	r0, #55	; 0x37
   2e3ec:	d823      	bhi.n	2e436 <command_generates_command_complete_event+0x7a>
   2e3ee:	e8df f000 	tbb	[pc, r0]
   2e3f2:	221c      	.short	0x221c
   2e3f4:	22222222 	.word	0x22222222
   2e3f8:	1c22221c 	.word	0x1c22221c
   2e3fc:	221c2222 	.word	0x221c2222
   2e400:	22222222 	.word	0x22222222
   2e404:	22222222 	.word	0x22222222
   2e408:	22222222 	.word	0x22222222
   2e40c:	22222222 	.word	0x22222222
   2e410:	22222222 	.word	0x22222222
   2e414:	1c222222 	.word	0x1c222222
   2e418:	22222222 	.word	0x22222222
   2e41c:	22222222 	.word	0x22222222
   2e420:	22222222 	.word	0x22222222
   2e424:	22222222 	.word	0x22222222
   2e428:	1c1c      	.short	0x1c1c
   2e42a:	2000      	movs	r0, #0
   2e42c:	4770      	bx	lr
		return true;
   2e42e:	2001      	movs	r0, #1
   2e430:	4770      	bx	lr
	switch (hci_opcode) {
   2e432:	2000      	movs	r0, #0
   2e434:	4770      	bx	lr
		return true;
   2e436:	2001      	movs	r0, #1
}
   2e438:	4770      	bx	lr

0002e43a <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2e43a:	230f      	movs	r3, #15
   2e43c:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2e43e:	2304      	movs	r3, #4
   2e440:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2e442:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2e444:	2301      	movs	r3, #1
   2e446:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2e448:	8081      	strh	r1, [r0, #4]
}
   2e44a:	4770      	bx	lr

0002e44c <encode_command_complete_header>:
{
   2e44c:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2e44e:	240e      	movs	r4, #14
   2e450:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   2e452:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2e454:	2201      	movs	r2, #1
   2e456:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2e458:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2e45c:	7143      	strb	r3, [r0, #5]
}
   2e45e:	bc10      	pop	{r4}
   2e460:	4770      	bx	lr

0002e462 <le_read_supported_states>:
	*buf = states1;
   2e462:	238f      	movs	r3, #143	; 0x8f
   2e464:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2e466:	23c0      	movs	r3, #192	; 0xc0
   2e468:	7103      	strb	r3, [r0, #4]
}
   2e46a:	4770      	bx	lr

0002e46c <status_param_cmd_put>:
}
   2e46c:	2001      	movs	r0, #1
   2e46e:	4770      	bx	lr

0002e470 <link_control_cmd_put>:
{
   2e470:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2e472:	7842      	ldrb	r2, [r0, #1]
   2e474:	f810 3b03 	ldrb.w	r3, [r0], #3
   2e478:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e47c:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e47e:	f240 4206 	movw	r2, #1030	; 0x406
   2e482:	4293      	cmp	r3, r2
   2e484:	d005      	beq.n	2e492 <link_control_cmd_put+0x22>
   2e486:	f240 421d 	movw	r2, #1053	; 0x41d
   2e48a:	4293      	cmp	r3, r2
   2e48c:	d004      	beq.n	2e498 <link_control_cmd_put+0x28>
   2e48e:	2001      	movs	r0, #1
}
   2e490:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2e492:	f7de fa15 	bl	c8c0 <sdc_hci_cmd_lc_disconnect>
   2e496:	e7fb      	b.n	2e490 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2e498:	f7de fa14 	bl	c8c4 <sdc_hci_cmd_lc_read_remote_version_information>
   2e49c:	e7f8      	b.n	2e490 <link_control_cmd_put+0x20>

0002e49e <controller_and_baseband_cmd_put>:
{
   2e49e:	b538      	push	{r3, r4, r5, lr}
   2e4a0:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e4a2:	3003      	adds	r0, #3
   2e4a4:	7865      	ldrb	r5, [r4, #1]
   2e4a6:	7823      	ldrb	r3, [r4, #0]
   2e4a8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2e4ac:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e4ae:	f640 4463 	movw	r4, #3171	; 0xc63
   2e4b2:	42a3      	cmp	r3, r4
   2e4b4:	d02c      	beq.n	2e510 <controller_and_baseband_cmd_put+0x72>
   2e4b6:	f101 0106 	add.w	r1, r1, #6
   2e4ba:	dc16      	bgt.n	2e4ea <controller_and_baseband_cmd_put+0x4c>
   2e4bc:	f640 4403 	movw	r4, #3075	; 0xc03
   2e4c0:	42a3      	cmp	r3, r4
   2e4c2:	d022      	beq.n	2e50a <controller_and_baseband_cmd_put+0x6c>
   2e4c4:	f640 442d 	movw	r4, #3117	; 0xc2d
   2e4c8:	42a3      	cmp	r3, r4
   2e4ca:	d105      	bne.n	2e4d8 <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2e4cc:	7813      	ldrb	r3, [r2, #0]
   2e4ce:	3303      	adds	r3, #3
   2e4d0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2e4d2:	f7de f8ed 	bl	c6b0 <sdc_hci_cmd_cb_read_transmit_power_level>
   2e4d6:	e007      	b.n	2e4e8 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2e4d8:	f640 4201 	movw	r2, #3073	; 0xc01
   2e4dc:	4293      	cmp	r3, r2
   2e4de:	d102      	bne.n	2e4e6 <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2e4e0:	f7de f8e8 	bl	c6b4 <sdc_hci_cmd_cb_set_event_mask>
   2e4e4:	e000      	b.n	2e4e8 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2e4e6:	2001      	movs	r0, #1
}
   2e4e8:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   2e4ea:	f640 447b 	movw	r4, #3195	; 0xc7b
   2e4ee:	42a3      	cmp	r3, r4
   2e4f0:	d011      	beq.n	2e516 <controller_and_baseband_cmd_put+0x78>
   2e4f2:	f640 447c 	movw	r4, #3196	; 0xc7c
   2e4f6:	42a3      	cmp	r3, r4
   2e4f8:	d105      	bne.n	2e506 <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   2e4fa:	7813      	ldrb	r3, [r2, #0]
   2e4fc:	3302      	adds	r3, #2
   2e4fe:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2e500:	f7de f8e2 	bl	c6c8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2e504:	e7f0      	b.n	2e4e8 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2e506:	2001      	movs	r0, #1
   2e508:	e7ee      	b.n	2e4e8 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   2e50a:	f7d5 fe23 	bl	4154 <sdc_hci_cmd_cb_reset>
   2e50e:	e7eb      	b.n	2e4e8 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2e510:	f7de f8d5 	bl	c6be <sdc_hci_cmd_cb_set_event_mask_page_2>
   2e514:	e7e8      	b.n	2e4e8 <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   2e516:	7813      	ldrb	r3, [r2, #0]
   2e518:	3304      	adds	r3, #4
   2e51a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2e51c:	f7de f8c6 	bl	c6ac <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2e520:	e7e2      	b.n	2e4e8 <controller_and_baseband_cmd_put+0x4a>

0002e522 <supported_commands>:
{
   2e522:	b510      	push	{r4, lr}
   2e524:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e526:	222e      	movs	r2, #46	; 0x2e
   2e528:	2100      	movs	r1, #0
   2e52a:	f7fc f9dc 	bl	2a8e6 <memset>
	cmds->hci_disconnect = 1;
   2e52e:	7823      	ldrb	r3, [r4, #0]
   2e530:	f043 0320 	orr.w	r3, r3, #32
   2e534:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2e536:	78a3      	ldrb	r3, [r4, #2]
   2e538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e53c:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2e53e:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2e540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   2e544:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2e546:	7aa3      	ldrb	r3, [r4, #10]
   2e548:	f043 0304 	orr.w	r3, r3, #4
   2e54c:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2e54e:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2e550:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   2e554:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2e556:	7be3      	ldrb	r3, [r4, #15]
   2e558:	f043 0302 	orr.w	r3, r3, #2
   2e55c:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2e55e:	7da3      	ldrb	r3, [r4, #22]
   2e560:	f043 0304 	orr.w	r3, r3, #4
   2e564:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2e566:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   2e568:	f043 03f7 	orr.w	r3, r3, #247	; 0xf7
   2e56c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   2e56e:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   2e570:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
   2e574:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_white_list = 1;
   2e576:	7ee3      	ldrb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2e578:	f043 03f3 	orr.w	r3, r3, #243	; 0xf3
   2e57c:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_long_term_key_request_reply = 1;
   2e57e:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2e580:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   2e584:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2e586:	f894 3020 	ldrb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2e58a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   2e58e:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2e592:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2e596:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   2e59a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2e59e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   2e5a2:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   2e5a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   2e5aa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2e5ae:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
   2e5b2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2e5b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2e5ba:	f043 0301 	orr.w	r3, r3, #1
   2e5be:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2e5c2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2e5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e5ca:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   2e5ce:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   2e5d2:	f043 0304 	orr.w	r3, r3, #4
   2e5d6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   2e5da:	bd10      	pop	{r4, pc}

0002e5dc <supported_features>:
{
   2e5dc:	b510      	push	{r4, lr}
   2e5de:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2e5e0:	2208      	movs	r2, #8
   2e5e2:	2100      	movs	r1, #0
   2e5e4:	f7fc f97f 	bl	2a8e6 <memset>
	features->bdedr_not_supported = 1;
   2e5e8:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   2e5ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2e5ee:	7123      	strb	r3, [r4, #4]
}
   2e5f0:	bd10      	pop	{r4, pc}

0002e5f2 <info_param_cmd_put>:
{
   2e5f2:	b538      	push	{r3, r4, r5, lr}
   2e5f4:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e5f6:	1d88      	adds	r0, r1, #6
   2e5f8:	7865      	ldrb	r5, [r4, #1]
   2e5fa:	7823      	ldrb	r3, [r4, #0]
   2e5fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2e600:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e602:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2e606:	3b01      	subs	r3, #1
   2e608:	2b08      	cmp	r3, #8
   2e60a:	d820      	bhi.n	2e64e <info_param_cmd_put+0x5c>
   2e60c:	e8df f003 	tbb	[pc, r3]
   2e610:	1f120b05 	.word	0x1f120b05
   2e614:	1f1f1f1f 	.word	0x1f1f1f1f
   2e618:	19          	.byte	0x19
   2e619:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2e61a:	7813      	ldrb	r3, [r2, #0]
   2e61c:	3308      	adds	r3, #8
   2e61e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2e620:	f7de f903 	bl	c82a <sdc_hci_cmd_ip_read_local_version_information>
   2e624:	e014      	b.n	2e650 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2e626:	7813      	ldrb	r3, [r2, #0]
   2e628:	3340      	adds	r3, #64	; 0x40
   2e62a:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2e62c:	f7ff ff79 	bl	2e522 <supported_commands>
		return 0;
   2e630:	2000      	movs	r0, #0
   2e632:	e00d      	b.n	2e650 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2e634:	7813      	ldrb	r3, [r2, #0]
   2e636:	3308      	adds	r3, #8
   2e638:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2e63a:	f7ff ffcf 	bl	2e5dc <supported_features>
		return 0;
   2e63e:	2000      	movs	r0, #0
   2e640:	e006      	b.n	2e650 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2e642:	7813      	ldrb	r3, [r2, #0]
   2e644:	3306      	adds	r3, #6
   2e646:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2e648:	f7de f8ed 	bl	c826 <sdc_hci_cmd_ip_read_bd_addr>
   2e64c:	e000      	b.n	2e650 <info_param_cmd_put+0x5e>
   2e64e:	2001      	movs	r0, #1
}
   2e650:	bd38      	pop	{r3, r4, r5, pc}

0002e652 <le_supported_features>:
{
   2e652:	b510      	push	{r4, lr}
   2e654:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2e656:	2205      	movs	r2, #5
   2e658:	2100      	movs	r1, #0
   2e65a:	f7fc f944 	bl	2a8e6 <memset>
	features->le_encryption = 1;
   2e65e:	7823      	ldrb	r3, [r4, #0]
	features->ll_privacy = 1;
   2e660:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   2e664:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   2e666:	7863      	ldrb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   2e668:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2e66c:	7063      	strb	r3, [r4, #1]
}
   2e66e:	bd10      	pop	{r4, pc}

0002e670 <vs_zephyr_supported_commands>:
{
   2e670:	b510      	push	{r4, lr}
   2e672:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e674:	2202      	movs	r2, #2
   2e676:	2100      	movs	r1, #0
   2e678:	f7fc f935 	bl	2a8e6 <memset>
	cmds->read_version_info = 1;
   2e67c:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   2e67e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2e682:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   2e684:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   2e686:	f043 0307 	orr.w	r3, r3, #7
   2e68a:	7063      	strb	r3, [r4, #1]
}
   2e68c:	bd10      	pop	{r4, pc}

0002e68e <vs_supported_commands>:
{
   2e68e:	b510      	push	{r4, lr}
   2e690:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2e692:	2201      	movs	r2, #1
   2e694:	2100      	movs	r1, #0
   2e696:	f7fc f926 	bl	2a8e6 <memset>
	cmds->read_supported_vs_commands = 1;
   2e69a:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   2e69c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   2e6a0:	7023      	strb	r3, [r4, #0]
}
   2e6a2:	bd10      	pop	{r4, pc}

0002e6a4 <le_controller_cmd_put>:
{
   2e6a4:	b538      	push	{r3, r4, r5, lr}
   2e6a6:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e6a8:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e6aa:	3106      	adds	r1, #6
   2e6ac:	7865      	ldrb	r5, [r4, #1]
   2e6ae:	7823      	ldrb	r3, [r4, #0]
   2e6b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2e6b4:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2e6b6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2e6ba:	3b01      	subs	r3, #1
   2e6bc:	2b4d      	cmp	r3, #77	; 0x4d
   2e6be:	f200 80ce 	bhi.w	2e85e <le_controller_cmd_put+0x1ba>
   2e6c2:	e8df f003 	tbb	[pc, r3]
   2e6c6:	2a27      	.short	0x2a27
   2e6c8:	3c39cc31 	.word	0x3c39cc31
   2e6cc:	4c49463f 	.word	0x4c49463f
   2e6d0:	cccccccc 	.word	0xcccccccc
   2e6d4:	5c59564f 	.word	0x5c59564f
   2e6d8:	655fcccc 	.word	0x655fcccc
   2e6dc:	75cc6e68 	.word	0x75cc6e68
   2e6e0:	cccc817b 	.word	0xcccc817b
   2e6e4:	89cccccc 	.word	0x89cccccc
   2e6e8:	cccc968f 	.word	0xcccc968f
   2e6ec:	a29f9c99 	.word	0xa29f9c99
   2e6f0:	aca9cccc 	.word	0xaca9cccc
   2e6f4:	bfbcb6af 	.word	0xbfbcb6af
   2e6f8:	cccccccc 	.word	0xcccccccc
   2e6fc:	cccccccc 	.word	0xcccccccc
   2e700:	cccccccc 	.word	0xcccccccc
   2e704:	cccccccc 	.word	0xcccccccc
   2e708:	cccccccc 	.word	0xcccccccc
   2e70c:	cccccccc 	.word	0xcccccccc
   2e710:	c9ccccc2 	.word	0xc9ccccc2
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2e714:	f7de f8c3 	bl	c89e <sdc_hci_cmd_le_set_event_mask>
   2e718:	e0a2      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2e71a:	7813      	ldrb	r3, [r2, #0]
   2e71c:	3303      	adds	r3, #3
   2e71e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2e720:	4608      	mov	r0, r1
   2e722:	f7de f89a 	bl	c85a <sdc_hci_cmd_le_read_buffer_size>
   2e726:	e09b      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2e728:	7813      	ldrb	r3, [r2, #0]
   2e72a:	3308      	adds	r3, #8
   2e72c:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2e72e:	4608      	mov	r0, r1
   2e730:	f7ff ff8f 	bl	2e652 <le_supported_features>
		return 0;
   2e734:	2000      	movs	r0, #0
   2e736:	e093      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2e738:	f7de f8ba 	bl	c8b0 <sdc_hci_cmd_le_set_random_address>
   2e73c:	e090      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   2e73e:	f7de f8a8 	bl	c892 <sdc_hci_cmd_le_set_adv_params>
   2e742:	e08d      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   2e744:	7813      	ldrb	r3, [r2, #0]
   2e746:	3301      	adds	r3, #1
   2e748:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2e74a:	4608      	mov	r0, r1
   2e74c:	f7de f883 	bl	c856 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   2e750:	e086      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2e752:	f7de f89a 	bl	c88a <sdc_hci_cmd_le_set_adv_data>
   2e756:	e083      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   2e758:	f7de f8ae 	bl	c8b8 <sdc_hci_cmd_le_set_scan_response_data>
   2e75c:	e080      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   2e75e:	f7de f896 	bl	c88e <sdc_hci_cmd_le_set_adv_enable>
   2e762:	e07d      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   2e764:	7813      	ldrb	r3, [r2, #0]
   2e766:	3301      	adds	r3, #1
   2e768:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   2e76a:	4608      	mov	r0, r1
   2e76c:	f7de f885 	bl	c87a <sdc_hci_cmd_le_read_white_list_size>
   2e770:	e076      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_white_list();
   2e772:	f7de f862 	bl	c83a <sdc_hci_cmd_le_clear_white_list>
   2e776:	e073      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   2e778:	f7de f85b 	bl	c832 <sdc_hci_cmd_le_add_device_to_white_list>
   2e77c:	e070      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   2e77e:	f7de f880 	bl	c882 <sdc_hci_cmd_le_remove_device_from_white_list>
   2e782:	e06d      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2e784:	7813      	ldrb	r3, [r2, #0]
   2e786:	3307      	adds	r3, #7
   2e788:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2e78a:	f7de f868 	bl	c85e <sdc_hci_cmd_le_read_channel_map>
   2e78e:	e067      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2e790:	f7de f86b 	bl	c86a <sdc_hci_cmd_le_read_remote_features>
   2e794:	e064      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2e796:	7813      	ldrb	r3, [r2, #0]
   2e798:	3310      	adds	r3, #16
   2e79a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2e79c:	f7de f84f 	bl	c83e <sdc_hci_cmd_le_encrypt>
   2e7a0:	e05e      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2e7a2:	7813      	ldrb	r3, [r2, #0]
   2e7a4:	3308      	adds	r3, #8
   2e7a6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2e7a8:	4608      	mov	r0, r1
   2e7aa:	f7de f852 	bl	c852 <sdc_hci_cmd_le_rand>
   2e7ae:	e057      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   2e7b0:	7813      	ldrb	r3, [r2, #0]
   2e7b2:	3302      	adds	r3, #2
   2e7b4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2e7b6:	f7de f848 	bl	c84a <sdc_hci_cmd_le_long_term_key_request_reply>
   2e7ba:	e051      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   2e7bc:	7813      	ldrb	r3, [r2, #0]
   2e7be:	3302      	adds	r3, #2
   2e7c0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2e7c2:	f7de f83e 	bl	c842 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   2e7c6:	e04b      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2e7c8:	7813      	ldrb	r3, [r2, #0]
   2e7ca:	3308      	adds	r3, #8
   2e7cc:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   2e7ce:	4608      	mov	r0, r1
   2e7d0:	f7ff fe47 	bl	2e462 <le_read_supported_states>
		return 0;
   2e7d4:	2000      	movs	r0, #0
   2e7d6:	e043      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2e7d8:	7813      	ldrb	r3, [r2, #0]
   2e7da:	3302      	adds	r3, #2
   2e7dc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2e7de:	f7de f85a 	bl	c896 <sdc_hci_cmd_le_set_data_length>
   2e7e2:	e03d      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   2e7e4:	7813      	ldrb	r3, [r2, #0]
   2e7e6:	3304      	adds	r3, #4
   2e7e8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2e7ea:	4608      	mov	r0, r1
   2e7ec:	f7de f841 	bl	c872 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2e7f0:	e036      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2e7f2:	f7de f863 	bl	c8bc <sdc_hci_cmd_le_write_suggested_default_data_length>
   2e7f6:	e033      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   2e7f8:	f7de f819 	bl	c82e <sdc_hci_cmd_le_add_device_to_resolving_list>
   2e7fc:	e030      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   2e7fe:	f7de f83e 	bl	c87e <sdc_hci_cmd_le_remove_device_from_resolving_list>
   2e802:	e02d      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_resolving_list();
   2e804:	f7de f817 	bl	c836 <sdc_hci_cmd_le_clear_resolving_list>
   2e808:	e02a      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   2e80a:	7813      	ldrb	r3, [r2, #0]
   2e80c:	3301      	adds	r3, #1
   2e80e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2e810:	4608      	mov	r0, r1
   2e812:	f7de f82c 	bl	c86e <sdc_hci_cmd_le_read_resolving_list_size>
   2e816:	e023      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   2e818:	f7de f835 	bl	c886 <sdc_hci_cmd_le_set_address_resolution_enable>
   2e81c:	e020      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   2e81e:	f7de f849 	bl	c8b4 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   2e822:	e01d      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2e824:	7813      	ldrb	r3, [r2, #0]
   2e826:	3308      	adds	r3, #8
   2e828:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2e82a:	4608      	mov	r0, r1
   2e82c:	f7de f819 	bl	c862 <sdc_hci_cmd_le_read_max_data_length>
   2e830:	e016      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2e832:	7813      	ldrb	r3, [r2, #0]
   2e834:	3304      	adds	r3, #4
   2e836:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2e838:	f7de f815 	bl	c866 <sdc_hci_cmd_le_read_phy>
   2e83c:	e010      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2e83e:	f7de f82c 	bl	c89a <sdc_hci_cmd_le_set_default_phy>
   2e842:	e00d      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2e844:	f7de f830 	bl	c8a8 <sdc_hci_cmd_le_set_phy>
   2e848:	e00a      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2e84a:	7813      	ldrb	r3, [r2, #0]
   2e84c:	3302      	adds	r3, #2
   2e84e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2e850:	4608      	mov	r0, r1
   2e852:	f7de f810 	bl	c876 <sdc_hci_cmd_le_read_transmit_power>
   2e856:	e003      	b.n	2e860 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   2e858:	f7de f828 	bl	c8ac <sdc_hci_cmd_le_set_privacy_mode>
   2e85c:	e000      	b.n	2e860 <le_controller_cmd_put+0x1bc>
   2e85e:	2001      	movs	r0, #1
}
   2e860:	bd38      	pop	{r3, r4, r5, pc}

0002e862 <vs_cmd_put>:
{
   2e862:	b538      	push	{r3, r4, r5, lr}
   2e864:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e866:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2e868:	3106      	adds	r1, #6
   2e86a:	7865      	ldrb	r5, [r4, #1]
   2e86c:	7823      	ldrb	r3, [r4, #0]
   2e86e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   2e872:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   2e876:	42a3      	cmp	r3, r4
   2e878:	d90f      	bls.n	2e89a <vs_cmd_put+0x38>
   2e87a:	f64f 5405 	movw	r4, #64773	; 0xfd05
   2e87e:	42a3      	cmp	r3, r4
   2e880:	d85b      	bhi.n	2e93a <vs_cmd_put+0xd8>
   2e882:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2e886:	d319      	bcc.n	2e8bc <vs_cmd_put+0x5a>
   2e888:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   2e88c:	2b05      	cmp	r3, #5
   2e88e:	d850      	bhi.n	2e932 <vs_cmd_put+0xd0>
   2e890:	e8df f003 	tbb	[pc, r3]
   2e894:	46434038 	.word	0x46434038
   2e898:	4c49      	.short	0x4c49
   2e89a:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   2e89e:	d801      	bhi.n	2e8a4 <vs_cmd_put+0x42>
   2e8a0:	2001      	movs	r0, #1
}
   2e8a2:	bd38      	pop	{r3, r4, r5, pc}
   2e8a4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2e8a8:	3b01      	subs	r3, #1
   2e8aa:	2b09      	cmp	r3, #9
   2e8ac:	d843      	bhi.n	2e936 <vs_cmd_put+0xd4>
   2e8ae:	e8df f003 	tbb	[pc, r3]
   2e8b2:	0e07      	.short	0x0e07
   2e8b4:	26424242 	.word	0x26424242
   2e8b8:	1f164242 	.word	0x1f164242
	switch (opcode)	{
   2e8bc:	2001      	movs	r0, #1
   2e8be:	e7f0      	b.n	2e8a2 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2e8c0:	7813      	ldrb	r3, [r2, #0]
   2e8c2:	330c      	adds	r3, #12
   2e8c4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2e8c6:	4608      	mov	r0, r1
   2e8c8:	f7d5 fc58 	bl	417c <sdc_hci_cmd_vs_zephyr_read_version_info>
   2e8cc:	e7e9      	b.n	2e8a2 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2e8ce:	7813      	ldrb	r3, [r2, #0]
   2e8d0:	3340      	adds	r3, #64	; 0x40
   2e8d2:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   2e8d4:	4608      	mov	r0, r1
   2e8d6:	f7ff fecb 	bl	2e670 <vs_zephyr_supported_commands>
		return 0;
   2e8da:	2000      	movs	r0, #0
   2e8dc:	e7e1      	b.n	2e8a2 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   2e8de:	7813      	ldrb	r3, [r2, #0]
   2e8e0:	3301      	adds	r3, #1
   2e8e2:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2e8e4:	3316      	adds	r3, #22
   2e8e6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2e8e8:	4608      	mov	r0, r1
   2e8ea:	f7dd ff4f 	bl	c78c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   2e8ee:	e7d8      	b.n	2e8a2 <vs_cmd_put+0x40>
		*param_length_out +=
   2e8f0:	7813      	ldrb	r3, [r2, #0]
   2e8f2:	3320      	adds	r3, #32
   2e8f4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2e8f6:	4608      	mov	r0, r1
   2e8f8:	f7dd fefb 	bl	c6f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2e8fc:	e7d1      	b.n	2e8a2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2e8fe:	f7dd ff90 	bl	c822 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2e902:	e7ce      	b.n	2e8a2 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2e904:	7813      	ldrb	r3, [r2, #0]
   2e906:	3340      	adds	r3, #64	; 0x40
   2e908:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2e90a:	4608      	mov	r0, r1
   2e90c:	f7ff febf 	bl	2e68e <vs_supported_commands>
		return 0;
   2e910:	2000      	movs	r0, #0
   2e912:	e7c6      	b.n	2e8a2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2e914:	f7dd fee6 	bl	c6e4 <sdc_hci_cmd_vs_llpm_mode_set>
   2e918:	e7c3      	b.n	2e8a2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2e91a:	f7dd fedf 	bl	c6dc <sdc_hci_cmd_vs_conn_update>
   2e91e:	e7c0      	b.n	2e8a2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2e920:	f7dd fed4 	bl	c6cc <sdc_hci_cmd_vs_conn_event_extend>
   2e924:	e7bd      	b.n	2e8a2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2e926:	f7dd fedf 	bl	c6e8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2e92a:	e7ba      	b.n	2e8a2 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2e92c:	f7dd fed8 	bl	c6e0 <sdc_hci_cmd_vs_event_length_set>
   2e930:	e7b7      	b.n	2e8a2 <vs_cmd_put+0x40>
	switch (opcode)	{
   2e932:	2001      	movs	r0, #1
   2e934:	e7b5      	b.n	2e8a2 <vs_cmd_put+0x40>
   2e936:	2001      	movs	r0, #1
   2e938:	e7b3      	b.n	2e8a2 <vs_cmd_put+0x40>
   2e93a:	2001      	movs	r0, #1
   2e93c:	e7b1      	b.n	2e8a2 <vs_cmd_put+0x40>

0002e93e <cmd_put>:
{
   2e93e:	b570      	push	{r4, r5, r6, lr}
   2e940:	b082      	sub	sp, #8
   2e942:	460e      	mov	r6, r1
   2e944:	7842      	ldrb	r2, [r0, #1]
   2e946:	7805      	ldrb	r5, [r0, #0]
   2e948:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   2e94c:	2304      	movs	r3, #4
   2e94e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   2e952:	0893      	lsrs	r3, r2, #2
   2e954:	2a23      	cmp	r2, #35	; 0x23
   2e956:	d80b      	bhi.n	2e970 <cmd_put+0x32>
   2e958:	b21a      	sxth	r2, r3
   2e95a:	2a00      	cmp	r2, #0
   2e95c:	d03a      	beq.n	2e9d4 <cmd_put+0x96>
   2e95e:	3b01      	subs	r3, #1
   2e960:	2b07      	cmp	r3, #7
   2e962:	d839      	bhi.n	2e9d8 <cmd_put+0x9a>
   2e964:	e8df f003 	tbb	[pc, r3]
   2e968:	241e381a 	.word	0x241e381a
   2e96c:	3038382a 	.word	0x3038382a
   2e970:	2b3f      	cmp	r3, #63	; 0x3f
   2e972:	d105      	bne.n	2e980 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   2e974:	f10d 0207 	add.w	r2, sp, #7
   2e978:	f7ff ff73 	bl	2e862 <vs_cmd_put>
   2e97c:	4604      	mov	r4, r0
		break;
   2e97e:	e000      	b.n	2e982 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   2e980:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   2e982:	4628      	mov	r0, r5
   2e984:	f7ff fd1a 	bl	2e3bc <command_generates_command_complete_event>
   2e988:	b108      	cbz	r0, 2e98e <cmd_put+0x50>
   2e98a:	2c01      	cmp	r4, #1
   2e98c:	d126      	bne.n	2e9dc <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   2e98e:	4622      	mov	r2, r4
   2e990:	4629      	mov	r1, r5
   2e992:	4630      	mov	r0, r6
   2e994:	f7ff fd51 	bl	2e43a <encode_command_status>
}
   2e998:	b002      	add	sp, #8
   2e99a:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   2e99c:	f7ff fd68 	bl	2e470 <link_control_cmd_put>
   2e9a0:	4604      	mov	r4, r0
		break;
   2e9a2:	e7ee      	b.n	2e982 <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   2e9a4:	f10d 0207 	add.w	r2, sp, #7
   2e9a8:	f7ff fd79 	bl	2e49e <controller_and_baseband_cmd_put>
   2e9ac:	4604      	mov	r4, r0
		break;
   2e9ae:	e7e8      	b.n	2e982 <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   2e9b0:	f10d 0207 	add.w	r2, sp, #7
   2e9b4:	f7ff fe1d 	bl	2e5f2 <info_param_cmd_put>
   2e9b8:	4604      	mov	r4, r0
		break;
   2e9ba:	e7e2      	b.n	2e982 <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   2e9bc:	f10d 0207 	add.w	r2, sp, #7
   2e9c0:	f7ff fd54 	bl	2e46c <status_param_cmd_put>
   2e9c4:	4604      	mov	r4, r0
		break;
   2e9c6:	e7dc      	b.n	2e982 <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   2e9c8:	f10d 0207 	add.w	r2, sp, #7
   2e9cc:	f7ff fe6a 	bl	2e6a4 <le_controller_cmd_put>
   2e9d0:	4604      	mov	r4, r0
		break;
   2e9d2:	e7d6      	b.n	2e982 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   2e9d4:	2401      	movs	r4, #1
   2e9d6:	e7d4      	b.n	2e982 <cmd_put+0x44>
   2e9d8:	2401      	movs	r4, #1
   2e9da:	e7d2      	b.n	2e982 <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   2e9dc:	4623      	mov	r3, r4
   2e9de:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2e9e2:	4629      	mov	r1, r5
   2e9e4:	4630      	mov	r0, r6
   2e9e6:	f7ff fd31 	bl	2e44c <encode_command_complete_header>
}
   2e9ea:	e7d5      	b.n	2e998 <cmd_put+0x5a>

0002e9ec <m_config_clock_source_get>:
}
   2e9ec:	2001      	movs	r0, #1
   2e9ee:	4770      	bx	lr

0002e9f0 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2e9f0:	4668      	mov	r0, sp
   2e9f2:	f020 0107 	bic.w	r1, r0, #7
   2e9f6:	468d      	mov	sp, r1
   2e9f8:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2e9fa:	f7d3 ffb1 	bl	2960 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2e9fe:	f7e4 fc71 	bl	132e4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2ea02:	f7e4 fd7b 	bl	134fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2ea06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ea0a:	4685      	mov	sp, r0
   2ea0c:	4770      	bx	lr

0002ea0e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2ea0e:	4668      	mov	r0, sp
   2ea10:	f020 0107 	bic.w	r1, r0, #7
   2ea14:	468d      	mov	sp, r1
   2ea16:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2ea18:	f7d3 ff24 	bl	2864 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2ea1c:	f7e4 fc62 	bl	132e4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2ea20:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ea24:	4685      	mov	sp, r0
   2ea26:	4770      	bx	lr

0002ea28 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2ea28:	4668      	mov	r0, sp
   2ea2a:	f020 0107 	bic.w	r1, r0, #7
   2ea2e:	468d      	mov	sp, r1
   2ea30:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2ea32:	f7dd f8e5 	bl	bc00 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2ea36:	f7e4 fc55 	bl	132e4 <_arch_isr_direct_pm>
   2ea3a:	f7e4 fd5f 	bl	134fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2ea3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ea42:	4685      	mov	sp, r0
   2ea44:	4770      	bx	lr

0002ea46 <nrfx_clock_enable>:
}
   2ea46:	4770      	bx	lr

0002ea48 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2ea48:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2ea4a:	f7d4 fbb7 	bl	31bc <MPSL_IRQ_CLOCK_Handler>
}
   2ea4e:	bd08      	pop	{r3, pc}

0002ea50 <nrf_flash_sync_is_required>:
{
   2ea50:	b508      	push	{r3, lr}
	return mpsl_is_initialized();
   2ea52:	f7d4 ff77 	bl	3944 <mpsl_is_initialized>
}
   2ea56:	bd08      	pop	{r3, pc}

0002ea58 <nrf_flash_sync_get_timestamp_begin>:
}
   2ea58:	4770      	bx	lr

0002ea5a <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   2ea5a:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2ea5c:	f7f6 ff90 	bl	25980 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   2ea60:	bd08      	pop	{r3, pc}

0002ea62 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   2ea62:	b510      	push	{r4, lr}
   2ea64:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2ea66:	f7e4 fac5 	bl	12ff4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2ea6a:	f7e4 fb81 	bl	13170 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   2ea6e:	4620      	mov	r0, r4
   2ea70:	f7ff fff3 	bl	2ea5a <hw_cc3xx_init_internal>
	return res;
}
   2ea74:	bd10      	pop	{r4, pc}

0002ea76 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   2ea76:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2ea78:	4780      	blx	r0
}
   2ea7a:	bd08      	pop	{r3, pc}

0002ea7c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   2ea7c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2ea7e:	f000 f9e2 	bl	2ee46 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   2ea82:	bd08      	pop	{r3, pc}

0002ea84 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   2ea84:	2301      	movs	r3, #1
   2ea86:	4083      	lsls	r3, r0
   2ea88:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   2ea8c:	bf14      	ite	ne
   2ea8e:	2001      	movne	r0, #1
   2ea90:	2000      	moveq	r0, #0
   2ea92:	4770      	bx	lr

0002ea94 <flash_page_size_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   2ea94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ea98:	6918      	ldr	r0, [r3, #16]
}
   2ea9a:	4770      	bx	lr

0002ea9c <flash_page_count_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2ea9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2eaa0:	6958      	ldr	r0, [r3, #20]
}
   2eaa2:	4770      	bx	lr

0002eaa4 <flash_total_size_get>:
{
   2eaa4:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   2eaa6:	f7ff fff5 	bl	2ea94 <flash_page_size_get>
   2eaaa:	4604      	mov	r4, r0
   2eaac:	f7ff fff6 	bl	2ea9c <flash_page_count_get>
}
   2eab0:	fb00 f004 	mul.w	r0, r0, r4
   2eab4:	bd10      	pop	{r4, pc}

0002eab6 <is_page_aligned_check>:
{
   2eab6:	b510      	push	{r4, lr}
   2eab8:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   2eaba:	f7ff ffeb 	bl	2ea94 <flash_page_size_get>
   2eabe:	fbb4 f3f0 	udiv	r3, r4, r0
   2eac2:	fb00 4013 	mls	r0, r0, r3, r4
}
   2eac6:	fab0 f080 	clz	r0, r0
   2eaca:	0940      	lsrs	r0, r0, #5
   2eacc:	bd10      	pop	{r4, pc}

0002eace <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   2eace:	b508      	push	{r3, lr}
    return flash_total_size_get();
   2ead0:	f7ff ffe8 	bl	2eaa4 <flash_total_size_get>
}
   2ead4:	bd08      	pop	{r3, pc}

0002ead6 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   2ead6:	b508      	push	{r3, lr}
    return flash_page_size_get();
   2ead8:	f7ff ffdc 	bl	2ea94 <flash_page_size_get>
}
   2eadc:	bd08      	pop	{r3, pc}

0002eade <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   2eade:	b508      	push	{r3, lr}
    return flash_page_count_get();
   2eae0:	f7ff ffdc 	bl	2ea9c <flash_page_count_get>
}
   2eae4:	bd08      	pop	{r3, pc}

0002eae6 <start_playback>:
{
   2eae6:	b410      	push	{r4}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2eae8:	2402      	movs	r4, #2
   2eaea:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
   2eaec:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   2eaee:	6809      	ldr	r1, [r1, #0]
   2eaf0:	b181      	cbz	r1, 2eb14 <start_playback+0x2e>
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ0)
   2eaf2:	f012 0f04 	tst.w	r2, #4
   2eaf6:	d11c      	bne.n	2eb32 <start_playback+0x4c>
        uint32_t int_mask = NRF_PWM_INT_LOOPSDONE_MASK |
   2eaf8:	2182      	movs	r1, #130	; 0x82
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   2eafa:	f012 0f08 	tst.w	r2, #8
   2eafe:	d001      	beq.n	2eb04 <start_playback+0x1e>
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   2eb00:	f041 0120 	orr.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   2eb04:	f012 0f10 	tst.w	r2, #16
   2eb08:	d001      	beq.n	2eb0e <start_playback+0x28>
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   2eb0a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   2eb0e:	6804      	ldr	r4, [r0, #0]
    p_reg->INTEN = mask;
   2eb10:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   2eb14:	6801      	ldr	r1, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2eb16:	2400      	movs	r4, #0
   2eb18:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
   2eb1c:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   2eb20:	f012 0f80 	tst.w	r2, #128	; 0x80
   2eb24:	d107      	bne.n	2eb36 <start_playback+0x50>
    nrf_pwm_task_trigger(p_instance->p_registers, starting_task);
   2eb26:	6802      	ldr	r2, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2eb28:	2101      	movs	r1, #1
   2eb2a:	50d1      	str	r1, [r2, r3]
    return 0;
   2eb2c:	2000      	movs	r0, #0
}
   2eb2e:	bc10      	pop	{r4}
   2eb30:	4770      	bx	lr
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   2eb32:	2192      	movs	r1, #146	; 0x92
   2eb34:	e7e1      	b.n	2eafa <start_playback+0x14>
            nrf_pwm_task_address_get(p_instance->p_registers, starting_task);
   2eb36:	6800      	ldr	r0, [r0, #0]
    return ((uint32_t)p_reg + (uint32_t)task);
   2eb38:	4418      	add	r0, r3
        return starting_task_address;
   2eb3a:	e7f8      	b.n	2eb2e <start_playback+0x48>

0002eb3c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   2eb3c:	b508      	push	{r3, lr}
  _DoInit();
   2eb3e:	f7f2 fd8d 	bl	2165c <_DoInit>
}
   2eb42:	bd08      	pop	{r3, pc}

0002eb44 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2eb44:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2eb46:	f7ff fff9 	bl	2eb3c <SEGGER_RTT_Init>

	return 0;
}
   2eb4a:	2000      	movs	r0, #0
   2eb4c:	bd08      	pop	{r3, pc}

0002eb4e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2eb4e:	b148      	cbz	r0, 2eb64 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2eb50:	68c3      	ldr	r3, [r0, #12]
   2eb52:	8818      	ldrh	r0, [r3, #0]
   2eb54:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2eb58:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2eb5c:	bf14      	ite	ne
   2eb5e:	2000      	movne	r0, #0
   2eb60:	2001      	moveq	r0, #1
   2eb62:	4770      	bx	lr
		return false;
   2eb64:	2000      	movs	r0, #0
}
   2eb66:	4770      	bx	lr

0002eb68 <k_heap_init>:
{
   2eb68:	b510      	push	{r4, lr}
   2eb6a:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2eb6e:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2eb70:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2eb72:	f7e2 f823 	bl	10bbc <sys_heap_init>
}
   2eb76:	bd10      	pop	{r4, pc}

0002eb78 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2eb78:	6902      	ldr	r2, [r0, #16]
   2eb7a:	6943      	ldr	r3, [r0, #20]
   2eb7c:	431a      	orrs	r2, r3
   2eb7e:	f012 0203 	ands.w	r2, r2, #3
   2eb82:	d10d      	bne.n	2eba0 <create_free_list+0x28>
	slab->free_list = NULL;
   2eb84:	2100      	movs	r1, #0
   2eb86:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2eb88:	e005      	b.n	2eb96 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2eb8a:	6981      	ldr	r1, [r0, #24]
   2eb8c:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2eb8e:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   2eb90:	6901      	ldr	r1, [r0, #16]
   2eb92:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2eb94:	3201      	adds	r2, #1
   2eb96:	68c1      	ldr	r1, [r0, #12]
   2eb98:	4291      	cmp	r1, r2
   2eb9a:	d8f6      	bhi.n	2eb8a <create_free_list+0x12>
	return 0;
   2eb9c:	2000      	movs	r0, #0
   2eb9e:	4770      	bx	lr
		return -EINVAL;
   2eba0:	f06f 0015 	mvn.w	r0, #21
}
   2eba4:	4770      	bx	lr

0002eba6 <k_mem_slab_init>:
{
   2eba6:	b510      	push	{r4, lr}
   2eba8:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   2ebaa:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   2ebac:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   2ebae:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   2ebb0:	2300      	movs	r3, #0
   2ebb2:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2ebb4:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   2ebb6:	f7ff ffdf 	bl	2eb78 <create_free_list>
	if (rc < 0) {
   2ebba:	2800      	cmp	r0, #0
   2ebbc:	db01      	blt.n	2ebc2 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   2ebbe:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   2ebc0:	6064      	str	r4, [r4, #4]
}
   2ebc2:	bd10      	pop	{r4, pc}

0002ebc4 <setup_thread_stack>:
{
   2ebc4:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2ebc6:	3207      	adds	r2, #7
   2ebc8:	f022 0207 	bic.w	r2, r2, #7
   2ebcc:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2ebd0:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   2ebd4:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   2ebd8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2ebdc:	2200      	movs	r2, #0
   2ebde:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   2ebe2:	18c8      	adds	r0, r1, r3
   2ebe4:	bc10      	pop	{r4}
   2ebe6:	4770      	bx	lr

0002ebe8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2ebe8:	f3ef 8005 	mrs	r0, IPSR
}
   2ebec:	3800      	subs	r0, #0
   2ebee:	bf18      	it	ne
   2ebf0:	2001      	movne	r0, #1
   2ebf2:	4770      	bx	lr

0002ebf4 <k_thread_name_get>:
}
   2ebf4:	3078      	adds	r0, #120	; 0x78
   2ebf6:	4770      	bx	lr

0002ebf8 <z_impl_k_thread_start>:
{
   2ebf8:	b508      	push	{r3, lr}
	z_sched_start(thread);
   2ebfa:	f7f4 ffa7 	bl	23b4c <z_sched_start>
}
   2ebfe:	bd08      	pop	{r3, pc}

0002ec00 <z_init_thread_base>:
{
   2ec00:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   2ec02:	2400      	movs	r4, #0
   2ec04:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2ec06:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2ec08:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   2ec0a:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   2ec0c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2ec0e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2ec10:	61c4      	str	r4, [r0, #28]
}
   2ec12:	bc10      	pop	{r4}
   2ec14:	4770      	bx	lr

0002ec16 <z_pm_save_idle_exit>:
{
   2ec16:	b508      	push	{r3, lr}
	pm_system_resume();
   2ec18:	f7e3 fb8e 	bl	12338 <pm_system_resume>
	sys_clock_idle_exit();
   2ec1c:	f7ff fad9 	bl	2e1d2 <sys_clock_idle_exit>
}
   2ec20:	bd08      	pop	{r3, pc}

0002ec22 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2ec22:	4288      	cmp	r0, r1
   2ec24:	da00      	bge.n	2ec28 <new_prio_for_inheritance+0x6>
   2ec26:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2ec28:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2ec2c:	db01      	blt.n	2ec32 <new_prio_for_inheritance+0x10>
   2ec2e:	4608      	mov	r0, r1
   2ec30:	4770      	bx	lr
   2ec32:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2ec36:	4770      	bx	lr

0002ec38 <adjust_owner_prio>:
{
   2ec38:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2ec3a:	6880      	ldr	r0, [r0, #8]
   2ec3c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ec40:	428b      	cmp	r3, r1
   2ec42:	d101      	bne.n	2ec48 <adjust_owner_prio+0x10>
	return false;
   2ec44:	2000      	movs	r0, #0
}
   2ec46:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2ec48:	f7f5 f8f0 	bl	23e2c <z_set_prio>
   2ec4c:	e7fb      	b.n	2ec46 <adjust_owner_prio+0xe>

0002ec4e <z_impl_k_mutex_init>:
{
   2ec4e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2ec50:	2000      	movs	r0, #0
   2ec52:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2ec54:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2ec56:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2ec58:	605b      	str	r3, [r3, #4]
}
   2ec5a:	4770      	bx	lr

0002ec5c <prepare_thread_to_run>:
{
   2ec5c:	b508      	push	{r3, lr}
   2ec5e:	2200      	movs	r2, #0
   2ec60:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2ec64:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2ec66:	f7f4 ff2d 	bl	23ac4 <z_ready_thread>
}
   2ec6a:	bd08      	pop	{r3, pc}

0002ec6c <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2ec6c:	b160      	cbz	r0, 2ec88 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ec6e:	6803      	ldr	r3, [r0, #0]
   2ec70:	f013 0f03 	tst.w	r3, #3
   2ec74:	d008      	beq.n	2ec88 <z_queue_node_peek+0x1c>
{
   2ec76:	b510      	push	{r4, lr}
		ret = anode->data;
   2ec78:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2ec7a:	b909      	cbnz	r1, 2ec80 <z_queue_node_peek+0x14>
		ret = anode->data;
   2ec7c:	4620      	mov	r0, r4
}
   2ec7e:	bd10      	pop	{r4, pc}
			k_free(anode);
   2ec80:	f000 f962 	bl	2ef48 <k_free>
		ret = anode->data;
   2ec84:	4620      	mov	r0, r4
   2ec86:	e7fa      	b.n	2ec7e <z_queue_node_peek+0x12>
}
   2ec88:	4770      	bx	lr

0002ec8a <z_impl_k_queue_init>:
	list->head = NULL;
   2ec8a:	2300      	movs	r3, #0
   2ec8c:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2ec8e:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
   2ec90:	6083      	str	r3, [r0, #8]
   2ec92:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
   2ec96:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2ec98:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
   2ec9a:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
   2ec9e:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
   2eca0:	6183      	str	r3, [r0, #24]
}
   2eca2:	4770      	bx	lr

0002eca4 <k_queue_append>:
{
   2eca4:	b500      	push	{lr}
   2eca6:	b083      	sub	sp, #12
   2eca8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2ecaa:	2301      	movs	r3, #1
   2ecac:	9300      	str	r3, [sp, #0]
   2ecae:	2300      	movs	r3, #0
   2ecb0:	4619      	mov	r1, r3
   2ecb2:	f7f3 fc8f 	bl	225d4 <queue_insert>
}
   2ecb6:	b003      	add	sp, #12
   2ecb8:	f85d fb04 	ldr.w	pc, [sp], #4

0002ecbc <k_queue_prepend>:
{
   2ecbc:	b500      	push	{lr}
   2ecbe:	b083      	sub	sp, #12
   2ecc0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2ecc2:	2100      	movs	r1, #0
   2ecc4:	9100      	str	r1, [sp, #0]
   2ecc6:	460b      	mov	r3, r1
   2ecc8:	f7f3 fc84 	bl	225d4 <queue_insert>
}
   2eccc:	b003      	add	sp, #12
   2ecce:	f85d fb04 	ldr.w	pc, [sp], #4

0002ecd2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2ecd2:	b15a      	cbz	r2, 2ecec <z_impl_k_sem_init+0x1a>
   2ecd4:	428a      	cmp	r2, r1
   2ecd6:	d30c      	bcc.n	2ecf2 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2ecd8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2ecda:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2ecdc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2ecde:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2ece0:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2ece4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2ece6:	6143      	str	r3, [r0, #20]
	return 0;
   2ece8:	2000      	movs	r0, #0
   2ecea:	4770      	bx	lr
		return -EINVAL;
   2ecec:	f06f 0015 	mvn.w	r0, #21
   2ecf0:	4770      	bx	lr
   2ecf2:	f06f 0015 	mvn.w	r0, #21
}
   2ecf6:	4770      	bx	lr

0002ecf8 <cancel_async_locked>:
{
   2ecf8:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   2ecfa:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ecfc:	f012 0f02 	tst.w	r2, #2
   2ed00:	d009      	beq.n	2ed16 <cancel_async_locked+0x1e>
	return *flagp;
   2ed02:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   2ed04:	f012 000f 	ands.w	r0, r2, #15
   2ed08:	d037      	beq.n	2ed7a <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   2ed0a:	f042 0202 	orr.w	r2, r2, #2
   2ed0e:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2ed10:	f002 000f 	and.w	r0, r2, #15
	return ret;
   2ed14:	4770      	bx	lr
{
   2ed16:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   2ed18:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   2ed1a:	f022 0104 	bic.w	r1, r2, #4
   2ed1e:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2ed20:	f012 0f04 	tst.w	r2, #4
   2ed24:	d011      	beq.n	2ed4a <cancel_async_locked+0x52>
   2ed26:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ed2a:	2100      	movs	r1, #0
   2ed2c:	b16a      	cbz	r2, 2ed4a <cancel_async_locked+0x52>
   2ed2e:	4290      	cmp	r0, r2
   2ed30:	d002      	beq.n	2ed38 <cancel_async_locked+0x40>
   2ed32:	4611      	mov	r1, r2
   2ed34:	6812      	ldr	r2, [r2, #0]
   2ed36:	e7f9      	b.n	2ed2c <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2ed38:	b191      	cbz	r1, 2ed60 <cancel_async_locked+0x68>
	return node->next;
   2ed3a:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   2ed3c:	600a      	str	r2, [r1, #0]
	return list->tail;
   2ed3e:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2ed42:	4293      	cmp	r3, r2
   2ed44:	d016      	beq.n	2ed74 <cancel_async_locked+0x7c>
	parent->next = child;
   2ed46:	2200      	movs	r2, #0
   2ed48:	601a      	str	r2, [r3, #0]
	return *flagp;
   2ed4a:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2ed4c:	f012 000f 	ands.w	r0, r2, #15
   2ed50:	d004      	beq.n	2ed5c <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   2ed52:	f042 0202 	orr.w	r2, r2, #2
   2ed56:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2ed58:	f002 000f 	and.w	r0, r2, #15
}
   2ed5c:	bc10      	pop	{r4}
   2ed5e:	4770      	bx	lr
	return node->next;
   2ed60:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   2ed62:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   2ed66:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2ed6a:	428b      	cmp	r3, r1
   2ed6c:	d1eb      	bne.n	2ed46 <cancel_async_locked+0x4e>
	list->tail = node;
   2ed6e:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   2ed72:	e7e8      	b.n	2ed46 <cancel_async_locked+0x4e>
	list->tail = node;
   2ed74:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   2ed78:	e7e5      	b.n	2ed46 <cancel_async_locked+0x4e>
   2ed7a:	4770      	bx	lr

0002ed7c <cancel_delayable_async_locked>:
{
   2ed7c:	b510      	push	{r4, lr}
   2ed7e:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2ed80:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2ed82:	f023 0208 	bic.w	r2, r3, #8
   2ed86:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ed88:	f013 0f08 	tst.w	r3, #8
   2ed8c:	d103      	bne.n	2ed96 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   2ed8e:	4620      	mov	r0, r4
   2ed90:	f7ff ffb2 	bl	2ecf8 <cancel_async_locked>
}
   2ed94:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   2ed96:	3010      	adds	r0, #16
   2ed98:	f7f5 fe32 	bl	24a00 <z_abort_timeout>
		ret = true;
   2ed9c:	e7f7      	b.n	2ed8e <cancel_delayable_async_locked+0x12>

0002ed9e <thread_active_elsewhere>:
}
   2ed9e:	2000      	movs	r0, #0
   2eda0:	4770      	bx	lr

0002eda2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2eda2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2eda6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2edaa:	4283      	cmp	r3, r0
   2edac:	d001      	beq.n	2edb2 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2edae:	1ac0      	subs	r0, r0, r3
   2edb0:	4770      	bx	lr
	return 0;
   2edb2:	2000      	movs	r0, #0
}
   2edb4:	4770      	bx	lr

0002edb6 <z_reschedule_irqlock>:
{
   2edb6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2edb8:	4603      	mov	r3, r0
   2edba:	b920      	cbnz	r0, 2edc6 <z_reschedule_irqlock+0x10>
   2edbc:	f3ef 8205 	mrs	r2, IPSR
   2edc0:	b942      	cbnz	r2, 2edd4 <z_reschedule_irqlock+0x1e>
   2edc2:	2201      	movs	r2, #1
   2edc4:	e000      	b.n	2edc8 <z_reschedule_irqlock+0x12>
   2edc6:	2200      	movs	r2, #0
	if (resched(key)) {
   2edc8:	b932      	cbnz	r2, 2edd8 <z_reschedule_irqlock+0x22>
   2edca:	f383 8811 	msr	BASEPRI, r3
   2edce:	f3bf 8f6f 	isb	sy
}
   2edd2:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2edd4:	2200      	movs	r2, #0
   2edd6:	e7f7      	b.n	2edc8 <z_reschedule_irqlock+0x12>
   2edd8:	4618      	mov	r0, r3
   2edda:	f7e4 fab1 	bl	13340 <arch_swap>
	return ret;
   2edde:	e7f8      	b.n	2edd2 <z_reschedule_irqlock+0x1c>

0002ede0 <z_priq_dumb_best>:
{
   2ede0:	4603      	mov	r3, r0
	return list->head == list;
   2ede2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ede4:	4283      	cmp	r3, r0
   2ede6:	d000      	beq.n	2edea <z_priq_dumb_best+0xa>
}
   2ede8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2edea:	2000      	movs	r0, #0
	return thread;
   2edec:	e7fc      	b.n	2ede8 <z_priq_dumb_best+0x8>

0002edee <z_unpend_all>:
{
   2edee:	b538      	push	{r3, r4, r5, lr}
   2edf0:	4605      	mov	r5, r0
	int need_sched = 0;
   2edf2:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2edf4:	e006      	b.n	2ee04 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   2edf6:	4620      	mov	r0, r4
   2edf8:	f7f4 fcb0 	bl	2375c <z_unpend_thread>
		z_ready_thread(thread);
   2edfc:	4620      	mov	r0, r4
   2edfe:	f7f4 fe61 	bl	23ac4 <z_ready_thread>
		need_sched = 1;
   2ee02:	2001      	movs	r0, #1
	return list->head == list;
   2ee04:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ee06:	42a5      	cmp	r5, r4
   2ee08:	d001      	beq.n	2ee0e <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ee0a:	2c00      	cmp	r4, #0
   2ee0c:	d1f3      	bne.n	2edf6 <z_unpend_all+0x8>
}
   2ee0e:	bd38      	pop	{r3, r4, r5, pc}

0002ee10 <remove_timeout>:
{
   2ee10:	b538      	push	{r3, r4, r5, lr}
   2ee12:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2ee14:	f7f5 fcd2 	bl	247bc <next>
   2ee18:	b148      	cbz	r0, 2ee2e <remove_timeout+0x1e>
   2ee1a:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2ee1c:	6920      	ldr	r0, [r4, #16]
   2ee1e:	6965      	ldr	r5, [r4, #20]
   2ee20:	6913      	ldr	r3, [r2, #16]
   2ee22:	6951      	ldr	r1, [r2, #20]
   2ee24:	181b      	adds	r3, r3, r0
   2ee26:	eb45 0101 	adc.w	r1, r5, r1
   2ee2a:	6113      	str	r3, [r2, #16]
   2ee2c:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2ee2e:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2ee30:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   2ee32:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ee34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ee36:	2300      	movs	r3, #0
   2ee38:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2ee3a:	6063      	str	r3, [r4, #4]
}
   2ee3c:	bd38      	pop	{r3, r4, r5, pc}

0002ee3e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2ee3e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2ee40:	f7f5 ff66 	bl	24d10 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2ee44:	bd08      	pop	{r3, pc}

0002ee46 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2ee46:	b900      	cbnz	r0, 2ee4a <z_impl_k_busy_wait+0x4>
   2ee48:	4770      	bx	lr
{
   2ee4a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2ee4c:	f7e4 ffce 	bl	13dec <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2ee50:	bd08      	pop	{r3, pc}

0002ee52 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2ee52:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ee54:	f1b1 3fff 	cmp.w	r1, #4294967295
   2ee58:	bf08      	it	eq
   2ee5a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2ee5e:	d024      	beq.n	2eeaa <sys_clock_timeout_end_calc+0x58>
   2ee60:	4604      	mov	r4, r0
   2ee62:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ee64:	ea54 0105 	orrs.w	r1, r4, r5
   2ee68:	d00d      	beq.n	2ee86 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2ee6a:	f06f 0101 	mvn.w	r1, #1
   2ee6e:	1a0a      	subs	r2, r1, r0
   2ee70:	f04f 31ff 	mov.w	r1, #4294967295
   2ee74:	eb61 0305 	sbc.w	r3, r1, r5
   2ee78:	2a00      	cmp	r2, #0
   2ee7a:	f173 0100 	sbcs.w	r1, r3, #0
   2ee7e:	db05      	blt.n	2ee8c <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2ee80:	4610      	mov	r0, r2
   2ee82:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2ee84:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2ee86:	f7f5 ff43 	bl	24d10 <sys_clock_tick_get>
   2ee8a:	e7fb      	b.n	2ee84 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   2ee8c:	f7f5 ff40 	bl	24d10 <sys_clock_tick_get>
   2ee90:	4623      	mov	r3, r4
   2ee92:	462a      	mov	r2, r5
   2ee94:	2c01      	cmp	r4, #1
   2ee96:	f175 0400 	sbcs.w	r4, r5, #0
   2ee9a:	db03      	blt.n	2eea4 <sys_clock_timeout_end_calc+0x52>
   2ee9c:	18c0      	adds	r0, r0, r3
   2ee9e:	eb42 0101 	adc.w	r1, r2, r1
   2eea2:	e7ef      	b.n	2ee84 <sys_clock_timeout_end_calc+0x32>
   2eea4:	2301      	movs	r3, #1
   2eea6:	2200      	movs	r2, #0
   2eea8:	e7f8      	b.n	2ee9c <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   2eeaa:	f04f 30ff 	mov.w	r0, #4294967295
   2eeae:	4601      	mov	r1, r0
   2eeb0:	e7e8      	b.n	2ee84 <sys_clock_timeout_end_calc+0x32>

0002eeb2 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2eeb2:	b108      	cbz	r0, 2eeb8 <poller_thread+0x6>
   2eeb4:	3860      	subs	r0, #96	; 0x60
   2eeb6:	4770      	bx	lr
}
   2eeb8:	4770      	bx	lr

0002eeba <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2eeba:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2eebc:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2eebe:	7823      	ldrb	r3, [r4, #0]
   2eec0:	b173      	cbz	r3, 2eee0 <signal_triggered_work+0x26>
   2eec2:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2eec6:	b15d      	cbz	r5, 2eee0 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2eec8:	f1a4 0614 	sub.w	r6, r4, #20
   2eecc:	f104 0014 	add.w	r0, r4, #20
   2eed0:	f7f5 fd96 	bl	24a00 <z_abort_timeout>
		twork->poll_result = 0;
   2eed4:	2300      	movs	r3, #0
   2eed6:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2eed8:	4631      	mov	r1, r6
   2eeda:	4628      	mov	r0, r5
   2eedc:	f7f4 f828 	bl	22f30 <k_work_submit_to_queue>
	}

	return 0;
}
   2eee0:	2000      	movs	r0, #0
   2eee2:	bd70      	pop	{r4, r5, r6, pc}

0002eee4 <signal_poll_event>:
{
   2eee4:	b570      	push	{r4, r5, r6, lr}
   2eee6:	4604      	mov	r4, r0
   2eee8:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2eeea:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   2eeec:	b1d6      	cbz	r6, 2ef24 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   2eeee:	7873      	ldrb	r3, [r6, #1]
   2eef0:	2b01      	cmp	r3, #1
   2eef2:	d00d      	beq.n	2ef10 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2eef4:	2b02      	cmp	r3, #2
   2eef6:	d012      	beq.n	2ef1e <signal_poll_event+0x3a>
		poller->is_polling = false;
   2eef8:	2000      	movs	r0, #0
   2eefa:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   2eefc:	2300      	movs	r3, #0
   2eefe:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2ef00:	68e3      	ldr	r3, [r4, #12]
   2ef02:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2ef06:	430d      	orrs	r5, r1
   2ef08:	f365 3352 	bfi	r3, r5, #13, #6
   2ef0c:	60e3      	str	r3, [r4, #12]
}
   2ef0e:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2ef10:	f7f5 ff46 	bl	24da0 <signal_poller>
		poller->is_polling = false;
   2ef14:	2300      	movs	r3, #0
   2ef16:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2ef18:	4298      	cmp	r0, r3
   2ef1a:	daef      	bge.n	2eefc <signal_poll_event+0x18>
   2ef1c:	e7f7      	b.n	2ef0e <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   2ef1e:	f7ff ffcc 	bl	2eeba <signal_triggered_work>
   2ef22:	e7f7      	b.n	2ef14 <signal_poll_event+0x30>
	int retcode = 0;
   2ef24:	2000      	movs	r0, #0
   2ef26:	e7e9      	b.n	2eefc <signal_poll_event+0x18>

0002ef28 <z_handle_obj_poll_events>:
{
   2ef28:	b508      	push	{r3, lr}
   2ef2a:	4603      	mov	r3, r0
	return list->head == list;
   2ef2c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2ef2e:	4283      	cmp	r3, r0
   2ef30:	d009      	beq.n	2ef46 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   2ef32:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2ef34:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2ef36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ef38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ef3a:	2300      	movs	r3, #0
   2ef3c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2ef3e:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   2ef40:	b108      	cbz	r0, 2ef46 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   2ef42:	f7ff ffcf 	bl	2eee4 <signal_poll_event>
}
   2ef46:	bd08      	pop	{r3, pc}

0002ef48 <k_free>:
	if (ptr != NULL) {
   2ef48:	b130      	cbz	r0, 2ef58 <k_free+0x10>
{
   2ef4a:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   2ef4c:	1f01      	subs	r1, r0, #4
   2ef4e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2ef52:	f7f2 fe57 	bl	21c04 <k_heap_free>
}
   2ef56:	bd08      	pop	{r3, pc}
   2ef58:	4770      	bx	lr

0002ef5a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2ef5a:	4770      	bx	lr

0002ef5c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2ef5c:	f7f1 bdfc 	b.w	20b58 <SystemInit>
